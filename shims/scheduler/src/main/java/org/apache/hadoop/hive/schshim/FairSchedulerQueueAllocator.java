begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|schshim
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AllocationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AllocationFileLoaderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_class
specifier|public
class|class
name|FairSchedulerQueueAllocator
implements|implements
name|QueueAllocator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FairSchedulerQueueAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|YARN_SCHEDULER_FILE_PROPERTY
init|=
literal|"yarn.scheduler.fair.allocation.file"
decl_stmt|;
specifier|private
name|String
name|currentlyWatching
decl_stmt|;
specifier|private
name|AllocationFileLoaderService
name|loaderService
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|AllocationConfiguration
argument_list|>
name|allocationConfiguration
init|=
operator|new
name|AtomicReference
argument_list|<
name|AllocationConfiguration
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Generates a Yarn FairScheduler queue resolver based on 'fair-scheduler.xml'.    * @param config The HiveConf configuration.    * @param username      The user to configure the job for.    * @return Returns a configured allocation resolver.    * @throws IOException    */
specifier|public
specifier|synchronized
name|AtomicReference
argument_list|<
name|AllocationConfiguration
argument_list|>
name|makeConfigurationFor
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|String
name|username
parameter_list|)
throws|throws
name|IOException
block|{
name|updateWatcher
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|allocationConfiguration
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|refresh
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|updateWatcher
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|String
name|getCurrentlyWatchingFile
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentlyWatching
return|;
block|}
specifier|private
name|void
name|updateWatcher
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|loaderService
operator|!=
literal|null
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|currentlyWatching
argument_list|,
name|config
operator|.
name|get
argument_list|(
name|YARN_SCHEDULER_FILE_PROPERTY
argument_list|)
argument_list|)
condition|)
return|return;
name|this
operator|.
name|currentlyWatching
operator|=
name|config
operator|.
name|get
argument_list|(
name|YARN_SCHEDULER_FILE_PROPERTY
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|loaderService
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|loaderService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|loaderService
operator|=
operator|new
name|AllocationFileLoaderService
argument_list|()
expr_stmt|;
name|this
operator|.
name|loaderService
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|loaderService
operator|.
name|setReloadListener
argument_list|(
operator|new
name|AllocationFileLoaderService
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReload
parameter_list|(
name|AllocationConfiguration
name|allocs
parameter_list|)
block|{
name|allocationConfiguration
operator|.
name|set
argument_list|(
name|allocs
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|loaderService
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load queue allocations"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocationConfiguration
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|allocationConfiguration
operator|.
name|set
argument_list|(
operator|new
name|AllocationConfiguration
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|loaderService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

