begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|schshim
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|SchedulerShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AllocationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AllocationFileLoaderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|QueuePlacementPolicy
import|;
end_import

begin_class
specifier|public
class|class
name|FairSchedulerShim
implements|implements
name|SchedulerShim
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FairSchedulerShim
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MR2_JOB_QUEUE_PROPERTY
init|=
literal|"mapreduce.job.queuename"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|refreshDefaultQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|requestedQueue
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|AllocationConfiguration
argument_list|>
name|allocConf
init|=
operator|new
name|AtomicReference
argument_list|<
name|AllocationConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|AllocationFileLoaderService
name|allocsLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|allocsLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allocsLoader
operator|.
name|setReloadListener
argument_list|(
operator|new
name|AllocationFileLoaderService
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReload
parameter_list|(
name|AllocationConfiguration
name|allocs
parameter_list|)
block|{
name|allocConf
operator|.
name|set
argument_list|(
name|allocs
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|allocsLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to load queue allocations"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|allocConf
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|allocConf
operator|.
name|set
argument_list|(
operator|new
name|AllocationConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueuePlacementPolicy
name|queuePolicy
init|=
name|allocConf
operator|.
name|get
argument_list|()
operator|.
name|getPlacementPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|queuePolicy
operator|!=
literal|null
condition|)
block|{
name|requestedQueue
operator|=
name|queuePolicy
operator|.
name|assignAppToQueue
argument_list|(
name|requestedQueue
argument_list|,
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|requestedQueue
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting queue name to "
operator|+
name|requestedQueue
operator|+
literal|" for user "
operator|+
name|userName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MR2_JOB_QUEUE_PROPERTY
argument_list|,
name|requestedQueue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

