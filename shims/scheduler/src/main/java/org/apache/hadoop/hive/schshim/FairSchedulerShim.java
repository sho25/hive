begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|schshim
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|SchedulerShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|QueuePlacementPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/*  * FairSchedulerShim monitors changes in fair-scheduler.xml (if it exists) to allow for dynamic  * reloading and queue resolution. When changes to the fair-scheduler.xml file are detected, the  * cached queue resolution policies for each user are cleared, and then re-cached/validated on job-submit.  */
end_comment

begin_class
specifier|public
class|class
name|FairSchedulerShim
implements|implements
name|SchedulerShim
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FairSchedulerShim
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MR2_JOB_QUEUE_PROPERTY
init|=
literal|"mapreduce.job.queuename"
decl_stmt|;
specifier|private
specifier|final
name|QueueAllocator
name|queueAllocator
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|public
name|FairSchedulerShim
parameter_list|(
name|QueueAllocator
name|queueAllocator
parameter_list|)
block|{
name|this
operator|.
name|queueAllocator
operator|=
name|queueAllocator
expr_stmt|;
block|}
specifier|public
name|FairSchedulerShim
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|FairSchedulerQueueAllocator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Applies the default YARN fair scheduler queue for a user.    * @param conf - the current HiveConf configuration.    * @param forUser - the user to configure the default queue for.    * @throws IOException    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|refreshDefaultQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|forUser
parameter_list|)
throws|throws
name|IOException
block|{
name|setJobQueueForUserInternal
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|,
name|forUser
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the YARN fair scheduler queue configuration.    * @param conf - the current HiveConf configuration.    * @param forUser - the user to configure the default queue for.    * @throws IOException    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|validateQueueConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|forUser
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Currently, "validation" is just to ensure that the client can still set the same queue that they
comment|// could previously. In almost all situations, this should be essentially a no-op (unless the fair-scheduler.xml
comment|// file changes in such a way as this is disallowed). Currently this implementation is just inteded to allow us
comment|// to validate that the user's configuration is at least reasonable on a per-request basis beyond from the already-
comment|// occurring per session setup.
comment|// TODO: Build out ACL enforcement.
name|String
name|currentJobQueue
init|=
name|conf
operator|.
name|get
argument_list|(
name|MR2_JOB_QUEUE_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentJobQueue
operator|!=
literal|null
operator|&&
operator|!
name|currentJobQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setJobQueueForUserInternal
argument_list|(
name|conf
argument_list|,
name|currentJobQueue
argument_list|,
name|forUser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refreshDefaultQueue
argument_list|(
name|conf
argument_list|,
name|forUser
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|QueueAllocator
name|getQueueAllocator
parameter_list|()
block|{
return|return
name|this
operator|.
name|queueAllocator
return|;
block|}
specifier|private
name|void
name|setJobQueueForUserInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|forUser
parameter_list|)
throws|throws
name|IOException
block|{
name|QueuePlacementPolicy
name|queuePolicy
init|=
name|queueAllocator
operator|.
name|makeConfigurationFor
argument_list|(
name|conf
argument_list|,
name|forUser
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getPlacementPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|queuePolicy
operator|!=
literal|null
condition|)
block|{
name|String
name|requestedQueue
init|=
name|queuePolicy
operator|.
name|assignAppToQueue
argument_list|(
name|queueName
argument_list|,
name|forUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|requestedQueue
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting queue name to: '{}' for user '{}'"
argument_list|,
name|requestedQueue
argument_list|,
name|forUser
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MR2_JOB_QUEUE_PROPERTY
argument_list|,
name|requestedQueue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to set queue: {} for user: {}, resetting to user's default queue."
argument_list|,
name|requestedQueue
argument_list|,
name|forUser
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MR2_JOB_QUEUE_PROPERTY
argument_list|,
name|queuePolicy
operator|.
name|assignAppToQueue
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|,
name|forUser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

