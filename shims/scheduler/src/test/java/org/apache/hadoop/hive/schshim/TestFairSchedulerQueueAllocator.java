begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|schshim
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AllocationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|QueuePlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TestFairSchedulerQueueAllocator
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY
init|=
literal|""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|USERNAME_ARGUMENT_INDEX
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|YARN_SCHEDULER_FILE_PROPERTY
init|=
literal|"yarn.scheduler.fair.allocation.file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MR2_JOB_QUEUE_PROPERTY
init|=
literal|"mapreduce.job.queuename"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testChangingLastUsedHiveConfigurationStringDirectly
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FairSchedulerShim
name|shim
init|=
operator|new
name|FairSchedulerShim
argument_list|()
decl_stmt|;
name|FairSchedulerQueueAllocator
name|allocator
init|=
operator|(
name|FairSchedulerQueueAllocator
operator|)
name|shim
operator|.
name|getQueueAllocator
argument_list|()
decl_stmt|;
comment|// On initialization should be uncached.
name|assertNull
argument_list|(
name|allocator
operator|.
name|getCurrentlyWatchingFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// Per job submission the location of fair-scheduler should be updated.
for|for
control|(
name|String
name|location
range|:
operator|new
name|String
index|[]
block|{
literal|"/first"
block|,
literal|"/second"
block|,
literal|"third/fourth"
block|}
control|)
block|{
for|for
control|(
name|String
name|user
range|:
operator|new
name|String
index|[]
block|{
literal|"firstUser"
block|,
literal|"secondUser"
block|,
literal|"thirdUser"
block|}
control|)
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YARN_SCHEDULER_FILE_PROPERTY
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|shim
operator|.
name|refreshDefaultQueue
argument_list|(
name|configuration
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocator
operator|.
name|getCurrentlyWatchingFile
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNeverBeforeSeenUsersEffectOnLastUsedHiveConfigurationString
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FairSchedulerShim
name|shim
init|=
operator|new
name|FairSchedulerShim
argument_list|()
decl_stmt|;
name|FairSchedulerQueueAllocator
name|allocator
init|=
operator|(
name|FairSchedulerQueueAllocator
operator|)
name|shim
operator|.
name|getQueueAllocator
argument_list|()
decl_stmt|;
comment|// Per job submission the location of fair-scheduler should be updated.
name|configuration
operator|.
name|set
argument_list|(
name|YARN_SCHEDULER_FILE_PROPERTY
argument_list|,
literal|"/some/unchanging/location"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
operator|new
name|String
index|[]
block|{
literal|"first"
block|,
literal|"second"
block|,
literal|"third"
block|,
literal|"fourth"
block|,
literal|"fifth"
block|}
control|)
block|{
name|shim
operator|.
name|refreshDefaultQueue
argument_list|(
name|configuration
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocator
operator|.
name|getCurrentlyWatchingFile
argument_list|()
argument_list|,
literal|"/some/unchanging/location"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|QueueAllocator
name|allocator
init|=
name|mock
argument_list|(
name|QueueAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|allocator
operator|.
name|makeConfigurationFor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|AtomicReference
argument_list|<
name|AllocationConfiguration
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AtomicReference
argument_list|<
name|AllocationConfiguration
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Capture which user is causing the reset for verification purposes.
specifier|final
name|String
name|username
init|=
operator|(
name|String
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
name|USERNAME_ARGUMENT_INDEX
index|]
decl_stmt|;
name|AllocationConfiguration
name|allocationConfiguration
init|=
name|mock
argument_list|(
name|AllocationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|allocationConfiguration
operator|.
name|getPlacementPolicy
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|QueuePlacementPolicy
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QueuePlacementPolicy
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|QueuePlacementPolicy
name|placementPolicy
init|=
name|mock
argument_list|(
name|QueuePlacementPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|placementPolicy
operator|.
name|assignAppToQueue
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"queue.for.%s"
argument_list|,
name|username
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|placementPolicy
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|allocationConfiguration
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|FairSchedulerShim
name|shim
init|=
operator|new
name|FairSchedulerShim
argument_list|(
name|allocator
argument_list|)
decl_stmt|;
comment|// Per job submission the location of fair-scheduler should be updated.
name|configuration
operator|.
name|set
argument_list|(
name|YARN_SCHEDULER_FILE_PROPERTY
argument_list|,
literal|"/some/file/location"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
operator|new
name|String
index|[]
block|{
literal|"first"
block|,
literal|"second"
block|,
literal|"third"
block|,
literal|"fourth"
block|,
literal|"fifth"
block|}
control|)
block|{
name|shim
operator|.
name|refreshDefaultQueue
argument_list|(
name|configuration
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|String
name|queueName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"queue.for.%s"
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|MR2_JOB_QUEUE_PROPERTY
argument_list|)
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

