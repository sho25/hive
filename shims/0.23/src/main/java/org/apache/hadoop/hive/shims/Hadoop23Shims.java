begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DefaultFileAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ProxyFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Trash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|WebHCatJTShim23
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|TotalOrderPartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|JobContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|test
operator|.
name|MiniTezCluster
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Implemention of shims against Hadoop 0.23.0.  */
end_comment

begin_class
specifier|public
class|class
name|Hadoop23Shims
extends|extends
name|HadoopShimsSecure
block|{
name|HadoopShims
operator|.
name|MiniDFSShim
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|zeroCopy
decl_stmt|;
specifier|public
name|Hadoop23Shims
parameter_list|()
block|{
name|boolean
name|zcr
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.fs.CacheFlag"
argument_list|,
literal|false
argument_list|,
name|ShimLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|zcr
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ce
parameter_list|)
block|{     }
name|this
operator|.
name|zeroCopy
operator|=
name|zcr
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTaskAttemptLogUrl
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|taskTrackerHttpAddress
parameter_list|,
name|String
name|taskAttemptId
parameter_list|)
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.framework.name"
argument_list|)
operator|!=
literal|null
operator|&&
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.framework.name"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"yarn"
argument_list|)
condition|)
block|{
comment|// if the cluster is running in MR2 mode, return null
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't fetch tasklog: TaskLogServlet is not supported in MR2 mode."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// Was using Hadoop-internal API to get tasklogs, disable until  MAPREDUCE-5857 is fixed.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't fetch tasklog: TaskLogServlet is not supported in MR1 mode."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|JobTrackerState
name|getJobTrackerState
parameter_list|(
name|ClusterStatus
name|clusterStatus
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|clusterStatus
operator|.
name|getJobTrackerStatus
argument_list|()
condition|)
block|{
case|case
name|INITIALIZING
case|:
return|return
name|JobTrackerState
operator|.
name|INITIALIZING
return|;
case|case
name|RUNNING
case|:
return|return
name|JobTrackerState
operator|.
name|RUNNING
return|;
default|default:
name|String
name|errorMsg
init|=
literal|"Unrecognized JobTracker state: "
operator|+
name|clusterStatus
operator|.
name|getJobTrackerStatus
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
name|newTaskAttemptContext
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Progressable
name|progressable
parameter_list|)
block|{
name|TaskAttemptID
name|taskAttemptId
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskAttemptId
operator|==
literal|null
condition|)
block|{
comment|// If the caller is not within a mapper/reducer (if reading from the table via CliDriver),
comment|// then TaskAttemptID.forname() may return NULL. Fall back to using default constructor.
name|taskAttemptId
operator|=
operator|new
name|TaskAttemptID
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskAttemptId
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|progress
parameter_list|()
block|{
name|progressable
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttemptID
name|newTaskAttemptID
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|int
name|taskId
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
operator|new
name|TaskAttemptID
argument_list|(
name|jobId
operator|.
name|getJtIdentifier
argument_list|()
argument_list|,
name|jobId
operator|.
name|getId
argument_list|()
argument_list|,
name|isMap
condition|?
name|TaskType
operator|.
name|MAP
else|:
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|taskId
argument_list|,
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
name|newJobContext
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
return|return
operator|new
name|JobContextImpl
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocalMode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
literal|"local"
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.framework.name"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJobLauncherRpcAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.address"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setJobLauncherRpcAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"local"
argument_list|)
condition|)
block|{
comment|// LocalClientProtocolProvider expects both parameters to be 'local'.
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.framework.name"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.jobtracker.address"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.framework.name"
argument_list|,
literal|"yarn"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.address"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJobLauncherHttpAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.webapp.address"
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isExtendedAclEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"dfs.namenode.acls.enabled"
argument_list|)
argument_list|,
literal|"true"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getDefaultReplication
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveToAppropriateTrash
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Trash
operator|.
name|moveToAppropriateTrash
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTotalOrderPartitionFile
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Path
name|partitionFile
parameter_list|)
block|{
name|TotalOrderPartitioner
operator|.
name|setPartitionFile
argument_list|(
name|jobConf
argument_list|,
name|partitionFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|LongWritable
argument_list|>
name|getLongComparator
parameter_list|()
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|LongWritable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|LongWritable
name|o1
parameter_list|,
name|LongWritable
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a shim to wrap MiniMrCluster    */
annotation|@
name|Override
specifier|public
name|MiniMrShim
name|getMiniMrCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numberOfTaskTrackers
parameter_list|,
name|String
name|nameNode
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MiniMrShim
argument_list|(
name|conf
argument_list|,
name|numberOfTaskTrackers
argument_list|,
name|nameNode
argument_list|,
name|numDir
argument_list|)
return|;
block|}
comment|/**    * Shim for MiniMrCluster    */
specifier|public
class|class
name|MiniMrShim
implements|implements
name|HadoopShims
operator|.
name|MiniMrShim
block|{
specifier|private
specifier|final
name|MiniMRCluster
name|mr
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|MiniMrShim
parameter_list|()
block|{
name|mr
operator|=
literal|null
expr_stmt|;
name|conf
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|MiniMrShim
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numberOfTaskTrackers
parameter_list|,
name|String
name|nameNode
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jConf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.queues"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.default.capacity"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|numberOfTaskTrackers
argument_list|,
name|nameNode
argument_list|,
name|numDir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getJobTrackerPort
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
name|String
name|address
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.address"
argument_list|)
decl_stmt|;
name|address
operator|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|address
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|address
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid YARN resource manager port."
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|address
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|JobConf
name|jConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|jConf
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|pair
operator|.
name|getKey
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns a shim to wrap MiniMrTez    */
annotation|@
name|Override
specifier|public
name|MiniMrShim
name|getMiniTezCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numberOfTaskTrackers
parameter_list|,
name|String
name|nameNode
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MiniTezShim
argument_list|(
name|conf
argument_list|,
name|numberOfTaskTrackers
argument_list|,
name|nameNode
argument_list|,
name|numDir
argument_list|)
return|;
block|}
comment|/**    * Shim for MiniTezCluster    */
specifier|public
class|class
name|MiniTezShim
extends|extends
name|Hadoop23Shims
operator|.
name|MiniMrShim
block|{
specifier|private
specifier|final
name|MiniTezCluster
name|mr
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|MiniTezShim
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numberOfTaskTrackers
parameter_list|,
name|String
name|nameNode
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|IOException
block|{
name|mr
operator|=
operator|new
name|MiniTezCluster
argument_list|(
literal|"hive"
argument_list|,
name|numberOfTaskTrackers
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|nameNode
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
literal|"/apps_staging_dir"
argument_list|)
expr_stmt|;
name|mr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mr
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|mr
operator|.
name|getConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getJobTrackerPort
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
name|String
name|address
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.address"
argument_list|)
decl_stmt|;
name|address
operator|=
name|StringUtils
operator|.
name|substringAfterLast
argument_list|(
name|address
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|address
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid YARN resource manager port."
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|address
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|mr
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Configuration
name|config
init|=
name|mr
operator|.
name|getConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|config
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|pair
operator|.
name|getKey
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|jarPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs:///user/hive"
argument_list|)
decl_stmt|;
name|Path
name|hdfsPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs:///user/"
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|jarPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|jarPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.jar.directory"
argument_list|,
name|jarPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|jarPath
argument_list|)
expr_stmt|;
name|hdfsPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.user.install.directory"
argument_list|,
name|hdfsPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Don't move this code to the parent class. There's a binary
comment|// incompatibility between hadoop 1 and 2 wrt MiniDFSCluster and we
comment|// need to have two different shim classes even though they are
comment|// exactly the same.
annotation|@
name|Override
specifier|public
name|HadoopShims
operator|.
name|MiniDFSShim
name|getMiniDfs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSShim
argument_list|(
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
name|racks
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cluster
return|;
block|}
comment|/**    * MiniDFSShim.    *    */
specifier|public
class|class
name|MiniDFSShim
implements|implements
name|HadoopShims
operator|.
name|MiniDFSShim
block|{
specifier|private
specifier|final
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|public
name|MiniDFSShim
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|cluster
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|volatile
name|HCatHadoopShims
name|hcatShimInstance
decl_stmt|;
annotation|@
name|Override
specifier|public
name|HCatHadoopShims
name|getHCatShim
parameter_list|()
block|{
if|if
condition|(
name|hcatShimInstance
operator|==
literal|null
condition|)
block|{
name|hcatShimInstance
operator|=
operator|new
name|HCatHadoopShims23
argument_list|()
expr_stmt|;
block|}
return|return
name|hcatShimInstance
return|;
block|}
specifier|private
specifier|final
class|class
name|HCatHadoopShims23
implements|implements
name|HCatHadoopShims
block|{
annotation|@
name|Override
specifier|public
name|TaskID
name|createTaskID
parameter_list|()
block|{
return|return
operator|new
name|TaskID
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttemptID
name|createTaskAttemptID
parameter_list|()
block|{
return|return
operator|new
name|TaskAttemptID
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
name|createTaskAttemptContext
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|taskId
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
argument_list|(
name|conf
operator|instanceof
name|JobConf
condition|?
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
else|:
name|conf
argument_list|,
name|taskId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptContext
name|createTaskAttemptContext
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
name|conf
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
name|taskId
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptContext
name|newContext
init|=
literal|null
decl_stmt|;
try|try
block|{
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
name|construct
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptContextImpl
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
operator|.
name|class
argument_list|,
name|Reporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|construct
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|newContext
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptContext
operator|)
name|construct
operator|.
name|newInstance
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|,
name|taskId
argument_list|,
operator|(
name|Reporter
operator|)
name|progressable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|newContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|JobContext
name|createJobContext
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|JobID
name|jobId
parameter_list|)
block|{
return|return
operator|new
name|JobContextImpl
argument_list|(
name|conf
operator|instanceof
name|JobConf
condition|?
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
else|:
name|conf
argument_list|,
name|jobId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobContext
name|createJobContext
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
name|conf
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobId
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobContextImpl
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|,
name|jobId
argument_list|,
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
operator|)
name|progressable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitJob
parameter_list|(
name|OutputFormat
name|outputFormat
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing as this was fixed by MAPREDUCE-1447.
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortJob
parameter_list|(
name|OutputFormat
name|outputFormat
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing as this was fixed by MAPREDUCE-1447.
block|}
annotation|@
name|Override
specifier|public
name|InetSocketAddress
name|getResourceManagerAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.address"
argument_list|,
literal|"localhost:8032"
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPropertyName
parameter_list|(
name|PropertyName
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|CACHE_ARCHIVES
case|:
return|return
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES
return|;
case|case
name|CACHE_FILES
case|:
return|return
name|MRJobConfig
operator|.
name|CACHE_FILES
return|;
case|case
name|CACHE_SYMLINK
case|:
return|return
name|MRJobConfig
operator|.
name|CACHE_SYMLINK
return|;
case|case
name|CLASSPATH_ARCHIVES
case|:
return|return
name|MRJobConfig
operator|.
name|CLASSPATH_ARCHIVES
return|;
case|case
name|CLASSPATH_FILES
case|:
return|return
name|MRJobConfig
operator|.
name|CLASSPATH_FILES
return|;
block|}
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFileInHDFS
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|// In case of viewfs we need to lookup where the actual file is to know the filesystem in use.
comment|// resolvePath is a sure shot way of knowing which file system the file is.
return|return
literal|"hdfs"
operator|.
name|equals
argument_list|(
name|fs
operator|.
name|resolvePath
argument_list|(
name|path
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|WebHCatJTShim
name|getWebHCatShim
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|WebHCatJTShim23
argument_list|(
name|conf
argument_list|,
name|ugi
argument_list|)
return|;
comment|//this has state, so can't be cached
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|itr
init|=
name|fs
operator|.
name|listLocatedStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|stat
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|accept
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlockLocation
index|[]
name|getLocations
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|status
operator|instanceof
name|LocatedFileStatus
condition|)
block|{
return|return
operator|(
operator|(
name|LocatedFileStatus
operator|)
name|status
operator|)
operator|.
name|getBlockLocations
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|hflush
parameter_list|(
name|FSDataOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HdfsFileStatus
name|getFullFileStatus
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|AclStatus
name|aclStatus
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isExtendedAclEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|aclStatus
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Hadoop23FileStatus
argument_list|(
name|fileStatus
argument_list|,
name|aclStatus
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFullFileStatus
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HdfsFileStatus
name|sourceStatus
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|group
init|=
name|sourceStatus
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getGroup
argument_list|()
decl_stmt|;
comment|//use FsShell to change group, permissions, and extended ACL's recursively
try|try
block|{
name|FsShell
name|fsShell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|fsShell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|fsShell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-chgrp"
block|,
literal|"-R"
block|,
name|group
block|,
name|target
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExtendedAclEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|AclStatus
name|aclStatus
init|=
operator|(
operator|(
name|Hadoop23FileStatus
operator|)
name|sourceStatus
operator|)
operator|.
name|getAclStatus
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
init|=
name|aclStatus
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|removeBaseAclEntries
argument_list|(
name|aclEntries
argument_list|)
expr_stmt|;
comment|//the ACL api's also expect the tradition user/group/other permission in the form of ACL
name|FsPermission
name|sourcePerm
init|=
name|sourceStatus
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|aclEntries
operator|.
name|add
argument_list|(
name|newAclEntry
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|,
name|AclEntryType
operator|.
name|USER
argument_list|,
name|sourcePerm
operator|.
name|getUserAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|aclEntries
operator|.
name|add
argument_list|(
name|newAclEntry
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|,
name|AclEntryType
operator|.
name|GROUP
argument_list|,
name|sourcePerm
operator|.
name|getGroupAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|aclEntries
operator|.
name|add
argument_list|(
name|newAclEntry
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|,
name|AclEntryType
operator|.
name|OTHER
argument_list|,
name|sourcePerm
operator|.
name|getOtherAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//construct the -setfacl command
name|String
name|aclEntry
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|aclStatus
operator|.
name|getEntries
argument_list|()
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|fsShell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"-R"
block|,
literal|"--set"
block|,
name|aclEntry
block|,
name|target
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|permission
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|sourceStatus
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|fsShell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-chmod"
block|,
literal|"-R"
block|,
name|permission
block|,
name|target
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to set permissions of "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|//some trace logging
name|getFullFileStatus
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|target
argument_list|)
operator|.
name|debugLog
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore.
block|}
block|}
specifier|public
class|class
name|Hadoop23FileStatus
implements|implements
name|HdfsFileStatus
block|{
specifier|private
name|FileStatus
name|fileStatus
decl_stmt|;
specifier|private
name|AclStatus
name|aclStatus
decl_stmt|;
specifier|public
name|Hadoop23FileStatus
parameter_list|(
name|FileStatus
name|fileStatus
parameter_list|,
name|AclStatus
name|aclStatus
parameter_list|)
block|{
name|this
operator|.
name|fileStatus
operator|=
name|fileStatus
expr_stmt|;
name|this
operator|.
name|aclStatus
operator|=
name|aclStatus
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|()
block|{
return|return
name|fileStatus
return|;
block|}
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|()
block|{
return|return
name|aclStatus
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|debugLog
parameter_list|()
block|{
if|if
condition|(
name|fileStatus
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|fileStatus
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aclStatus
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|aclStatus
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a new AclEntry with scope, type and permission (no name).    *    * @param scope    *          AclEntryScope scope of the ACL entry    * @param type    *          AclEntryType ACL entry type    * @param permission    *          FsAction set of permissions in the ACL entry    * @return AclEntry new AclEntry    */
specifier|private
name|AclEntry
name|newAclEntry
parameter_list|(
name|AclEntryScope
name|scope
parameter_list|,
name|AclEntryType
name|type
parameter_list|,
name|FsAction
name|permission
parameter_list|)
block|{
return|return
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setPermission
argument_list|(
name|permission
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Removes basic permission acls (unamed acls) from the list of acl entries    * @param entries acl entries to remove from.    */
specifier|private
name|void
name|removeBaseAclEntries
parameter_list|(
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|Iterables
operator|.
name|removeIf
argument_list|(
name|entries
argument_list|,
operator|new
name|Predicate
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|AclEntry
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
class|class
name|ProxyFileSystem23
extends|extends
name|ProxyFileSystem
block|{
specifier|public
name|ProxyFileSystem23
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProxyFileSystem23
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
operator|new
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
argument_list|()
block|{
specifier|private
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|stats
init|=
name|ProxyFileSystem23
operator|.
name|super
operator|.
name|listLocatedStatus
argument_list|(
name|ProxyFileSystem23
operator|.
name|super
operator|.
name|swizzleParamPath
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|stats
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|LocatedFileStatus
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|LocatedFileStatus
name|result
init|=
name|stats
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|LocatedFileStatus
argument_list|(
name|ProxyFileSystem23
operator|.
name|super
operator|.
name|swizzleFileStatus
argument_list|(
name|result
argument_list|,
literal|false
argument_list|)
argument_list|,
name|result
operator|.
name|getBlockLocations
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Proxy file system also needs to override the access() method behavior.      * Cannot add Override annotation since FileSystem.access() may not exist in      * the version of hadoop used to build Hive.      */
specifier|public
name|void
name|access
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsAction
name|action
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Path
name|underlyingFsPath
init|=
name|swizzleParamPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FileStatus
name|underlyingFsStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|underlyingFsPath
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|accessMethod
operator|!=
literal|null
condition|)
block|{
name|accessMethod
operator|.
name|invoke
argument_list|(
name|fs
argument_list|,
name|underlyingFsPath
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the FS has no access() method, we can try DefaultFileAccess ..
name|UserGroupInformation
name|ugi
init|=
name|getUGIForConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|DefaultFileAccess
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|underlyingFsStatus
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|err
parameter_list|)
block|{
throw|throw
name|err
throw|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|err
parameter_list|)
block|{
throw|throw
name|err
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
name|err
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|err
operator|.
name|getMessage
argument_list|()
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|FileSystem
name|createProxyFileSystem
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
return|return
operator|new
name|ProxyFileSystem23
argument_list|(
name|fs
argument_list|,
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHadoopConfNames
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"HADOOPFS"
argument_list|,
literal|"fs.defaultFS"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"HADOOPMAPFILENAME"
argument_list|,
literal|"mapreduce.map.input.file"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"HADOOPMAPREDINPUTDIR"
argument_list|,
literal|"mapreduce.input.fileinputformat.inputdir"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"HADOOPMAPREDINPUTDIRRECURSIVE"
argument_list|,
literal|"mapreduce.input.fileinputformat.input.dir.recursive"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"MAPREDMAXSPLITSIZE"
argument_list|,
literal|"mapreduce.input.fileinputformat.split.maxsize"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"MAPREDMINSPLITSIZE"
argument_list|,
literal|"mapreduce.input.fileinputformat.split.minsize"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"MAPREDMINSPLITSIZEPERNODE"
argument_list|,
literal|"mapreduce.input.fileinputformat.split.minsize.per.node"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"MAPREDMINSPLITSIZEPERRACK"
argument_list|,
literal|"mapreduce.input.fileinputformat.split.minsize.per.rack"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"HADOOPNUMREDUCERS"
argument_list|,
literal|"mapreduce.job.reduces"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"HADOOPJOBNAME"
argument_list|,
literal|"mapreduce.job.name"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"HADOOPSPECULATIVEEXECREDUCERS"
argument_list|,
literal|"mapreduce.reduce.speculative"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"MAPREDSETUPCLEANUPNEEDED"
argument_list|,
literal|"mapreduce.job.committer.setup.cleanup.needed"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"MAPREDTASKCLEANUPNEEDED"
argument_list|,
literal|"mapreduce.job.committer.task.cleanup.needed"
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZeroCopyReaderShim
name|getZeroCopyReader
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|,
name|ByteBufferPoolShim
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|zeroCopy
condition|)
block|{
return|return
name|ZeroCopyShims
operator|.
name|getZeroCopyReader
argument_list|(
name|in
argument_list|,
name|pool
argument_list|)
return|;
block|}
comment|/* not supported */
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DirectDecompressorShim
name|getDirectDecompressor
parameter_list|(
name|DirectCompressionType
name|codec
parameter_list|)
block|{
if|if
condition|(
name|zeroCopy
condition|)
block|{
return|return
name|ZeroCopyShims
operator|.
name|getDirectDecompressor
argument_list|(
name|codec
argument_list|)
return|;
block|}
comment|/* not supported */
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileSystem
name|getNonCachedFileSystem
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getMergedCredentials
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|jobConf
operator|.
name|getCredentials
argument_list|()
operator|.
name|mergeAll
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
specifier|final
name|Method
name|accessMethod
decl_stmt|;
static|static
block|{
name|Method
name|m
init|=
literal|null
decl_stmt|;
try|try
block|{
name|m
operator|=
name|FileSystem
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"access"
argument_list|,
name|Path
operator|.
name|class
argument_list|,
name|FsAction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|err
parameter_list|)
block|{
comment|// This version of Hadoop does not support FileSystem.access().
block|}
name|accessMethod
operator|=
name|m
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkFileAccess
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|stat
parameter_list|,
name|FsAction
name|action
parameter_list|)
throws|throws
name|IOException
throws|,
name|AccessControlException
throws|,
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|accessMethod
operator|==
literal|null
condition|)
block|{
comment|// Have to rely on Hive implementation of filesystem permission checks.
name|DefaultFileAccess
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|stat
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accessMethod
operator|.
name|invoke
argument_list|(
name|fs
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
name|wrapAccessException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
comment|/**    * If there is an AccessException buried somewhere in the chain of failures, wrap the original    * exception in an AccessException. Othewise just return the original exception.    */
specifier|private
specifier|static
name|Exception
name|wrapAccessException
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
specifier|final
name|int
name|maxDepth
init|=
literal|20
decl_stmt|;
name|Throwable
name|curErr
init|=
name|err
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|curErr
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|maxDepth
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
name|curErr
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
operator|||
name|curErr
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AccessControlException
condition|)
block|{
name|Exception
name|newErr
init|=
operator|new
name|AccessControlException
argument_list|(
name|curErr
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|newErr
operator|.
name|initCause
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return
name|newErr
return|;
block|}
name|curErr
operator|=
name|curErr
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
name|err
return|;
block|}
block|}
end_class

end_unit

