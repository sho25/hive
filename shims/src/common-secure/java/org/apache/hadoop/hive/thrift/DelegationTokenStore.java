begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
operator|.
name|DelegationTokenInformation
import|;
end_import

begin_comment
comment|/**  * Interface for pluggable token store that can be implemented with shared external  * storage for load balancing and high availability (for example using ZooKeeper).  * Internal, store specific errors are translated into {@link TokenStoreException}.  */
end_comment

begin_interface
specifier|public
interface|interface
name|DelegationTokenStore
extends|extends
name|Configurable
extends|,
name|Closeable
block|{
comment|/**    * Exception for internal token store errors that typically cannot be handled by the caller.    */
specifier|public
specifier|static
class|class
name|TokenStoreException
extends|extends
name|RuntimeException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|8693819817623074083L
decl_stmt|;
specifier|public
name|TokenStoreException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TokenStoreException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add new master key. The token store assigns and returns the sequence number.    * Caller needs to use the identifier to update the key (since it is embedded in the key).    *    * @param s    * @return sequence number for new key    */
name|int
name|addMasterKey
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|TokenStoreException
function_decl|;
comment|/**    * Update master key (for expiration and setting store assigned sequence within key)    * @param keySeq    * @param s    * @throws TokenStoreException    */
name|void
name|updateMasterKey
parameter_list|(
name|int
name|keySeq
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|TokenStoreException
function_decl|;
comment|/**    * Remove key for given id.    * @param keySeq    * @return false if key no longer present, true otherwise.    */
name|boolean
name|removeMasterKey
parameter_list|(
name|int
name|keySeq
parameter_list|)
function_decl|;
comment|/**    * Return all master keys.    * @return    * @throws TokenStoreException    */
name|String
index|[]
name|getMasterKeys
parameter_list|()
throws|throws
name|TokenStoreException
function_decl|;
comment|/**    * Add token. If identifier is already present, token won't be added.    * @param tokenIdentifier    * @param token    * @return true if token was added, false for existing identifier    */
name|boolean
name|addToken
parameter_list|(
name|DelegationTokenIdentifier
name|tokenIdentifier
parameter_list|,
name|DelegationTokenInformation
name|token
parameter_list|)
throws|throws
name|TokenStoreException
function_decl|;
comment|/**    * Get token. Returns null if the token does not exist.    * @param tokenIdentifier    * @return    */
name|DelegationTokenInformation
name|getToken
parameter_list|(
name|DelegationTokenIdentifier
name|tokenIdentifier
parameter_list|)
throws|throws
name|TokenStoreException
function_decl|;
comment|/**    * Remove token. Return value can be used by caller to detect concurrency.    * @param tokenIdentifier    * @return true if token was removed, false if it was already removed.    * @throws TokenStoreException    */
name|boolean
name|removeToken
parameter_list|(
name|DelegationTokenIdentifier
name|tokenIdentifier
parameter_list|)
throws|throws
name|TokenStoreException
function_decl|;
comment|/**    * List of all token identifiers in the store. This is used to remove expired tokens    * and a potential scalability improvement would be to partition by master key id    * @return    */
name|List
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getAllDelegationTokenIdentifiers
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

