begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSaslClientTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSaslServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_comment
comment|/**   * Functions that bridge Thrift's SASL transports to Hadoop's   * SASL callback handlers and authentication classes.   */
end_comment

begin_class
specifier|public
class|class
name|HadoopThriftAuthBridge20S
extends|extends
name|HadoopThriftAuthBridge
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HadoopThriftAuthBridge
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Client
name|createClient
parameter_list|()
block|{
return|return
operator|new
name|Client
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Server
name|createServer
parameter_list|(
name|String
name|keytabFile
parameter_list|,
name|String
name|principalConf
parameter_list|)
throws|throws
name|TTransportException
block|{
return|return
operator|new
name|Server
argument_list|(
name|keytabFile
argument_list|,
name|principalConf
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|Client
extends|extends
name|HadoopThriftAuthBridge
operator|.
name|Client
block|{
comment|/**       * Create a client-side SASL transport that wraps an underlying transport.       *       * @param method The authentication method to use. Currently only KERBEROS is       *               supported.       * @param serverPrincipal The Kerberos principal of the target server.       * @param underlyingTransport The underlying transport mechanism, usually a TSocket.       */
annotation|@
name|Override
specifier|public
name|TTransport
name|createClientTransport
parameter_list|(
name|String
name|principalConfig
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|methodStr
parameter_list|,
name|TTransport
name|underlyingTransport
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthMethod
name|method
init|=
name|AuthMethod
operator|.
name|valueOf
argument_list|(
name|AuthMethod
operator|.
name|class
argument_list|,
name|methodStr
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|KERBEROS
case|:
name|String
name|serverPrincipal
init|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principalConfig
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|String
name|names
index|[]
init|=
name|SaslRpcServer
operator|.
name|splitKerberosName
argument_list|(
name|serverPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Kerberos principal name does NOT have the expected hostname part: "
operator|+
name|serverPrincipal
argument_list|)
throw|;
block|}
try|try
block|{
name|TTransport
name|saslTransport
init|=
operator|new
name|TSaslClientTransport
argument_list|(
name|method
operator|.
name|getMechanismName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
name|SaslRpcServer
operator|.
name|SASL_PROPS
argument_list|,
literal|null
argument_list|,
name|underlyingTransport
argument_list|)
decl_stmt|;
return|return
operator|new
name|TUGIAssumingTransport
argument_list|(
name|saslTransport
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SaslException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not instantiate SASL transport"
argument_list|,
name|se
argument_list|)
throw|;
block|}
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported authentication method: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Server
extends|extends
name|HadoopThriftAuthBridge
operator|.
name|Server
block|{
specifier|private
specifier|final
name|UserGroupInformation
name|realUgi
decl_stmt|;
comment|/**       * TODO: javadoc       */
specifier|private
name|Server
parameter_list|(
name|String
name|keytabFile
parameter_list|,
name|String
name|principalConf
parameter_list|)
throws|throws
name|TTransportException
block|{
if|if
condition|(
name|keytabFile
operator|==
literal|null
operator|||
name|keytabFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
literal|"No keytab specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|principalConf
operator|==
literal|null
operator|||
name|principalConf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
literal|"No principal specified"
argument_list|)
throw|;
block|}
comment|// Login from the keytab
name|String
name|kerberosName
decl_stmt|;
try|try
block|{
name|kerberosName
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principalConf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|kerberosName
argument_list|,
name|keytabFile
argument_list|)
expr_stmt|;
name|realUgi
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
assert|assert
name|realUgi
operator|.
name|isFromKeytab
argument_list|()
assert|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**       * Create a TTransportFactory that, upon connection of a client socket,       * negotiates a Kerberized SASL transport. The resulting TTransportFactory       * can be passed as both the input and output transport factory when       * instantiating a TThreadPoolServer, for example.       *       */
annotation|@
name|Override
specifier|public
name|TTransportFactory
name|createTransportFactory
parameter_list|()
throws|throws
name|TTransportException
block|{
comment|// Parse out the kerberos principal, host, realm.
name|String
name|kerberosName
init|=
name|realUgi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|names
index|[]
init|=
name|SaslRpcServer
operator|.
name|splitKerberosName
argument_list|(
name|kerberosName
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
literal|"Kerberos principal should have 3 parts: "
operator|+
name|kerberosName
argument_list|)
throw|;
block|}
name|TSaslServerTransport
operator|.
name|Factory
name|transFactory
init|=
operator|new
name|TSaslServerTransport
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|transFactory
operator|.
name|addServerDefinition
argument_list|(
name|AuthMethod
operator|.
name|KERBEROS
operator|.
name|getMechanismName
argument_list|()
argument_list|,
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
comment|// two parts of kerberos principal
name|SaslRpcServer
operator|.
name|SASL_PROPS
argument_list|,
operator|new
name|SaslRpcServer
operator|.
name|SaslGssCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|TUGIAssumingTransportFactory
argument_list|(
name|transFactory
argument_list|,
name|realUgi
argument_list|)
return|;
block|}
comment|/**       * Wrap a TProcessor in such a way that, before processing any RPC, it       * assumes the UserGroupInformation of the user authenticated by       * the SASL transport.       */
annotation|@
name|Override
specifier|public
name|TProcessor
name|wrapProcessor
parameter_list|(
name|TProcessor
name|processor
parameter_list|)
block|{
return|return
operator|new
name|TUGIAssumingProcessor
argument_list|(
name|processor
argument_list|)
return|;
block|}
comment|/**       * Processor that pulls the SaslServer object out of the transport, and       * assumes the remote user's UGI before calling through to the original       * processor.       *       * This is used on the server side to set the UGI for each specific call.       */
specifier|private
class|class
name|TUGIAssumingProcessor
implements|implements
name|TProcessor
block|{
specifier|final
name|TProcessor
name|wrapped
decl_stmt|;
name|TUGIAssumingProcessor
parameter_list|(
name|TProcessor
name|wrapped
parameter_list|)
block|{
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
block|}
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|TProtocol
name|inProt
parameter_list|,
specifier|final
name|TProtocol
name|outProt
parameter_list|)
throws|throws
name|TException
block|{
name|TTransport
name|trans
init|=
name|inProt
operator|.
name|getTransport
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|trans
operator|instanceof
name|TSaslServerTransport
operator|)
condition|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
literal|"Unexpected non-SASL transport "
operator|+
name|trans
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|TSaslServerTransport
name|saslTrans
init|=
operator|(
name|TSaslServerTransport
operator|)
name|trans
decl_stmt|;
name|String
name|authId
init|=
name|saslTrans
operator|.
name|getSaslServer
argument_list|()
operator|.
name|getAuthorizationID
argument_list|()
decl_stmt|;
try|try
block|{
name|UserGroupInformation
name|clientUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|authId
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|wrapped
operator|.
name|process
argument_list|(
name|inProt
argument_list|,
name|outProt
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
if|if
condition|(
name|rte
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|rte
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
name|rte
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
comment|// unexpected!
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
comment|// unexpected!
block|}
block|}
block|}
block|}
comment|/**     * A TransportFactory that wraps another one, but assumes a specified UGI     * before calling through.     *     * This is used on the server side to assume the server's Principal when accepting     * clients.     */
specifier|private
specifier|static
class|class
name|TUGIAssumingTransportFactory
extends|extends
name|TTransportFactory
block|{
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
specifier|private
specifier|final
name|TTransportFactory
name|wrapped
decl_stmt|;
specifier|public
name|TUGIAssumingTransportFactory
parameter_list|(
name|TTransportFactory
name|wrapped
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
assert|assert
name|wrapped
operator|!=
literal|null
assert|;
assert|assert
name|ugi
operator|!=
literal|null
assert|;
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TTransport
name|getTransport
parameter_list|(
specifier|final
name|TTransport
name|trans
parameter_list|)
block|{
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|TTransport
argument_list|>
argument_list|()
block|{
specifier|public
name|TTransport
name|run
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getTransport
argument_list|(
name|trans
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
comment|/**     * The Thrift SASL transports call Sasl.createSaslServer and Sasl.createSaslClient     * inside open(). So, we need to assume the correct UGI when the transport is opened     * so that the SASL mechanisms have access to the right principal. This transport     * wraps the Sasl transports to set up the right UGI context for open().     *     * This is used on the client side, where the API explicitly opens a transport to     * the server.     */
specifier|private
specifier|static
class|class
name|TUGIAssumingTransport
extends|extends
name|TFilterTransport
block|{
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
specifier|public
name|TUGIAssumingTransport
parameter_list|(
name|TTransport
name|wrapped
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|super
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|TTransportException
block|{
try|try
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
block|{
try|try
block|{
name|wrapped
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TTransportException
name|tte
parameter_list|)
block|{
comment|// Wrap the transport exception in an RTE, since UGI.doAs() then goes
comment|// and unwraps this for us out of the doAs block. We then unwrap one
comment|// more time in our catch clause to get back the TTE. (ugh)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|tte
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
assert|assert
literal|false
operator|:
literal|"Never thrown!"
assert|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Received an ioe we never threw!"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
assert|assert
literal|false
operator|:
literal|"We never expect to see an InterruptedException thrown in this block"
assert|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Received an ie we never threw!"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
if|if
condition|(
name|rte
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TTransportException
condition|)
block|{
throw|throw
operator|(
name|TTransportException
operator|)
name|rte
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
name|rte
throw|;
block|}
block|}
block|}
block|}
comment|/**     * Transport that simply wraps another transport.     * This is the equivalent of FilterInputStream for Thrift transports.     */
specifier|private
specifier|static
class|class
name|TFilterTransport
extends|extends
name|TTransport
block|{
specifier|protected
specifier|final
name|TTransport
name|wrapped
decl_stmt|;
specifier|public
name|TFilterTransport
parameter_list|(
name|TTransport
name|wrapped
parameter_list|)
block|{
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|TTransportException
block|{
name|wrapped
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|isOpen
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|peek
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|peek
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|wrapped
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|TTransportException
block|{
return|return
name|wrapped
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readAll
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|TTransportException
block|{
return|return
name|wrapped
operator|.
name|readAll
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|TTransportException
block|{
name|wrapped
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|TTransportException
block|{
name|wrapped
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|TTransportException
block|{
name|wrapped
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBuffer
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getBufferPosition
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getBufferPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getBytesRemainingInBuffer
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getBytesRemainingInBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|consumeBuffer
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|wrapped
operator|.
name|consumeBuffer
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

