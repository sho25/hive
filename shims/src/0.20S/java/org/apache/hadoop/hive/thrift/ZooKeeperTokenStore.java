begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|TokenStoreDelegationTokenSecretManager
operator|.
name|TokenStoreError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
operator|.
name|DelegationTokenInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|HiveDelegationTokenSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
operator|.
name|States
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * ZooKeeper token store implementation.  */
end_comment

begin_class
specifier|public
class|class
name|ZooKeeperTokenStore
implements|implements
name|TokenStoreDelegationTokenSecretManager
operator|.
name|TokenStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZooKeeperTokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ZK_SEQ_FORMAT
init|=
literal|"%010d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NODE_KEYS
init|=
literal|"/keys"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NODE_TOKENS
init|=
literal|"/tokens"
decl_stmt|;
specifier|private
name|String
name|rootNode
init|=
literal|""
decl_stmt|;
specifier|private
specifier|volatile
name|ZooKeeper
name|zkSession
decl_stmt|;
specifier|private
name|String
name|zkConnectString
decl_stmt|;
specifier|private
specifier|final
name|int
name|zkSessionTimeout
init|=
literal|3000
decl_stmt|;
specifier|private
class|class
name|ZooKeeperWatcher
implements|implements
name|Watcher
block|{
specifier|public
name|void
name|process
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
name|event
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|event
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getState
argument_list|()
operator|==
name|Watcher
operator|.
name|Event
operator|.
name|KeeperState
operator|.
name|Expired
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"ZooKeeper session expired, discarding connection"
argument_list|)
expr_stmt|;
try|try
block|{
name|zkSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Failed to close connection on expired session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Default constructor for dynamic instantiation w/ Configurable    * (ReflectionUtils does not support Configuration constructor injection).    */
specifier|protected
name|ZooKeeperTokenStore
parameter_list|()
block|{   }
specifier|public
name|ZooKeeperTokenStore
parameter_list|(
name|String
name|hostPort
parameter_list|)
block|{
name|this
operator|.
name|zkConnectString
operator|=
name|hostPort
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ZooKeeper
name|getSession
parameter_list|()
block|{
if|if
condition|(
name|zkSession
operator|==
literal|null
operator|||
name|zkSession
operator|.
name|getState
argument_list|()
operator|==
name|States
operator|.
name|CLOSED
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|zkSession
operator|==
literal|null
operator|||
name|zkSession
operator|.
name|getState
argument_list|()
operator|==
name|States
operator|.
name|CLOSED
condition|)
block|{
try|try
block|{
name|zkSession
operator|=
operator|new
name|ZooKeeper
argument_list|(
name|this
operator|.
name|zkConnectString
argument_list|,
name|this
operator|.
name|zkSessionTimeout
argument_list|,
operator|new
name|ZooKeeperWatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
literal|"Token store error."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|zkSession
return|;
block|}
specifier|private
specifier|static
name|String
name|ensurePath
parameter_list|(
name|ZooKeeper
name|zk
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|pathComps
init|=
name|StringUtils
operator|.
name|splitByWholeSeparator
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|currentPath
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|pathComp
range|:
name|pathComps
control|)
block|{
name|currentPath
operator|+=
literal|"/"
operator|+
name|pathComp
expr_stmt|;
try|try
block|{
name|String
name|node
init|=
name|zk
operator|.
name|create
argument_list|(
name|currentPath
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Created path: "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{       }
block|}
return|return
name|currentPath
return|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|zkConnectString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not initialized"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|zkSession
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|zkSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Failed to close existing session."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|ZooKeeper
name|zk
init|=
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|ensurePath
argument_list|(
name|zk
argument_list|,
name|rootNode
operator|+
name|NODE_KEYS
argument_list|)
expr_stmt|;
name|ensurePath
argument_list|(
name|zk
argument_list|,
name|rootNode
operator|+
name|NODE_TOKENS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
literal|"Failed to validate token path."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|zkConnectString
operator|=
name|conf
operator|.
name|get
argument_list|(
name|HadoopThriftAuthBridge20S
operator|.
name|Server
operator|.
name|DELEGATION_TOKEN_STORE_ZK_CONNECT_STR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootNode
operator|=
name|conf
operator|.
name|get
argument_list|(
name|HadoopThriftAuthBridge20S
operator|.
name|Server
operator|.
name|DELEGATION_TOKEN_STORE_ZK_ROOT_NODE
argument_list|,
name|HadoopThriftAuthBridge20S
operator|.
name|Server
operator|.
name|DELEGATION_TOKEN_STORE_ZK_ROOT_NODE_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
literal|null
return|;
comment|// not required
block|}
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
name|getAllKeys
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|masterKeyNode
init|=
name|rootNode
operator|+
name|NODE_KEYS
decl_stmt|;
name|ZooKeeper
name|zk
init|=
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|zk
operator|.
name|getChildren
argument_list|(
name|masterKeyNode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|byte
index|[]
name|data
init|=
name|zk
operator|.
name|getData
argument_list|(
name|masterKeyNode
operator|+
literal|"/"
operator|+
name|node
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|getSeq
argument_list|(
name|node
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|int
name|getSeq
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
index|[]
name|pathComps
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|pathComps
index|[
name|pathComps
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|addMasterKey
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
name|ZooKeeper
name|zk
init|=
name|getSession
argument_list|()
decl_stmt|;
name|String
name|newNode
init|=
name|zk
operator|.
name|create
argument_list|(
name|rootNode
operator|+
name|NODE_KEYS
operator|+
literal|"/"
argument_list|,
name|s
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT_SEQUENTIAL
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Added key {}"
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
return|return
name|getSeq
argument_list|(
name|newNode
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMasterKey
parameter_list|(
name|int
name|keySeq
parameter_list|,
name|String
name|s
parameter_list|)
block|{
try|try
block|{
name|ZooKeeper
name|zk
init|=
name|getSession
argument_list|()
decl_stmt|;
name|zk
operator|.
name|setData
argument_list|(
name|rootNode
operator|+
name|NODE_KEYS
operator|+
literal|"/"
operator|+
name|String
operator|.
name|format
argument_list|(
name|ZK_SEQ_FORMAT
argument_list|,
name|keySeq
argument_list|)
argument_list|,
name|s
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMasterKey
parameter_list|(
name|int
name|keySeq
parameter_list|)
block|{
try|try
block|{
name|ZooKeeper
name|zk
init|=
name|getSession
argument_list|()
decl_stmt|;
name|zk
operator|.
name|delete
argument_list|(
name|rootNode
operator|+
name|NODE_KEYS
operator|+
literal|"/"
operator|+
name|String
operator|.
name|format
argument_list|(
name|ZK_SEQ_FORMAT
argument_list|,
name|keySeq
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMasterKeys
parameter_list|()
block|{
try|try
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
name|allKeys
init|=
name|getAllKeys
argument_list|()
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|allKeys
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|resultIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|keyBytes
range|:
name|allKeys
operator|.
name|values
argument_list|()
control|)
block|{
name|result
index|[
name|resultIdx
operator|++
index|]
operator|=
operator|new
name|String
argument_list|(
name|keyBytes
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getTokenPath
parameter_list|(
name|DelegationTokenIdentifier
name|tokenIdentifier
parameter_list|)
block|{
try|try
block|{
return|return
name|rootNode
operator|+
name|NODE_TOKENS
operator|+
literal|"/"
operator|+
name|TokenStoreDelegationTokenSecretManager
operator|.
name|encodeWritable
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
literal|"Failed to encode token identifier"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addToken
parameter_list|(
name|DelegationTokenIdentifier
name|tokenIdentifier
parameter_list|,
name|DelegationTokenInformation
name|token
parameter_list|)
block|{
try|try
block|{
name|ZooKeeper
name|zk
init|=
name|getSession
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tokenBytes
init|=
name|HiveDelegationTokenSupport
operator|.
name|encodeDelegationTokenInformation
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|String
name|newNode
init|=
name|zk
operator|.
name|create
argument_list|(
name|getTokenPath
argument_list|(
name|tokenIdentifier
argument_list|)
argument_list|,
name|tokenBytes
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Added token: {}"
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeToken
parameter_list|(
name|DelegationTokenIdentifier
name|tokenIdentifier
parameter_list|)
block|{
try|try
block|{
name|ZooKeeper
name|zk
init|=
name|getSession
argument_list|()
decl_stmt|;
name|zk
operator|.
name|delete
argument_list|(
name|getTokenPath
argument_list|(
name|tokenIdentifier
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DelegationTokenInformation
name|getToken
parameter_list|(
name|DelegationTokenIdentifier
name|tokenIdentifier
parameter_list|)
block|{
try|try
block|{
name|ZooKeeper
name|zk
init|=
name|getSession
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tokenBytes
init|=
name|zk
operator|.
name|getData
argument_list|(
name|getTokenPath
argument_list|(
name|tokenIdentifier
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|HiveDelegationTokenSupport
operator|.
name|decodeDelegationTokenInformation
argument_list|(
name|tokenBytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
literal|"Failed to decode token"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getAllDelegationTokenIdentifiers
parameter_list|()
block|{
name|String
name|containerNode
init|=
name|rootNode
operator|+
name|NODE_TOKENS
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodes
decl_stmt|;
try|try
block|{
name|nodes
operator|=
name|getSession
argument_list|()
operator|.
name|getChildren
argument_list|(
name|containerNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStoreError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|result
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|DelegationTokenIdentifier
name|id
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|()
decl_stmt|;
try|try
block|{
name|TokenStoreDelegationTokenSecretManager
operator|.
name|decodeWritable
argument_list|(
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Failed to decode token '{}'"
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

