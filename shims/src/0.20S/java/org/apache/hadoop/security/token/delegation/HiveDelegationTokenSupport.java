begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
operator|.
name|DelegationTokenInformation
import|;
end_import

begin_comment
comment|/**  * Workaround for serialization of {@link DelegationTokenInformation} through package access.  * Future version of Hadoop should add this to DelegationTokenInformation itself.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HiveDelegationTokenSupport
block|{
specifier|private
name|HiveDelegationTokenSupport
parameter_list|()
block|{}
specifier|public
specifier|static
name|byte
index|[]
name|encodeDelegationTokenInformation
parameter_list|(
name|DelegationTokenInformation
name|token
parameter_list|)
block|{
try|try
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|token
operator|.
name|password
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|token
operator|.
name|password
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|token
operator|.
name|renewDate
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to encode token."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|DelegationTokenInformation
name|decodeDelegationTokenInformation
parameter_list|(
name|byte
index|[]
name|tokenBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|tokenBytes
argument_list|)
argument_list|)
decl_stmt|;
name|DelegationTokenInformation
name|token
init|=
operator|new
name|DelegationTokenInformation
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|token
operator|.
name|password
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|token
operator|.
name|password
argument_list|)
expr_stmt|;
name|token
operator|.
name|renewDate
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|public
specifier|static
name|void
name|rollMasterKey
parameter_list|(
name|AbstractDelegationTokenSecretManager
argument_list|<
name|?
extends|extends
name|AbstractDelegationTokenIdentifier
argument_list|>
name|mgr
parameter_list|)
throws|throws
name|IOException
block|{
name|mgr
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

