begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|io
package|;
end_package

begin_comment
comment|/**  * A container to store handling results for exceptions produced in record  * reader's next(). It basically contains 2 fields, one is to store if it is  * handled or not, another field to store the result.  */
end_comment

begin_class
specifier|public
class|class
name|HiveIOExceptionNextHandleResult
block|{
comment|// this exception has been handled
specifier|private
name|boolean
name|handled
decl_stmt|;
comment|//the handling results
specifier|private
name|boolean
name|handleResult
decl_stmt|;
specifier|public
name|boolean
name|getHandled
parameter_list|()
block|{
return|return
name|handled
return|;
block|}
specifier|public
name|void
name|setHandled
parameter_list|(
name|boolean
name|handled
parameter_list|)
block|{
name|this
operator|.
name|handled
operator|=
name|handled
expr_stmt|;
block|}
specifier|public
name|boolean
name|getHandleResult
parameter_list|()
block|{
return|return
name|handleResult
return|;
block|}
specifier|public
name|void
name|setHandleResult
parameter_list|(
name|boolean
name|handleResult
parameter_list|)
block|{
name|this
operator|.
name|handleResult
operator|=
name|handleResult
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|handled
operator|=
literal|false
expr_stmt|;
name|handleResult
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

