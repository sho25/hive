begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MultiFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MultiFileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_comment
comment|/**  * Implemention of shims against Hadoop 0.19.0.  */
end_comment

begin_class
specifier|public
class|class
name|Hadoop19Shims
implements|implements
name|HadoopShims
block|{
specifier|public
name|boolean
name|usesJobShell
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|fileSystemDeleteOnExit
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|void
name|inputFormatValidateInput
parameter_list|(
name|InputFormat
name|fmt
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// gone in 0.18+
block|}
comment|/**    * workaround for hadoop-17 - jobclient only looks at commandlineconfig.    */
specifier|public
name|void
name|setTmpFiles
parameter_list|(
name|String
name|prop
parameter_list|,
name|String
name|files
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|JobClient
operator|.
name|getCommandLineConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|prop
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|HadoopShims
operator|.
name|MiniDFSShim
name|getMiniDfs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MiniDFSShim
argument_list|(
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
name|racks
argument_list|)
argument_list|)
return|;
block|}
specifier|public
class|class
name|MiniDFSShim
implements|implements
name|HadoopShims
operator|.
name|MiniDFSShim
block|{
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|public
name|MiniDFSShim
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
block|}
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|cluster
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * We define this function here to make the code compatible between    * hadoop 0.17 and hadoop 0.20.    *    * Hive binary that compiled Text.compareTo(Text) with hadoop 0.20 won't    * work with hadoop 0.17 because in hadoop 0.20, Text.compareTo(Text) is    * implemented in org.apache.hadoop.io.BinaryComparable, and Java compiler    * references that class, which is not available in hadoop 0.17.    */
specifier|public
name|int
name|compareText
parameter_list|(
name|Text
name|a
parameter_list|,
name|Text
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
specifier|public
name|HadoopShims
operator|.
name|CombineFileInputFormatShim
name|getCombineFileInputFormat
parameter_list|()
block|{
return|return
operator|new
name|CombineFileInputFormatShim
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordReader
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|arg1
parameter_list|,
name|Reporter
name|arg2
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"CombineFileInputFormat.getRecordReader not needed."
argument_list|)
throw|;
block|}
block|}
return|;
block|}
specifier|public
name|String
name|getInputFormatClassName
parameter_list|()
block|{
return|return
literal|"org.apache.hadoop.hive.ql.io.HiveInputFormat"
return|;
block|}
comment|/**    * MultiFileShim code here    *     *     */
specifier|public
specifier|abstract
specifier|static
class|class
name|CombineFileInputFormatShim
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|MultiFileInputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|HadoopShims
operator|.
name|CombineFileInputFormatShim
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**      * gets the input paths from static method in parent class. Same code in the      * hadoop20shim, adapted for @link{MultiFileInputFormat}      *       * @param conf      * @return Path[] of all files to be processed.      */
specifier|public
name|Path
index|[]
name|getInputPathsShim
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|Path
index|[]
name|paths
decl_stmt|;
try|try
block|{
name|paths
operator|=
name|MultiFileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"MultiFileInputFormat returned "
operator|+
name|paths
operator|.
name|length
operator|+
literal|" paths."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
index|[]
name|newPaths
init|=
operator|new
name|Path
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
comment|// remove file:
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|paths
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|newPaths
index|[
name|pos
index|]
operator|=
operator|new
name|Path
argument_list|(
name|paths
index|[
name|pos
index|]
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newPaths
return|;
block|}
comment|/**      * Not supported by MultiFileInputFormat so it doesn't do anything      *       * @param conf      * @param filters      */
specifier|public
name|void
name|createPool
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|PathFilter
modifier|...
name|filters
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"createPool called."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputSplitShim
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|minSize
init|=
name|job
operator|.
name|getLong
argument_list|(
literal|"mapred.min.split.size"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// For backward compatibility, let the above parameter be used
if|if
condition|(
name|job
operator|.
name|getLong
argument_list|(
literal|"mapred.min.split.size.per.node"
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|super
operator|.
name|setMinSplitSize
argument_list|(
name|minSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|job
operator|.
name|getLong
argument_list|(
literal|"mapred.min.split.size.per.rack"
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|super
operator|.
name|setMinSplitSize
argument_list|(
name|minSize
argument_list|)
expr_stmt|;
block|}
name|numSplits
operator|=
operator|(
name|int
operator|)
name|job
operator|.
name|getLong
argument_list|(
literal|"mapred.multifileinputformat.splits"
argument_list|,
name|estimateNumSplits
argument_list|(
name|job
argument_list|,
name|numSplits
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated splits (numSplits) = "
operator|+
name|numSplits
argument_list|)
expr_stmt|;
name|MultiFileSplit
index|[]
name|splits
init|=
operator|(
name|MultiFileSplit
index|[]
operator|)
name|super
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|numSplits
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"MultiFileSplit returned "
operator|+
name|splits
operator|.
name|length
operator|+
literal|" splits."
argument_list|)
expr_stmt|;
name|InputSplitShim
index|[]
name|isplits
init|=
operator|new
name|InputSplitShim
index|[
name|splits
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|splits
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|isplits
index|[
name|pos
index|]
operator|=
operator|new
name|InputSplitShim
argument_list|(
name|job
argument_list|,
name|splits
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|isplits
return|;
block|}
specifier|public
name|InputSplitShim
name|getInputSplitShim
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|InputSplitShim
argument_list|()
return|;
block|}
specifier|public
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordReader
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|HadoopShims
operator|.
name|InputSplitShim
name|split
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|Class
argument_list|<
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|rrClass
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultiFileRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|job
argument_list|,
operator|(
name|InputSplitShim
operator|)
name|split
argument_list|,
name|reporter
argument_list|,
name|rrClass
argument_list|)
return|;
block|}
comment|/**      * tries to guesstimate the optimal number of splits. We just calculate the      * total size of the job and divide it by the block size.      *       * @param job      * @param numSplits      * @return      */
specifier|private
name|long
name|estimateNumSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
index|[]
name|paths
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|listStatus
argument_list|(
name|job
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
name|job
operator|.
name|getLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
literal|67108864
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
comment|// HADOOP-1818: Manage splits only if there are paths
name|long
index|[]
name|lengths
init|=
operator|new
name|long
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
name|long
name|totLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileSystem
name|fs
init|=
name|paths
index|[
name|i
index|]
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|lengths
index|[
name|i
index|]
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|totLength
operator|+=
name|lengths
index|[
name|i
index|]
expr_stmt|;
block|}
name|numSplits
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|max
argument_list|(
name|numSplits
argument_list|,
operator|(
name|int
operator|)
name|totLength
operator|/
name|blockSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Total Length "
operator|+
name|totLength
operator|+
literal|", block size "
operator|+
name|blockSize
operator|+
literal|", number of splits: "
operator|+
name|numSplits
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numSplits
operator|<
literal|1
condition|)
name|numSplits
operator|=
literal|1
expr_stmt|;
return|return
name|numSplits
return|;
block|}
block|}
comment|/**    * We need to supply a RecordReader.    */
specifier|public
specifier|static
class|class
name|MultiFileRecordReader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|protected
name|InputSplitShim
name|split
decl_stmt|;
specifier|protected
name|JobConf
name|jc
decl_stmt|;
specifier|protected
name|Reporter
name|reporter
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|rrClass
decl_stmt|;
specifier|protected
name|Constructor
argument_list|<
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|rrConstructor
decl_stmt|;
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
name|int
name|idx
decl_stmt|;
specifier|protected
name|long
name|progress
decl_stmt|;
specifier|protected
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|curReader
decl_stmt|;
specifier|public
name|boolean
name|next
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|(
name|curReader
operator|==
literal|null
operator|)
operator|||
operator|!
name|curReader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|initNextRecordReader
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|K
name|createKey
parameter_list|()
block|{
return|return
name|curReader
operator|.
name|createKey
argument_list|()
return|;
block|}
specifier|public
name|V
name|createValue
parameter_list|()
block|{
return|return
name|curReader
operator|.
name|createValue
argument_list|()
return|;
block|}
comment|/**      * return the amount of data processed      */
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|progress
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|curReader
operator|!=
literal|null
condition|)
block|{
name|curReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|curReader
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * return progress based on the amount of data processed so far.      */
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
literal|1.0f
argument_list|,
name|progress
operator|/
call|(
name|float
call|)
argument_list|(
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|final
name|Class
index|[]
name|constructorSignature
init|=
operator|new
name|Class
index|[]
block|{
name|InputSplit
operator|.
name|class
block|,
name|Configuration
operator|.
name|class
block|,
name|Reporter
operator|.
name|class
block|,
name|Integer
operator|.
name|class
block|}
decl_stmt|;
comment|/**      * A generic RecordReader that can hand out different recordReaders for each      * chunk in the CombineFileSplit.      */
specifier|public
name|MultiFileRecordReader
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|InputSplitShim
name|split
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|Class
argument_list|<
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|rrClass
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
name|this
operator|.
name|jc
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|rrClass
operator|=
name|rrClass
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
name|this
operator|.
name|idx
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|curReader
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|progress
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|rrConstructor
operator|=
name|rrClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|constructorSignature
argument_list|)
expr_stmt|;
name|rrConstructor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|rrClass
operator|.
name|getName
argument_list|()
operator|+
literal|" does not have valid constructor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|initNextRecordReader
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the record reader for the next chunk in this CombineFileSplit.      */
specifier|protected
name|boolean
name|initNextRecordReader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|curReader
operator|!=
literal|null
condition|)
block|{
name|curReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|curReader
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|progress
operator|+=
name|split
operator|.
name|getLength
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// done processing so far
block|}
block|}
comment|// if all chunks have been processed, nothing more to do.
if|if
condition|(
name|idx
operator|==
name|split
operator|.
name|getNumPaths
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// get a record reader for the idx-th chunk
try|try
block|{
comment|/*          * in mapper task, the split is constructed with the default          * constructor, so it won't have the jc, resulting in          * NullPointerException          */
name|InputSplitShim
name|newSplit
init|=
operator|new
name|InputSplitShim
argument_list|(
name|jc
argument_list|,
name|split
operator|.
name|delegate
argument_list|)
decl_stmt|;
name|curReader
operator|=
name|rrConstructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|(
name|InputSplit
operator|)
name|newSplit
block|,
name|jc
block|,
name|reporter
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|idx
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// setup some helper config variables.
name|jc
operator|.
name|set
argument_list|(
literal|"map.input.file"
argument_list|,
name|split
operator|.
name|getPath
argument_list|(
name|idx
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setLong
argument_list|(
literal|"map.input.start"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// split.getOffset(idx) instead of 0
comment|// in CombineFileSplit
name|jc
operator|.
name|setLong
argument_list|(
literal|"map.input.length"
argument_list|,
name|split
operator|.
name|getLength
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|idx
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**    * InputSplitShim    *     */
specifier|public
specifier|static
class|class
name|InputSplitShim
comment|// extends MultiFileSplit
implements|implements
name|HadoopShims
operator|.
name|InputSplitShim
block|{
name|MultiFileSplit
name|delegate
decl_stmt|;
name|long
index|[]
name|offsets
decl_stmt|;
name|JobConf
name|job
decl_stmt|;
name|String
name|constructor
init|=
literal|"none"
decl_stmt|;
specifier|public
name|InputSplitShim
parameter_list|()
block|{
name|delegate
operator|=
operator|new
name|MultiFileSplit
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
index|[
literal|0
index|]
argument_list|,
operator|new
name|long
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|onDelegateChange
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|constructor
operator|=
literal|"default"
expr_stmt|;
block|}
comment|/**      * It encapsulate a set of files      *       * @param job      * @param old      * @throws IOException      */
specifier|public
name|InputSplitShim
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|MultiFileSplit
name|old
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|=
operator|new
name|MultiFileSplit
argument_list|(
name|job
argument_list|,
name|old
operator|.
name|getPaths
argument_list|()
argument_list|,
name|old
operator|.
name|getLengths
argument_list|()
argument_list|)
expr_stmt|;
name|offsets
operator|=
operator|new
name|long
index|[
name|old
operator|.
name|getPaths
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|constructor
operator|=
literal|"copy"
expr_stmt|;
block|}
specifier|public
name|long
index|[]
name|getStartOffsets
parameter_list|()
block|{
return|return
name|offsets
return|;
block|}
specifier|public
name|long
name|getOffset
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|JobConf
name|getJob
parameter_list|()
block|{
return|return
name|job
return|;
block|}
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|long
index|[]
name|getLengths
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getLengths
argument_list|()
return|;
block|}
specifier|public
name|long
name|getLength
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getLength
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNumPaths
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getNumPaths
argument_list|()
return|;
block|}
specifier|public
name|Path
name|getPath
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getPath
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|Path
index|[]
name|getPaths
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPaths
argument_list|()
return|;
block|}
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getLocations
argument_list|()
return|;
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|onDelegateChange
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|onDelegateChange
parameter_list|(
name|MultiFileSplit
name|delegate
parameter_list|)
block|{
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|offsets
operator|=
operator|new
name|long
index|[
name|delegate
operator|.
name|getNumPaths
argument_list|()
index|]
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setJob
parameter_list|(
name|JobConf
name|jc
parameter_list|)
block|{
name|job
operator|=
name|jc
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getAccessTime
parameter_list|(
name|FileStatus
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getAccessTime
argument_list|()
return|;
block|}
name|String
index|[]
name|ret
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getTaskJobIDs
parameter_list|(
name|TaskCompletionEvent
name|t
parameter_list|)
block|{
name|TaskID
name|tid
init|=
name|t
operator|.
name|getTaskAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|tid
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
index|[
literal|1
index|]
operator|=
name|tid
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

