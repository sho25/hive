begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|HadoopThriftAuthBridge
operator|.
name|Server
operator|.
name|ServerMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
specifier|public
class|class
name|HiveDelegationTokenManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_GC_INTERVAL
init|=
literal|"hive.cluster.delegation.token.gc-interval"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|long
name|DELEGATION_TOKEN_GC_INTERVAL_DEFAULT
init|=
literal|3600000
decl_stmt|;
comment|// 1 hour
comment|// Delegation token related keys
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_KEY_UPDATE_INTERVAL_KEY
init|=
literal|"hive.cluster.delegation.key.update-interval"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 day
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_RENEW_INTERVAL_KEY
init|=
literal|"hive.cluster.delegation.token.renew-interval"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 day
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_MAX_LIFETIME_KEY
init|=
literal|"hive.cluster.delegation.token.max-lifetime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 7 days
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_STORE_CLS
init|=
literal|"hive.cluster.delegation.token.store.class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_STORE_ZK_CONNECT_STR
init|=
literal|"hive.cluster.delegation.token.store.zookeeper.connectString"
decl_stmt|;
comment|// Alternate connect string specification configuration
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_STORE_ZK_CONNECT_STR_ALTERNATE
init|=
literal|"hive.zookeeper.quorum"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_STORE_ZK_CONNECT_TIMEOUTMILLIS
init|=
literal|"hive.cluster.delegation.token.store.zookeeper.connectTimeoutMillis"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_STORE_ZK_ZNODE
init|=
literal|"hive.cluster.delegation.token.store.zookeeper.znode"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_STORE_ZK_ACL
init|=
literal|"hive.cluster.delegation.token.store.zookeeper.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_STORE_ZK_ZNODE_DEFAULT
init|=
literal|"/hivedelegation"
decl_stmt|;
specifier|protected
name|DelegationTokenSecretManager
name|secretManager
decl_stmt|;
specifier|public
name|HiveDelegationTokenManager
parameter_list|()
block|{   }
specifier|public
name|DelegationTokenSecretManager
name|getSecretManager
parameter_list|()
block|{
return|return
name|secretManager
return|;
block|}
specifier|public
name|void
name|startDelegationTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Object
name|hms
parameter_list|,
name|ServerMode
name|smode
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|secretKeyInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|DELEGATION_KEY_UPDATE_INTERVAL_KEY
argument_list|,
name|DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|tokenMaxLifetime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|DELEGATION_TOKEN_MAX_LIFETIME_KEY
argument_list|,
name|DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|tokenRenewInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|DELEGATION_TOKEN_RENEW_INTERVAL_KEY
argument_list|,
name|DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|tokenGcInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|DELEGATION_TOKEN_GC_INTERVAL
argument_list|,
name|DELEGATION_TOKEN_GC_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|DelegationTokenStore
name|dts
init|=
name|getTokenStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|dts
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dts
operator|.
name|init
argument_list|(
name|hms
argument_list|,
name|smode
argument_list|)
expr_stmt|;
name|secretManager
operator|=
operator|new
name|TokenStoreDelegationTokenSecretManager
argument_list|(
name|secretKeyInterval
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|tokenRenewInterval
argument_list|,
name|tokenGcInterval
argument_list|,
name|dts
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|startThreads
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getDelegationToken
parameter_list|(
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|renewer
parameter_list|,
name|String
name|remoteAddr
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|/**      * If the user asking the token is same as the 'owner' then don't do      * any proxy authorization checks. For cases like oozie, where it gets      * a delegation token for another user, we need to make sure oozie is      * authorized to get a delegation token.      */
comment|// Do all checks on short names
name|UserGroupInformation
name|currUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ownerUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ownerUgi
operator|.
name|getShortUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|currUser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
condition|)
block|{
comment|// in the case of proxy users, the getCurrentUser will return the
comment|// real user (for e.g. oozie) due to the doAs that happened just before the
comment|// server started executing the method getDelegationToken in the MetaStore
name|ownerUgi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|owner
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ownerUgi
argument_list|,
name|remoteAddr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|ownerUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|secretManager
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDelegationTokenWithService
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|renewer
parameter_list|,
name|String
name|service
parameter_list|,
name|String
name|remoteAddr
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|token
init|=
name|getDelegationToken
argument_list|(
name|owner
argument_list|,
name|renewer
argument_list|,
name|remoteAddr
argument_list|)
decl_stmt|;
return|return
name|Utils
operator|.
name|addServiceToToken
argument_list|(
name|token
argument_list|,
name|service
argument_list|)
return|;
block|}
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|secretManager
operator|.
name|renewDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
return|;
block|}
specifier|public
name|String
name|getUserFromToken
parameter_list|(
name|String
name|tokenStr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|secretManager
operator|.
name|getUserFromToken
argument_list|(
name|tokenStr
argument_list|)
return|;
block|}
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
name|secretManager
operator|.
name|cancelDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify token string    * @param tokenStrForm    * @return user name    * @throws IOException    */
specifier|public
name|String
name|verifyDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|secretManager
operator|.
name|verifyDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
return|;
block|}
specifier|private
name|DelegationTokenStore
name|getTokenStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tokenStoreClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|DELEGATION_TOKEN_STORE_CLS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|tokenStoreClassName
argument_list|)
condition|)
block|{
return|return
operator|new
name|MemoryTokenStore
argument_list|()
return|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|DelegationTokenStore
argument_list|>
name|storeClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|tokenStoreClassName
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|DelegationTokenStore
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|storeClass
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error initializing delegation token store: "
operator|+
name|tokenStoreClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

