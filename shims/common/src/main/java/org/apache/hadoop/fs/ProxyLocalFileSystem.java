begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_comment
comment|/****************************************************************  * A Proxy for LocalFileSystem  *  * As an example, it serves uri's corresponding to: 'pfile:///' namespace with using a  * LocalFileSystem  *****************************************************************/
end_comment

begin_class
specifier|public
class|class
name|ProxyLocalFileSystem
extends|extends
name|FilterFileSystem
block|{
specifier|protected
name|LocalFileSystem
name|localFs
decl_stmt|;
comment|/**    * URI scheme    */
specifier|private
name|String
name|scheme
decl_stmt|;
specifier|public
name|ProxyLocalFileSystem
parameter_list|()
block|{
name|localFs
operator|=
operator|new
name|LocalFileSystem
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ProxyLocalFileSystem
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported Constructor"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a proxy for the local filesystem
comment|// the scheme/authority serving as the proxy is derived
comment|// from the supplied URI
name|this
operator|.
name|scheme
operator|=
name|name
operator|.
name|getScheme
argument_list|()
expr_stmt|;
name|String
name|nameUriString
init|=
name|name
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|name
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
condition|?
name|name
operator|.
name|getAuthority
argument_list|()
else|:
literal|""
decl_stmt|;
name|String
name|proxyUriString
init|=
name|scheme
operator|+
literal|"://"
operator|+
name|authority
operator|+
literal|"/"
decl_stmt|;
name|fs
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|createProxyFileSystem
argument_list|(
name|localFs
argument_list|,
name|URI
operator|.
name|create
argument_list|(
name|proxyUriString
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
annotation|@
name|Override
comment|// For pfile, calculate the checksum for use in testing
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"pfile"
argument_list|)
operator|&&
name|fs
operator|.
name|isFile
argument_list|(
name|f
argument_list|)
condition|)
block|{
return|return
name|getPFileChecksum
argument_list|(
name|f
argument_list|)
return|;
block|}
return|return
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|f
argument_list|)
return|;
block|}
specifier|private
name|FileChecksum
name|getPFileChecksum
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageDigest
name|md5Digest
decl_stmt|;
try|try
block|{
name|md5Digest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
name|MD5Hash
name|md5Hash
init|=
operator|new
name|MD5Hash
argument_list|(
name|getMD5Checksum
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|PFileChecksum
argument_list|(
name|md5Hash
argument_list|,
name|md5Digest
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Calculate MD5 checksum from data in FSDataInputStream    * @param fsInputStream    * @return byte array with md5 checksum bytes    * @throws Exception    */
specifier|static
name|byte
index|[]
name|getMD5Checksum
parameter_list|(
name|FSDataInputStream
name|fsInputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|MessageDigest
name|md5Digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|int
name|numRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numRead
operator|!=
operator|-
literal|1
condition|)
block|{
name|numRead
operator|=
name|fsInputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRead
operator|>
literal|0
condition|)
block|{
name|md5Digest
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
block|}
name|fsInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|md5Digest
operator|.
name|digest
argument_list|()
return|;
block|}
comment|/**    * Checksum implementation for PFile uses in testing    */
specifier|public
specifier|static
class|class
name|PFileChecksum
extends|extends
name|FileChecksum
block|{
specifier|private
name|MD5Hash
name|md5
decl_stmt|;
specifier|private
name|String
name|algorithmName
decl_stmt|;
specifier|public
name|PFileChecksum
parameter_list|(
name|MD5Hash
name|md5
parameter_list|,
name|String
name|algorithmName
parameter_list|)
block|{
name|this
operator|.
name|md5
operator|=
name|md5
expr_stmt|;
name|this
operator|.
name|algorithmName
operator|=
name|algorithmName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|md5
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|md5
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAlgorithmName
parameter_list|()
block|{
return|return
name|algorithmName
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
if|if
condition|(
name|md5
operator|!=
literal|null
condition|)
block|{
return|return
name|md5
operator|.
name|getDigest
argument_list|()
operator|.
name|length
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
if|if
condition|(
name|md5
operator|!=
literal|null
condition|)
block|{
return|return
name|md5
operator|.
name|getDigest
argument_list|()
return|;
block|}
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
end_class

end_unit

