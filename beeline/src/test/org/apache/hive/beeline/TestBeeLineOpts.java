begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestBeeLineOpts
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPropertyNamesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|BeeLine
name|mockBeeLine
init|=
name|mock
argument_list|(
name|BeeLine
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBeeLine
operator|.
name|isBeeLine
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeLine
operator|.
name|getReflector
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Reflector
argument_list|(
name|mockBeeLine
argument_list|)
argument_list|)
expr_stmt|;
name|BeeLineOpts
name|beeLineOpts
init|=
operator|new
name|BeeLineOpts
argument_list|(
name|mockBeeLine
argument_list|,
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|beeLineOpts
operator|.
name|propertyNamesSet
argument_list|()
operator|.
name|contains
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

