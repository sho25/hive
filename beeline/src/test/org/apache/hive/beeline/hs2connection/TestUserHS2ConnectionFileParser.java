begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|hs2connection
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|hs2connection
operator|.
name|BeelineHS2ConnectionFileParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|hs2connection
operator|.
name|UserHS2ConnectionFileParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|hs2connection
operator|.
name|HS2ConnectionFileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestUserHS2ConnectionFileParser
block|{
specifier|private
specifier|final
name|String
name|LOCATION_1
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"loc1"
operator|+
name|File
operator|.
name|separator
operator|+
name|UserHS2ConnectionFileParser
operator|.
name|DEFAULT_CONNECTION_CONFIG_FILE_NAME
decl_stmt|;
specifier|private
specifier|final
name|String
name|LOCATION_2
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"loc2"
operator|+
name|File
operator|.
name|separator
operator|+
name|UserHS2ConnectionFileParser
operator|.
name|DEFAULT_CONNECTION_CONFIG_FILE_NAME
decl_stmt|;
specifier|private
specifier|final
name|String
name|LOCATION_3
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"loc3"
operator|+
name|File
operator|.
name|separator
operator|+
name|UserHS2ConnectionFileParser
operator|.
name|DEFAULT_CONNECTION_CONFIG_FILE_NAME
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testLocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
try|try
block|{
name|deleteFile
argument_list|(
name|LOCATION_1
argument_list|)
expr_stmt|;
name|deleteFile
argument_list|(
name|LOCATION_2
argument_list|)
expr_stmt|;
name|deleteFile
argument_list|(
name|LOCATION_3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|testLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseNoAuthentication
parameter_list|()
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
name|String
name|url
init|=
name|getParsedUrlFromConfigFile
argument_list|(
literal|"test-hs2-connection-config-noauth.xml"
argument_list|)
decl_stmt|;
name|String
name|expectedUrl
init|=
literal|"jdbc:hive2://localhost:10000/default;user=hive"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expectedUrl
operator|+
literal|" got "
operator|+
name|url
argument_list|,
name|expectedUrl
operator|.
name|equals
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseZookeeper
parameter_list|()
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
name|String
name|url
init|=
name|getParsedUrlFromConfigFile
argument_list|(
literal|"test-hs2-connection-zookeeper-config.xml"
argument_list|)
decl_stmt|;
name|String
name|expectedUrl
init|=
literal|"jdbc:hive2://zk-node-1:10000,zk-node-2:10001,zk-node-3:10004/default;serviceDiscoveryMode=zookeeper;zooKeeperNamespace=hiveserver2"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expectedUrl
operator|+
literal|" got "
operator|+
name|url
argument_list|,
name|expectedUrl
operator|.
name|equals
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseWithKerberosNoSSL
parameter_list|()
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
name|String
name|url
init|=
name|getParsedUrlFromConfigFile
argument_list|(
literal|"test-hs2-conn-conf-kerberos-nossl.xml"
argument_list|)
decl_stmt|;
name|String
name|expectedUrl
init|=
literal|"jdbc:hive2://localhost:10000/default;principal=hive/dummy-hostname@domain.com;ssl=false"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expectedUrl
operator|+
literal|" got "
operator|+
name|url
argument_list|,
name|expectedUrl
operator|.
name|equals
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseWithKerberosSSL
parameter_list|()
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
name|String
name|url
init|=
name|getParsedUrlFromConfigFile
argument_list|(
literal|"test-hs2-conn-conf-kerberos-ssl.xml"
argument_list|)
decl_stmt|;
name|String
name|expectedUrl
init|=
literal|"jdbc:hive2://localhost:10000/default;principal=hive/dummy-hostname@domain.com;ssl=true;"
operator|+
literal|"sslTrustStore=test/truststore;trustStorePassword=testTruststorePassword"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expectedUrl
operator|+
literal|" got "
operator|+
name|url
argument_list|,
name|expectedUrl
operator|.
name|equals
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseWithSSLAndHttpMode
parameter_list|()
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
name|String
name|url
init|=
name|getParsedUrlFromConfigFile
argument_list|(
literal|"test-hs2-conn-conf-kerberos-http.xml"
argument_list|)
decl_stmt|;
name|String
name|expectedUrl
init|=
literal|"jdbc:hive2://localhost:10000/default;httpPath=testHTTPPath;principal=hive/dummy-hostname@domain.com;"
operator|+
literal|"ssl=true;sslTrustStore=test/truststore;transportMode=http;trustStorePassword=testTruststorePassword"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expectedUrl
operator|+
literal|" got "
operator|+
name|url
argument_list|,
name|expectedUrl
operator|.
name|equals
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUrlWithHiveConfValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|getParsedUrlFromConfigFile
argument_list|(
literal|"test-hs2-connection-conf-list.xml"
argument_list|)
decl_stmt|;
name|String
name|expectedUrl
init|=
literal|"jdbc:hive2://localhost:10000/default;user=hive?hive.cli.print.current.db=false#testVarName1=value1"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expectedUrl
operator|+
literal|" got "
operator|+
name|url
argument_list|,
name|expectedUrl
operator|.
name|equals
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUrlWithMultipleHiveConfValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|getParsedUrlFromConfigFile
argument_list|(
literal|"test-hs2-connection-multi-conf-list.xml"
argument_list|)
decl_stmt|;
name|String
name|expectedUrl
init|=
literal|"jdbc:hive2://localhost:10000/default;user=hive?hive.cli.print.current.db=true;"
operator|+
literal|"hive.cli.print.header=true#testVarName1=value1;testVarName2=value2"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expectedUrl
operator|+
literal|" got "
operator|+
name|url
argument_list|,
name|expectedUrl
operator|.
name|equals
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests if null value returned when file is not present in any of the lookup locations    */
annotation|@
name|Test
specifier|public
name|void
name|testNoLocationFoundCase
parameter_list|()
throws|throws
name|Exception
block|{
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_1
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_2
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_3
argument_list|)
expr_stmt|;
name|UserHS2ConnectionFileParser
name|testHS2ConfigManager
init|=
operator|new
name|UserHS2ConnectionFileParser
argument_list|(
name|testLocations
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testHS2ConfigManager
operator|.
name|getConnectionProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests if LOCATION_1 is returned when file is present in the first directory in lookup order    */
annotation|@
name|Test
specifier|public
name|void
name|testGetLocation1
parameter_list|()
throws|throws
name|Exception
block|{
name|createNewFile
argument_list|(
name|LOCATION_1
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_1
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_2
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_3
argument_list|)
expr_stmt|;
name|UserHS2ConnectionFileParser
name|testHS2ConfigManager
init|=
operator|new
name|UserHS2ConnectionFileParser
argument_list|(
name|testLocations
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File location "
operator|+
name|LOCATION_1
operator|+
literal|" was not returned"
argument_list|,
name|LOCATION_1
operator|.
name|equals
argument_list|(
name|testHS2ConfigManager
operator|.
name|getFileLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests if LOCATION_3 is returned when the first file is found is later in lookup order    */
annotation|@
name|Test
specifier|public
name|void
name|testGetLocation3
parameter_list|()
throws|throws
name|Exception
block|{
name|createNewFile
argument_list|(
name|LOCATION_3
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_1
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_2
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_3
argument_list|)
expr_stmt|;
name|UserHS2ConnectionFileParser
name|testHS2ConfigManager
init|=
operator|new
name|UserHS2ConnectionFileParser
argument_list|(
name|testLocations
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File location "
operator|+
name|LOCATION_3
operator|+
literal|" was not returned"
argument_list|,
name|LOCATION_3
operator|.
name|equals
argument_list|(
name|testHS2ConfigManager
operator|.
name|getFileLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests if it returns the first file present in the lookup order when files are present in the    * lookup order    */
annotation|@
name|Test
specifier|public
name|void
name|testGetLocationOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|createNewFile
argument_list|(
name|LOCATION_2
argument_list|)
expr_stmt|;
name|createNewFile
argument_list|(
name|LOCATION_3
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_1
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_2
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|LOCATION_3
argument_list|)
expr_stmt|;
name|UserHS2ConnectionFileParser
name|testHS2ConfigManager
init|=
operator|new
name|UserHS2ConnectionFileParser
argument_list|(
name|testLocations
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File location "
operator|+
name|LOCATION_2
operator|+
literal|" was not returned"
argument_list|,
name|LOCATION_2
operator|.
name|equals
argument_list|(
name|testHS2ConfigManager
operator|.
name|getFileLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getParsedUrlFromConfigFile
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
name|String
name|path
init|=
name|HiveTestUtils
operator|.
name|getFileFromClasspath
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|UserHS2ConnectionFileParser
name|testHS2ConfigManager
init|=
operator|new
name|UserHS2ConnectionFileParser
argument_list|(
name|testLocations
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|HS2ConnectionFileUtils
operator|.
name|getUrl
argument_list|(
name|testHS2ConfigManager
operator|.
name|getConnectionProperties
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|url
return|;
block|}
specifier|private
name|void
name|createNewFile
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|dir
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|indexOf
argument_list|(
name|UserHS2ConnectionFileParser
operator|.
name|DEFAULT_CONNECTION_CONFIG_FILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|dir
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|dir
argument_list|)
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not create directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not create new file at "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|deleteFile
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not delete file at "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

