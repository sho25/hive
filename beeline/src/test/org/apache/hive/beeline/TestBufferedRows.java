begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
specifier|public
class|class
name|TestBufferedRows
block|{
specifier|private
name|String
index|[]
index|[]
name|mockRowData
init|=
block|{
block|{
literal|"key1"
block|,
literal|"aaa"
block|}
block|,
block|{
literal|"key2"
block|,
literal|"bbbbb"
block|}
block|,
block|{
literal|"key3"
block|,
literal|"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
operator|+
literal|"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
operator|+
literal|"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
operator|+
literal|"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
operator|+
literal|"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
operator|+
literal|"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
operator|+
literal|"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
block|}
block|,
block|{
literal|"key4"
block|,
literal|"ddddddddddddddd"
block|}
block|}
decl_stmt|;
specifier|private
name|BeeLineOpts
name|mockBeeLineOpts
decl_stmt|;
specifier|private
name|BeeLine
name|mockBeeline
decl_stmt|;
specifier|private
name|ResultSet
name|mockResultSet
decl_stmt|;
specifier|private
name|MockRow
name|mockRow
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNormalizeWidths
parameter_list|()
throws|throws
name|SQLException
block|{
name|setupMockData
argument_list|()
expr_stmt|;
name|BufferedRows
name|bfRows
init|=
operator|new
name|BufferedRows
argument_list|(
name|mockBeeline
argument_list|,
name|mockResultSet
argument_list|)
decl_stmt|;
name|bfRows
operator|.
name|normalizeWidths
argument_list|()
expr_stmt|;
while|while
condition|(
name|bfRows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Rows
operator|.
name|Row
name|row
init|=
operator|(
name|Rows
operator|.
name|Row
operator|)
name|bfRows
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|colSize
range|:
name|row
operator|.
name|sizes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|colSize
operator|<=
name|mockBeeLineOpts
operator|.
name|getMaxColumnWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setupMockData
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// Mock BeeLine
name|mockBeeline
operator|=
name|mock
argument_list|(
name|BeeLine
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Mock BeeLineOpts
name|mockBeeLineOpts
operator|=
name|mock
argument_list|(
name|BeeLineOpts
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeLineOpts
operator|.
name|getMaxColumnWidth
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BeeLineOpts
operator|.
name|DEFAULT_MAX_COLUMN_WIDTH
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeLineOpts
operator|.
name|getNumberFormat
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeLineOpts
operator|.
name|getNullString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeline
operator|.
name|getOpts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockBeeLineOpts
argument_list|)
expr_stmt|;
comment|// MockResultSet
name|mockResultSet
operator|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
expr_stmt|;
name|ResultSetMetaData
name|mockResultSetMetaData
init|=
name|mock
argument_list|(
name|ResultSetMetaData
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockResultSetMetaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSetMetaData
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Key"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSetMetaData
operator|.
name|getColumnLabel
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Value"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSet
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockResultSetMetaData
argument_list|)
expr_stmt|;
name|mockRow
operator|=
operator|new
name|MockRow
argument_list|()
expr_stmt|;
comment|// returns true as long as there is more data in mockResultData array
name|when
argument_list|(
name|mockResultSet
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|mockRowDataIndex
init|=
literal|0
decl_stmt|;
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
if|if
condition|(
name|mockRowDataIndex
operator|<
name|mockRowData
operator|.
name|length
condition|)
block|{
name|mockRow
operator|.
name|setCurrentRowData
argument_list|(
name|mockRowData
index|[
name|mockRowDataIndex
index|]
argument_list|)
expr_stmt|;
name|mockRowDataIndex
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSet
operator|.
name|getObject
argument_list|(
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|int
name|index
init|=
operator|(
operator|(
name|Integer
operator|)
name|args
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
return|return
name|mockRow
operator|.
name|getColumn
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|MockRow
block|{
name|String
index|[]
name|rowData
decl_stmt|;
specifier|public
name|void
name|setCurrentRowData
parameter_list|(
name|String
index|[]
name|rowData
parameter_list|)
block|{
name|this
operator|.
name|rowData
operator|=
name|rowData
expr_stmt|;
block|}
specifier|public
name|String
name|getColumn
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|rowData
index|[
name|idx
operator|-
literal|1
index|]
return|;
block|}
block|}
block|}
end_class

end_unit

