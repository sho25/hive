begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2016 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|TestTableOutputFormat
block|{
specifier|public
class|class
name|BeelineMock
extends|extends
name|BeeLine
block|{
specifier|private
name|String
name|lastPrintedLine
decl_stmt|;
annotation|@
name|Override
specifier|final
name|void
name|output
parameter_list|(
specifier|final
name|ColorBuffer
name|msg
parameter_list|,
name|boolean
name|newline
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|lastPrintedLine
operator|=
name|msg
operator|.
name|getMono
argument_list|()
expr_stmt|;
name|super
operator|.
name|output
argument_list|(
name|msg
argument_list|,
name|newline
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getLastPrintedLine
parameter_list|()
block|{
return|return
name|lastPrintedLine
return|;
block|}
block|}
specifier|private
specifier|final
name|String
index|[]
index|[]
name|mockRowData
init|=
block|{
block|{
literal|"key1"
block|,
literal|"aaa"
block|}
block|,
block|{
literal|"key2"
block|,
literal|"bbbbb"
block|}
block|,
block|{
literal|"key3"
block|,
literal|"ccccccccccccccccccccccccccc"
block|}
block|,
block|{
literal|"key4"
block|,
literal|"ddddddddddddddd"
block|}
block|}
decl_stmt|;
specifier|private
name|BeelineMock
name|mockBeeline
decl_stmt|;
specifier|private
name|ResultSet
name|mockResultSet
decl_stmt|;
specifier|private
name|TestBufferedRows
operator|.
name|MockRow
name|mockRow
decl_stmt|;
comment|/**    * Test of print method, of class TableOutputFormat. There was an empty extra column after the    * last one.    */
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testPrint
parameter_list|()
throws|throws
name|SQLException
block|{
name|setupMockData
argument_list|()
expr_stmt|;
name|BufferedRows
name|bfRows
init|=
operator|new
name|BufferedRows
argument_list|(
name|mockBeeline
argument_list|,
name|mockResultSet
argument_list|)
decl_stmt|;
name|TableOutputFormat
name|instance
init|=
operator|new
name|TableOutputFormat
argument_list|(
name|mockBeeline
argument_list|)
decl_stmt|;
name|String
name|expResult
init|=
literal|"+-------+------------------------------+"
decl_stmt|;
name|instance
operator|.
name|print
argument_list|(
name|bfRows
argument_list|)
expr_stmt|;
name|String
name|outPutResults
init|=
name|mockBeeline
operator|.
name|getLastPrintedLine
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expResult
argument_list|,
name|outPutResults
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupMockData
parameter_list|()
throws|throws
name|SQLException
block|{
name|mockBeeline
operator|=
operator|new
name|BeelineMock
argument_list|()
expr_stmt|;
name|mockResultSet
operator|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
expr_stmt|;
name|ResultSetMetaData
name|mockResultSetMetaData
init|=
name|mock
argument_list|(
name|ResultSetMetaData
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockResultSetMetaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSetMetaData
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Key"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSetMetaData
operator|.
name|getColumnLabel
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Value"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSet
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockResultSetMetaData
argument_list|)
expr_stmt|;
name|mockRow
operator|=
operator|new
name|TestBufferedRows
operator|.
name|MockRow
argument_list|()
expr_stmt|;
comment|// returns true as long as there is more data in mockResultData array
name|when
argument_list|(
name|mockResultSet
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|mockRowDataIndex
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|answer
parameter_list|(
specifier|final
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
if|if
condition|(
name|mockRowDataIndex
operator|<
name|mockRowData
operator|.
name|length
condition|)
block|{
name|mockRow
operator|.
name|setCurrentRowData
argument_list|(
name|mockRowData
index|[
name|mockRowDataIndex
index|]
argument_list|)
expr_stmt|;
name|mockRowDataIndex
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSet
operator|.
name|getString
argument_list|(
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|(
specifier|final
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|int
name|index
init|=
operator|(
operator|(
name|Integer
operator|)
name|args
index|[
literal|0
index|]
operator|)
decl_stmt|;
return|return
name|mockRow
operator|.
name|getColumn
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

