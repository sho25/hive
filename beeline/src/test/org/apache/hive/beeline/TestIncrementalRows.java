begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
specifier|public
class|class
name|TestIncrementalRows
block|{
specifier|private
name|BeeLineOpts
name|mockBeeLineOpts
decl_stmt|;
specifier|private
name|BeeLine
name|mockBeeline
decl_stmt|;
specifier|private
name|Integer
name|incrementalBufferRows
init|=
literal|5
decl_stmt|;
specifier|private
name|ResultSet
name|mockResultSet
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// Mock BeeLineOpts
name|mockBeeLineOpts
operator|=
name|mock
argument_list|(
name|BeeLineOpts
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeLineOpts
operator|.
name|getIncrementalBufferRows
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|incrementalBufferRows
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeLineOpts
operator|.
name|getMaxColumnWidth
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BeeLineOpts
operator|.
name|DEFAULT_MAX_COLUMN_WIDTH
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeLineOpts
operator|.
name|getNumberFormat
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeLineOpts
operator|.
name|getNullString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
comment|// Mock BeeLine
name|mockBeeline
operator|=
name|mock
argument_list|(
name|BeeLine
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBeeline
operator|.
name|getOpts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockBeeLineOpts
argument_list|)
expr_stmt|;
comment|// MockResultSet
name|mockResultSet
operator|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
expr_stmt|;
name|ResultSetMetaData
name|mockResultSetMetaData
init|=
name|mock
argument_list|(
name|ResultSetMetaData
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockResultSetMetaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSetMetaData
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Mock Table"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSet
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockResultSetMetaData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalRowsBinaryArrayConvert
parameter_list|()
throws|throws
name|SQLException
block|{
name|when
argument_list|(
name|mockBeeLineOpts
operator|.
name|getConvertBinaryArrayToString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// First call to resultSet.next() should return true
name|initNrOfResultSetCalls
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSet
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|77
block|,
literal|77
block|,
literal|77
block|}
argument_list|)
expr_stmt|;
name|IncrementalRows
name|convertedIr
init|=
operator|new
name|IncrementalRows
argument_list|(
name|mockBeeline
argument_list|,
name|mockResultSet
argument_list|)
decl_stmt|;
name|convertedIr
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|row
init|=
name|convertedIr
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[MMM]"
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalRowsBinaryArraySkipConvert
parameter_list|()
throws|throws
name|SQLException
block|{
name|when
argument_list|(
name|mockBeeLineOpts
operator|.
name|getConvertBinaryArrayToString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// First call to resultSet.next() should return true
name|initNrOfResultSetCalls
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSet
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|77
block|,
literal|77
block|,
literal|77
block|}
argument_list|)
expr_stmt|;
name|IncrementalRows
name|convertedIr
init|=
operator|new
name|IncrementalRows
argument_list|(
name|mockBeeline
argument_list|,
name|mockResultSet
argument_list|)
decl_stmt|;
name|convertedIr
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|row
init|=
name|convertedIr
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[[77, 77, 77]]"
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initNrOfResultSetCalls
parameter_list|(
specifier|final
name|int
name|iter
parameter_list|)
throws|throws
name|SQLException
block|{
name|when
argument_list|(
name|mockResultSet
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|iterations
init|=
name|iter
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
return|return
name|this
operator|.
name|iterations
operator|--
operator|>
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalRowsWithNormalization
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// First 10 calls to resultSet.next() should return true
name|initNrOfResultSetCalls
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockResultSet
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
comment|// IncrementalRows constructor should buffer the first "incrementalBufferRows" rows
name|IncrementalRowsWithNormalization
name|incrementalRowsWithNormalization
init|=
operator|new
name|IncrementalRowsWithNormalization
argument_list|(
name|mockBeeline
argument_list|,
name|mockResultSet
argument_list|)
decl_stmt|;
comment|// When the first buffer is loaded ResultSet.next() should be called "incrementalBufferRows" times
name|verify
argument_list|(
name|mockResultSet
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Iterating through the buffer should not cause the next buffer to be fetched
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incrementalBufferRows
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|incrementalRowsWithNormalization
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|verify
argument_list|(
name|mockResultSet
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// When a new buffer is fetched ResultSet.next() should be called "incrementalBufferRows" more times
name|incrementalRowsWithNormalization
operator|.
name|next
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockResultSet
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

