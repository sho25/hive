begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TestBeeLineExceptionHandling
block|{
specifier|public
class|class
name|TestBeeline
extends|extends
name|BeeLine
block|{
specifier|private
name|String
name|expectedLoc
decl_stmt|;
specifier|private
name|int
name|logCount
decl_stmt|;
specifier|public
name|TestBeeline
parameter_list|(
name|String
name|expectedLoc
parameter_list|)
block|{
name|this
operator|.
name|expectedLoc
operator|=
name|expectedLoc
expr_stmt|;
name|this
operator|.
name|logCount
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|error
parameter_list|(
name|String
name|log
parameter_list|)
block|{
if|if
condition|(
name|logCount
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|loc
argument_list|(
name|expectedLoc
argument_list|)
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error: org.apache.thrift.transport.TTransportException "
operator|+
literal|"(state=,code=0)"
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
name|logCount
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleSQLExceptionLog
parameter_list|()
throws|throws
name|Exception
block|{
name|checkException
argument_list|(
name|TTransportException
operator|.
name|ALREADY_OPEN
argument_list|,
literal|"hs2-connection-already-open"
argument_list|)
expr_stmt|;
name|checkException
argument_list|(
name|TTransportException
operator|.
name|END_OF_FILE
argument_list|,
literal|"hs2-unexpected-end-of-file"
argument_list|)
expr_stmt|;
name|checkException
argument_list|(
name|TTransportException
operator|.
name|NOT_OPEN
argument_list|,
literal|"hs2-could-not-open-connection"
argument_list|)
expr_stmt|;
name|checkException
argument_list|(
name|TTransportException
operator|.
name|TIMED_OUT
argument_list|,
literal|"hs2-connection-timed-out"
argument_list|)
expr_stmt|;
name|checkException
argument_list|(
name|TTransportException
operator|.
name|UNKNOWN
argument_list|,
literal|"hs2-unknown-connection-problem"
argument_list|)
expr_stmt|;
name|checkException
argument_list|(
operator|-
literal|1
argument_list|,
literal|"hs2-unexpected-error"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkException
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|loc
parameter_list|)
block|{
name|BeeLine
name|testBeeLine
init|=
operator|new
name|TestBeeline
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|TTransportException
name|tTransportException
init|=
operator|new
name|TTransportException
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|SQLException
name|sqlException
init|=
operator|new
name|SQLException
argument_list|(
name|tTransportException
argument_list|)
decl_stmt|;
name|testBeeLine
operator|.
name|handleSQLException
argument_list|(
name|sqlException
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

