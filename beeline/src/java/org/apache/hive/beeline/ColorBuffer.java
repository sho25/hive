begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A buffer that can output segments using ANSI color.  *  */
end_comment

begin_class
specifier|final
class|class
name|ColorBuffer
implements|implements
name|Comparable
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|BOLD
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[1m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|NORMAL
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|REVERS
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[7m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|LINED
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[4m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|GREY
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[1;30m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|RED
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[1;31m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|GREEN
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[1;32m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|BLUE
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[1;34m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|CYAN
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[1;36m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|YELLOW
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[1;33m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|MAGENTA
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[1;35m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorBuffer
operator|.
name|ColorAttr
name|INVISIBLE
init|=
operator|new
name|ColorAttr
argument_list|(
literal|"\033[8m"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|parts
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|visibleLength
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useColor
decl_stmt|;
specifier|public
name|ColorBuffer
parameter_list|(
name|boolean
name|useColor
parameter_list|)
block|{
name|this
operator|.
name|useColor
operator|=
name|useColor
expr_stmt|;
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ColorBuffer
parameter_list|(
name|String
name|str
parameter_list|,
name|boolean
name|useColor
parameter_list|)
block|{
name|this
operator|.
name|useColor
operator|=
name|useColor
expr_stmt|;
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pad the specified String with spaces to the indicated length    *    * @param str    *          the String to pad    * @param len    *          the length we want the return String to be    * @return the passed in String with spaces appended until the    *         length matches the specified length.    */
name|ColorBuffer
name|pad
parameter_list|(
name|ColorBuffer
name|str
parameter_list|,
name|int
name|len
parameter_list|)
block|{
while|while
condition|(
name|str
operator|.
name|getVisibleLength
argument_list|()
operator|<
name|len
condition|)
block|{
name|str
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|append
argument_list|(
name|str
argument_list|)
return|;
block|}
name|ColorBuffer
name|center
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|str
argument_list|)
decl_stmt|;
while|while
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
block|{
name|buf
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|append
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
name|ColorBuffer
name|pad
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
name|str
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|pad
argument_list|(
operator|new
name|ColorBuffer
argument_list|(
name|str
argument_list|,
literal|false
argument_list|)
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|public
name|String
name|getColor
parameter_list|()
block|{
return|return
name|getBuffer
argument_list|(
name|useColor
argument_list|)
return|;
block|}
specifier|public
name|String
name|getMono
parameter_list|()
block|{
return|return
name|getBuffer
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|String
name|getBuffer
parameter_list|(
name|boolean
name|color
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
operator|!
name|color
operator|&&
name|part
operator|instanceof
name|ColorBuffer
operator|.
name|ColorAttr
condition|)
block|{
continue|continue;
block|}
name|buf
operator|.
name|append
argument_list|(
name|part
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Truncate the ColorBuffer to the specified length and return    * the new ColorBuffer. Any open color tags will be closed.    * Do nothing if the specified length is<= 0.    */
specifier|public
name|ColorBuffer
name|truncate
parameter_list|(
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
name|ColorBuffer
name|cbuff
init|=
operator|new
name|ColorBuffer
argument_list|(
name|useColor
argument_list|)
decl_stmt|;
name|ColorBuffer
operator|.
name|ColorAttr
name|lastAttr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|i
init|=
name|parts
operator|.
name|iterator
argument_list|()
init|;
name|cbuff
operator|.
name|getVisibleLength
argument_list|()
operator|<
name|len
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|next
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|ColorBuffer
operator|.
name|ColorAttr
condition|)
block|{
name|lastAttr
operator|=
operator|(
name|ColorBuffer
operator|.
name|ColorAttr
operator|)
name|next
expr_stmt|;
name|cbuff
operator|.
name|append
argument_list|(
operator|(
name|ColorBuffer
operator|.
name|ColorAttr
operator|)
name|next
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|val
init|=
name|next
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|cbuff
operator|.
name|getVisibleLength
argument_list|()
operator|+
name|val
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
block|{
name|int
name|partLen
init|=
name|len
operator|-
name|cbuff
operator|.
name|getVisibleLength
argument_list|()
decl_stmt|;
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|partLen
argument_list|)
expr_stmt|;
block|}
name|cbuff
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
comment|// close off the buffer with a normal tag
if|if
condition|(
name|lastAttr
operator|!=
literal|null
operator|&&
name|lastAttr
operator|!=
name|NORMAL
condition|)
block|{
name|cbuff
operator|.
name|append
argument_list|(
name|NORMAL
argument_list|)
expr_stmt|;
block|}
return|return
name|cbuff
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getColor
argument_list|()
return|;
block|}
specifier|public
name|ColorBuffer
name|append
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|visibleLength
operator|+=
name|str
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ColorBuffer
name|append
parameter_list|(
name|ColorBuffer
name|buf
parameter_list|)
block|{
name|parts
operator|.
name|addAll
argument_list|(
name|buf
operator|.
name|parts
argument_list|)
expr_stmt|;
name|visibleLength
operator|+=
name|buf
operator|.
name|getVisibleLength
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|ColorBuffer
name|append
parameter_list|(
name|ColorBuffer
operator|.
name|ColorAttr
name|attr
parameter_list|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getVisibleLength
parameter_list|()
block|{
return|return
name|visibleLength
return|;
block|}
specifier|private
name|ColorBuffer
name|append
parameter_list|(
name|ColorBuffer
operator|.
name|ColorAttr
name|attr
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|NORMAL
argument_list|)
expr_stmt|;
name|visibleLength
operator|+=
name|val
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ColorBuffer
name|bold
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|BOLD
argument_list|,
name|str
argument_list|)
return|;
block|}
specifier|public
name|ColorBuffer
name|lined
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|LINED
argument_list|,
name|str
argument_list|)
return|;
block|}
specifier|public
name|ColorBuffer
name|grey
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|GREY
argument_list|,
name|str
argument_list|)
return|;
block|}
specifier|public
name|ColorBuffer
name|red
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|RED
argument_list|,
name|str
argument_list|)
return|;
block|}
specifier|public
name|ColorBuffer
name|blue
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|BLUE
argument_list|,
name|str
argument_list|)
return|;
block|}
specifier|public
name|ColorBuffer
name|green
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|GREEN
argument_list|,
name|str
argument_list|)
return|;
block|}
specifier|public
name|ColorBuffer
name|cyan
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|CYAN
argument_list|,
name|str
argument_list|)
return|;
block|}
specifier|public
name|ColorBuffer
name|yellow
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|YELLOW
argument_list|,
name|str
argument_list|)
return|;
block|}
specifier|public
name|ColorBuffer
name|magenta
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|MAGENTA
argument_list|,
name|str
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ColorAttr
block|{
specifier|private
specifier|final
name|String
name|attr
decl_stmt|;
specifier|public
name|ColorAttr
parameter_list|(
name|String
name|attr
parameter_list|)
block|{
name|this
operator|.
name|attr
operator|=
name|attr
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|attr
return|;
block|}
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|getMono
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ColorBuffer
operator|)
name|other
operator|)
operator|.
name|getMono
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

