begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_comment
comment|/**  * Abstract OutputFormat.  *  */
end_comment

begin_class
specifier|abstract
class|class
name|AbstractOutputFormat
implements|implements
name|OutputFormat
block|{
annotation|@
name|Override
specifier|public
name|int
name|print
parameter_list|(
name|Rows
name|rows
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Rows
operator|.
name|Row
name|header
init|=
operator|(
name|Rows
operator|.
name|Row
operator|)
name|rows
operator|.
name|next
argument_list|()
decl_stmt|;
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|printRow
argument_list|(
name|rows
argument_list|,
name|header
argument_list|,
operator|(
name|Rows
operator|.
name|Row
operator|)
name|rows
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|printFooter
argument_list|(
name|header
argument_list|)
expr_stmt|;
return|return
name|count
return|;
block|}
specifier|abstract
name|void
name|printHeader
parameter_list|(
name|Rows
operator|.
name|Row
name|header
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|printFooter
parameter_list|(
name|Rows
operator|.
name|Row
name|header
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|printRow
parameter_list|(
name|Rows
name|rows
parameter_list|,
name|Rows
operator|.
name|Row
name|header
parameter_list|,
name|Rows
operator|.
name|Row
name|row
parameter_list|)
function_decl|;
block|}
end_class

end_unit

