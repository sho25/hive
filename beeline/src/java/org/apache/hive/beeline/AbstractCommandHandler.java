begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux  *  All rights reserved.  *  *  *  Redistribution and use in source and binary forms,  *  with or without modification, are permitted provided  *  that the following conditions are met:  *  *  Redistributions of source code must retain the above  *  copyright notice, this list of conditions and the following  *  disclaimer.  *  Redistributions in binary form must reproduce the above  *  copyright notice, this list of conditions and the following  *  disclaimer in the documentation and/or other materials  *  provided with the distribution.  *  Neither the name of the<ORGANIZATION> nor the names  *  of its contributors may be used to endorse or promote  *  products derived from this software without specific  *  prior written permission.  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS  *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED  *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE  *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF  *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  *  This software is hosted by SourceForge.  *  SourceForge is a trademark of VA Linux Systems, Inc.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * The license above originally appeared in src/sqlline/SqlLine.java  * http://sqlline.sourceforge.net/  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Completor
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|NullCompletor
import|;
end_import

begin_comment
comment|/**  * An abstract implementation of CommandHandler.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCommandHandler
implements|implements
name|CommandHandler
block|{
specifier|private
specifier|final
name|BeeLine
name|beeLine
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|names
decl_stmt|;
specifier|private
specifier|final
name|String
name|helpText
decl_stmt|;
specifier|private
name|Completor
index|[]
name|parameterCompletors
init|=
operator|new
name|Completor
index|[
literal|0
index|]
decl_stmt|;
specifier|public
name|AbstractCommandHandler
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|,
name|String
index|[]
name|names
parameter_list|,
name|String
name|helpText
parameter_list|,
name|Completor
index|[]
name|completors
parameter_list|)
block|{
name|this
operator|.
name|beeLine
operator|=
name|beeLine
expr_stmt|;
name|name
operator|=
name|names
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|helpText
operator|=
name|helpText
expr_stmt|;
if|if
condition|(
name|completors
operator|==
literal|null
operator|||
name|completors
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|parameterCompletors
operator|=
operator|new
name|Completor
index|[]
block|{
operator|new
name|NullCompletor
argument_list|()
block|}
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Completor
argument_list|>
name|c
init|=
operator|new
name|LinkedList
argument_list|<
name|Completor
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|completors
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
operator|new
name|NullCompletor
argument_list|()
argument_list|)
expr_stmt|;
name|parameterCompletors
operator|=
name|c
operator|.
name|toArray
argument_list|(
operator|new
name|Completor
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHelpText
parameter_list|()
block|{
return|return
name|helpText
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getNames
parameter_list|()
block|{
return|return
name|names
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|matches
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
operator|||
name|parts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|String
name|name2
range|:
name|names
control|)
block|{
if|if
condition|(
name|name2
operator|.
name|startsWith
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
name|name2
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setParameterCompletors
parameter_list|(
name|Completor
index|[]
name|parameterCompletors
parameter_list|)
block|{
name|this
operator|.
name|parameterCompletors
operator|=
name|parameterCompletors
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Completor
index|[]
name|getParameterCompletors
parameter_list|()
block|{
return|return
name|parameterCompletors
return|;
block|}
block|}
end_class

end_unit

