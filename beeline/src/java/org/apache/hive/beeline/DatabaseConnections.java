begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|DatabaseConnections
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|DatabaseConnection
argument_list|>
name|connections
init|=
operator|new
name|ArrayList
argument_list|<
name|DatabaseConnection
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|DatabaseConnection
name|current
parameter_list|()
block|{
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|connections
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|connections
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|DatabaseConnection
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|connections
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|connections
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|index
operator|>=
name|connections
operator|.
name|size
argument_list|()
condition|)
block|{
name|index
operator|--
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setConnection
parameter_list|(
name|DatabaseConnection
name|connection
parameter_list|)
block|{
if|if
condition|(
name|connections
operator|.
name|indexOf
argument_list|(
name|connection
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
name|connections
operator|.
name|indexOf
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|boolean
name|setIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|connections
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

