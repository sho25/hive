begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|hs2connection
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|Utils
operator|.
name|JdbcConnectionParams
import|;
end_import

begin_class
specifier|public
class|class
name|HS2ConnectionFileUtils
block|{
specifier|public
specifier|static
name|String
name|getUrl
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
if|if
condition|(
name|props
operator|==
literal|null
operator|||
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// use remove instead of get so that it is not parsed again
comment|// in the for loop below
name|String
name|urlPrefix
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|remove
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|URL_PREFIX_PROPERTY_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlPrefix
operator|==
literal|null
operator|||
name|urlPrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BeelineHS2ConnectionFileParseException
argument_list|(
literal|"url_prefix parameter cannot be empty"
argument_list|)
throw|;
block|}
name|String
name|hosts
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|remove
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|HOST_PROPERTY_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|hosts
operator|==
literal|null
operator|||
name|hosts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BeelineHS2ConnectionFileParseException
argument_list|(
literal|"hosts parameter cannot be empty"
argument_list|)
throw|;
block|}
name|String
name|defaultDB
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|remove
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|DEFAULT_DB_PROPERTY_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultDB
operator|==
literal|null
condition|)
block|{
name|defaultDB
operator|=
literal|"default"
expr_stmt|;
block|}
comment|// collect the hiveConfList and HiveVarList separately so that they can be
comment|// appended once all the session list are added to the url
name|String
name|hiveConfProperties
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|HIVE_CONF_PROPERTY_KEY
argument_list|)
condition|)
block|{
name|hiveConfProperties
operator|=
name|extractHiveVariables
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|remove
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|HIVE_CONF_PROPERTY_KEY
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|hiveVarProperties
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|HIVE_VAR_PROPERTY_KEY
argument_list|)
condition|)
block|{
name|hiveVarProperties
operator|=
name|extractHiveVariables
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|remove
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|HIVE_VAR_PROPERTY_KEY
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|urlSb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|urlSb
operator|.
name|append
argument_list|(
name|urlPrefix
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|urlSb
operator|.
name|append
argument_list|(
name|hosts
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|urlSb
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
name|urlSb
operator|.
name|append
argument_list|(
name|defaultDB
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|props
operator|.
name|stringPropertyNames
argument_list|()
argument_list|)
decl_stmt|;
comment|// sorting the keys from the properties helps to create
comment|// a deterministic url which is tested for various configuration in
comment|// TestHS2ConnectionConfigFileManager
name|Collections
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propertyName
range|:
name|keys
control|)
block|{
name|urlSb
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|urlSb
operator|.
name|append
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
name|urlSb
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|urlSb
operator|.
name|append
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hiveConfProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|urlSb
operator|.
name|append
argument_list|(
name|hiveConfProperties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hiveVarProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|urlSb
operator|.
name|append
argument_list|(
name|hiveVarProperties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|urlSb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|extractHiveVariables
parameter_list|(
name|String
name|propertyValue
parameter_list|,
name|boolean
name|isHiveConf
parameter_list|)
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
name|StringBuilder
name|hivePropertiesList
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|delimiter
decl_stmt|;
if|if
condition|(
name|isHiveConf
condition|)
block|{
name|delimiter
operator|=
literal|"?"
expr_stmt|;
block|}
else|else
block|{
name|delimiter
operator|=
literal|"#"
expr_stmt|;
block|}
name|hivePropertiesList
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
name|addPropertyValues
argument_list|(
name|propertyValue
argument_list|,
name|hivePropertiesList
argument_list|)
expr_stmt|;
return|return
name|hivePropertiesList
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|addPropertyValues
parameter_list|(
name|String
name|value
parameter_list|,
name|StringBuilder
name|hivePropertiesList
parameter_list|)
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
comment|// There could be multiple keyValuePairs separated by comma
name|String
index|[]
name|values
init|=
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|keyValuePair
range|:
name|values
control|)
block|{
name|String
index|[]
name|keyValue
init|=
name|keyValuePair
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValue
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|BeelineHS2ConnectionFileParseException
argument_list|(
literal|"Unable to parse "
operator|+
name|keyValuePair
operator|+
literal|" in hs2 connection config file"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|hivePropertiesList
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|hivePropertiesList
operator|.
name|append
argument_list|(
name|keyValue
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|hivePropertiesList
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|hivePropertiesList
operator|.
name|append
argument_list|(
name|keyValue
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getNamedUrl
parameter_list|(
name|Properties
name|userNamedConnectionURLs
parameter_list|,
name|String
name|urlName
parameter_list|)
throws|throws
name|BeelineSiteParseException
block|{
name|String
name|jdbcURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|urlName
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|urlName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Try to read the given named url from the connection configuration file
name|jdbcURL
operator|=
name|userNamedConnectionURLs
operator|.
name|getProperty
argument_list|(
name|urlName
argument_list|)
expr_stmt|;
if|if
condition|(
name|jdbcURL
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BeelineSiteParseException
argument_list|(
literal|"The named url: "
operator|+
name|urlName
operator|+
literal|" is not specified in the connection configuration file: "
operator|+
name|BeelineSiteParser
operator|.
name|DEFAULT_BEELINE_SITE_FILE_NAME
argument_list|)
throw|;
block|}
return|return
name|jdbcURL
return|;
block|}
else|else
block|{
comment|// Try to read the default named url from the connection configuration file
name|String
name|defaultURLName
init|=
name|userNamedConnectionURLs
operator|.
name|getProperty
argument_list|(
name|BeelineSiteParser
operator|.
name|DEFAULT_NAMED_JDBC_URL_PROPERTY_KEY
argument_list|)
decl_stmt|;
name|jdbcURL
operator|=
name|userNamedConnectionURLs
operator|.
name|getProperty
argument_list|(
name|defaultURLName
argument_list|)
expr_stmt|;
if|if
condition|(
name|jdbcURL
operator|!=
literal|null
condition|)
block|{
return|return
name|jdbcURL
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Merge the connection properties read from beeline-hs2-connection.xml with the    * JdbcConnectionParams extracted from the jdbc url specified in beeline.xml    *    * @param userConnectionProperties    * @param jdbcConnectionParams    * @return    * @throws BeelineHS2ConnectionFileParseException    */
specifier|public
specifier|static
name|Properties
name|mergeUserConnectionPropertiesAndBeelineSite
parameter_list|(
name|Properties
name|userConnectionProperties
parameter_list|,
name|JdbcConnectionParams
name|jdbcConnectionParams
parameter_list|)
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
name|Properties
name|mergedConnectionProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|userConnectionProperties
operator|.
name|setProperty
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|URL_PREFIX_PROPERTY_KEY
argument_list|,
literal|"jdbc:hive2://"
argument_list|)
expr_stmt|;
comment|// Host
name|String
name|host
init|=
name|getMergedProperty
argument_list|(
name|userConnectionProperties
argument_list|,
name|jdbcConnectionParams
operator|.
name|getSuppliedURLAuthority
argument_list|()
argument_list|,
name|HS2ConnectionFileParser
operator|.
name|HOST_PROPERTY_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|mergedConnectionProperties
operator|.
name|setProperty
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|HOST_PROPERTY_KEY
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
comment|// Database
name|String
name|defaultDB
init|=
name|getMergedProperty
argument_list|(
name|userConnectionProperties
argument_list|,
name|jdbcConnectionParams
operator|.
name|getDbName
argument_list|()
argument_list|,
name|HS2ConnectionFileParser
operator|.
name|DEFAULT_DB_PROPERTY_KEY
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|mergedConnectionProperties
operator|.
name|setProperty
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|DEFAULT_DB_PROPERTY_KEY
argument_list|,
name|defaultDB
argument_list|)
expr_stmt|;
comment|// hive conf
name|String
name|hiveConfProperties
init|=
name|getMergedPropertiesString
argument_list|(
name|userConnectionProperties
argument_list|,
name|HS2ConnectionFileParser
operator|.
name|HIVE_CONF_PROPERTY_KEY
argument_list|,
name|jdbcConnectionParams
operator|.
name|getHiveConfs
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hiveConfProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mergedConnectionProperties
operator|.
name|setProperty
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|HIVE_CONF_PROPERTY_KEY
argument_list|,
name|hiveConfProperties
argument_list|)
expr_stmt|;
block|}
comment|// hive vars
name|String
name|hiveVarProperties
init|=
name|getMergedPropertiesString
argument_list|(
name|userConnectionProperties
argument_list|,
name|HS2ConnectionFileParser
operator|.
name|HIVE_VAR_PROPERTY_KEY
argument_list|,
name|jdbcConnectionParams
operator|.
name|getHiveVars
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hiveVarProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mergedConnectionProperties
operator|.
name|setProperty
argument_list|(
name|HS2ConnectionFileParser
operator|.
name|HIVE_VAR_PROPERTY_KEY
argument_list|,
name|hiveVarProperties
argument_list|)
expr_stmt|;
block|}
comment|// session vars
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|jdbcConnectionParams
operator|.
name|getSessionVars
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mergedConnectionProperties
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userConnectionProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|propName
range|:
name|userConnectionProperties
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|mergedConnectionProperties
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|userConnectionProperties
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mergedConnectionProperties
return|;
block|}
specifier|private
specifier|static
name|String
name|getMergedProperty
parameter_list|(
name|Properties
name|userConnectionProperties
parameter_list|,
name|String
name|valueFromJdbcUri
parameter_list|,
name|String
name|propertyKey
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userConnectionProperties
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
operator|(
name|String
operator|)
name|userConnectionProperties
operator|.
name|remove
argument_list|(
name|propertyKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|value
operator|=
name|valueFromJdbcUri
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|value
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|private
specifier|static
name|String
name|getMergedPropertiesString
parameter_list|(
name|Properties
name|userConnectionProperties
parameter_list|,
name|String
name|propertyKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertiesFromJdbcConnParams
parameter_list|)
throws|throws
name|BeelineHS2ConnectionFileParseException
block|{
name|String
name|properties
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|(
name|userConnectionProperties
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|userConnectionProperties
operator|.
name|containsKey
argument_list|(
name|propertyKey
argument_list|)
operator|)
condition|)
block|{
name|properties
operator|=
name|extractHiveVariables
argument_list|(
operator|(
name|String
operator|)
name|userConnectionProperties
operator|.
name|remove
argument_list|(
name|propertyKey
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|propertiesFromJdbcUri
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|propertiesFromJdbcConnParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|properties
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|propertiesFromJdbcUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|propertiesFromJdbcUri
operator|=
name|propertiesFromJdbcUri
operator|+
literal|","
expr_stmt|;
block|}
name|propertiesFromJdbcUri
operator|=
name|propertiesFromJdbcUri
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|propertiesFromJdbcUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|properties
operator|=
name|properties
operator|+
literal|","
expr_stmt|;
block|}
name|properties
operator|=
name|properties
operator|+
name|propertiesFromJdbcUri
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
block|}
end_class

end_unit

