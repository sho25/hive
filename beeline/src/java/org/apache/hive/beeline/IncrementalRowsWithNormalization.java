begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * Extension of {@link IncrementalRows} which buffers "x" number of rows in memory at a time. It  * uses the {@link BufferedRows} class to do its buffering. The value of "x" is determined  by the  * Beeline option<code>--incrementalBufferRows</code>, which defaults to  * {@link BeeLineOpts#DEFAULT_INCREMENTAL_BUFFER_ROWS}. Once the initial set of rows are buffered, it  * will allow the {@link #next()} method to drain the buffer. Once the buffer is empty the next  * buffer will be fetched until the {@link ResultSet} is empty. The width of the rows are normalized  * within each buffer using the {@link BufferedRows#normalizeWidths()} method.  */
end_comment

begin_class
specifier|public
class|class
name|IncrementalRowsWithNormalization
extends|extends
name|IncrementalRows
block|{
specifier|private
specifier|final
name|int
name|incrementalBufferRows
decl_stmt|;
specifier|private
name|BufferedRows
name|buffer
decl_stmt|;
name|IncrementalRowsWithNormalization
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|,
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
name|super
argument_list|(
name|beeLine
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|this
operator|.
name|incrementalBufferRows
operator|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getIncrementalBufferRows
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|BufferedRows
argument_list|(
name|beeLine
argument_list|,
name|rs
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|this
operator|.
name|incrementalBufferRows
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|normalizeWidths
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|buffer
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|this
operator|.
name|buffer
operator|=
operator|new
name|BufferedRows
argument_list|(
name|this
operator|.
name|beeLine
argument_list|,
name|this
operator|.
name|rs
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|this
operator|.
name|incrementalBufferRows
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|normalizingWidths
condition|)
block|{
name|this
operator|.
name|buffer
operator|.
name|normalizeWidths
argument_list|()
expr_stmt|;
block|}
comment|// Drain the first Row, which just contains column names
if|if
condition|(
operator|!
name|this
operator|.
name|buffer
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|buffer
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|buffer
operator|.
name|hasNext
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|this
operator|.
name|buffer
operator|.
name|next
argument_list|()
return|;
block|}
block|}
end_class

end_unit

