begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux  *  All rights reserved.  *  *  *  Redistribution and use in source and binary forms,  *  with or without modification, are permitted provided  *  that the following conditions are met:  *  *  Redistributions of source code must retain the above  *  copyright notice, this list of conditions and the following  *  disclaimer.  *  Redistributions in binary form must reproduce the above  *  copyright notice, this list of conditions and the following  *  disclaimer in the documentation and/or other materials  *  provided with the distribution.  *  Neither the name of the<ORGANIZATION> nor the names  *  of its contributors may be used to endorse or promote  *  products derived from this software without specific  *  prior written permission.  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS  *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED  *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE  *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF  *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  *  This software is hosted by SourceForge.  *  SourceForge is a trademark of VA Linux Systems, Inc.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * The license above originally appeared in src/sqlline/SqlLine.java  * http://sqlline.sourceforge.net/  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Rows implementation which returns rows incrementally from result set  * without any buffering.  */
end_comment

begin_class
specifier|public
class|class
name|IncrementalRows
extends|extends
name|Rows
block|{
specifier|private
specifier|final
name|ResultSet
name|rs
decl_stmt|;
specifier|private
specifier|final
name|Row
name|labelRow
decl_stmt|;
specifier|private
specifier|final
name|Row
name|maxRow
decl_stmt|;
specifier|private
name|Row
name|nextRow
decl_stmt|;
specifier|private
name|boolean
name|endOfResult
decl_stmt|;
specifier|private
name|boolean
name|normalizingWidths
decl_stmt|;
name|IncrementalRows
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|,
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
name|super
argument_list|(
name|beeLine
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|this
operator|.
name|rs
operator|=
name|rs
expr_stmt|;
name|labelRow
operator|=
operator|new
name|Row
argument_list|(
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|maxRow
operator|=
operator|new
name|Row
argument_list|(
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxWidth
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getMaxColumnWidth
argument_list|()
decl_stmt|;
comment|// pre-compute normalization so we don't have to deal
comment|// with SQLExceptions later
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRow
operator|.
name|sizes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// normalized display width is based on maximum of display size
comment|// and label size
name|maxRow
operator|.
name|sizes
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxRow
operator|.
name|sizes
index|[
name|i
index|]
argument_list|,
name|rsMeta
operator|.
name|getColumnDisplaySize
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|maxRow
operator|.
name|sizes
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxWidth
argument_list|,
name|maxRow
operator|.
name|sizes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|nextRow
operator|=
name|labelRow
expr_stmt|;
name|endOfResult
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|endOfResult
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|nextRow
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|nextRow
operator|=
operator|new
name|Row
argument_list|(
name|labelRow
operator|.
name|sizes
operator|.
name|length
argument_list|,
name|rs
argument_list|)
expr_stmt|;
if|if
condition|(
name|normalizingWidths
condition|)
block|{
comment|// perform incremental normalization
name|nextRow
operator|.
name|sizes
operator|=
name|labelRow
operator|.
name|sizes
expr_stmt|;
block|}
block|}
else|else
block|{
name|endOfResult
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|nextRow
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|Object
name|ret
init|=
name|nextRow
decl_stmt|;
name|nextRow
operator|=
literal|null
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
name|void
name|normalizeWidths
parameter_list|()
block|{
comment|// normalize label row
name|labelRow
operator|.
name|sizes
operator|=
name|maxRow
operator|.
name|sizes
expr_stmt|;
comment|// and remind ourselves to perform incremental normalization
comment|// for each row as it is produced
name|normalizingWidths
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

