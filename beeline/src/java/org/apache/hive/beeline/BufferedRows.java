begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_comment
comment|/**  * Rows implementation which buffers all rows in a linked list.  */
end_comment

begin_class
class|class
name|BufferedRows
extends|extends
name|Rows
block|{
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Row
argument_list|>
name|list
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Row
argument_list|>
name|iterator
decl_stmt|;
specifier|private
name|int
name|maxColumnWidth
decl_stmt|;
name|BufferedRows
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|,
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
name|super
argument_list|(
name|beeLine
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|LinkedList
argument_list|<
name|Row
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|count
init|=
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Row
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|Row
argument_list|(
name|count
argument_list|,
name|rs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|maxColumnWidth
operator|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getMaxColumnWidth
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|list
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|normalizeWidths
parameter_list|()
block|{
name|int
index|[]
name|max
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Row
name|row
range|:
name|list
control|)
block|{
if|if
condition|(
name|max
operator|==
literal|null
condition|)
block|{
name|max
operator|=
operator|new
name|int
index|[
name|row
operator|.
name|values
operator|.
name|length
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|max
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// if the max column width is too large, reset it to max allowed Column width
name|max
index|[
name|j
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|max
index|[
name|j
index|]
argument_list|,
name|row
operator|.
name|sizes
index|[
name|j
index|]
operator|+
literal|1
argument_list|)
argument_list|,
name|maxColumnWidth
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Row
name|row
range|:
name|list
control|)
block|{
name|row
operator|.
name|sizes
operator|=
name|max
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

