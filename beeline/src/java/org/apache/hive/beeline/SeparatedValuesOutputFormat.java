begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|StringBuilderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|BooleanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|encoder
operator|.
name|CsvEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|encoder
operator|.
name|DefaultCsvEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|encoder
operator|.
name|SelectiveCsvEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|io
operator|.
name|CsvListWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|prefs
operator|.
name|CsvPreference
import|;
end_import

begin_comment
comment|/**  * OutputFormat for values separated by a configurable delimiter  */
end_comment

begin_class
class|class
name|SeparatedValuesOutputFormat
implements|implements
name|OutputFormat
block|{
specifier|public
specifier|final
specifier|static
name|String
name|DSV_OPT_OUTPUT_FORMAT
init|=
literal|"dsv"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DISABLE_QUOTING_FOR_SV
init|=
literal|"disable.quoting.for.sv"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|char
name|DEFAULT_QUOTE_CHAR
init|=
literal|'"'
decl_stmt|;
specifier|private
specifier|final
name|BeeLine
name|beeLine
decl_stmt|;
specifier|private
specifier|final
name|StringBuilderWriter
name|buffer
decl_stmt|;
specifier|private
specifier|final
name|char
name|defaultSeparator
decl_stmt|;
name|SeparatedValuesOutputFormat
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|,
name|char
name|separator
parameter_list|)
block|{
name|this
operator|.
name|beeLine
operator|=
name|beeLine
expr_stmt|;
name|this
operator|.
name|defaultSeparator
operator|=
name|separator
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|StringBuilderWriter
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CsvPreference
name|getCsvPreference
parameter_list|()
block|{
name|char
name|separator
init|=
name|this
operator|.
name|defaultSeparator
decl_stmt|;
name|char
name|quoteChar
init|=
name|DEFAULT_QUOTE_CHAR
decl_stmt|;
name|CsvEncoder
name|encoder
decl_stmt|;
if|if
condition|(
name|DSV_OPT_OUTPUT_FORMAT
operator|.
name|equals
argument_list|(
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
condition|)
block|{
name|separator
operator|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getDelimiterForDSV
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isQuotingDisabled
argument_list|()
condition|)
block|{
name|quoteChar
operator|=
literal|'\0'
expr_stmt|;
name|encoder
operator|=
operator|new
name|SelectiveCsvEncoder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|encoder
operator|=
operator|new
name|DefaultCsvEncoder
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CsvPreference
operator|.
name|Builder
argument_list|(
name|quoteChar
argument_list|,
name|separator
argument_list|,
name|StringUtils
operator|.
name|EMPTY
argument_list|)
operator|.
name|useEncoder
argument_list|(
name|encoder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|print
parameter_list|(
name|Rows
name|rows
parameter_list|)
block|{
name|CsvPreference
name|csvPreference
init|=
name|getCsvPreference
argument_list|()
decl_stmt|;
name|CsvListWriter
name|writer
init|=
operator|new
name|CsvListWriter
argument_list|(
name|this
operator|.
name|buffer
argument_list|,
name|csvPreference
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Rows
operator|.
name|Row
name|labels
init|=
operator|(
name|Rows
operator|.
name|Row
operator|)
name|rows
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getShowHeader
argument_list|()
condition|)
block|{
name|fillBuffer
argument_list|(
name|writer
argument_list|,
name|labels
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|getLine
argument_list|(
name|this
operator|.
name|buffer
argument_list|)
decl_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|fillBuffer
argument_list|(
name|writer
argument_list|,
operator|(
name|Rows
operator|.
name|Row
operator|)
name|rows
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|getLine
argument_list|(
name|this
operator|.
name|buffer
argument_list|)
decl_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * Fills the class's internal buffer with a DSV line    */
specifier|private
name|void
name|fillBuffer
parameter_list|(
name|CsvListWriter
name|writer
parameter_list|,
name|Rows
operator|.
name|Row
name|row
parameter_list|)
block|{
name|String
index|[]
name|vals
init|=
name|row
operator|.
name|values
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|vals
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getLine
parameter_list|(
name|StringBuilderWriter
name|buf
parameter_list|)
block|{
name|String
name|line
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|buf
operator|.
name|getBuilder
argument_list|()
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|line
return|;
block|}
comment|/**    * Default is disabling the double quoting for separated value    */
specifier|private
name|boolean
name|isQuotingDisabled
parameter_list|()
block|{
name|Boolean
name|quotingDisabled
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
name|String
name|quotingDisabledStr
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|SeparatedValuesOutputFormat
operator|.
name|DISABLE_QUOTING_FOR_SV
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|quotingDisabledStr
argument_list|)
condition|)
block|{
name|quotingDisabled
operator|=
name|BooleanUtils
operator|.
name|toBooleanObject
argument_list|(
name|quotingDisabledStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|quotingDisabled
operator|==
literal|null
condition|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
literal|"System Property "
operator|+
name|SeparatedValuesOutputFormat
operator|.
name|DISABLE_QUOTING_FOR_SV
operator|+
literal|" is now "
operator|+
name|quotingDisabledStr
operator|+
literal|" which only accepts boolean values"
argument_list|)
expr_stmt|;
name|quotingDisabled
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
block|}
return|return
name|quotingDisabled
return|;
block|}
block|}
end_class

end_unit

