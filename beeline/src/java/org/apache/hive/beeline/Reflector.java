begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
class|class
name|Reflector
block|{
specifier|private
specifier|final
name|BeeLine
name|beeLine
decl_stmt|;
specifier|public
name|Reflector
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|)
block|{
name|this
operator|.
name|beeLine
operator|=
name|beeLine
expr_stmt|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|on
parameter_list|,
name|String
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|ClassNotFoundException
block|{
return|return
name|invoke
argument_list|(
name|on
argument_list|,
name|method
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|on
parameter_list|,
name|String
name|method
parameter_list|,
name|List
name|args
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|ClassNotFoundException
block|{
return|return
name|invoke
argument_list|(
name|on
argument_list|,
name|on
operator|==
literal|null
condition|?
literal|null
else|:
name|on
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|on
parameter_list|,
name|Class
name|defClass
parameter_list|,
name|String
name|method
parameter_list|,
name|List
name|args
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|ClassNotFoundException
block|{
name|Class
name|c
init|=
name|defClass
operator|!=
literal|null
condition|?
name|defClass
else|:
name|on
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Method
argument_list|>
name|candidateMethods
init|=
operator|new
name|LinkedList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
name|Method
index|[]
name|m
init|=
name|c
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|m
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|candidateMethods
operator|.
name|add
argument_list|(
name|m
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|candidateMethods
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"no-method"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|method
block|,
name|c
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Method
argument_list|>
name|i
init|=
name|candidateMethods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Method
name|meth
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class
index|[]
name|ptypes
init|=
name|meth
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ptypes
operator|.
name|length
operator|==
name|args
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
continue|continue;
block|}
name|Object
index|[]
name|converted
init|=
name|convert
argument_list|(
name|args
argument_list|,
name|ptypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|converted
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|meth
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
return|return
name|meth
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
name|converted
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Object
index|[]
name|convert
parameter_list|(
name|List
name|objects
parameter_list|,
name|Class
index|[]
name|toTypes
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Object
index|[]
name|converted
init|=
operator|new
name|Object
index|[
name|objects
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|converted
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|converted
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|objects
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|toTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|converted
return|;
block|}
specifier|public
specifier|static
name|Object
name|convert
parameter_list|(
name|Object
name|ob
parameter_list|,
name|Class
name|toType
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|ob
operator|==
literal|null
operator|||
name|ob
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|toType
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Map
operator|.
name|class
condition|)
block|{
name|String
index|[]
name|vars
init|=
name|ob
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyValMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|keyValStr
range|:
name|vars
control|)
block|{
name|String
index|[]
name|keyVal
init|=
name|keyValStr
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyVal
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|keyValMap
operator|.
name|put
argument_list|(
name|keyVal
index|[
literal|0
index|]
argument_list|,
name|keyVal
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keyValMap
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Byte
operator|.
name|class
operator|||
name|toType
operator|==
name|byte
operator|.
name|class
condition|)
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Character
operator|.
name|class
operator|||
name|toType
operator|==
name|char
operator|.
name|class
condition|)
block|{
return|return
name|Character
operator|.
name|valueOf
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Short
operator|.
name|class
operator|||
name|toType
operator|==
name|short
operator|.
name|class
condition|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Integer
operator|.
name|class
operator|||
name|toType
operator|==
name|int
operator|.
name|class
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Long
operator|.
name|class
operator|||
name|toType
operator|==
name|long
operator|.
name|class
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Double
operator|.
name|class
operator|||
name|toType
operator|==
name|double
operator|.
name|class
condition|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Float
operator|.
name|class
operator|||
name|toType
operator|==
name|float
operator|.
name|class
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Boolean
operator|.
name|class
operator|||
name|toType
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
operator|||
name|ob
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|true
operator|+
literal|""
argument_list|)
operator|||
name|ob
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
operator|||
name|ob
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"on"
argument_list|)
operator|||
name|ob
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|==
name|Class
operator|.
name|class
condition|)
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|ob
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

