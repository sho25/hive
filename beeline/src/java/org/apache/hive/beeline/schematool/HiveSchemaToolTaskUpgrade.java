begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|schematool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|HiveSchemaHelper
operator|.
name|MetaStoreConnectionInfo
import|;
end_import

begin_comment
comment|/**  * Perform metastore schema upgrade.  */
end_comment

begin_class
class|class
name|HiveSchemaToolTaskUpgrade
extends|extends
name|HiveSchemaToolTask
block|{
specifier|private
name|String
name|fromVersion
decl_stmt|;
annotation|@
name|Override
name|void
name|setCommandLineArguments
parameter_list|(
name|HiveSchemaToolCommandLine
name|cl
parameter_list|)
block|{
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"upgradeSchemaFrom"
argument_list|)
condition|)
block|{
name|this
operator|.
name|fromVersion
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"upgradeSchemaFrom"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|ensureFromVersion
parameter_list|()
throws|throws
name|HiveMetaException
block|{
if|if
condition|(
name|fromVersion
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// If null, then read from the metastore
name|MetaStoreConnectionInfo
name|connectionInfo
init|=
name|schemaTool
operator|.
name|getConnectionInfo
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|fromVersion
operator|=
name|schemaTool
operator|.
name|getMetaStoreSchemaInfo
argument_list|()
operator|.
name|getMetaStoreSchemaVersion
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromVersion
operator|==
literal|null
operator|||
name|fromVersion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Schema version not stored in the metastore. "
operator|+
literal|"Metastore schema is too old or corrupt. Try specifying the version manually"
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Upgrading from the version "
operator|+
name|fromVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|ensureFromVersion
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemaTool
operator|.
name|getMetaStoreSchemaInfo
argument_list|()
operator|.
name|getHiveSchemaVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|fromVersion
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No schema upgrade required from version "
operator|+
name|fromVersion
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Find the list of scripts to execute for this upgrade
name|List
argument_list|<
name|String
argument_list|>
name|upgradeScripts
init|=
name|schemaTool
operator|.
name|getMetaStoreSchemaInfo
argument_list|()
operator|.
name|getUpgradeScripts
argument_list|(
name|fromVersion
argument_list|)
decl_stmt|;
name|schemaTool
operator|.
name|testConnectionToMetastore
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting upgrade metastore schema from version "
operator|+
name|fromVersion
operator|+
literal|" to "
operator|+
name|schemaTool
operator|.
name|getMetaStoreSchemaInfo
argument_list|()
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|scriptDir
init|=
name|schemaTool
operator|.
name|getMetaStoreSchemaInfo
argument_list|()
operator|.
name|getMetaStoreScriptDir
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|scriptFile
range|:
name|upgradeScripts
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Upgrade script "
operator|+
name|scriptFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|schemaTool
operator|.
name|isDryRun
argument_list|()
condition|)
block|{
name|runPreUpgrade
argument_list|(
name|scriptDir
argument_list|,
name|scriptFile
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|runBeeLine
argument_list|(
name|scriptDir
argument_list|,
name|scriptFile
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Completed "
operator|+
name|scriptFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Upgrade FAILED! Metastore state would be inconsistent !!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Revalidated the new version after upgrade
name|schemaTool
operator|.
name|verifySchemaVersion
argument_list|()
expr_stmt|;
block|}
comment|/**    *  Run pre-upgrade scripts corresponding to a given upgrade script,    *  if any exist. The errors from pre-upgrade are ignored.    *  Pre-upgrade scripts typically contain setup statements which    *  may fail on some database versions and failure is ignorable.    *    *  @param scriptDir upgrade script directory name    *  @param scriptFile upgrade script file name    */
specifier|private
name|void
name|runPreUpgrade
parameter_list|(
name|String
name|scriptDir
parameter_list|,
name|String
name|scriptFile
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|String
name|preUpgradeScript
init|=
name|schemaTool
operator|.
name|getMetaStoreSchemaInfo
argument_list|()
operator|.
name|getPreUpgradeScriptName
argument_list|(
name|i
argument_list|,
name|scriptFile
argument_list|)
decl_stmt|;
name|File
name|preUpgradeScriptFile
init|=
operator|new
name|File
argument_list|(
name|scriptDir
argument_list|,
name|preUpgradeScript
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|preUpgradeScriptFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
break|break;
block|}
try|try
block|{
name|schemaTool
operator|.
name|runBeeLine
argument_list|(
name|scriptDir
argument_list|,
name|preUpgradeScript
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Completed "
operator|+
name|preUpgradeScript
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore the pre-upgrade script errors
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning in pre-upgrade script "
operator|+
name|preUpgradeScript
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaTool
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

