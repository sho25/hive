begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|schematool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|HiveSchemaHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
class|class
name|HiveSchemaToolCommandLine
block|{
specifier|private
specifier|final
name|Options
name|cmdLineOptions
init|=
name|createOptions
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
name|Options
name|createOptions
parameter_list|()
block|{
name|Option
name|help
init|=
operator|new
name|Option
argument_list|(
literal|"help"
argument_list|,
literal|"print this message"
argument_list|)
decl_stmt|;
name|Option
name|infoOpt
init|=
operator|new
name|Option
argument_list|(
literal|"info"
argument_list|,
literal|"Show config and schema details"
argument_list|)
decl_stmt|;
name|Option
name|upgradeOpt
init|=
operator|new
name|Option
argument_list|(
literal|"upgradeSchema"
argument_list|,
literal|"Schema upgrade"
argument_list|)
decl_stmt|;
name|Option
name|upgradeFromOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"upgradeFrom"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Schema upgrade from a version"
argument_list|)
operator|.
name|create
argument_list|(
literal|"upgradeSchemaFrom"
argument_list|)
decl_stmt|;
name|Option
name|initOpt
init|=
operator|new
name|Option
argument_list|(
literal|"initSchema"
argument_list|,
literal|"Schema initialization"
argument_list|)
decl_stmt|;
name|Option
name|initToOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"initTo"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Schema initialization to a version"
argument_list|)
operator|.
name|create
argument_list|(
literal|"initSchemaTo"
argument_list|)
decl_stmt|;
name|Option
name|validateOpt
init|=
operator|new
name|Option
argument_list|(
literal|"validate"
argument_list|,
literal|"Validate the database"
argument_list|)
decl_stmt|;
name|Option
name|createCatalog
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Create a catalog, requires --catalogLocation parameter as well"
argument_list|)
operator|.
name|create
argument_list|(
literal|"createCatalog"
argument_list|)
decl_stmt|;
name|Option
name|alterCatalog
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Alter a catalog, requires --catalogLocation and/or --catalogDescription parameter as well"
argument_list|)
operator|.
name|create
argument_list|(
literal|"alterCatalog"
argument_list|)
decl_stmt|;
name|Option
name|moveDatabase
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Move a database between catalogs.  Argument is the database name. "
operator|+
literal|"Requires --fromCatalog and --toCatalog parameters as well"
argument_list|)
operator|.
name|create
argument_list|(
literal|"moveDatabase"
argument_list|)
decl_stmt|;
name|Option
name|moveTable
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Move a table to a different database.  Argument is the table name. "
operator|+
literal|"Requires --fromCatalog, --toCatalog, --fromDatabase, and --toDatabase "
operator|+
literal|" parameters as well."
argument_list|)
operator|.
name|create
argument_list|(
literal|"moveTable"
argument_list|)
decl_stmt|;
name|OptionGroup
name|optGroup
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
name|optGroup
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
operator|.
name|addOption
argument_list|(
name|infoOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|upgradeOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|upgradeFromOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|initOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|initToOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|validateOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|createCatalog
argument_list|)
operator|.
name|addOption
argument_list|(
name|alterCatalog
argument_list|)
operator|.
name|addOption
argument_list|(
name|moveDatabase
argument_list|)
operator|.
name|addOption
argument_list|(
name|moveTable
argument_list|)
expr_stmt|;
name|optGroup
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Option
name|userNameOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"user"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Override config file user name"
argument_list|)
operator|.
name|create
argument_list|(
literal|"userName"
argument_list|)
decl_stmt|;
name|Option
name|passwdOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"password"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Override config file password"
argument_list|)
operator|.
name|create
argument_list|(
literal|"passWord"
argument_list|)
decl_stmt|;
name|Option
name|dbTypeOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"databaseType"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Metastore database type"
argument_list|)
operator|.
name|isRequired
argument_list|()
operator|.
name|create
argument_list|(
literal|"dbType"
argument_list|)
decl_stmt|;
name|Option
name|metaDbTypeOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"metaDatabaseType"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Used only if upgrading the system catalog for hive"
argument_list|)
operator|.
name|create
argument_list|(
literal|"metaDbType"
argument_list|)
decl_stmt|;
name|Option
name|urlOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"url"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"connection url to the database"
argument_list|)
operator|.
name|create
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|Option
name|driverOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"driver"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"driver name for connection"
argument_list|)
operator|.
name|create
argument_list|(
literal|"driver"
argument_list|)
decl_stmt|;
name|Option
name|dbOpts
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"databaseOpts"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Backend DB specific options"
argument_list|)
operator|.
name|create
argument_list|(
literal|"dbOpts"
argument_list|)
decl_stmt|;
name|Option
name|dryRunOpt
init|=
operator|new
name|Option
argument_list|(
literal|"dryRun"
argument_list|,
literal|"list SQL scripts (no execute)"
argument_list|)
decl_stmt|;
name|Option
name|verboseOpt
init|=
operator|new
name|Option
argument_list|(
literal|"verbose"
argument_list|,
literal|"only print SQL statements"
argument_list|)
decl_stmt|;
name|Option
name|serversOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"serverList"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"a comma-separated list of servers used in location validation in the format of "
operator|+
literal|"scheme://authority (e.g. hdfs://localhost:8000)"
argument_list|)
operator|.
name|create
argument_list|(
literal|"servers"
argument_list|)
decl_stmt|;
name|Option
name|catalogLocation
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Location of new catalog, required when adding a catalog"
argument_list|)
operator|.
name|create
argument_list|(
literal|"catalogLocation"
argument_list|)
decl_stmt|;
name|Option
name|catalogDescription
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Description of new catalog"
argument_list|)
operator|.
name|create
argument_list|(
literal|"catalogDescription"
argument_list|)
decl_stmt|;
name|Option
name|ifNotExists
init|=
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"If passed then it is not an error to create an existing catalog"
argument_list|)
operator|.
name|create
argument_list|(
literal|"ifNotExists"
argument_list|)
decl_stmt|;
name|Option
name|fromCatalog
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Catalog a moving database or table is coming from.  This is "
operator|+
literal|"required if you are moving a database or table."
argument_list|)
operator|.
name|create
argument_list|(
literal|"fromCatalog"
argument_list|)
decl_stmt|;
name|Option
name|toCatalog
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Catalog a moving database or table is going to.  This is "
operator|+
literal|"required if you are moving a database or table."
argument_list|)
operator|.
name|create
argument_list|(
literal|"toCatalog"
argument_list|)
decl_stmt|;
name|Option
name|fromDatabase
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Database a moving table is coming from.  This is "
operator|+
literal|"required if you are moving a table."
argument_list|)
operator|.
name|create
argument_list|(
literal|"fromDatabase"
argument_list|)
decl_stmt|;
name|Option
name|toDatabase
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Database a moving table is going to.  This is "
operator|+
literal|"required if you are moving a table."
argument_list|)
operator|.
name|create
argument_list|(
literal|"toDatabase"
argument_list|)
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOptionGroup
argument_list|(
name|optGroup
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|dbTypeOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|metaDbTypeOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|userNameOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|passwdOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|urlOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|driverOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|dbOpts
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|dryRunOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|verboseOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|serversOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|catalogLocation
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|catalogDescription
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|ifNotExists
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|fromCatalog
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|toCatalog
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|fromDatabase
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|toDatabase
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
specifier|private
specifier|final
name|CommandLine
name|cl
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbType
decl_stmt|;
specifier|private
specifier|final
name|String
name|metaDbType
decl_stmt|;
name|HiveSchemaToolCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|cl
operator|=
name|getCommandLine
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|dbType
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"dbType"
argument_list|)
expr_stmt|;
name|metaDbType
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"metaDbType"
argument_list|)
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CommandLine
name|getCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
try|try
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|cmdLineOptions
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|printAndExit
argument_list|(
literal|"HiveSchemaTool:Parsing failed. Reason: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|VALID_DB_TYPES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|HiveSchemaHelper
operator|.
name|DB_DERBY
argument_list|,
name|HiveSchemaHelper
operator|.
name|DB_HIVE
argument_list|,
name|HiveSchemaHelper
operator|.
name|DB_MSSQL
argument_list|,
name|HiveSchemaHelper
operator|.
name|DB_MYSQL
argument_list|,
name|HiveSchemaHelper
operator|.
name|DB_POSTGRACE
argument_list|,
name|HiveSchemaHelper
operator|.
name|DB_ORACLE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|VALID_META_DB_TYPES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|HiveSchemaHelper
operator|.
name|DB_DERBY
argument_list|,
name|HiveSchemaHelper
operator|.
name|DB_MSSQL
argument_list|,
name|HiveSchemaHelper
operator|.
name|DB_MYSQL
argument_list|,
name|HiveSchemaHelper
operator|.
name|DB_POSTGRACE
argument_list|,
name|HiveSchemaHelper
operator|.
name|DB_ORACLE
argument_list|)
decl_stmt|;
specifier|private
name|void
name|validate
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|VALID_DB_TYPES
operator|.
name|contains
argument_list|(
name|dbType
argument_list|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|"Unsupported dbType "
operator|+
name|dbType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaDbType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|dbType
operator|.
name|equals
argument_list|(
name|HiveSchemaHelper
operator|.
name|DB_HIVE
argument_list|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|"metaDbType may only be set if dbType is hive"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|VALID_META_DB_TYPES
operator|.
name|contains
argument_list|(
name|metaDbType
argument_list|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|"Unsupported metaDbType "
operator|+
name|metaDbType
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dbType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveSchemaHelper
operator|.
name|DB_HIVE
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|printAndExit
argument_list|(
literal|"metaDbType must be set if dbType is hive"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"createCatalog"
argument_list|)
operator|)
operator|&&
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"catalogLocation"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|printAndExit
argument_list|(
literal|"catalogLocation must be set for createCatalog"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"createCatalog"
argument_list|)
operator|&&
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"alterCatalog"
argument_list|)
operator|&&
operator|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"catalogLocation"
argument_list|)
operator|||
name|cl
operator|.
name|hasOption
argument_list|(
literal|"catalogDescription"
argument_list|)
operator|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|"catalogLocation and catalogDescription may be set only for createCatalog and alterCatalog"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"createCatalog"
argument_list|)
operator|&&
name|cl
operator|.
name|hasOption
argument_list|(
literal|"ifNotExists"
argument_list|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|"ifNotExists may be set only for createCatalog"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"moveDatabase"
argument_list|)
operator|&&
operator|(
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"fromCatalog"
argument_list|)
operator|||
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"toCatalog"
argument_list|)
operator|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|"fromCatalog and toCatalog must be set for moveDatabase"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"moveTable"
argument_list|)
operator|&&
operator|(
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"fromCatalog"
argument_list|)
operator|||
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"toCatalog"
argument_list|)
operator|||
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"fromDatabase"
argument_list|)
operator|||
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"toDatabase"
argument_list|)
operator|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|"fromCatalog, toCatalog, fromDatabase and toDatabase must be set for moveTable"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"moveDatabase"
argument_list|)
operator|&&
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"moveTable"
argument_list|)
operator|)
operator|&&
operator|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"fromCatalog"
argument_list|)
operator|||
name|cl
operator|.
name|hasOption
argument_list|(
literal|"toCatalog"
argument_list|)
operator|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|"fromCatalog and toCatalog may be set only for moveDatabase and moveTable"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
literal|"moveTable"
argument_list|)
operator|&&
operator|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"fromDatabase"
argument_list|)
operator|||
name|cl
operator|.
name|hasOption
argument_list|(
literal|"toDatabase"
argument_list|)
operator|)
condition|)
block|{
name|printAndExit
argument_list|(
literal|"fromDatabase and toDatabase may be set only for moveTable"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printAndExit
parameter_list|(
name|String
name|reason
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"schemaTool"
argument_list|,
name|cmdLineOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|reason
argument_list|)
throw|;
block|}
else|else
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|getDbType
parameter_list|()
block|{
return|return
name|dbType
return|;
block|}
name|String
name|getMetaDbType
parameter_list|()
block|{
return|return
name|metaDbType
return|;
block|}
name|boolean
name|hasOption
parameter_list|(
name|String
name|opt
parameter_list|)
block|{
return|return
name|cl
operator|.
name|hasOption
argument_list|(
name|opt
argument_list|)
return|;
block|}
name|String
name|getOptionValue
parameter_list|(
name|String
name|opt
parameter_list|)
block|{
return|return
name|cl
operator|.
name|getOptionValue
argument_list|(
name|opt
argument_list|)
return|;
block|}
block|}
end_class

end_unit

