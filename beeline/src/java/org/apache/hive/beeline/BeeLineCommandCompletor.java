begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|ArgumentCompletor
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Completor
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|MultiCompletor
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|NullCompletor
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|SimpleCompletor
import|;
end_import

begin_class
class|class
name|BeeLineCommandCompletor
extends|extends
name|MultiCompletor
block|{
specifier|private
specifier|final
name|BeeLine
name|beeLine
decl_stmt|;
specifier|public
name|BeeLineCommandCompletor
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|)
block|{
name|this
operator|.
name|beeLine
operator|=
name|beeLine
expr_stmt|;
name|List
argument_list|<
name|ArgumentCompletor
argument_list|>
name|completors
init|=
operator|new
name|LinkedList
argument_list|<
name|ArgumentCompletor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|beeLine
operator|.
name|commandHandlers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|cmds
init|=
name|beeLine
operator|.
name|commandHandlers
index|[
name|i
index|]
operator|.
name|getNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|cmds
operator|!=
literal|null
operator|&&
name|j
operator|<
name|cmds
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Completor
index|[]
name|comps
init|=
name|beeLine
operator|.
name|commandHandlers
index|[
name|i
index|]
operator|.
name|getParameterCompletors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Completor
argument_list|>
name|compl
init|=
operator|new
name|LinkedList
argument_list|<
name|Completor
argument_list|>
argument_list|()
decl_stmt|;
name|compl
operator|.
name|add
argument_list|(
operator|new
name|SimpleCompletor
argument_list|(
name|BeeLine
operator|.
name|COMMAND_PREFIX
operator|+
name|cmds
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|compl
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|comps
argument_list|)
argument_list|)
expr_stmt|;
name|compl
operator|.
name|add
argument_list|(
operator|new
name|NullCompletor
argument_list|()
argument_list|)
expr_stmt|;
comment|// last param no complete
name|completors
operator|.
name|add
argument_list|(
operator|new
name|ArgumentCompletor
argument_list|(
name|compl
operator|.
name|toArray
argument_list|(
operator|new
name|Completor
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setCompletors
argument_list|(
name|completors
operator|.
name|toArray
argument_list|(
operator|new
name|Completor
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

