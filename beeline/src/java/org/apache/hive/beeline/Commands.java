begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLWarning
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
operator|.
name|ShellCmdExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveVariableSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|SystemVariables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|VariableSubstitution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|logs
operator|.
name|BeelineInPlaceUpdateStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|HiveStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|Utils
operator|.
name|JdbcConnectionParams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|logs
operator|.
name|InPlaceUpdateStream
import|;
end_import

begin_class
specifier|public
class|class
name|Commands
block|{
specifier|private
specifier|final
name|BeeLine
name|beeLine
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_QUERY_PROGRESS_INTERVAL
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|/**    * @param beeLine    */
name|Commands
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|)
block|{
name|this
operator|.
name|beeLine
operator|=
name|beeLine
expr_stmt|;
block|}
specifier|public
name|boolean
name|metadata
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|beeLine
operator|.
name|debug
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
operator|||
name|parts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|dbinfo
argument_list|(
literal|""
argument_list|)
return|;
block|}
name|params
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|debug
argument_list|(
name|params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|metadata
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|params
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|metadata
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|Method
index|[]
name|m
init|=
name|beeLine
operator|.
name|getDatabaseMetaData
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|methodNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|methodNamesUpper
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|methodNames
operator|.
name|add
argument_list|(
name|m
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|methodNamesUpper
operator|.
name|add
argument_list|(
name|m
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|methodNamesUpper
operator|.
name|contains
argument_list|(
name|cmd
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"no-such-method"
argument_list|,
name|cmd
argument_list|)
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|error
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"possible-methods"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|methodNames
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
literal|"   "
operator|+
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|Object
name|res
init|=
name|beeLine
operator|.
name|getReflector
argument_list|()
operator|.
name|invoke
argument_list|(
name|beeLine
operator|.
name|getDatabaseMetaData
argument_list|()
argument_list|,
name|DatabaseMetaData
operator|.
name|class
argument_list|,
name|cmd
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|instanceof
name|ResultSet
condition|)
block|{
name|ResultSet
name|rs
init|=
operator|(
name|ResultSet
operator|)
name|res
decl_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|beeLine
operator|.
name|print
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|beeLine
operator|.
name|output
argument_list|(
name|res
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|addlocaldrivername
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|String
name|driverName
init|=
name|arg1
argument_list|(
name|line
argument_list|,
literal|"driver class name"
argument_list|)
decl_stmt|;
try|try
block|{
name|beeLine
operator|.
name|setDrivers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|beeLine
operator|.
name|scanDrivers
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
literal|"Fail to scan drivers due to the exception:"
operator|+
name|e
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Driver
name|d
range|:
name|beeLine
operator|.
name|getDrivers
argument_list|()
control|)
block|{
if|if
condition|(
name|driverName
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|beeLine
operator|.
name|addLocalDriverClazz
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|beeLine
operator|.
name|error
argument_list|(
literal|"Fail to find a driver which contains the driver class"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|addlocaldriverjar
parameter_list|(
name|String
name|line
parameter_list|)
block|{
comment|// If jar file is in the hdfs, it should be downloaded first.
name|String
name|jarPath
init|=
name|arg1
argument_list|(
name|line
argument_list|,
literal|"jar path"
argument_list|)
decl_stmt|;
name|File
name|p
init|=
operator|new
name|File
argument_list|(
name|jarPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|exists
argument_list|()
condition|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
literal|"The jar file in the path "
operator|+
name|jarPath
operator|+
literal|" can't be found!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|URLClassLoader
name|classLoader
init|=
operator|(
name|URLClassLoader
operator|)
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|beeLine
operator|.
name|debug
argument_list|(
name|jarPath
operator|+
literal|" is added to the local beeline."
argument_list|)
expr_stmt|;
name|URLClassLoader
name|newClassLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|p
operator|.
name|toURL
argument_list|()
block|}
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|newClassLoader
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|setDrivers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|beeLine
operator|.
name|scanDrivers
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
literal|"Fail to add local jar due to the exception:"
operator|+
name|e
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|history
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Iterator
name|hist
init|=
name|beeLine
operator|.
name|getConsoleReader
argument_list|()
operator|.
name|getHistory
argument_list|()
operator|.
name|entries
argument_list|()
decl_stmt|;
name|String
index|[]
name|tmp
decl_stmt|;
while|while
condition|(
name|hist
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tmp
operator|=
name|hist
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tmp
index|[
literal|0
index|]
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|tmp
index|[
literal|0
index|]
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|tmp
index|[
literal|0
index|]
argument_list|,
literal|6
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
operator|+
name|tmp
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|String
name|arg1
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|paramname
parameter_list|)
block|{
return|return
name|arg1
argument_list|(
name|line
argument_list|,
name|paramname
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|String
name|arg1
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|paramname
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|String
index|[]
name|ret
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
name|ret
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
if|if
condition|(
name|def
operator|!=
literal|null
condition|)
block|{
return|return
name|def
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"arg-usage"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ret
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
name|ret
index|[
literal|0
index|]
block|,
name|paramname
block|}
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|ret
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|boolean
name|indexes
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|metadata
argument_list|(
literal|"getIndexInfo"
argument_list|,
operator|new
name|String
index|[]
block|{
name|beeLine
operator|.
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
block|,
literal|null
block|,
name|arg1
argument_list|(
name|line
argument_list|,
literal|"table name"
argument_list|)
block|,
literal|false
operator|+
literal|""
block|,
literal|true
operator|+
literal|""
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|primarykeys
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|metadata
argument_list|(
literal|"getPrimaryKeys"
argument_list|,
operator|new
name|String
index|[]
block|{
name|beeLine
operator|.
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
block|,
literal|null
block|,
name|arg1
argument_list|(
name|line
argument_list|,
literal|"table name"
argument_list|)
block|,}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|exportedkeys
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|metadata
argument_list|(
literal|"getExportedKeys"
argument_list|,
operator|new
name|String
index|[]
block|{
name|beeLine
operator|.
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
block|,
literal|null
block|,
name|arg1
argument_list|(
name|line
argument_list|,
literal|"table name"
argument_list|)
block|, }
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|importedkeys
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|metadata
argument_list|(
literal|"getImportedKeys"
argument_list|,
operator|new
name|String
index|[]
block|{
name|beeLine
operator|.
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
block|,
literal|null
block|,
name|arg1
argument_list|(
name|line
argument_list|,
literal|"table name"
argument_list|)
block|,}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|procedures
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|metadata
argument_list|(
literal|"getProcedures"
argument_list|,
operator|new
name|String
index|[]
block|{
name|beeLine
operator|.
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
block|,
literal|null
block|,
name|arg1
argument_list|(
name|line
argument_list|,
literal|"procedure name pattern"
argument_list|,
literal|"%"
argument_list|)
block|,}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|tables
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|metadata
argument_list|(
literal|"getTables"
argument_list|,
operator|new
name|String
index|[]
block|{
name|beeLine
operator|.
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
block|,
literal|null
block|,
name|arg1
argument_list|(
name|line
argument_list|,
literal|"table name"
argument_list|,
literal|"%"
argument_list|)
block|,
literal|null
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|typeinfo
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|metadata
argument_list|(
literal|"getTypeInfo"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|nativesql
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|sql
operator|.
name|startsWith
argument_list|(
name|BeeLine
operator|.
name|COMMAND_PREFIX
argument_list|)
condition|)
block|{
name|sql
operator|=
name|sql
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sql
operator|.
name|startsWith
argument_list|(
literal|"native"
argument_list|)
condition|)
block|{
name|sql
operator|=
name|sql
operator|.
name|substring
argument_list|(
literal|"native"
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|nat
init|=
name|beeLine
operator|.
name|getConnection
argument_list|()
operator|.
name|nativeSQL
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|nat
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|columns
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|metadata
argument_list|(
literal|"getColumns"
argument_list|,
operator|new
name|String
index|[]
block|{
name|beeLine
operator|.
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
block|,
literal|null
block|,
name|arg1
argument_list|(
name|line
argument_list|,
literal|"table name"
argument_list|)
block|,
literal|"%"
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dropall
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|==
literal|null
operator|||
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"no-current-connection"
argument_list|)
argument_list|)
return|;
block|}
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|getConsoleReader
argument_list|()
operator|.
name|readLine
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"really-drop-all"
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
literal|"y"
argument_list|)
operator|)
condition|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
literal|"abort-drop-all"
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|cmds
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|beeLine
operator|.
name|getTables
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|cmds
operator|.
name|add
argument_list|(
literal|"DROP TABLE "
operator|+
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
comment|// run as a batch
return|return
name|beeLine
operator|.
name|runCommands
argument_list|(
name|cmds
argument_list|)
operator|==
name|cmds
operator|.
name|size
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|reconnect
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|==
literal|null
operator|||
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// First, let's try connecting using the last successful url - if that fails, then we error out.
name|String
name|lastConnectedUrl
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getLastConnectedUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastConnectedUrl
operator|!=
literal|null
condition|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|lastConnectedUrl
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|connect
argument_list|(
name|props
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"no-current-connection"
argument_list|)
argument_list|)
return|;
block|}
block|}
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"reconnecting"
argument_list|,
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|reconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|scan
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|beeLine
operator|.
name|getDrivers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|beeLine
operator|.
name|setDrivers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|beeLine
operator|.
name|scanDrivers
argument_list|(
name|line
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"drivers-found-count"
argument_list|,
name|beeLine
operator|.
name|getDrivers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// unique the list
for|for
control|(
name|Iterator
argument_list|<
name|Driver
argument_list|>
name|i
init|=
name|beeLine
operator|.
name|getDrivers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|bold
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"compliant"
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|.
name|getMono
argument_list|()
argument_list|)
operator|.
name|bold
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"jdbc-version"
argument_list|)
argument_list|,
literal|8
argument_list|)
operator|.
name|getMono
argument_list|()
argument_list|)
operator|.
name|bold
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"driver-class"
argument_list|)
argument_list|)
operator|.
name|getMono
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|Driver
name|driver
init|=
operator|(
name|Driver
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|ColorBuffer
name|msg
init|=
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|driver
operator|.
name|jdbcCompliant
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|,
literal|10
argument_list|)
operator|.
name|pad
argument_list|(
name|driver
operator|.
name|getMajorVersion
argument_list|()
operator|+
literal|"."
operator|+
name|driver
operator|.
name|getMinorVersion
argument_list|()
argument_list|,
literal|8
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|driver
operator|.
name|jdbcCompliant
argument_list|()
condition|)
block|{
name|beeLine
operator|.
name|output
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|red
argument_list|(
name|msg
operator|.
name|getMono
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|red
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
comment|// error with driver
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|save
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"saving-options"
argument_list|,
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getPropertiesFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|load
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|load
argument_list|()
expr_stmt|;
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"loaded-options"
argument_list|,
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getPropertiesFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|config
parameter_list|(
name|String
name|line
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|toProperties
argument_list|()
decl_stmt|;
name|Set
name|keys
init|=
operator|new
name|TreeSet
argument_list|(
name|props
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|green
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|PROPERTY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|20
argument_list|)
operator|.
name|getMono
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|set
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"set"
argument_list|)
operator|||
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|config
argument_list|(
literal|null
argument_list|)
return|;
block|}
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|,
literal|3
argument_list|,
literal|"Usage: set<key><value>"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|key
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
name|String
name|value
init|=
name|parts
index|[
literal|2
index|]
decl_stmt|;
name|boolean
name|success
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// if we autosave, then save
if|if
condition|(
name|success
operator|&&
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getAutosave
argument_list|()
condition|)
block|{
try|try
block|{
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|saveException
parameter_list|)
block|{       }
block|}
return|return
name|success
return|;
block|}
specifier|public
name|boolean
name|commit
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertAutoCommit
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|showWarnings
argument_list|()
expr_stmt|;
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"commit-complete"
argument_list|)
operator|+
literal|" "
operator|+
name|beeLine
operator|.
name|locElapsedTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|rollback
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertAutoCommit
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|showWarnings
argument_list|()
expr_stmt|;
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"rollback-complete"
argument_list|)
operator|+
literal|" "
operator|+
name|beeLine
operator|.
name|locElapsedTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|autocommit
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"on"
argument_list|)
condition|)
block|{
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"off"
argument_list|)
condition|)
block|{
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|beeLine
operator|.
name|showWarnings
argument_list|()
expr_stmt|;
name|beeLine
operator|.
name|autocommitStatus
argument_list|(
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|dbinfo
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|beeLine
operator|.
name|showWarnings
argument_list|()
expr_stmt|;
name|int
name|padlen
init|=
literal|50
decl_stmt|;
name|String
index|[]
name|m
init|=
operator|new
name|String
index|[]
block|{
literal|"allProceduresAreCallable"
block|,
literal|"allTablesAreSelectable"
block|,
literal|"dataDefinitionCausesTransactionCommit"
block|,
literal|"dataDefinitionIgnoredInTransactions"
block|,
literal|"doesMaxRowSizeIncludeBlobs"
block|,
literal|"getCatalogSeparator"
block|,
literal|"getCatalogTerm"
block|,
literal|"getDatabaseProductName"
block|,
literal|"getDatabaseProductVersion"
block|,
literal|"getDefaultTransactionIsolation"
block|,
literal|"getDriverMajorVersion"
block|,
literal|"getDriverMinorVersion"
block|,
literal|"getDriverName"
block|,
literal|"getDriverVersion"
block|,
literal|"getExtraNameCharacters"
block|,
literal|"getIdentifierQuoteString"
block|,
literal|"getMaxBinaryLiteralLength"
block|,
literal|"getMaxCatalogNameLength"
block|,
literal|"getMaxCharLiteralLength"
block|,
literal|"getMaxColumnNameLength"
block|,
literal|"getMaxColumnsInGroupBy"
block|,
literal|"getMaxColumnsInIndex"
block|,
literal|"getMaxColumnsInOrderBy"
block|,
literal|"getMaxColumnsInSelect"
block|,
literal|"getMaxColumnsInTable"
block|,
literal|"getMaxConnections"
block|,
literal|"getMaxCursorNameLength"
block|,
literal|"getMaxIndexLength"
block|,
literal|"getMaxProcedureNameLength"
block|,
literal|"getMaxRowSize"
block|,
literal|"getMaxSchemaNameLength"
block|,
literal|"getMaxStatementLength"
block|,
literal|"getMaxStatements"
block|,
literal|"getMaxTableNameLength"
block|,
literal|"getMaxTablesInSelect"
block|,
literal|"getMaxUserNameLength"
block|,
literal|"getNumericFunctions"
block|,
literal|"getProcedureTerm"
block|,
literal|"getSchemaTerm"
block|,
literal|"getSearchStringEscape"
block|,
literal|"getSQLKeywords"
block|,
literal|"getStringFunctions"
block|,
literal|"getSystemFunctions"
block|,
literal|"getTimeDateFunctions"
block|,
literal|"getURL"
block|,
literal|"getUserName"
block|,
literal|"isCatalogAtStart"
block|,
literal|"isReadOnly"
block|,
literal|"nullPlusNonNullIsNull"
block|,
literal|"nullsAreSortedAtEnd"
block|,
literal|"nullsAreSortedAtStart"
block|,
literal|"nullsAreSortedHigh"
block|,
literal|"nullsAreSortedLow"
block|,
literal|"storesLowerCaseIdentifiers"
block|,
literal|"storesLowerCaseQuotedIdentifiers"
block|,
literal|"storesMixedCaseIdentifiers"
block|,
literal|"storesMixedCaseQuotedIdentifiers"
block|,
literal|"storesUpperCaseIdentifiers"
block|,
literal|"storesUpperCaseQuotedIdentifiers"
block|,
literal|"supportsAlterTableWithAddColumn"
block|,
literal|"supportsAlterTableWithDropColumn"
block|,
literal|"supportsANSI92EntryLevelSQL"
block|,
literal|"supportsANSI92FullSQL"
block|,
literal|"supportsANSI92IntermediateSQL"
block|,
literal|"supportsBatchUpdates"
block|,
literal|"supportsCatalogsInDataManipulation"
block|,
literal|"supportsCatalogsInIndexDefinitions"
block|,
literal|"supportsCatalogsInPrivilegeDefinitions"
block|,
literal|"supportsCatalogsInProcedureCalls"
block|,
literal|"supportsCatalogsInTableDefinitions"
block|,
literal|"supportsColumnAliasing"
block|,
literal|"supportsConvert"
block|,
literal|"supportsCoreSQLGrammar"
block|,
literal|"supportsCorrelatedSubqueries"
block|,
literal|"supportsDataDefinitionAndDataManipulationTransactions"
block|,
literal|"supportsDataManipulationTransactionsOnly"
block|,
literal|"supportsDifferentTableCorrelationNames"
block|,
literal|"supportsExpressionsInOrderBy"
block|,
literal|"supportsExtendedSQLGrammar"
block|,
literal|"supportsFullOuterJoins"
block|,
literal|"supportsGroupBy"
block|,
literal|"supportsGroupByBeyondSelect"
block|,
literal|"supportsGroupByUnrelated"
block|,
literal|"supportsIntegrityEnhancementFacility"
block|,
literal|"supportsLikeEscapeClause"
block|,
literal|"supportsLimitedOuterJoins"
block|,
literal|"supportsMinimumSQLGrammar"
block|,
literal|"supportsMixedCaseIdentifiers"
block|,
literal|"supportsMixedCaseQuotedIdentifiers"
block|,
literal|"supportsMultipleResultSets"
block|,
literal|"supportsMultipleTransactions"
block|,
literal|"supportsNonNullableColumns"
block|,
literal|"supportsOpenCursorsAcrossCommit"
block|,
literal|"supportsOpenCursorsAcrossRollback"
block|,
literal|"supportsOpenStatementsAcrossCommit"
block|,
literal|"supportsOpenStatementsAcrossRollback"
block|,
literal|"supportsOrderByUnrelated"
block|,
literal|"supportsOuterJoins"
block|,
literal|"supportsPositionedDelete"
block|,
literal|"supportsPositionedUpdate"
block|,
literal|"supportsSchemasInDataManipulation"
block|,
literal|"supportsSchemasInIndexDefinitions"
block|,
literal|"supportsSchemasInPrivilegeDefinitions"
block|,
literal|"supportsSchemasInProcedureCalls"
block|,
literal|"supportsSchemasInTableDefinitions"
block|,
literal|"supportsSelectForUpdate"
block|,
literal|"supportsStoredProcedures"
block|,
literal|"supportsSubqueriesInComparisons"
block|,
literal|"supportsSubqueriesInExists"
block|,
literal|"supportsSubqueriesInIns"
block|,
literal|"supportsSubqueriesInQuantifieds"
block|,
literal|"supportsTableCorrelationNames"
block|,
literal|"supportsTransactions"
block|,
literal|"supportsUnion"
block|,
literal|"supportsUnionAll"
block|,
literal|"usesLocalFilePerTable"
block|,
literal|"usesLocalFiles"
block|,     }
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|m
index|[
name|i
index|]
argument_list|,
name|padlen
argument_list|)
operator|.
name|append
argument_list|(
literal|""
operator|+
name|beeLine
operator|.
name|getReflector
argument_list|()
operator|.
name|invoke
argument_list|(
name|beeLine
operator|.
name|getDatabaseMetaData
argument_list|()
argument_list|,
name|m
index|[
name|i
index|]
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|m
index|[
name|i
index|]
argument_list|,
name|padlen
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|verbose
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|beeLine
operator|.
name|info
argument_list|(
literal|"verbose: on"
argument_list|)
expr_stmt|;
return|return
name|set
argument_list|(
literal|"set verbose true"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|outputformat
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|set
argument_list|(
literal|"set "
operator|+
name|line
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|brief
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|beeLine
operator|.
name|info
argument_list|(
literal|"verbose: off"
argument_list|)
expr_stmt|;
return|return
name|set
argument_list|(
literal|"set verbose false"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isolation
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|i
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"TRANSACTION_NONE"
argument_list|)
condition|)
block|{
name|i
operator|=
name|Connection
operator|.
name|TRANSACTION_NONE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"TRANSACTION_READ_COMMITTED"
argument_list|)
condition|)
block|{
name|i
operator|=
name|Connection
operator|.
name|TRANSACTION_READ_COMMITTED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"TRANSACTION_READ_UNCOMMITTED"
argument_list|)
condition|)
block|{
name|i
operator|=
name|Connection
operator|.
name|TRANSACTION_READ_UNCOMMITTED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"TRANSACTION_REPEATABLE_READ"
argument_list|)
condition|)
block|{
name|i
operator|=
name|Connection
operator|.
name|TRANSACTION_REPEATABLE_READ
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"TRANSACTION_SERIALIZABLE"
argument_list|)
condition|)
block|{
name|i
operator|=
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
expr_stmt|;
block|}
else|else
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
literal|"Usage: isolation<TRANSACTION_NONE "
operator|+
literal|"| TRANSACTION_READ_COMMITTED "
operator|+
literal|"| TRANSACTION_READ_UNCOMMITTED "
operator|+
literal|"| TRANSACTION_REPEATABLE_READ "
operator|+
literal|"| TRANSACTION_SERIALIZABLE>"
argument_list|)
return|;
block|}
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|setTransactionIsolation
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|isol
init|=
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getTransactionIsolation
argument_list|()
decl_stmt|;
specifier|final
name|String
name|isoldesc
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
name|Connection
operator|.
name|TRANSACTION_NONE
case|:
name|isoldesc
operator|=
literal|"TRANSACTION_NONE"
expr_stmt|;
break|break;
case|case
name|Connection
operator|.
name|TRANSACTION_READ_COMMITTED
case|:
name|isoldesc
operator|=
literal|"TRANSACTION_READ_COMMITTED"
expr_stmt|;
break|break;
case|case
name|Connection
operator|.
name|TRANSACTION_READ_UNCOMMITTED
case|:
name|isoldesc
operator|=
literal|"TRANSACTION_READ_UNCOMMITTED"
expr_stmt|;
break|break;
case|case
name|Connection
operator|.
name|TRANSACTION_REPEATABLE_READ
case|:
name|isoldesc
operator|=
literal|"TRANSACTION_REPEATABLE_READ"
expr_stmt|;
break|break;
case|case
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
case|:
name|isoldesc
operator|=
literal|"TRANSACTION_SERIALIZABLE"
expr_stmt|;
break|break;
default|default:
name|isoldesc
operator|=
literal|"UNKNOWN"
expr_stmt|;
block|}
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"isolation-status"
argument_list|,
name|isoldesc
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|batch
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|beeLine
operator|.
name|getBatch
argument_list|()
operator|==
literal|null
condition|)
block|{
name|beeLine
operator|.
name|setBatch
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"batch-start"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"running-batch"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|beeLine
operator|.
name|runBatch
argument_list|(
name|beeLine
operator|.
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
finally|finally
block|{
name|beeLine
operator|.
name|setBatch
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|sql
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|line
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * This method is used for retrieving the latest configuration from hive server2.    * It uses the set command processor.    *    * @return    */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariables
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|BufferedRows
name|rows
init|=
name|getConfInternal
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Rows
operator|.
name|Row
name|row
init|=
operator|(
name|Rows
operator|.
name|Row
operator|)
name|rows
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|row
operator|.
name|isMeta
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|row
operator|.
name|values
index|[
literal|0
index|]
argument_list|,
name|row
operator|.
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * This method should only be used in CLI mode.    *    * @return the hive configuration from server side    */
specifier|public
name|HiveConf
name|getHiveConf
parameter_list|(
name|boolean
name|call
parameter_list|)
block|{
name|HiveConf
name|hiveConf
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveConf
operator|!=
literal|null
operator|&&
name|call
condition|)
block|{
return|return
name|hiveConf
return|;
block|}
else|else
block|{
return|return
name|getHiveConfHelper
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
specifier|public
name|HiveConf
name|getHiveConfHelper
parameter_list|(
name|boolean
name|call
parameter_list|)
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|BufferedRows
name|rows
init|=
name|getConfInternal
argument_list|(
name|call
argument_list|)
decl_stmt|;
while|while
condition|(
name|rows
operator|!=
literal|null
operator|&&
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|addConf
argument_list|(
operator|(
name|Rows
operator|.
name|Row
operator|)
name|rows
operator|.
name|next
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**    * Use call statement to retrieve the configurations for substitution and sql for the substitution.    *    * @param call    * @return    */
specifier|private
name|BufferedRows
name|getConfInternal
parameter_list|(
name|boolean
name|call
parameter_list|)
block|{
name|Statement
name|stmnt
init|=
literal|null
decl_stmt|;
name|BufferedRows
name|rows
init|=
literal|null
decl_stmt|;
try|try
block|{
name|boolean
name|hasResults
init|=
literal|false
decl_stmt|;
name|DatabaseConnection
name|dbconn
init|=
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dbconn
operator|!=
literal|null
condition|)
name|conn
operator|=
name|dbconn
operator|.
name|getConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|call
condition|)
block|{
name|stmnt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
literal|"set"
argument_list|)
expr_stmt|;
name|hasResults
operator|=
operator|(
operator|(
name|CallableStatement
operator|)
name|stmnt
operator|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stmnt
operator|=
name|beeLine
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|hasResults
operator|=
name|stmnt
operator|.
name|execute
argument_list|(
literal|"set"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasResults
condition|)
block|{
name|ResultSet
name|rs
init|=
name|stmnt
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|rows
operator|=
operator|new
name|BufferedRows
argument_list|(
name|beeLine
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|stmnt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stmnt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e1
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rows
return|;
block|}
specifier|private
name|void
name|addConf
parameter_list|(
name|Rows
operator|.
name|Row
name|r
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|isMeta
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|r
operator|.
name|values
operator|==
literal|null
operator|||
name|r
operator|.
name|values
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|r
operator|.
name|values
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|val
init|=
name|r
operator|.
name|values
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|values
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
name|SystemVariables
operator|.
name|SYSTEM_PREFIX
argument_list|)
operator|||
name|r
operator|.
name|values
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
name|SystemVariables
operator|.
name|ENV_PREFIX
argument_list|)
condition|)
block|{
return|return;
block|}
else|else
block|{
name|String
index|[]
name|kv
init|=
name|val
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|.
name|length
operator|==
literal|2
condition|)
name|hiveConf
operator|.
name|set
argument_list|(
name|kv
index|[
literal|0
index|]
argument_list|,
name|kv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Extract and clean up the first command in the input.    */
specifier|private
name|String
name|getFirstCmd
parameter_list|(
name|String
name|cmd
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|substring
argument_list|(
name|length
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|private
name|String
index|[]
name|tokenizeCmd
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isSourceCMD
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
operator|||
name|cmd
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|String
index|[]
name|tokens
init|=
name|tokenizeCmd
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
return|return
name|tokens
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"source"
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|sourceFile
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
index|[]
name|tokens
init|=
name|tokenizeCmd
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|String
name|cmd_1
init|=
name|getFirstCmd
argument_list|(
name|cmd
argument_list|,
name|tokens
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|cmd_1
operator|=
name|substituteVariables
argument_list|(
name|getHiveConf
argument_list|(
literal|false
argument_list|)
argument_list|,
name|cmd_1
argument_list|)
expr_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|cmd_1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|boolean
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|sourceFileInternal
argument_list|(
name|sourceFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|private
name|boolean
name|sourceFileInternal
parameter_list|(
name|File
name|sourceFile
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|sourceFile
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|extra
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|String
name|lines
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|extra
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|beeLine
operator|.
name|isComment
argument_list|(
name|extra
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|lines
operator|==
literal|null
condition|)
block|{
name|lines
operator|=
name|extra
expr_stmt|;
block|}
else|else
block|{
name|lines
operator|+=
literal|"\n"
operator|+
name|extra
expr_stmt|;
block|}
name|extra
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|cmds
init|=
name|lines
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|cmds
control|)
block|{
name|c
operator|=
name|c
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|executeInternal
argument_list|(
name|c
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|cliToBeelineCmd
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|cmd
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"quit"
argument_list|)
operator|||
name|cmd
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"exit"
argument_list|)
condition|)
block|{
return|return
name|BeeLine
operator|.
name|COMMAND_PREFIX
operator|+
name|cmd
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|String
name|shell_cmd
init|=
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
literal|"!sh "
operator|+
name|shell_cmd
return|;
block|}
else|else
block|{
comment|// local mode
comment|// command like dfs
return|return
name|cmd
return|;
block|}
block|}
comment|// Return false only occurred error when execution the sql and the sql should follow the rules
comment|// of beeline.
specifier|private
name|boolean
name|executeInternal
parameter_list|(
name|String
name|sql
parameter_list|,
name|boolean
name|call
parameter_list|)
block|{
if|if
condition|(
operator|!
name|beeLine
operator|.
name|isBeeLine
argument_list|()
condition|)
block|{
name|sql
operator|=
name|cliToBeelineCmd
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sql
operator|==
literal|null
operator|||
name|sql
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|beeLine
operator|.
name|isComment
argument_list|(
name|sql
argument_list|)
condition|)
block|{
comment|//skip this and rest cmds in the line
return|return
literal|true
return|;
block|}
comment|// is source CMD
if|if
condition|(
name|isSourceCMD
argument_list|(
name|sql
argument_list|)
condition|)
block|{
return|return
name|sourceFile
argument_list|(
name|sql
argument_list|)
return|;
block|}
if|if
condition|(
name|sql
operator|.
name|startsWith
argument_list|(
name|BeeLine
operator|.
name|COMMAND_PREFIX
argument_list|)
condition|)
block|{
return|return
name|beeLine
operator|.
name|execCommandWithPrefix
argument_list|(
name|sql
argument_list|)
return|;
block|}
name|String
name|prefix
init|=
name|call
condition|?
literal|"call"
else|:
literal|"sql"
decl_stmt|;
if|if
condition|(
name|sql
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|sql
operator|=
name|sql
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// batch statements?
if|if
condition|(
name|beeLine
operator|.
name|getBatch
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|beeLine
operator|.
name|getBatch
argument_list|()
operator|.
name|add
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ClientHook
name|hook
init|=
name|ClientCommandHookFactory
operator|.
name|get
argument_list|()
operator|.
name|getHook
argument_list|(
name|beeLine
argument_list|,
name|sql
argument_list|)
decl_stmt|;
try|try
block|{
name|Statement
name|stmnt
init|=
literal|null
decl_stmt|;
name|boolean
name|hasResults
decl_stmt|;
name|Thread
name|logThread
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|call
condition|)
block|{
name|stmnt
operator|=
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|hasResults
operator|=
operator|(
operator|(
name|CallableStatement
operator|)
name|stmnt
operator|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stmnt
operator|=
name|beeLine
operator|.
name|createStatement
argument_list|()
expr_stmt|;
comment|// In test mode we want the operation logs regardless of the settings
if|if
condition|(
operator|!
name|beeLine
operator|.
name|isTestMode
argument_list|()
operator|&&
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|isSilent
argument_list|()
condition|)
block|{
name|hasResults
operator|=
name|stmnt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InPlaceUpdateStream
operator|.
name|EventNotifier
name|eventNotifier
init|=
operator|new
name|InPlaceUpdateStream
operator|.
name|EventNotifier
argument_list|()
decl_stmt|;
name|logThread
operator|=
operator|new
name|Thread
argument_list|(
name|createLogRunnable
argument_list|(
name|stmnt
argument_list|,
name|eventNotifier
argument_list|)
argument_list|)
expr_stmt|;
name|logThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logThread
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|stmnt
operator|instanceof
name|HiveStatement
condition|)
block|{
name|HiveStatement
name|hiveStatement
init|=
operator|(
name|HiveStatement
operator|)
name|stmnt
decl_stmt|;
name|hiveStatement
operator|.
name|setInPlaceUpdateStream
argument_list|(
operator|new
name|BeelineInPlaceUpdateStream
argument_list|(
name|beeLine
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|eventNotifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hasResults
operator|=
name|stmnt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|logThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|logThread
operator|.
name|join
argument_list|(
name|DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT
argument_list|)
expr_stmt|;
block|}
block|}
name|beeLine
operator|.
name|showWarnings
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasResults
condition|)
block|{
do|do
block|{
name|ResultSet
name|rs
init|=
name|stmnt
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
name|beeLine
operator|.
name|print
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"rows-selected"
argument_list|,
name|count
argument_list|)
operator|+
literal|" "
operator|+
name|beeLine
operator|.
name|locElapsedTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|logThread
operator|!=
literal|null
condition|)
block|{
name|logThread
operator|.
name|join
argument_list|(
name|DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT
argument_list|)
expr_stmt|;
name|showRemainingLogsIfAny
argument_list|(
name|stmnt
argument_list|)
expr_stmt|;
name|logThread
operator|=
literal|null
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|BeeLine
operator|.
name|getMoreResults
argument_list|(
name|stmnt
argument_list|)
condition|)
do|;
block|}
else|else
block|{
name|int
name|count
init|=
name|stmnt
operator|.
name|getUpdateCount
argument_list|()
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"rows-affected"
argument_list|,
name|count
argument_list|)
operator|+
literal|" "
operator|+
name|beeLine
operator|.
name|locElapsedTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|logThread
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|logThread
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|logThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|logThread
operator|.
name|join
argument_list|(
name|DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT
argument_list|)
expr_stmt|;
name|showRemainingLogsIfAny
argument_list|(
name|stmnt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stmnt
operator|!=
literal|null
condition|)
block|{
name|stmnt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
name|beeLine
operator|.
name|showWarnings
argument_list|()
expr_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|postHook
argument_list|(
name|beeLine
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|//startQuote use array type in order to pass int type as input/output parameter.
comment|//This method remove comment from current line of a query.
comment|//It does not remove comment like strings inside quotes.
annotation|@
name|VisibleForTesting
name|String
name|removeComments
parameter_list|(
name|String
name|line
parameter_list|,
name|int
index|[]
name|startQuote
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|line
return|;
if|if
condition|(
name|startQuote
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|beeLine
operator|.
name|isComment
argument_list|(
name|line
argument_list|)
condition|)
return|return
literal|""
return|;
comment|//assume # can only be used at the beginning of line.
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|line
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|startQuote
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|index
operator|<
name|line
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|&&
name|line
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|'-'
operator|&&
name|line
operator|.
name|charAt
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|==
literal|'-'
condition|)
block|{
return|return
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
name|char
name|letter
init|=
name|line
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|startQuote
index|[
literal|0
index|]
operator|==
name|letter
operator|&&
operator|(
name|index
operator|==
literal|0
operator|||
name|line
operator|.
name|charAt
argument_list|(
name|index
operator|-
literal|1
argument_list|)
operator|!=
literal|'\\'
operator|)
condition|)
block|{
name|startQuote
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Turn escape off.
block|}
elseif|else
if|if
condition|(
name|startQuote
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
operator|(
name|letter
operator|==
literal|'\''
operator|||
name|letter
operator|==
literal|'"'
operator|)
operator|&&
operator|(
name|index
operator|==
literal|0
operator|||
name|line
operator|.
name|charAt
argument_list|(
name|index
operator|-
literal|1
argument_list|)
operator|!=
literal|'\\'
operator|)
condition|)
block|{
name|startQuote
index|[
literal|0
index|]
operator|=
name|letter
expr_stmt|;
comment|// Turn escape on.
block|}
name|builder
operator|.
name|append
argument_list|(
name|letter
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/*    * Check if the input line is a multi-line command which needs to read further    */
specifier|public
name|String
name|handleMultiLineCmd
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
comment|//When using -e, console reader is not initialized and command is always a single line
name|int
index|[]
name|startQuote
init|=
block|{
operator|-
literal|1
block|}
decl_stmt|;
name|line
operator|=
name|removeComments
argument_list|(
name|line
argument_list|,
name|startQuote
argument_list|)
expr_stmt|;
while|while
condition|(
name|isMultiLine
argument_list|(
name|line
argument_list|)
operator|&&
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|isAllowMultiLineCommand
argument_list|()
condition|)
block|{
name|StringBuilder
name|prompt
init|=
operator|new
name|StringBuilder
argument_list|(
name|beeLine
operator|.
name|getPrompt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|isSilent
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prompt
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|prompt
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'>'
condition|)
block|{
name|prompt
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|'.'
else|:
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|extra
decl_stmt|;
comment|//avoid NPE below if for some reason -e argument has multi-line command
if|if
condition|(
name|beeLine
operator|.
name|getConsoleReader
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Console reader not initialized. This could happen when there "
operator|+
literal|"is a multi-line command using -e option and which requires further reading from console"
argument_list|)
throw|;
block|}
if|if
condition|(
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|isSilent
argument_list|()
operator|&&
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getScriptFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extra
operator|=
name|beeLine
operator|.
name|getConsoleReader
argument_list|()
operator|.
name|readLine
argument_list|(
literal|null
argument_list|,
name|jline
operator|.
name|console
operator|.
name|ConsoleReader
operator|.
name|NULL_MASK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extra
operator|=
name|beeLine
operator|.
name|getConsoleReader
argument_list|()
operator|.
name|readLine
argument_list|(
name|prompt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extra
operator|==
literal|null
condition|)
block|{
comment|//it happens when using -f and the line of cmds does not end with ;
break|break;
block|}
name|extra
operator|=
name|removeComments
argument_list|(
name|extra
argument_list|,
name|startQuote
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
operator|!=
literal|null
operator|&&
operator|!
name|extra
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|line
operator|+=
literal|"\n"
operator|+
name|extra
expr_stmt|;
block|}
block|}
return|return
name|line
return|;
block|}
comment|//returns true if statement represented by line is
comment|//not complete and needs additional reading from
comment|//console. Used in handleMultiLineCmd method
comment|//assumes line would never be null when this method is called
specifier|private
name|boolean
name|isMultiLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
operator|||
name|beeLine
operator|.
name|isComment
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// handles the case like line = show tables; --test comment
name|List
argument_list|<
name|String
argument_list|>
name|cmds
init|=
name|getCmdList
argument_list|(
name|line
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cmds
operator|.
name|isEmpty
argument_list|()
operator|&&
name|cmds
operator|.
name|get
argument_list|(
name|cmds
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|sql
parameter_list|(
name|String
name|line
parameter_list|,
name|boolean
name|entireLineAsCommand
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|line
argument_list|,
literal|false
argument_list|,
name|entireLineAsCommand
argument_list|)
return|;
block|}
specifier|public
name|String
name|substituteVariables
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
operator|!
name|beeLine
operator|.
name|isBeeLine
argument_list|()
condition|)
block|{
comment|// Substitution is only supported in non-beeline mode.
return|return
operator|new
name|VariableSubstitution
argument_list|(
operator|new
name|HiveVariableSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariable
parameter_list|()
block|{
return|return
name|getHiveVariables
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|substitute
argument_list|(
name|conf
argument_list|,
name|line
argument_list|)
return|;
block|}
return|return
name|line
return|;
block|}
specifier|public
name|boolean
name|sh
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"sh"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|"sh"
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|beeLine
operator|.
name|isBeeLine
argument_list|()
condition|)
name|line
operator|=
name|substituteVariables
argument_list|(
name|getHiveConf
argument_list|(
literal|false
argument_list|)
argument_list|,
name|line
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ShellCmdExecutor
name|executor
init|=
operator|new
name|ShellCmdExecutor
argument_list|(
name|line
argument_list|,
name|beeLine
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|beeLine
operator|.
name|getErrorStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|executor
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
name|beeLine
operator|.
name|output
argument_list|(
literal|"Command failed with exit code = "
operator|+
name|ret
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
literal|"Exception raised from Shell command "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|call
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|line
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|execute
parameter_list|(
name|String
name|line
parameter_list|,
name|boolean
name|call
parameter_list|,
name|boolean
name|entireLineAsCommand
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
comment|// ???
block|}
comment|// ### FIXME: doing the multi-line handling down here means
comment|// higher-level logic never sees the extra lines. So,
comment|// for example, if a script is being saved, it won't include
comment|// the continuation lines! This is logged as sf.net
comment|// bug 879518.
comment|// use multiple lines for statements not terminated by ";"
try|try
block|{
name|line
operator|=
name|handleMultiLineCmd
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cmdList
init|=
name|getCmdList
argument_list|(
name|line
argument_list|,
name|entireLineAsCommand
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cmdList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|sql
init|=
name|cmdList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|sql
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|executeInternal
argument_list|(
name|sql
argument_list|,
name|call
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Helper method to parse input from Beeline and convert it to a {@link List} of commands that    * can be executed. This method contains logic for handling semicolons that are placed within    * quotations. It iterates through each character in the line and checks to see if it is a ;, ',    * or "    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getCmdList
parameter_list|(
name|String
name|line
parameter_list|,
name|boolean
name|entireLineAsCommand
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cmdList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entireLineAsCommand
condition|)
block|{
name|cmdList
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|command
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Marker to track if there is starting double quote without an ending double quote
name|boolean
name|hasUnterminatedDoubleQuote
init|=
literal|false
decl_stmt|;
comment|// Marker to track if there is starting single quote without an ending double quote
name|boolean
name|hasUnterminatedSingleQuote
init|=
literal|false
decl_stmt|;
comment|// Index of the last seen semicolon in the given line
name|int
name|lastSemiColonIndex
init|=
literal|0
decl_stmt|;
name|char
index|[]
name|lineChars
init|=
name|line
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
comment|// Marker to track if the previous character was an escape character
name|boolean
name|wasPrevEscape
init|=
literal|false
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// Iterate through the line and invoke the addCmdPart method whenever a semicolon is seen that is not inside a
comment|// quoted string
for|for
control|(
init|;
name|index
operator|<
name|lineChars
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
switch|switch
condition|(
name|lineChars
index|[
name|index
index|]
condition|)
block|{
case|case
literal|'\''
case|:
comment|// If a single quote is seen and the index is not inside a double quoted string and the previous character
comment|// was not an escape, then update the hasUnterminatedSingleQuote flag
if|if
condition|(
operator|!
name|hasUnterminatedDoubleQuote
operator|&&
operator|!
name|wasPrevEscape
condition|)
block|{
name|hasUnterminatedSingleQuote
operator|=
operator|!
name|hasUnterminatedSingleQuote
expr_stmt|;
block|}
name|wasPrevEscape
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'\"'
case|:
comment|// If a double quote is seen and the index is not inside a single quoted string and the previous character
comment|// was not an escape, then update the hasUnterminatedDoubleQuote flag
if|if
condition|(
operator|!
name|hasUnterminatedSingleQuote
operator|&&
operator|!
name|wasPrevEscape
condition|)
block|{
name|hasUnterminatedDoubleQuote
operator|=
operator|!
name|hasUnterminatedDoubleQuote
expr_stmt|;
block|}
name|wasPrevEscape
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|';'
case|:
comment|// If a semicolon is seen, and the line isn't inside a quoted string, then treat
comment|// line[lastSemiColonIndex] to line[index] as a single command
if|if
condition|(
operator|!
name|hasUnterminatedDoubleQuote
operator|&&
operator|!
name|hasUnterminatedSingleQuote
condition|)
block|{
name|addCmdPart
argument_list|(
name|cmdList
argument_list|,
name|command
argument_list|,
name|line
operator|.
name|substring
argument_list|(
name|lastSemiColonIndex
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|lastSemiColonIndex
operator|=
name|index
operator|+
literal|1
expr_stmt|;
block|}
name|wasPrevEscape
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|wasPrevEscape
operator|=
operator|!
name|wasPrevEscape
expr_stmt|;
break|break;
default|default:
name|wasPrevEscape
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// If the line doesn't end with a ; or if the line is empty, add the cmd part
if|if
condition|(
name|lastSemiColonIndex
operator|!=
name|index
operator|||
name|lineChars
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|addCmdPart
argument_list|(
name|cmdList
argument_list|,
name|command
argument_list|,
name|line
operator|.
name|substring
argument_list|(
name|lastSemiColonIndex
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cmdList
return|;
block|}
comment|/**    * Given a cmdpart (e.g. if a command spans multiple lines), add to the current command, and if    * applicable add that command to the {@link List} of commands    */
specifier|private
name|void
name|addCmdPart
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cmdList
parameter_list|,
name|StringBuilder
name|command
parameter_list|,
name|String
name|cmdpart
parameter_list|)
block|{
if|if
condition|(
name|cmdpart
operator|.
name|endsWith
argument_list|(
literal|"\\"
argument_list|)
condition|)
block|{
name|command
operator|.
name|append
argument_list|(
name|cmdpart
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cmdpart
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|command
operator|.
name|append
argument_list|(
name|cmdpart
argument_list|)
expr_stmt|;
block|}
name|cmdList
operator|.
name|add
argument_list|(
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Runnable
name|createLogRunnable
parameter_list|(
specifier|final
name|Statement
name|statement
parameter_list|,
name|InPlaceUpdateStream
operator|.
name|EventNotifier
name|eventNotifier
parameter_list|)
block|{
if|if
condition|(
name|statement
operator|instanceof
name|HiveStatement
condition|)
block|{
return|return
operator|new
name|LogRunnable
argument_list|(
name|this
argument_list|,
operator|(
name|HiveStatement
operator|)
name|statement
argument_list|,
name|DEFAULT_QUERY_PROGRESS_INTERVAL
argument_list|,
name|eventNotifier
argument_list|)
return|;
block|}
else|else
block|{
name|beeLine
operator|.
name|debug
argument_list|(
literal|"The statement instance is not HiveStatement type: "
operator|+
name|statement
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// do nothing.
block|}
block|}
return|;
block|}
block|}
specifier|private
name|void
name|error
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|beeLine
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|LogRunnable
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Commands
name|commands
decl_stmt|;
specifier|private
specifier|final
name|HiveStatement
name|hiveStatement
decl_stmt|;
specifier|private
specifier|final
name|long
name|queryProgressInterval
decl_stmt|;
specifier|private
specifier|final
name|InPlaceUpdateStream
operator|.
name|EventNotifier
name|notifier
decl_stmt|;
name|LogRunnable
parameter_list|(
name|Commands
name|commands
parameter_list|,
name|HiveStatement
name|hiveStatement
parameter_list|,
name|long
name|queryProgressInterval
parameter_list|,
name|InPlaceUpdateStream
operator|.
name|EventNotifier
name|eventNotifier
parameter_list|)
block|{
name|this
operator|.
name|hiveStatement
operator|=
name|hiveStatement
expr_stmt|;
name|this
operator|.
name|commands
operator|=
name|commands
expr_stmt|;
name|this
operator|.
name|queryProgressInterval
operator|=
name|queryProgressInterval
expr_stmt|;
name|this
operator|.
name|notifier
operator|=
name|eventNotifier
expr_stmt|;
block|}
specifier|private
name|void
name|updateQueryLog
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|queryLogs
init|=
name|hiveStatement
operator|.
name|getQueryLog
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|log
range|:
name|queryLogs
control|)
block|{
if|if
condition|(
operator|!
name|commands
operator|.
name|beeLine
operator|.
name|isTestMode
argument_list|()
condition|)
block|{
name|commands
operator|.
name|beeLine
operator|.
name|info
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// In test mode print the logs to the output
name|commands
operator|.
name|beeLine
operator|.
name|output
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|queryLogs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|notifier
operator|.
name|operationLogShowedToUser
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|commands
operator|.
name|error
argument_list|(
operator|new
name|SQLWarning
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|hiveStatement
operator|.
name|hasMoreLogs
argument_list|()
condition|)
block|{
comment|/*             get the operation logs once and print it, then wait till progress bar update is complete             before printing the remaining logs.           */
if|if
condition|(
name|notifier
operator|.
name|canOutputOperationLogs
argument_list|()
condition|)
block|{
name|commands
operator|.
name|debug
argument_list|(
literal|"going to print operations logs"
argument_list|)
expr_stmt|;
name|updateQueryLog
argument_list|()
expr_stmt|;
name|commands
operator|.
name|debug
argument_list|(
literal|"printed operations logs"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|queryProgressInterval
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|commands
operator|.
name|debug
argument_list|(
literal|"Getting log thread is interrupted, since query is done!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|commands
operator|.
name|showRemainingLogsIfAny
argument_list|(
name|hiveStatement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|showRemainingLogsIfAny
parameter_list|(
name|Statement
name|statement
parameter_list|)
block|{
if|if
condition|(
name|statement
operator|instanceof
name|HiveStatement
condition|)
block|{
name|HiveStatement
name|hiveStatement
init|=
operator|(
name|HiveStatement
operator|)
name|statement
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
literal|null
decl_stmt|;
do|do
block|{
try|try
block|{
name|logs
operator|=
name|hiveStatement
operator|.
name|getQueryLog
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
operator|new
name|SQLWarning
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|String
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
operator|!
name|beeLine
operator|.
name|isTestMode
argument_list|()
condition|)
block|{
name|beeLine
operator|.
name|info
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// In test mode print the logs to the output
name|beeLine
operator|.
name|output
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
do|;
block|}
else|else
block|{
name|beeLine
operator|.
name|debug
argument_list|(
literal|"The statement instance is not HiveStatement type: "
operator|+
name|statement
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|quit
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|beeLine
operator|.
name|setExit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|close
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|exit
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|quit
argument_list|(
name|line
argument_list|)
return|;
block|}
comment|/**    * Close all connections.    */
specifier|public
name|boolean
name|closeall
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|close
argument_list|(
literal|null
argument_list|)
condition|)
block|{
while|while
condition|(
name|close
argument_list|(
literal|null
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Close the current connection.    */
specifier|public
name|boolean
name|close
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
if|if
condition|(
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getCurrentConnection
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getCurrentConnection
argument_list|()
operator|.
name|isClosed
argument_list|()
operator|)
condition|)
block|{
name|int
name|index
init|=
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"closing"
argument_list|,
name|index
argument_list|,
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getCurrentConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"already-closed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Connect to the database defined in the specified properties file.    */
specifier|public
name|boolean
name|properties
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|example
init|=
literal|""
decl_stmt|;
name|example
operator|+=
literal|"Usage: properties<properties file>"
operator|+
name|BeeLine
operator|.
name|getSeparator
argument_list|()
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|<
literal|2
condition|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|example
argument_list|)
return|;
block|}
name|int
name|successes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|FileInputStream
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connect
argument_list|(
name|props
argument_list|)
condition|)
block|{
name|successes
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|successes
operator|!=
operator|(
name|parts
operator|.
name|length
operator|-
literal|1
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|boolean
name|connect
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|example
init|=
literal|"Usage: connect<url><username><password> [driver]"
operator|+
name|BeeLine
operator|.
name|getSeparator
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|parts
operator|.
name|length
operator|<
literal|2
condition|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|example
argument_list|)
return|;
block|}
name|String
name|url
init|=
name|parts
operator|.
name|length
operator|<
literal|2
condition|?
literal|null
else|:
name|parts
index|[
literal|1
index|]
decl_stmt|;
name|String
name|user
init|=
name|parts
operator|.
name|length
operator|<
literal|3
condition|?
literal|null
else|:
name|parts
index|[
literal|2
index|]
decl_stmt|;
name|String
name|pass
init|=
name|parts
operator|.
name|length
operator|<
literal|4
condition|?
literal|null
else|:
name|parts
index|[
literal|3
index|]
decl_stmt|;
name|String
name|driver
init|=
name|parts
operator|.
name|length
operator|<
literal|5
condition|?
literal|null
else|:
name|parts
index|[
literal|4
index|]
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|String
name|saveUrl
init|=
name|getUrlToUse
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|PROPERTY_URL
argument_list|,
name|saveUrl
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|PROPERTY_DRIVER
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|Utils
operator|.
name|parsePropertyFromUrl
argument_list|(
name|url
argument_list|,
name|JdbcConnectionParams
operator|.
name|PROPERTY_DRIVER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|PROPERTY_DRIVER
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|Utils
operator|.
name|parsePropertyFromUrl
argument_list|(
name|url
argument_list|,
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pass
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
argument_list|,
name|pass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|Utils
operator|.
name|parsePropertyFromUrl
argument_list|(
name|url
argument_list|,
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|value
operator|=
name|Utils
operator|.
name|parsePropertyFromUrl
argument_list|(
name|url
argument_list|,
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|connect
argument_list|(
name|props
argument_list|)
return|;
block|}
specifier|private
name|String
name|getUrlToUse
parameter_list|(
name|String
name|urlParam
parameter_list|)
block|{
name|boolean
name|useIndirectUrl
init|=
literal|false
decl_stmt|;
comment|// If the url passed to us is a valid url with a protocol, we use it as-is
comment|// Otherwise, we assume it is a name of parameter that we have to get the url from
try|try
block|{
name|URI
name|tryParse
init|=
operator|new
name|URI
argument_list|(
name|urlParam
argument_list|)
decl_stmt|;
if|if
condition|(
name|tryParse
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// param had no scheme, so not a URL
name|useIndirectUrl
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// param did not parse as a URL, so not a URL
name|useIndirectUrl
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|useIndirectUrl
condition|)
block|{
comment|// Use url param indirectly - as the name of an env var that contains the url
comment|// If the urlParam is "default", we would look for a BEELINE_URL_DEFAULT url
name|String
name|envUrl
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
name|BeeLineOpts
operator|.
name|URL_ENV_PREFIX
operator|+
name|urlParam
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|envUrl
operator|!=
literal|null
condition|)
block|{
return|return
name|envUrl
return|;
block|}
block|}
return|return
name|urlParam
return|;
comment|// default return the urlParam passed in as-is.
block|}
specifier|private
name|String
name|getProperty
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|val
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|val
return|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|props
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|keys
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
name|keys
index|[
name|j
index|]
argument_list|)
condition|)
block|{
return|return
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|connect
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|url
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
operator|new
name|String
index|[]
block|{
name|JdbcConnectionParams
operator|.
name|PROPERTY_URL
block|,
literal|"javax.jdo.option.ConnectionURL"
block|,
literal|"ConnectionURL"
block|,     }
argument_list|)
decl_stmt|;
name|String
name|driver
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
operator|new
name|String
index|[]
block|{
name|JdbcConnectionParams
operator|.
name|PROPERTY_DRIVER
block|,
literal|"javax.jdo.option.ConnectionDriverName"
block|,
literal|"ConnectionDriverName"
block|,     }
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
operator|new
name|String
index|[]
block|{
name|JdbcConnectionParams
operator|.
name|AUTH_USER
block|,
literal|"javax.jdo.option.ConnectionUserName"
block|,
literal|"ConnectionUserName"
block|,     }
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
operator|new
name|String
index|[]
block|{
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
block|,
literal|"javax.jdo.option.ConnectionPassword"
block|,
literal|"ConnectionPassword"
block|,     }
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|url
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
literal|"Property \"url\" is required"
argument_list|)
return|;
block|}
if|if
condition|(
name|driver
operator|==
literal|null
operator|||
name|driver
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|beeLine
operator|.
name|scanForDriver
argument_list|(
name|url
argument_list|)
condition|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"no-driver"
argument_list|,
name|url
argument_list|)
argument_list|)
return|;
block|}
block|}
name|String
name|auth
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
operator|new
name|String
index|[]
block|{
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|==
literal|null
condition|)
block|{
name|auth
operator|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getAuthType
argument_list|()
expr_stmt|;
if|if
condition|(
name|auth
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
block|}
name|beeLine
operator|.
name|info
argument_list|(
literal|"Connecting to "
operator|+
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|Utils
operator|.
name|parsePropertyFromUrl
argument_list|(
name|url
argument_list|,
name|JdbcConnectionParams
operator|.
name|AUTH_PRINCIPAL
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|urlForPrompt
init|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|url
operator|.
name|contains
argument_list|(
literal|";"
argument_list|)
condition|?
name|url
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
else|:
name|url
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|username
operator|=
name|beeLine
operator|.
name|getConsoleReader
argument_list|()
operator|.
name|readLine
argument_list|(
literal|"Enter username for "
operator|+
name|urlForPrompt
operator|+
literal|": "
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|,
name|username
argument_list|)
expr_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
name|beeLine
operator|.
name|getConsoleReader
argument_list|()
operator|.
name|readLine
argument_list|(
literal|"Enter password for "
operator|+
name|urlForPrompt
operator|+
literal|": "
argument_list|,
operator|new
name|Character
argument_list|(
literal|'*'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|setConnection
argument_list|(
operator|new
name|DatabaseConnection
argument_list|(
name|beeLine
argument_list|,
name|driver
argument_list|,
name|url
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|beeLine
operator|.
name|isBeeLine
argument_list|()
condition|)
block|{
name|beeLine
operator|.
name|updateOptsForCli
argument_list|()
expr_stmt|;
block|}
name|beeLine
operator|.
name|runInit
argument_list|()
expr_stmt|;
name|beeLine
operator|.
name|setCompletions
argument_list|()
expr_stmt|;
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|setLastConnectedUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqle
parameter_list|)
block|{
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|sqle
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|rehash
parameter_list|(
name|String
name|line
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|setCompletions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/**    * List the current connections    */
specifier|public
name|boolean
name|list
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"active-connections"
argument_list|,
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DatabaseConnection
argument_list|>
name|i
init|=
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|DatabaseConnection
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|closed
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|isClosed
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
literal|" #"
operator|+
name|index
operator|+
literal|""
argument_list|,
literal|5
argument_list|)
operator|.
name|pad
argument_list|(
name|closed
condition|?
name|beeLine
operator|.
name|loc
argument_list|(
literal|"closed"
argument_list|)
else|:
name|beeLine
operator|.
name|loc
argument_list|(
literal|"open"
argument_list|)
argument_list|,
literal|9
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|all
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|int
name|index
init|=
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|setIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"executing-con"
argument_list|,
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### FIXME: this is broken for multi-line SQL
name|success
operator|=
name|sql
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|"all "
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|success
expr_stmt|;
block|}
comment|// restore index
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|setIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
specifier|public
name|boolean
name|go
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|,
literal|2
argument_list|,
literal|"Usage: go<connection index>"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|beeLine
operator|.
name|getDatabaseConnections
argument_list|()
operator|.
name|setIndex
argument_list|(
name|index
argument_list|)
operator|)
condition|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"invalid-connection"
argument_list|,
literal|""
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|list
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// list the current connections
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Save or stop saving a script to a file    */
specifier|public
name|boolean
name|script
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|beeLine
operator|.
name|getScriptOutputFile
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|startScript
argument_list|(
name|line
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|stopScript
argument_list|(
name|line
argument_list|)
return|;
block|}
block|}
comment|/**    * Stop writing to the script file and close the script.    */
specifier|private
name|boolean
name|stopScript
parameter_list|(
name|String
name|line
parameter_list|)
block|{
try|try
block|{
name|beeLine
operator|.
name|getScriptOutputFile
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"script-closed"
argument_list|,
name|beeLine
operator|.
name|getScriptOutputFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|setScriptOutputFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Start writing to the specified script file.    */
specifier|private
name|boolean
name|startScript
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|beeLine
operator|.
name|getScriptOutputFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"script-already-running"
argument_list|,
name|beeLine
operator|.
name|getScriptOutputFile
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|,
literal|2
argument_list|,
literal|"Usage: script<filename>"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|beeLine
operator|.
name|setScriptOutputFile
argument_list|(
operator|new
name|OutputFile
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"script-started"
argument_list|,
name|beeLine
operator|.
name|getScriptOutputFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/**    * Run a script from the specified file.    */
specifier|public
name|boolean
name|run
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|,
literal|2
argument_list|,
literal|"Usage: run<scriptfile>"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
index|[]
name|cmds
init|=
name|beeLine
operator|.
name|getCommands
argument_list|(
operator|new
name|File
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|// success only if all the commands were successful
return|return
name|beeLine
operator|.
name|runCommands
argument_list|(
name|cmds
argument_list|)
operator|==
name|cmds
operator|.
name|length
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/**    * Save or stop saving all output to a file.    */
specifier|public
name|boolean
name|record
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|beeLine
operator|.
name|getRecordOutputFile
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|startRecording
argument_list|(
name|line
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|stopRecording
argument_list|(
name|line
argument_list|)
return|;
block|}
block|}
comment|/**    * Stop writing output to the record file.    */
specifier|private
name|boolean
name|stopRecording
parameter_list|(
name|String
name|line
parameter_list|)
block|{
try|try
block|{
name|beeLine
operator|.
name|getRecordOutputFile
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|beeLine
operator|.
name|setRecordOutputFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"record-closed"
argument_list|,
name|beeLine
operator|.
name|getRecordOutputFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Start writing to the specified record file.    */
specifier|private
name|boolean
name|startRecording
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|beeLine
operator|.
name|getRecordOutputFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"record-already-running"
argument_list|,
name|beeLine
operator|.
name|getRecordOutputFile
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|,
literal|2
argument_list|,
literal|"Usage: record<filename>"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|OutputFile
name|recordOutput
init|=
operator|new
name|OutputFile
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"record-started"
argument_list|,
name|recordOutput
argument_list|)
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|setRecordOutputFile
argument_list|(
name|recordOutput
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|describe
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
index|[]
name|table
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|,
literal|2
argument_list|,
literal|"Usage: describe<table name>"
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ResultSet
name|rs
decl_stmt|;
if|if
condition|(
name|table
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"tables"
argument_list|)
condition|)
block|{
name|rs
operator|=
name|beeLine
operator|.
name|getTables
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rs
operator|=
name|beeLine
operator|.
name|getColumns
argument_list|(
name|table
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rs
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|beeLine
operator|.
name|print
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|help
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|beeLine
operator|.
name|split
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|cmd
init|=
name|parts
operator|.
name|length
operator|>
literal|1
condition|?
name|parts
index|[
literal|1
index|]
else|:
literal|""
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|TreeSet
argument_list|<
name|ColorBuffer
argument_list|>
name|clist
init|=
operator|new
name|TreeSet
argument_list|<
name|ColorBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|beeLine
operator|.
name|commandHandlers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|Arrays
operator|.
name|asList
argument_list|(
name|beeLine
operator|.
name|commandHandlers
index|[
name|i
index|]
operator|.
name|getNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|clist
operator|.
name|add
argument_list|(
name|beeLine
operator|.
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
literal|"!"
operator|+
name|beeLine
operator|.
name|commandHandlers
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
literal|20
argument_list|)
operator|.
name|append
argument_list|(
name|beeLine
operator|.
name|wrap
argument_list|(
name|beeLine
operator|.
name|commandHandlers
index|[
name|i
index|]
operator|.
name|getHelpText
argument_list|()
argument_list|,
literal|60
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ColorBuffer
argument_list|>
name|i
init|=
name|clist
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|beeLine
operator|.
name|output
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|beeLine
operator|.
name|output
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"comments"
argument_list|,
name|beeLine
operator|.
name|getApplicationContactInformation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|manual
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|BeeLine
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"manual.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"no-manual"
argument_list|)
argument_list|)
return|;
block|}
name|BufferedReader
name|breader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|man
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|man
operator|=
name|breader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|index
operator|++
expr_stmt|;
name|beeLine
operator|.
name|output
argument_list|(
name|man
argument_list|)
expr_stmt|;
comment|// silly little pager
if|if
condition|(
name|index
operator|%
operator|(
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getMaxHeight
argument_list|()
operator|-
literal|1
operator|)
operator|==
literal|0
condition|)
block|{
name|String
name|ret
init|=
name|beeLine
operator|.
name|getConsoleReader
argument_list|()
operator|.
name|readLine
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"enter-for-more"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|startsWith
argument_list|(
literal|"q"
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
name|breader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

