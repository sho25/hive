begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux  *  All rights reserved.  *  *  *  Redistribution and use in source and binary forms,  *  with or without modification, are permitted provided  *  that the following conditions are met:  *  *  Redistributions of source code must retain the above  *  copyright notice, this list of conditions and the following  *  disclaimer.  *  Redistributions in binary form must reproduce the above  *  copyright notice, this list of conditions and the following  *  disclaimer in the documentation and/or other materials  *  provided with the distribution.  *  Neither the name of the<ORGANIZATION> nor the names  *  of its contributors may be used to endorse or promote  *  products derived from this software without specific  *  prior written permission.  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS  *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED  *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE  *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF  *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  *  This software is hosted by SourceForge.  *  SourceForge is a trademark of VA Linux Systems, Inc.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * The license above originally appeared in src/sqlline/SqlLine.java  * http://sqlline.sourceforge.net/  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|jline
operator|.
name|Completor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|Command
import|;
end_import

begin_comment
comment|/**  * A {@link Command} implementation that uses reflection to  * determine the method to dispatch the command.  *  */
end_comment

begin_class
specifier|public
class|class
name|ReflectiveCommandHandler
extends|extends
name|AbstractCommandHandler
block|{
specifier|private
specifier|final
name|BeeLine
name|beeLine
decl_stmt|;
specifier|public
name|ReflectiveCommandHandler
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|,
name|String
index|[]
name|cmds
parameter_list|,
name|Completor
index|[]
name|completor
parameter_list|)
block|{
name|super
argument_list|(
name|beeLine
argument_list|,
name|cmds
argument_list|,
name|beeLine
operator|.
name|loc
argument_list|(
literal|"help-"
operator|+
name|cmds
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|completor
argument_list|)
expr_stmt|;
name|this
operator|.
name|beeLine
operator|=
name|beeLine
expr_stmt|;
block|}
specifier|public
name|boolean
name|execute
parameter_list|(
name|String
name|line
parameter_list|)
block|{
try|try
block|{
name|Object
name|ob
init|=
name|beeLine
operator|.
name|getCommands
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|beeLine
operator|.
name|getCommands
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
name|line
block|}
argument_list|)
decl_stmt|;
return|return
name|ob
operator|!=
literal|null
operator|&&
name|ob
operator|instanceof
name|Boolean
operator|&&
operator|(
operator|(
name|Boolean
operator|)
name|ob
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

