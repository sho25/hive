begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2002-2006, Marc Prud'hommeaux<mwp1@cornell.edu>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or  * without modification, are permitted provided that the following  * conditions are met:  *  * Redistributions of source code must retain the above copyright  * notice, this list of conditions and the following disclaimer.  *  * Redistributions in binary form must reproduce the above copyright  * notice, this list of conditions and the following disclaimer  * in the documentation and/or other materials provided with  * the distribution.  *  * Neither the name of JLine nor the names of its contributors  * may be used to endorse or promote products derived from this  * software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY  * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO  * EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,  * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|completer
operator|.
name|StringsCompleter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|JarURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * the completer is original provided in JLine 0.9.94 and is being removed in 2.12. Add the  * previous implement for usage of the beeline.  */
end_comment

begin_class
specifier|public
class|class
name|ClassNameCompleter
extends|extends
name|StringsCompleter
block|{
specifier|public
name|ClassNameCompleter
parameter_list|(
name|String
modifier|...
name|candidates
parameter_list|)
block|{
name|super
argument_list|(
name|candidates
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getClassNames
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
name|urls
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassLoader
name|loader
init|=
name|ClassNameCompleter
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
init|;
name|loader
operator|!=
literal|null
condition|;
name|loader
operator|=
name|loader
operator|.
name|getParent
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|loader
operator|instanceof
name|URLClassLoader
operator|)
condition|)
block|{
continue|continue;
block|}
name|urls
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
operator|(
name|URLClassLoader
operator|)
name|loader
operator|)
operator|.
name|getURLs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now add the URL that holds java.lang.String. This is because
comment|// some JVMs do not report the core classes jar in the list of
comment|// class loaders.
name|Class
index|[]
name|systemClasses
init|=
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|javax
operator|.
name|swing
operator|.
name|JFrame
operator|.
name|class
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|systemClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|URL
name|classURL
init|=
name|systemClasses
index|[
name|i
index|]
operator|.
name|getResource
argument_list|(
literal|"/"
operator|+
name|systemClasses
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classURL
operator|!=
literal|null
condition|)
block|{
name|URLConnection
name|uc
init|=
name|classURL
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|uc
operator|instanceof
name|JarURLConnection
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
operator|(
operator|(
name|JarURLConnection
operator|)
name|uc
operator|)
operator|.
name|getJarFileURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
name|classes
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|urls
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|URL
name|url
init|=
operator|(
name|URL
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Set
name|files
init|=
name|getClassFiles
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|()
argument_list|,
name|file
argument_list|,
operator|new
name|int
index|[]
block|{
literal|200
block|}
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|files
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
name|file
operator|==
literal|null
operator|)
operator|||
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|JarFile
name|jf
init|=
operator|new
name|JarFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|jf
operator|.
name|entries
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|JarEntry
name|entry
init|=
operator|(
name|JarEntry
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
comment|/* only use class file*/
continue|continue;
block|}
name|classes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now filter classes by changing "/" to "." and trimming the
comment|// trailing ".class"
name|Set
name|classNames
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|classNames
operator|.
name|add
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|classNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|classNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
name|getClassFiles
parameter_list|(
name|String
name|root
parameter_list|,
name|Set
name|holder
parameter_list|,
name|File
name|directory
parameter_list|,
name|int
index|[]
name|maxDirectories
parameter_list|)
block|{
comment|// we have passed the maximum number of directories to scan
if|if
condition|(
name|maxDirectories
index|[
literal|0
index|]
operator|--
operator|<
literal|0
condition|)
block|{
return|return
name|holder
return|;
block|}
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|files
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|i
operator|<
name|files
operator|.
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|name
operator|.
name|startsWith
argument_list|(
name|root
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|getClassFiles
argument_list|(
name|root
argument_list|,
name|holder
argument_list|,
name|files
index|[
name|i
index|]
argument_list|,
name|maxDirectories
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|holder
operator|.
name|add
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|substring
argument_list|(
name|root
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|holder
return|;
block|}
block|}
end_class

end_unit

