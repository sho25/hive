begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IllegalFormatException
import|;
end_import

begin_class
specifier|public
class|class
name|HiveSchemaHelper
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DB_DERBY
init|=
literal|"derby"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_MSSQL
init|=
literal|"mssql"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_MYSQL
init|=
literal|"mysql"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_POSTGRACE
init|=
literal|"postgres"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_ORACLE
init|=
literal|"oracle"
decl_stmt|;
specifier|public
interface|interface
name|NestedScriptParser
block|{
specifier|public
enum|enum
name|CommandType
block|{
name|PARTIAL_STATEMENT
block|,
name|TERMINATED_STATEMENT
block|,
name|COMMENT
block|}
specifier|static
specifier|final
name|String
name|DEFAUTL_DELIMITER
init|=
literal|";"
decl_stmt|;
comment|/***      * Find the type of given command      * @param dbCommand      * @return      */
specifier|public
name|boolean
name|isPartialCommand
parameter_list|(
name|String
name|dbCommand
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
comment|/** Parse the DB specific nesting format and extract the inner script name if any      * @param dbCommand command from parent script      * @return      * @throws IllegalFormatException      */
specifier|public
name|String
name|getScriptName
parameter_list|(
name|String
name|dbCommand
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
comment|/***      * Find if the given command is a nested script execution      * @param dbCommand      * @return      */
specifier|public
name|boolean
name|isNestedScript
parameter_list|(
name|String
name|dbCommand
parameter_list|)
function_decl|;
comment|/***      * Find if the given command is should be passed to DB      * @param dbCommand      * @return      */
specifier|public
name|boolean
name|isNonExecCommand
parameter_list|(
name|String
name|dbCommand
parameter_list|)
function_decl|;
comment|/***      * Get the SQL statement delimiter      * @return      */
specifier|public
name|String
name|getDelimiter
parameter_list|()
function_decl|;
comment|/***      * Clear any client specific tags      * @return      */
specifier|public
name|String
name|cleanseCommand
parameter_list|(
name|String
name|dbCommand
parameter_list|)
function_decl|;
comment|/***      * Does the DB required table/column names quoted      * @return      */
specifier|public
name|boolean
name|needsQuotedIdentifier
parameter_list|()
function_decl|;
block|}
comment|/***    * Base implemenation of NestedScriptParser    * abstractCommandParser.    *    */
specifier|private
specifier|static
specifier|abstract
class|class
name|AbstractCommandParser
implements|implements
name|NestedScriptParser
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isPartialCommand
parameter_list|(
name|String
name|dbCommand
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|dbCommand
operator|==
literal|null
operator|||
name|dbCommand
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid command line "
operator|+
name|dbCommand
argument_list|)
throw|;
block|}
name|dbCommand
operator|=
name|dbCommand
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|dbCommand
operator|.
name|endsWith
argument_list|(
name|getDelimiter
argument_list|()
argument_list|)
operator|||
name|isNonExecCommand
argument_list|(
name|dbCommand
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNonExecCommand
parameter_list|(
name|String
name|dbCommand
parameter_list|)
block|{
return|return
operator|(
name|dbCommand
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
operator|||
name|dbCommand
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDelimiter
parameter_list|()
block|{
return|return
name|DEFAUTL_DELIMITER
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|cleanseCommand
parameter_list|(
name|String
name|dbCommand
parameter_list|)
block|{
comment|// strip off the delimiter
if|if
condition|(
name|dbCommand
operator|.
name|endsWith
argument_list|(
name|getDelimiter
argument_list|()
argument_list|)
condition|)
block|{
name|dbCommand
operator|=
name|dbCommand
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dbCommand
operator|.
name|length
argument_list|()
operator|-
name|getDelimiter
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dbCommand
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsQuotedIdentifier
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Derby commandline parser
specifier|public
specifier|static
class|class
name|DerbyCommandParser
extends|extends
name|AbstractCommandParser
block|{
specifier|private
specifier|static
name|String
name|DERBY_NESTING_TOKEN
init|=
literal|"RUN"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getScriptName
parameter_list|(
name|String
name|dbCommand
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|isNestedScript
argument_list|(
name|dbCommand
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a script format "
operator|+
name|dbCommand
argument_list|)
throw|;
block|}
name|String
index|[]
name|tokens
init|=
name|dbCommand
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Couldn't parse line "
operator|+
name|dbCommand
argument_list|)
throw|;
block|}
return|return
name|tokens
index|[
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|";"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNestedScript
parameter_list|(
name|String
name|dbCommand
parameter_list|)
block|{
comment|// Derby script format is RUN '<file>'
return|return
name|dbCommand
operator|.
name|startsWith
argument_list|(
name|DERBY_NESTING_TOKEN
argument_list|)
return|;
block|}
block|}
comment|// MySQL parser
specifier|public
specifier|static
class|class
name|MySqlCommandParser
extends|extends
name|AbstractCommandParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MYSQL_NESTING_TOKEN
init|=
literal|"SOURCE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIMITER_TOKEN
init|=
literal|"DELIMITER"
decl_stmt|;
specifier|private
name|String
name|delimiter
init|=
name|DEFAUTL_DELIMITER
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isPartialCommand
parameter_list|(
name|String
name|dbCommand
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|boolean
name|isPartial
init|=
name|super
operator|.
name|isPartialCommand
argument_list|(
name|dbCommand
argument_list|)
decl_stmt|;
comment|// if this is a delimiter directive, reset our delimiter
if|if
condition|(
name|dbCommand
operator|.
name|startsWith
argument_list|(
name|DELIMITER_TOKEN
argument_list|)
condition|)
block|{
name|String
index|[]
name|tokens
init|=
name|dbCommand
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Couldn't parse line "
operator|+
name|dbCommand
argument_list|)
throw|;
block|}
name|delimiter
operator|=
name|tokens
index|[
literal|1
index|]
expr_stmt|;
block|}
return|return
name|isPartial
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getScriptName
parameter_list|(
name|String
name|dbCommand
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
index|[]
name|tokens
init|=
name|dbCommand
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Couldn't parse line "
operator|+
name|dbCommand
argument_list|)
throw|;
block|}
comment|// remove ending ';'
return|return
name|tokens
index|[
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|";"
argument_list|,
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNestedScript
parameter_list|(
name|String
name|dbCommand
parameter_list|)
block|{
return|return
name|dbCommand
operator|.
name|startsWith
argument_list|(
name|MYSQL_NESTING_TOKEN
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDelimiter
parameter_list|()
block|{
return|return
name|delimiter
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNonExecCommand
parameter_list|(
name|String
name|dbCommand
parameter_list|)
block|{
return|return
name|super
operator|.
name|isNonExecCommand
argument_list|(
name|dbCommand
argument_list|)
operator|||
operator|(
name|dbCommand
operator|.
name|startsWith
argument_list|(
literal|"/*"
argument_list|)
operator|&&
name|dbCommand
operator|.
name|endsWith
argument_list|(
literal|"*/"
argument_list|)
operator|)
operator|||
name|dbCommand
operator|.
name|startsWith
argument_list|(
name|DELIMITER_TOKEN
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|cleanseCommand
parameter_list|(
name|String
name|dbCommand
parameter_list|)
block|{
return|return
name|super
operator|.
name|cleanseCommand
argument_list|(
name|dbCommand
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"/\\*.*?\\*/[^;]"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
comment|// Postgres specific parser
specifier|public
specifier|static
class|class
name|PostgresCommandParser
extends|extends
name|AbstractCommandParser
block|{
specifier|private
specifier|static
name|String
name|POSTGRES_NESTING_TOKEN
init|=
literal|"\\i"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getScriptName
parameter_list|(
name|String
name|dbCommand
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
index|[]
name|tokens
init|=
name|dbCommand
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Couldn't parse line "
operator|+
name|dbCommand
argument_list|)
throw|;
block|}
comment|// remove ending ';'
return|return
name|tokens
index|[
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|";"
argument_list|,
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNestedScript
parameter_list|(
name|String
name|dbCommand
parameter_list|)
block|{
return|return
name|dbCommand
operator|.
name|startsWith
argument_list|(
name|POSTGRES_NESTING_TOKEN
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsQuotedIdentifier
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|//Oracle specific parser
specifier|public
specifier|static
class|class
name|OracleCommandParser
extends|extends
name|AbstractCommandParser
block|{
specifier|private
specifier|static
name|String
name|ORACLE_NESTING_TOKEN
init|=
literal|"@"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getScriptName
parameter_list|(
name|String
name|dbCommand
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|isNestedScript
argument_list|(
name|dbCommand
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a nested script format "
operator|+
name|dbCommand
argument_list|)
throw|;
block|}
comment|// remove ending ';' and starting '@'
return|return
name|dbCommand
operator|.
name|replace
argument_list|(
literal|";"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
name|ORACLE_NESTING_TOKEN
argument_list|,
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNestedScript
parameter_list|(
name|String
name|dbCommand
parameter_list|)
block|{
return|return
name|dbCommand
operator|.
name|startsWith
argument_list|(
name|ORACLE_NESTING_TOKEN
argument_list|)
return|;
block|}
block|}
comment|//MSSQL specific parser
specifier|public
specifier|static
class|class
name|MSSQLCommandParser
extends|extends
name|AbstractCommandParser
block|{
specifier|private
specifier|static
name|String
name|MSSQL_NESTING_TOKEN
init|=
literal|":r"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getScriptName
parameter_list|(
name|String
name|dbCommand
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
index|[]
name|tokens
init|=
name|dbCommand
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Couldn't parse line "
operator|+
name|dbCommand
argument_list|)
throw|;
block|}
return|return
name|tokens
index|[
literal|1
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNestedScript
parameter_list|(
name|String
name|dbCommand
parameter_list|)
block|{
return|return
name|dbCommand
operator|.
name|startsWith
argument_list|(
name|MSSQL_NESTING_TOKEN
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|NestedScriptParser
name|getDbCommandParser
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
if|if
condition|(
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|DB_DERBY
argument_list|)
condition|)
block|{
return|return
operator|new
name|DerbyCommandParser
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|DB_MSSQL
argument_list|)
condition|)
block|{
return|return
operator|new
name|MSSQLCommandParser
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|DB_MYSQL
argument_list|)
condition|)
block|{
return|return
operator|new
name|MySqlCommandParser
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|DB_POSTGRACE
argument_list|)
condition|)
block|{
return|return
operator|new
name|PostgresCommandParser
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|DB_ORACLE
argument_list|)
condition|)
block|{
return|return
operator|new
name|OracleCommandParser
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown dbType "
operator|+
name|dbName
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

