begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|SequenceInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|JarURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLWarning
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ChoiceFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|completer
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|completer
operator|.
name|StringsCompleter
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|completer
operator|.
name|FileNameCompleter
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|ConsoleReader
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|history
operator|.
name|History
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|history
operator|.
name|FileHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|cli
operator|.
name|CliOptionsProcessor
import|;
end_import

begin_comment
comment|/**  * A console SQL shell with command completion.  *<p>  * TODO:  *<ul>  *<li>User-friendly connection prompts</li>  *<li>Page results</li>  *<li>Handle binary data (blob fields)</li>  *<li>Implement command aliases</li>  *<li>Stored procedure execution</li>  *<li>Binding parameters to prepared statements</li>  *<li>Scripting language</li>  *<li>XA transactions</li>  *</ul>  *  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|public
class|class
name|BeeLine
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|resourceBundle
init|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|BeeLine
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BeeLineSignalHandler
name|signalHandler
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|exit
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|DatabaseConnections
name|connections
init|=
operator|new
name|DatabaseConnections
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMMAND_PREFIX
init|=
literal|"!"
decl_stmt|;
specifier|private
specifier|final
name|Completer
name|beeLineCommandCompleter
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Driver
argument_list|>
name|drivers
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|BeeLineOpts
name|opts
init|=
operator|new
name|BeeLineOpts
argument_list|(
name|this
argument_list|,
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|lastProgress
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SQLWarning
argument_list|,
name|Date
argument_list|>
name|seenWarnings
init|=
operator|new
name|HashMap
argument_list|<
name|SQLWarning
argument_list|,
name|Date
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Commands
name|commands
init|=
operator|new
name|Commands
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
name|OutputFile
name|scriptOutputFile
init|=
literal|null
decl_stmt|;
specifier|private
name|OutputFile
name|recordOutputFile
init|=
literal|null
decl_stmt|;
specifier|private
name|PrintStream
name|outputStream
init|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|PrintStream
name|errorStream
init|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|ConsoleReader
name|consoleReader
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|batch
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Reflector
name|reflector
decl_stmt|;
specifier|private
name|String
name|dbName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|currentDatabase
init|=
literal|null
decl_stmt|;
specifier|private
name|History
name|history
decl_stmt|;
specifier|private
name|boolean
name|isBeeLine
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BEELINE_DEFAULT_JDBC_DRIVER
init|=
literal|"org.apache.hive.jdbc.HiveDriver"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BEELINE_DEFAULT_JDBC_URL
init|=
literal|"jdbc:hive2://"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DATABASE_NAME
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCRIPT_OUTPUT_PREFIX
init|=
literal|">>>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SCRIPT_OUTPUT_PAD_SIZE
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ERRNO_OK
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ERRNO_ARGS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ERRNO_OTHER
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_VAR_PREFIX
init|=
literal|"--hivevar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_CONF_PREFIX
init|=
literal|"--hiveconf"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PASSWD_MASK
init|=
literal|"[passwd stripped]"
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|formats
init|=
name|map
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"vertical"
block|,
operator|new
name|VerticalOutputFormat
argument_list|(
name|this
argument_list|)
block|,
literal|"table"
block|,
operator|new
name|TableOutputFormat
argument_list|(
name|this
argument_list|)
block|,
literal|"csv2"
block|,
operator|new
name|SeparatedValuesOutputFormat
argument_list|(
name|this
argument_list|,
literal|','
argument_list|)
block|,
literal|"tsv2"
block|,
operator|new
name|SeparatedValuesOutputFormat
argument_list|(
name|this
argument_list|,
literal|'\t'
argument_list|)
block|,
literal|"dsv"
block|,
operator|new
name|SeparatedValuesOutputFormat
argument_list|(
name|this
argument_list|,
name|BeeLineOpts
operator|.
name|DEFAULT_DELIMITER_FOR_DSV
argument_list|)
block|,
literal|"csv"
block|,
operator|new
name|DeprecatedSeparatedValuesOutputFormat
argument_list|(
name|this
argument_list|,
literal|','
argument_list|)
block|,
literal|"tsv"
block|,
operator|new
name|DeprecatedSeparatedValuesOutputFormat
argument_list|(
name|this
argument_list|,
literal|'\t'
argument_list|)
block|,
literal|"xmlattr"
block|,
operator|new
name|XMLAttributeOutputFormat
argument_list|(
name|this
argument_list|)
block|,
literal|"xmlelements"
block|,
operator|new
name|XMLElementOutputFormat
argument_list|(
name|this
argument_list|)
block|,   }
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|supportedLocalDriver
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"com.mysql.jdbc.Driver"
argument_list|,
literal|"org.postgresql.Driver"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|CommandHandler
index|[]
name|commandHandlers
init|=
operator|new
name|CommandHandler
index|[]
block|{
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"quit"
block|,
literal|"done"
block|,
literal|"exit"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"connect"
block|,
literal|"open"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|StringsCompleter
argument_list|(
name|getConnectionURLExamples
argument_list|()
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"describe"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|TableNameCompletor
argument_list|(
name|this
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"indexes"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|TableNameCompletor
argument_list|(
name|this
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"primarykeys"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|TableNameCompletor
argument_list|(
name|this
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"exportedkeys"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|TableNameCompletor
argument_list|(
name|this
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"manual"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"importedkeys"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|TableNameCompletor
argument_list|(
name|this
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"procedures"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tables"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"typeinfo"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"columns"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|TableNameCompletor
argument_list|(
name|this
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"reconnect"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"dropall"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|TableNameCompletor
argument_list|(
name|this
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"history"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"metadata"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|StringsCompleter
argument_list|(
name|getMetadataMethodNames
argument_list|()
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nativesql"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"dbinfo"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rehash"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"verbose"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"run"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|FileNameCompleter
argument_list|()
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"batch"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"list"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"all"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"go"
block|,
literal|"#"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"script"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|FileNameCompleter
argument_list|()
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"record"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|FileNameCompleter
argument_list|()
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"brief"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"close"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"closeall"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"isolation"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|StringsCompleter
argument_list|(
name|getIsolationLevels
argument_list|()
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"outputformat"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|StringsCompleter
argument_list|(
name|formats
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"autocommit"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"commit"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"properties"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|FileNameCompleter
argument_list|()
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rollback"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"help"
block|,
literal|"?"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"set"
block|}
argument_list|,
name|getOpts
argument_list|()
operator|.
name|optionCompleters
argument_list|()
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"save"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"scan"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sql"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sh"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"call"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nullemptystring"
block|}
argument_list|,
operator|new
name|Completer
index|[]
block|{
operator|new
name|BooleanCompleter
argument_list|()
block|}
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"addlocaldriverjar"
block|}
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|ReflectiveCommandHandler
argument_list|(
name|this
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"addlocaldrivername"
block|}
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
specifier|static
specifier|final
name|SortedSet
argument_list|<
name|String
argument_list|>
name|KNOWN_DRIVERS
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"org.apache.hive.jdbc.HiveDriver"
block|,
literal|"org.apache.hadoop.hive.jdbc.HiveDriver"
block|,       }
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"jline.console.ConsoleReader"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|ExceptionInInitializerError
argument_list|(
literal|"jline-missing"
argument_list|)
throw|;
block|}
block|}
static|static
block|{
comment|// -d<driver class>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"driver class"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"the driver class to use"
argument_list|)
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -u<database url>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"database url"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"the JDBC URL to connect to"
argument_list|)
operator|.
name|create
argument_list|(
literal|'u'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -n<username>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"username"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"the username to connect as"
argument_list|)
operator|.
name|create
argument_list|(
literal|'n'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -p<password>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"password"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"the password to connect as"
argument_list|)
operator|.
name|create
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -w (or) --password-file<file>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"password-file"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"the password file to read password from"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"password-file"
argument_list|)
operator|.
name|create
argument_list|(
literal|'w'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -a<authType>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"authType"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"the authentication type"
argument_list|)
operator|.
name|create
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -i<init file>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"init"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"script file for initialization"
argument_list|)
operator|.
name|create
argument_list|(
literal|'i'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -e<query>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArgs
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"query"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"query that should be executed"
argument_list|)
operator|.
name|create
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -f<script file>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"file"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"script file that should be executed"
argument_list|)
operator|.
name|create
argument_list|(
literal|'f'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -help
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"display this message"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Substitution option --hivevar
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"key=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hivevar"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"hive variable name and value"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|//hive conf option --hiveconf
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Manifest
name|getManifest
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|base
init|=
name|BeeLine
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/META-INF/MANIFEST.MF"
argument_list|)
decl_stmt|;
name|URLConnection
name|c
init|=
name|base
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|JarURLConnection
condition|)
block|{
return|return
operator|(
operator|(
name|JarURLConnection
operator|)
name|c
operator|)
operator|.
name|getManifest
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
name|String
name|getManifestAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|Manifest
name|m
init|=
name|getManifest
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|"??"
return|;
block|}
name|Attributes
name|attrs
init|=
name|m
operator|.
name|getAttributes
argument_list|(
literal|"beeline"
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
return|return
literal|"???"
return|;
block|}
name|String
name|val
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
literal|"????"
return|;
block|}
return|return
name|val
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|errorStream
argument_list|)
expr_stmt|;
return|return
literal|"?????"
return|;
block|}
block|}
name|String
name|getApplicationTitle
parameter_list|()
block|{
name|Package
name|pack
init|=
name|BeeLine
operator|.
name|class
operator|.
name|getPackage
argument_list|()
decl_stmt|;
return|return
name|loc
argument_list|(
literal|"app-introduction"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"Beeline"
block|,
name|pack
operator|.
name|getImplementationVersion
argument_list|()
operator|==
literal|null
condition|?
literal|"???"
else|:
name|pack
operator|.
name|getImplementationVersion
argument_list|()
block|,
literal|"Apache Hive"
block|,
comment|// getManifestAttribute ("Specification-Title"),
comment|// getManifestAttribute ("Implementation-Version"),
comment|// getManifestAttribute ("Implementation-ReleaseDate"),
comment|// getManifestAttribute ("Implementation-Vendor"),
comment|// getManifestAttribute ("Implementation-License"),
block|}
argument_list|)
return|;
block|}
name|String
name|getApplicationContactInformation
parameter_list|()
block|{
return|return
name|getManifestAttribute
argument_list|(
literal|"Implementation-Vendor"
argument_list|)
return|;
block|}
name|String
name|loc
parameter_list|(
name|String
name|res
parameter_list|)
block|{
return|return
name|loc
argument_list|(
name|res
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
return|;
block|}
name|String
name|loc
parameter_list|(
name|String
name|res
parameter_list|,
name|int
name|param
parameter_list|)
block|{
try|try
block|{
return|return
name|MessageFormat
operator|.
name|format
argument_list|(
operator|new
name|ChoiceFormat
argument_list|(
name|resourceBundle
operator|.
name|getString
argument_list|(
name|res
argument_list|)
argument_list|)
operator|.
name|format
argument_list|(
name|param
argument_list|)
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
name|param
argument_list|)
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|res
operator|+
literal|": "
operator|+
name|param
return|;
block|}
block|}
name|String
name|loc
parameter_list|(
name|String
name|res
parameter_list|,
name|Object
name|param1
parameter_list|)
block|{
return|return
name|loc
argument_list|(
name|res
argument_list|,
operator|new
name|Object
index|[]
block|{
name|param1
block|}
argument_list|)
return|;
block|}
name|String
name|loc
parameter_list|(
name|String
name|res
parameter_list|,
name|Object
name|param1
parameter_list|,
name|Object
name|param2
parameter_list|)
block|{
return|return
name|loc
argument_list|(
name|res
argument_list|,
operator|new
name|Object
index|[]
block|{
name|param1
block|,
name|param2
block|}
argument_list|)
return|;
block|}
name|String
name|loc
parameter_list|(
name|String
name|res
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
try|try
block|{
return|return
name|MessageFormat
operator|.
name|format
argument_list|(
name|resourceBundle
operator|.
name|getString
argument_list|(
name|res
argument_list|)
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|getErrorStream
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|res
operator|+
literal|": "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
return|return
name|res
return|;
block|}
block|}
block|}
specifier|protected
name|String
name|locElapsedTime
parameter_list|(
name|long
name|milliseconds
parameter_list|)
block|{
if|if
condition|(
name|getOpts
argument_list|()
operator|.
name|getShowElapsedTime
argument_list|()
condition|)
block|{
return|return
name|loc
argument_list|(
literal|"time-ms"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Double
argument_list|(
name|milliseconds
operator|/
literal|1000d
argument_list|)
block|}
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
comment|/**    * Starts the program.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|mainWithInputRedirection
argument_list|(
name|args
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts the program with redirected input. For redirected output,    * setOutputStream() and setErrorStream can be used.    * Exits with 0 on success, 1 on invalid arguments, and 2 on any other error    *    * @param args    *          same as main()    *    * @param inputStream    *          redirected input, or null to use standard input    */
specifier|public
specifier|static
name|void
name|mainWithInputRedirection
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|BeeLine
name|beeLine
init|=
operator|new
name|BeeLine
argument_list|()
decl_stmt|;
name|int
name|status
init|=
name|beeLine
operator|.
name|begin
argument_list|(
name|args
argument_list|,
name|inputStream
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|BeeLineOpts
operator|.
name|PROPERTY_NAME_EXIT
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|BeeLine
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BeeLine
parameter_list|(
name|boolean
name|isBeeLine
parameter_list|)
block|{
name|beeLineCommandCompleter
operator|=
operator|new
name|BeeLineCommandCompleter
argument_list|(
name|BeeLineCommandCompleter
operator|.
name|getCompleters
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|reflector
operator|=
operator|new
name|Reflector
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|isBeeLine
operator|=
name|isBeeLine
expr_stmt|;
comment|// attempt to dynamically load signal handler
comment|/* TODO disable signal handler     try {       Class<?> handlerClass =           Class.forName("org.apache.hive.beeline.SunSignalHandler");       signalHandler = (BeeLineSignalHandler)           handlerClass.newInstance();     } catch (Throwable t) {       // ignore and leave cancel functionality disabled     }     */
block|}
name|DatabaseConnection
name|getDatabaseConnection
parameter_list|()
block|{
return|return
name|getDatabaseConnections
argument_list|()
operator|.
name|current
argument_list|()
return|;
block|}
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|getDatabaseConnections
argument_list|()
operator|.
name|current
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|loc
argument_list|(
literal|"no-current-connection"
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|getDatabaseConnections
argument_list|()
operator|.
name|current
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|loc
argument_list|(
literal|"no-current-connection"
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|getDatabaseConnections
argument_list|()
operator|.
name|current
argument_list|()
operator|.
name|getConnection
argument_list|()
return|;
block|}
name|DatabaseMetaData
name|getDatabaseMetaData
parameter_list|()
block|{
if|if
condition|(
name|getDatabaseConnections
argument_list|()
operator|.
name|current
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|loc
argument_list|(
literal|"no-current-connection"
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|getDatabaseConnections
argument_list|()
operator|.
name|current
argument_list|()
operator|.
name|getDatabaseMetaData
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|loc
argument_list|(
literal|"no-current-connection"
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|getDatabaseConnections
argument_list|()
operator|.
name|current
argument_list|()
operator|.
name|getDatabaseMetaData
argument_list|()
return|;
block|}
specifier|public
name|String
index|[]
name|getIsolationLevels
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"TRANSACTION_NONE"
block|,
literal|"TRANSACTION_READ_COMMITTED"
block|,
literal|"TRANSACTION_READ_UNCOMMITTED"
block|,
literal|"TRANSACTION_REPEATABLE_READ"
block|,
literal|"TRANSACTION_SERIALIZABLE"
block|,     }
return|;
block|}
specifier|public
name|String
index|[]
name|getMetadataMethodNames
parameter_list|()
block|{
try|try
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|mnames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Method
index|[]
name|m
init|=
name|DatabaseMetaData
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|m
operator|!=
literal|null
operator|&&
name|i
operator|<
name|m
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mnames
operator|.
name|add
argument_list|(
name|m
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mnames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|public
name|String
index|[]
name|getConnectionURLExamples
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"jdbc:JSQLConnect://<hostname>/database=<database>"
block|,
literal|"jdbc:cloudscape:<database>;create=true"
block|,
literal|"jdbc:twtds:sqlserver://<hostname>/<database>"
block|,
literal|"jdbc:daffodilDB_embedded:<database>;create=true"
block|,
literal|"jdbc:datadirect:db2://<hostname>:50000;databaseName=<database>"
block|,
literal|"jdbc:inetdae:<hostname>:1433"
block|,
literal|"jdbc:datadirect:oracle://<hostname>:1521;SID=<database>;MaxPooledStatements=0"
block|,
literal|"jdbc:datadirect:sqlserver://<hostname>:1433;SelectMethod=cursor;DatabaseName=<database>"
block|,
literal|"jdbc:datadirect:sybase://<hostname>:5000"
block|,
literal|"jdbc:db2://<hostname>/<database>"
block|,
literal|"jdbc:hive2://<hostname>"
block|,
literal|"jdbc:hsqldb:<database>"
block|,
literal|"jdbc:idb:<database>.properties"
block|,
literal|"jdbc:informix-sqli://<hostname>:1526/<database>:INFORMIXSERVER=<database>"
block|,
literal|"jdbc:interbase://<hostname>//<database>.gdb"
block|,
literal|"jdbc:microsoft:sqlserver://<hostname>:1433;DatabaseName=<database>;SelectMethod=cursor"
block|,
literal|"jdbc:mysql://<hostname>/<database>?autoReconnect=true"
block|,
literal|"jdbc:oracle:thin:@<hostname>:1521:<database>"
block|,
literal|"jdbc:pointbase:<database>,database.home=<database>,create=true"
block|,
literal|"jdbc:postgresql://<hostname>:5432/<database>"
block|,
literal|"jdbc:postgresql:net//<hostname>/<database>"
block|,
literal|"jdbc:sybase:Tds:<hostname>:4100/<database>?ServiceName=<database>"
block|,
literal|"jdbc:weblogic:mssqlserver4:<database>@<hostname>:1433"
block|,
literal|"jdbc:odbc:<database>"
block|,
literal|"jdbc:sequelink://<hostname>:4003/[Oracle]"
block|,
literal|"jdbc:sequelink://<hostname>:4004/[Informix];Database=<database>"
block|,
literal|"jdbc:sequelink://<hostname>:4005/[Sybase];Database=<database>"
block|,
literal|"jdbc:sequelink://<hostname>:4006/[SQLServer];Database=<database>"
block|,
literal|"jdbc:sequelink://<hostname>:4011/[ODBC MS Access];Database=<database>"
block|,
literal|"jdbc:openlink://<hostname>/DSN=SQLServerDB/UID=sa/PWD="
block|,
literal|"jdbc:solid://<hostname>:<port>/<UID>/<PWD>"
block|,
literal|"jdbc:dbaw://<hostname>:8889/<database>"
block|,     }
return|;
block|}
comment|/**    * Entry point to creating a {@link ColorBuffer} with color    * enabled or disabled depending on the value of {@link BeeLineOpts#getColor}.    */
name|ColorBuffer
name|getColorBuffer
parameter_list|()
block|{
return|return
operator|new
name|ColorBuffer
argument_list|(
name|getOpts
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Entry point to creating a {@link ColorBuffer} with color    * enabled or disabled depending on the value of {@link BeeLineOpts#getColor}.    */
name|ColorBuffer
name|getColorBuffer
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
return|return
operator|new
name|ColorBuffer
argument_list|(
name|msg
argument_list|,
name|getOpts
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
return|;
block|}
specifier|public
class|class
name|BeelineParser
extends|extends
name|GnuParser
block|{
annotation|@
name|Override
specifier|protected
name|void
name|processOption
parameter_list|(
specifier|final
name|String
name|arg
parameter_list|,
specifier|final
name|ListIterator
name|iter
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
operator|)
operator|&&
operator|!
operator|(
name|arg
operator|.
name|equals
argument_list|(
name|HIVE_VAR_PREFIX
argument_list|)
operator|||
operator|(
name|arg
operator|.
name|equals
argument_list|(
name|HIVE_CONF_PREFIX
argument_list|)
operator|)
operator|||
operator|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
operator|)
operator|)
condition|)
block|{
name|String
name|stripped
init|=
name|arg
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|arg
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|split
argument_list|(
name|stripped
argument_list|,
literal|"="
argument_list|)
decl_stmt|;
name|debug
argument_list|(
name|loc
argument_list|(
literal|"setting-prop"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|getOpts
argument_list|()
operator|.
name|set
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getOpts
argument_list|()
operator|.
name|set
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
literal|"true"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|processOption
argument_list|(
name|arg
argument_list|,
name|iter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|initArgsFromCliVars
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|CliOptionsProcessor
name|optionsProcessor
init|=
operator|new
name|CliOptionsProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|optionsProcessor
operator|.
name|process
argument_list|(
name|args
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
name|CommandLine
name|commandLine
init|=
name|optionsProcessor
operator|.
name|getCommandLine
argument_list|()
decl_stmt|;
name|Properties
name|confProps
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|confProps
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|setHiveConfVar
argument_list|(
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Properties
name|hiveVars
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"define"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|hiveVars
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|getOpts
argument_list|()
operator|.
name|getHiveConfVariables
argument_list|()
operator|.
name|put
argument_list|(
name|propKey
argument_list|,
name|hiveVars
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Properties
name|hiveVars2
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hivevar"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|hiveVars2
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|getOpts
argument_list|()
operator|.
name|getHiveConfVariables
argument_list|()
operator|.
name|put
argument_list|(
name|propKey
argument_list|,
name|hiveVars2
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getOpts
argument_list|()
operator|.
name|setScriptFile
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|"i"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getOpts
argument_list|()
operator|.
name|setInitFiles
argument_list|(
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dbName
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"database"
argument_list|)
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setVerbose
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"verbose"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setSilent
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"slient"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|code
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|"e"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|commands
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|commands
operator|.
name|isEmpty
argument_list|()
operator|&&
name|getOpts
argument_list|()
operator|.
name|getScriptFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The '-e' and '-f' options cannot be specified simultaneously"
argument_list|)
expr_stmt|;
name|optionsProcessor
operator|.
name|printCliUsage
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|commands
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|embeddedConnect
argument_list|()
expr_stmt|;
name|connectDBInEmbededMode
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|commands
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|debug
argument_list|(
name|loc
argument_list|(
literal|"executing-command"
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dispatch
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|code
operator|++
expr_stmt|;
block|}
block|}
name|exit
operator|=
literal|true
expr_stmt|;
comment|// execute and exit
block|}
return|return
name|code
return|;
block|}
name|int
name|initArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|CommandLine
name|cl
decl_stmt|;
name|BeelineParser
name|beelineParser
decl_stmt|;
try|try
block|{
name|beelineParser
operator|=
operator|new
name|BeelineParser
argument_list|()
expr_stmt|;
name|cl
operator|=
name|beelineParser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e1
parameter_list|)
block|{
name|output
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|usage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|String
name|driver
init|=
literal|null
decl_stmt|,
name|user
init|=
literal|null
decl_stmt|,
name|pass
init|=
literal|null
decl_stmt|,
name|url
init|=
literal|null
decl_stmt|;
name|String
name|auth
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setHelpAsked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|Properties
name|hiveVars
init|=
name|cl
operator|.
name|getOptionProperties
argument_list|(
literal|"hivevar"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|hiveVars
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|getOpts
argument_list|()
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hiveVars
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Properties
name|hiveConfs
init|=
name|cl
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|hiveConfs
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|setHiveConfVar
argument_list|(
name|key
argument_list|,
name|hiveConfs
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|driver
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|auth
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|user
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setAuthType
argument_list|(
name|auth
argument_list|)
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
literal|"w"
argument_list|)
condition|)
block|{
name|pass
operator|=
name|obtainPasswordFromFile
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"w"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pass
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setInitFiles
argument_list|(
name|cl
operator|.
name|getOptionValues
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setScriptFile
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|getOptionValues
argument_list|(
literal|'e'
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|commands
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|cl
operator|.
name|getOptionValues
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: temporary disable this for easier debugging
comment|/*     if (url == null) {       url = BEELINE_DEFAULT_JDBC_URL;     }     if (driver == null) {       driver = BEELINE_DEFAULT_JDBC_DRIVER;     }     */
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|String
name|com
init|=
name|constructCmd
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
name|pass
argument_list|,
name|driver
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|comForDebug
init|=
name|constructCmd
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
name|pass
argument_list|,
name|driver
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|debug
argument_list|(
literal|"issuing: "
operator|+
name|comForDebug
argument_list|)
expr_stmt|;
name|dispatch
argument_list|(
name|com
argument_list|)
expr_stmt|;
block|}
comment|// now load properties files
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|files
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|dispatch
argument_list|(
literal|"!properties "
operator|+
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|code
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|commands
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|commands
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|debug
argument_list|(
name|loc
argument_list|(
literal|"executing-command"
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dispatch
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|code
operator|++
expr_stmt|;
block|}
block|}
name|exit
operator|=
literal|true
expr_stmt|;
comment|// execute and exit
block|}
return|return
name|code
return|;
block|}
specifier|private
name|void
name|setHiveConfVar
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|getOpts
argument_list|()
operator|.
name|getHiveConfVariables
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
operator|.
name|varname
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
literal|"mr"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|info
argument_list|(
name|HiveConf
operator|.
name|generateMrDeprecationWarning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|constructCmd
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|pass
parameter_list|,
name|String
name|driver
parameter_list|,
name|boolean
name|stripPasswd
parameter_list|)
block|{
name|String
name|com
init|=
literal|"!connect "
operator|+
name|url
operator|+
literal|" "
operator|+
operator|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"''"
else|:
name|user
operator|)
operator|+
literal|" "
decl_stmt|;
if|if
condition|(
name|stripPasswd
condition|)
block|{
name|com
operator|+=
name|PASSWD_MASK
operator|+
literal|" "
expr_stmt|;
block|}
else|else
block|{
name|com
operator|+=
operator|(
name|pass
operator|==
literal|null
operator|||
name|pass
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"''"
else|:
name|pass
operator|)
operator|+
literal|" "
expr_stmt|;
block|}
name|com
operator|+=
operator|(
name|driver
operator|==
literal|null
condition|?
literal|""
else|:
name|driver
operator|)
expr_stmt|;
return|return
name|com
return|;
block|}
comment|/**    * Obtains a password from the passed file path.    */
specifier|private
name|String
name|obtainPasswordFromFile
parameter_list|(
name|String
name|passwordFilePath
parameter_list|)
block|{
try|try
block|{
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|passwordFilePath
argument_list|)
decl_stmt|;
name|byte
index|[]
name|passwordFileContents
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|passwordFileContents
argument_list|,
literal|"UTF-8"
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to read user password from the password file: "
operator|+
name|passwordFilePath
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|updateOptsForCli
parameter_list|()
block|{
name|getOpts
argument_list|()
operator|.
name|updateBeeLineOptsFromConf
argument_list|()
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setShowHeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
literal|"dsv"
argument_list|)
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setDelimiterForDSV
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|getOpts
argument_list|()
operator|.
name|setNullEmptyString
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start accepting input from stdin, and dispatch it    * to the appropriate {@link CommandHandler} until the    * global variable<code>exit</code> is true.    */
specifier|public
name|int
name|begin
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// load the options first, so we can override on the command line
name|getOpts
argument_list|()
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// nothing
block|}
try|try
block|{
if|if
condition|(
name|isBeeLine
condition|)
block|{
name|int
name|code
init|=
name|initArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|!=
literal|0
condition|)
block|{
return|return
name|code
return|;
block|}
block|}
else|else
block|{
name|int
name|code
init|=
name|initArgsFromCliVars
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|!=
literal|0
operator|||
name|exit
condition|)
block|{
return|return
name|code
return|;
block|}
name|defaultConnect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getOpts
argument_list|()
operator|.
name|isHelpAsked
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|getOpts
argument_list|()
operator|.
name|getScriptFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|executeFile
argument_list|(
name|getOpts
argument_list|()
operator|.
name|getScriptFile
argument_list|()
argument_list|)
return|;
block|}
try|try
block|{
name|info
argument_list|(
name|getApplicationTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|ConsoleReader
name|reader
init|=
name|getConsoleReader
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
return|return
name|execute
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|)
return|;
block|}
finally|finally
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|runInit
parameter_list|()
block|{
name|String
name|initFiles
index|[]
init|=
name|getOpts
argument_list|()
operator|.
name|getInitFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|initFiles
operator|!=
literal|null
operator|&&
name|initFiles
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|String
name|initFile
range|:
name|initFiles
control|)
block|{
name|info
argument_list|(
literal|"Running init script "
operator|+
name|initFile
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|executeFile
argument_list|(
name|initFile
argument_list|)
return|;
block|}
finally|finally
block|{
name|exit
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|ERRNO_OK
return|;
block|}
specifier|private
name|int
name|embeddedConnect
parameter_list|()
block|{
if|if
condition|(
operator|!
name|execCommandWithPrefix
argument_list|(
literal|"!connect "
operator|+
name|BEELINE_DEFAULT_JDBC_URL
operator|+
literal|" '' ''"
argument_list|)
condition|)
block|{
return|return
name|ERRNO_OTHER
return|;
block|}
else|else
block|{
return|return
name|ERRNO_OK
return|;
block|}
block|}
specifier|private
name|int
name|connectDBInEmbededMode
parameter_list|()
block|{
if|if
condition|(
name|dbName
operator|!=
literal|null
operator|&&
operator|!
name|dbName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dispatch
argument_list|(
literal|"use "
operator|+
name|dbName
operator|+
literal|";"
argument_list|)
condition|)
block|{
return|return
name|ERRNO_OTHER
return|;
block|}
block|}
return|return
name|ERRNO_OK
return|;
block|}
specifier|public
name|int
name|defaultConnect
parameter_list|(
name|boolean
name|exitOnError
parameter_list|)
block|{
if|if
condition|(
name|embeddedConnect
argument_list|()
operator|!=
name|ERRNO_OK
operator|&&
name|exitOnError
condition|)
block|{
return|return
name|ERRNO_OTHER
return|;
block|}
if|if
condition|(
name|connectDBInEmbededMode
argument_list|()
operator|!=
name|ERRNO_OK
operator|&&
name|exitOnError
condition|)
block|{
return|return
name|ERRNO_OTHER
return|;
block|}
return|return
name|ERRNO_OK
return|;
block|}
specifier|private
name|int
name|executeFile
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|InputStream
name|initStream
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isBeeLine
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|path
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|HiveConf
name|conf
init|=
name|getCommands
argument_list|()
operator|.
name|getHiveConf
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|path
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|initStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
return|return
name|execute
argument_list|(
name|getConsoleReader
argument_list|(
name|initStream
argument_list|)
argument_list|,
operator|!
name|getOpts
argument_list|()
operator|.
name|getForce
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleException
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|ERRNO_OTHER
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|initStream
argument_list|)
expr_stmt|;
name|consoleReader
operator|=
literal|null
expr_stmt|;
name|output
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// dummy new line
block|}
block|}
specifier|private
name|int
name|execute
parameter_list|(
name|ConsoleReader
name|reader
parameter_list|,
name|boolean
name|exitOnError
parameter_list|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|!
name|exit
condition|)
block|{
try|try
block|{
comment|// Execute one instruction; terminate on executing a script if there is an error
comment|// in silent mode, prevent the query and prompt being echoed back to terminal
name|line
operator|=
operator|(
name|getOpts
argument_list|()
operator|.
name|isSilent
argument_list|()
operator|&&
name|getOpts
argument_list|()
operator|.
name|getScriptFile
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|reader
operator|.
name|readLine
argument_list|(
literal|null
argument_list|,
name|ConsoleReader
operator|.
name|NULL_MASK
argument_list|)
else|:
name|reader
operator|.
name|readLine
argument_list|(
name|getPrompt
argument_list|()
argument_list|)
expr_stmt|;
comment|// trim line
name|line
operator|=
operator|(
name|line
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dispatch
argument_list|(
name|line
argument_list|)
operator|&&
name|exitOnError
condition|)
block|{
return|return
name|ERRNO_OTHER
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleException
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|ERRNO_OTHER
return|;
block|}
block|}
return|return
name|ERRNO_OK
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|commands
operator|.
name|closeall
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConsoleReader
name|getConsoleReader
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
comment|// ### NOTE: fix for sf.net bug 879425.
comment|// Working around an issue in jline-2.1.2, see https://github.com/jline/jline/issues/10
comment|// by appending a newline to the end of inputstream
name|InputStream
name|inputStreamAppendedNewline
init|=
operator|new
name|SequenceInputStream
argument_list|(
name|inputStream
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
operator|new
name|String
argument_list|(
literal|"\n"
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|consoleReader
operator|=
operator|new
name|ConsoleReader
argument_list|(
name|inputStreamAppendedNewline
argument_list|,
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|consoleReader
operator|.
name|setCopyPasteDetection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// jline will detect if<tab> is regular character
block|}
else|else
block|{
name|consoleReader
operator|=
operator|new
name|ConsoleReader
argument_list|()
expr_stmt|;
block|}
comment|//disable the expandEvents for the purpose of backward compatibility
name|consoleReader
operator|.
name|setExpandEvents
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// setup history
name|ByteArrayOutputStream
name|hist
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|getOpts
argument_list|()
operator|.
name|getHistoryFile
argument_list|()
argument_list|)
operator|.
name|isFile
argument_list|()
condition|)
block|{
try|try
block|{
comment|// save the current contents of the history buffer. This gets
comment|// around a bug in JLine where setting the output before the
comment|// input will clobber the history input, but setting the
comment|// input before the output will cause the previous commands
comment|// to not be saved to the buffer.
try|try
init|(
name|FileInputStream
name|historyIn
init|=
operator|new
name|FileInputStream
argument_list|(
name|getOpts
argument_list|()
operator|.
name|getHistoryFile
argument_list|()
argument_list|)
init|)
block|{
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|historyIn
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|hist
operator|.
name|write
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// now set the output for the history
name|consoleReader
operator|.
name|setHistory
argument_list|(
operator|new
name|FileHistory
argument_list|(
operator|new
name|File
argument_list|(
name|getOpts
argument_list|()
operator|.
name|getHistoryFile
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputStream
operator|instanceof
name|FileInputStream
operator|||
name|inputStream
operator|instanceof
name|FSDataInputStream
condition|)
block|{
comment|// from script.. no need to load history and no need of completer, either
return|return
name|consoleReader
return|;
block|}
try|try
block|{
comment|// now load in the previous history
if|if
condition|(
name|hist
operator|!=
literal|null
condition|)
block|{
name|History
name|h
init|=
name|consoleReader
operator|.
name|getHistory
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|instanceof
name|FileHistory
condition|)
block|{
operator|(
operator|(
name|FileHistory
operator|)
name|consoleReader
operator|.
name|getHistory
argument_list|()
operator|)
operator|.
name|load
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|hist
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consoleReader
operator|.
name|getHistory
argument_list|()
operator|.
name|add
argument_list|(
name|hist
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// add shutdown hook to flush the history to history file
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|History
name|h
init|=
name|consoleReader
operator|.
name|getHistory
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|instanceof
name|FileHistory
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|FileHistory
operator|)
name|h
operator|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|consoleReader
operator|.
name|addCompleter
argument_list|(
operator|new
name|BeeLineCompleter
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|consoleReader
return|;
block|}
name|void
name|usage
parameter_list|()
block|{
name|output
argument_list|(
name|loc
argument_list|(
literal|"cmd-usage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method is used for executing commands beginning with !    * @param line    * @return    */
specifier|public
name|boolean
name|execCommandWithPrefix
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CommandHandler
argument_list|>
name|cmdMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CommandHandler
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commandHandlers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|match
init|=
name|commandHandlers
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|cmdMap
operator|.
name|put
argument_list|(
name|match
argument_list|,
name|commandHandlers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cmdMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|error
argument_list|(
name|loc
argument_list|(
literal|"unknown-command"
argument_list|,
name|line
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|cmdMap
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// any exact match?
name|CommandHandler
name|handler
init|=
name|cmdMap
operator|.
name|get
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return
name|error
argument_list|(
name|loc
argument_list|(
literal|"multiple-matches"
argument_list|,
name|cmdMap
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|handler
operator|.
name|execute
argument_list|(
name|line
argument_list|)
return|;
block|}
return|return
name|cmdMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|execute
argument_list|(
name|line
argument_list|)
return|;
block|}
comment|/**    * Dispatch the specified line to the appropriate {@link CommandHandler}.    *    * @param line    *          the command-line to dispatch    * @return true if the command was "successful"    */
name|boolean
name|dispatch
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
comment|// exit
name|exit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|line
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isComment
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// save it to the current script, if any
if|if
condition|(
name|scriptOutputFile
operator|!=
literal|null
condition|)
block|{
name|scriptOutputFile
operator|.
name|addLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHelpRequest
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|line
operator|=
literal|"!help"
expr_stmt|;
block|}
if|if
condition|(
name|isBeeLine
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|COMMAND_PREFIX
argument_list|)
condition|)
block|{
comment|// handle SQLLine command in beeline which starts with ! and does not end with ;
return|return
name|execCommandWithPrefix
argument_list|(
name|line
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|commands
operator|.
name|sql
argument_list|(
name|line
argument_list|,
name|getOpts
argument_list|()
operator|.
name|getEntireLineAsCommand
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|commands
operator|.
name|sql
argument_list|(
name|line
argument_list|,
name|getOpts
argument_list|()
operator|.
name|getEntireLineAsCommand
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Test whether a line requires a continuation.    *    * @param line    *          the line to be tested    *    * @return true if continuation required    */
name|boolean
name|needsContinuation
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|isHelpRequest
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|COMMAND_PREFIX
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isComment
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|trimmed
init|=
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|trimmed
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|getOpts
argument_list|()
operator|.
name|isAllowMultiLineCommand
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|trimmed
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
return|;
block|}
comment|/**    * Test whether a line is a help request other than !help.    *    * @param line    *          the line to be tested    *    * @return true if a help request    */
name|boolean
name|isHelpRequest
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|line
operator|.
name|equals
argument_list|(
literal|"?"
argument_list|)
operator|||
name|line
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"help"
argument_list|)
return|;
block|}
comment|/**    * Test whether a line is a comment.    *    * @param line    *          the line to be tested    *    * @return true if a comment    */
name|boolean
name|isComment
parameter_list|(
name|String
name|line
parameter_list|)
block|{
comment|// SQL92 comment prefix is "--"
comment|// beeline also supports shell-style "#" prefix
name|String
name|lineTrimmed
init|=
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
name|lineTrimmed
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|lineTrimmed
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
return|;
block|}
comment|/**    * Print the specified message to the console    *    * @param msg    *          the message to print    */
name|void
name|output
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|output
argument_list|(
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|getOpts
argument_list|()
operator|.
name|isSilent
argument_list|()
operator|)
condition|)
block|{
name|output
argument_list|(
name|msg
argument_list|,
literal|true
argument_list|,
name|getErrorStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|info
parameter_list|(
name|ColorBuffer
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|getOpts
argument_list|()
operator|.
name|isSilent
argument_list|()
operator|)
condition|)
block|{
name|output
argument_list|(
name|msg
argument_list|,
literal|true
argument_list|,
name|getErrorStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Issue the specified error message    *    * @param msg    *          the message to issue    * @return false always    */
name|boolean
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|output
argument_list|(
name|getColorBuffer
argument_list|()
operator|.
name|red
argument_list|(
name|msg
argument_list|)
argument_list|,
literal|true
argument_list|,
name|getErrorStream
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|error
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleException
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|getOpts
argument_list|()
operator|.
name|getVerbose
argument_list|()
condition|)
block|{
name|output
argument_list|(
name|getColorBuffer
argument_list|()
operator|.
name|blue
argument_list|(
name|msg
argument_list|)
argument_list|,
literal|true
argument_list|,
name|getErrorStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|output
parameter_list|(
name|ColorBuffer
name|msg
parameter_list|)
block|{
name|output
argument_list|(
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|void
name|output
parameter_list|(
name|String
name|msg
parameter_list|,
name|boolean
name|newline
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|output
argument_list|(
name|getColorBuffer
argument_list|(
name|msg
argument_list|)
argument_list|,
name|newline
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|void
name|output
parameter_list|(
name|ColorBuffer
name|msg
parameter_list|,
name|boolean
name|newline
parameter_list|)
block|{
name|output
argument_list|(
name|msg
argument_list|,
name|newline
argument_list|,
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|output
parameter_list|(
name|ColorBuffer
name|msg
parameter_list|,
name|boolean
name|newline
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
if|if
condition|(
name|newline
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|msg
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
name|msg
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recordOutputFile
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// only write to the record file if we are writing a line ...
comment|// otherwise we might get garbage from backspaces and such.
if|if
condition|(
name|newline
condition|)
block|{
name|recordOutputFile
operator|.
name|addLine
argument_list|(
name|msg
operator|.
name|getMono
argument_list|()
argument_list|)
expr_stmt|;
comment|// always just write mono
block|}
else|else
block|{
name|recordOutputFile
operator|.
name|print
argument_list|(
name|msg
operator|.
name|getMono
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Print the specified message to the console    *    * @param msg    *          the message to print    * @param newline    *          if false, do not append a newline    */
name|void
name|output
parameter_list|(
name|String
name|msg
parameter_list|,
name|boolean
name|newline
parameter_list|)
block|{
name|output
argument_list|(
name|getColorBuffer
argument_list|(
name|msg
argument_list|)
argument_list|,
name|newline
argument_list|)
expr_stmt|;
block|}
name|void
name|autocommitStatus
parameter_list|(
name|Connection
name|c
parameter_list|)
throws|throws
name|SQLException
block|{
name|info
argument_list|(
name|loc
argument_list|(
literal|"autocommit-status"
argument_list|,
name|c
operator|.
name|getAutoCommit
argument_list|()
operator|+
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that autocommit is on for the current connection    *    * @return true if autocommit is set    */
name|boolean
name|assertAutoCommit
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
if|if
condition|(
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
return|return
name|error
argument_list|(
name|loc
argument_list|(
literal|"autocommit-needs-off"
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Assert that we have an active, living connection. Print    * an error message if we do not.    *    * @return true if there is a current, active connection    */
name|boolean
name|assertConnection
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|getDatabaseConnection
argument_list|()
operator|==
literal|null
operator|||
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|error
argument_list|(
name|loc
argument_list|(
literal|"no-current-connection"
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return
name|error
argument_list|(
name|loc
argument_list|(
literal|"connection-is-closed"
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqle
parameter_list|)
block|{
return|return
name|error
argument_list|(
name|loc
argument_list|(
literal|"no-current-connection"
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Print out any warnings that exist for the current connection.    */
name|void
name|showWarnings
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|getOpts
argument_list|()
operator|.
name|getVerbose
argument_list|()
condition|)
block|{
return|return;
block|}
name|showWarnings
argument_list|(
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Print the specified warning on the console, as well as    * any warnings that are returned from {@link SQLWarning#getNextWarning}.    *    * @param warn    *          the {@link SQLWarning} to print    */
name|void
name|showWarnings
parameter_list|(
name|SQLWarning
name|warn
parameter_list|)
block|{
if|if
condition|(
name|warn
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|seenWarnings
operator|.
name|get
argument_list|(
name|warn
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// don't re-display warnings we have already seen
name|seenWarnings
operator|.
name|put
argument_list|(
name|warn
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|handleSQLException
argument_list|(
name|warn
argument_list|)
expr_stmt|;
block|}
name|SQLWarning
name|next
init|=
name|warn
operator|.
name|getNextWarning
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
name|warn
condition|)
block|{
name|showWarnings
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|getPrompt
parameter_list|()
block|{
if|if
condition|(
name|isBeeLine
condition|)
block|{
return|return
name|getPromptForBeeline
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getPromptForCli
argument_list|()
return|;
block|}
block|}
name|String
name|getPromptForCli
parameter_list|()
block|{
name|String
name|prompt
decl_stmt|;
comment|// read prompt configuration and substitute variables.
name|HiveConf
name|conf
init|=
name|getCommands
argument_list|()
operator|.
name|getHiveConf
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|prompt
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|CLIPROMPT
argument_list|)
expr_stmt|;
name|prompt
operator|=
name|getCommands
argument_list|()
operator|.
name|substituteVariables
argument_list|(
name|conf
argument_list|,
name|prompt
argument_list|)
expr_stmt|;
return|return
name|prompt
operator|+
name|getFormattedDb
argument_list|(
name|conf
argument_list|)
operator|+
literal|"> "
return|;
block|}
comment|/**    * Retrieve the current database name string to display, based on the    * configuration value.    *    * @param conf storing whether or not to show current db    * @return String to show user for current db value    */
name|String
name|getFormattedDb
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|CLIPRINTCURRENTDB
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|currDb
init|=
name|getCurrentDatabase
argument_list|()
decl_stmt|;
if|if
condition|(
name|currDb
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
literal|" ("
operator|+
name|currDb
operator|+
literal|")"
return|;
block|}
name|String
name|getPromptForBeeline
parameter_list|()
block|{
if|if
condition|(
name|getDatabaseConnection
argument_list|()
operator|==
literal|null
operator|||
name|getDatabaseConnection
argument_list|()
operator|.
name|getUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|"beeline> "
return|;
block|}
else|else
block|{
name|String
name|printClosed
init|=
name|getDatabaseConnection
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|?
literal|" (closed)"
else|:
literal|""
decl_stmt|;
return|return
name|getPromptForBeeline
argument_list|(
name|getDatabaseConnections
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|+
literal|": "
operator|+
name|getDatabaseConnection
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
operator|+
name|printClosed
operator|+
literal|"> "
return|;
block|}
block|}
specifier|static
name|String
name|getPromptForBeeline
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|url
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|url
operator|=
literal|"beeline"
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|url
operator|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|url
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|url
operator|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|url
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|.
name|length
argument_list|()
operator|>
literal|45
condition|)
block|{
name|url
operator|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|45
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
comment|/**    * Try to obtain the current size of the specified {@link ResultSet} by jumping to the last row    * and getting the row number.    *    * @param rs    *          the {@link ResultSet} to get the size for    * @return the size, or -1 if it could not be obtained    */
name|int
name|getSize
parameter_list|(
name|ResultSet
name|rs
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|rs
operator|.
name|getType
argument_list|()
operator|==
name|rs
operator|.
name|TYPE_FORWARD_ONLY
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|rs
operator|.
name|last
argument_list|()
expr_stmt|;
name|int
name|total
init|=
name|rs
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|rs
operator|.
name|beforeFirst
argument_list|()
expr_stmt|;
return|return
name|total
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqle
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// JDBC 1 driver error
catch|catch
parameter_list|(
name|AbstractMethodError
name|ame
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
name|ResultSet
name|getColumns
parameter_list|(
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|!
operator|(
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getDatabaseConnection
argument_list|()
operator|.
name|getDatabaseMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
name|getDatabaseConnection
argument_list|()
operator|.
name|getDatabaseMetaData
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
argument_list|,
literal|null
argument_list|,
name|table
argument_list|,
literal|"%"
argument_list|)
return|;
block|}
name|ResultSet
name|getTables
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|!
operator|(
name|assertConnection
argument_list|()
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getDatabaseConnection
argument_list|()
operator|.
name|getDatabaseMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
name|getDatabaseConnection
argument_list|()
operator|.
name|getDatabaseMetaData
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TABLE"
block|}
argument_list|)
return|;
block|}
name|String
index|[]
name|getColumnNames
parameter_list|(
name|DatabaseMetaData
name|meta
parameter_list|)
throws|throws
name|SQLException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|info
argument_list|(
name|loc
argument_list|(
literal|"building-tables"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ResultSet
name|columns
init|=
name|getColumns
argument_list|(
literal|"%"
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|total
init|=
name|getSize
argument_list|(
name|columns
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|columns
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// add the following strings:
comment|// 1. column name
comment|// 2. table name
comment|// 3. tablename.columnname
name|progress
argument_list|(
name|index
operator|++
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|columns
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|columns
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|columns
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
operator|+
literal|"."
operator|+
name|columns
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|progress
argument_list|(
name|index
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|columns
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|info
argument_list|(
name|loc
argument_list|(
literal|"done"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleException
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
comment|// //////////////////
comment|// String utilities
comment|// //////////////////
comment|/**    * Split the line into an array by tokenizing on space characters    *    * @param line    *          the line to break up    * @return an array of individual words    */
name|String
index|[]
name|split
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|split
argument_list|(
name|line
argument_list|,
literal|" "
argument_list|)
return|;
block|}
name|String
name|dequote
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
while|while
condition|(
operator|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"'"
argument_list|)
operator|&&
name|str
operator|.
name|endsWith
argument_list|(
literal|"'"
argument_list|)
operator|)
operator|||
operator|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|str
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
operator|)
condition|)
block|{
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
name|String
index|[]
name|split
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
name|delim
argument_list|)
decl_stmt|;
name|String
index|[]
name|ret
init|=
operator|new
name|String
index|[
name|tok
operator|.
name|countTokens
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|t
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|t
operator|=
name|dequote
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|ret
index|[
name|index
operator|++
index|]
operator|=
name|t
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|static
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|(
name|Object
index|[]
name|obs
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|obs
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|obs
index|[
name|i
index|]
argument_list|,
name|obs
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|m
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|getMoreResults
parameter_list|(
name|Statement
name|stmnt
parameter_list|)
block|{
try|try
block|{
return|return
name|stmnt
operator|.
name|getMoreResults
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|static
name|String
name|xmlattrencode
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|str
operator|=
name|replace
argument_list|(
name|str
argument_list|,
literal|"\""
argument_list|,
literal|"&quot;"
argument_list|)
expr_stmt|;
name|str
operator|=
name|replace
argument_list|(
name|str
argument_list|,
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
specifier|static
name|String
name|replace
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
return|return
name|source
return|;
block|}
name|StringBuilder
name|replaced
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|index
operator|=
name|source
operator|.
name|indexOf
argument_list|(
name|from
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|replaced
operator|.
name|append
argument_list|(
name|source
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|replaced
operator|.
name|append
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|source
operator|=
name|source
operator|.
name|substring
argument_list|(
name|index
operator|+
name|from
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|replaced
operator|.
name|append
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|replaced
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Split the line based on spaces, asserting that the    * number of words is correct.    *    * @param line    *          the line to split    * @param assertLen    *          the number of words to assure    * @param usage    *          the message to output if there are an incorrect    *          number of words.    * @return the split lines, or null if the assertion failed.    */
name|String
index|[]
name|split
parameter_list|(
name|String
name|line
parameter_list|,
name|int
name|assertLen
parameter_list|,
name|String
name|usage
parameter_list|)
block|{
name|String
index|[]
name|ret
init|=
name|split
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|length
operator|!=
name|assertLen
condition|)
block|{
name|error
argument_list|(
name|usage
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Wrap the specified string by breaking on space characters.    *    * @param toWrap    *          the string to wrap    * @param len    *          the maximum length of any line    * @param start    *          the number of spaces to pad at the    *          beginning of a line    * @return the wrapped string    */
name|String
name|wrap
parameter_list|(
name|String
name|toWrap
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|line
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|char
index|[]
name|head
init|=
operator|new
name|char
index|[
name|start
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|head
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
for|for
control|(
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|toWrap
argument_list|,
literal|" "
argument_list|)
init|;
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|next
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|+
name|next
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|line
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|append
argument_list|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Output a progress indicator to the console.    *    * @param cur    *          the current progress    * @param max    *          the maximum progress, or -1 if unknown    */
name|void
name|progress
parameter_list|(
name|int
name|cur
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastProgress
operator|!=
literal|null
condition|)
block|{
name|char
index|[]
name|back
init|=
operator|new
name|char
index|[
name|lastProgress
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|back
argument_list|,
literal|'\b'
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|back
argument_list|)
expr_stmt|;
block|}
name|String
name|progress
init|=
name|cur
operator|+
literal|"/"
operator|+
operator|(
name|max
operator|==
operator|-
literal|1
condition|?
literal|"?"
else|:
literal|""
operator|+
name|max
operator|)
operator|+
literal|" "
operator|+
operator|(
name|max
operator|==
operator|-
literal|1
condition|?
literal|"(??%)"
else|:
operator|(
literal|"("
operator|+
operator|(
name|cur
operator|*
literal|100
operator|/
operator|(
name|max
operator|==
literal|0
condition|?
literal|1
else|:
name|max
operator|)
operator|)
operator|+
literal|"%)"
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|cur
operator|>=
name|max
operator|&&
name|max
operator|!=
operator|-
literal|1
condition|)
block|{
name|progress
operator|+=
literal|" "
operator|+
name|loc
argument_list|(
literal|"done"
argument_list|)
operator|+
name|separator
expr_stmt|;
name|lastProgress
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|lastProgress
operator|=
name|progress
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|print
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|// /////////////////////////////
comment|// Exception handling routines
comment|// /////////////////////////////
name|void
name|handleException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
while|while
condition|(
name|e
operator|instanceof
name|InvocationTargetException
condition|)
block|{
name|e
operator|=
operator|(
operator|(
name|InvocationTargetException
operator|)
name|e
operator|)
operator|.
name|getTargetException
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|SQLException
condition|)
block|{
name|handleSQLException
argument_list|(
operator|(
name|SQLException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|EOFException
condition|)
block|{
name|setExit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// CTRL-D
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|getOpts
argument_list|()
operator|.
name|getVerbose
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|getErrorStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|handleSQLException
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SQLWarning
operator|&&
operator|!
operator|(
name|getOpts
argument_list|()
operator|.
name|getShowWarnings
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|error
argument_list|(
name|loc
argument_list|(
name|e
operator|instanceof
name|SQLWarning
condition|?
literal|"Warning"
else|:
literal|"Error"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|trim
argument_list|()
block|,
name|e
operator|.
name|getSQLState
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|trim
argument_list|()
block|,
operator|new
name|Integer
argument_list|(
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getOpts
argument_list|()
operator|.
name|getVerbose
argument_list|()
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|getErrorStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getOpts
argument_list|()
operator|.
name|getShowNestedErrs
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|SQLException
name|nested
init|=
name|e
operator|.
name|getNextException
argument_list|()
init|;
name|nested
operator|!=
literal|null
operator|&&
name|nested
operator|!=
name|e
condition|;
name|nested
operator|=
name|nested
operator|.
name|getNextException
argument_list|()
control|)
block|{
name|handleSQLException
argument_list|(
name|nested
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|scanForDriver
parameter_list|(
name|String
name|url
parameter_list|)
block|{
try|try
block|{
comment|// already registered
if|if
condition|(
name|findRegisteredDriver
argument_list|(
name|url
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// first try known drivers...
name|scanDrivers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|findRegisteredDriver
argument_list|(
name|url
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// now really scan...
name|scanDrivers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|findRegisteredDriver
argument_list|(
name|url
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// find whether exists a local driver to accept the url
if|if
condition|(
name|findLocalDriver
argument_list|(
name|url
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|debug
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|Driver
name|findRegisteredDriver
parameter_list|(
name|String
name|url
parameter_list|)
block|{
for|for
control|(
name|Enumeration
name|drivers
init|=
name|DriverManager
operator|.
name|getDrivers
argument_list|()
init|;
name|drivers
operator|!=
literal|null
operator|&&
name|drivers
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Driver
name|driver
init|=
operator|(
name|Driver
operator|)
name|drivers
operator|.
name|nextElement
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|driver
operator|.
name|acceptsURL
argument_list|(
name|url
argument_list|)
condition|)
block|{
return|return
name|driver
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Driver
name|findLocalDriver
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|drivers
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Driver
name|d
range|:
name|drivers
control|)
block|{
try|try
block|{
name|String
name|clazzName
init|=
name|d
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Driver
name|driver
init|=
operator|(
name|Driver
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|driver
operator|.
name|acceptsURL
argument_list|(
name|url
argument_list|)
operator|&&
name|isSupportedLocalDriver
argument_list|(
name|driver
argument_list|)
condition|)
block|{
return|return
name|driver
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isSupportedLocalDriver
parameter_list|(
name|Driver
name|driver
parameter_list|)
block|{
name|String
name|driverName
init|=
name|driver
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|supportedLocalDriver
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|driverName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|addLocalDriverClazz
parameter_list|(
name|String
name|driverClazz
parameter_list|)
block|{
name|supportedLocalDriver
operator|.
name|add
argument_list|(
name|driverClazz
argument_list|)
expr_stmt|;
block|}
name|Driver
index|[]
name|scanDrivers
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scanDrivers
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|Driver
index|[]
name|scanDrivers
parameter_list|(
name|boolean
name|knownOnly
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|classNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|knownOnly
condition|)
block|{
name|classNames
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ClassNameCompleter
operator|.
name|getClassNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|classNames
operator|.
name|addAll
argument_list|(
name|KNOWN_DRIVERS
argument_list|)
expr_stmt|;
name|Set
name|driverClasses
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|classNames
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|className
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"driver"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|Class
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|false
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Driver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|c
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// now instantiate and initialize it
name|driverClasses
operator|.
name|add
argument_list|(
name|c
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{       }
block|}
name|info
argument_list|(
literal|"scan complete in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
return|return
operator|(
name|Driver
index|[]
operator|)
name|driverClasses
operator|.
name|toArray
argument_list|(
operator|new
name|Driver
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|private
name|Driver
index|[]
name|scanDriversOLD
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
name|driverClasses
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.ext.dirs"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
init|;
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|File
index|[]
name|files
init|=
operator|new
name|File
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|files
operator|!=
literal|null
operator|&&
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
init|;
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|paths
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|output
argument_list|(
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|loc
argument_list|(
literal|"scanning"
argument_list|,
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|60
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|ZipFile
name|zf
init|=
operator|new
name|ZipFile
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|int
name|total
init|=
name|zf
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|zfEnum
init|=
name|zf
operator|.
name|entries
argument_list|()
init|;
name|zfEnum
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ZipEntry
name|entry
init|=
operator|(
name|ZipEntry
operator|)
name|zfEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|progress
argument_list|(
name|index
operator|++
argument_list|,
name|total
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
expr_stmt|;
try|try
block|{
comment|// check for the string "driver" in the class
comment|// to see if we should load it. Not perfect, but
comment|// it is far too slow otherwise.
if|if
condition|(
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"driver"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|Class
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Driver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
operator|&&
operator|!
operator|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|c
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
comment|// load and initialize
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                   }
name|driverClasses
operator|.
name|add
argument_list|(
name|c
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{             }
block|}
block|}
name|progress
argument_list|(
name|total
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
block|}
name|info
argument_list|(
literal|"scan complete in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
return|return
operator|(
name|Driver
index|[]
operator|)
name|driverClasses
operator|.
name|toArray
argument_list|(
operator|new
name|Driver
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|// /////////////////////////////////////
comment|// ResultSet output formatting classes
comment|// /////////////////////////////////////
name|int
name|print
parameter_list|(
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|format
init|=
name|getOpts
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
decl_stmt|;
name|OutputFormat
name|f
init|=
operator|(
name|OutputFormat
operator|)
name|formats
operator|.
name|get
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
name|loc
argument_list|(
literal|"unknown-format"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|format
block|,
name|formats
operator|.
name|keySet
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|TableOutputFormat
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|Rows
name|rows
decl_stmt|;
if|if
condition|(
name|getOpts
argument_list|()
operator|.
name|getIncremental
argument_list|()
condition|)
block|{
name|rows
operator|=
operator|new
name|IncrementalRows
argument_list|(
name|this
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rows
operator|=
operator|new
name|BufferedRows
argument_list|(
name|this
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
return|return
name|f
operator|.
name|print
argument_list|(
name|rows
argument_list|)
return|;
block|}
name|Statement
name|createStatement
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmnt
init|=
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|getOpts
argument_list|()
operator|.
name|timeout
operator|>
operator|-
literal|1
condition|)
block|{
name|stmnt
operator|.
name|setQueryTimeout
argument_list|(
name|getOpts
argument_list|()
operator|.
name|timeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|signalHandler
operator|!=
literal|null
condition|)
block|{
name|signalHandler
operator|.
name|setStatement
argument_list|(
name|stmnt
argument_list|)
expr_stmt|;
block|}
return|return
name|stmnt
return|;
block|}
name|void
name|runBatch
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|statements
parameter_list|)
block|{
try|try
block|{
name|Statement
name|stmnt
init|=
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|statements
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|stmnt
operator|.
name|addBatch
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|counts
init|=
name|stmnt
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
name|output
argument_list|(
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|getColorBuffer
argument_list|()
operator|.
name|bold
argument_list|(
literal|"COUNT"
argument_list|)
argument_list|,
literal|8
argument_list|)
operator|.
name|append
argument_list|(
name|getColorBuffer
argument_list|()
operator|.
name|bold
argument_list|(
literal|"STATEMENT"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|counts
operator|!=
literal|null
operator|&&
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
argument_list|(
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|counts
index|[
name|i
index|]
operator|+
literal|""
argument_list|,
literal|8
argument_list|)
operator|.
name|append
argument_list|(
name|statements
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|stmnt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|runCommands
parameter_list|(
name|String
index|[]
name|cmds
parameter_list|)
block|{
return|return
name|runCommands
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cmds
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|runCommands
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cmds
parameter_list|)
block|{
name|int
name|successCount
init|=
literal|0
decl_stmt|;
try|try
block|{
comment|// TODO: Make script output prefixing configurable. Had to disable this since
comment|// it results in lots of test diffs.
for|for
control|(
name|String
name|cmd
range|:
name|cmds
control|)
block|{
name|info
argument_list|(
name|getColorBuffer
argument_list|()
operator|.
name|pad
argument_list|(
name|SCRIPT_OUTPUT_PREFIX
argument_list|,
name|SCRIPT_OUTPUT_PAD_SIZE
argument_list|)
operator|.
name|append
argument_list|(
name|cmd
argument_list|)
argument_list|)
expr_stmt|;
comment|// if we do not force script execution, abort
comment|// when a failure occurs.
if|if
condition|(
name|dispatch
argument_list|(
name|cmd
argument_list|)
operator|||
name|getOpts
argument_list|()
operator|.
name|getForce
argument_list|()
condition|)
block|{
operator|++
name|successCount
expr_stmt|;
block|}
else|else
block|{
name|error
argument_list|(
name|loc
argument_list|(
literal|"abort-on-error"
argument_list|,
name|cmd
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|successCount
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|successCount
return|;
block|}
comment|// ////////////////////////
comment|// Command methods follow
comment|// ////////////////////////
name|void
name|setCompletions
parameter_list|()
throws|throws
name|SQLException
throws|,
name|IOException
block|{
if|if
condition|(
name|getDatabaseConnection
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getDatabaseConnection
argument_list|()
operator|.
name|setCompletions
argument_list|(
name|getOpts
argument_list|()
operator|.
name|getFastConnect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|BeeLineOpts
name|getOpts
parameter_list|()
block|{
return|return
name|opts
return|;
block|}
name|DatabaseConnections
name|getDatabaseConnections
parameter_list|()
block|{
return|return
name|connections
return|;
block|}
name|Completer
name|getCommandCompletor
parameter_list|()
block|{
return|return
name|beeLineCommandCompleter
return|;
block|}
specifier|public
name|boolean
name|isExit
parameter_list|()
block|{
return|return
name|exit
return|;
block|}
specifier|public
name|void
name|setExit
parameter_list|(
name|boolean
name|exit
parameter_list|)
block|{
name|this
operator|.
name|exit
operator|=
name|exit
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Driver
argument_list|>
name|getDrivers
parameter_list|()
block|{
return|return
name|drivers
return|;
block|}
name|void
name|setDrivers
parameter_list|(
name|Collection
argument_list|<
name|Driver
argument_list|>
name|drivers
parameter_list|)
block|{
name|this
operator|.
name|drivers
operator|=
name|drivers
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getSeparator
parameter_list|()
block|{
return|return
name|separator
return|;
block|}
name|Commands
name|getCommands
parameter_list|()
block|{
return|return
name|commands
return|;
block|}
name|OutputFile
name|getScriptOutputFile
parameter_list|()
block|{
return|return
name|scriptOutputFile
return|;
block|}
name|void
name|setScriptOutputFile
parameter_list|(
name|OutputFile
name|script
parameter_list|)
block|{
name|this
operator|.
name|scriptOutputFile
operator|=
name|script
expr_stmt|;
block|}
name|OutputFile
name|getRecordOutputFile
parameter_list|()
block|{
return|return
name|recordOutputFile
return|;
block|}
name|void
name|setRecordOutputFile
parameter_list|(
name|OutputFile
name|record
parameter_list|)
block|{
name|this
operator|.
name|recordOutputFile
operator|=
name|record
expr_stmt|;
block|}
specifier|public
name|void
name|setOutputStream
parameter_list|(
name|PrintStream
name|outputStream
parameter_list|)
block|{
name|this
operator|.
name|outputStream
operator|=
operator|new
name|PrintStream
argument_list|(
name|outputStream
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|PrintStream
name|getOutputStream
parameter_list|()
block|{
return|return
name|outputStream
return|;
block|}
specifier|public
name|void
name|setErrorStream
parameter_list|(
name|PrintStream
name|errorStream
parameter_list|)
block|{
name|this
operator|.
name|errorStream
operator|=
operator|new
name|PrintStream
argument_list|(
name|errorStream
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|PrintStream
name|getErrorStream
parameter_list|()
block|{
return|return
name|errorStream
return|;
block|}
name|ConsoleReader
name|getConsoleReader
parameter_list|()
block|{
return|return
name|consoleReader
return|;
block|}
name|void
name|setConsoleReader
parameter_list|(
name|ConsoleReader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|consoleReader
operator|=
name|reader
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|getBatch
parameter_list|()
block|{
return|return
name|batch
return|;
block|}
name|void
name|setBatch
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|batch
parameter_list|)
block|{
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
block|}
specifier|protected
name|Reflector
name|getReflector
parameter_list|()
block|{
return|return
name|reflector
return|;
block|}
specifier|public
name|boolean
name|isBeeLine
parameter_list|()
block|{
return|return
name|isBeeLine
return|;
block|}
specifier|public
name|void
name|setBeeLine
parameter_list|(
name|boolean
name|isBeeLine
parameter_list|)
block|{
name|this
operator|.
name|isBeeLine
operator|=
name|isBeeLine
expr_stmt|;
block|}
specifier|public
name|String
name|getCurrentDatabase
parameter_list|()
block|{
if|if
condition|(
name|currentDatabase
operator|==
literal|null
condition|)
block|{
name|currentDatabase
operator|=
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
return|return
name|currentDatabase
return|;
block|}
specifier|public
name|void
name|setCurrentDatabase
parameter_list|(
name|String
name|currentDatabase
parameter_list|)
block|{
name|this
operator|.
name|currentDatabase
operator|=
name|currentDatabase
expr_stmt|;
block|}
block|}
end_class

end_unit

