begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_comment
comment|/**  * We need to update some client side information after executing some Hive Commands  */
end_comment

begin_class
specifier|public
class|class
name|ClientCommandHookFactory
block|{
specifier|private
specifier|final
specifier|static
name|ClientCommandHookFactory
name|instance
init|=
operator|new
name|ClientCommandHookFactory
argument_list|()
decl_stmt|;
specifier|private
name|ClientCommandHookFactory
parameter_list|()
block|{   }
specifier|public
specifier|static
name|ClientCommandHookFactory
name|get
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|public
class|class
name|SetCommandHook
extends|extends
name|ClientHook
block|{
specifier|public
name|SetCommandHook
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|super
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postHook
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|)
block|{
if|if
condition|(
operator|!
name|beeLine
operator|.
name|isBeeLine
argument_list|()
condition|)
block|{
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|setHiveConf
argument_list|(
name|beeLine
operator|.
name|getCommands
argument_list|()
operator|.
name|getHiveConf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|UseCommandHook
extends|extends
name|ClientHook
block|{
specifier|public
name|UseCommandHook
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|super
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postHook
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|)
block|{
comment|// Handler multi-line sql
name|String
name|line
init|=
name|sql
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|strs
index|[]
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|String
name|dbName
decl_stmt|;
if|if
condition|(
name|strs
operator|==
literal|null
operator|||
name|strs
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
comment|// unable to parse the use command
name|dbName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|dbName
operator|=
name|strs
index|[
literal|1
index|]
expr_stmt|;
block|}
name|beeLine
operator|.
name|setCurrentDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|ConnectCommandHook
extends|extends
name|ClientHook
block|{
specifier|public
name|ConnectCommandHook
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|super
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postHook
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|)
block|{
comment|// Handler multi-line sql
name|String
name|line
init|=
name|sql
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|strs
index|[]
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|String
name|dbName
decl_stmt|;
if|if
condition|(
name|strs
operator|==
literal|null
operator|||
name|strs
operator|.
name|length
operator|<
literal|1
condition|)
block|{
comment|// unable to parse the connect command
name|dbName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|dbName
operator|=
name|Utils
operator|.
name|parseURL
argument_list|(
name|strs
index|[
literal|1
index|]
argument_list|)
operator|.
name|getDbName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// unable to parse the connect command
name|dbName
operator|=
literal|""
expr_stmt|;
block|}
block|}
name|beeLine
operator|.
name|setCurrentDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|GoCommandHook
extends|extends
name|ClientHook
block|{
specifier|public
name|GoCommandHook
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|super
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postHook
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|)
block|{
name|String
name|dbName
init|=
literal|""
decl_stmt|;
try|try
block|{
name|dbName
operator|=
name|beeLine
operator|.
name|getDatabaseConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getSchema
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// unable to get the database, set the dbName empty
block|}
name|beeLine
operator|.
name|setCurrentDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ClientHook
name|getHook
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|,
name|String
name|cmdLine
parameter_list|)
block|{
if|if
condition|(
operator|!
name|beeLine
operator|.
name|isBeeLine
argument_list|()
condition|)
block|{
comment|// In compatibility mode we need to hook to set, and use
if|if
condition|(
name|cmdLine
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
comment|// Only set A = B command needs updating the configuration stored in client side.
if|if
condition|(
name|cmdLine
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
return|return
operator|new
name|SetCommandHook
argument_list|(
name|cmdLine
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|cmdLine
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"use"
argument_list|)
condition|)
block|{
return|return
operator|new
name|UseCommandHook
argument_list|(
name|cmdLine
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// In beeline mode we need to hook to use, connect, go, in case
comment|// the ShowDbInPrompt is set, so the database name is needed
if|if
condition|(
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getShowDbInPrompt
argument_list|()
condition|)
block|{
if|if
condition|(
name|cmdLine
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"use"
argument_list|)
condition|)
block|{
return|return
operator|new
name|UseCommandHook
argument_list|(
name|cmdLine
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cmdLine
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"connect"
argument_list|)
condition|)
block|{
return|return
operator|new
name|ConnectCommandHook
argument_list|(
name|cmdLine
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cmdLine
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"go"
argument_list|)
condition|)
block|{
return|return
operator|new
name|GoCommandHook
argument_list|(
name|cmdLine
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

