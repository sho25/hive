begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * This source file is based on code taken from SQLLine 1.0.2  * See SQLLine notice in LICENSE  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|HiveConnection
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|completer
operator|.
name|ArgumentCompleter
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|completer
operator|.
name|Completer
import|;
end_import

begin_class
class|class
name|DatabaseConnection
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_VAR_PREFIX
init|=
literal|"hivevar:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_CONF_PREFIX
init|=
literal|"hiveconf:"
decl_stmt|;
specifier|private
specifier|final
name|BeeLine
name|beeLine
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|DatabaseMetaData
name|meta
decl_stmt|;
specifier|private
specifier|final
name|String
name|driver
decl_stmt|;
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
specifier|private
specifier|final
name|Properties
name|info
decl_stmt|;
specifier|private
name|Schema
name|schema
init|=
literal|null
decl_stmt|;
specifier|private
name|Completer
name|sqlCompleter
init|=
literal|null
decl_stmt|;
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|==
name|connection
operator|)
return|;
block|}
specifier|public
name|DatabaseConnection
parameter_list|(
name|BeeLine
name|beeLine
parameter_list|,
name|String
name|driver
parameter_list|,
name|String
name|url
parameter_list|,
name|Properties
name|info
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|beeLine
operator|=
name|beeLine
expr_stmt|;
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getUrl
argument_list|()
operator|+
literal|""
return|;
block|}
name|void
name|setCompletions
parameter_list|(
name|boolean
name|skipmeta
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
specifier|final
name|String
name|extraNameCharacters
init|=
name|getDatabaseMetaData
argument_list|()
operator|==
literal|null
operator|||
name|getDatabaseMetaData
argument_list|()
operator|.
name|getExtraNameCharacters
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getDatabaseMetaData
argument_list|()
operator|.
name|getExtraNameCharacters
argument_list|()
decl_stmt|;
comment|// setup the completer for the database
name|sqlCompleter
operator|=
operator|new
name|ArgumentCompleter
argument_list|(
operator|new
name|ArgumentCompleter
operator|.
name|AbstractArgumentDelimiter
argument_list|()
block|{
comment|// delimiters for SQL statements are any
comment|// non-letter-or-number characters, except
comment|// underscore and characters that are specified
comment|// by the database to be valid name identifiers.
annotation|@
name|Override
specifier|public
name|boolean
name|isDelimiterChar
parameter_list|(
name|CharSequence
name|buffer
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|char
name|c
init|=
name|buffer
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|!
operator|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|c
argument_list|)
operator|)
operator|&&
name|c
operator|!=
literal|'_'
operator|&&
name|extraNameCharacters
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|==
operator|-
literal|1
return|;
block|}
block|}
argument_list|,
operator|new
name|SQLCompleter
argument_list|(
name|SQLCompleter
operator|.
name|getSQLCompleters
argument_list|(
name|beeLine
argument_list|,
name|skipmeta
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// not all argument elements need to hold true
operator|(
operator|(
name|ArgumentCompleter
operator|)
name|sqlCompleter
operator|)
operator|.
name|setStrict
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Connection to the specified data source.    */
name|boolean
name|connect
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
operator|&&
name|driver
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|cnfe
argument_list|)
return|;
block|}
name|boolean
name|isDriverRegistered
init|=
literal|false
decl_stmt|;
try|try
block|{
name|isDriverRegistered
operator|=
name|DriverManager
operator|.
name|getDriver
argument_list|(
name|getUrl
argument_list|()
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVars
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getHiveVariables
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveVars
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|var
range|:
name|hiveVars
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|info
operator|.
name|put
argument_list|(
name|HIVE_VAR_PREFIX
operator|+
name|var
operator|.
name|getKey
argument_list|()
argument_list|,
name|var
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveConfVars
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getHiveConfVariables
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveConfVars
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|var
range|:
name|hiveConfVars
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|info
operator|.
name|put
argument_list|(
name|HIVE_CONF_PREFIX
operator|+
name|var
operator|.
name|getKey
argument_list|()
argument_list|,
name|var
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isDriverRegistered
condition|)
block|{
comment|// if the driver registered in the driver manager, get the connection via the driver manager
name|setConnection
argument_list|(
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|getUrl
argument_list|()
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|beeLine
operator|.
name|debug
argument_list|(
literal|"Use the driver from local added jar file."
argument_list|)
expr_stmt|;
name|setConnection
argument_list|(
name|getConnectionFromLocalDriver
argument_list|(
name|getUrl
argument_list|()
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setDatabaseMetaData
argument_list|(
name|getConnection
argument_list|()
operator|.
name|getMetaData
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"connected"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getDatabaseMetaData
argument_list|()
operator|.
name|getDatabaseProductName
argument_list|()
block|,
name|getDatabaseMetaData
argument_list|()
operator|.
name|getDatabaseProductVersion
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|beeLine
operator|.
name|info
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"driver"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getDatabaseMetaData
argument_list|()
operator|.
name|getDriverName
argument_list|()
block|,
name|getDatabaseMetaData
argument_list|()
operator|.
name|getDriverVersion
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|setAutoCommit
argument_list|(
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Setting autocommit should not generate an exception as long as it is set to false
comment|// beeLine.autocommitStatus(getConnection());
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|beeLine
operator|.
name|getCommands
argument_list|()
operator|.
name|isolation
argument_list|(
literal|"isolation: "
operator|+
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getIsolation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Connection
name|getConnectionFromLocalDriver
parameter_list|(
name|String
name|url
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
name|Collection
argument_list|<
name|Driver
argument_list|>
name|drivers
init|=
name|beeLine
operator|.
name|getDrivers
argument_list|()
decl_stmt|;
for|for
control|(
name|Driver
name|d
range|:
name|drivers
control|)
block|{
try|try
block|{
if|if
condition|(
name|d
operator|.
name|acceptsURL
argument_list|(
name|url
argument_list|)
operator|&&
name|beeLine
operator|.
name|isSupportedLocalDriver
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|String
name|clazzName
init|=
name|d
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|debug
argument_list|(
literal|"Driver name is "
operator|+
name|clazzName
argument_list|)
expr_stmt|;
name|Driver
name|driver
init|=
operator|(
name|Driver
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|driver
operator|.
name|connect
argument_list|(
name|url
argument_list|,
name|properties
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|error
argument_list|(
literal|"Fail to connect with a local driver due to the exception:"
operator|+
name|e
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
return|return
name|connection
return|;
block|}
name|connect
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
specifier|public
name|Connection
name|getCurrentConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
specifier|public
name|void
name|reconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|close
argument_list|()
expr_stmt|;
name|getConnection
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
try|try
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
operator|&&
operator|!
name|connection
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|beeLine
operator|.
name|output
argument_list|(
name|beeLine
operator|.
name|loc
argument_list|(
literal|"closing"
argument_list|,
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beeLine
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|setConnection
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setDatabaseMetaData
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
index|[]
name|getTableNames
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
name|Schema
operator|.
name|Table
index|[]
name|t
init|=
name|getSchema
argument_list|()
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|t
operator|!=
literal|null
operator|&&
name|i
operator|<
name|t
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|t
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
name|Schema
name|getSchema
parameter_list|()
block|{
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
operator|new
name|Schema
argument_list|()
expr_stmt|;
block|}
return|return
name|schema
return|;
block|}
name|void
name|setConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
name|DatabaseMetaData
name|getDatabaseMetaData
parameter_list|()
block|{
return|return
name|meta
return|;
block|}
name|void
name|setDatabaseMetaData
parameter_list|(
name|DatabaseMetaData
name|meta
parameter_list|)
block|{
name|this
operator|.
name|meta
operator|=
name|meta
expr_stmt|;
block|}
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
specifier|public
name|String
name|getConnectedUrl
parameter_list|()
block|{
if|if
condition|(
name|connection
operator|instanceof
name|HiveConnection
condition|)
block|{
return|return
operator|(
operator|(
name|HiveConnection
operator|)
name|connection
operator|)
operator|.
name|getConnectedUrl
argument_list|()
return|;
block|}
return|return
name|getUrl
argument_list|()
return|;
block|}
name|Completer
name|getSQLCompleter
parameter_list|()
block|{
return|return
name|sqlCompleter
return|;
block|}
class|class
name|Schema
block|{
specifier|private
name|Table
index|[]
name|tables
init|=
literal|null
decl_stmt|;
name|Table
index|[]
name|getTables
parameter_list|()
block|{
if|if
condition|(
name|tables
operator|!=
literal|null
condition|)
block|{
return|return
name|tables
return|;
block|}
name|List
argument_list|<
name|Table
argument_list|>
name|tnames
init|=
operator|new
name|LinkedList
argument_list|<
name|Table
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|getDatabaseMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
name|getConnection
argument_list|()
operator|.
name|getCatalog
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TABLE"
block|}
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|tnames
operator|.
name|add
argument_list|(
operator|new
name|Table
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{           }
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{       }
return|return
name|tables
operator|=
name|tnames
operator|.
name|toArray
argument_list|(
operator|new
name|Table
index|[
literal|0
index|]
argument_list|)
return|;
block|}
name|Table
name|getTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Table
index|[]
name|t
init|=
name|getTables
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|t
operator|!=
literal|null
operator|&&
name|i
operator|<
name|t
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|t
index|[
name|i
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
class|class
name|Table
block|{
specifier|final
name|String
name|name
decl_stmt|;
name|Column
index|[]
name|columns
decl_stmt|;
specifier|public
name|Table
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
class|class
name|Column
block|{
specifier|final
name|String
name|name
decl_stmt|;
name|boolean
name|isPrimaryKey
decl_stmt|;
specifier|public
name|Column
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

