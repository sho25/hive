begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|indexer
operator|.
name|JobHelper
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|indexer
operator|.
name|SQLMetadataStorageUpdaterJobHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|MetadataStorageTablesConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|loading
operator|.
name|DataSegmentPusher
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|loading
operator|.
name|SegmentLoadingException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|storage
operator|.
name|hdfs
operator|.
name|HdfsDataSegmentPusher
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|storage
operator|.
name|hdfs
operator|.
name|HdfsDataSegmentPusherConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|DataSegment
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|partition
operator|.
name|LinearShardSpec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|partition
operator|.
name|NoneShardSpec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|partition
operator|.
name|ShardSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|Handle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|StatementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|tweak
operator|.
name|HandleCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|tweak
operator|.
name|ResultSetMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_class
specifier|public
class|class
name|TestDruidStorageHandler
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|DerbyConnectorTestUtility
operator|.
name|DerbyConnectorRule
name|derbyConnectorRule
init|=
operator|new
name|DerbyConnectorTestUtility
operator|.
name|DerbyConnectorRule
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"testName"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATA_SOURCE_NAME
init|=
literal|"default.testName"
decl_stmt|;
specifier|private
name|String
name|segmentsTable
decl_stmt|;
specifier|private
name|String
name|tableWorkingPath
decl_stmt|;
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|private
name|DruidStorageHandler
name|druidStorageHandler
decl_stmt|;
specifier|private
name|DataSegment
name|createSegment
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSegment
argument_list|(
name|location
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|170
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|DataSegment
name|createSegment
parameter_list|(
name|String
name|location
parameter_list|,
name|Interval
name|interval
parameter_list|,
name|String
name|version
parameter_list|,
name|ShardSpec
name|shardSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
argument_list|,
literal|"dummySegmentData"
argument_list|)
expr_stmt|;
name|DataSegment
name|dataSegment
init|=
name|DataSegment
operator|.
name|builder
argument_list|()
operator|.
name|dataSource
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|shardSpec
argument_list|(
name|shardSpec
argument_list|)
operator|.
name|loadSpec
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"path"
argument_list|,
name|location
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|dataSegment
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
name|tableWorkingPath
operator|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|segmentsTable
operator|=
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getSegmentsTable
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tableMock
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tableMock
operator|.
name|getPartitionKeysSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|storageDes
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StorageDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|storageDes
operator|.
name|getBucketColsSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tableMock
operator|.
name|getSd
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storageDes
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tableMock
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tableMock
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_WORKING_DIR
argument_list|)
argument_list|,
name|tableWorkingPath
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_SEGMENT_DIRECTORY
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
literal|"finalSegmentDir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"hive.druid.maxTries"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|=
operator|new
name|DruidStorageHandler
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|setConf
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
name|Table
name|tableMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPreCreateTableWillCreateSegmentsTable
parameter_list|()
throws|throws
name|MetaException
block|{
try|try
init|(
name|Handle
name|handle
init|=
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
operator|.
name|getDBI
argument_list|()
operator|.
name|open
argument_list|()
init|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
operator|.
name|tableExists
argument_list|(
name|handle
argument_list|,
name|segmentsTable
argument_list|)
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
operator|.
name|tableExists
argument_list|(
name|handle
argument_list|,
name|segmentsTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPreCreateTableWhenDataSourceExists
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
operator|.
name|createSegmentTable
argument_list|()
expr_stmt|;
name|SQLMetadataStorageUpdaterJobHandler
name|sqlMetadataStorageUpdaterJobHandler
init|=
operator|new
name|SQLMetadataStorageUpdaterJobHandler
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|DataSegment
name|dataSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"intermediatePath"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|sqlMetadataStorageUpdaterJobHandler
operator|.
name|publishSegments
argument_list|(
name|segmentsTable
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dataSegment
argument_list|)
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitCreateTablePlusCommitDropTableWithoutPurge
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|DataSegment
name|dataSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment
argument_list|,
name|descriptorPath
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitDropTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitCreateTablePlusCommitDropTableWithPurge
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|DataSegment
name|dataSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment
argument_list|,
name|descriptorPath
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitDropTable
argument_list|(
name|tableMock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitCreateEmptyTablePlusCommitDropTableWithoutPurge
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitDropTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitCreateEmptyTablePlusCommitDropTableWithPurge
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitDropTable
argument_list|(
name|tableMock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitInsertTable
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|DataSegment
name|dataSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment
argument_list|,
name|descriptorPath
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitEmptyInsertTable
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
argument_list|,
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteSegment
parameter_list|()
throws|throws
name|IOException
throws|,
name|SegmentLoadingException
block|{
name|String
name|segmentRootPath
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|DataSegment
name|dataSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|HdfsDataSegmentPusherConfig
name|hdfsDSPConfig
init|=
operator|new
name|HdfsDataSegmentPusherConfig
argument_list|()
decl_stmt|;
name|hdfsDSPConfig
operator|.
name|setStorageDirectory
argument_list|(
name|segmentRootPath
argument_list|)
expr_stmt|;
name|HdfsDataSegmentPusher
name|hdfsDataSegmentPusher
init|=
operator|new
name|HdfsDataSegmentPusher
argument_list|(
name|hdfsDSPConfig
argument_list|,
name|config
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
decl_stmt|;
name|Path
name|segmentOutputPath
init|=
name|JobHelper
operator|.
name|makeFileNamePath
argument_list|(
operator|new
name|Path
argument_list|(
name|segmentRootPath
argument_list|)
argument_list|,
name|localFileSystem
argument_list|,
name|dataSegment
argument_list|,
name|JobHelper
operator|.
name|INDEX_ZIP
argument_list|,
name|hdfsDataSegmentPusher
argument_list|)
decl_stmt|;
name|Path
name|indexPath
init|=
operator|new
name|Path
argument_list|(
name|segmentOutputPath
argument_list|,
literal|"index.zip"
argument_list|)
decl_stmt|;
name|DataSegment
name|dataSegmentWithLoadspect
init|=
name|DataSegment
operator|.
name|builder
argument_list|(
name|dataSegment
argument_list|)
operator|.
name|loadSpec
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
literal|"path"
argument_list|,
name|indexPath
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|localFileSystem
operator|.
name|create
argument_list|(
name|indexPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"index file is not created ??"
argument_list|,
name|localFileSystem
operator|.
name|exists
argument_list|(
name|indexPath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localFileSystem
operator|.
name|exists
argument_list|(
name|segmentOutputPath
argument_list|)
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|deleteSegment
argument_list|(
name|dataSegmentWithLoadspect
argument_list|)
expr_stmt|;
comment|// path format --> .../dataSource/interval/version/partitionNum/xxx.zip
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Index file still there ??"
argument_list|,
name|localFileSystem
operator|.
name|exists
argument_list|(
name|indexPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// path format of segmentOutputPath --> .../dataSource/interval/version/partitionNum/
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"PartitionNum directory still there ??"
argument_list|,
name|localFileSystem
operator|.
name|exists
argument_list|(
name|segmentOutputPath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Version directory still there ??"
argument_list|,
name|localFileSystem
operator|.
name|exists
argument_list|(
name|segmentOutputPath
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Interval directory still there ??"
argument_list|,
name|localFileSystem
operator|.
name|exists
argument_list|(
name|segmentOutputPath
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Data source directory still there ??"
argument_list|,
name|localFileSystem
operator|.
name|exists
argument_list|(
name|segmentOutputPath
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitInsertOverwriteTable
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|DerbyConnectorTestUtility
name|connector
init|=
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
decl_stmt|;
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
init|=
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|HdfsDataSegmentPusherConfig
name|pusherConfig
init|=
operator|new
name|HdfsDataSegmentPusherConfig
argument_list|()
decl_stmt|;
name|pusherConfig
operator|.
name|setStorageDirectory
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_SEGMENT_DIRECTORY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DataSegmentPusher
name|dataSegmentPusher
init|=
operator|new
name|HdfsDataSegmentPusher
argument_list|(
name|pusherConfig
argument_list|,
name|config
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
decl_stmt|;
comment|// This create and publish the segment to be overwritten
name|List
argument_list|<
name|DataSegment
argument_list|>
name|existingSegments
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|publishSegmentsAndCommit
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|,
name|DATA_SOURCE_NAME
argument_list|,
name|existingSegments
argument_list|,
literal|true
argument_list|,
name|config
argument_list|,
name|dataSegmentPusher
argument_list|)
expr_stmt|;
comment|// This creates and publish new segment
name|DataSegment
name|dataSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|180
argument_list|,
literal|250
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment
argument_list|,
name|descriptorPath
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DataSegment
argument_list|>
name|dataSegmentList
init|=
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dataSegmentList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DataSegment
name|persistedSegment
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|dataSegmentList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataSegment
argument_list|,
name|persistedSegment
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataSegment
operator|.
name|getVersion
argument_list|()
argument_list|,
name|persistedSegment
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|expectedFinalHadoopPath
init|=
operator|new
name|Path
argument_list|(
name|dataSegmentPusher
operator|.
name|getPathForHadoop
argument_list|()
argument_list|,
name|dataSegmentPusher
operator|.
name|makeIndexPathName
argument_list|(
name|persistedSegment
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"type"
argument_list|,
literal|"hdfs"
argument_list|,
literal|"path"
argument_list|,
name|expectedFinalHadoopPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|persistedSegment
operator|.
name|getLoadSpec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dummySegmentData"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|expectedFinalHadoopPath
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitMultiInsertOverwriteTable
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|DerbyConnectorTestUtility
name|connector
init|=
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
decl_stmt|;
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
init|=
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|HdfsDataSegmentPusherConfig
name|pusherConfig
init|=
operator|new
name|HdfsDataSegmentPusherConfig
argument_list|()
decl_stmt|;
name|pusherConfig
operator|.
name|setStorageDirectory
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_SEGMENT_DIRECTORY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DataSegmentPusher
name|dataSegmentPusher
init|=
operator|new
name|HdfsDataSegmentPusher
argument_list|(
name|pusherConfig
argument_list|,
name|config
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
decl_stmt|;
comment|// This create and publish the segment to be overwritten
name|List
argument_list|<
name|DataSegment
argument_list|>
name|existingSegments
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|publishSegmentsAndCommit
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|,
name|DATA_SOURCE_NAME
argument_list|,
name|existingSegments
argument_list|,
literal|true
argument_list|,
name|config
argument_list|,
name|dataSegmentPusher
argument_list|)
expr_stmt|;
comment|// Check that there is one datasource with the published segment
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sequence is the following:
comment|// 1) INSERT with no segments -> Original segment still present in the datasource
comment|// 2) INSERT OVERWRITE with no segments -> Datasource is empty
comment|// 3) INSERT OVERWRITE with no segments -> Datasource is empty
comment|// 4) INSERT with no segments -> Datasource is empty
comment|// 5) INSERT with one segment -> Datasource has one segment
comment|// 6) INSERT OVERWRITE with one segment -> Datasource has one segment
comment|// 7) INSERT with one segment -> Datasource has two segments
comment|// 8) INSERT OVERWRITE with no segments -> Datasource is empty
comment|// We start:
comment|// #1
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// #2
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// #3
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// #4
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// #5
name|DataSegment
name|dataSegment1
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|180
argument_list|,
literal|250
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath1
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment1
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment1
argument_list|,
name|descriptorPath1
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// #6
name|DataSegment
name|dataSegment2
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|200
argument_list|,
literal|250
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath2
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment2
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment2
argument_list|,
name|descriptorPath2
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// #7
name|DataSegment
name|dataSegment3
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath3
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment3
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment3
argument_list|,
name|descriptorPath3
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// #8
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|DataSegment
argument_list|>
name|getUsedSegmentsList
parameter_list|(
name|DerbyConnectorTestUtility
name|connector
parameter_list|,
specifier|final
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
parameter_list|)
block|{
return|return
name|connector
operator|.
name|getDBI
argument_list|()
operator|.
name|withHandle
argument_list|(
operator|new
name|HandleCallback
argument_list|<
name|List
argument_list|<
name|DataSegment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DataSegment
argument_list|>
name|withHandle
parameter_list|(
name|Handle
name|handle
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|handle
operator|.
name|createQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SELECT payload FROM %s WHERE used=true ORDER BY created_date ASC"
argument_list|,
name|metadataStorageTablesConfig
operator|.
name|getSegmentsTable
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
operator|new
name|ResultSetMapper
argument_list|<
name|DataSegment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DataSegment
name|map
parameter_list|(
name|int
name|i
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|,
name|StatementContext
name|statementContext
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
operator|.
name|readValue
argument_list|(
name|resultSet
operator|.
name|getBytes
argument_list|(
literal|"payload"
argument_list|)
argument_list|,
name|DataSegment
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitInsertIntoTable
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|DerbyConnectorTestUtility
name|connector
init|=
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
decl_stmt|;
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
init|=
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataSegment
argument_list|>
name|existingSegments
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HdfsDataSegmentPusherConfig
name|pusherConfig
init|=
operator|new
name|HdfsDataSegmentPusherConfig
argument_list|()
decl_stmt|;
name|pusherConfig
operator|.
name|setStorageDirectory
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_SEGMENT_DIRECTORY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DataSegmentPusher
name|dataSegmentPusher
init|=
operator|new
name|HdfsDataSegmentPusher
argument_list|(
name|pusherConfig
argument_list|,
name|config
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|publishSegmentsAndCommit
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|,
name|DATA_SOURCE_NAME
argument_list|,
name|existingSegments
argument_list|,
literal|true
argument_list|,
name|config
argument_list|,
name|dataSegmentPusher
argument_list|)
expr_stmt|;
name|DataSegment
name|dataSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment
argument_list|,
name|descriptorPath
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DataSegment
argument_list|>
name|dataSegmentList
init|=
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dataSegmentList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DataSegment
name|persistedSegment
init|=
name|dataSegmentList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Insert into appends to old version
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"v0"
argument_list|,
name|persistedSegment
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|persistedSegment
operator|.
name|getShardSpec
argument_list|()
operator|instanceof
name|LinearShardSpec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|persistedSegment
operator|.
name|getShardSpec
argument_list|()
operator|.
name|getPartitionNum
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|expectedFinalHadoopPath
init|=
operator|new
name|Path
argument_list|(
name|dataSegmentPusher
operator|.
name|getPathForHadoop
argument_list|()
argument_list|,
name|dataSegmentPusher
operator|.
name|makeIndexPathName
argument_list|(
name|persistedSegment
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"type"
argument_list|,
literal|"hdfs"
argument_list|,
literal|"path"
argument_list|,
name|expectedFinalHadoopPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|persistedSegment
operator|.
name|getLoadSpec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dummySegmentData"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|expectedFinalHadoopPath
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertIntoAppendOneMorePartition
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|DerbyConnectorTestUtility
name|connector
init|=
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
decl_stmt|;
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
init|=
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|HdfsDataSegmentPusherConfig
name|pusherConfig
init|=
operator|new
name|HdfsDataSegmentPusherConfig
argument_list|()
decl_stmt|;
name|pusherConfig
operator|.
name|setStorageDirectory
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_SEGMENT_DIRECTORY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DataSegmentPusher
name|dataSegmentPusher
init|=
operator|new
name|HdfsDataSegmentPusher
argument_list|(
name|pusherConfig
argument_list|,
name|config
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataSegment
argument_list|>
name|existingSegments
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|publishSegmentsAndCommit
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|,
name|DATA_SOURCE_NAME
argument_list|,
name|existingSegments
argument_list|,
literal|true
argument_list|,
name|config
argument_list|,
name|dataSegmentPusher
argument_list|)
expr_stmt|;
name|DataSegment
name|dataSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment
argument_list|,
name|descriptorPath
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DataSegment
argument_list|>
name|dataSegmentList
init|=
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dataSegmentList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DataSegment
name|persistedSegment
init|=
name|dataSegmentList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"v0"
argument_list|,
name|persistedSegment
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|persistedSegment
operator|.
name|getShardSpec
argument_list|()
operator|instanceof
name|LinearShardSpec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|persistedSegment
operator|.
name|getShardSpec
argument_list|()
operator|.
name|getPartitionNum
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|expectedFinalHadoopPath
init|=
operator|new
name|Path
argument_list|(
name|dataSegmentPusher
operator|.
name|getPathForHadoop
argument_list|()
argument_list|,
name|dataSegmentPusher
operator|.
name|makeIndexPathName
argument_list|(
name|persistedSegment
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"type"
argument_list|,
literal|"hdfs"
argument_list|,
literal|"path"
argument_list|,
name|expectedFinalHadoopPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|persistedSegment
operator|.
name|getLoadSpec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dummySegmentData"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|expectedFinalHadoopPath
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitInsertIntoWhenDestinationSegmentFileExist
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|DerbyConnectorTestUtility
name|connector
init|=
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
decl_stmt|;
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
init|=
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataSegment
argument_list|>
name|existingSegments
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index_old.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HdfsDataSegmentPusherConfig
name|pusherConfig
init|=
operator|new
name|HdfsDataSegmentPusherConfig
argument_list|()
decl_stmt|;
name|pusherConfig
operator|.
name|setStorageDirectory
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_SEGMENT_DIRECTORY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DataSegmentPusher
name|dataSegmentPusher
init|=
operator|new
name|HdfsDataSegmentPusher
argument_list|(
name|pusherConfig
argument_list|,
name|config
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|publishSegmentsAndCommit
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|,
name|DATA_SOURCE_NAME
argument_list|,
name|existingSegments
argument_list|,
literal|true
argument_list|,
name|config
argument_list|,
name|dataSegmentPusher
argument_list|)
expr_stmt|;
name|DataSegment
name|dataSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|dataSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|dataSegment
argument_list|,
name|descriptorPath
argument_list|)
expr_stmt|;
comment|// Create segment file at the destination location with LinearShardSpec(2)
name|DataSegment
name|segment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index_conflict.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|segmentPath
init|=
operator|new
name|Path
argument_list|(
name|dataSegmentPusher
operator|.
name|getPathForHadoop
argument_list|()
argument_list|,
name|dataSegmentPusher
operator|.
name|makeIndexPathName
argument_list|(
name|segment
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
operator|new
name|File
argument_list|(
name|segmentPath
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DATA_SOURCE_NAME
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DataSegment
argument_list|>
name|dataSegmentList
init|=
name|getUsedSegmentsList
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dataSegmentList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DataSegment
name|persistedSegment
init|=
name|dataSegmentList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Insert into appends to old version
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"v0"
argument_list|,
name|persistedSegment
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|persistedSegment
operator|.
name|getShardSpec
argument_list|()
operator|instanceof
name|LinearShardSpec
argument_list|)
expr_stmt|;
comment|// insert into should skip and increment partition number to 3
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|persistedSegment
operator|.
name|getShardSpec
argument_list|()
operator|.
name|getPartitionNum
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|expectedFinalHadoopPath
init|=
operator|new
name|Path
argument_list|(
name|dataSegmentPusher
operator|.
name|getPathForHadoop
argument_list|()
argument_list|,
name|dataSegmentPusher
operator|.
name|makeIndexPathName
argument_list|(
name|persistedSegment
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"type"
argument_list|,
literal|"hdfs"
argument_list|,
literal|"path"
argument_list|,
name|expectedFinalHadoopPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|persistedSegment
operator|.
name|getLoadSpec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dummySegmentData"
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|expectedFinalHadoopPath
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCommitInsertIntoWithConflictingIntervalSegment
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|DerbyConnectorTestUtility
name|connector
init|=
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
decl_stmt|;
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
init|=
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataSegment
argument_list|>
name|existingSegments
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index_old_1.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index_old_2.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|150
argument_list|,
literal|200
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index_old_3.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HdfsDataSegmentPusherConfig
name|pusherConfig
init|=
operator|new
name|HdfsDataSegmentPusherConfig
argument_list|()
decl_stmt|;
name|pusherConfig
operator|.
name|setStorageDirectory
argument_list|(
name|taskDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DataSegmentPusher
name|dataSegmentPusher
init|=
operator|new
name|HdfsDataSegmentPusher
argument_list|(
name|pusherConfig
argument_list|,
name|config
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|publishSegmentsAndCommit
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|,
name|DATA_SOURCE_NAME
argument_list|,
name|existingSegments
argument_list|,
literal|true
argument_list|,
name|config
argument_list|,
name|dataSegmentPusher
argument_list|)
expr_stmt|;
comment|// Try appending segment with conflicting interval
name|DataSegment
name|conflictingSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|conflictingSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|conflictingSegment
argument_list|,
name|descriptorPath
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCommitInsertIntoWithNonExtendableSegment
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|DerbyConnectorTestUtility
name|connector
init|=
name|derbyConnectorRule
operator|.
name|getConnector
argument_list|()
decl_stmt|;
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
init|=
name|derbyConnectorRule
operator|.
name|metadataTablesConfigSupplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|druidStorageHandler
operator|.
name|preCreateTable
argument_list|(
name|tableMock
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|taskDirPath
init|=
operator|new
name|Path
argument_list|(
name|tableWorkingPath
argument_list|,
name|druidStorageHandler
operator|.
name|makeStagingName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataSegment
argument_list|>
name|existingSegments
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index_old_1.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|NoneShardSpec
argument_list|()
argument_list|)
argument_list|,
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index_old_2.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|200
argument_list|,
literal|250
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
literal|"index_old_3.zip"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|250
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|"v0"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HdfsDataSegmentPusherConfig
name|pusherConfig
init|=
operator|new
name|HdfsDataSegmentPusherConfig
argument_list|()
decl_stmt|;
name|pusherConfig
operator|.
name|setStorageDirectory
argument_list|(
name|taskDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DataSegmentPusher
name|dataSegmentPusher
init|=
operator|new
name|HdfsDataSegmentPusher
argument_list|(
name|pusherConfig
argument_list|,
name|config
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|publishSegmentsAndCommit
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|,
name|DATA_SOURCE_NAME
argument_list|,
name|existingSegments
argument_list|,
literal|true
argument_list|,
name|config
argument_list|,
name|dataSegmentPusher
argument_list|)
expr_stmt|;
comment|// Try appending to non extendable shard spec
name|DataSegment
name|conflictingSegment
init|=
name|createSegment
argument_list|(
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Interval
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|descriptorPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|conflictingSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|taskDirPath
argument_list|,
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|localFileSystem
argument_list|,
name|conflictingSegment
argument_list|,
name|descriptorPath
argument_list|)
expr_stmt|;
name|druidStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|tableMock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

