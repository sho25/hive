begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test Class for input splits.  */
end_comment

begin_class
specifier|public
class|class
name|TestHiveDruidSplit
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSerDeser
parameter_list|()
throws|throws
name|IOException
block|{
name|HiveDruidSplit
name|hiveDruidSplit
init|=
operator|new
name|HiveDruidSplit
argument_list|(
literal|"query string"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test-path"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"host:8080"
block|,
literal|"host2:8090"
block|}
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|dataOutput
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteArrayOutputStream
argument_list|)
decl_stmt|;
name|hiveDruidSplit
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|byteArrayInputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|byteArrayOutputStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|HiveDruidSplit
name|actualHiveDruidSplit
init|=
operator|new
name|HiveDruidSplit
argument_list|()
decl_stmt|;
name|actualHiveDruidSplit
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|byteArrayInputStream
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualHiveDruidSplit
operator|.
name|getDruidQuery
argument_list|()
argument_list|,
literal|"query string"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|actualHiveDruidSplit
operator|.
name|getLocations
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"host:8080"
block|,
literal|"host2:8090"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

