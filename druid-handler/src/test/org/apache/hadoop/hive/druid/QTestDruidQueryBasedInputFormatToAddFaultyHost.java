begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
operator|.
name|DruidQueryBasedInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
operator|.
name|HiveDruidSplit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This input format adds a faulty host as first input split location.  * Tests should be able to query results successfully by trying next split locations.  */
end_comment

begin_class
specifier|public
class|class
name|QTestDruidQueryBasedInputFormatToAddFaultyHost
extends|extends
name|DruidQueryBasedInputFormat
block|{
annotation|@
name|Override
specifier|protected
name|HiveDruidSplit
index|[]
name|getInputSplits
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveDruidSplit
index|[]
name|inputSplits
init|=
name|super
operator|.
name|getInputSplits
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveDruidSplit
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HiveDruidSplit
name|split
range|:
name|inputSplits
control|)
block|{
name|String
index|[]
name|locations
init|=
name|split
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|locationsWithFaultyHost
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|locations
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// A non-queryable host location.
name|locationsWithFaultyHost
operator|.
name|add
argument_list|(
literal|"localhost:8081"
argument_list|)
expr_stmt|;
name|locationsWithFaultyHost
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|locations
argument_list|)
argument_list|)
expr_stmt|;
name|HiveDruidSplit
name|hiveDruidSplit
init|=
operator|new
name|HiveDruidSplit
argument_list|(
name|split
operator|.
name|getDruidQuery
argument_list|()
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
argument_list|,
name|locationsWithFaultyHost
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|hiveDruidSplit
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|HiveDruidSplit
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

