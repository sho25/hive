begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|Committer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|InputRow
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|MapBasedInputRow
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|common
operator|.
name|DateTimes
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|common
operator|.
name|granularity
operator|.
name|Granularity
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|indexing
operator|.
name|DataSchema
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|indexing
operator|.
name|RealtimeTuningConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|loading
operator|.
name|DataSegmentPusher
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|realtime
operator|.
name|FireDepartmentMetrics
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|realtime
operator|.
name|appenderator
operator|.
name|Appenderator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|realtime
operator|.
name|appenderator
operator|.
name|Appenderators
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|realtime
operator|.
name|appenderator
operator|.
name|SegmentIdentifier
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|realtime
operator|.
name|appenderator
operator|.
name|SegmentNotWritableException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|realtime
operator|.
name|appenderator
operator|.
name|SegmentsAndMetadata
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|realtime
operator|.
name|plumber
operator|.
name|Committers
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|DataSegment
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|partition
operator|.
name|LinearShardSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|DruidStorageHandlerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|serde
operator|.
name|DruidWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_class
specifier|public
class|class
name|DruidRecordWriter
implements|implements
name|RecordWriter
argument_list|<
name|NullWritable
argument_list|,
name|DruidWritable
argument_list|>
implements|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DruidRecordWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DataSchema
name|dataSchema
decl_stmt|;
specifier|private
specifier|final
name|Appenderator
name|appenderator
decl_stmt|;
specifier|private
specifier|final
name|RealtimeTuningConfig
name|tuningConfig
decl_stmt|;
specifier|private
specifier|final
name|Path
name|segmentsDescriptorDir
decl_stmt|;
specifier|private
name|SegmentIdentifier
name|currentOpenSegment
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxPartitionSize
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Committer
argument_list|>
name|committerSupplier
decl_stmt|;
specifier|private
specifier|final
name|Granularity
name|segmentGranularity
decl_stmt|;
specifier|public
name|DruidRecordWriter
parameter_list|(
name|DataSchema
name|dataSchema
parameter_list|,
name|RealtimeTuningConfig
name|realtimeTuningConfig
parameter_list|,
name|DataSegmentPusher
name|dataSegmentPusher
parameter_list|,
name|int
name|maxPartitionSize
parameter_list|,
specifier|final
name|Path
name|segmentsDescriptorsDir
parameter_list|,
specifier|final
name|FileSystem
name|fileSystem
parameter_list|)
block|{
name|File
name|basePersistDir
init|=
operator|new
name|File
argument_list|(
name|realtimeTuningConfig
operator|.
name|getBasePersistDirectory
argument_list|()
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|tuningConfig
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|realtimeTuningConfig
operator|.
name|withBasePersistDirectory
argument_list|(
name|basePersistDir
argument_list|)
argument_list|,
literal|"realtimeTuningConfig is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSchema
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dataSchema
argument_list|,
literal|"data schema is null"
argument_list|)
expr_stmt|;
name|appenderator
operator|=
name|Appenderators
operator|.
name|createOffline
argument_list|(
name|this
operator|.
name|dataSchema
argument_list|,
name|tuningConfig
argument_list|,
operator|new
name|FireDepartmentMetrics
argument_list|()
argument_list|,
name|dataSegmentPusher
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_IO
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_MERGER_V9
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxPartitionSize
operator|=
name|maxPartitionSize
expr_stmt|;
name|appenderator
operator|.
name|startJob
argument_list|()
expr_stmt|;
name|this
operator|.
name|segmentsDescriptorDir
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|segmentsDescriptorsDir
argument_list|,
literal|"segmentsDescriptorsDir is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fileSystem
argument_list|,
literal|"file system is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|segmentGranularity
operator|=
name|this
operator|.
name|dataSchema
operator|.
name|getGranularitySpec
argument_list|()
operator|.
name|getSegmentGranularity
argument_list|()
expr_stmt|;
name|committerSupplier
operator|=
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|Committers
operator|.
name|nil
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This function computes the segment identifier and push the current open segment    * The push will occur if max size is reached or the event belongs to the next interval.    * Note that this function assumes that timestamps are pseudo sorted.    * This function will close and move to the next segment granularity as soon as    * an event from the next interval appears. The sorting is done by the previous stage.    *    * @return segmentIdentifier with of the truncatedTime and maybe push the current open segment.    */
specifier|private
name|SegmentIdentifier
name|getSegmentIdentifierAndMaybePush
parameter_list|(
name|long
name|truncatedTime
parameter_list|)
block|{
name|DateTime
name|truncatedDateTime
init|=
name|segmentGranularity
operator|.
name|bucketStart
argument_list|(
name|DateTimes
operator|.
name|utc
argument_list|(
name|truncatedTime
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Interval
name|interval
init|=
operator|new
name|Interval
argument_list|(
name|truncatedDateTime
argument_list|,
name|segmentGranularity
operator|.
name|increment
argument_list|(
name|truncatedDateTime
argument_list|)
argument_list|)
decl_stmt|;
name|SegmentIdentifier
name|retVal
decl_stmt|;
if|if
condition|(
name|currentOpenSegment
operator|==
literal|null
condition|)
block|{
name|currentOpenSegment
operator|=
operator|new
name|SegmentIdentifier
argument_list|(
name|dataSchema
operator|.
name|getDataSource
argument_list|()
argument_list|,
name|interval
argument_list|,
name|tuningConfig
operator|.
name|getVersioningPolicy
argument_list|()
operator|.
name|getVersion
argument_list|(
name|interval
argument_list|)
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentOpenSegment
return|;
block|}
elseif|else
if|if
condition|(
name|currentOpenSegment
operator|.
name|getInterval
argument_list|()
operator|.
name|equals
argument_list|(
name|interval
argument_list|)
condition|)
block|{
name|retVal
operator|=
name|currentOpenSegment
expr_stmt|;
name|int
name|rowCount
init|=
name|appenderator
operator|.
name|getRowCount
argument_list|(
name|retVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowCount
operator|<
name|maxPartitionSize
condition|)
block|{
return|return
name|retVal
return|;
block|}
else|else
block|{
name|retVal
operator|=
operator|new
name|SegmentIdentifier
argument_list|(
name|dataSchema
operator|.
name|getDataSource
argument_list|()
argument_list|,
name|interval
argument_list|,
name|tuningConfig
operator|.
name|getVersioningPolicy
argument_list|()
operator|.
name|getVersion
argument_list|(
name|interval
argument_list|)
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
name|currentOpenSegment
operator|.
name|getShardSpec
argument_list|()
operator|.
name|getPartitionNum
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|pushSegments
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|currentOpenSegment
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating new partition for segment {}, partition num {}"
argument_list|,
name|retVal
operator|.
name|getIdentifierAsString
argument_list|()
argument_list|,
name|retVal
operator|.
name|getShardSpec
argument_list|()
operator|.
name|getPartitionNum
argument_list|()
argument_list|)
expr_stmt|;
name|currentOpenSegment
operator|=
name|retVal
expr_stmt|;
return|return
name|retVal
return|;
block|}
block|}
else|else
block|{
name|retVal
operator|=
operator|new
name|SegmentIdentifier
argument_list|(
name|dataSchema
operator|.
name|getDataSource
argument_list|()
argument_list|,
name|interval
argument_list|,
name|tuningConfig
operator|.
name|getVersioningPolicy
argument_list|()
operator|.
name|getVersion
argument_list|(
name|interval
argument_list|)
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|pushSegments
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|currentOpenSegment
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating segment {}"
argument_list|,
name|retVal
operator|.
name|getIdentifierAsString
argument_list|()
argument_list|)
expr_stmt|;
name|currentOpenSegment
operator|=
name|retVal
expr_stmt|;
return|return
name|retVal
return|;
block|}
block|}
specifier|private
name|void
name|pushSegments
parameter_list|(
name|List
argument_list|<
name|SegmentIdentifier
argument_list|>
name|segmentsToPush
parameter_list|)
block|{
try|try
block|{
name|SegmentsAndMetadata
name|segmentsAndMetadata
init|=
name|appenderator
operator|.
name|push
argument_list|(
name|segmentsToPush
argument_list|,
name|committerSupplier
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|pushedSegmentIdentifierHashSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataSegment
name|pushedSegment
range|:
name|segmentsAndMetadata
operator|.
name|getSegments
argument_list|()
control|)
block|{
name|pushedSegmentIdentifierHashSet
operator|.
name|add
argument_list|(
name|SegmentIdentifier
operator|.
name|fromDataSegment
argument_list|(
name|pushedSegment
argument_list|)
operator|.
name|getIdentifierAsString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|segmentDescriptorOutputPath
init|=
name|DruidStorageHandlerUtils
operator|.
name|makeSegmentDescriptorOutputPath
argument_list|(
name|pushedSegment
argument_list|,
name|segmentsDescriptorDir
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|writeSegmentDescriptor
argument_list|(
name|fileSystem
argument_list|,
name|pushedSegment
argument_list|,
name|segmentDescriptorOutputPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Pushed the segment [%s] and persisted the descriptor located at [%s]"
argument_list|,
name|pushedSegment
argument_list|,
name|segmentDescriptorOutputPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|toPushSegmentsHashSet
init|=
operator|new
name|HashSet
argument_list|(
name|FluentIterable
operator|.
name|from
argument_list|(
name|segmentsToPush
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|SegmentIdentifier
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|SegmentIdentifier
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getIdentifierAsString
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pushedSegmentIdentifierHashSet
operator|.
name|equals
argument_list|(
name|toPushSegmentsHashSet
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"was asked to publish [%s] but was able to publish only [%s]"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|toPushSegmentsHashSet
argument_list|)
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|pushedSegmentIdentifierHashSet
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|SegmentIdentifier
name|dataSegmentId
range|:
name|segmentsToPush
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Dropping segment {}"
argument_list|,
name|dataSegmentId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|appenderator
operator|.
name|drop
argument_list|(
name|dataSegmentId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Published [%,d] segments."
argument_list|,
name|segmentsToPush
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"got interrupted, failed to push  [%,d] segments."
argument_list|,
name|segmentsToPush
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to push  [%,d] segments."
argument_list|,
name|segmentsToPush
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|w
parameter_list|)
throws|throws
name|IOException
block|{
name|DruidWritable
name|record
init|=
operator|(
name|DruidWritable
operator|)
name|w
decl_stmt|;
specifier|final
name|long
name|timestamp
init|=
operator|(
name|long
operator|)
name|record
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|)
decl_stmt|;
specifier|final
name|int
name|partitionNumber
init|=
name|Math
operator|.
name|toIntExact
argument_list|(
operator|(
name|long
operator|)
name|record
operator|.
name|getValue
argument_list|()
operator|.
name|getOrDefault
argument_list|(
name|Constants
operator|.
name|DRUID_SHARD_KEY_COL_NAME
argument_list|,
operator|-
literal|1l
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|InputRow
name|inputRow
init|=
operator|new
name|MapBasedInputRow
argument_list|(
name|timestamp
argument_list|,
name|dataSchema
operator|.
name|getParser
argument_list|()
operator|.
name|getParseSpec
argument_list|()
operator|.
name|getDimensionsSpec
argument_list|()
operator|.
name|getDimensionNames
argument_list|()
argument_list|,
name|record
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|partitionNumber
operator|!=
operator|-
literal|1
operator|&&
name|maxPartitionSize
operator|==
operator|-
literal|1
condition|)
block|{
comment|/*         Case data is sorted by time and an extra hashing dimension see DRUID_SHARD_KEY_COL_NAME         Thus use DRUID_SHARD_KEY_COL_NAME as segment partition in addition to time dimension         Data with the same DRUID_SHARD_KEY_COL_NAME and Time interval will end in the same segment         */
name|DateTime
name|truncatedDateTime
init|=
name|segmentGranularity
operator|.
name|bucketStart
argument_list|(
name|DateTimes
operator|.
name|utc
argument_list|(
name|timestamp
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Interval
name|interval
init|=
operator|new
name|Interval
argument_list|(
name|truncatedDateTime
argument_list|,
name|segmentGranularity
operator|.
name|increment
argument_list|(
name|truncatedDateTime
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentOpenSegment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentOpenSegment
operator|.
name|getShardSpec
argument_list|()
operator|.
name|getPartitionNum
argument_list|()
operator|!=
name|partitionNumber
operator|||
operator|!
name|currentOpenSegment
operator|.
name|getInterval
argument_list|()
operator|.
name|equals
argument_list|(
name|interval
argument_list|)
condition|)
block|{
name|pushSegments
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|currentOpenSegment
argument_list|)
argument_list|)
expr_stmt|;
name|currentOpenSegment
operator|=
operator|new
name|SegmentIdentifier
argument_list|(
name|dataSchema
operator|.
name|getDataSource
argument_list|()
argument_list|,
name|interval
argument_list|,
name|tuningConfig
operator|.
name|getVersioningPolicy
argument_list|()
operator|.
name|getVersion
argument_list|(
name|interval
argument_list|)
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
name|partitionNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentOpenSegment
operator|==
literal|null
condition|)
block|{
name|currentOpenSegment
operator|=
operator|new
name|SegmentIdentifier
argument_list|(
name|dataSchema
operator|.
name|getDataSource
argument_list|()
argument_list|,
name|interval
argument_list|,
name|tuningConfig
operator|.
name|getVersioningPolicy
argument_list|()
operator|.
name|getVersion
argument_list|(
name|interval
argument_list|)
argument_list|,
operator|new
name|LinearShardSpec
argument_list|(
name|partitionNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|appenderator
operator|.
name|add
argument_list|(
name|currentOpenSegment
argument_list|,
name|inputRow
argument_list|,
name|committerSupplier
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partitionNumber
operator|==
operator|-
literal|1
operator|&&
name|maxPartitionSize
operator|!=
operator|-
literal|1
condition|)
block|{
comment|/*Case we are partitioning the segments based on time and max row per segment maxPartitionSize*/
name|appenderator
operator|.
name|add
argument_list|(
name|getSegmentIdentifierAndMaybePush
argument_list|(
name|timestamp
argument_list|)
argument_list|,
name|inputRow
argument_list|,
name|committerSupplier
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"partitionNumber and  maxPartitionSize should be mutually exclusive got partitionNum [%s] and maxPartitionSize [%s]"
argument_list|,
name|partitionNumber
argument_list|,
name|maxPartitionSize
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotWritableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|abort
operator|==
literal|false
condition|)
block|{
specifier|final
name|List
argument_list|<
name|SegmentIdentifier
argument_list|>
name|segmentsToPush
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|segmentsToPush
operator|.
name|addAll
argument_list|(
name|appenderator
operator|.
name|getSegments
argument_list|()
argument_list|)
expr_stmt|;
name|pushSegments
argument_list|(
name|segmentsToPush
argument_list|)
expr_stmt|;
block|}
name|appenderator
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tuningConfig
operator|.
name|getBasePersistDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error cleaning of base persist directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|appenderator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|DruidWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

