begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|Oid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|CookieStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpCookie
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * Utils class for Druid Kerberos stuff.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DruidKerberosUtil
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DruidKerberosUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ReentrantLock
name|KERBEROS_LOCK
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|DruidKerberosUtil
parameter_list|()
block|{   }
comment|/**    * This method always needs to be called within a doAs block so that the client's TGT credentials    * can be read from the Subject.    *    * @return Kerberos Challenge String.    *    * @throws AuthenticationException on authentication errors.    */
specifier|static
name|String
name|kerberosChallenge
parameter_list|(
name|String
name|server
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|KERBEROS_LOCK
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// This Oid for Kerberos GSS-API mechanism.
name|Oid
name|mechOid
init|=
name|KerberosUtil
operator|.
name|getOidInstance
argument_list|(
literal|"GSS_KRB5_MECH_OID"
argument_list|)
decl_stmt|;
name|GSSManager
name|manager
init|=
name|GSSManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// GSS name for server
name|GSSName
name|serverName
init|=
name|manager
operator|.
name|createName
argument_list|(
literal|"HTTP@"
operator|+
name|server
argument_list|,
name|GSSName
operator|.
name|NT_HOSTBASED_SERVICE
argument_list|)
decl_stmt|;
comment|// Create a GSSContext for authentication with the service.
comment|// We're passing client credentials as null since we want them to be read from the Subject.
name|GSSContext
name|gssContext
init|=
name|manager
operator|.
name|createContext
argument_list|(
name|serverName
operator|.
name|canonicalize
argument_list|(
name|mechOid
argument_list|)
argument_list|,
name|mechOid
argument_list|,
literal|null
argument_list|,
name|GSSContext
operator|.
name|DEFAULT_LIFETIME
argument_list|)
decl_stmt|;
name|gssContext
operator|.
name|requestMutualAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|gssContext
operator|.
name|requestCredDeleg
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Establish context
name|byte
index|[]
name|inToken
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|outToken
init|=
name|gssContext
operator|.
name|initSecContext
argument_list|(
name|inToken
argument_list|,
literal|0
argument_list|,
name|inToken
operator|.
name|length
argument_list|)
decl_stmt|;
name|gssContext
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// Base64 encoded and stringified token for server
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got valid challenge for host {}"
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
return|return
name|Base64
operator|.
name|getEncoder
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|outToken
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|GSSException
decl||
name|IllegalAccessException
decl||
name|NoSuchFieldException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|KERBEROS_LOCK
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|HttpCookie
name|getAuthCookie
parameter_list|(
name|CookieStore
name|cookieStore
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|cookieStore
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|isSSL
init|=
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"https"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HttpCookie
argument_list|>
name|cookies
init|=
name|cookieStore
operator|.
name|getCookies
argument_list|()
decl_stmt|;
for|for
control|(
name|HttpCookie
name|c
range|:
name|cookies
control|)
block|{
comment|// If this is a secured cookie and the current connection is non-secured,
comment|// then, skip this cookie. We need to skip this cookie because, the cookie
comment|// replay will not be transmitted to the server.
if|if
condition|(
name|c
operator|.
name|getSecure
argument_list|()
operator|&&
operator|!
name|isSSL
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|void
name|removeAuthCookie
parameter_list|(
name|CookieStore
name|cookieStore
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
name|HttpCookie
name|authCookie
init|=
name|getAuthCookie
argument_list|(
name|cookieStore
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|authCookie
operator|!=
literal|null
condition|)
block|{
name|cookieStore
operator|.
name|remove
argument_list|(
name|uri
argument_list|,
name|authCookie
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|boolean
name|needToSendCredentials
parameter_list|(
name|CookieStore
name|cookieStore
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
return|return
name|getAuthCookie
argument_list|(
name|cookieStore
argument_list|,
name|uri
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
end_class

end_unit

