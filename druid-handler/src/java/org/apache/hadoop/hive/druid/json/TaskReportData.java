begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|json
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * This class is copied from druid source code  * in order to avoid adding additional dependencies on druid-indexing-service.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
class|class
name|TaskReportData
block|{
comment|/**    * Task type used by serializer but does not have any functionality as far i can tell.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
enum|enum
name|TaskType
block|{
name|ACTIVE
block|,
name|PUBLISHING
block|,
name|UNKNOWN
block|}
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|startingOffsets
decl_stmt|;
specifier|private
specifier|final
name|DateTime
name|startTime
decl_stmt|;
specifier|private
specifier|final
name|Long
name|remainingSeconds
decl_stmt|;
specifier|private
specifier|final
name|TaskType
name|type
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|currentOffsets
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|lag
decl_stmt|;
specifier|public
name|TaskReportData
parameter_list|(
name|String
name|id
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|startingOffsets
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|currentOffsets
parameter_list|,
name|DateTime
name|startTime
parameter_list|,
name|Long
name|remainingSeconds
parameter_list|,
name|TaskType
name|type
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|lag
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|startingOffsets
operator|=
name|startingOffsets
expr_stmt|;
name|this
operator|.
name|currentOffsets
operator|=
name|currentOffsets
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|remainingSeconds
operator|=
name|remainingSeconds
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|lag
operator|=
name|lag
expr_stmt|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|JsonProperty
annotation|@
name|JsonInclude
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|getStartingOffsets
parameter_list|()
block|{
return|return
name|startingOffsets
return|;
block|}
annotation|@
name|JsonProperty
annotation|@
name|JsonInclude
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|getCurrentOffsets
parameter_list|()
block|{
return|return
name|currentOffsets
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|DateTime
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Long
name|getRemainingSeconds
parameter_list|()
block|{
return|return
name|remainingSeconds
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|TaskType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|JsonProperty
annotation|@
name|JsonInclude
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|getLag
parameter_list|()
block|{
return|return
name|lag
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
literal|"id='"
operator|+
name|id
operator|+
literal|'\''
operator|+
operator|(
name|startingOffsets
operator|!=
literal|null
condition|?
literal|", startingOffsets="
operator|+
name|startingOffsets
else|:
literal|""
operator|)
operator|+
operator|(
name|currentOffsets
operator|!=
literal|null
condition|?
literal|", currentOffsets="
operator|+
name|currentOffsets
else|:
literal|""
operator|)
operator|+
literal|", startTime="
operator|+
name|startTime
operator|+
literal|", remainingSeconds="
operator|+
name|remainingSeconds
operator|+
operator|(
name|lag
operator|!=
literal|null
condition|?
literal|", lag="
operator|+
name|lag
else|:
literal|""
operator|)
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

