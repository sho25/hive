begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|AbstractHttpClient
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|response
operator|.
name|HttpResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|CookieManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This is a slightly modified version of kerberos module borrowed from druid project  * Couple of reasons behind the copy/modification instead of mvn dependency.  *  1/ Need to remove the authentication step since it not required  *  2/ To avoid some un-needed transitive dependencies that can clash on the classpath like jetty-XX.  */
end_comment

begin_class
specifier|public
class|class
name|KerberosHttpClient
extends|extends
name|AbstractHttpClient
block|{
specifier|protected
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KerberosHttpClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HttpClient
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|CookieManager
name|cookieManager
decl_stmt|;
specifier|public
name|KerberosHttpClient
parameter_list|(
name|HttpClient
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|cookieManager
operator|=
operator|new
name|CookieManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|Intermediate
parameter_list|,
name|Final
parameter_list|>
name|ListenableFuture
argument_list|<
name|Final
argument_list|>
name|go
parameter_list|(
name|Request
name|request
parameter_list|,
name|HttpResponseHandler
argument_list|<
name|Intermediate
argument_list|,
name|Final
argument_list|>
name|httpResponseHandler
parameter_list|,
name|Duration
name|duration
parameter_list|)
block|{
specifier|final
name|SettableFuture
argument_list|<
name|Final
argument_list|>
name|retVal
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|inner_go
argument_list|(
name|request
argument_list|,
name|httpResponseHandler
argument_list|,
name|duration
argument_list|,
name|retVal
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
specifier|private
parameter_list|<
name|Intermediate
parameter_list|,
name|Final
parameter_list|>
name|void
name|inner_go
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|HttpResponseHandler
argument_list|<
name|Intermediate
argument_list|,
name|Final
argument_list|>
name|httpResponseHandler
parameter_list|,
specifier|final
name|Duration
name|duration
parameter_list|,
specifier|final
name|SettableFuture
argument_list|<
name|Final
argument_list|>
name|future
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|host
init|=
name|request
operator|.
name|getUrl
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|request
operator|.
name|getUrl
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
comment|/* Cookies Manager is used to cache cookie returned by service.        The goal us to avoid doing KDC requests for every request.*/
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cookieMap
init|=
name|cookieManager
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|cookieMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|request
operator|.
name|addHeaderValues
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|should_retry_on_unauthorized_response
decl_stmt|;
if|if
condition|(
name|DruidKerberosUtil
operator|.
name|needToSendCredentials
argument_list|(
name|cookieManager
operator|.
name|getCookieStore
argument_list|()
argument_list|,
name|uri
argument_list|)
condition|)
block|{
comment|// No Cookies for requested URI, authenticate user and add authentication header
name|log
operator|.
name|debug
argument_list|(
literal|"No Auth Cookie found for URI{}. Existing Cookies{} Authenticating... "
argument_list|,
name|uri
argument_list|,
name|cookieManager
operator|.
name|getCookieStore
argument_list|()
operator|.
name|getCookies
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assuming that a valid UGI with kerberos cred is created by HS2 or LLAP
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|currentUser
operator|.
name|checkTGTAndReloginFromKeytab
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"The user credential is {}"
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|String
name|challenge
init|=
name|currentUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|DruidKerberosUtil
operator|.
name|kerberosChallenge
argument_list|(
name|host
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|request
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|AUTHORIZATION
argument_list|,
literal|"Negotiate "
operator|+
name|challenge
argument_list|)
expr_stmt|;
comment|/* no reason to retry if the challenge ticket is not valid. */
name|should_retry_on_unauthorized_response
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|/* In this branch we had already a cookie that did expire         therefore we need to resend a valid Kerberos challenge*/
name|log
operator|.
name|debug
argument_list|(
literal|"Found Auth Cookie found for URI {} cookie {}"
argument_list|,
name|uri
argument_list|,
name|DruidKerberosUtil
operator|.
name|getAuthCookie
argument_list|(
name|cookieManager
operator|.
name|getCookieStore
argument_list|()
argument_list|,
name|uri
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|should_retry_on_unauthorized_response
operator|=
literal|true
expr_stmt|;
block|}
name|ListenableFuture
argument_list|<
name|RetryResponseHolder
argument_list|<
name|Final
argument_list|>
argument_list|>
name|internalFuture
init|=
name|delegate
operator|.
name|go
argument_list|(
name|request
argument_list|,
operator|new
name|RetryIfUnauthorizedResponseHandler
argument_list|<
name|Intermediate
argument_list|,
name|Final
argument_list|>
argument_list|(
operator|new
name|ResponseCookieHandler
argument_list|(
name|request
operator|.
name|getUrl
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|,
name|cookieManager
argument_list|,
name|httpResponseHandler
argument_list|)
argument_list|)
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|RetryResponseHolder
argument_list|<
name|Final
argument_list|>
name|responseHolder
init|=
name|internalFuture
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|should_retry_on_unauthorized_response
operator|&&
name|responseHolder
operator|.
name|shouldRetry
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Preparing for Retry boolean {} and result {}, object{} "
argument_list|,
name|should_retry_on_unauthorized_response
argument_list|,
name|responseHolder
operator|.
name|shouldRetry
argument_list|()
argument_list|,
name|responseHolder
operator|.
name|getObj
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove Auth cookie
name|DruidKerberosUtil
operator|.
name|removeAuthCookie
argument_list|(
name|cookieManager
operator|.
name|getCookieStore
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
comment|// clear existing cookie
name|request
operator|.
name|setHeader
argument_list|(
literal|"Cookie"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|inner_go
argument_list|(
name|request
operator|.
name|copy
argument_list|()
argument_list|,
name|httpResponseHandler
argument_list|,
name|duration
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|set
argument_list|(
name|responseHolder
operator|.
name|getObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

