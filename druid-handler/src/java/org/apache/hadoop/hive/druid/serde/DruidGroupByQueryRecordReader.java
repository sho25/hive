begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|DruidStorageHandlerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|query
operator|.
name|aggregation
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|query
operator|.
name|aggregation
operator|.
name|PostAggregator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|query
operator|.
name|dimension
operator|.
name|DimensionSpec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|query
operator|.
name|groupby
operator|.
name|GroupByQuery
import|;
end_import

begin_comment
comment|/**  * Record reader for results for Druid GroupByQuery.  */
end_comment

begin_class
specifier|public
class|class
name|DruidGroupByQueryRecordReader
extends|extends
name|DruidQueryRecordReader
argument_list|<
name|GroupByQuery
argument_list|,
name|Row
argument_list|>
block|{
specifier|private
name|Row
name|current
decl_stmt|;
specifier|private
name|int
index|[]
name|indexes
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
comment|// Row objects returned by GroupByQuery have different access paths depending on
comment|// whether the result for the metric is a Float or a Long, thus we keep track
comment|// using these converters
specifier|private
name|Extract
index|[]
name|extractors
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|initExtractors
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|GroupByQuery
name|createQuery
parameter_list|(
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
operator|.
name|readValue
argument_list|(
name|content
argument_list|,
name|GroupByQuery
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Row
argument_list|>
name|createResultsList
parameter_list|(
name|InputStream
name|content
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DruidStorageHandlerUtils
operator|.
name|SMILE_MAPPER
operator|.
name|readValue
argument_list|(
name|content
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|List
argument_list|<
name|Row
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
return|;
block|}
specifier|private
name|void
name|initExtractors
parameter_list|()
throws|throws
name|IOException
block|{
name|extractors
operator|=
operator|new
name|Extract
index|[
name|query
operator|.
name|getAggregatorSpecs
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|query
operator|.
name|getPostAggregatorSpecs
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|query
operator|.
name|getAggregatorSpecs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
operator|,
name|counter
operator|++
control|)
block|{
name|AggregatorFactory
name|af
init|=
name|query
operator|.
name|getAggregatorSpecs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|af
operator|.
name|getTypeName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
condition|)
block|{
case|case
name|DruidSerDeUtils
operator|.
name|FLOAT_TYPE
case|:
name|extractors
index|[
name|counter
index|]
operator|=
name|Extract
operator|.
name|FLOAT
expr_stmt|;
break|break;
case|case
name|DruidSerDeUtils
operator|.
name|LONG_TYPE
case|:
name|extractors
index|[
name|counter
index|]
operator|=
name|Extract
operator|.
name|LONG
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Type not supported"
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|query
operator|.
name|getPostAggregatorSpecs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
operator|,
name|counter
operator|++
control|)
block|{
name|extractors
index|[
name|counter
index|]
operator|=
name|Extract
operator|.
name|FLOAT
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
block|{
comment|// Refresh indexes
for|for
control|(
name|int
name|i
init|=
name|indexes
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|indexes
index|[
name|i
index|]
operator|>
literal|0
condition|)
block|{
name|indexes
index|[
name|i
index|]
operator|--
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|indexes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|indexes
index|[
name|j
index|]
operator|=
name|current
operator|.
name|getDimension
argument_list|(
name|query
operator|.
name|getDimensions
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getDimension
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|// Results
if|if
condition|(
name|results
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|results
operator|.
name|next
argument_list|()
expr_stmt|;
name|indexes
operator|=
operator|new
name|int
index|[
name|query
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|query
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DimensionSpec
name|ds
init|=
name|query
operator|.
name|getDimensions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|indexes
index|[
name|i
index|]
operator|=
name|current
operator|.
name|getDimension
argument_list|(
name|ds
operator|.
name|getDimension
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DruidWritable
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Create new value
name|DruidWritable
name|value
init|=
operator|new
name|DruidWritable
argument_list|()
decl_stmt|;
comment|// 1) The timestamp column
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|,
name|current
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2) The dimension columns
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|query
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DimensionSpec
name|ds
init|=
name|query
operator|.
name|getDimensions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dims
init|=
name|current
operator|.
name|getDimension
argument_list|(
name|ds
operator|.
name|getDimension
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|dims
operator|.
name|size
argument_list|()
operator|-
name|indexes
index|[
name|i
index|]
operator|-
literal|1
decl_stmt|;
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|ds
operator|.
name|getOutputName
argument_list|()
argument_list|,
name|dims
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|counter
init|=
literal|0
decl_stmt|;
comment|// 3) The aggregation columns
for|for
control|(
name|AggregatorFactory
name|af
range|:
name|query
operator|.
name|getAggregatorSpecs
argument_list|()
control|)
block|{
switch|switch
condition|(
name|extractors
index|[
name|counter
operator|++
index|]
condition|)
block|{
case|case
name|FLOAT
case|:
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|af
operator|.
name|getName
argument_list|()
argument_list|,
name|current
operator|.
name|getFloatMetric
argument_list|(
name|af
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|af
operator|.
name|getName
argument_list|()
argument_list|,
name|current
operator|.
name|getLongMetric
argument_list|(
name|af
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// 4) The post-aggregation columns
for|for
control|(
name|PostAggregator
name|pa
range|:
name|query
operator|.
name|getPostAggregatorSpecs
argument_list|()
control|)
block|{
assert|assert
name|extractors
index|[
name|counter
operator|++
index|]
operator|==
name|Extract
operator|.
name|FLOAT
assert|;
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|pa
operator|.
name|getName
argument_list|()
argument_list|,
name|current
operator|.
name|getFloatMetric
argument_list|(
name|pa
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|DruidWritable
name|value
parameter_list|)
block|{
if|if
condition|(
name|nextKeyValue
argument_list|()
condition|)
block|{
comment|// Update value
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// 1) The timestamp column
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|,
name|current
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2) The dimension columns
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|query
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DimensionSpec
name|ds
init|=
name|query
operator|.
name|getDimensions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dims
init|=
name|current
operator|.
name|getDimension
argument_list|(
name|ds
operator|.
name|getDimension
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|dims
operator|.
name|size
argument_list|()
operator|-
name|indexes
index|[
name|i
index|]
operator|-
literal|1
decl_stmt|;
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|ds
operator|.
name|getOutputName
argument_list|()
argument_list|,
name|dims
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|counter
init|=
literal|0
decl_stmt|;
comment|// 3) The aggregation columns
for|for
control|(
name|AggregatorFactory
name|af
range|:
name|query
operator|.
name|getAggregatorSpecs
argument_list|()
control|)
block|{
switch|switch
condition|(
name|extractors
index|[
name|counter
operator|++
index|]
condition|)
block|{
case|case
name|FLOAT
case|:
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|af
operator|.
name|getName
argument_list|()
argument_list|,
name|current
operator|.
name|getFloatMetric
argument_list|(
name|af
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|af
operator|.
name|getName
argument_list|()
argument_list|,
name|current
operator|.
name|getLongMetric
argument_list|(
name|af
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// 4) The post-aggregation columns
for|for
control|(
name|PostAggregator
name|pa
range|:
name|query
operator|.
name|getPostAggregatorSpecs
argument_list|()
control|)
block|{
assert|assert
name|extractors
index|[
name|counter
operator|++
index|]
operator|==
name|Extract
operator|.
name|FLOAT
assert|;
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|pa
operator|.
name|getName
argument_list|()
argument_list|,
name|current
operator|.
name|getFloatMetric
argument_list|(
name|pa
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|results
operator|.
name|hasNext
argument_list|()
condition|?
literal|0
else|:
literal|1
return|;
block|}
specifier|private
enum|enum
name|Extract
block|{
name|FLOAT
block|,
name|LONG
block|}
block|}
end_class

end_unit

