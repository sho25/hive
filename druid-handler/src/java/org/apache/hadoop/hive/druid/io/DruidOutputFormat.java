begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|impl
operator|.
name|DimensionSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|impl
operator|.
name|DimensionsSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|impl
operator|.
name|InputRowParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|impl
operator|.
name|MapInputRowParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|impl
operator|.
name|TimeAndDimsParseSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|data
operator|.
name|input
operator|.
name|impl
operator|.
name|TimestampSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|common
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|query
operator|.
name|aggregation
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|segment
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|segment
operator|.
name|indexing
operator|.
name|DataSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|segment
operator|.
name|indexing
operator|.
name|RealtimeTuningConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|segment
operator|.
name|indexing
operator|.
name|granularity
operator|.
name|GranularitySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|druid
operator|.
name|segment
operator|.
name|realtime
operator|.
name|plumber
operator|.
name|CustomVersioningPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|DruidStorageHandlerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|conf
operator|.
name|DruidConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|serde
operator|.
name|DruidWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|DruidStorageHandler
operator|.
name|SEGMENTS_DESCRIPTOR_DIR_NAME
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Druid Output format class used to write data as Native Druid Segment.  */
end_comment

begin_class
specifier|public
class|class
name|DruidOutputFormat
implements|implements
name|HiveOutputFormat
argument_list|<
name|NullWritable
argument_list|,
name|DruidWritable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DruidOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FileSinkOperator
operator|.
name|RecordWriter
name|getHiveRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|Path
name|finalOutPath
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|targetNumShardsPerGranularity
init|=
name|Integer
operator|.
name|parseUnsignedInt
argument_list|(
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|DRUID_TARGET_SHARDS_PER_GRANULARITY
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxPartitionSize
init|=
name|targetNumShardsPerGranularity
operator|>
literal|0
condition|?
operator|-
literal|1
else|:
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|jc
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRUID_MAX_PARTITION_SIZE
argument_list|)
decl_stmt|;
comment|// If datasource is in the table properties, it is an INSERT/INSERT OVERWRITE as the datasource
comment|// name was already persisted. Otherwise, it is a CT/CTAS and we need to get the name from the
comment|// job properties that are set by configureOutputJobProperties in the DruidStorageHandler
specifier|final
name|String
name|dataSource
init|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|DRUID_DATA_SOURCE
argument_list|)
operator|==
literal|null
condition|?
name|jc
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DRUID_DATA_SOURCE
argument_list|)
else|:
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|DRUID_DATA_SOURCE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|segmentDirectory
init|=
name|jc
operator|.
name|get
argument_list|(
name|DruidConstants
operator|.
name|DRUID_SEGMENT_INTERMEDIATE_DIRECTORY
argument_list|)
decl_stmt|;
specifier|final
name|GranularitySpec
name|granularitySpec
init|=
name|DruidStorageHandlerUtils
operator|.
name|getGranularitySpec
argument_list|(
name|jc
argument_list|,
name|tableProperties
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnNameProperty
init|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnTypeProperty
init|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|columnNameProperty
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|columnTypeProperty
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"List of columns names [%s] or columns type [%s] is/are not present"
argument_list|,
name|columnNameProperty
argument_list|,
name|columnTypeProperty
argument_list|)
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|columnNames
operator|.
name|contains
argument_list|(
name|DruidConstants
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Timestamp column (' "
operator|+
name|DruidConstants
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
operator|+
literal|"') not specified in create table; list of columns is : "
operator|+
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|List
argument_list|<
name|DimensionSchema
argument_list|>
argument_list|,
name|AggregatorFactory
index|[]
argument_list|>
name|dimensionsAndAggregates
init|=
name|DruidStorageHandlerUtils
operator|.
name|getDimensionsAndAggregates
argument_list|(
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
decl_stmt|;
specifier|final
name|InputRowParser
name|inputRowParser
init|=
operator|new
name|MapInputRowParser
argument_list|(
operator|new
name|TimeAndDimsParseSpec
argument_list|(
operator|new
name|TimestampSpec
argument_list|(
name|DruidConstants
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|,
literal|"auto"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|DimensionsSpec
argument_list|(
name|dimensionsAndAggregates
operator|.
name|lhs
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Constants
operator|.
name|DRUID_TIMESTAMP_GRANULARITY_COL_NAME
argument_list|,
name|Constants
operator|.
name|DRUID_SHARD_KEY_COL_NAME
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inputParser
init|=
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
operator|.
name|convertValue
argument_list|(
name|inputRowParser
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{         }
argument_list|)
decl_stmt|;
specifier|final
name|DataSchema
name|dataSchema
init|=
operator|new
name|DataSchema
argument_list|(
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dataSource
argument_list|,
literal|"Data source name is null"
argument_list|)
argument_list|,
name|inputParser
argument_list|,
name|dimensionsAndAggregates
operator|.
name|rhs
argument_list|,
name|granularitySpec
argument_list|,
literal|null
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
decl_stmt|;
specifier|final
name|String
name|workingPath
init|=
name|jc
operator|.
name|get
argument_list|(
name|DruidConstants
operator|.
name|DRUID_JOB_WORKING_DIRECTORY
argument_list|)
decl_stmt|;
specifier|final
name|String
name|version
init|=
name|jc
operator|.
name|get
argument_list|(
name|DruidConstants
operator|.
name|DRUID_SEGMENT_VERSION
argument_list|)
decl_stmt|;
name|String
name|basePersistDirectory
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|jc
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRUID_BASE_PERSIST_DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|basePersistDirectory
argument_list|)
condition|)
block|{
name|basePersistDirectory
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
expr_stmt|;
block|}
name|Integer
name|maxRowInMemory
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|jc
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRUID_MAX_ROW_IN_MEMORY
argument_list|)
decl_stmt|;
name|IndexSpec
name|indexSpec
init|=
name|DruidStorageHandlerUtils
operator|.
name|getIndexSpec
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|RealtimeTuningConfig
name|realtimeTuningConfig
init|=
operator|new
name|RealtimeTuningConfig
argument_list|(
name|maxRowInMemory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|File
argument_list|(
name|basePersistDirectory
argument_list|,
name|dataSource
argument_list|)
argument_list|,
operator|new
name|CustomVersioningPolicy
argument_list|(
name|version
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|indexSpec
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"running with Data schema [%s] "
argument_list|,
name|dataSchema
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|DruidRecordWriter
argument_list|(
name|dataSchema
argument_list|,
name|realtimeTuningConfig
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|createSegmentPusherForDirectory
argument_list|(
name|segmentDirectory
argument_list|,
name|jc
argument_list|)
argument_list|,
name|maxPartitionSize
argument_list|,
operator|new
name|Path
argument_list|(
name|workingPath
argument_list|,
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
argument_list|,
name|finalOutPath
operator|.
name|getFileSystem
argument_list|(
name|jc
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordWriter
argument_list|<
name|NullWritable
argument_list|,
name|DruidWritable
argument_list|>
name|getRecordWriter
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"please implement me !"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
comment|// NOOP
block|}
block|}
end_class

end_unit

