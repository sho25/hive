begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|query
operator|.
name|scan
operator|.
name|ScanResultValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|DruidStorageHandlerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Record reader for results for Druid ScanQuery.  */
end_comment

begin_class
specifier|public
class|class
name|DruidScanQueryRecordReader
extends|extends
name|DruidQueryRecordReader
argument_list|<
name|ScanResultValue
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|TypeReference
argument_list|<
name|ScanResultValue
argument_list|>
name|TYPE_REFERENCE
init|=
operator|new
name|TypeReference
argument_list|<
name|ScanResultValue
argument_list|>
argument_list|()
block|{   }
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|compactedValues
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|JavaType
name|getResultTypeDef
parameter_list|()
block|{
return|return
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|constructType
argument_list|(
name|TYPE_REFERENCE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|compactedValues
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|queryResultsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ScanResultValue
name|current
init|=
name|queryResultsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|compactedValues
operator|=
operator|(
operator|(
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|current
operator|.
name|getEvents
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
return|return
name|nextKeyValue
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DruidWritable
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|DruidWritable
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DruidWritable
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Create new value
name|DruidWritable
name|value
init|=
operator|new
name|DruidWritable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|value
operator|.
name|setCompactedValue
argument_list|(
name|compactedValues
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|DruidWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nextKeyValue
argument_list|()
condition|)
block|{
comment|// Update value
name|value
operator|.
name|setCompactedValue
argument_list|(
name|compactedValues
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|queryResultsIterator
operator|.
name|hasNext
argument_list|()
operator|||
name|compactedValues
operator|.
name|hasNext
argument_list|()
condition|?
literal|0
else|:
literal|1
return|;
block|}
block|}
end_class

end_unit

