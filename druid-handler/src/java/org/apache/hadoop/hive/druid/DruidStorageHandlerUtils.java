begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|common
operator|.
name|utils
operator|.
name|JodaUtils
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|jackson
operator|.
name|DefaultObjectMapper
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|math
operator|.
name|expr
operator|.
name|ExprMacroTable
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|MetadataStorageTablesConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|SQLMetadataConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|storage
operator|.
name|mysql
operator|.
name|MySQLConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|query
operator|.
name|BaseQuery
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|query
operator|.
name|select
operator|.
name|SelectQueryConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|IndexIO
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|IndexMergerV9
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|column
operator|.
name|ColumnConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|loading
operator|.
name|DataSegmentPusher
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|realtime
operator|.
name|appenderator
operator|.
name|SegmentIdentifier
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|storage
operator|.
name|hdfs
operator|.
name|HdfsDataSegmentPusher
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|storage
operator|.
name|hdfs
operator|.
name|HdfsDataSegmentPusherConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|DataSegment
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|TimelineObjectHolder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|VersionedIntervalTimeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|partition
operator|.
name|LinearShardSpec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|partition
operator|.
name|NoneShardSpec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|partition
operator|.
name|NumberedShardSpec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|partition
operator|.
name|PartitionChunk
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|partition
operator|.
name|ShardSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|serde
operator|.
name|HiveDruidSerializationModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|InjectableValues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|jsontype
operator|.
name|NamedType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|dataformat
operator|.
name|smile
operator|.
name|SmileFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Interner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Interners
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CharStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|common
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|emitter
operator|.
name|EmittingLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|emitter
operator|.
name|core
operator|.
name|NoopEmitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|emitter
operator|.
name|service
operator|.
name|ServiceEmitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|http
operator|.
name|client
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|http
operator|.
name|client
operator|.
name|response
operator|.
name|InputStreamResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|chrono
operator|.
name|ISOChronology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|FoldController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|Folder3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|Handle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|PreparedBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|ResultIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|StatementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|TransactionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|TransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|exceptions
operator|.
name|CallbackFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|tweak
operator|.
name|HandleCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skife
operator|.
name|jdbi
operator|.
name|v2
operator|.
name|util
operator|.
name|ByteArrayMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Utils class for Druid storage handler.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DruidStorageHandlerUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RETRIES
init|=
literal|8
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SECONDS_BETWEEN_RETRIES
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FS_BUFFER_SIZE
init|=
literal|1
operator|<<
literal|18
decl_stmt|;
comment|// 256KB
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_STREAMING_RESULT_SIZE
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SMILE_CONTENT_TYPE
init|=
literal|"application/x-jackson-smile"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMESTAMP_COLUMN
init|=
literal|"__time"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_ZIP
init|=
literal|"index.zip"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTOR_JSON
init|=
literal|"descriptor.json"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Interval
name|DEFAULT_INTERVAL
init|=
operator|new
name|Interval
argument_list|(
operator|new
name|DateTime
argument_list|(
literal|"1900-01-01"
argument_list|,
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"3000-01-01"
argument_list|,
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withChronology
argument_list|(
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Mapper to use to serialize/deserialize Druid objects (JSON)    */
specifier|public
specifier|static
specifier|final
name|ObjectMapper
name|JSON_MAPPER
init|=
operator|new
name|DefaultObjectMapper
argument_list|()
decl_stmt|;
comment|/**    * Mapper to use to serialize/deserialize Druid objects (SMILE)    */
specifier|public
specifier|static
specifier|final
name|ObjectMapper
name|SMILE_MAPPER
init|=
operator|new
name|DefaultObjectMapper
argument_list|(
operator|new
name|SmileFactory
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
comment|// This is needed for serde of PagingSpec as it uses JacksonInject for injecting SelectQueryConfig
name|InjectableValues
operator|.
name|Std
name|injectableValues
init|=
operator|new
name|InjectableValues
operator|.
name|Std
argument_list|()
operator|.
name|addValue
argument_list|(
name|SelectQueryConfig
operator|.
name|class
argument_list|,
operator|new
name|SelectQueryConfig
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|addValue
argument_list|(
name|ExprMacroTable
operator|.
name|class
argument_list|,
name|ExprMacroTable
operator|.
name|nil
argument_list|()
argument_list|)
decl_stmt|;
name|JSON_MAPPER
operator|.
name|setInjectableValues
argument_list|(
name|injectableValues
argument_list|)
expr_stmt|;
name|SMILE_MAPPER
operator|.
name|setInjectableValues
argument_list|(
name|injectableValues
argument_list|)
expr_stmt|;
name|HiveDruidSerializationModule
name|hiveDruidSerializationModule
init|=
operator|new
name|HiveDruidSerializationModule
argument_list|()
decl_stmt|;
name|JSON_MAPPER
operator|.
name|registerModule
argument_list|(
name|hiveDruidSerializationModule
argument_list|)
expr_stmt|;
name|SMILE_MAPPER
operator|.
name|registerModule
argument_list|(
name|hiveDruidSerializationModule
argument_list|)
expr_stmt|;
comment|// Register the shard sub type to be used by the mapper
name|JSON_MAPPER
operator|.
name|registerSubtypes
argument_list|(
operator|new
name|NamedType
argument_list|(
name|LinearShardSpec
operator|.
name|class
argument_list|,
literal|"linear"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the timezone of the object mapper
comment|// THIS IS NOT WORKING workaround is to set it as part of java opts -Duser.timezone="UTC"
name|JSON_MAPPER
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// No operation emitter will be used by some internal druid classes.
name|EmittingLogger
operator|.
name|registerEmitter
argument_list|(
operator|new
name|ServiceEmitter
argument_list|(
literal|"druid-hive-indexer"
argument_list|,
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
operator|new
name|NoopEmitter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Used by druid to perform IO on indexes    */
specifier|public
specifier|static
specifier|final
name|IndexIO
name|INDEX_IO
init|=
operator|new
name|IndexIO
argument_list|(
name|JSON_MAPPER
argument_list|,
operator|new
name|ColumnConfig
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|columnCacheSizeBytes
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|/**    * Used by druid to merge indexes    */
specifier|public
specifier|static
specifier|final
name|IndexMergerV9
name|INDEX_MERGER_V9
init|=
operator|new
name|IndexMergerV9
argument_list|(
name|JSON_MAPPER
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_IO
argument_list|)
decl_stmt|;
comment|/**    * Generic Interner implementation used to read segments object from metadata storage    */
specifier|public
specifier|static
specifier|final
name|Interner
argument_list|<
name|DataSegment
argument_list|>
name|DATA_SEGMENT_INTERNER
init|=
name|Interners
operator|.
name|newWeakInterner
argument_list|()
decl_stmt|;
comment|/**    * Method that creates a request for Druid JSON query (using SMILE).    *    * @param address    * @param query    *    * @return    *    * @throws IOException    */
specifier|public
specifier|static
name|Request
name|createRequest
parameter_list|(
name|String
name|address
parameter_list|,
name|BaseQuery
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Request
argument_list|(
name|HttpMethod
operator|.
name|POST
argument_list|,
operator|new
name|URL
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s/druid/v2/"
argument_list|,
literal|"http://"
operator|+
name|address
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setContent
argument_list|(
name|SMILE_MAPPER
operator|.
name|writeValueAsBytes
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
name|SMILE_CONTENT_TYPE
argument_list|)
return|;
block|}
comment|/**    * Method that submits a request to an Http address and retrieves the result.    * The caller is responsible for closing the stream once it finishes consuming it.    *    * @param client    * @param request    *    * @return    *    * @throws IOException    */
specifier|public
specifier|static
name|InputStream
name|submitRequest
parameter_list|(
name|HttpClient
name|client
parameter_list|,
name|Request
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|client
operator|.
name|go
argument_list|(
name|request
argument_list|,
operator|new
name|InputStreamResponseHandler
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
specifier|public
specifier|static
name|String
name|getURL
parameter_list|(
name|HttpClient
name|client
parameter_list|,
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|DruidStorageHandlerUtils
operator|.
name|submitRequest
argument_list|(
name|client
argument_list|,
operator|new
name|Request
argument_list|(
name|HttpMethod
operator|.
name|GET
argument_list|,
name|url
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
return|return
name|CharStreams
operator|.
name|toString
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
comment|/**    * @param taskDir path to the  directory containing the segments descriptor info    *                the descriptor path will be .../workingPath/task_id/{@link DruidStorageHandler#SEGMENTS_DESCRIPTOR_DIR_NAME}/*.json    * @param conf    hadoop conf to get the file system    *    * @return List of DataSegments    *    * @throws IOException can be for the case we did not produce data.    */
specifier|public
specifier|static
name|List
argument_list|<
name|DataSegment
argument_list|>
name|getPublishedSegments
parameter_list|(
name|Path
name|taskDir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|DataSegment
argument_list|>
name|publishedSegmentsBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|taskDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|taskDir
argument_list|)
control|)
block|{
specifier|final
name|DataSegment
name|segment
init|=
name|JSON_MAPPER
operator|.
name|readValue
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|DataSegment
operator|.
name|class
argument_list|)
decl_stmt|;
name|publishedSegmentsBuilder
operator|.
name|add
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DataSegment
argument_list|>
name|publishedSegments
init|=
name|publishedSegmentsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|publishedSegments
return|;
block|}
comment|/**    * This function will write to filesystem serialized from of segment descriptor    * if an existing file exists it will try to replace it.    *    * @param outputFS       filesystem    * @param segment        DataSegment object    * @param descriptorPath path    *    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeSegmentDescriptor
parameter_list|(
specifier|final
name|FileSystem
name|outputFS
parameter_list|,
specifier|final
name|DataSegment
name|segment
parameter_list|,
specifier|final
name|Path
name|descriptorPath
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DataPusher
name|descriptorPusher
init|=
operator|(
name|DataPusher
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|DataPusher
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
if|if
condition|(
name|outputFS
operator|.
name|exists
argument_list|(
name|descriptorPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|outputFS
operator|.
name|delete
argument_list|(
name|descriptorPath
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to delete descriptor at [%s]"
argument_list|,
name|descriptorPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
try|try
init|(
specifier|final
name|OutputStream
name|descriptorOut
init|=
name|outputFS
operator|.
name|create
argument_list|(
name|descriptorPath
argument_list|,
literal|true
argument_list|,
name|DEFAULT_FS_BUFFER_SIZE
argument_list|)
init|)
block|{
name|JSON_MAPPER
operator|.
name|writeValue
argument_list|(
name|descriptorOut
argument_list|,
name|segment
argument_list|)
expr_stmt|;
name|descriptorOut
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
return|return
operator|-
literal|1
return|;
block|}
argument_list|,
name|RetryPolicies
operator|.
name|exponentialBackoffRetry
argument_list|(
name|NUM_RETRIES
argument_list|,
name|SECONDS_BETWEEN_RETRIES
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|descriptorPusher
operator|.
name|push
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param connector                   SQL metadata connector to the metadata storage    * @param metadataStorageTablesConfig Table config    *    * @return all the active data sources in the metadata storage    */
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getAllDataSourceNames
parameter_list|(
name|SQLMetadataConnector
name|connector
parameter_list|,
specifier|final
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
parameter_list|)
block|{
return|return
name|connector
operator|.
name|getDBI
argument_list|()
operator|.
name|withHandle
argument_list|(
operator|(
name|HandleCallback
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|handle
lambda|->
name|handle
operator|.
name|createQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SELECT DISTINCT(datasource) FROM %s WHERE used = true"
argument_list|,
name|metadataStorageTablesConfig
operator|.
name|getSegmentsTable
argument_list|()
argument_list|)
argument_list|)
operator|.
name|fold
argument_list|(
name|Lists
operator|.
block|<String>newArrayList(
argument_list|)
operator|,
operator|new
name|Folder3
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fold
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|druidDataSources
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stringObjectMap
parameter_list|,
name|FoldController
name|foldController
parameter_list|,
name|StatementContext
name|statementContext
parameter_list|)
throws|throws
name|SQLException
block|{
name|druidDataSources
operator|.
name|add
argument_list|(
name|MapUtils
operator|.
name|getString
argument_list|(
name|stringObjectMap
argument_list|,
literal|"datasource"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|druidDataSources
return|;
block|}
block|}
block|)
block|)
class|;
end_class

begin_comment
unit|}
comment|/**    * @param connector                   SQL connector to metadata    * @param metadataStorageTablesConfig Tables configuration    * @param dataSource                  Name of data source    *    * @return true if the data source was successfully disabled false otherwise    */
end_comment

begin_function
unit|public
specifier|static
name|boolean
name|disableDataSource
parameter_list|(
name|SQLMetadataConnector
name|connector
parameter_list|,
specifier|final
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
parameter_list|,
specifier|final
name|String
name|dataSource
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
operator|.
name|contains
argument_list|(
name|dataSource
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot delete data source {}, does not exist"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|connector
operator|.
name|getDBI
argument_list|()
operator|.
name|withHandle
argument_list|(
operator|(
name|HandleCallback
argument_list|<
name|Void
argument_list|>
operator|)
name|handle
lambda|->
block|{
name|disableDataSourceWithHandle
argument_list|(
name|handle
argument_list|,
name|metadataStorageTablesConfig
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error removing dataSource %s"
argument_list|,
name|dataSource
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|publishSegments
parameter_list|(
specifier|final
name|SQLMetadataConnector
name|connector
parameter_list|,
specifier|final
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
parameter_list|,
specifier|final
name|String
name|dataSource
parameter_list|,
specifier|final
name|List
argument_list|<
name|DataSegment
argument_list|>
name|segments
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|String
name|segmentDirectory
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|DataSegmentPusher
name|dataSegmentPusher
parameter_list|)
throws|throws
name|CallbackFailedException
block|{
name|connector
operator|.
name|getDBI
argument_list|()
operator|.
name|inTransaction
argument_list|(
call|(
name|TransactionCallback
argument_list|<
name|Void
argument_list|>
call|)
argument_list|(
name|handle
argument_list|,
name|transactionStatus
argument_list|)
operator|->
block|{
name|final
name|List
argument_list|<
name|DataSegment
argument_list|>
name|finalSegmentsToPublish
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
block|;
name|VersionedIntervalTimeline
argument_list|<
name|String
argument_list|,
name|DataSegment
argument_list|>
name|timeline
block|;
if|if
condition|(
name|overwrite
condition|)
block|{
name|disableDataSourceWithHandle
argument_list|(
name|handle
argument_list|,
name|metadataStorageTablesConfig
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
comment|// When overwriting start with empty timeline, as we are overwriting segments with new versions
name|timeline
operator|=
operator|new
name|VersionedIntervalTimeline
argument_list|<>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Append Mode - build a timeline of existing segments in metadata storage.
name|Interval
name|indexedInterval
init|=
name|JodaUtils
operator|.
name|umbrellaInterval
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|segments
argument_list|,
name|input
lambda|->
name|input
operator|.
name|getInterval
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Building timeline for umbrella Interval [{}]"
argument_list|,
name|indexedInterval
argument_list|)
expr_stmt|;
name|timeline
operator|=
name|getTimelineForIntervalWithHandle
argument_list|(
name|handle
argument_list|,
name|dataSource
argument_list|,
name|indexedInterval
argument_list|,
name|metadataStorageTablesConfig
argument_list|)
expr_stmt|;
block|}
argument_list|for
operator|(
name|DataSegment
name|segment
operator|:
name|segments
operator|)
block|{
name|List
argument_list|<
name|TimelineObjectHolder
argument_list|<
name|String
argument_list|,
name|DataSegment
argument_list|>
argument_list|>
name|existingChunks
operator|=
name|timeline
operator|.
name|lookup
argument_list|(
name|segment
operator|.
name|getInterval
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|existingChunks
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Not possible to expand since we have more than one chunk with a single segment.
comment|// This is the case when user wants to append a segment with coarser granularity.
comment|// e.g If metadata storage already has segments for with granularity HOUR and segments to append have DAY granularity.
comment|// Druid shard specs does not support multiple partitions for same interval with different granularity.
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot allocate new segment for dataSource[%s], interval[%s], already have [%,d] chunks. Not possible to append new segment."
argument_list|,
name|dataSource
argument_list|,
name|segment
operator|.
name|getInterval
argument_list|()
argument_list|,
name|existingChunks
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// Find out the segment with latest version and maximum partition number
name|SegmentIdentifier
name|max
operator|=
literal|null
argument_list|;
name|final
name|ShardSpec
name|newShardSpec
argument_list|;
name|final
name|String
name|newVersion
argument_list|;                 if
operator|(
operator|!
name|existingChunks
operator|.
name|isEmpty
argument_list|()
operator|)
block|{
comment|// Some existing chunk, Find max
name|TimelineObjectHolder
argument_list|<
name|String
argument_list|,
name|DataSegment
argument_list|>
name|existingHolder
operator|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|existingChunks
argument_list|)
block|;
for|for
control|(
name|PartitionChunk
argument_list|<
name|DataSegment
argument_list|>
name|existing
range|:
name|existingHolder
operator|.
name|getObject
argument_list|()
control|)
block|{
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|max
operator|.
name|getShardSpec
argument_list|()
operator|.
name|getPartitionNum
argument_list|()
operator|<
name|existing
operator|.
name|getObject
argument_list|()
operator|.
name|getShardSpec
argument_list|()
operator|.
name|getPartitionNum
argument_list|()
condition|)
block|{
name|max
operator|=
name|SegmentIdentifier
operator|.
name|fromDataSegment
argument_list|(
name|existing
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_expr_stmt
unit|}                  if
operator|(
name|max
operator|==
literal|null
operator|)
block|{
comment|// No existing shard present in the database, use the current version.
name|newShardSpec
operator|=
name|segment
operator|.
name|getShardSpec
argument_list|()
block|;
name|newVersion
operator|=
name|segment
operator|.
name|getVersion
argument_list|()
block|;                 }
end_expr_stmt

begin_else
else|else
block|{
comment|// use version of existing max segment to generate new shard spec
name|newShardSpec
operator|=
name|getNextPartitionShardSpec
argument_list|(
name|max
operator|.
name|getShardSpec
argument_list|()
argument_list|)
expr_stmt|;
name|newVersion
operator|=
name|max
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
end_else

begin_decl_stmt
name|DataSegment
name|publishedSegment
init|=
name|publishSegmentWithShardSpec
argument_list|(
name|segment
argument_list|,
name|newShardSpec
argument_list|,
name|newVersion
argument_list|,
name|getPath
argument_list|(
name|segment
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|dataSegmentPusher
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|finalSegmentsToPublish
operator|.
name|add
argument_list|(
name|publishedSegment
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|timeline
operator|.
name|add
argument_list|(
name|publishedSegment
operator|.
name|getInterval
argument_list|()
argument_list|,
name|publishedSegment
operator|.
name|getVersion
argument_list|()
argument_list|,
name|publishedSegment
operator|.
name|getShardSpec
argument_list|()
operator|.
name|createChunk
argument_list|(
name|publishedSegment
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Publish new segments to metadata storage
end_comment

begin_decl_stmt
unit|final
name|PreparedBatch
name|batch
init|=
name|handle
operator|.
name|prepareBatch
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"INSERT INTO %1$s (id, dataSource, created_date, start, \"end\", partitioned, version, used, payload) "
operator|+
literal|"VALUES (:id, :dataSource, :created_date, :start, :end, :partitioned, :version, :used, :payload)"
argument_list|,
name|metadataStorageTablesConfig
operator|.
name|getSegmentsTable
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
specifier|final
name|DataSegment
name|segment
range|:
name|finalSegmentsToPublish
control|)
block|{
name|batch
operator|.
name|add
argument_list|(
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|segment
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"dataSource"
argument_list|,
name|segment
operator|.
name|getDataSource
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"created_date"
argument_list|,
operator|new
name|DateTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"start"
argument_list|,
name|segment
operator|.
name|getInterval
argument_list|()
operator|.
name|getStart
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"end"
argument_list|,
name|segment
operator|.
name|getInterval
argument_list|()
operator|.
name|getEnd
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"partitioned"
argument_list|,
operator|(
name|segment
operator|.
name|getShardSpec
argument_list|()
operator|instanceof
name|NoneShardSpec
operator|)
condition|?
literal|false
else|:
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|segment
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"used"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"payload"
argument_list|,
name|JSON_MAPPER
operator|.
name|writeValueAsBytes
argument_list|(
name|segment
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Published {}"
argument_list|,
name|segment
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|batch
operator|.
name|execute
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
literal|null
return|;
end_return

begin_empty_stmt
unit|}     )
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
specifier|static
name|void
name|disableDataSourceWithHandle
parameter_list|(
name|Handle
name|handle
parameter_list|,
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
parameter_list|,
name|String
name|dataSource
parameter_list|)
block|{
name|handle
operator|.
name|createStatement
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"UPDATE %s SET used=false WHERE dataSource = :dataSource"
argument_list|,
name|metadataStorageTablesConfig
operator|.
name|getSegmentsTable
argument_list|()
argument_list|)
argument_list|)
operator|.
name|bind
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSource
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * @param connector                   SQL connector to metadata    * @param metadataStorageTablesConfig Tables configuration    * @param dataSource                  Name of data source    *    * @return List of all data segments part of the given data source    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|DataSegment
argument_list|>
name|getDataSegmentList
parameter_list|(
specifier|final
name|SQLMetadataConnector
name|connector
parameter_list|,
specifier|final
name|MetadataStorageTablesConfig
name|metadataStorageTablesConfig
parameter_list|,
specifier|final
name|String
name|dataSource
parameter_list|)
block|{
name|List
argument_list|<
name|DataSegment
argument_list|>
name|segmentList
init|=
name|connector
operator|.
name|retryTransaction
argument_list|(
parameter_list|(
name|handle
parameter_list|,
name|status
parameter_list|)
lambda|->
name|handle
operator|.
name|createQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SELECT payload FROM %s WHERE dataSource = :dataSource"
argument_list|,
name|metadataStorageTablesConfig
operator|.
name|getSegmentsTable
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setFetchSize
argument_list|(
name|getStreamingFetchSize
argument_list|(
name|connector
argument_list|)
argument_list|)
operator|.
name|bind
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSource
argument_list|)
operator|.
name|map
argument_list|(
name|ByteArrayMapper
operator|.
name|FIRST
argument_list|)
operator|.
name|fold
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
call|(
name|Folder3
argument_list|<
name|List
argument_list|<
name|DataSegment
argument_list|>
argument_list|,
name|byte
index|[]
argument_list|>
call|)
argument_list|(
name|accumulator
argument_list|,
name|payload
argument_list|,
name|control
argument_list|,
name|ctx
argument_list|)
operator|->
block|{
block|try
block|{
specifier|final
name|DataSegment
name|segment
init|=
name|DATA_SEGMENT_INTERNER
operator|.
name|intern
argument_list|(
name|JSON_MAPPER
operator|.
name|readValue
argument_list|(
name|payload
argument_list|,
name|DataSegment
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|accumulator
operator|.
name|add
argument_list|(
name|segment
argument_list|)
expr_stmt|;
return|return
name|accumulator
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_function

begin_operator
unit|)
operator|,
end_operator

begin_expr_stmt
literal|3
operator|,
name|SQLMetadataConnector
operator|.
name|DEFAULT_MAX_TRIES
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|segmentList
return|;
end_return

begin_comment
unit|}
comment|/**    * @param connector    *    * @return streaming fetch size.    */
end_comment

begin_function
unit|private
specifier|static
name|int
name|getStreamingFetchSize
parameter_list|(
name|SQLMetadataConnector
name|connector
parameter_list|)
block|{
if|if
condition|(
name|connector
operator|instanceof
name|MySQLConnector
condition|)
block|{
return|return
name|Integer
operator|.
name|MIN_VALUE
return|;
block|}
return|return
name|DEFAULT_STREAMING_RESULT_SIZE
return|;
block|}
end_function

begin_comment
comment|/**    * @param pushedSegment    * @param segmentsDescriptorDir    *    * @return a sanitize file name    */
end_comment

begin_function
specifier|public
specifier|static
name|Path
name|makeSegmentDescriptorOutputPath
parameter_list|(
name|DataSegment
name|pushedSegment
parameter_list|,
name|Path
name|segmentsDescriptorDir
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|segmentsDescriptorDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.json"
argument_list|,
name|pushedSegment
operator|.
name|getIdentifier
argument_list|()
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Simple interface for retry operations    */
end_comment

begin_interface
specifier|public
interface|interface
name|DataPusher
block|{
name|long
name|push
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_interface

begin_comment
comment|// Thanks, HBase Storage handler
end_comment

begin_function
specifier|public
specifier|static
name|void
name|addDependencyJars
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|classes
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jars
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|jars
operator|.
name|addAll
argument_list|(
name|conf
operator|.
name|getStringCollection
argument_list|(
literal|"tmpjars"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|classes
control|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|path
init|=
name|Utilities
operator|.
name|jarFinderGetJar
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find jar for class "
operator|+
name|clazz
operator|+
literal|" in order to ship it to the cluster."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|localFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not validate jar file "
operator|+
name|path
operator|+
literal|" for class "
operator|+
name|clazz
argument_list|)
throw|;
block|}
name|jars
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"tmpjars"
argument_list|,
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|jars
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|jars
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|VersionedIntervalTimeline
argument_list|<
name|String
argument_list|,
name|DataSegment
argument_list|>
name|getTimelineForIntervalWithHandle
parameter_list|(
specifier|final
name|Handle
name|handle
parameter_list|,
specifier|final
name|String
name|dataSource
parameter_list|,
specifier|final
name|Interval
name|interval
parameter_list|,
specifier|final
name|MetadataStorageTablesConfig
name|dbTables
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sql
init|=
name|handle
operator|.
name|createQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SELECT payload FROM %s WHERE used = true AND dataSource = ? AND start<= ? AND \"end\">= ?"
argument_list|,
name|dbTables
operator|.
name|getSegmentsTable
argument_list|()
argument_list|)
argument_list|)
operator|.
name|bind
argument_list|(
literal|0
argument_list|,
name|dataSource
argument_list|)
operator|.
name|bind
argument_list|(
literal|1
argument_list|,
name|interval
operator|.
name|getEnd
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|bind
argument_list|(
literal|2
argument_list|,
name|interval
operator|.
name|getStart
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|VersionedIntervalTimeline
argument_list|<
name|String
argument_list|,
name|DataSegment
argument_list|>
name|timeline
init|=
operator|new
name|VersionedIntervalTimeline
argument_list|<>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ResultIterator
argument_list|<
name|byte
index|[]
argument_list|>
name|dbSegments
init|=
name|sql
operator|.
name|map
argument_list|(
name|ByteArrayMapper
operator|.
name|FIRST
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|dbSegments
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|byte
index|[]
name|payload
init|=
name|dbSegments
operator|.
name|next
argument_list|()
decl_stmt|;
name|DataSegment
name|segment
init|=
name|JSON_MAPPER
operator|.
name|readValue
argument_list|(
name|payload
argument_list|,
name|DataSegment
operator|.
name|class
argument_list|)
decl_stmt|;
name|timeline
operator|.
name|add
argument_list|(
name|segment
operator|.
name|getInterval
argument_list|()
argument_list|,
name|segment
operator|.
name|getVersion
argument_list|()
argument_list|,
name|segment
operator|.
name|getShardSpec
argument_list|()
operator|.
name|createChunk
argument_list|(
name|segment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dbSegments
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|timeline
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|DataSegmentPusher
name|createSegmentPusherForDirectory
parameter_list|(
name|String
name|segmentDirectory
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HdfsDataSegmentPusherConfig
name|hdfsDataSegmentPusherConfig
init|=
operator|new
name|HdfsDataSegmentPusherConfig
argument_list|()
decl_stmt|;
name|hdfsDataSegmentPusherConfig
operator|.
name|setStorageDirectory
argument_list|(
name|segmentDirectory
argument_list|)
expr_stmt|;
return|return
operator|new
name|HdfsDataSegmentPusher
argument_list|(
name|hdfsDataSegmentPusherConfig
argument_list|,
name|configuration
argument_list|,
name|JSON_MAPPER
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|DataSegment
name|publishSegmentWithShardSpec
parameter_list|(
name|DataSegment
name|segment
parameter_list|,
name|ShardSpec
name|shardSpec
parameter_list|,
name|String
name|version
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|DataSegmentPusher
name|dataSegmentPusher
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|retry
init|=
literal|true
decl_stmt|;
name|DataSegment
operator|.
name|Builder
name|dataSegmentBuilder
init|=
operator|new
name|DataSegment
operator|.
name|Builder
argument_list|(
name|segment
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|Path
name|finalPath
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|retry
condition|)
block|{
name|retry
operator|=
literal|false
expr_stmt|;
name|dataSegmentBuilder
operator|.
name|shardSpec
argument_list|(
name|shardSpec
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|intermediatePath
init|=
name|getPath
argument_list|(
name|segment
argument_list|)
decl_stmt|;
name|finalPath
operator|=
operator|new
name|Path
argument_list|(
name|dataSegmentPusher
operator|.
name|getPathForHadoop
argument_list|()
argument_list|,
name|dataSegmentPusher
operator|.
name|makeIndexPathName
argument_list|(
name|dataSegmentBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|INDEX_ZIP
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create parent if it does not exist, recreation is not an error
name|fs
operator|.
name|mkdirs
argument_list|(
name|finalPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|intermediatePath
argument_list|,
name|finalPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|finalPath
argument_list|)
condition|)
block|{
comment|// Someone else is also trying to append
name|shardSpec
operator|=
name|getNextPartitionShardSpec
argument_list|(
name|shardSpec
argument_list|)
expr_stmt|;
name|retry
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename intermediate segment[%s] to final segment[%s] is not present."
argument_list|,
name|intermediatePath
argument_list|,
name|finalPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
name|DataSegment
name|dataSegment
init|=
name|dataSegmentBuilder
operator|.
name|loadSpec
argument_list|(
name|dataSegmentPusher
operator|.
name|makeLoadSpec
argument_list|(
name|finalPath
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|writeSegmentDescriptor
argument_list|(
name|fs
argument_list|,
name|dataSegment
argument_list|,
operator|new
name|Path
argument_list|(
name|finalPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|DESCRIPTOR_JSON
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dataSegment
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|ShardSpec
name|getNextPartitionShardSpec
parameter_list|(
name|ShardSpec
name|shardSpec
parameter_list|)
block|{
if|if
condition|(
name|shardSpec
operator|instanceof
name|LinearShardSpec
condition|)
block|{
return|return
operator|new
name|LinearShardSpec
argument_list|(
name|shardSpec
operator|.
name|getPartitionNum
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|shardSpec
operator|instanceof
name|NumberedShardSpec
condition|)
block|{
return|return
operator|new
name|NumberedShardSpec
argument_list|(
name|shardSpec
operator|.
name|getPartitionNum
argument_list|()
argument_list|,
operator|(
operator|(
name|NumberedShardSpec
operator|)
name|shardSpec
operator|)
operator|.
name|getPartitions
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// Druid only support appending more partitions to Linear and Numbered ShardSpecs.
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot expand shard spec [%s]"
argument_list|,
name|shardSpec
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|Path
name|getPath
parameter_list|(
name|DataSegment
name|dataSegment
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|dataSegment
operator|.
name|getLoadSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

