begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|dataformat
operator|.
name|smile
operator|.
name|SmileFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|http
operator|.
name|client
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|http
operator|.
name|client
operator|.
name|response
operator|.
name|InputStreamResponseHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|jackson
operator|.
name|DefaultObjectMapper
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|query
operator|.
name|BaseQuery
import|;
end_import

begin_comment
comment|/**  * Utils class for Druid storage handler.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DruidStorageHandlerUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SMILE_CONTENT_TYPE
init|=
literal|"application/x-jackson-smile"
decl_stmt|;
comment|/**    * Mapper to use to serialize/deserialize Druid objects (JSON)    */
specifier|public
specifier|static
specifier|final
name|ObjectMapper
name|JSON_MAPPER
init|=
operator|new
name|DefaultObjectMapper
argument_list|()
decl_stmt|;
comment|/**    * Mapper to use to serialize/deserialize Druid objects (SMILE)    */
specifier|public
specifier|static
specifier|final
name|ObjectMapper
name|SMILE_MAPPER
init|=
operator|new
name|DefaultObjectMapper
argument_list|(
operator|new
name|SmileFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Method that creates a request for Druid JSON query (using SMILE).    * @param mapper    * @param address    * @param query    * @return    * @throws IOException    */
specifier|public
specifier|static
name|Request
name|createRequest
parameter_list|(
name|String
name|address
parameter_list|,
name|BaseQuery
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Request
argument_list|(
name|HttpMethod
operator|.
name|POST
argument_list|,
operator|new
name|URL
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s/druid/v2/"
argument_list|,
literal|"http://"
operator|+
name|address
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setContent
argument_list|(
name|SMILE_MAPPER
operator|.
name|writeValueAsBytes
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
name|SMILE_CONTENT_TYPE
argument_list|)
return|;
block|}
comment|/**    * Method that submits a request to an Http address and retrieves the result.    * The caller is responsible for closing the stream once it finishes consuming it.    * @param client    * @param request    * @return    * @throws IOException    */
specifier|public
specifier|static
name|InputStream
name|submitRequest
parameter_list|(
name|HttpClient
name|client
parameter_list|,
name|Request
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|client
operator|.
name|go
argument_list|(
name|request
argument_list|,
operator|new
name|InputStreamResponseHandler
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

