begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Writable for Druid results.  */
end_comment

begin_class
specifier|public
class|class
name|DruidWritable
implements|implements
name|Writable
block|{
comment|/**    * value map stores column name to value mapping.    * This is only used when the result is not compacted.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|value
decl_stmt|;
comment|/**    * list of values in a compacted form, Serializer/Deserializer needs to agree on the order of values.    * This is only used when the result is compacted.    */
specifier|private
specifier|transient
name|List
argument_list|<
name|Object
argument_list|>
name|compactedValue
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|compacted
decl_stmt|;
specifier|public
name|DruidWritable
parameter_list|(
name|boolean
name|compacted
parameter_list|)
block|{
name|this
operator|.
name|compacted
operator|=
name|compacted
expr_stmt|;
if|if
condition|(
name|compacted
condition|)
block|{
name|compactedValue
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|compactedValue
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|DruidWritable
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|compactedValue
operator|=
literal|null
expr_stmt|;
name|compacted
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|DruidWritable
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|value
parameter_list|)
block|{
name|this
operator|.
name|compacted
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|compactedValue
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|value
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|compacted
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"compacted DruidWritable does not support getValue(), use getCompactedValue()"
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getCompactedValue
parameter_list|()
block|{
if|if
condition|(
operator|!
name|compacted
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"non compacted DruidWritable does not support getCompactedValue(), use getValue()"
argument_list|)
throw|;
block|}
return|return
name|compactedValue
return|;
block|}
specifier|public
name|void
name|setCompactedValue
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|compactedValue
parameter_list|)
block|{
name|this
operator|.
name|compactedValue
operator|=
name|compactedValue
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCompacted
parameter_list|()
block|{
return|return
name|compacted
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|value
argument_list|,
name|compactedValue
argument_list|,
name|compacted
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DruidWritable
name|that
init|=
operator|(
name|DruidWritable
operator|)
name|o
decl_stmt|;
return|return
name|compacted
operator|==
name|that
operator|.
name|compacted
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|value
argument_list|,
name|that
operator|.
name|value
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|compactedValue
argument_list|,
name|that
operator|.
name|compactedValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DruidWritable{"
operator|+
literal|"value="
operator|+
name|value
operator|+
literal|", compactedValue="
operator|+
name|compactedValue
operator|+
literal|", compacted="
operator|+
name|compacted
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

