begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|indexer
operator|.
name|SQLMetadataStorageUpdaterJobHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|MetadataStorageConnectorConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|MetadataStorageTablesConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|SQLMetadataConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|storage
operator|.
name|mysql
operator|.
name|MySQLConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|storage
operator|.
name|postgresql
operator|.
name|PostgreSQLConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|loading
operator|.
name|SegmentLoadingException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|DataSegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
operator|.
name|DruidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
operator|.
name|DruidQueryBasedInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|serde
operator|.
name|DruidSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|DefaultStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * DruidStorageHandler provides a HiveStorageHandler implementation for Druid.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
class|class
name|DruidStorageHandler
extends|extends
name|DefaultStorageHandler
implements|implements
name|HiveMetaHook
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DruidStorageHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEGMENTS_DESCRIPTOR_DIR_NAME
init|=
literal|"segmentsDescriptorDir"
decl_stmt|;
specifier|private
specifier|final
name|SQLMetadataConnector
name|connector
decl_stmt|;
specifier|private
specifier|final
name|SQLMetadataStorageUpdaterJobHandler
name|druidSqlMetadataStorageUpdaterJobHandler
decl_stmt|;
specifier|private
specifier|final
name|MetadataStorageTablesConfig
name|druidMetadataStorageTablesConfig
decl_stmt|;
specifier|private
name|String
name|uniqueId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|rootWorkingDir
init|=
literal|null
decl_stmt|;
specifier|public
name|DruidStorageHandler
parameter_list|()
block|{
comment|//this is the default value in druid
specifier|final
name|String
name|base
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_BASE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbType
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_DB_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|username
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_DB_USERNAME
argument_list|)
decl_stmt|;
specifier|final
name|String
name|password
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_DB_PASSWORD
argument_list|)
decl_stmt|;
specifier|final
name|String
name|uri
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_DB_URI
argument_list|)
decl_stmt|;
name|druidMetadataStorageTablesConfig
operator|=
name|MetadataStorageTablesConfig
operator|.
name|fromBase
argument_list|(
name|base
argument_list|)
expr_stmt|;
specifier|final
name|Supplier
argument_list|<
name|MetadataStorageConnectorConfig
argument_list|>
name|storageConnectorConfigSupplier
init|=
name|Suppliers
operator|.
expr|<
name|MetadataStorageConnectorConfig
operator|>
name|ofInstance
argument_list|(
operator|new
name|MetadataStorageConnectorConfig
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getConnectURI
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|username
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|.
name|equals
argument_list|(
literal|"mysql"
argument_list|)
condition|)
block|{
name|connector
operator|=
operator|new
name|MySQLConnector
argument_list|(
name|storageConnectorConfigSupplier
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|druidMetadataStorageTablesConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dbType
operator|.
name|equals
argument_list|(
literal|"postgres"
argument_list|)
condition|)
block|{
name|connector
operator|=
operator|new
name|PostgreSQLConnector
argument_list|(
name|storageConnectorConfigSupplier
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|druidMetadataStorageTablesConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unknown metadata storage type [%s]"
argument_list|,
name|dbType
argument_list|)
argument_list|)
throw|;
block|}
name|druidSqlMetadataStorageUpdaterJobHandler
operator|=
operator|new
name|SQLMetadataStorageUpdaterJobHandler
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|DruidStorageHandler
parameter_list|(
name|SQLMetadataConnector
name|connector
parameter_list|,
name|SQLMetadataStorageUpdaterJobHandler
name|druidSqlMetadataStorageUpdaterJobHandler
parameter_list|,
name|MetadataStorageTablesConfig
name|druidMetadataStorageTablesConfig
parameter_list|)
block|{
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|druidSqlMetadataStorageUpdaterJobHandler
operator|=
name|druidSqlMetadataStorageUpdaterJobHandler
expr_stmt|;
name|this
operator|.
name|druidMetadataStorageTablesConfig
operator|=
name|druidMetadataStorageTablesConfig
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormatClass
parameter_list|()
block|{
return|return
name|DruidQueryBasedInputFormat
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|getOutputFormatClass
parameter_list|()
block|{
return|return
name|DruidOutputFormat
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|AbstractSerDe
argument_list|>
name|getSerDeClass
parameter_list|()
block|{
return|return
name|DruidSerDe
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveMetaHook
name|getMetaHook
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Do safety checks
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"LOCATION may not be specified for Druid"
argument_list|)
throw|;
block|}
if|if
condition|(
name|table
operator|.
name|getPartitionKeysSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"PARTITIONED BY may not be specified for Druid"
argument_list|)
throw|;
block|}
if|if
condition|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketColsSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"CLUSTERED BY may not be specified for Druid"
argument_list|)
throw|;
block|}
name|String
name|dataSourceName
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DRUID_DATA_SOURCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// If it is not an external table we need to check the metadata
try|try
block|{
name|connector
operator|.
name|createSegmentTable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while trying to create druid segments table"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|existingDataSources
init|=
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|druidMetadataStorageTablesConfig
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"pre-create data source with name [%s]"
argument_list|,
name|dataSourceName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingDataSources
operator|.
name|contains
argument_list|(
name|dataSourceName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Data source [%s] already existing"
argument_list|,
name|dataSourceName
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Path
name|segmentDescriptorDir
init|=
name|getSegmentDescriptorDir
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|DataSegment
argument_list|>
name|dataSegmentList
init|=
name|DruidStorageHandlerUtils
operator|.
name|getPublishedSegments
argument_list|(
name|segmentDescriptorDir
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DataSegment
name|dataSegment
range|:
name|dataSegmentList
control|)
block|{
try|try
block|{
name|deleteSegment
argument_list|(
name|dataSegment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentLoadingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while trying to clean the segment [%s]"
argument_list|,
name|dataSegment
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while rollback"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanWorkingDir
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Committing table [%s] to the druid metastore"
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|tableDir
init|=
name|getSegmentDescriptorDir
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|DataSegment
argument_list|>
name|segmentList
init|=
name|DruidStorageHandlerUtils
operator|.
name|getPublishedSegments
argument_list|(
name|tableDir
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found [%d] segments under path [%s]"
argument_list|,
name|segmentList
operator|.
name|size
argument_list|()
argument_list|,
name|tableDir
argument_list|)
argument_list|)
expr_stmt|;
name|druidSqlMetadataStorageUpdaterJobHandler
operator|.
name|publishSegments
argument_list|(
name|druidMetadataStorageTablesConfig
operator|.
name|getSegmentsTable
argument_list|()
argument_list|,
name|segmentList
argument_list|,
name|DruidStorageHandlerUtils
operator|.
name|JSON_MAPPER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while commit"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanWorkingDir
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|deleteSegment
parameter_list|(
name|DataSegment
name|segment
parameter_list|)
throws|throws
name|SegmentLoadingException
block|{
specifier|final
name|Path
name|path
init|=
name|getPath
argument_list|(
name|segment
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"removing segment[%s], located at path[%s]"
argument_list|,
name|segment
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|path
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Segment Path [%s] does not exist. It appears to have been deleted already."
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// path format --> .../dataSource/interval/version/partitionNum/xxx.zip
name|Path
name|partitionNumDir
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|partitionNumDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SegmentLoadingException
argument_list|(
literal|"Unable to kill segment, failed to delete dir [%s]"
argument_list|,
name|partitionNumDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|//try to delete other directories if possible
name|Path
name|versionDir
init|=
name|partitionNumDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|safeNonRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|versionDir
argument_list|)
condition|)
block|{
name|Path
name|intervalDir
init|=
name|versionDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|safeNonRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|intervalDir
argument_list|)
condition|)
block|{
name|Path
name|dataSourceDir
init|=
name|intervalDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|safeNonRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|dataSourceDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SegmentLoadingException
argument_list|(
literal|"Unknown file type[%s]"
argument_list|,
name|path
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SegmentLoadingException
argument_list|(
name|e
argument_list|,
literal|"Unable to kill segment"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Path
name|getPath
parameter_list|(
name|DataSegment
name|dataSegment
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|dataSegment
operator|.
name|getLoadSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|safeNonRecursiveDelete
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitDropTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|dataSourceName
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DRUID_DATA_SOURCE
argument_list|)
argument_list|,
literal|"DataSource name is null !"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteData
operator|==
literal|true
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Dropping with purge all the data for data source [%s]"
argument_list|,
name|dataSourceName
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataSegment
argument_list|>
name|dataSegmentList
init|=
name|DruidStorageHandlerUtils
operator|.
name|getDataSegmentList
argument_list|(
name|connector
argument_list|,
name|druidMetadataStorageTablesConfig
argument_list|,
name|dataSourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataSegmentList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Nothing to delete for data source [%s]"
argument_list|,
name|dataSourceName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|DataSegment
name|dataSegment
range|:
name|dataSegmentList
control|)
block|{
try|try
block|{
name|deleteSegment
argument_list|(
name|dataSegment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentLoadingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while deleting segment [%s]"
argument_list|,
name|dataSegment
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|DruidStorageHandlerUtils
operator|.
name|disableDataSource
argument_list|(
name|connector
argument_list|,
name|druidMetadataStorageTablesConfig
argument_list|,
name|dataSourceName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Successfully dropped druid data source [%s]"
argument_list|,
name|dataSourceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureOutputJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{
name|jobProperties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|DRUID_SEGMENT_VERSION
argument_list|,
operator|new
name|DateTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jobProperties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|DRUID_JOB_WORKING_DIRECTORY
argument_list|,
name|getStagingWorkingDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|DRUID_HIVE_STORAGE_HANDLER_ID
return|;
block|}
specifier|public
name|String
name|getUniqueId
parameter_list|()
block|{
if|if
condition|(
name|uniqueId
operator|==
literal|null
condition|)
block|{
name|uniqueId
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
argument_list|,
literal|"Hive query id is null"
argument_list|)
expr_stmt|;
block|}
return|return
name|uniqueId
return|;
block|}
specifier|private
name|Path
name|getStagingWorkingDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getRootWorkingDir
argument_list|()
argument_list|,
name|makeStagingName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|String
name|makeStagingName
parameter_list|()
block|{
return|return
literal|".staging-"
operator|.
name|concat
argument_list|(
name|getUniqueId
argument_list|()
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getSegmentDescriptorDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getStagingWorkingDir
argument_list|()
argument_list|,
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
return|;
block|}
specifier|private
name|void
name|cleanWorkingDir
parameter_list|()
block|{
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
try|try
block|{
name|fileSystem
operator|=
name|getStagingWorkingDir
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|delete
argument_list|(
name|getStagingWorkingDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got Exception while cleaning working directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getRootWorkingDir
parameter_list|()
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|rootWorkingDir
argument_list|)
condition|)
block|{
name|rootWorkingDir
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_WORKING_DIR
argument_list|)
expr_stmt|;
block|}
return|return
name|rootWorkingDir
return|;
block|}
block|}
end_class

end_unit

