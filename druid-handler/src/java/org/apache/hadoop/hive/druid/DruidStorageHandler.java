begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|MetadataStorageConnectorConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|MetadataStorageTablesConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|SQLMetadataConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|storage
operator|.
name|mysql
operator|.
name|MySQLConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|metadata
operator|.
name|storage
operator|.
name|postgresql
operator|.
name|PostgreSQLConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|loading
operator|.
name|SegmentLoadingException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|timeline
operator|.
name|DataSegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
operator|.
name|DruidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
operator|.
name|DruidQueryBasedInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|io
operator|.
name|DruidRecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|security
operator|.
name|KerberosHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|serde
operator|.
name|DruidSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|DefaultHiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|DefaultHiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|common
operator|.
name|RetryUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|common
operator|.
name|lifecycle
operator|.
name|Lifecycle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|metamx
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClientInit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Period
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * DruidStorageHandler provides a HiveStorageHandler implementation for Druid.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
class|class
name|DruidStorageHandler
extends|extends
name|DefaultHiveMetaHook
implements|implements
name|HiveStorageHandler
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DruidStorageHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|SessionState
operator|.
name|LogHelper
name|console
init|=
operator|new
name|SessionState
operator|.
name|LogHelper
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEGMENTS_DESCRIPTOR_DIR_NAME
init|=
literal|"segmentsDescriptorDir"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INTERMEDIATE_SEGMENT_DIR_NAME
init|=
literal|"intermediateSegmentDir"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HttpClient
name|HTTP_CLIENT
decl_stmt|;
static|static
block|{
specifier|final
name|Lifecycle
name|lifecycle
init|=
operator|new
name|Lifecycle
argument_list|()
decl_stmt|;
try|try
block|{
name|lifecycle
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Issues with lifecycle start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|HTTP_CLIENT
operator|=
name|makeHttpClient
argument_list|(
name|lifecycle
argument_list|)
expr_stmt|;
name|ShutdownHookManager
operator|.
name|addShutdownHook
argument_list|(
parameter_list|()
lambda|->
name|lifecycle
operator|.
name|stop
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|SQLMetadataConnector
name|connector
decl_stmt|;
specifier|private
specifier|final
name|MetadataStorageTablesConfig
name|druidMetadataStorageTablesConfig
decl_stmt|;
specifier|private
name|String
name|uniqueId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|rootWorkingDir
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|DruidStorageHandler
parameter_list|()
block|{
comment|//this is the default value in druid
specifier|final
name|String
name|base
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_BASE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbType
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_DB_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|username
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_DB_USERNAME
argument_list|)
decl_stmt|;
specifier|final
name|String
name|password
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_DB_PASSWORD
argument_list|)
decl_stmt|;
specifier|final
name|String
name|uri
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_METADATA_DB_URI
argument_list|)
decl_stmt|;
name|druidMetadataStorageTablesConfig
operator|=
name|MetadataStorageTablesConfig
operator|.
name|fromBase
argument_list|(
name|base
argument_list|)
expr_stmt|;
specifier|final
name|Supplier
argument_list|<
name|MetadataStorageConnectorConfig
argument_list|>
name|storageConnectorConfigSupplier
init|=
name|Suppliers
operator|.
expr|<
name|MetadataStorageConnectorConfig
operator|>
name|ofInstance
argument_list|(
operator|new
name|MetadataStorageConnectorConfig
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getConnectURI
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|username
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|.
name|equals
argument_list|(
literal|"mysql"
argument_list|)
condition|)
block|{
name|connector
operator|=
operator|new
name|MySQLConnector
argument_list|(
name|storageConnectorConfigSupplier
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|druidMetadataStorageTablesConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dbType
operator|.
name|equals
argument_list|(
literal|"postgresql"
argument_list|)
condition|)
block|{
name|connector
operator|=
operator|new
name|PostgreSQLConnector
argument_list|(
name|storageConnectorConfigSupplier
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|druidMetadataStorageTablesConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unknown metadata storage type [%s]"
argument_list|,
name|dbType
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|DruidStorageHandler
parameter_list|(
name|SQLMetadataConnector
name|connector
parameter_list|,
name|MetadataStorageTablesConfig
name|druidMetadataStorageTablesConfig
parameter_list|)
block|{
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|druidMetadataStorageTablesConfig
operator|=
name|druidMetadataStorageTablesConfig
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormatClass
parameter_list|()
block|{
return|return
name|DruidQueryBasedInputFormat
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|getOutputFormatClass
parameter_list|()
block|{
return|return
name|DruidOutputFormat
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|AbstractSerDe
argument_list|>
name|getSerDeClass
parameter_list|()
block|{
return|return
name|DruidSerDe
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveMetaHook
name|getMetaHook
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveAuthorizationProvider
name|getAuthorizationProvider
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
operator|new
name|DefaultHiveAuthorizationProvider
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureInputJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|configureInputJobCredentials
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobSecrets
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Do safety checks
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"LOCATION may not be specified for Druid"
argument_list|)
throw|;
block|}
if|if
condition|(
name|table
operator|.
name|getPartitionKeysSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"PARTITIONED BY may not be specified for Druid"
argument_list|)
throw|;
block|}
if|if
condition|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketColsSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"CLUSTERED BY may not be specified for Druid"
argument_list|)
throw|;
block|}
name|String
name|dataSourceName
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DRUID_DATA_SOURCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// If it is not an external table we need to check the metadata
try|try
block|{
name|connector
operator|.
name|createSegmentTable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while trying to create druid segments table"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|existingDataSources
init|=
name|DruidStorageHandlerUtils
operator|.
name|getAllDataSourceNames
argument_list|(
name|connector
argument_list|,
name|druidMetadataStorageTablesConfig
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"pre-create data source with name {}"
argument_list|,
name|dataSourceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingDataSources
operator|.
name|contains
argument_list|(
name|dataSourceName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Data source [%s] already existing"
argument_list|,
name|dataSourceName
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Path
name|segmentDescriptorDir
init|=
name|getSegmentDescriptorDir
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|DataSegment
argument_list|>
name|dataSegmentList
init|=
name|DruidStorageHandlerUtils
operator|.
name|getPublishedSegments
argument_list|(
name|segmentDescriptorDir
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DataSegment
name|dataSegment
range|:
name|dataSegmentList
control|)
block|{
try|try
block|{
name|deleteSegment
argument_list|(
name|dataSegment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentLoadingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while trying to clean the segment [%s]"
argument_list|,
name|dataSegment
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while rollback"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanWorkingDir
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"commit create table {}"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|publishSegments
argument_list|(
name|table
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|publishSegments
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Committing table {} to the druid metastore"
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|tableDir
init|=
name|getSegmentDescriptorDir
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|DataSegment
argument_list|>
name|segmentList
init|=
name|DruidStorageHandlerUtils
operator|.
name|getPublishedSegments
argument_list|(
name|tableDir
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} segments under path {}"
argument_list|,
name|segmentList
operator|.
name|size
argument_list|()
argument_list|,
name|tableDir
argument_list|)
expr_stmt|;
specifier|final
name|String
name|dataSourceName
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DRUID_DATA_SOURCE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|segmentDirectory
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DRUID_SEGMENT_DIRECTORY
argument_list|)
operator|!=
literal|null
condition|?
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DRUID_SEGMENT_DIRECTORY
argument_list|)
else|:
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_SEGMENT_DIRECTORY
argument_list|)
decl_stmt|;
name|DruidStorageHandlerUtils
operator|.
name|publishSegments
argument_list|(
name|connector
argument_list|,
name|druidMetadataStorageTablesConfig
argument_list|,
name|dataSourceName
argument_list|,
name|segmentList
argument_list|,
name|overwrite
argument_list|,
name|segmentDirectory
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|coordinatorAddress
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRUID_COORDINATOR_DEFAULT_ADDRESS
argument_list|)
decl_stmt|;
name|int
name|maxTries
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRUID_MAX_TRIES
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"checking load status from coordinator {}"
argument_list|,
name|coordinatorAddress
argument_list|)
expr_stmt|;
name|String
name|coordinatorResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|coordinatorResponse
operator|=
name|RetryUtils
operator|.
name|retry
argument_list|(
parameter_list|()
lambda|->
name|DruidStorageHandlerUtils
operator|.
name|getURL
argument_list|(
name|getHttpClient
argument_list|()
argument_list|,
operator|new
name|URL
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"http://%s/status"
argument_list|,
name|coordinatorAddress
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|input
lambda|->
name|input
operator|instanceof
name|IOException
argument_list|,
name|maxTries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Will skip waiting for data loading"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|coordinatorResponse
argument_list|)
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Will skip waiting for data loading"
argument_list|)
expr_stmt|;
return|return;
block|}
name|console
operator|.
name|printInfo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Waiting for the loading of [%s] segments"
argument_list|,
name|segmentList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|passiveWaitTimeMs
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRUID_PASSIVE_WAIT_TIME
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|URL
argument_list|>
name|setOfUrls
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|segmentList
argument_list|)
operator|.
name|transform
argument_list|(
name|dataSegment
lambda|->
block|{
try|try
block|{
comment|//Need to make sure that we are using UTC since most of the druid cluster use UTC by default
return|return
operator|new
name|URL
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"http://%s/druid/coordinator/v1/datasources/%s/segments/%s"
argument_list|,
name|coordinatorAddress
argument_list|,
name|dataSourceName
argument_list|,
name|DataSegment
operator|.
name|makeDataSegmentIdentifier
argument_list|(
name|dataSegment
operator|.
name|getDataSource
argument_list|()
argument_list|,
operator|new
name|DateTime
argument_list|(
name|dataSegment
operator|.
name|getInterval
argument_list|()
operator|.
name|getStartMillis
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
name|dataSegment
operator|.
name|getInterval
argument_list|()
operator|.
name|getEndMillis
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
name|dataSegment
operator|.
name|getVersion
argument_list|()
argument_list|,
name|dataSegment
operator|.
name|getShardSpec
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|toSet
argument_list|()
decl_stmt|;
name|int
name|numRetries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numRetries
operator|++
operator|<
name|maxTries
operator|&&
operator|!
name|setOfUrls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setOfUrls
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Sets
operator|.
name|filter
argument_list|(
name|setOfUrls
argument_list|,
operator|new
name|Predicate
argument_list|<
name|URL
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|URL
name|input
parameter_list|)
block|{
try|try
block|{
name|String
name|result
init|=
name|DruidStorageHandlerUtils
operator|.
name|getURL
argument_list|(
name|getHttpClient
argument_list|()
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking segment {} response is {}"
argument_list|,
name|input
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while checking URL [%s]"
argument_list|,
name|input
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|setOfUrls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|passiveWaitTimeMs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|setOfUrls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We are not Throwing an exception since it might be a transient issue that is blocking loading
name|console
operator|.
name|printError
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Wait time exhausted and we have [%s] out of [%s] segments not loaded yet"
argument_list|,
name|setOfUrls
operator|.
name|size
argument_list|()
argument_list|,
name|segmentList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while commit"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanWorkingDir
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|deleteSegment
parameter_list|(
name|DataSegment
name|segment
parameter_list|)
throws|throws
name|SegmentLoadingException
block|{
specifier|final
name|Path
name|path
init|=
name|DruidStorageHandlerUtils
operator|.
name|getPath
argument_list|(
name|segment
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"removing segment {}, located at path {}"
argument_list|,
name|segment
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|path
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Segment Path {} does not exist. It appears to have been deleted already."
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// path format --> .../dataSource/interval/version/partitionNum/xxx.zip
name|Path
name|partitionNumDir
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|partitionNumDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SegmentLoadingException
argument_list|(
literal|"Unable to kill segment, failed to delete dir [%s]"
argument_list|,
name|partitionNumDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|//try to delete other directories if possible
name|Path
name|versionDir
init|=
name|partitionNumDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|safeNonRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|versionDir
argument_list|)
condition|)
block|{
name|Path
name|intervalDir
init|=
name|versionDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|safeNonRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|intervalDir
argument_list|)
condition|)
block|{
name|Path
name|dataSourceDir
init|=
name|intervalDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|safeNonRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|dataSourceDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SegmentLoadingException
argument_list|(
literal|"Unknown file type[%s]"
argument_list|,
name|path
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SegmentLoadingException
argument_list|(
name|e
argument_list|,
literal|"Unable to kill segment"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|safeNonRecursiveDelete
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitDropTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|dataSourceName
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DRUID_DATA_SOURCE
argument_list|)
argument_list|,
literal|"DataSource name is null !"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteData
operator|==
literal|true
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Dropping with purge all the data for data source {}"
argument_list|,
name|dataSourceName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataSegment
argument_list|>
name|dataSegmentList
init|=
name|DruidStorageHandlerUtils
operator|.
name|getDataSegmentList
argument_list|(
name|connector
argument_list|,
name|druidMetadataStorageTablesConfig
argument_list|,
name|dataSourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataSegmentList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Nothing to delete for data source {}"
argument_list|,
name|dataSourceName
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|DataSegment
name|dataSegment
range|:
name|dataSegmentList
control|)
block|{
try|try
block|{
name|deleteSegment
argument_list|(
name|dataSegment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentLoadingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while deleting segment [%s]"
argument_list|,
name|dataSegment
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|DruidStorageHandlerUtils
operator|.
name|disableDataSource
argument_list|(
name|connector
argument_list|,
name|druidMetadataStorageTablesConfig
argument_list|,
name|dataSourceName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully dropped druid data source {}"
argument_list|,
name|dataSourceName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitInsertTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"commit insert into table {} overwrite {}"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
name|this
operator|.
name|publishSegments
argument_list|(
name|table
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preInsertTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|rollbackInsertTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureOutputJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{
name|jobProperties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|DRUID_SEGMENT_VERSION
argument_list|,
operator|new
name|DateTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jobProperties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|DRUID_JOB_WORKING_DIRECTORY
argument_list|,
name|getStagingWorkingDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// DruidOutputFormat will write segments in an intermediate directory
name|jobProperties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|DRUID_SEGMENT_INTERMEDIATE_DIRECTORY
argument_list|,
name|getIntermediateSegmentDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureTableJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|configureJobConf
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// AM can not do Kerberos Auth so will do the input split generation in the HS2
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting {} to {} to enable split generation on HS2"
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AM_SPLIT_GENERATION
operator|.
name|toString
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AM_SPLIT_GENERATION
operator|.
name|toString
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|DruidStorageHandlerUtils
operator|.
name|addDependencyJars
argument_list|(
name|jobConf
argument_list|,
name|DruidRecordWriter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|DRUID_HIVE_STORAGE_HANDLER_ID
return|;
block|}
specifier|public
name|String
name|getUniqueId
parameter_list|()
block|{
if|if
condition|(
name|uniqueId
operator|==
literal|null
condition|)
block|{
name|uniqueId
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
argument_list|,
literal|"Hive query id is null"
argument_list|)
expr_stmt|;
block|}
return|return
name|uniqueId
return|;
block|}
specifier|private
name|Path
name|getStagingWorkingDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getRootWorkingDir
argument_list|()
argument_list|,
name|makeStagingName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|String
name|makeStagingName
parameter_list|()
block|{
return|return
literal|".staging-"
operator|.
name|concat
argument_list|(
name|getUniqueId
argument_list|()
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getSegmentDescriptorDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getStagingWorkingDir
argument_list|()
argument_list|,
name|SEGMENTS_DESCRIPTOR_DIR_NAME
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getIntermediateSegmentDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getStagingWorkingDir
argument_list|()
argument_list|,
name|INTERMEDIATE_SEGMENT_DIR_NAME
argument_list|)
return|;
block|}
specifier|private
name|void
name|cleanWorkingDir
parameter_list|()
block|{
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
try|try
block|{
name|fileSystem
operator|=
name|getStagingWorkingDir
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|delete
argument_list|(
name|getStagingWorkingDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got Exception while cleaning working directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getRootWorkingDir
parameter_list|()
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|rootWorkingDir
argument_list|)
condition|)
block|{
name|rootWorkingDir
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DRUID_WORKING_DIR
argument_list|)
expr_stmt|;
block|}
return|return
name|rootWorkingDir
return|;
block|}
specifier|private
specifier|static
name|HttpClient
name|makeHttpClient
parameter_list|(
name|Lifecycle
name|lifecycle
parameter_list|)
block|{
specifier|final
name|int
name|numConnection
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRUID_NUM_HTTP_CONNECTION
argument_list|)
decl_stmt|;
specifier|final
name|Period
name|readTimeout
init|=
operator|new
name|Period
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRUID_HTTP_READ_TIMEOUT
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Druid HTTP client with {} max parallel connections and {}ms read timeout"
argument_list|,
name|numConnection
argument_list|,
name|readTimeout
operator|.
name|toStandardDuration
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|HttpClient
name|httpClient
init|=
name|HttpClientInit
operator|.
name|createClient
argument_list|(
name|HttpClientConfig
operator|.
name|builder
argument_list|()
operator|.
name|withNumConnections
argument_list|(
name|numConnection
argument_list|)
operator|.
name|withReadTimeout
argument_list|(
operator|new
name|Period
argument_list|(
name|readTimeout
argument_list|)
operator|.
name|toStandardDuration
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|lifecycle
argument_list|)
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"building Kerberos Http Client"
argument_list|)
expr_stmt|;
return|return
operator|new
name|KerberosHttpClient
argument_list|(
name|httpClient
argument_list|)
return|;
block|}
return|return
name|httpClient
return|;
block|}
specifier|public
specifier|static
name|HttpClient
name|getHttpClient
parameter_list|()
block|{
return|return
name|HTTP_CLIENT
return|;
block|}
block|}
end_class

end_unit

