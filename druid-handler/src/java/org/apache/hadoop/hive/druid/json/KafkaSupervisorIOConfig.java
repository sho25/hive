begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|json
package|;
end_package

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|common
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Period
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class is copied from druid source code  * in order to avoid adding additional dependencies on druid-indexing-service.  */
end_comment

begin_class
specifier|public
class|class
name|KafkaSupervisorIOConfig
block|{
specifier|public
specifier|static
specifier|final
name|String
name|BOOTSTRAP_SERVERS_KEY
init|=
literal|"bootstrap.servers"
decl_stmt|;
specifier|private
specifier|final
name|String
name|topic
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|replicas
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|taskCount
decl_stmt|;
specifier|private
specifier|final
name|Duration
name|taskDuration
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|consumerProperties
decl_stmt|;
specifier|private
specifier|final
name|Duration
name|startDelay
decl_stmt|;
specifier|private
specifier|final
name|Duration
name|period
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useEarliestOffset
decl_stmt|;
specifier|private
specifier|final
name|Duration
name|completionTimeout
decl_stmt|;
specifier|private
specifier|final
name|Optional
argument_list|<
name|Duration
argument_list|>
name|lateMessageRejectionPeriod
decl_stmt|;
specifier|private
specifier|final
name|Optional
argument_list|<
name|Duration
argument_list|>
name|earlyMessageRejectionPeriod
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipOffsetGaps
decl_stmt|;
annotation|@
name|JsonCreator
specifier|public
name|KafkaSupervisorIOConfig
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"topic"
argument_list|)
name|String
name|topic
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"replicas"
argument_list|)
name|Integer
name|replicas
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"taskCount"
argument_list|)
name|Integer
name|taskCount
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"taskDuration"
argument_list|)
name|Period
name|taskDuration
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"consumerProperties"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|consumerProperties
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"startDelay"
argument_list|)
name|Period
name|startDelay
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"period"
argument_list|)
name|Period
name|period
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"useEarliestOffset"
argument_list|)
name|Boolean
name|useEarliestOffset
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"completionTimeout"
argument_list|)
name|Period
name|completionTimeout
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"lateMessageRejectionPeriod"
argument_list|)
name|Period
name|lateMessageRejectionPeriod
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"earlyMessageRejectionPeriod"
argument_list|)
name|Period
name|earlyMessageRejectionPeriod
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"skipOffsetGaps"
argument_list|)
name|Boolean
name|skipOffsetGaps
parameter_list|)
block|{
name|this
operator|.
name|topic
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|topic
argument_list|,
literal|"topic"
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumerProperties
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|consumerProperties
argument_list|,
literal|"consumerProperties"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|consumerProperties
operator|.
name|get
argument_list|(
name|BOOTSTRAP_SERVERS_KEY
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"consumerProperties must contain entry for [%s]"
argument_list|,
name|BOOTSTRAP_SERVERS_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicas
operator|=
name|replicas
operator|!=
literal|null
condition|?
name|replicas
else|:
literal|1
expr_stmt|;
name|this
operator|.
name|taskCount
operator|=
name|taskCount
operator|!=
literal|null
condition|?
name|taskCount
else|:
literal|1
expr_stmt|;
name|this
operator|.
name|taskDuration
operator|=
name|defaultDuration
argument_list|(
name|taskDuration
argument_list|,
literal|"PT1H"
argument_list|)
expr_stmt|;
name|this
operator|.
name|startDelay
operator|=
name|defaultDuration
argument_list|(
name|startDelay
argument_list|,
literal|"PT5S"
argument_list|)
expr_stmt|;
name|this
operator|.
name|period
operator|=
name|defaultDuration
argument_list|(
name|period
argument_list|,
literal|"PT30S"
argument_list|)
expr_stmt|;
name|this
operator|.
name|useEarliestOffset
operator|=
name|useEarliestOffset
operator|!=
literal|null
condition|?
name|useEarliestOffset
else|:
literal|false
expr_stmt|;
name|this
operator|.
name|completionTimeout
operator|=
name|defaultDuration
argument_list|(
name|completionTimeout
argument_list|,
literal|"PT30M"
argument_list|)
expr_stmt|;
name|this
operator|.
name|lateMessageRejectionPeriod
operator|=
name|lateMessageRejectionPeriod
operator|==
literal|null
condition|?
name|Optional
operator|.
expr|<
name|Duration
operator|>
name|absent
argument_list|()
else|:
name|Optional
operator|.
name|of
argument_list|(
name|lateMessageRejectionPeriod
operator|.
name|toStandardDuration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|earlyMessageRejectionPeriod
operator|=
name|earlyMessageRejectionPeriod
operator|==
literal|null
condition|?
name|Optional
operator|.
expr|<
name|Duration
operator|>
name|absent
argument_list|()
else|:
name|Optional
operator|.
name|of
argument_list|(
name|earlyMessageRejectionPeriod
operator|.
name|toStandardDuration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipOffsetGaps
operator|=
name|skipOffsetGaps
operator|!=
literal|null
condition|?
name|skipOffsetGaps
else|:
literal|false
expr_stmt|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|String
name|getTopic
parameter_list|()
block|{
return|return
name|topic
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Integer
name|getReplicas
parameter_list|()
block|{
return|return
name|replicas
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Integer
name|getTaskCount
parameter_list|()
block|{
return|return
name|taskCount
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Duration
name|getTaskDuration
parameter_list|()
block|{
return|return
name|taskDuration
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConsumerProperties
parameter_list|()
block|{
return|return
name|consumerProperties
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Duration
name|getStartDelay
parameter_list|()
block|{
return|return
name|startDelay
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Duration
name|getPeriod
parameter_list|()
block|{
return|return
name|period
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|boolean
name|isUseEarliestOffset
parameter_list|()
block|{
return|return
name|useEarliestOffset
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Duration
name|getCompletionTimeout
parameter_list|()
block|{
return|return
name|completionTimeout
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Optional
argument_list|<
name|Duration
argument_list|>
name|getEarlyMessageRejectionPeriod
parameter_list|()
block|{
return|return
name|earlyMessageRejectionPeriod
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Optional
argument_list|<
name|Duration
argument_list|>
name|getLateMessageRejectionPeriod
parameter_list|()
block|{
return|return
name|lateMessageRejectionPeriod
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|boolean
name|isSkipOffsetGaps
parameter_list|()
block|{
return|return
name|skipOffsetGaps
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"KafkaSupervisorIOConfig{"
operator|+
literal|"topic='"
operator|+
name|topic
operator|+
literal|'\''
operator|+
literal|", replicas="
operator|+
name|replicas
operator|+
literal|", taskCount="
operator|+
name|taskCount
operator|+
literal|", taskDuration="
operator|+
name|taskDuration
operator|+
literal|", consumerProperties="
operator|+
name|consumerProperties
operator|+
literal|", startDelay="
operator|+
name|startDelay
operator|+
literal|", period="
operator|+
name|period
operator|+
literal|", useEarliestOffset="
operator|+
name|useEarliestOffset
operator|+
literal|", completionTimeout="
operator|+
name|completionTimeout
operator|+
literal|", lateMessageRejectionPeriod="
operator|+
name|lateMessageRejectionPeriod
operator|+
literal|", skipOffsetGaps="
operator|+
name|skipOffsetGaps
operator|+
literal|'}'
return|;
block|}
specifier|private
specifier|static
name|Duration
name|defaultDuration
parameter_list|(
specifier|final
name|Period
name|period
parameter_list|,
specifier|final
name|String
name|theDefault
parameter_list|)
block|{
return|return
operator|(
name|period
operator|==
literal|null
condition|?
operator|new
name|Period
argument_list|(
name|theDefault
argument_list|)
else|:
name|period
operator|)
operator|.
name|toStandardDuration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|KafkaSupervisorIOConfig
name|that
init|=
operator|(
name|KafkaSupervisorIOConfig
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|useEarliestOffset
operator|!=
name|that
operator|.
name|useEarliestOffset
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|skipOffsetGaps
operator|!=
name|that
operator|.
name|skipOffsetGaps
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|topic
operator|!=
literal|null
condition|?
operator|!
name|topic
operator|.
name|equals
argument_list|(
name|that
operator|.
name|topic
argument_list|)
else|:
name|that
operator|.
name|topic
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|replicas
operator|!=
literal|null
condition|?
operator|!
name|replicas
operator|.
name|equals
argument_list|(
name|that
operator|.
name|replicas
argument_list|)
else|:
name|that
operator|.
name|replicas
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|taskCount
operator|!=
literal|null
condition|?
operator|!
name|taskCount
operator|.
name|equals
argument_list|(
name|that
operator|.
name|taskCount
argument_list|)
else|:
name|that
operator|.
name|taskCount
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|taskDuration
operator|!=
literal|null
condition|?
operator|!
name|taskDuration
operator|.
name|equals
argument_list|(
name|that
operator|.
name|taskDuration
argument_list|)
else|:
name|that
operator|.
name|taskDuration
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|consumerProperties
operator|!=
literal|null
condition|?
operator|!
name|consumerProperties
operator|.
name|equals
argument_list|(
name|that
operator|.
name|consumerProperties
argument_list|)
else|:
name|that
operator|.
name|consumerProperties
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|startDelay
operator|!=
literal|null
condition|?
operator|!
name|startDelay
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startDelay
argument_list|)
else|:
name|that
operator|.
name|startDelay
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|period
operator|!=
literal|null
condition|?
operator|!
name|period
operator|.
name|equals
argument_list|(
name|that
operator|.
name|period
argument_list|)
else|:
name|that
operator|.
name|period
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|completionTimeout
operator|!=
literal|null
condition|?
operator|!
name|completionTimeout
operator|.
name|equals
argument_list|(
name|that
operator|.
name|completionTimeout
argument_list|)
else|:
name|that
operator|.
name|completionTimeout
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|lateMessageRejectionPeriod
operator|!=
literal|null
condition|?
operator|!
name|lateMessageRejectionPeriod
operator|.
name|equals
argument_list|(
name|that
operator|.
name|lateMessageRejectionPeriod
argument_list|)
else|:
name|that
operator|.
name|lateMessageRejectionPeriod
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|earlyMessageRejectionPeriod
operator|!=
literal|null
condition|?
name|earlyMessageRejectionPeriod
operator|.
name|equals
argument_list|(
name|that
operator|.
name|earlyMessageRejectionPeriod
argument_list|)
else|:
name|that
operator|.
name|earlyMessageRejectionPeriod
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|topic
operator|!=
literal|null
condition|?
name|topic
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|replicas
operator|!=
literal|null
condition|?
name|replicas
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|taskCount
operator|!=
literal|null
condition|?
name|taskCount
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|taskDuration
operator|!=
literal|null
condition|?
name|taskDuration
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|consumerProperties
operator|!=
literal|null
condition|?
name|consumerProperties
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|startDelay
operator|!=
literal|null
condition|?
name|startDelay
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|period
operator|!=
literal|null
condition|?
name|period
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|useEarliestOffset
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|completionTimeout
operator|!=
literal|null
condition|?
name|completionTimeout
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|lateMessageRejectionPeriod
operator|!=
literal|null
condition|?
name|lateMessageRejectionPeriod
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|earlyMessageRejectionPeriod
operator|!=
literal|null
condition|?
name|earlyMessageRejectionPeriod
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|skipOffsetGaps
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

