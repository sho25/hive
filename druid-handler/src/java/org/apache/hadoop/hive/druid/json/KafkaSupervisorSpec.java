begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|json
package|;
end_package

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|segment
operator|.
name|indexing
operator|.
name|DataSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonSubTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonTypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class is copied from druid source code  * in order to avoid adding additional dependencies on druid-indexing-service.  */
end_comment

begin_class
annotation|@
name|JsonTypeInfo
argument_list|(
name|use
operator|=
name|JsonTypeInfo
operator|.
name|Id
operator|.
name|NAME
argument_list|,
name|property
operator|=
literal|"type"
argument_list|)
annotation|@
name|JsonSubTypes
argument_list|(
block|{
annotation|@
name|JsonSubTypes
operator|.
name|Type
argument_list|(
name|name
operator|=
literal|"kafka"
argument_list|,
name|value
operator|=
name|KafkaSupervisorSpec
operator|.
name|class
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|KafkaSupervisorSpec
block|{
specifier|private
specifier|final
name|DataSchema
name|dataSchema
decl_stmt|;
specifier|private
specifier|final
name|KafkaSupervisorTuningConfig
name|tuningConfig
decl_stmt|;
specifier|private
specifier|final
name|KafkaSupervisorIOConfig
name|ioConfig
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
decl_stmt|;
annotation|@
name|JsonCreator
specifier|public
name|KafkaSupervisorSpec
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"dataSchema"
argument_list|)
name|DataSchema
name|dataSchema
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"tuningConfig"
argument_list|)
name|KafkaSupervisorTuningConfig
name|tuningConfig
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"ioConfig"
argument_list|)
name|KafkaSupervisorIOConfig
name|ioConfig
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"context"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
block|{
name|this
operator|.
name|dataSchema
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dataSchema
argument_list|,
literal|"dataSchema"
argument_list|)
expr_stmt|;
name|this
operator|.
name|tuningConfig
operator|=
name|tuningConfig
operator|!=
literal|null
condition|?
name|tuningConfig
else|:
operator|new
name|KafkaSupervisorTuningConfig
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|ioConfig
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ioConfig
argument_list|,
literal|"ioConfig"
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|DataSchema
name|getDataSchema
parameter_list|()
block|{
return|return
name|dataSchema
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|KafkaSupervisorTuningConfig
name|getTuningConfig
parameter_list|()
block|{
return|return
name|tuningConfig
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|KafkaSupervisorIOConfig
name|getIoConfig
parameter_list|()
block|{
return|return
name|ioConfig
return|;
block|}
annotation|@
name|JsonProperty
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"KafkaSupervisorSpec{"
operator|+
literal|"dataSchema="
operator|+
name|dataSchema
operator|+
literal|", tuningConfig="
operator|+
name|tuningConfig
operator|+
literal|", ioConfig="
operator|+
name|ioConfig
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KafkaSupervisorSpec
name|that
init|=
operator|(
name|KafkaSupervisorSpec
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|dataSchema
operator|!=
literal|null
condition|?
operator|!
name|dataSchema
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dataSchema
argument_list|)
else|:
name|that
operator|.
name|dataSchema
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|tuningConfig
operator|!=
literal|null
condition|?
operator|!
name|tuningConfig
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tuningConfig
argument_list|)
else|:
name|that
operator|.
name|tuningConfig
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ioConfig
operator|!=
literal|null
condition|?
operator|!
name|ioConfig
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ioConfig
argument_list|)
else|:
name|that
operator|.
name|ioConfig
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|context
operator|!=
literal|null
condition|?
name|context
operator|.
name|equals
argument_list|(
name|that
operator|.
name|context
argument_list|)
else|:
name|that
operator|.
name|context
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|dataSchema
operator|!=
literal|null
condition|?
name|dataSchema
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|tuningConfig
operator|!=
literal|null
condition|?
name|tuningConfig
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|ioConfig
operator|!=
literal|null
condition|?
name|ioConfig
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|context
operator|!=
literal|null
condition|?
name|context
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

