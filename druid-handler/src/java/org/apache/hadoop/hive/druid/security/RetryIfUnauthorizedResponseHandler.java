begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|security
package|;
end_package

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|response
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|response
operator|.
name|HttpResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class handling retry on Unauthorized responses.  *  * @param<Intermediate> Intermediate response type.  * @param<Final> final result type.  */
end_comment

begin_class
specifier|public
class|class
name|RetryIfUnauthorizedResponseHandler
parameter_list|<
name|Intermediate
parameter_list|,
name|Final
parameter_list|>
implements|implements
name|HttpResponseHandler
argument_list|<
name|RetryResponseHolder
argument_list|<
name|Intermediate
argument_list|>
argument_list|,
name|RetryResponseHolder
argument_list|<
name|Final
argument_list|>
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RetryIfUnauthorizedResponseHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HttpResponseHandler
argument_list|<
name|Intermediate
argument_list|,
name|Final
argument_list|>
name|httpResponseHandler
decl_stmt|;
specifier|public
name|RetryIfUnauthorizedResponseHandler
parameter_list|(
name|HttpResponseHandler
argument_list|<
name|Intermediate
argument_list|,
name|Final
argument_list|>
name|httpResponseHandler
parameter_list|)
block|{
name|this
operator|.
name|httpResponseHandler
operator|=
name|httpResponseHandler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClientResponse
argument_list|<
name|RetryResponseHolder
argument_list|<
name|Intermediate
argument_list|>
argument_list|>
name|handleResponse
parameter_list|(
name|HttpResponse
name|httpResponse
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"UnauthorizedResponseHandler - Got response status {}"
argument_list|,
name|httpResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpResponse
operator|.
name|getStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|HttpResponseStatus
operator|.
name|UNAUTHORIZED
argument_list|)
condition|)
block|{
comment|// Drain the buffer
comment|//noinspection ResultOfMethodCallIgnored
name|httpResponse
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|ClientResponse
operator|.
name|unfinished
argument_list|(
name|RetryResponseHolder
operator|.
name|retry
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|wrap
argument_list|(
name|httpResponseHandler
operator|.
name|handleResponse
argument_list|(
name|httpResponse
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClientResponse
argument_list|<
name|RetryResponseHolder
argument_list|<
name|Intermediate
argument_list|>
argument_list|>
name|handleChunk
parameter_list|(
name|ClientResponse
argument_list|<
name|RetryResponseHolder
argument_list|<
name|Intermediate
argument_list|>
argument_list|>
name|clientResponse
parameter_list|,
name|HttpChunk
name|httpChunk
parameter_list|)
block|{
if|if
condition|(
name|clientResponse
operator|.
name|getObj
argument_list|()
operator|.
name|shouldRetry
argument_list|()
condition|)
block|{
comment|// Drain the buffer
comment|//noinspection ResultOfMethodCallIgnored
name|httpChunk
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|clientResponse
return|;
block|}
else|else
block|{
return|return
name|wrap
argument_list|(
name|httpResponseHandler
operator|.
name|handleChunk
argument_list|(
name|unwrap
argument_list|(
name|clientResponse
argument_list|)
argument_list|,
name|httpChunk
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClientResponse
argument_list|<
name|RetryResponseHolder
argument_list|<
name|Final
argument_list|>
argument_list|>
name|done
parameter_list|(
name|ClientResponse
argument_list|<
name|RetryResponseHolder
argument_list|<
name|Intermediate
argument_list|>
argument_list|>
name|clientResponse
parameter_list|)
block|{
if|if
condition|(
name|clientResponse
operator|.
name|getObj
argument_list|()
operator|.
name|shouldRetry
argument_list|()
condition|)
block|{
return|return
name|ClientResponse
operator|.
name|finished
argument_list|(
name|RetryResponseHolder
operator|.
name|retry
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|wrap
argument_list|(
name|httpResponseHandler
operator|.
name|done
argument_list|(
name|unwrap
argument_list|(
name|clientResponse
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ClientResponse
argument_list|<
name|RetryResponseHolder
argument_list|<
name|Intermediate
argument_list|>
argument_list|>
name|clientResponse
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|httpResponseHandler
operator|.
name|exceptionCaught
argument_list|(
name|unwrap
argument_list|(
name|clientResponse
argument_list|)
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ClientResponse
argument_list|<
name|RetryResponseHolder
argument_list|<
name|T
argument_list|>
argument_list|>
name|wrap
parameter_list|(
name|ClientResponse
argument_list|<
name|T
argument_list|>
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|.
name|isFinished
argument_list|()
condition|)
block|{
return|return
name|ClientResponse
operator|.
name|finished
argument_list|(
operator|new
name|RetryResponseHolder
argument_list|<>
argument_list|(
literal|false
argument_list|,
name|response
operator|.
name|getObj
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ClientResponse
operator|.
name|unfinished
argument_list|(
operator|new
name|RetryResponseHolder
argument_list|<>
argument_list|(
literal|false
argument_list|,
name|response
operator|.
name|getObj
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ClientResponse
argument_list|<
name|T
argument_list|>
name|unwrap
parameter_list|(
name|ClientResponse
argument_list|<
name|RetryResponseHolder
argument_list|<
name|T
argument_list|>
argument_list|>
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|.
name|isFinished
argument_list|()
condition|)
block|{
return|return
name|ClientResponse
operator|.
name|finished
argument_list|(
name|response
operator|.
name|getObj
argument_list|()
operator|.
name|getObj
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ClientResponse
operator|.
name|unfinished
argument_list|(
name|response
operator|.
name|getObj
argument_list|()
operator|.
name|getObj
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

