begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|io
operator|.
name|druid
operator|.
name|java
operator|.
name|util
operator|.
name|common
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|druid
operator|.
name|json
operator|.
name|KafkaSupervisorReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|StorageHandlerInfo
import|;
end_import

begin_comment
comment|/**  * DruidStorageHandlerInfo provides a runtime information for DruidStorageHandler.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
class|class
name|DruidStorageHandlerInfo
implements|implements
name|StorageHandlerInfo
block|{
specifier|public
specifier|static
specifier|final
name|StorageHandlerInfo
name|UNREACHABLE
init|=
operator|new
name|StorageHandlerInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|formatAsText
parameter_list|()
block|{
return|return
literal|"Druid Overlord is Unreachable, Runtime Status : unknown"
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|KafkaSupervisorReport
name|kafkaSupervisorReport
decl_stmt|;
name|DruidStorageHandlerInfo
parameter_list|(
name|KafkaSupervisorReport
name|kafkaSupervisorReport
parameter_list|)
block|{
name|this
operator|.
name|kafkaSupervisorReport
operator|=
name|kafkaSupervisorReport
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|formatAsText
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Druid Storage Handler Runtime Status for "
operator|+
name|kafkaSupervisorReport
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"kafkaPartitions="
operator|+
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getPartitions
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"activeTasks="
operator|+
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getActiveTasks
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"publishingTasks="
operator|+
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getPublishingTasks
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getLatestOffsets
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"latestOffsets="
operator|+
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getLatestOffsets
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getMinimumLag
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"minimumLag="
operator|+
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getMinimumLag
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getAggregateLag
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"aggregateLag="
operator|+
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getAggregateLag
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getOffsetsLastUpdated
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lastUpdateTime="
operator|+
name|kafkaSupervisorReport
operator|.
name|getPayload
argument_list|()
operator|.
name|getOffsetsLastUpdated
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

