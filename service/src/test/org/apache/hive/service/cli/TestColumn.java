begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestColumn
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAllIntegerTypeValues
parameter_list|()
block|{
name|Map
argument_list|<
name|Type
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|integerTypesAndValues
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Type
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add TINYINT values
name|integerTypesAndValues
operator|.
name|put
argument_list|(
name|Type
operator|.
name|TINYINT_TYPE
argument_list|,
name|Arrays
operator|.
expr|<
name|Object
operator|>
name|asList
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|,
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add SMALLINT values
name|integerTypesAndValues
operator|.
name|put
argument_list|(
name|Type
operator|.
name|SMALLINT_TYPE
argument_list|,
name|Arrays
operator|.
expr|<
name|Object
operator|>
name|asList
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|,
name|Short
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add INT values
name|integerTypesAndValues
operator|.
name|put
argument_list|(
name|Type
operator|.
name|INT_TYPE
argument_list|,
name|Arrays
operator|.
expr|<
name|Object
operator|>
name|asList
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add BIGINT values
name|integerTypesAndValues
operator|.
name|put
argument_list|(
name|Type
operator|.
name|BIGINT_TYPE
argument_list|,
name|Arrays
operator|.
expr|<
name|Object
operator|>
name|asList
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate all integer type values are stored correctly
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|integerTypesAndValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Type
name|type
init|=
operator|(
name|Type
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Column
name|c
init|=
operator|new
name|Column
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|v
range|:
name|values
control|)
block|{
name|c
operator|.
name|addValue
argument_list|(
name|type
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|type
argument_list|,
name|c
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|c
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloatAndDoubleValues
parameter_list|()
block|{
name|Column
name|floatColumn
init|=
operator|new
name|Column
argument_list|(
name|Type
operator|.
name|FLOAT_TYPE
argument_list|)
decl_stmt|;
name|floatColumn
operator|.
name|addValue
argument_list|(
name|Type
operator|.
name|FLOAT_TYPE
argument_list|,
literal|1.1f
argument_list|)
expr_stmt|;
name|floatColumn
operator|.
name|addValue
argument_list|(
name|Type
operator|.
name|FLOAT_TYPE
argument_list|,
literal|2.033f
argument_list|)
expr_stmt|;
comment|// FLOAT_TYPE is treated as DOUBLE_TYPE
name|assertEquals
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
name|floatColumn
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|floatColumn
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1
argument_list|,
name|floatColumn
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.033
argument_list|,
name|floatColumn
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Column
name|doubleColumn
init|=
operator|new
name|Column
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|)
decl_stmt|;
name|doubleColumn
operator|.
name|addValue
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
literal|1.1
argument_list|)
expr_stmt|;
name|doubleColumn
operator|.
name|addValue
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
literal|2.033
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
name|doubleColumn
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|doubleColumn
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1
argument_list|,
name|doubleColumn
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.033
argument_list|,
name|doubleColumn
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBooleanValues
parameter_list|()
block|{
name|Column
name|boolColumn
init|=
operator|new
name|Column
argument_list|(
name|Type
operator|.
name|BOOLEAN_TYPE
argument_list|)
decl_stmt|;
name|boolColumn
operator|.
name|addValue
argument_list|(
name|Type
operator|.
name|BOOLEAN_TYPE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|boolColumn
operator|.
name|addValue
argument_list|(
name|Type
operator|.
name|BOOLEAN_TYPE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|BOOLEAN_TYPE
argument_list|,
name|boolColumn
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|boolColumn
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|boolColumn
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|boolColumn
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringValues
parameter_list|()
block|{
name|Column
name|stringColumn
init|=
operator|new
name|Column
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|)
decl_stmt|;
name|stringColumn
operator|.
name|addValue
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
literal|"12abc456"
argument_list|)
expr_stmt|;
name|stringColumn
operator|.
name|addValue
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
literal|"~special$&string"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|stringColumn
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stringColumn
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12abc456"
argument_list|,
name|stringColumn
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"~special$&string"
argument_list|,
name|stringColumn
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryValues
parameter_list|()
block|{
name|Column
name|binaryColumn
init|=
operator|new
name|Column
argument_list|(
name|Type
operator|.
name|BINARY_TYPE
argument_list|)
decl_stmt|;
name|binaryColumn
operator|.
name|addValue
argument_list|(
name|Type
operator|.
name|BINARY_TYPE
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|-
literal|1
block|,
literal|0
block|,
literal|3
block|,
literal|4
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|BINARY_TYPE
argument_list|,
name|binaryColumn
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|binaryColumn
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|1
block|,
literal|0
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|binaryColumn
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

