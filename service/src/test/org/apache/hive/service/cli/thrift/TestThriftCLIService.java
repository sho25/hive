begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|CLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|SessionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|HiveSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_class
specifier|public
class|class
name|TestThriftCLIService
extends|extends
name|TestCase
block|{
comment|/**    * Test setting {@link HiveConf.ConfVars}} config parameter    *   HIVE_SERVER2_ENABLE_DOAS for kerberos secure mode    * @throws IOException    * @throws LoginException    * @throws HiveSQLException    */
specifier|public
name|void
name|testDoAs
parameter_list|()
throws|throws
name|HiveSQLException
throws|,
name|LoginException
throws|,
name|IOException
block|{
name|HiveConf
name|hconf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"default value of hive server2 doAs should be true"
argument_list|,
name|hconf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|)
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
argument_list|,
name|HiveAuthFactory
operator|.
name|AuthTypes
operator|.
name|KERBEROS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|CLIService
name|cliService
init|=
operator|new
name|CLIService
argument_list|()
decl_stmt|;
name|cliService
operator|.
name|init
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|ThriftCLIService
name|tcliService
init|=
operator|new
name|ThriftCLIService
argument_list|(
name|cliService
argument_list|)
decl_stmt|;
name|TOpenSessionReq
name|req
init|=
operator|new
name|TOpenSessionReq
argument_list|()
decl_stmt|;
name|req
operator|.
name|setUsername
argument_list|(
literal|"testuser1"
argument_list|)
expr_stmt|;
name|SessionHandle
name|sHandle
init|=
name|tcliService
operator|.
name|getSessionHandle
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|SessionManager
name|sManager
init|=
name|getSessionManager
argument_list|(
name|cliService
operator|.
name|getServices
argument_list|()
argument_list|)
decl_stmt|;
name|HiveSession
name|session
init|=
name|sManager
operator|.
name|getSession
argument_list|(
name|sHandle
argument_list|)
decl_stmt|;
comment|//Proxy class for doing doAs on all calls is used when doAs is enabled
comment|// and kerberos security is on
name|assertTrue
argument_list|(
literal|"check if session class is a proxy"
argument_list|,
name|session
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SessionManager
name|getSessionManager
parameter_list|(
name|Collection
argument_list|<
name|Service
argument_list|>
name|services
parameter_list|)
block|{
for|for
control|(
name|Service
name|s
range|:
name|services
control|)
block|{
if|if
condition|(
name|s
operator|instanceof
name|SessionManager
condition|)
block|{
return|return
operator|(
name|SessionManager
operator|)
name|s
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

