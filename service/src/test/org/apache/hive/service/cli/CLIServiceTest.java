begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * CLIServiceTest.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CLIServiceTest
block|{
specifier|protected
specifier|static
name|CLIServiceClient
name|client
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{   }
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|createSessionTest
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionHandle
name|sessionHandle
init|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|sessionHandle
operator|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getFunctionsTest
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionHandle
name|sessionHandle
init|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|OperationHandle
name|opHandle
init|=
name|client
operator|.
name|getFunctions
argument_list|(
name|sessionHandle
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|TableSchema
name|schema
init|=
name|client
operator|.
name|getResultSetMetadata
argument_list|(
name|opHandle
argument_list|)
decl_stmt|;
name|ColumnDescriptor
name|columnDesc
init|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FUNCTION_CAT"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FUNCTION_SCHEM"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FUNCTION_NAME"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"REMARKS"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FUNCTION_TYPE"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|INT_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SPECIFIC_NAME"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getInfoTest
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionHandle
name|sessionHandle
init|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|GetInfoValue
name|value
init|=
name|client
operator|.
name|getInfo
argument_list|(
name|sessionHandle
argument_list|,
name|GetInfoType
operator|.
name|CLI_DBMS_NAME
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|value
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|client
operator|.
name|getInfo
argument_list|(
name|sessionHandle
argument_list|,
name|GetInfoType
operator|.
name|CLI_SERVER_NAME
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|value
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|client
operator|.
name|getInfo
argument_list|(
name|sessionHandle
argument_list|,
name|GetInfoType
operator|.
name|CLI_DBMS_VER
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|value
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

