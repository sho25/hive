begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryDisplay
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * CLIServiceTest.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CLIServiceTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLIServiceTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|CLIServiceClient
name|client
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{   }
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|testOpenSession
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionHandle
name|sessionHandle
init|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|sessionHandle
operator|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFunctions
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionHandle
name|sessionHandle
init|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|OperationHandle
name|opHandle
init|=
name|client
operator|.
name|getFunctions
argument_list|(
name|sessionHandle
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|TableSchema
name|schema
init|=
name|client
operator|.
name|getResultSetMetadata
argument_list|(
name|opHandle
argument_list|)
decl_stmt|;
name|ColumnDescriptor
name|columnDesc
init|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FUNCTION_CAT"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FUNCTION_SCHEM"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FUNCTION_NAME"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"REMARKS"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FUNCTION_TYPE"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|INT_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|=
name|schema
operator|.
name|getColumnDescriptorAt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SPECIFIC_NAME"
argument_list|,
name|columnDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columnDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionHandle
name|sessionHandle
init|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|GetInfoValue
name|value
init|=
name|client
operator|.
name|getInfo
argument_list|(
name|sessionHandle
argument_list|,
name|GetInfoType
operator|.
name|CLI_DBMS_NAME
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|value
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|client
operator|.
name|getInfo
argument_list|(
name|sessionHandle
argument_list|,
name|GetInfoType
operator|.
name|CLI_SERVER_NAME
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|value
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|client
operator|.
name|getInfo
argument_list|(
name|sessionHandle
argument_list|,
name|GetInfoType
operator|.
name|CLI_DBMS_VER
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|value
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the blocking execution of a query    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testExecuteStatement
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SessionHandle
name|sessionHandle
init|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|OperationHandle
name|opHandle
decl_stmt|;
name|String
name|queryString
init|=
literal|"SET "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
operator|+
literal|" = false"
decl_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|queryString
operator|=
literal|"DROP TABLE IF EXISTS TEST_EXEC"
expr_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// Create a test table
name|queryString
operator|=
literal|"CREATE TABLE TEST_EXEC(ID STRING)"
expr_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// Blocking execute
name|queryString
operator|=
literal|"SELECT ID+1 FROM TEST_EXEC"
expr_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|OperationStatus
name|opStatus
init|=
name|client
operator|.
name|getOperationStatus
argument_list|(
name|opHandle
argument_list|)
decl_stmt|;
name|checkOperationTimes
argument_list|(
name|opHandle
argument_list|,
name|opStatus
argument_list|)
expr_stmt|;
comment|// Expect query to be completed now
name|assertEquals
argument_list|(
literal|"Query should be finished"
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
name|client
operator|.
name|getOperationStatus
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// Cleanup
name|queryString
operator|=
literal|"DROP TABLE IF EXISTS TEST_EXEC"
expr_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test async execution of a well-formed and a malformed query with different long polling durations    * - Test malformed query with default long polling timeout    * - Test well-formed query with default long polling timeout    * - Test well-formed query with long polling timeout set to 0    * - Test well-formed query with long polling timeout set to 500 millis    * - Test well-formed query cancellation    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testExecuteStatementAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
literal|"TEST_EXEC_ASYNC"
decl_stmt|;
name|String
name|columnDefinitions
init|=
literal|"(ID STRING)"
decl_stmt|;
name|String
name|queryString
decl_stmt|;
comment|// Open a session and set up the test data
name|SessionHandle
name|sessionHandle
init|=
name|setupTestData
argument_list|(
name|tableName
argument_list|,
name|columnDefinitions
argument_list|,
name|confOverlay
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|OperationState
name|state
init|=
literal|null
decl_stmt|;
name|OperationHandle
name|opHandle
decl_stmt|;
name|OperationStatus
name|opStatus
init|=
literal|null
decl_stmt|;
comment|// Change lock manager, otherwise unit-test doesn't go through
name|queryString
operator|=
literal|"SET "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
operator|+
literal|" = false"
expr_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// Set longPollingTimeout to a custom value for different test cases
name|long
name|longPollingTimeout
decl_stmt|;
comment|/**      * Execute a malformed async query with default config,      * to give a compile time error.      * (compilation is done synchronous as of now)      */
name|longPollingTimeout
operator|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LONG_POLLING_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|queryString
operator|=
literal|"SELECT NON_EXISTING_COLUMN FROM "
operator|+
name|tableName
expr_stmt|;
try|try
block|{
name|runAsyncAndWait
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|,
name|OperationState
operator|.
name|ERROR
argument_list|,
name|longPollingTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
comment|// expected error
block|}
comment|/**      * Execute a malformed async query with default config,      * to give a runtime time error.      * Also check that the sqlState and errorCode should be set      */
name|queryString
operator|=
literal|"CREATE TABLE NON_EXISTING_TAB (ID STRING) location 'invalid://localhost:10000/a/b/c'"
expr_stmt|;
name|opStatus
operator|=
name|runAsyncAndWait
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|,
name|OperationState
operator|.
name|ERROR
argument_list|,
name|longPollingTimeout
argument_list|)
expr_stmt|;
comment|// sqlState, errorCode should be set
name|assertEquals
argument_list|(
name|opStatus
operator|.
name|getOperationException
argument_list|()
operator|.
name|getSQLState
argument_list|()
argument_list|,
literal|"08S01"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|opStatus
operator|.
name|getOperationException
argument_list|()
operator|.
name|getErrorCode
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/**      * Execute an async query with default config      */
name|queryString
operator|=
literal|"SELECT ID+1 FROM "
operator|+
name|tableName
expr_stmt|;
name|runAsyncAndWait
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
name|longPollingTimeout
argument_list|)
expr_stmt|;
comment|/**      * Execute an async query with long polling timeout set to 0      */
name|longPollingTimeout
operator|=
literal|0
expr_stmt|;
name|queryString
operator|=
literal|"SELECT ID+1 FROM "
operator|+
name|tableName
expr_stmt|;
name|runAsyncAndWait
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
name|longPollingTimeout
argument_list|)
expr_stmt|;
comment|/**      * Execute an async query with long polling timeout set to 500 millis      */
name|longPollingTimeout
operator|=
literal|500
expr_stmt|;
name|queryString
operator|=
literal|"SELECT ID+1 FROM "
operator|+
name|tableName
expr_stmt|;
name|runAsyncAndWait
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
name|longPollingTimeout
argument_list|)
expr_stmt|;
comment|/**      * Cancellation test      */
name|queryString
operator|=
literal|"SELECT ID+1 FROM "
operator|+
name|tableName
expr_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatementAsync
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cancelling "
operator|+
name|opHandle
argument_list|)
expr_stmt|;
name|client
operator|.
name|cancelOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|OperationStatus
name|operationStatus
init|=
name|client
operator|.
name|getOperationStatus
argument_list|(
name|opHandle
argument_list|)
decl_stmt|;
name|checkOperationTimes
argument_list|(
name|opHandle
argument_list|,
name|operationStatus
argument_list|)
expr_stmt|;
name|state
operator|=
name|client
operator|.
name|getOperationStatus
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getState
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|opHandle
operator|+
literal|" after cancelling, state= "
operator|+
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query should be cancelled"
argument_list|,
name|OperationState
operator|.
name|CANCELED
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// Cleanup
name|queryString
operator|=
literal|"DROP TABLE "
operator|+
name|tableName
expr_stmt|;
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|syncThreadStart
parameter_list|(
specifier|final
name|CountDownLatch
name|cdlIn
parameter_list|,
specifier|final
name|CountDownLatch
name|cdlOut
parameter_list|)
block|{
name|cdlIn
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|cdlOut
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecuteStatementParallel
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
literal|"TEST_EXEC_PARALLEL"
decl_stmt|;
name|String
name|columnDefinitions
init|=
literal|"(ID STRING)"
decl_stmt|;
comment|// Open a session and set up the test data
name|SessionHandle
name|sessionHandle
init|=
name|setupTestData
argument_list|(
name|tableName
argument_list|,
name|columnDefinitions
argument_list|,
name|confOverlay
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|long
name|longPollingTimeout
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LONG_POLLING_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LONG_POLLING_TIMEOUT
operator|.
name|varname
argument_list|,
name|longPollingTimeout
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|int
name|THREAD_COUNT
init|=
literal|10
decl_stmt|,
name|QUERY_COUNT
init|=
literal|10
decl_stmt|;
comment|// TODO: refactor this into an utility, LLAP tests use this pattern a lot
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|;
name|CountDownLatch
name|cdlIn
init|=
operator|new
name|CountDownLatch
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|,
name|cdlOut
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Callable
argument_list|<
name|Void
argument_list|>
index|[]
name|cs
init|=
operator|new
name|Callable
index|[
literal|3
index|]
decl_stmt|;
comment|// Create callables with different queries.
name|String
name|query
init|=
literal|"SELECT ID + %1$d FROM "
operator|+
name|tableName
decl_stmt|;
name|cs
index|[
literal|0
index|]
operator|=
name|createQueryCallable
argument_list|(
name|query
argument_list|,
name|confOverlay
argument_list|,
name|longPollingTimeout
argument_list|,
name|QUERY_COUNT
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
literal|true
argument_list|,
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"SELECT t1.ID, SUM(t2.ID) + %1$d FROM  "
operator|+
name|tableName
operator|+
literal|" t1 CROSS JOIN "
operator|+
name|tableName
operator|+
literal|" t2 GROUP BY t1.ID HAVING t1.ID> 1"
expr_stmt|;
name|cs
index|[
literal|1
index|]
operator|=
name|createQueryCallable
argument_list|(
name|query
argument_list|,
name|confOverlay
argument_list|,
name|longPollingTimeout
argument_list|,
name|QUERY_COUNT
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
literal|true
argument_list|,
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"SELECT b.a FROM (SELECT (t1.ID + %1$d) as a , t2.* FROM  "
operator|+
name|tableName
operator|+
literal|" t1 INNER JOIN "
operator|+
name|tableName
operator|+
literal|" t2 ON t1.ID = t2.ID WHERE t2.ID> 2) b"
expr_stmt|;
name|cs
index|[
literal|2
index|]
operator|=
name|createQueryCallable
argument_list|(
name|query
argument_list|,
name|confOverlay
argument_list|,
name|longPollingTimeout
argument_list|,
name|QUERY_COUNT
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
literal|true
argument_list|,
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FutureTask
argument_list|<
name|Void
argument_list|>
index|[]
name|tasks
init|=
operator|new
name|FutureTask
index|[
name|THREAD_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|THREAD_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|tasks
index|[
name|i
index|]
operator|=
operator|new
name|FutureTask
argument_list|<
name|Void
argument_list|>
argument_list|(
name|cs
index|[
name|i
operator|%
name|cs
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|tasks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cdlIn
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait for all threads to be ready.
name|cdlOut
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Release them at the same time.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|THREAD_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|tasks
index|[
name|i
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
comment|// Cleanup
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
literal|"DROP TABLE "
operator|+
name|tableName
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|CompileLockTestSleepHook
implements|implements
name|HiveSemanticAnalyzerHook
block|{
annotation|@
name|Override
specifier|public
name|ASTNode
name|preAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// do nothing
block|}
return|return
name|ast
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
throws|throws
name|SemanticException
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobalCompileLockTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"TEST_COMPILE_LOCK_TIMEOUT"
decl_stmt|;
name|String
name|columnDefinitions
init|=
literal|"(ID STRING)"
decl_stmt|;
comment|// Open a session and set up the test data
name|SessionHandle
name|sessionHandle
init|=
name|setupTestData
argument_list|(
name|tableName
argument_list|,
name|columnDefinitions
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|int
name|THREAD_COUNT
init|=
literal|3
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FutureTask
argument_list|<
name|Void
argument_list|>
index|[]
name|tasks
init|=
operator|(
name|FutureTask
argument_list|<
name|Void
argument_list|>
index|[]
operator|)
operator|new
name|FutureTask
index|[
name|THREAD_COUNT
index|]
decl_stmt|;
name|long
name|longPollingTimeoutMs
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// Larger than max compile duration used in test
comment|// 1st query acquires the lock and takes 20 secs to compile
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
name|getConfOverlay
argument_list|(
literal|0
argument_list|,
name|longPollingTimeoutMs
argument_list|)
decl_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
name|CompileLockTestSleepHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"SELECT 0 FROM "
operator|+
name|tableName
decl_stmt|;
name|tasks
index|[
literal|0
index|]
operator|=
operator|new
name|FutureTask
argument_list|<
name|Void
argument_list|>
argument_list|(
name|createQueryCallable
argument_list|(
name|query
argument_list|,
name|confOverlay
argument_list|,
name|longPollingTimeoutMs
argument_list|,
literal|1
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|tasks
index|[
literal|0
index|]
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// 2nd query's session has compile lock timeout of 1 sec, so it should
comment|// not be able to acquire the lock within that time period
name|confOverlay
operator|=
name|getConfOverlay
argument_list|(
literal|1
argument_list|,
name|longPollingTimeoutMs
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"SELECT 1 FROM "
operator|+
name|tableName
expr_stmt|;
name|tasks
index|[
literal|1
index|]
operator|=
operator|new
name|FutureTask
argument_list|<
name|Void
argument_list|>
argument_list|(
name|createQueryCallable
argument_list|(
name|query
argument_list|,
name|confOverlay
argument_list|,
name|longPollingTimeoutMs
argument_list|,
literal|1
argument_list|,
name|OperationState
operator|.
name|ERROR
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|tasks
index|[
literal|1
index|]
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// 3rd query's session has compile lock timeout of 100 secs, so it should
comment|// be able to acquire the lock and finish successfully
name|confOverlay
operator|=
name|getConfOverlay
argument_list|(
literal|100
argument_list|,
name|longPollingTimeoutMs
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"SELECT 2 FROM "
operator|+
name|tableName
expr_stmt|;
name|tasks
index|[
literal|2
index|]
operator|=
operator|new
name|FutureTask
argument_list|<
name|Void
argument_list|>
argument_list|(
name|createQueryCallable
argument_list|(
name|query
argument_list|,
name|confOverlay
argument_list|,
name|longPollingTimeoutMs
argument_list|,
literal|1
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|tasks
index|[
literal|2
index|]
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|boolean
name|foundExpectedException
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|THREAD_COUNT
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|tasks
index|[
name|i
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|ErrorMsg
operator|.
name|COMPILE_LOCK_TIMED_OUT
operator|.
name|getMsg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|foundExpectedException
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|foundExpectedException
argument_list|)
expr_stmt|;
comment|// Cleanup
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
literal|"DROP TABLE "
operator|+
name|tableName
argument_list|,
name|getConfOverlay
argument_list|(
literal|0
argument_list|,
name|longPollingTimeoutMs
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfOverlay
parameter_list|(
name|long
name|compileLockTimeoutSecs
parameter_list|,
name|long
name|longPollingTimeoutMs
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PARALLEL_COMPILATION
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LONG_POLLING_TIMEOUT
operator|.
name|varname
argument_list|,
name|longPollingTimeoutMs
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
if|if
condition|(
name|compileLockTimeoutSecs
operator|>
literal|0
condition|)
block|{
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_COMPILE_LOCK_TIMEOUT
operator|.
name|varname
argument_list|,
name|compileLockTimeoutSecs
operator|+
literal|"s"
argument_list|)
expr_stmt|;
block|}
return|return
name|confOverlay
return|;
block|}
specifier|private
name|Callable
argument_list|<
name|Void
argument_list|>
name|createQueryCallable
parameter_list|(
specifier|final
name|String
name|queryStringFormat
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|,
specifier|final
name|long
name|longPollingTimeout
parameter_list|,
specifier|final
name|int
name|queryCount
parameter_list|,
specifier|final
name|OperationState
name|expectedOperationState
parameter_list|,
specifier|final
name|boolean
name|syncThreadStart
parameter_list|,
specifier|final
name|CountDownLatch
name|cdlIn
parameter_list|,
specifier|final
name|CountDownLatch
name|cdlOut
parameter_list|)
block|{
return|return
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|syncThreadStart
condition|)
block|{
name|syncThreadStart
argument_list|(
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
block|}
name|SessionHandle
name|sessionHandle
init|=
name|openSession
argument_list|(
name|confOverlay
argument_list|)
decl_stmt|;
name|OperationHandle
index|[]
name|hs
init|=
operator|new
name|OperationHandle
index|[
name|queryCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|String
name|queryString
init|=
name|String
operator|.
name|format
argument_list|(
name|queryStringFormat
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitting "
operator|+
name|i
argument_list|)
expr_stmt|;
name|hs
index|[
name|i
index|]
operator|=
name|client
operator|.
name|executeStatementAsync
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|hs
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|waitForAsyncQuery
argument_list|(
name|hs
index|[
name|i
index|]
argument_list|,
name|expectedOperationState
argument_list|,
name|longPollingTimeout
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
comment|/**    * Sets up a test specific table with the given column definitions and config    * @param tableName    * @param columnDefinitions    * @param confOverlay    * @throws Exception    */
specifier|private
name|SessionHandle
name|setupTestData
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|columnDefinitions
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionHandle
name|sessionHandle
init|=
name|openSession
argument_list|(
name|confOverlay
argument_list|)
decl_stmt|;
name|createTestTable
argument_list|(
name|tableName
argument_list|,
name|columnDefinitions
argument_list|,
name|confOverlay
argument_list|,
name|sessionHandle
argument_list|)
expr_stmt|;
return|return
name|sessionHandle
return|;
block|}
specifier|private
name|SessionHandle
name|openSession
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|SessionHandle
name|sessionHandle
init|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|,
name|confOverlay
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setIsHiveServerQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Pretend we are in HS2.
name|String
name|queryString
init|=
literal|"SET "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
operator|+
literal|" = false"
decl_stmt|;
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
return|return
name|sessionHandle
return|;
block|}
specifier|private
name|void
name|createTestTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|columnDefinitions
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|,
name|SessionHandle
name|sessionHandle
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|String
name|queryString
decl_stmt|;
comment|// Drop the table if it exists
name|queryString
operator|=
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
expr_stmt|;
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Create a test table
name|queryString
operator|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
name|columnDefinitions
expr_stmt|;
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
block|}
specifier|private
name|OperationStatus
name|runAsyncAndWait
parameter_list|(
name|SessionHandle
name|sessionHandle
parameter_list|,
name|String
name|queryString
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|,
name|OperationState
name|expectedState
parameter_list|,
name|long
name|longPollingTimeout
parameter_list|)
throws|throws
name|HiveSQLException
block|{
comment|// Timeout for the iteration in case of asynchronous execute
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LONG_POLLING_TIMEOUT
operator|.
name|varname
argument_list|,
name|longPollingTimeout
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|OperationHandle
name|h
init|=
name|client
operator|.
name|executeStatementAsync
argument_list|(
name|sessionHandle
argument_list|,
name|queryString
argument_list|,
name|confOverlay
argument_list|)
decl_stmt|;
return|return
name|waitForAsyncQuery
argument_list|(
name|h
argument_list|,
name|expectedState
argument_list|,
name|longPollingTimeout
argument_list|)
return|;
block|}
specifier|private
name|OperationStatus
name|waitForAsyncQuery
parameter_list|(
name|OperationHandle
name|opHandle
parameter_list|,
name|OperationState
name|expectedState
parameter_list|,
name|long
name|longPollingTimeout
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|long
name|testIterationTimeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|100000
decl_stmt|;
name|long
name|longPollingStart
decl_stmt|;
name|long
name|longPollingEnd
decl_stmt|;
name|long
name|longPollingTimeDelta
decl_stmt|;
name|OperationStatus
name|opStatus
init|=
literal|null
decl_stmt|;
name|OperationState
name|state
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Break if iteration times out
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|testIterationTimeout
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Polling timed out"
argument_list|)
expr_stmt|;
break|break;
block|}
name|longPollingStart
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Long polling starts at: "
operator|+
name|longPollingStart
argument_list|)
expr_stmt|;
name|opStatus
operator|=
name|client
operator|.
name|getOperationStatus
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|state
operator|=
name|opStatus
operator|.
name|getState
argument_list|()
expr_stmt|;
name|longPollingEnd
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Long polling ends at: "
operator|+
name|longPollingEnd
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Polling: "
operator|+
name|opHandle
operator|+
literal|" count="
operator|+
operator|(
operator|++
name|count
operator|)
operator|+
literal|" state="
operator|+
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|OperationState
operator|.
name|CANCELED
operator|||
name|state
operator|==
name|OperationState
operator|.
name|CLOSED
operator|||
name|state
operator|==
name|OperationState
operator|.
name|FINISHED
operator|||
name|state
operator|==
name|OperationState
operator|.
name|ERROR
condition|)
block|{
break|break;
block|}
else|else
block|{
comment|// Verify that getOperationStatus returned only after the long polling timeout
name|longPollingTimeDelta
operator|=
name|longPollingEnd
operator|-
name|longPollingStart
expr_stmt|;
comment|// Scale down by a factor of 0.9 to account for approximate values
name|assertTrue
argument_list|(
name|longPollingTimeDelta
operator|-
literal|0.9
operator|*
name|longPollingTimeout
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedState
argument_list|,
name|client
operator|.
name|getOperationStatus
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
return|return
name|opStatus
return|;
block|}
comment|/**    * Test per statement configuration overlay.    * Create a table using hiveconf: var substitution, with the conf var passed    * via confOverlay.Verify the confOverlay works for the query and does set the    * value in the session configuration    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testConfOverlay
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionHandle
name|sessionHandle
init|=
name|client
operator|.
name|openSession
argument_list|(
literal|"tom"
argument_list|,
literal|"password"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|String
name|tabName
init|=
literal|"TEST_CONF_EXEC"
decl_stmt|;
name|String
name|tabNameVar
init|=
literal|"tabNameVar"
decl_stmt|;
name|String
name|setLockMgr
init|=
literal|"SET "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
operator|+
literal|" = false"
decl_stmt|;
name|OperationHandle
name|opHandle
init|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|setLockMgr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|String
name|dropTable
init|=
literal|"DROP TABLE IF EXISTS "
operator|+
name|tabName
decl_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|dropTable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// set a pass a property to operation and check if its set the query config
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|tabNameVar
argument_list|,
name|tabName
argument_list|)
expr_stmt|;
comment|// execute statement with the conf overlay
name|String
name|createTab
init|=
literal|"CREATE TABLE ${hiveconf:"
operator|+
name|tabNameVar
operator|+
literal|"} (id int)"
decl_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|createTab
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// query should pass and create the table
name|assertEquals
argument_list|(
literal|"Query should be finished"
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
name|client
operator|.
name|getOperationStatus
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// select from  the new table should pass
name|String
name|selectTab
init|=
literal|"SELECT * FROM "
operator|+
name|tabName
decl_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|selectTab
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// query should pass and create the table
name|assertEquals
argument_list|(
literal|"Query should be finished"
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|,
name|client
operator|.
name|getOperationStatus
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// the settings in conf overlay should not be part of session config
comment|// another query referring that property with the conf overlay should fail
name|selectTab
operator|=
literal|"SELECT * FROM ${hiveconf:"
operator|+
name|tabNameVar
operator|+
literal|"}"
expr_stmt|;
try|try
block|{
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|selectTab
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Query should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
comment|// cleanup
name|dropTable
operator|=
literal|"DROP TABLE IF EXISTS "
operator|+
name|tabName
expr_stmt|;
name|opHandle
operator|=
name|client
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|dropTable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTaskStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
literal|"TEST_EXEC_ASYNC"
decl_stmt|;
name|String
name|columnDefinitions
init|=
literal|"(ID STRING)"
decl_stmt|;
comment|// Open a session and set up the test data
name|SessionHandle
name|sessionHandle
init|=
name|setupTestData
argument_list|(
name|tableName
argument_list|,
name|columnDefinitions
argument_list|,
name|confOverlay
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
comment|// nonblocking execute
name|String
name|select
init|=
literal|"SELECT ID + ' ' FROM TEST_EXEC_ASYNC"
decl_stmt|;
name|OperationHandle
name|ophandle
init|=
name|client
operator|.
name|executeStatementAsync
argument_list|(
name|sessionHandle
argument_list|,
name|select
argument_list|,
name|confOverlay
argument_list|)
decl_stmt|;
name|OperationStatus
name|status
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|status
operator|=
name|client
operator|.
name|getOperationStatus
argument_list|(
name|ophandle
argument_list|)
expr_stmt|;
name|checkOperationTimes
argument_list|(
name|ophandle
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|OperationState
name|state
init|=
name|status
operator|.
name|getState
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Polling: "
operator|+
name|ophandle
operator|+
literal|" count="
operator|+
operator|(
operator|++
name|count
operator|)
operator|+
literal|" state="
operator|+
name|state
argument_list|)
expr_stmt|;
name|String
name|jsonTaskStatus
init|=
name|status
operator|.
name|getTaskStatus
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|jsonTaskStatus
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|jsonTaskStatus
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueryDisplay
operator|.
name|TaskDisplay
argument_list|>
name|taskStatuses
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|in
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|List
argument_list|<
name|QueryDisplay
operator|.
name|TaskDisplay
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
name|checkTaskStatuses
argument_list|(
name|taskStatuses
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"task statuses: "
operator|+
name|jsonTaskStatus
argument_list|)
expr_stmt|;
comment|// TaskDisplay doesn't have a toString, using json
if|if
condition|(
name|OperationState
operator|.
name|CANCELED
operator|==
name|state
operator|||
name|state
operator|==
name|OperationState
operator|.
name|CLOSED
operator|||
name|state
operator|==
name|OperationState
operator|.
name|FINISHED
operator|||
name|state
operator|==
name|OperationState
operator|.
name|ERROR
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkTaskStatuses
parameter_list|(
name|List
argument_list|<
name|QueryDisplay
operator|.
name|TaskDisplay
argument_list|>
name|taskDisplays
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|taskDisplays
argument_list|)
expr_stmt|;
for|for
control|(
name|QueryDisplay
operator|.
name|TaskDisplay
name|taskDisplay
range|:
name|taskDisplays
control|)
block|{
switch|switch
condition|(
name|taskDisplay
operator|.
name|taskState
condition|)
block|{
case|case
name|INITIALIZED
case|:
case|case
name|QUEUED
case|:
name|assertNull
argument_list|(
name|taskDisplay
operator|.
name|getExternalHandle
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|taskDisplay
operator|.
name|getBeginTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|taskDisplay
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|taskDisplay
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|taskDisplay
operator|.
name|getErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|taskDisplay
operator|.
name|getReturnValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|RUNNING
case|:
if|if
condition|(
name|taskDisplay
operator|.
name|getTaskType
argument_list|()
operator|==
name|StageType
operator|.
name|MAPRED
operator|||
name|taskDisplay
operator|.
name|getTaskType
argument_list|()
operator|==
name|StageType
operator|.
name|MAPREDLOCAL
condition|)
block|{
name|assertNotNull
argument_list|(
name|taskDisplay
operator|.
name|getExternalHandle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|taskDisplay
operator|.
name|getBeginTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|taskDisplay
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|taskDisplay
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|taskDisplay
operator|.
name|getErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|taskDisplay
operator|.
name|getReturnValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FINISHED
case|:
if|if
condition|(
name|taskDisplay
operator|.
name|getTaskType
argument_list|()
operator|==
name|StageType
operator|.
name|MAPRED
operator|||
name|taskDisplay
operator|.
name|getTaskType
argument_list|()
operator|==
name|StageType
operator|.
name|MAPREDLOCAL
condition|)
block|{
name|assertNotNull
argument_list|(
name|taskDisplay
operator|.
name|getExternalHandle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|taskDisplay
operator|.
name|getBeginTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|taskDisplay
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|taskDisplay
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNKNOWN
case|:
default|default:
name|fail
argument_list|(
literal|"unknown task status: "
operator|+
name|taskDisplay
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkOperationTimes
parameter_list|(
name|OperationHandle
name|operationHandle
parameter_list|,
name|OperationStatus
name|status
parameter_list|)
block|{
name|OperationState
name|state
init|=
name|status
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|getOperationStarted
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|OperationState
operator|.
name|CANCELED
operator|==
name|state
operator|||
name|state
operator|==
name|OperationState
operator|.
name|CLOSED
operator|||
name|state
operator|==
name|OperationState
operator|.
name|FINISHED
operator|||
name|state
operator|==
name|OperationState
operator|.
name|ERROR
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"##OP "
operator|+
name|operationHandle
operator|.
name|getHandleIdentifier
argument_list|()
operator|+
literal|" STATE:"
operator|+
name|status
operator|.
name|getState
argument_list|()
operator|+
literal|" START:"
operator|+
name|status
operator|.
name|getOperationStarted
argument_list|()
operator|+
literal|" END:"
operator|+
name|status
operator|.
name|getOperationCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|getOperationCompleted
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getOperationCompleted
argument_list|()
operator|-
name|status
operator|.
name|getOperationStarted
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

