begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestCookieSigner.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestCookieSigner
block|{
specifier|private
specifier|static
specifier|final
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|CookieSigner
name|cs
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|cs
operator|=
operator|new
name|CookieSigner
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|RAN
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyAndExtract
parameter_list|()
block|{
name|String
name|originalStr
init|=
literal|"cu=scott"
decl_stmt|;
name|String
name|signedStr
init|=
name|cs
operator|.
name|signCookie
argument_list|(
name|originalStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|originalStr
argument_list|,
name|cs
operator|.
name|verifyAndExtract
argument_list|(
name|signedStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyAndExtractNoSignature
parameter_list|()
block|{
name|String
name|originalStr
init|=
literal|"cu=scott"
decl_stmt|;
name|String
name|signedStr
init|=
name|cs
operator|.
name|signCookie
argument_list|(
name|originalStr
argument_list|)
decl_stmt|;
name|String
name|modifedSignedStr
init|=
name|signedStr
operator|.
name|replace
argument_list|(
literal|"&s="
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|cs
operator|.
name|verifyAndExtract
argument_list|(
name|modifedSignedStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid input sign: "
operator|+
name|modifedSignedStr
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"Expected IllegalArgumentException due to no signature"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyAndExtractInvalidSignature
parameter_list|()
block|{
name|String
name|originalStr
init|=
literal|"cu=scott"
decl_stmt|;
name|String
name|signedStr
init|=
name|cs
operator|.
name|signCookie
argument_list|(
name|originalStr
argument_list|)
decl_stmt|;
name|String
name|modifedSignedStr
init|=
name|signedStr
operator|.
name|replace
argument_list|(
literal|"&s="
argument_list|,
literal|"&s=abc"
argument_list|)
decl_stmt|;
try|try
block|{
name|cs
operator|.
name|verifyAndExtract
argument_list|(
name|modifedSignedStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid sign, original = "
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"Expected IllegalArgumentException checking signature"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

