begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|User
block|{
specifier|private
specifier|final
name|String
name|dn
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
specifier|private
name|User
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|dn
operator|=
name|builder
operator|.
name|dn
expr_stmt|;
name|id
operator|=
name|builder
operator|.
name|id
expr_stmt|;
name|password
operator|=
name|builder
operator|.
name|password
expr_stmt|;
block|}
specifier|public
name|String
name|getDn
parameter_list|()
block|{
return|return
name|dn
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
name|Credentials
name|credentialsWithDn
parameter_list|()
block|{
return|return
name|Credentials
operator|.
name|of
argument_list|(
name|dn
argument_list|,
name|password
argument_list|)
return|;
block|}
specifier|public
name|Credentials
name|credentialsWithId
parameter_list|()
block|{
return|return
name|Credentials
operator|.
name|of
argument_list|(
name|id
argument_list|,
name|password
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
specifier|private
name|String
name|dn
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{     }
specifier|public
name|Builder
name|dn
parameter_list|(
name|String
name|dn
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dn
argument_list|,
literal|"DN should not be NULL"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|dn
operator|==
literal|null
argument_list|,
literal|"DN has been set already"
argument_list|)
expr_stmt|;
name|this
operator|.
name|dn
operator|=
name|dn
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|id
argument_list|,
literal|"ID should not be NULL"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|id
operator|==
literal|null
argument_list|,
literal|"ID has been set already"
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|password
argument_list|,
literal|"Password should not be NULL"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|password
operator|==
literal|null
argument_list|,
literal|"Password has been set already"
argument_list|)
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|useIdForPassword
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|id
operator|!=
literal|null
argument_list|,
literal|"User ID has not been set"
argument_list|)
expr_stmt|;
return|return
name|password
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|User
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|dn
argument_list|,
literal|"DN is required"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|id
argument_list|,
literal|"ID is required"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|password
argument_list|,
literal|"Password is required"
argument_list|)
expr_stmt|;
return|return
operator|new
name|User
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

