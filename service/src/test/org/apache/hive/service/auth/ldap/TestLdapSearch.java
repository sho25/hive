begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|ldap
operator|.
name|LdapTestUtils
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestLdapSearch
block|{
annotation|@
name|Mock
specifier|private
name|DirContext
name|ctx
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|LdapSearch
name|search
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|NamingException
block|{
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|search
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnWhenUserDnPositive
parameter_list|()
throws|throws
name|NamingException
block|{
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|searchResult
init|=
name|mockNamingEnumeration
argument_list|(
literal|"CN=User1,OU=org1,DC=foo,DC=bar"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|searchResult
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|NamingException
operator|.
name|class
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"CN=User1,OU=org1,DC=foo,DC=bar"
decl_stmt|;
name|String
name|actual
init|=
name|search
operator|.
name|findUserDn
argument_list|(
literal|"CN=User1,OU=org1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnWhenUserDnNegativeDuplicates
parameter_list|()
throws|throws
name|NamingException
block|{
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|searchResult
init|=
name|mockNamingEnumeration
argument_list|(
literal|"CN=User1,OU=org1,DC=foo,DC=bar"
argument_list|,
literal|"CN=User1,OU=org2,DC=foo,DC=bar"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|searchResult
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|search
operator|.
name|findUserDn
argument_list|(
literal|"CN=User1,DC=foo,DC=bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnWhenUserDnNegativeNone
parameter_list|()
throws|throws
name|NamingException
block|{
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|searchResult
init|=
name|mockEmptyNamingEnumeration
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|searchResult
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|search
operator|.
name|findUserDn
argument_list|(
literal|"CN=User1,DC=foo,DC=bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnWhenUserPatternFoundBySecondPattern
parameter_list|()
throws|throws
name|NamingException
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERDNPATTERN
argument_list|,
literal|"CN=%s,OU=org1,DC=foo,DC=bar:CN=%s,OU=org2,DC=foo,DC=bar"
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|emptyResult
init|=
name|mockEmptyNamingEnumeration
argument_list|()
decl_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|validResult
init|=
name|mockNamingEnumeration
argument_list|(
literal|"CN=User1,OU=org2,DC=foo,DC=bar"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyResult
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|validResult
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"CN=User1,OU=org2,DC=foo,DC=bar"
decl_stmt|;
name|String
name|actual
init|=
name|search
operator|.
name|findUserDn
argument_list|(
literal|"User1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|search
argument_list|(
name|eq
argument_list|(
literal|"OU=org1,DC=foo,DC=bar"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"CN=User1"
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|search
argument_list|(
name|eq
argument_list|(
literal|"OU=org2,DC=foo,DC=bar"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"CN=User1"
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnWhenUserPatternFoundByFirstPattern
parameter_list|()
throws|throws
name|NamingException
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERDNPATTERN
argument_list|,
literal|"CN=%s,OU=org1,DC=foo,DC=bar:CN=%s,OU=org2,DC=foo,DC=bar"
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|emptyResult
init|=
name|mockEmptyNamingEnumeration
argument_list|()
decl_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|validResult
init|=
name|mockNamingEnumeration
argument_list|(
literal|"CN=User1,OU=org2,DC=foo,DC=bar"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|validResult
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyResult
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"CN=User1,OU=org2,DC=foo,DC=bar"
decl_stmt|;
name|String
name|actual
init|=
name|search
operator|.
name|findUserDn
argument_list|(
literal|"User1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|search
argument_list|(
name|eq
argument_list|(
literal|"OU=org1,DC=foo,DC=bar"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"CN=User1"
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnWhenUserPatternFoundByUniqueIdentifier
parameter_list|()
throws|throws
name|NamingException
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERDNPATTERN
argument_list|,
literal|"CN=%s,OU=org1,DC=foo,DC=bar"
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|validResult
init|=
name|mockNamingEnumeration
argument_list|(
literal|"CN=User1,OU=org1,DC=foo,DC=bar"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|validResult
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"CN=User1,OU=org1,DC=foo,DC=bar"
decl_stmt|;
name|String
name|actual
init|=
name|search
operator|.
name|findUserDn
argument_list|(
literal|"User1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|search
argument_list|(
name|eq
argument_list|(
literal|"OU=org1,DC=foo,DC=bar"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"CN=User1"
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|search
argument_list|(
name|eq
argument_list|(
literal|"OU=org1,DC=foo,DC=bar"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"uid=User1"
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnWhenUserPatternFoundByUniqueIdentifierNegativeNone
parameter_list|()
throws|throws
name|NamingException
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERDNPATTERN
argument_list|,
literal|"CN=%s,OU=org1,DC=foo,DC=bar"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|search
operator|.
name|findUserDn
argument_list|(
literal|"User1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnWhenUserPatternFoundByUniqueIdentifierNegativeMany
parameter_list|()
throws|throws
name|NamingException
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERDNPATTERN
argument_list|,
literal|"CN=%s,OU=org1,DC=foo,DC=bar"
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|manyResult
init|=
name|mockNamingEnumeration
argument_list|(
literal|"CN=User1,OU=org1,DC=foo,DC=bar"
argument_list|,
literal|"CN=User12,OU=org1,DC=foo,DC=bar"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|manyResult
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|search
operator|.
name|findUserDn
argument_list|(
literal|"User1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindGroupsForUser
parameter_list|()
throws|throws
name|NamingException
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GROUPDNPATTERN
argument_list|,
literal|"CN=%s,OU=org1,DC=foo,DC=bar"
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|groupsResult
init|=
name|mockNamingEnumeration
argument_list|(
literal|"CN=Group1,OU=org1,DC=foo,DC=bar"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|eq
argument_list|(
literal|"OU=org1,DC=foo,DC=bar"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"User1"
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|groupsResult
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CN=Group1,OU=org1,DC=foo,DC=bar"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|search
operator|.
name|findGroupsForUser
argument_list|(
literal|"CN=User1,OU=org1,DC=foo,DC=bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecuteCustomQuery
parameter_list|()
throws|throws
name|NamingException
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_BASEDN
argument_list|,
literal|"dc=example,dc=com"
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|customQueryResult
init|=
name|mockNamingEnumeration
argument_list|(
name|mockSearchResult
argument_list|(
literal|"uid=group1,ou=Groups,dc=example,dc=com"
argument_list|,
name|mockAttributes
argument_list|(
literal|"member"
argument_list|,
literal|"uid=user1,ou=People,dc=example,dc=com"
argument_list|)
argument_list|)
argument_list|,
name|mockSearchResult
argument_list|(
literal|"uid=group2,ou=Groups,dc=example,dc=com"
argument_list|,
name|mockAttributes
argument_list|(
literal|"member"
argument_list|,
literal|"uid=user2,ou=People,dc=example,dc=com"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|eq
argument_list|(
literal|"dc=example,dc=com"
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|customQueryResult
argument_list|)
expr_stmt|;
name|search
operator|=
operator|new
name|LdapSearch
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"uid=group1,ou=Groups,dc=example,dc=com"
argument_list|,
literal|"uid=user1,ou=People,dc=example,dc=com"
argument_list|,
literal|"uid=group2,ou=Groups,dc=example,dc=com"
argument_list|,
literal|"uid=user2,ou=People,dc=example,dc=com"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|search
operator|.
name|executeCustomQuery
argument_list|(
literal|"(&(objectClass=groupOfNames)(|(cn=group1)(cn=group2)))"
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

