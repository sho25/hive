begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|LdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|LdapAuthenticationProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|LdapAuthenticationTestCase
block|{
specifier|private
specifier|final
name|LdapAuthenticationProviderImpl
name|ldapProvider
decl_stmt|;
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|private
name|LdapAuthenticationTestCase
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|ldapProvider
operator|=
operator|new
name|LdapAuthenticationProviderImpl
argument_list|(
name|builder
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertAuthenticatePasses
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
block|{
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|credentials
operator|.
name|getUser
argument_list|()
argument_list|,
name|credentials
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Authentication failed for user '%s' with password '%s'"
argument_list|,
name|credentials
operator|.
name|getUser
argument_list|()
argument_list|,
name|credentials
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|assertAuthenticateFails
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
block|{
name|assertAuthenticateFails
argument_list|(
name|credentials
operator|.
name|getUser
argument_list|()
argument_list|,
name|credentials
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertAuthenticateFailsUsingWrongPassword
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
block|{
name|assertAuthenticateFails
argument_list|(
name|credentials
operator|.
name|getUser
argument_list|()
argument_list|,
literal|"not"
operator|+
name|credentials
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertAuthenticateFails
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
block|{
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected authentication to fail for %s"
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|expected
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Expected authentication exception"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|HiveConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
name|overrides
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|Builder
name|baseDN
parameter_list|(
name|String
name|baseDN
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_BASEDN
argument_list|,
name|baseDN
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|guidKey
parameter_list|(
name|String
name|guidKey
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GUIDKEY
argument_list|,
name|guidKey
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|userDNPatterns
parameter_list|(
name|String
modifier|...
name|userDNPatterns
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERDNPATTERN
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|':'
argument_list|)
operator|.
name|join
argument_list|(
name|userDNPatterns
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|userFilters
parameter_list|(
name|String
modifier|...
name|userFilters
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERFILTER
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|userFilters
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|groupDNPatterns
parameter_list|(
name|String
modifier|...
name|groupDNPatterns
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GROUPDNPATTERN
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|':'
argument_list|)
operator|.
name|join
argument_list|(
name|groupDNPatterns
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|groupFilters
parameter_list|(
name|String
modifier|...
name|groupFilters
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GROUPFILTER
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|groupFilters
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|groupClassKey
parameter_list|(
name|String
name|groupClassKey
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GROUPCLASS_KEY
argument_list|,
name|groupClassKey
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|ldapServer
parameter_list|(
name|LdapServer
name|ldapServer
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_URL
argument_list|,
literal|"ldap://localhost:"
operator|+
name|ldapServer
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|customQuery
parameter_list|(
name|String
name|customQuery
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_CUSTOMLDAPQUERY
argument_list|,
name|customQuery
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|groupMembership
parameter_list|(
name|String
name|groupMembership
parameter_list|)
block|{
return|return
name|setVarOnce
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GROUPMEMBERSHIP_KEY
argument_list|,
name|groupMembership
argument_list|)
return|;
block|}
specifier|private
name|Builder
name|setVarOnce
parameter_list|(
name|HiveConf
operator|.
name|ConfVars
name|confVar
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|overrides
operator|.
name|containsKey
argument_list|(
name|confVar
argument_list|)
argument_list|,
literal|"Property %s has been set already"
argument_list|,
name|confVar
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|confVar
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|void
name|overrideHiveConf
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hive.root.logger"
argument_list|,
literal|"DEBUG,console"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HiveConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|overrides
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|LdapAuthenticationTestCase
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|conf
operator|==
literal|null
argument_list|,
literal|"Test Case Builder should not be reused. Please create a new instance."
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|overrideHiveConf
argument_list|()
expr_stmt|;
return|return
operator|new
name|LdapAuthenticationTestCase
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

