begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|com
operator|.
name|unboundid
operator|.
name|ldap
operator|.
name|listener
operator|.
name|InMemoryDirectoryServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|unboundid
operator|.
name|ldap
operator|.
name|listener
operator|.
name|InMemoryDirectoryServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|unboundid
operator|.
name|ldap
operator|.
name|listener
operator|.
name|InMemoryListenerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|unboundid
operator|.
name|ldap
operator|.
name|sdk
operator|.
name|DN
import|;
end_import

begin_import
import|import
name|com
operator|.
name|unboundid
operator|.
name|ldap
operator|.
name|sdk
operator|.
name|LDAPConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|unboundid
operator|.
name|ldif
operator|.
name|LDIFReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests that use an in-memory LDAP Server (unboundID) to test HS2's  * LDAP Authentication Provider. The ldap server uses a sample ldif  * file to load ldap data into its directory.  * Any of Hive's LDAP Configuration properties are set on the HiveConf  * prior to the initialization of LdapAuthenticationProviderImpl.  * Each test uses a different set of properties to alter the Atn  * provider behavior.  */
end_comment

begin_class
specifier|public
class|class
name|TestLdapAtnProviderWithLdapServer
block|{
specifier|private
specifier|static
name|String
name|ldapUrl
decl_stmt|;
specifier|private
specifier|static
name|InMemoryDirectoryServer
name|server
decl_stmt|;
specifier|private
specifier|static
name|InMemoryDirectoryServerConfig
name|config
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|hiveConfBackup
decl_stmt|;
specifier|private
specifier|static
name|LdapAuthenticationProviderImpl
name|ldapProvider
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|serverPort
init|=
literal|33300
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|DN
name|dn
init|=
operator|new
name|DN
argument_list|(
literal|"dc=example, dc=com"
argument_list|)
decl_stmt|;
name|config
operator|=
operator|new
name|InMemoryDirectoryServerConfig
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSchema
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|config
operator|.
name|addAdditionalBindCredentials
argument_list|(
literal|"cn=user1,ou=People,dc=example,dc=com"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|addAdditionalBindCredentials
argument_list|(
literal|"cn=user2,ou=People,dc=example,dc=com"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
comment|// listener config only necessary if you want to make sure that the
comment|// server listens on port 33300, otherwise a free random port will
comment|// be picked at runtime - which might be even better for tests btw.
name|config
operator|.
name|setListenerConfigs
argument_list|(
operator|new
name|InMemoryListenerConfig
argument_list|(
literal|"myListener"
argument_list|,
literal|null
argument_list|,
name|serverPort
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|InMemoryDirectoryServer
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|server
operator|.
name|startListening
argument_list|()
expr_stmt|;
name|File
name|ldifFile
init|=
operator|new
name|File
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"org/apache/hive/service/auth/ldapdata.ldif"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|LDIFReader
name|ldifReader
init|=
operator|new
name|LDIFReader
argument_list|(
name|ldifFile
argument_list|)
decl_stmt|;
comment|// import your test data from ldif files
name|server
operator|.
name|importFromLDIF
argument_list|(
literal|true
argument_list|,
name|ldifReader
argument_list|)
expr_stmt|;
name|LDAPConnection
name|conn
init|=
name|server
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|server
operator|.
name|getListenPort
argument_list|()
decl_stmt|;
name|ldapUrl
operator|=
operator|new
name|String
argument_list|(
literal|"ldap://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|hiveConf
operator|.
name|writeXml
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
name|hiveConfBackup
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.root.logger"
argument_list|,
literal|"TRACE,console"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.server2.authentication.ldap.url"
argument_list|,
name|ldapUrl
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"dc=example,dc=com"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|hiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|writeXml
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|ldapProvider
operator|=
operator|new
name|LdapAuthenticationProviderImpl
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|initLdapAtn
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|hiveProperties
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|deleted
init|=
operator|new
name|File
argument_list|(
name|hiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|hiveConf
operator|.
name|writeXml
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.root.logger"
argument_list|,
literal|"TRACE,console"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.server2.authentication.ldap.url"
argument_list|,
name|ldapUrl
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"cn=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|String
name|key
decl_stmt|;
name|String
name|value
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|key
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|value
operator|=
name|hiveProperties
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|hiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|writeXml
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|ldapProvider
operator|=
operator|new
name|LdapAuthenticationProviderImpl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|shutDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|String
name|user
decl_stmt|;
name|user
operator|=
literal|"cn=user1,ou=People,dc=example,dc=com"
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
literal|"cn=user2,ou=People,dc=example,dc=com"
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Authentication failed for user:"
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
literal|"user1,user2"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|String
name|user
decl_stmt|;
name|user
operator|=
literal|"cn=user1,ou=People,dc=example,dc=com"
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for user1 as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password user1, expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
literal|"cn=user2,ou=People,dc=example,dc=com"
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for user2 as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password user2, expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
literal|"cn=user1,ou=People,dc=example,dc=com"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication succeeded for user1 with password "
operator|+
literal|"user2, expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for user1 as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
literal|"cn=user2,ou=People,dc=example,dc=com"
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication failed for user2 with password user, "
operator|+
literal|"expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for user2 as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

