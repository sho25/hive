begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestQueryFactory
block|{
specifier|private
name|QueryFactory
name|queries
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GUIDKEY
argument_list|,
literal|"guid"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GROUPCLASS_KEY
argument_list|,
literal|"superGroups"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GROUPMEMBERSHIP_KEY
argument_list|,
literal|"member"
argument_list|)
expr_stmt|;
name|queries
operator|=
operator|new
name|QueryFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindGroupDnById
parameter_list|()
block|{
name|Query
name|q
init|=
name|queries
operator|.
name|findGroupDnById
argument_list|(
literal|"unique_group_id"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"(&(objectClass=superGroups)(guid=unique_group_id))"
decl_stmt|;
name|String
name|actual
init|=
name|q
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnByRdn
parameter_list|()
block|{
name|Query
name|q
init|=
name|queries
operator|.
name|findUserDnByRdn
argument_list|(
literal|"cn=User1"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"(&(|(objectClass=person)(objectClass=user)(objectClass=inetOrgPerson))(cn=User1))"
decl_stmt|;
name|String
name|actual
init|=
name|q
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindDnByPattern
parameter_list|()
block|{
name|Query
name|q
init|=
name|queries
operator|.
name|findDnByPattern
argument_list|(
literal|"cn=User1"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"(cn=User1)"
decl_stmt|;
name|String
name|actual
init|=
name|q
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUserDnByName
parameter_list|()
block|{
name|Query
name|q
init|=
name|queries
operator|.
name|findUserDnByName
argument_list|(
literal|"unique_user_id"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"(&(|(objectClass=person)(objectClass=user)(objectClass=inetOrgPerson))(|(uid=unique_user_id)(sAMAccountName=unique_user_id)))"
decl_stmt|;
name|String
name|actual
init|=
name|q
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindGroupsForUser
parameter_list|()
block|{
name|Query
name|q
init|=
name|queries
operator|.
name|findGroupsForUser
argument_list|(
literal|"user_name"
argument_list|,
literal|"user_Dn"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"(&(objectClass=superGroups)(|(member=user_Dn)(member=user_name)))"
decl_stmt|;
name|String
name|actual
init|=
name|q
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

