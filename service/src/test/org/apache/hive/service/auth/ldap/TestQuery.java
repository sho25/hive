begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestQuery
block|{
annotation|@
name|Test
specifier|public
name|void
name|testQueryBuilderFilter
parameter_list|()
block|{
name|Query
name|q
init|=
name|Query
operator|.
name|builder
argument_list|()
operator|.
name|filter
argument_list|(
literal|"test<uid_attr>=<value> query"
argument_list|)
operator|.
name|map
argument_list|(
literal|"uid_attr"
argument_list|,
literal|"uid"
argument_list|)
operator|.
name|map
argument_list|(
literal|"value"
argument_list|,
literal|"Hello!"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test uid=Hello! query"
argument_list|,
name|q
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|getControls
argument_list|()
operator|.
name|getCountLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryBuilderLimit
parameter_list|()
block|{
name|Query
name|q
init|=
name|Query
operator|.
name|builder
argument_list|()
operator|.
name|filter
argument_list|(
literal|"<key1>,<key2>"
argument_list|)
operator|.
name|map
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|map
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|limit
argument_list|(
literal|8
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value1,value2"
argument_list|,
name|q
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|q
operator|.
name|getControls
argument_list|()
operator|.
name|getCountLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryBuilderReturningAttributes
parameter_list|()
block|{
name|Query
name|q
init|=
name|Query
operator|.
name|builder
argument_list|()
operator|.
name|filter
argument_list|(
literal|"(query)"
argument_list|)
operator|.
name|returnAttribute
argument_list|(
literal|"attr1"
argument_list|)
operator|.
name|returnAttribute
argument_list|(
literal|"attr2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(query)"
argument_list|,
name|q
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"attr1"
block|,
literal|"attr2"
block|}
argument_list|,
name|q
operator|.
name|getControls
argument_list|()
operator|.
name|getReturningAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

