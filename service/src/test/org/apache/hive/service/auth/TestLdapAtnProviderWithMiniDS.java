begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateLdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ApplyLdifFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ContextEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreateDS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreateIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreatePartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|AbstractLdapTestUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|FrameworkRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_comment
comment|/**  * TestSuite to test Hive's LDAP Authentication provider with an  * in-process LDAP Server (Apache Directory Server instance).  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|FrameworkRunner
operator|.
name|class
argument_list|)
annotation|@
name|CreateLdapServer
argument_list|(
name|transports
operator|=
block|{
annotation|@
name|CreateTransport
argument_list|(
name|protocol
operator|=
literal|"LDAP"
argument_list|)
block|,
annotation|@
name|CreateTransport
argument_list|(
name|protocol
operator|=
literal|"LDAPS"
argument_list|)
block|}
argument_list|)
annotation|@
name|CreateDS
argument_list|(
name|partitions
operator|=
block|{
annotation|@
name|CreatePartition
argument_list|(
name|name
operator|=
literal|"example"
argument_list|,
name|suffix
operator|=
literal|"dc=example,dc=com"
argument_list|,
name|contextEntry
operator|=
annotation|@
name|ContextEntry
argument_list|(
name|entryLdif
operator|=
literal|"dn: dc=example,dc=com\n"
operator|+
literal|"dc: example\n"
operator|+
literal|"objectClass: top\n"
operator|+
literal|"objectClass: domain\n\n"
argument_list|)
argument_list|,
name|indexes
operator|=
block|{
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"objectClass"
argument_list|)
block|,
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"cn"
argument_list|)
block|,
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"uid"
argument_list|)
block|}
argument_list|)
block|}
argument_list|)
annotation|@
name|ApplyLdifFiles
argument_list|(
literal|"ldap/example.com.ldif"
argument_list|)
specifier|public
class|class
name|TestLdapAtnProviderWithMiniDS
extends|extends
name|AbstractLdapTestUnit
block|{
specifier|private
specifier|static
name|LdapAuthenticationProviderImpl
name|ldapProvider
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
decl_stmt|;
specifier|static
specifier|final
name|User
name|USER1
init|=
operator|new
name|User
argument_list|(
literal|"user1"
argument_list|,
literal|"user1"
argument_list|,
literal|"uid=user1,ou=People,dc=example,dc=com"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|User
name|USER2
init|=
operator|new
name|User
argument_list|(
literal|"user2"
argument_list|,
literal|"user2"
argument_list|,
literal|"uid=user2,ou=People,dc=example,dc=com"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|User
name|USER3
init|=
operator|new
name|User
argument_list|(
literal|"user3"
argument_list|,
literal|"user3"
argument_list|,
literal|"cn=user3,ou=People,dc=example,dc=com"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|User
name|USER4
init|=
operator|new
name|User
argument_list|(
literal|"user4"
argument_list|,
literal|"user4"
argument_list|,
literal|"cn=user4,ou=People,dc=example,dc=com"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|ldapProvider
operator|=
operator|new
name|LdapAuthenticationProviderImpl
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ldapServer
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|ldapServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initLdapAtn
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ldapUrl
init|=
literal|"ldap://localhost:"
operator|+
name|ldapServer
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.root.logger"
argument_list|,
literal|"DEBUG,console"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.server2.authentication.ldap.url"
argument_list|,
name|ldapUrl
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|ldapProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|hiveConf
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ldapProvider
operator|=
operator|new
name|LdapAuthenticationProviderImpl
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLDAPServer
parameter_list|()
throws|throws
name|Exception
block|{
name|initLdapAtn
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithShortname
parameter_list|()
throws|throws
name|Exception
block|{
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|String
name|user
decl_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithShortnameOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|String
name|user
decl_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindNegativeWithShortname
parameter_list|()
throws|throws
name|Exception
block|{
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication succeeded for "
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" with password user, expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindNegativeWithShortnameOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication succeeded for "
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" with password user, expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDN
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" user as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNWrongOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=DummyPeople,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNWrongConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=DummyPeople,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=DummyGroups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNBlankConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNBlankOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindNegativeWithDN
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" with password user, "
operator|+
literal|"expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindNegativeWithDNOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" with password user, "
operator|+
literal|"expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserFilterPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass userfilter"
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
try|try
block|{
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass userfilter"
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|","
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
try|try
block|{
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterPositive: Authentication failed for user, user is expected to pass userfilter"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserFilterNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user is expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user is expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user is expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user is expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER3
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupFilterPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group1,group2"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group2"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupFilterNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group1"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testGroupFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group2"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testGroupFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserAndGroupFilterPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|","
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group1,group2"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserAndGroupFilterNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|","
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group1"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER3
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER3
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserAndGroupFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomQueryPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.customLDAPQuery"
argument_list|,
literal|"(&(objectClass=person)(|(uid="
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|")(uid="
operator|+
name|USER4
operator|.
name|getUID
argument_list|()
operator|+
literal|")))"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER4
operator|.
name|getDN
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER4
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomQueryNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
comment|// ldap query will only return user1
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.customLDAPQuery"
argument_list|,
literal|"(&(objectClass=person)(uid="
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|"))"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testCustomQueryNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testCustomQueryNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    Test to test the LDAP Atn to use a custom LDAP query that returns    a) A set of group DNs    b) A combination of group(s) DN and user DN    LDAP atn is expected to extract the members of the group using the attribute value for    "hive.server2.authentication.ldap.groupMembershipKey"    */
annotation|@
name|Test
specifier|public
name|void
name|testCustomQueryWithGroupsPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.customLDAPQuery"
argument_list|,
literal|"(&(objectClass=groupOfNames)(|(cn=group1)(cn=group2)))"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryWithGroupsPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryWithGroupsPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryWithGroupsPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
comment|/* the following test uses a query that returns a group and a user entry.        the ldap atn should use the groupMembershipKey to identify the users for the returned group        and the authentication should succeed for the users of that group as well as the lone user4 in this case     */
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
comment|// following query should return group1 and user2
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.customLDAPQuery"
argument_list|,
literal|"(|(&(objectClass=groupOfNames)(cn=group1))(&(objectClass=person)(sn=user4)))"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryWithGroupsPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER4
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER4
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryWithGroupsPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryWithGroupsPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupMembershipKey"
argument_list|,
literal|"uniqueMember"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.customLDAPQuery"
argument_list|,
literal|"(&(objectClass=groupOfUniqueNames)(cn=group4))"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER4
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER4
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryWithGroupsPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER4
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER4
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryWithGroupsPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryWithGroupsPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomQueryWithGroupsNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.customLDAPQuery"
argument_list|,
literal|"(&(objectClass=groupOfNames)(|(cn=group1)(cn=group2)))"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER3
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER3
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testCustomQueryNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|user
operator|=
name|USER3
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER3
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testCustomQueryNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupFilterPositiveWithCustomGUID
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"cn=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.guidKey"
argument_list|,
literal|"cn"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group3"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER3
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER3
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER3
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER3
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupFilterPositiveWithCustomAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"cn=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group4"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.guidKey"
argument_list|,
literal|"cn"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupMembershipKey"
argument_list|,
literal|"uniqueMember"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupClassKey"
argument_list|,
literal|"groupOfUniqueNames"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|()
expr_stmt|;
name|user
operator|=
name|USER4
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER4
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER4
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER4
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|User
block|{
name|String
name|uid
decl_stmt|;
name|String
name|pwd
decl_stmt|;
name|String
name|ldapDN
decl_stmt|;
name|User
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|ldapDN
parameter_list|)
block|{
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|pwd
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|ldapDN
operator|=
name|ldapDN
expr_stmt|;
block|}
specifier|public
name|String
name|getUID
parameter_list|()
block|{
return|return
name|uid
return|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|pwd
return|;
block|}
specifier|public
name|String
name|getDN
parameter_list|()
block|{
return|return
name|ldapDN
return|;
block|}
block|}
block|}
end_class

end_unit

