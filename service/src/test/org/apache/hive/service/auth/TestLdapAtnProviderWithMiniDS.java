begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|LdapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|integ
operator|.
name|ServerIntegrationUtils
operator|.
name|getWiredContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateLdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ApplyLdifs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ContextEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreateDS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreateIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreatePartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|AbstractLdapTestUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|FrameworkRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|LdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|LdapAuthenticationProviderImpl
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_comment
comment|/**  * TestSuite to test Hive's LDAP Authentication provider with an  * in-process LDAP Server (Apache Directory Server instance).  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|FrameworkRunner
operator|.
name|class
argument_list|)
annotation|@
name|CreateLdapServer
argument_list|(
name|transports
operator|=
block|{
annotation|@
name|CreateTransport
argument_list|(
name|protocol
operator|=
literal|"LDAP"
argument_list|)
block|,
annotation|@
name|CreateTransport
argument_list|(
name|protocol
operator|=
literal|"LDAPS"
argument_list|)
block|}
argument_list|)
comment|// Define the DirectoryService
annotation|@
name|CreateDS
argument_list|(
name|partitions
operator|=
block|{
annotation|@
name|CreatePartition
argument_list|(
name|name
operator|=
literal|"example"
argument_list|,
name|suffix
operator|=
literal|"dc=example,dc=com"
argument_list|,
name|contextEntry
operator|=
annotation|@
name|ContextEntry
argument_list|(
name|entryLdif
operator|=
literal|"dn: dc=example,dc=com\n"
operator|+
literal|"dc: example\n"
operator|+
literal|"objectClass: top\n"
operator|+
literal|"objectClass: domain\n\n"
argument_list|)
argument_list|,
name|indexes
operator|=
block|{
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"objectClass"
argument_list|)
block|,
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"dc"
argument_list|)
block|,
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"ou"
argument_list|)
block|,
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"distinguishedName"
argument_list|)
block|}
argument_list|)
block|}
argument_list|)
annotation|@
name|ApplyLdifs
argument_list|(
block|{
literal|"dn: ou=People,dc=example,dc=com"
block|,
literal|"distinguishedName: ou=People,dc=example,dc=com"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: organizationalUnit"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"ou: People"
block|,
literal|"description: Contains entries which describe persons (seamen)"
block|,
literal|"dn: ou=Groups,dc=example,dc=com"
block|,
literal|"distinguishedName: ou=Groups,dc=example,dc=com"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: organizationalUnit"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"ou: Groups"
block|,
literal|"description: Contains entries which describe groups (crews, for instance)"
block|,
literal|"dn: uid=group1,ou=Groups,dc=example,dc=com"
block|,
literal|"distinguishedName: uid=group1,ou=Groups,dc=example,dc=com"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: groupOfNames"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"cn: group1"
block|,
literal|"ou: Groups"
block|,
literal|"sn: group1"
block|,
literal|"member: uid=user1,ou=People,dc=example,dc=com"
block|,
literal|"dn: uid=group2,ou=Groups,dc=example,dc=com"
block|,
literal|"distinguishedName: uid=group2,ou=Groups,dc=example,dc=com"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: groupOfNames"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"givenName: Group2"
block|,
literal|"ou: Groups"
block|,
literal|"cn: group1"
block|,
literal|"sn: group1"
block|,
literal|"member: uid=user2,ou=People,dc=example,dc=com"
block|,
literal|"dn: cn=group3,ou=Groups,dc=example,dc=com"
block|,
literal|"distinguishedName: cn=group3,ou=Groups,dc=example,dc=com"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: groupOfNames"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"cn: group3"
block|,
literal|"ou: Groups"
block|,
literal|"sn: group3"
block|,
literal|"member: cn=user3,ou=People,dc=example,dc=com"
block|,
literal|"dn: cn=group4,ou=Groups,dc=example,dc=com"
block|,
literal|"distinguishedName: cn=group4,ou=Groups,dc=example,dc=com"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: groupOfUniqueNames"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"ou: Groups"
block|,
literal|"cn: group4"
block|,
literal|"sn: group4"
block|,
literal|"uniqueMember: cn=user4,ou=People,dc=example,dc=com"
block|,
literal|"dn: uid=user1,ou=People,dc=example,dc=com"
block|,
literal|"distinguishedName: uid=user1,ou=People,dc=example,dc=com"
block|,
literal|"objectClass: inetOrgPerson"
block|,
literal|"objectClass: person"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"givenName: Test1"
block|,
literal|"cn: Test User1"
block|,
literal|"sn: user1"
block|,
literal|"uid: user1"
block|,
literal|"userPassword: user1"
block|,
literal|"dn: uid=user2,ou=People,dc=example,dc=com"
block|,
literal|"distinguishedName: uid=user2,ou=People,dc=example,dc=com"
block|,
literal|"objectClass: inetOrgPerson"
block|,
literal|"objectClass: person"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"givenName: Test2"
block|,
literal|"cn: Test User2"
block|,
literal|"sn: user2"
block|,
literal|"uid: user2"
block|,
literal|"userPassword: user2"
block|,
literal|"dn: cn=user3,ou=People,dc=example,dc=com"
block|,
literal|"distinguishedName: cn=user3,ou=People,dc=example,dc=com"
block|,
literal|"objectClass: inetOrgPerson"
block|,
literal|"objectClass: person"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"givenName: Test1"
block|,
literal|"cn: Test User3"
block|,
literal|"sn: user3"
block|,
literal|"uid: user3"
block|,
literal|"userPassword: user3"
block|,
literal|"dn: cn=user4,ou=People,dc=example,dc=com"
block|,
literal|"distinguishedName: cn=user4,ou=People,dc=example,dc=com"
block|,
literal|"objectClass: inetOrgPerson"
block|,
literal|"objectClass: person"
block|,
literal|"objectClass: top"
block|,
literal|"objectClass: ExtensibleObject"
block|,
literal|"givenName: Test4"
block|,
literal|"cn: Test User4"
block|,
literal|"sn: user4"
block|,
literal|"uid: user4"
block|,
literal|"userPassword: user4"
block|}
argument_list|)
specifier|public
class|class
name|TestLdapAtnProviderWithMiniDS
extends|extends
name|AbstractLdapTestUnit
block|{
specifier|private
specifier|static
name|String
name|ldapUrl
decl_stmt|;
specifier|private
specifier|static
name|LdapServer
name|server
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|hiveConfBackup
decl_stmt|;
specifier|private
specifier|static
name|LdapContext
name|ctx
decl_stmt|;
specifier|private
specifier|static
name|LdapAuthenticationProviderImpl
name|ldapProvider
decl_stmt|;
specifier|static
specifier|final
name|User
name|USER1
init|=
operator|new
name|User
argument_list|(
literal|"user1"
argument_list|,
literal|"user1"
argument_list|,
literal|"uid=user1,ou=People,dc=example,dc=com"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|User
name|USER2
init|=
operator|new
name|User
argument_list|(
literal|"user2"
argument_list|,
literal|"user2"
argument_list|,
literal|"uid=user2,ou=People,dc=example,dc=com"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|User
name|USER3
init|=
operator|new
name|User
argument_list|(
literal|"user3"
argument_list|,
literal|"user3"
argument_list|,
literal|"cn=user3,ou=People,dc=example,dc=com"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|User
name|USER4
init|=
operator|new
name|User
argument_list|(
literal|"user4"
argument_list|,
literal|"user4"
argument_list|,
literal|"cn=user4,ou=People,dc=example,dc=com"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ctx
operator|=
operator|(
name|LdapContext
operator|)
name|getWiredContext
argument_list|(
name|ldapServer
argument_list|,
literal|null
argument_list|)
operator|.
name|lookup
argument_list|(
literal|"dc=example,dc=com"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|ldapProvider
operator|=
operator|new
name|LdapAuthenticationProviderImpl
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|ldapProvider
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ldapServer
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|ldapServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|initLdapAtn
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|int
name|port
decl_stmt|;
if|if
condition|(
name|ldapUrl
operator|==
literal|null
condition|)
block|{
name|port
operator|=
name|ldapServer
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|ldapUrl
operator|=
operator|new
name|String
argument_list|(
literal|"ldap://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.root.logger"
argument_list|,
literal|"DEBUG,console"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.server2.authentication.ldap.url"
argument_list|,
name|ldapUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveProperties
operator|!=
literal|null
condition|)
block|{
name|String
name|key
decl_stmt|;
name|String
name|value
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|hiveProperties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|key
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|value
operator|=
name|hiveProperties
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|ldapProvider
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLDAPServer
parameter_list|()
throws|throws
name|Exception
block|{
name|initLdapAtn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithShortname
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|String
name|user
decl_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithShortnameOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|String
name|user
decl_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindNegativeWithShortname
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication succeeded for "
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" with password user, expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindNegativeWithShortnameOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication succeeded for "
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" with password user, expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDN
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" user as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNWrongOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=DummyPeople,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNWrongConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=DummyPeople,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=DummyGroups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNBlankConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindPositiveWithDNBlankOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER1
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserBindPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindPositive: Authentication failed for user:"
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindNegativeWithDN
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" with password user, "
operator|+
literal|"expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserBindNegativeWithDNOldConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ldapServer
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" with password "
operator|+
name|USER2
operator|.
name|getPassword
argument_list|()
operator|+
literal|", expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" with password user, "
operator|+
literal|"expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserBindNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserFilterPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass userfilter"
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
try|try
block|{
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass userfilter"
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER2
operator|.
name|getUID
argument_list|()
operator|+
literal|","
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
try|try
block|{
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterPositive: Authentication failed for user, user is expected to pass userfilter"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserFilterNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user is expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user is expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER1
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user is expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user is expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER3
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail userfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupFilterPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group1,group2"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group2"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupFilterNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group1"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testGroupFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ldapProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group2"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testGroupFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserAndGroupFilterPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|","
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group1,group2"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserAndGroupFilterNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"uid=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userFilter"
argument_list|,
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|","
operator|+
name|USER2
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group1"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER3
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER3
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testUserAndGroupFilterNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail groupfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testUserAndGroupFilterNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomQueryPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.customLDAPQuery"
argument_list|,
literal|"(&(objectClass=person)(|(uid="
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|")(uid="
operator|+
name|USER4
operator|.
name|getUID
argument_list|()
operator|+
literal|")))"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER1
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER4
operator|.
name|getDN
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER4
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCustomQueryPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomQueryNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.baseDN"
argument_list|,
literal|"ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
comment|// ldap query will only return user1
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.customLDAPQuery"
argument_list|,
literal|"(&(objectClass=person)(uid="
operator|+
name|USER1
operator|.
name|getUID
argument_list|()
operator|+
literal|"))"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER2
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testCustomQueryNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|user
operator|=
name|USER2
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCustomQueryNegative: Authentication succeeded for "
operator|+
name|user
operator|+
literal|",user expected to fail custom LDAP Query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testCustomQueryNegative: Authentication failed for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupFilterPositiveWithCustomGUID
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"cn=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.guidKey"
argument_list|,
literal|"cn"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group3"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER3
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER3
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER3
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER3
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupFilterPositiveWithCustomAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ldapProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.userDNPattern"
argument_list|,
literal|"cn=%s,ou=People,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupDNPattern"
argument_list|,
literal|"cn=%s,ou=Groups,dc=example,dc=com"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupFilter"
argument_list|,
literal|"group4"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.guidKey"
argument_list|,
literal|"cn"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupMembershipKey"
argument_list|,
literal|"uniqueMember"
argument_list|)
expr_stmt|;
name|ldapProperties
operator|.
name|put
argument_list|(
literal|"hive.server2.authentication.ldap.groupClassKey"
argument_list|,
literal|"groupOfUniqueNames"
argument_list|)
expr_stmt|;
name|initLdapAtn
argument_list|(
name|ldapProperties
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER4
operator|.
name|getDN
argument_list|()
expr_stmt|;
try|try
block|{
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER4
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|user
operator|=
name|USER4
operator|.
name|getUID
argument_list|()
expr_stmt|;
name|ldapProvider
operator|.
name|Authenticate
argument_list|(
name|user
argument_list|,
name|USER4
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupFilterPositive: Authentication succeeded for "
operator|+
name|user
operator|+
literal|" as expected"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"testGroupFilterPositive: Authentication failed for "
operator|+
name|user
operator|+
literal|",user expected to pass groupfilter"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
class|class
name|User
block|{
name|String
name|uid
decl_stmt|;
name|String
name|pwd
decl_stmt|;
name|String
name|ldapDN
decl_stmt|;
name|User
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|ldapDN
parameter_list|)
block|{
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|pwd
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|ldapDN
operator|=
name|ldapDN
expr_stmt|;
block|}
specifier|public
name|String
name|getUID
parameter_list|()
block|{
return|return
name|uid
return|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|pwd
return|;
block|}
specifier|public
name|String
name|getDN
parameter_list|()
block|{
return|return
name|ldapDN
return|;
block|}
block|}
end_class

end_unit

