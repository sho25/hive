begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|WildcardFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JdbcJarDownloadServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JdbcJarDownloadServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JDBC_JAR_DIR
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_HOME"
argument_list|)
operator|+
literal|"/jdbc/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JDBC_JAR_PATTERN
init|=
literal|"hive-jdbc-*-standalone.jar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAR_CONTENT_DISPOSITION
init|=
literal|"attachment; filename=hive-jdbc-standalone.jar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAR_CONTENT_TYPE
init|=
literal|"application/java-archive"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Requesting jdbc standalone jar download"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-disposition"
argument_list|,
name|JAR_CONTENT_DISPOSITION
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|JAR_CONTENT_TYPE
argument_list|)
expr_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|JDBC_JAR_DIR
argument_list|)
decl_stmt|;
name|FileFilter
name|fileFilter
init|=
operator|new
name|WildcardFileFilter
argument_list|(
name|JDBC_JAR_PATTERN
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
name|fileFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
operator|||
name|files
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|handleError
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
name|File
name|file
init|=
name|files
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Jdbc standalone jar found: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|;
name|OutputStream
name|out
operator|=
name|response
operator|.
name|getOutputStream
argument_list|()
init|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|length
decl_stmt|;
while|while
condition|(
operator|(
name|length
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception during downloading standalone jdbc jar"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Jdbc standalone jar "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" was downloaded"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleError
parameter_list|(
name|File
index|[]
name|files
parameter_list|)
block|{
if|if
condition|(
name|ArrayUtils
operator|.
name|isEmpty
argument_list|(
name|files
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No jdbc standalone jar found in the directory "
operator|+
name|JDBC_JAR_DIR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|fileNames
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|fileNames
operator|.
name|append
argument_list|(
literal|"\t"
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Multiple jdbc standalone jars exist in the directory "
operator|+
name|JDBC_JAR_DIR
operator|+
literal|":\n"
operator|+
name|fileNames
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

