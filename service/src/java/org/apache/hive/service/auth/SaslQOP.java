begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Possible values of SASL quality-of-protection value.  */
end_comment

begin_enum
specifier|public
enum|enum
name|SaslQOP
block|{
name|AUTH
argument_list|(
literal|"auth"
argument_list|)
block|,
comment|// Authentication only.
name|AUTH_INT
argument_list|(
literal|"auth-int"
argument_list|)
block|,
comment|// Authentication and integrity checking by using signatures.
name|AUTH_CONF
argument_list|(
literal|"auth-conf"
argument_list|)
block|;
comment|// Authentication, integrity and confidentiality checking
comment|// by using signatures and encryption.
specifier|public
specifier|final
name|String
name|saslQop
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SaslQOP
argument_list|>
name|STR_TO_ENUM
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SaslQOP
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|SaslQOP
name|saslQop
range|:
name|values
argument_list|()
control|)
block|{
name|STR_TO_ENUM
operator|.
name|put
argument_list|(
name|saslQop
operator|.
name|toString
argument_list|()
argument_list|,
name|saslQop
argument_list|)
expr_stmt|;
block|}
block|}
name|SaslQOP
parameter_list|(
name|String
name|saslQop
parameter_list|)
block|{
name|this
operator|.
name|saslQop
operator|=
name|saslQop
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|saslQop
return|;
block|}
specifier|public
specifier|static
name|SaslQOP
name|fromString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|str
operator|=
name|str
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|SaslQOP
name|saslQOP
init|=
name|STR_TO_ENUM
operator|.
name|get
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|saslQOP
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown auth type: "
operator|+
name|str
operator|+
literal|" Allowed values are: "
operator|+
name|STR_TO_ENUM
operator|.
name|keySet
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|saslQOP
return|;
block|}
block|}
end_enum

end_unit

