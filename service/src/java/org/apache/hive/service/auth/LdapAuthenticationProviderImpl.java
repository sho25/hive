begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|InitialDirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_class
specifier|public
class|class
name|LdapAuthenticationProviderImpl
implements|implements
name|PasswdAuthenticationProvider
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LdapAuthenticationProviderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DN_ATTR
init|=
literal|"distinguishedName"
decl_stmt|;
specifier|private
specifier|final
name|String
name|ldapURL
decl_stmt|;
specifier|private
specifier|final
name|String
name|baseDN
decl_stmt|;
specifier|private
specifier|final
name|String
name|ldapDomain
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|groupBases
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|userBases
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|userFilter
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|groupFilter
decl_stmt|;
specifier|private
specifier|final
name|String
name|customQuery
decl_stmt|;
name|LdapAuthenticationProviderImpl
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|ldapURL
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_URL
argument_list|)
expr_stmt|;
name|baseDN
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_BASEDN
argument_list|)
expr_stmt|;
name|ldapDomain
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_DOMAIN
argument_list|)
expr_stmt|;
name|customQuery
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_CUSTOMLDAPQUERY
argument_list|)
expr_stmt|;
if|if
condition|(
name|customQuery
operator|==
literal|null
condition|)
block|{
name|groupBases
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|userBases
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|groupDNPatterns
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GROUPDNPATTERN
argument_list|)
decl_stmt|;
name|String
name|groupFilterVal
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_GROUPFILTER
argument_list|)
decl_stmt|;
name|String
name|userDNPatterns
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERDNPATTERN
argument_list|)
decl_stmt|;
name|String
name|userFilterVal
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERFILTER
argument_list|)
decl_stmt|;
comment|// parse COLON delimited root DNs for users/groups that may or may not be under BaseDN.
comment|// Expect the root DNs be fully qualified including the baseDN
if|if
condition|(
name|groupDNPatterns
operator|!=
literal|null
operator|&&
name|groupDNPatterns
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|groupTokens
init|=
name|groupDNPatterns
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupTokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|groupTokens
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
operator|&&
name|groupTokens
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|groupBases
operator|.
name|add
argument_list|(
name|groupTokens
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected format for groupDNPattern..ignoring "
operator|+
name|groupTokens
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|baseDN
operator|!=
literal|null
condition|)
block|{
name|groupBases
operator|.
name|add
argument_list|(
literal|"CN=%s,"
operator|+
name|baseDN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupFilterVal
operator|!=
literal|null
operator|&&
name|groupFilterVal
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|groupFilter
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|String
index|[]
name|groups
init|=
name|groupFilterVal
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groups
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filtered group: "
operator|+
name|groups
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|groupFilter
operator|.
name|add
argument_list|(
name|groups
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|userDNPatterns
operator|!=
literal|null
operator|&&
name|userDNPatterns
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|userTokens
init|=
name|userDNPatterns
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userTokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|userTokens
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
operator|&&
name|userTokens
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|userBases
operator|.
name|add
argument_list|(
name|userTokens
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected format for userDNPattern..ignoring "
operator|+
name|userTokens
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|baseDN
operator|!=
literal|null
condition|)
block|{
name|userBases
operator|.
name|add
argument_list|(
literal|"CN=%s,"
operator|+
name|baseDN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userFilterVal
operator|!=
literal|null
operator|&&
name|userFilterVal
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|userFilter
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|String
index|[]
name|users
init|=
name|userFilterVal
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filtered user: "
operator|+
name|users
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|userFilter
operator|.
name|add
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|Authenticate
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
literal|"com.sun.jndi.ldap.LdapCtxFactory"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|ldapURL
argument_list|)
expr_stmt|;
comment|// If the domain is available in the config, then append it unless domain is
comment|// already part of the username. LDAP providers like Active Directory use a
comment|// fully qualified user name like foo@bar.com.
if|if
condition|(
operator|!
name|hasDomain
argument_list|(
name|user
argument_list|)
operator|&&
name|ldapDomain
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|user
operator|+
literal|"@"
operator|+
name|ldapDomain
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|==
literal|null
operator|||
name|password
operator|.
name|isEmpty
argument_list|()
operator|||
name|password
operator|.
name|getBytes
argument_list|()
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Error validating LDAP user:"
operator|+
literal|" a null or blank password has been provided"
argument_list|)
throw|;
block|}
comment|// user being authenticated becomes the bindDN and baseDN or userDN is used to search
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting using principal="
operator|+
name|user
operator|+
literal|" at url="
operator|+
name|ldapURL
argument_list|)
expr_stmt|;
name|DirContext
name|ctx
init|=
literal|null
decl_stmt|;
name|String
name|userDN
init|=
literal|null
decl_stmt|;
name|String
name|userName
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Create initial context
name|ctx
operator|=
operator|new
name|InitialDirContext
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDN
argument_list|(
name|user
argument_list|)
operator|||
name|hasDomain
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|userName
operator|=
name|extractName
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userName
operator|=
name|user
expr_stmt|;
block|}
if|if
condition|(
name|userFilter
operator|==
literal|null
operator|&&
name|groupFilter
operator|==
literal|null
operator|&&
name|customQuery
operator|==
literal|null
operator|&&
name|userBases
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isDN
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|userDN
operator|=
name|findUserDNByDN
argument_list|(
name|ctx
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|userDN
operator|==
literal|null
condition|)
block|{
name|userDN
operator|=
name|findUserDNByPattern
argument_list|(
name|ctx
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userDN
operator|==
literal|null
condition|)
block|{
name|userDN
operator|=
name|findUserDNByName
argument_list|(
name|ctx
argument_list|,
name|baseDN
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This should not be null because we were allowed to bind with this username
comment|// safe check in case we were able to bind anonymously.
if|if
condition|(
name|userDN
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Authentication failed: User search failed"
argument_list|)
throw|;
block|}
return|return;
block|}
if|if
condition|(
name|customQuery
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|resultList
init|=
name|executeLDAPQuery
argument_list|(
name|ctx
argument_list|,
name|customQuery
argument_list|,
name|baseDN
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|matchedDN
range|:
name|resultList
control|)
block|{
if|if
condition|(
name|matchedDN
operator|.
name|split
argument_list|(
literal|","
argument_list|,
literal|2
argument_list|)
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
index|[
literal|1
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Authentication succeeded based on result set from LDAP query"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Authentication failed: LDAP query "
operator|+
literal|"from property returned no data"
argument_list|)
throw|;
block|}
comment|// This section checks if the user satisfies the specified user filter.
if|if
condition|(
name|userFilter
operator|!=
literal|null
operator|&&
name|userFilter
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Authenticating user "
operator|+
name|user
operator|+
literal|" using user filter"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|filteredUser
range|:
name|userFilter
control|)
block|{
if|if
condition|(
name|filteredUser
operator|.
name|equalsIgnoreCase
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"User filter partially satisfied"
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Authentication failed based on user membership"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Authentication failed: User not a member "
operator|+
literal|"of specified list"
argument_list|)
throw|;
block|}
name|userDN
operator|=
name|findUserDNByPattern
argument_list|(
name|ctx
argument_list|,
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|userDN
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"User filter entirely satisfied"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"User "
operator|+
name|user
operator|+
literal|" could not be found in the configured UserBaseDN,"
operator|+
literal|"authentication failed"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Authentication failed: UserDN could not be "
operator|+
literal|"found in specified User base(s)"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|groupFilter
operator|!=
literal|null
operator|&&
name|groupFilter
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authenticating user "
operator|+
name|user
operator|+
literal|" using group membership:"
argument_list|)
expr_stmt|;
comment|// if only groupFilter is configured.
if|if
condition|(
name|userDN
operator|==
literal|null
condition|)
block|{
name|userDN
operator|=
name|findUserDNByName
argument_list|(
name|ctx
argument_list|,
name|baseDN
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|userGroups
init|=
name|getGroupsForUser
argument_list|(
name|ctx
argument_list|,
name|userDN
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"User member of :"
argument_list|)
expr_stmt|;
name|prettyPrint
argument_list|(
name|userGroups
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userGroups
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|elem
range|:
name|userGroups
control|)
block|{
name|String
name|shortName
init|=
operator|(
operator|(
name|elem
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
operator|)
index|[
literal|1
index|]
decl_stmt|;
name|String
name|groupDN
init|=
name|elem
operator|.
name|split
argument_list|(
literal|","
argument_list|,
literal|2
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking group:DN="
operator|+
name|elem
operator|+
literal|",shortName="
operator|+
name|shortName
operator|+
literal|",groupDN="
operator|+
name|groupDN
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupFilter
operator|.
name|contains
argument_list|(
name|shortName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Authentication succeeded based on group membership"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Authentication failed: User not a member of "
operator|+
literal|"listed groups"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Simple password authentication succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"LDAP Authentication failed for user"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when closing LDAP context:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|hasDomain
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
return|return
operator|(
name|ServiceUtils
operator|.
name|indexOfDomainMatch
argument_list|(
name|userName
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
specifier|private
specifier|static
name|void
name|prettyPrint
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
for|for
control|(
name|String
name|elem
range|:
name|list
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"    "
operator|+
name|elem
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|prettyPrint
parameter_list|(
name|Attributes
name|attrs
parameter_list|)
block|{
name|NamingEnumeration
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|set
init|=
name|attrs
operator|.
name|getAll
argument_list|()
decl_stmt|;
try|try
block|{
name|NamingEnumeration
argument_list|<
name|?
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|Attribute
name|attr
init|=
name|set
operator|.
name|next
argument_list|()
decl_stmt|;
name|list
operator|=
name|attr
operator|.
name|getAll
argument_list|()
expr_stmt|;
name|String
name|attrVals
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|list
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|attrVals
operator|+=
name|list
operator|.
name|next
argument_list|()
operator|+
literal|"+"
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|attr
operator|.
name|getID
argument_list|()
operator|+
literal|":::"
operator|+
name|attrVals
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error occurred when reading ldap data:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This helper method attempts to find a DN given a unique groupname.    * Various LDAP implementations have different keys/properties that store this unique ID.    * So the first attempt is to find an entity with objectClass=group&& CN=groupName    * @param ctx DirContext for the LDAP Connection.    * @param baseDN BaseDN for this LDAP directory where the search is to be performed.    * @param groupName A unique groupname that is to be located in the LDAP.    * @return LDAP DN if the group is found in LDAP, null otherwise.    */
specifier|public
specifier|static
name|String
name|findGroupDNByName
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|baseDN
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|NamingException
block|{
name|String
name|searchFilter
init|=
literal|"(&(objectClass=group)(CN="
operator|+
name|groupName
operator|+
literal|"))"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
name|results
operator|=
name|findDNByName
argument_list|(
name|ctx
argument_list|,
name|baseDN
argument_list|,
name|searchFilter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|//make sure there is not another item available, there should be only 1 match
name|LOG
operator|.
name|info
argument_list|(
literal|"Matched multiple groups for the group: "
operator|+
name|groupName
operator|+
literal|",returning null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * This helper method attempts to find an LDAP group entity given a unique name using a    * user-defined pattern for GROUPBASE.The list of group bases is defined by the user via property    * "hive.server2.authentication.ldap.groupDNPattern" in the hive-site.xml.    * Users can use %s where the actual groupname is to be substituted in the LDAP Query.    * @param ctx DirContext for the LDAP Connection.    * @param groupName A unique groupname that is to be located in the LDAP.    * @return LDAP DN of given group if found in the directory, null otherwise.    */
specifier|public
specifier|static
name|String
name|findGroupDNByPattern
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|findDNByPattern
argument_list|(
name|ctx
argument_list|,
name|groupName
argument_list|,
name|groupBases
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|findDNByPattern
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|NamingException
block|{
name|String
name|searchFilter
decl_stmt|;
name|String
name|searchBase
decl_stmt|;
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
decl_stmt|;
name|String
index|[]
name|returnAttributes
init|=
block|{
name|DN_ATTR
block|}
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
name|returnAttributes
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|searchFilter
operator|=
literal|"("
operator|+
name|DN_ATTR
operator|+
literal|"="
operator|+
name|node
operator|.
name|replaceAll
argument_list|(
literal|"%s"
argument_list|,
name|name
argument_list|)
operator|+
literal|")"
expr_stmt|;
name|searchBase
operator|=
name|node
operator|.
name|split
argument_list|(
literal|","
argument_list|,
literal|2
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
name|results
operator|=
name|ctx
operator|.
name|search
argument_list|(
name|searchBase
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
comment|//make sure there is not another item available, there should be only 1 match
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Matched multiple entities for the name: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_ATTR
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * This helper method attempts to find a DN given a unique username.    * Various LDAP implementations have different keys/properties that store this unique userID.    * Active Directory has a "sAMAccountName" that appears reliable,openLDAP uses "uid"    * So the first attempt is to find an entity with objectClass=person||user where    * (uid||sAMAccountName) matches the given username.    * The second attempt is to use CN attribute for wild card matching and then match the    * username in the DN.    * @param ctx DirContext for the LDAP Connection.    * @param baseDN BaseDN for this LDAP directory where the search is to be performed.    * @param userName A unique userid that is to be located in the LDAP.    * @return LDAP DN if the user is found in LDAP, null otherwise.    */
specifier|public
specifier|static
name|String
name|findUserDNByName
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|baseDN
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|NamingException
block|{
name|String
name|baseFilter
init|=
literal|"(&(|(objectClass=person)(objectClass=user))"
decl_stmt|;
name|String
name|suffix
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"(|(uid="
operator|+
name|userName
operator|+
literal|")(sAMAccountName="
operator|+
name|userName
operator|+
literal|")))"
block|,
literal|"(|(cn=*"
operator|+
name|userName
operator|+
literal|"*)))"
block|}
decl_stmt|;
name|String
name|searchFilter
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|suffix
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|searchFilter
operator|=
name|baseFilter
operator|+
name|suffix
index|[
name|i
index|]
expr_stmt|;
name|results
operator|=
name|findDNByName
argument_list|(
name|ctx
argument_list|,
name|baseDN
argument_list|,
name|searchFilter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|//make sure there is not another item available, there should be only 1 match
name|LOG
operator|.
name|info
argument_list|(
literal|"Matched multiple users for the user: "
operator|+
name|userName
operator|+
literal|",returning null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * This helper method attempts to find a username given a DN.    * Various LDAP implementations have different keys/properties that store this unique userID.    * Active Directory has a "sAMAccountName" that appears reliable,openLDAP uses "uid"    * So the first attempt is to find an entity with objectClass=person||user where    * (uid||sAMAccountName) matches the given username.    * The second attempt is to use CN attribute for wild card matching and then match the    * username in the DN.    * @param ctx DirContext for the LDAP Connection.    * @param baseDN BaseDN for this LDAP directory where the search is to be performed.    * @param userName A unique userid that is to be located in the LDAP.    * @return LDAP DN if the user is found in LDAP, null otherwise.    */
specifier|public
specifier|static
name|String
name|findUserDNByDN
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|userDN
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
operator|!
name|isDN
argument_list|(
name|userDN
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|baseDN
init|=
name|extractBaseDN
argument_list|(
name|userDN
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
name|String
name|searchFilter
init|=
literal|"(&(|(objectClass=person)(objectClass=user))("
operator|+
name|DN_ATTR
operator|+
literal|"="
operator|+
name|userDN
operator|+
literal|"))"
decl_stmt|;
name|results
operator|=
name|findDNByName
argument_list|(
name|ctx
argument_list|,
name|baseDN
argument_list|,
name|searchFilter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|//make sure there is not another item available, there should be only 1 match
name|LOG
operator|.
name|info
argument_list|(
literal|"Matched multiple users for the user: "
operator|+
name|userDN
operator|+
literal|",returning null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|userDN
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|findDNByName
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|baseDN
parameter_list|,
name|String
name|searchString
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|NamingException
block|{
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|retValues
init|=
literal|null
decl_stmt|;
name|String
name|matchedDN
init|=
literal|null
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|String
index|[]
name|returnAttributes
init|=
block|{
name|DN_ATTR
block|}
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
name|returnAttributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|searchControls
operator|.
name|setCountLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
comment|// limit the result set to limit the size of resultset
block|}
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|baseDN
argument_list|,
name|searchString
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|matchedDN
operator|=
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_ATTR
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|retValues
operator|==
literal|null
condition|)
block|{
name|retValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|retValues
operator|.
name|add
argument_list|(
name|matchedDN
argument_list|)
expr_stmt|;
block|}
return|return
name|retValues
return|;
block|}
comment|/**    * This helper method attempts to find a UserDN given a unique username from a    * user-defined pattern for USERBASE. The list of user bases is defined by the user    * via property "hive.server2.authentication.ldap.userDNPattern" in the hive-site.xml.    * Users can use %s where the actual username is to be subsituted in the LDAP Query.    * @param ctx DirContext for the LDAP Connection.    * @param userName A unique userid that is to be located in the LDAP.    * @return LDAP DN of given user if found in the directory, null otherwise.    */
specifier|public
specifier|static
name|String
name|findUserDNByPattern
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|findDNByPattern
argument_list|(
name|ctx
argument_list|,
name|userName
argument_list|,
name|userBases
argument_list|)
return|;
block|}
comment|/**    * This helper method finds all the groups a given user belongs to.    * This method relies on the "memberOf" attribute being set on the user that references    * the group the group. The returned list ONLY includes direct groups the user belongs to.    * Parent groups of these direct groups are NOT included.    * @param ctx DirContext for the LDAP Connection.    * @param userName A unique userid that is to be located in the LDAP.    * @return List of Group DNs the user belongs to, emptylist otherwise.    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getGroupsForUser
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|userDN
parameter_list|)
throws|throws
name|NamingException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groupList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|searchFilter
init|=
literal|"("
operator|+
name|DN_ATTR
operator|+
literal|"="
operator|+
name|userDN
operator|+
literal|")"
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getGroupsForUser:searchFilter="
operator|+
name|searchFilter
argument_list|)
expr_stmt|;
name|String
index|[]
name|attrIDs
init|=
block|{
literal|"memberOf"
block|}
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
name|attrIDs
argument_list|)
expr_stmt|;
comment|// treat everything after the first COMMA as a baseDN for the search to find this user
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|userDN
operator|.
name|split
argument_list|(
literal|","
argument_list|,
literal|2
argument_list|)
index|[
literal|1
index|]
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NamingEnumeration
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|groups
init|=
name|results
operator|.
name|next
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|getAll
argument_list|()
decl_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|Attribute
name|attr
init|=
name|groups
operator|.
name|next
argument_list|()
decl_stmt|;
name|NamingEnumeration
argument_list|<
name|?
argument_list|>
name|list
init|=
name|attr
operator|.
name|getAll
argument_list|()
decl_stmt|;
while|while
condition|(
name|list
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|groupList
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|list
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|groupList
return|;
block|}
comment|/**    * This method helps execute a LDAP query defined by the user via property    * "hive.server2.authentication.ldap.customLDAPQuery"    * A full LDAP query that LDAP Atn provider uses to execute against LDAP Server.    * If this query return a null resultset, the LDAP Provider fails the authentication request.    * If the LDAP query returns a list of DNs, a check is performed to confirm one    * of the entries is for the user being authenticated.    * For example: (&(objectClass=group)(objectClass=top)(instanceType=4)(cn=Domain*))    * (&(objectClass=person)(|(sAMAccountName=admin)    *                       (|(memberOf=CN=Domain Admins,CN=Users,DC=domain,DC=com)    *                         (memberOf=CN=Administrators,CN=Builtin,DC=domain,DC=com))))    * @param ctx DirContext to execute this query within.    * @param query User-defined LDAP Query string to be used to authenticate users.    * @param rootDN BaseDN at which to execute the LDAP query, typically rootDN for the LDAP.    * @return List of LDAP DNs returned from executing the LDAP Query.    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|executeLDAPQuery
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|rootDN
parameter_list|)
throws|throws
name|NamingException
block|{
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|returnAttributes
init|=
block|{
name|DN_ATTR
block|}
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
name|returnAttributes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using a user specified LDAP query for adjudication:"
operator|+
name|query
operator|+
literal|",baseDN="
operator|+
name|rootDN
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|rootDN
argument_list|,
name|query
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_ATTR
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"LDAPAtn:executeLDAPQuery()::Return set size "
operator|+
name|list
operator|.
name|get
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDN
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|>
operator|-
literal|1
operator|)
return|;
block|}
specifier|public
specifier|static
name|String
name|extractName
parameter_list|(
name|String
name|dn
parameter_list|)
block|{
name|int
name|domainIdx
init|=
name|ServiceUtils
operator|.
name|indexOfDomainMatch
argument_list|(
name|dn
argument_list|)
decl_stmt|;
if|if
condition|(
name|domainIdx
operator|>
literal|0
condition|)
block|{
return|return
name|dn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|domainIdx
argument_list|)
return|;
block|}
if|if
condition|(
name|dn
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
name|dn
operator|.
name|substring
argument_list|(
name|dn
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|,
name|dn
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
argument_list|)
return|;
block|}
return|return
name|dn
return|;
block|}
specifier|public
specifier|static
name|String
name|extractBaseDN
parameter_list|(
name|String
name|dn
parameter_list|)
block|{
if|if
condition|(
name|dn
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
name|dn
operator|.
name|substring
argument_list|(
name|dn
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

