begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthorizeCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|AuthenticationProviderFactory
operator|.
name|AuthMethods
import|;
end_import

begin_comment
comment|/**  * Sun JDK only provides a PLAIN client and no server. This class implements the Plain SASL server  * conforming to RFC #4616 (http://www.ietf.org/rfc/rfc4616.txt).  */
end_comment

begin_class
specifier|public
class|class
name|PlainSaslServer
implements|implements
name|SaslServer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PLAIN_METHOD
init|=
literal|"PLAIN"
decl_stmt|;
specifier|private
name|String
name|user
decl_stmt|;
specifier|private
specifier|final
name|CallbackHandler
name|handler
decl_stmt|;
name|PlainSaslServer
parameter_list|(
name|CallbackHandler
name|handler
parameter_list|,
name|String
name|authMethodStr
parameter_list|)
throws|throws
name|SaslException
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|AuthMethods
operator|.
name|getValidAuthMethod
argument_list|(
name|authMethodStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMechanismName
parameter_list|()
block|{
return|return
name|PLAIN_METHOD
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|evaluateResponse
parameter_list|(
name|byte
index|[]
name|response
parameter_list|)
throws|throws
name|SaslException
block|{
try|try
block|{
comment|// parse the response
comment|// message   = [authzid] UTF8NUL authcid UTF8NUL passwd'
name|Deque
argument_list|<
name|String
argument_list|>
name|tokenList
init|=
operator|new
name|ArrayDeque
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|messageToken
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|response
control|)
block|{
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
name|tokenList
operator|.
name|addLast
argument_list|(
name|messageToken
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|messageToken
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageToken
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
block|}
name|tokenList
operator|.
name|addLast
argument_list|(
name|messageToken
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate response
if|if
condition|(
name|tokenList
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
name|tokenList
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Invalid message format"
argument_list|)
throw|;
block|}
name|String
name|passwd
init|=
name|tokenList
operator|.
name|removeLast
argument_list|()
decl_stmt|;
name|user
operator|=
name|tokenList
operator|.
name|removeLast
argument_list|()
expr_stmt|;
comment|// optional authzid
name|String
name|authzId
decl_stmt|;
if|if
condition|(
name|tokenList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|authzId
operator|=
name|user
expr_stmt|;
block|}
else|else
block|{
name|authzId
operator|=
name|tokenList
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"No user name provided"
argument_list|)
throw|;
block|}
if|if
condition|(
name|passwd
operator|==
literal|null
operator|||
name|passwd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"No password name provided"
argument_list|)
throw|;
block|}
name|NameCallback
name|nameCallback
init|=
operator|new
name|NameCallback
argument_list|(
literal|"User"
argument_list|)
decl_stmt|;
name|nameCallback
operator|.
name|setName
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|PasswordCallback
name|pcCallback
init|=
operator|new
name|PasswordCallback
argument_list|(
literal|"Password"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|pcCallback
operator|.
name|setPassword
argument_list|(
name|passwd
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|AuthorizeCallback
name|acCallback
init|=
operator|new
name|AuthorizeCallback
argument_list|(
name|user
argument_list|,
name|authzId
argument_list|)
decl_stmt|;
name|Callback
index|[]
name|cbList
init|=
block|{
name|nameCallback
block|,
name|pcCallback
block|,
name|acCallback
block|}
decl_stmt|;
name|handler
operator|.
name|handle
argument_list|(
name|cbList
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|acCallback
operator|.
name|isAuthorized
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Authentication failed"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|eL
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Invalid message format"
argument_list|,
name|eL
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|eI
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Error validating the login"
argument_list|,
name|eI
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedCallbackException
name|eU
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Error validating the login"
argument_list|,
name|eU
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
name|user
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAuthorizationID
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|unwrap
parameter_list|(
name|byte
index|[]
name|incoming
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|wrap
parameter_list|(
name|byte
index|[]
name|outgoing
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getNegotiatedProperty
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{}
specifier|public
specifier|static
class|class
name|SaslPlainServerFactory
implements|implements
name|SaslServerFactory
block|{
annotation|@
name|Override
specifier|public
name|SaslServer
name|createSaslServer
parameter_list|(
name|String
name|mechanism
parameter_list|,
name|String
name|protocol
parameter_list|,
name|String
name|serverName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|props
parameter_list|,
name|CallbackHandler
name|cbh
parameter_list|)
block|{
if|if
condition|(
name|PLAIN_METHOD
operator|.
name|equals
argument_list|(
name|mechanism
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|new
name|PlainSaslServer
argument_list|(
name|cbh
argument_list|,
name|protocol
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SaslException
name|e
parameter_list|)
block|{
comment|/* This is to fulfill the contract of the interface which states that an exception shall              be thrown when a SaslServer cannot be created due to an error but null should be              returned when a Server can't be created due to the parameters supplied. And the only              thing PlainSaslServer can fail on is a non-supported authentication mechanism.              That's why we return null instead of throwing the Exception */
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMechanismNames
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|props
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|PLAIN_METHOD
block|}
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SaslPlainProvider
extends|extends
name|Provider
block|{
specifier|public
name|SaslPlainProvider
parameter_list|()
block|{
name|super
argument_list|(
literal|"HiveSaslPlain"
argument_list|,
literal|1.0
argument_list|,
literal|"Hive Plain SASL provider"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"SaslServerFactory.PLAIN"
argument_list|,
name|SaslPlainServerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

