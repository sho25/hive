begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_comment
comment|/**  * A factory that produces a {@link Filter} that is implemented as a chain of other filters.  * The chain of filters are created as a result of  * {@link #getInstance(org.apache.hadoop.hive.conf.HiveConf) }  * method call. The resulting object filters out all users that don't pass<b>all</b>  * chained filters. The filters will be applied in the order they are mentioned in the factory  * constructor.  */
end_comment

begin_class
specifier|public
class|class
name|ChainFilterFactory
implements|implements
name|FilterFactory
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|FilterFactory
argument_list|>
name|chainedFactories
decl_stmt|;
comment|/**    * Constructs a factory for a chain of filters.    *    * @param factories The array of factories that will be used to construct a chain of filters.    */
specifier|public
name|ChainFilterFactory
parameter_list|(
name|FilterFactory
modifier|...
name|factories
parameter_list|)
block|{
name|this
operator|.
name|chainedFactories
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|factories
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Filter
name|getInstance
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FilterFactory
name|factory
range|:
name|chainedFactories
control|)
block|{
name|Filter
name|filter
init|=
name|factory
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filters
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ChainFilter
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|filters
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ChainFilter
implements|implements
name|Filter
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Filter
argument_list|>
name|chainedFilters
decl_stmt|;
specifier|public
name|ChainFilter
parameter_list|(
name|List
argument_list|<
name|Filter
argument_list|>
name|chainedFilters
parameter_list|)
block|{
name|this
operator|.
name|chainedFilters
operator|=
name|chainedFilters
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|DirSearch
name|client
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|AuthenticationException
block|{
for|for
control|(
name|Filter
name|filter
range|:
name|chainedFilters
control|)
block|{
name|filter
operator|.
name|apply
argument_list|(
name|client
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

