begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|HadoopThriftAuthBridge
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TCLIService
operator|.
name|Iface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSaslClientTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_class
specifier|public
class|class
name|KerberosSaslHelper
block|{
specifier|private
specifier|static
class|class
name|CLIServiceProcessorFactory
extends|extends
name|TProcessorFactory
block|{
specifier|private
specifier|final
name|ThriftCLIService
name|service
decl_stmt|;
specifier|private
specifier|final
name|Server
name|saslServer
decl_stmt|;
specifier|public
name|CLIServiceProcessorFactory
parameter_list|(
name|Server
name|saslServer
parameter_list|,
name|ThriftCLIService
name|service
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|saslServer
operator|=
name|saslServer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TProcessor
name|getProcessor
parameter_list|(
name|TTransport
name|trans
parameter_list|)
block|{
name|TProcessor
name|sqlProcessor
init|=
operator|new
name|TCLIService
operator|.
name|Processor
argument_list|<
name|Iface
argument_list|>
argument_list|(
name|service
argument_list|)
decl_stmt|;
return|return
name|saslServer
operator|.
name|wrapNonAssumingProcessor
argument_list|(
name|sqlProcessor
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|TProcessorFactory
name|getKerberosProcessorFactory
parameter_list|(
name|Server
name|saslServer
parameter_list|,
name|ThriftCLIService
name|service
parameter_list|)
block|{
return|return
operator|new
name|CLIServiceProcessorFactory
argument_list|(
name|saslServer
argument_list|,
name|service
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TTransport
name|getKerberosTransport
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|host
parameter_list|,
specifier|final
name|TTransport
name|underlyingTransport
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|,
name|boolean
name|assumeSubject
parameter_list|)
throws|throws
name|SaslException
block|{
try|try
block|{
specifier|final
name|String
name|names
index|[]
init|=
name|principal
operator|.
name|split
argument_list|(
literal|"[/@]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Kerberos principal should have 3 parts: "
operator|+
name|principal
argument_list|)
throw|;
block|}
if|if
condition|(
name|assumeSubject
condition|)
block|{
return|return
name|createSubjectAssumedTransport
argument_list|(
name|principal
argument_list|,
name|underlyingTransport
argument_list|,
name|saslProps
argument_list|)
return|;
block|}
else|else
block|{
name|HadoopThriftAuthBridge
operator|.
name|Client
name|authBridge
init|=
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
operator|.
name|createClientWithConf
argument_list|(
literal|"kerberos"
argument_list|)
decl_stmt|;
return|return
name|authBridge
operator|.
name|createClientTransport
argument_list|(
name|principal
argument_list|,
name|host
argument_list|,
literal|"KERBEROS"
argument_list|,
literal|null
argument_list|,
name|underlyingTransport
argument_list|,
name|saslProps
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Failed to open client transport"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|TTransport
name|createSubjectAssumedTransport
parameter_list|(
name|String
name|principal
parameter_list|,
name|TTransport
name|underlyingTransport
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
throws|throws
name|IOException
block|{
name|TTransport
name|saslTransport
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|names
index|[]
init|=
name|principal
operator|.
name|split
argument_list|(
literal|"[/@]"
argument_list|)
decl_stmt|;
try|try
block|{
name|saslTransport
operator|=
operator|new
name|TSaslClientTransport
argument_list|(
literal|"GSSAPI"
argument_list|,
literal|null
argument_list|,
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
name|saslProps
argument_list|,
literal|null
argument_list|,
name|underlyingTransport
argument_list|)
expr_stmt|;
return|return
operator|new
name|TSubjectAssumingTransport
argument_list|(
name|saslTransport
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SaslException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not instantiate SASL transport"
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|TTransport
name|getTokenTransport
parameter_list|(
name|String
name|tokenStr
parameter_list|,
name|String
name|host
parameter_list|,
specifier|final
name|TTransport
name|underlyingTransport
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
throws|throws
name|SaslException
block|{
name|HadoopThriftAuthBridge
operator|.
name|Client
name|authBridge
init|=
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
operator|.
name|createClientWithConf
argument_list|(
literal|"kerberos"
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|authBridge
operator|.
name|createClientTransport
argument_list|(
literal|null
argument_list|,
name|host
argument_list|,
literal|"DIGEST"
argument_list|,
name|tokenStr
argument_list|,
name|underlyingTransport
argument_list|,
name|saslProps
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Failed to open client transport"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

