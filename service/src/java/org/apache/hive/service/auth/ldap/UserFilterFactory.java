begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A factory for a {@link Filter} based on a list of allowed users.  *<br>  * The produced filter object filters out all users that are not on the provided in  * Hive configuration list.  * @see HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_USERFILTER  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|UserFilterFactory
implements|implements
name|FilterFactory
block|{
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Filter
name|getInstance
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|userFilter
init|=
name|conf
operator|.
name|getStringCollection
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PLAIN_LDAP_USERFILTER
operator|.
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
name|userFilter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|UserFilter
argument_list|(
name|userFilter
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|UserFilter
implements|implements
name|Filter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|userFilter
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|UserFilter
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|userFilter
parameter_list|)
block|{
for|for
control|(
name|String
name|userFilterItem
range|:
name|userFilter
control|)
block|{
name|this
operator|.
name|userFilter
operator|.
name|add
argument_list|(
name|userFilterItem
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|DirSearch
name|ldap
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Authenticating user '{}' using user filter"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|LdapUtils
operator|.
name|extractUserName
argument_list|(
name|user
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|userFilter
operator|.
name|contains
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Authentication failed based on user membership"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Authentication failed: "
operator|+
literal|"User not a member of specified list"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

