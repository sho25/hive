begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_class
specifier|public
class|class
name|HiveAuthFactory
block|{
specifier|public
specifier|static
enum|enum
name|AuthTypes
block|{
name|NOSASL
argument_list|(
literal|"NOSASL"
argument_list|)
block|,
name|NONE
argument_list|(
literal|"NONE"
argument_list|)
block|,
name|LDAP
argument_list|(
literal|"LDAP"
argument_list|)
block|,
name|KERBEROS
argument_list|(
literal|"KERBEROS"
argument_list|)
block|,
name|CUSTOM
argument_list|(
literal|"CUSTOM"
argument_list|)
block|;
specifier|private
name|String
name|authType
decl_stmt|;
comment|// Auth type for SASL
name|AuthTypes
parameter_list|(
name|String
name|authType
parameter_list|)
block|{
name|this
operator|.
name|authType
operator|=
name|authType
expr_stmt|;
block|}
specifier|public
name|String
name|getAuthName
parameter_list|()
block|{
return|return
name|authType
return|;
block|}
block|}
empty_stmt|;
specifier|private
name|HadoopThriftAuthBridge
operator|.
name|Server
name|saslServer
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|authTypeStr
decl_stmt|;
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|HiveAuthFactory
parameter_list|()
throws|throws
name|TTransportException
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|authTypeStr
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
argument_list|)
expr_stmt|;
if|if
condition|(
name|authTypeStr
operator|==
literal|null
condition|)
block|{
name|authTypeStr
operator|=
name|AuthTypes
operator|.
name|NONE
operator|.
name|getAuthName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthTypes
operator|.
name|KERBEROS
operator|.
name|getAuthName
argument_list|()
argument_list|)
operator|&&
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|isSecureShimImpl
argument_list|()
condition|)
block|{
name|saslServer
operator|=
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
operator|.
name|createServer
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_KEYTAB
argument_list|)
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_PRINCIPAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TTransportFactory
name|getAuthTransFactory
parameter_list|()
throws|throws
name|LoginException
block|{
name|TTransportFactory
name|transportFactory
decl_stmt|;
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthTypes
operator|.
name|KERBEROS
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|transportFactory
operator|=
name|saslServer
operator|.
name|createTransportFactory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TTransportException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthTypes
operator|.
name|NONE
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
name|transportFactory
operator|=
name|PlainSaslHelper
operator|.
name|getPlainTransportFactory
argument_list|(
name|authTypeStr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthTypes
operator|.
name|LDAP
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
name|transportFactory
operator|=
name|PlainSaslHelper
operator|.
name|getPlainTransportFactory
argument_list|(
name|authTypeStr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthTypes
operator|.
name|NOSASL
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
name|transportFactory
operator|=
operator|new
name|TTransportFactory
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthTypes
operator|.
name|CUSTOM
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
name|transportFactory
operator|=
name|PlainSaslHelper
operator|.
name|getPlainTransportFactory
argument_list|(
name|authTypeStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Unsupported authentication type "
operator|+
name|authTypeStr
argument_list|)
throw|;
block|}
return|return
name|transportFactory
return|;
block|}
specifier|public
name|TProcessorFactory
name|getAuthProcFactory
parameter_list|(
name|ThriftCLIService
name|service
parameter_list|)
throws|throws
name|LoginException
block|{
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthTypes
operator|.
name|KERBEROS
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|KerberosSaslHelper
operator|.
name|getKerberosProcessorFactory
argument_list|(
name|saslServer
argument_list|,
name|service
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|PlainSaslHelper
operator|.
name|getPlainProcessorFactory
argument_list|(
name|service
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|getRemoteUser
parameter_list|()
block|{
if|if
condition|(
name|saslServer
operator|!=
literal|null
condition|)
block|{
return|return
name|saslServer
operator|.
name|getRemoteUser
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/* perform kerberos login using the hadoop shim API if the configuration is available */
specifier|public
specifier|static
name|void
name|loginFromKeytab
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|principal
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_PRINCIPAL
argument_list|)
decl_stmt|;
name|String
name|keyTabFile
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_KEYTAB
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|.
name|isEmpty
argument_list|()
operator|&&
name|keyTabFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no security configuration available
return|return;
block|}
elseif|else
if|if
condition|(
operator|!
name|principal
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|keyTabFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|loginUserFromKeytab
argument_list|(
name|principal
argument_list|,
name|keyTabFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HiveServer2 kerberos principal or keytab is not correctly configured"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

