begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|CharEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryDisplay
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExplainTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|OperationLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ThriftJDBCBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|FetchOrientation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|TableSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|HiveSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
operator|.
name|ThreadWithGarbageCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_comment
comment|/**  * SQLOperation.  *  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|SQLOperation
extends|extends
name|ExecuteStatementOperation
block|{
specifier|private
name|Driver
name|driver
init|=
literal|null
decl_stmt|;
specifier|private
name|CommandProcessorResponse
name|response
decl_stmt|;
specifier|private
name|TableSchema
name|resultSchema
init|=
literal|null
decl_stmt|;
specifier|private
name|Schema
name|mResultSchema
init|=
literal|null
decl_stmt|;
specifier|private
name|AbstractSerDe
name|serde
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|fetchStarted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|MetricsScope
name|currentSQLStateScope
decl_stmt|;
comment|// Display for WebUI.
specifier|private
name|SQLOperationDisplay
name|sqlOpDisplay
decl_stmt|;
specifier|private
name|long
name|queryTimeout
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|timeoutExecutor
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|runAsync
decl_stmt|;
comment|/**    * A map to track query count running by each user    */
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|userQueries
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTIVE_SQL_USER
init|=
name|MetricsConstant
operator|.
name|SQL_OPERATION_PREFIX
operator|+
literal|"active_user"
decl_stmt|;
specifier|private
name|MetricsScope
name|submittedQryScp
decl_stmt|;
specifier|public
name|SQLOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|,
name|String
name|statement
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|,
name|boolean
name|runInBackground
parameter_list|,
name|long
name|queryTimeout
parameter_list|)
block|{
comment|// TODO: call setRemoteUser in ExecuteStatementOperation or higher.
name|super
argument_list|(
name|parentSession
argument_list|,
name|statement
argument_list|,
name|confOverlay
argument_list|,
name|runInBackground
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAsync
operator|=
name|runInBackground
expr_stmt|;
name|this
operator|.
name|queryTimeout
operator|=
name|queryTimeout
expr_stmt|;
name|long
name|timeout
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|queryState
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_TIMEOUT_SECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|>
literal|0
operator|&&
operator|(
name|queryTimeout
operator|<=
literal|0
operator|||
name|timeout
operator|<
name|queryTimeout
operator|)
condition|)
block|{
name|this
operator|.
name|queryTimeout
operator|=
name|timeout
expr_stmt|;
block|}
name|setupSessionIO
argument_list|(
name|parentSession
operator|.
name|getSessionState
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|sqlOpDisplay
operator|=
operator|new
name|SQLOperationDisplay
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error calcluating SQL Operation Display for webui"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|submittedQryScp
operator|=
name|metrics
operator|.
name|createScope
argument_list|(
name|MetricsConstant
operator|.
name|HS2_SUBMITTED_QURIES
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldRunAsync
parameter_list|()
block|{
return|return
name|runAsync
return|;
block|}
specifier|private
name|void
name|setupSessionIO
parameter_list|(
name|SessionState
name|sessionState
parameter_list|)
block|{
try|try
block|{
name|sessionState
operator|.
name|in
operator|=
literal|null
expr_stmt|;
comment|// hive server's session input stream is not used
name|sessionState
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|,
name|CharEncoding
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|sessionState
operator|.
name|info
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|true
argument_list|,
name|CharEncoding
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|sessionState
operator|.
name|err
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|true
argument_list|,
name|CharEncoding
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error creating PrintStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|sessionState
operator|.
name|out
operator|=
literal|null
expr_stmt|;
name|sessionState
operator|.
name|info
operator|=
literal|null
expr_stmt|;
name|sessionState
operator|.
name|err
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Compile the query and extract metadata    * @param sqlOperationConf    * @throws HiveSQLException    */
specifier|public
name|void
name|prepare
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|setState
argument_list|(
name|OperationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
try|try
block|{
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|queryState
argument_list|,
name|getParentSession
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start the timer thread for cancelling the query when query timeout is reached
comment|// queryTimeout == 0 means no timeout
if|if
condition|(
name|queryTimeout
operator|>
literal|0
condition|)
block|{
name|timeoutExecutor
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Runnable
name|timeoutTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Query timed out after: "
operator|+
name|queryTimeout
operator|+
literal|" seconds. Cancelling the execution now."
argument_list|)
expr_stmt|;
name|SQLOperation
operator|.
name|this
operator|.
name|cancel
argument_list|(
name|OperationState
operator|.
name|TIMEDOUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error cancelling the query after timeout: "
operator|+
name|queryTimeout
operator|+
literal|" seconds"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Stop
name|timeoutExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|timeoutExecutor
operator|.
name|schedule
argument_list|(
name|timeoutTask
argument_list|,
name|queryTimeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
name|sqlOpDisplay
operator|.
name|setQueryDisplay
argument_list|(
name|driver
operator|.
name|getQueryDisplay
argument_list|()
argument_list|)
expr_stmt|;
comment|// set the operation handle information in Driver, so that thrift API users
comment|// can use the operation handle they receive, to lookup query information in
comment|// Yarn ATS
name|String
name|guid64
init|=
name|Base64
operator|.
name|encodeBase64URLSafeString
argument_list|(
name|getHandle
argument_list|()
operator|.
name|getHandleIdentifier
argument_list|()
operator|.
name|toTHandleIdentifier
argument_list|()
operator|.
name|getGuid
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|driver
operator|.
name|setOperationId
argument_list|(
name|guid64
argument_list|)
expr_stmt|;
comment|// In Hive server mode, we are not able to retry in the FetchTask
comment|// case, when calling fetch queries since execute() has returned.
comment|// For now, we disable the test attempts.
name|driver
operator|.
name|setTryCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|response
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
name|statement
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|response
operator|.
name|getResponseCode
argument_list|()
condition|)
block|{
throw|throw
name|toSQLException
argument_list|(
literal|"Error while compiling statement"
argument_list|,
name|response
argument_list|)
throw|;
block|}
name|mResultSchema
operator|=
name|driver
operator|.
name|getSchema
argument_list|()
expr_stmt|;
comment|// hasResultSet should be true only if the query has a FetchTask
comment|// "explain" is an exception for now
if|if
condition|(
name|driver
operator|.
name|getPlan
argument_list|()
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//Schema has to be set
if|if
condition|(
name|mResultSchema
operator|==
literal|null
operator|||
operator|!
name|mResultSchema
operator|.
name|isSetFieldSchemas
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"Error compiling query: Schema and FieldSchema "
operator|+
literal|"should be set when query plan has a FetchTask"
argument_list|)
throw|;
block|}
name|resultSchema
operator|=
operator|new
name|TableSchema
argument_list|(
name|mResultSchema
argument_list|)
expr_stmt|;
name|setHasResultSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHasResultSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Set hasResultSet true if the plan has ExplainTask
comment|// TODO explain should use a FetchTask for reading
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|driver
operator|.
name|getPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|task
operator|.
name|getClass
argument_list|()
operator|==
name|ExplainTask
operator|.
name|class
condition|)
block|{
name|resultSchema
operator|=
operator|new
name|TableSchema
argument_list|(
name|mResultSchema
argument_list|)
expr_stmt|;
name|setHasResultSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
name|setState
argument_list|(
name|OperationState
operator|.
name|ERROR
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|setState
argument_list|(
name|OperationState
operator|.
name|ERROR
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"Error running query: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|runQuery
parameter_list|()
throws|throws
name|HiveSQLException
block|{
try|try
block|{
name|OperationState
name|opState
init|=
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
comment|// Operation may have been cancelled by another thread
if|if
condition|(
name|opState
operator|.
name|isTerminal
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not running the query. Operation is already in terminal state: "
operator|+
name|opState
operator|+
literal|", perhaps cancelled due to query timeout or by another thread."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// In Hive server mode, we are not able to retry in the FetchTask
comment|// case, when calling fetch queries since execute() has returned.
comment|// For now, we disable the test attempts.
name|driver
operator|.
name|setTryCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|response
operator|=
name|driver
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|response
operator|.
name|getResponseCode
argument_list|()
condition|)
block|{
throw|throw
name|toSQLException
argument_list|(
literal|"Error while processing statement"
argument_list|,
name|response
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|/**        * If the operation was cancelled by another thread, or the execution timed out, Driver#run        * may return a non-zero response code. We will simply return if the operation state is        * CANCELED, TIMEDOUT or CLOSED, otherwise throw an exception        */
if|if
condition|(
operator|(
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|OperationState
operator|.
name|CANCELED
operator|)
operator|||
operator|(
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|OperationState
operator|.
name|TIMEDOUT
operator|)
operator|||
operator|(
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|OperationState
operator|.
name|CLOSED
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignore exception in terminal state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|setState
argument_list|(
name|OperationState
operator|.
name|ERROR
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|HiveSQLException
condition|)
block|{
throw|throw
operator|(
name|HiveSQLException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"Error running query: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|setState
argument_list|(
name|OperationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|runInternal
parameter_list|()
throws|throws
name|HiveSQLException
block|{
name|setState
argument_list|(
name|OperationState
operator|.
name|PENDING
argument_list|)
expr_stmt|;
name|boolean
name|runAsync
init|=
name|shouldRunAsync
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|asyncPrepare
init|=
name|runAsync
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|queryState
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ASYNC_EXEC_ASYNC_COMPILE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|asyncPrepare
condition|)
block|{
name|prepare
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|runAsync
condition|)
block|{
name|runQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// We'll pass ThreadLocals in the background thread from the foreground (handler) thread.
comment|// 1) ThreadLocal Hive object needs to be set in background thread
comment|// 2) The metastore client in Hive is associated with right user.
comment|// 3) Current UGI will get used by metastore when metastore is in embedded mode
name|Runnable
name|work
init|=
operator|new
name|BackgroundWork
argument_list|(
name|getCurrentUGI
argument_list|()
argument_list|,
name|parentSession
operator|.
name|getSessionHive
argument_list|()
argument_list|,
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
argument_list|,
name|asyncPrepare
argument_list|)
decl_stmt|;
try|try
block|{
comment|// This submit blocks if no background threads are available to run this operation
name|Future
argument_list|<
name|?
argument_list|>
name|backgroundHandle
init|=
name|getParentSession
argument_list|()
operator|.
name|submitBackgroundOperation
argument_list|(
name|work
argument_list|)
decl_stmt|;
name|setBackgroundHandle
argument_list|(
name|backgroundHandle
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|rejected
parameter_list|)
block|{
name|setState
argument_list|(
name|OperationState
operator|.
name|ERROR
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"The background threadpool cannot accept"
operator|+
literal|" new task for execution, please retry the operation"
argument_list|,
name|rejected
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|final
class|class
name|BackgroundWork
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|UserGroupInformation
name|currentUGI
decl_stmt|;
specifier|private
specifier|final
name|Hive
name|parentHive
decl_stmt|;
specifier|private
specifier|final
name|PerfLogger
name|parentPerfLogger
decl_stmt|;
specifier|private
specifier|final
name|SessionState
name|parentSessionState
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|asyncPrepare
decl_stmt|;
specifier|private
name|BackgroundWork
parameter_list|(
name|UserGroupInformation
name|currentUGI
parameter_list|,
name|Hive
name|parentHive
parameter_list|,
name|PerfLogger
name|parentPerfLogger
parameter_list|,
name|SessionState
name|parentSessionState
parameter_list|,
name|boolean
name|asyncPrepare
parameter_list|)
block|{
name|this
operator|.
name|currentUGI
operator|=
name|currentUGI
expr_stmt|;
name|this
operator|.
name|parentHive
operator|=
name|parentHive
expr_stmt|;
name|this
operator|.
name|parentPerfLogger
operator|=
name|parentPerfLogger
expr_stmt|;
name|this
operator|.
name|parentSessionState
operator|=
name|parentSessionState
expr_stmt|;
name|this
operator|.
name|asyncPrepare
operator|=
name|asyncPrepare
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
name|doAsAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|HiveSQLException
block|{
name|Hive
operator|.
name|set
argument_list|(
name|parentHive
argument_list|)
expr_stmt|;
comment|// TODO: can this result in cross-thread reuse of session state?
name|SessionState
operator|.
name|setCurrentSessionState
argument_list|(
name|parentSessionState
argument_list|)
expr_stmt|;
name|PerfLogger
operator|.
name|setPerfLogger
argument_list|(
name|parentPerfLogger
argument_list|)
expr_stmt|;
comment|// Set current OperationLog in this async thread for keeping on saving query log.
name|registerCurrentOperationLog
argument_list|()
expr_stmt|;
name|registerLoggingContext
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|asyncPrepare
condition|)
block|{
name|prepare
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
name|runQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
comment|// TODO: why do we invent our own error path op top of the one from Future.get?
name|setOperationException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error running hive query: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unregisterLoggingContext
argument_list|()
expr_stmt|;
name|unregisterOperationLog
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|currentUGI
operator|.
name|doAs
argument_list|(
name|doAsAction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|setOperationException
argument_list|(
operator|new
name|HiveSQLException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error running hive query as user : "
operator|+
name|currentUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|/**          * We'll cache the ThreadLocal RawStore object for this background thread for an orderly cleanup          * when this thread is garbage collected later.          * @see org.apache.hive.service.server.ThreadWithGarbageCleanup#finalize()          */
if|if
condition|(
name|ThreadWithGarbageCleanup
operator|.
name|currentThread
argument_list|()
operator|instanceof
name|ThreadWithGarbageCleanup
condition|)
block|{
name|ThreadWithGarbageCleanup
name|currentThread
init|=
operator|(
name|ThreadWithGarbageCleanup
operator|)
name|ThreadWithGarbageCleanup
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|currentThread
operator|.
name|cacheThreadLocalRawStore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Returns the current UGI on the stack    * @param opConfig    * @return UserGroupInformation    * @throws HiveSQLException    */
specifier|private
name|UserGroupInformation
name|getCurrentUGI
parameter_list|()
throws|throws
name|HiveSQLException
block|{
try|try
block|{
return|return
name|Utils
operator|.
name|getUGI
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"Unable to get current user"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|registerCurrentOperationLog
parameter_list|()
block|{
if|if
condition|(
name|isOperationLogEnabled
condition|)
block|{
if|if
condition|(
name|operationLog
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get current OperationLog object of Operation: "
operator|+
name|getHandle
argument_list|()
operator|.
name|getHandleIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|isOperationLogEnabled
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|OperationLog
operator|.
name|setCurrentOperationLog
argument_list|(
name|operationLog
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|cleanup
parameter_list|(
name|OperationState
name|state
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldRunAsync
argument_list|()
condition|)
block|{
name|Future
argument_list|<
name|?
argument_list|>
name|backgroundHandle
init|=
name|getBackgroundHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|backgroundHandle
operator|!=
literal|null
condition|)
block|{
name|boolean
name|success
init|=
name|backgroundHandle
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The running operation has been successfully interrupted."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|driver
operator|=
literal|null
expr_stmt|;
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Operation seems to be in invalid state, SessionState is null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ss
operator|.
name|deleteTmpOutputFile
argument_list|()
expr_stmt|;
name|ss
operator|.
name|deleteTmpErrOutputFile
argument_list|()
expr_stmt|;
block|}
comment|// Shutdown the timeout thread if any, while closing this operation
if|if
condition|(
operator|(
name|timeoutExecutor
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|state
operator|!=
name|OperationState
operator|.
name|TIMEDOUT
operator|)
operator|&&
operator|(
name|state
operator|.
name|isTerminal
argument_list|()
operator|)
condition|)
block|{
name|timeoutExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|(
name|OperationState
name|stateAfterCancel
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|cleanup
argument_list|(
name|stateAfterCancel
argument_list|)
expr_stmt|;
name|cleanupOperationLog
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|HiveSQLException
block|{
name|cleanup
argument_list|(
name|OperationState
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|cleanupOperationLog
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableSchema
name|getResultSetSchema
parameter_list|()
throws|throws
name|HiveSQLException
block|{
comment|// Since compilation is always a blocking RPC call, and schema is ready after compilation,
comment|// we can return when are in the RUNNING state.
name|assertState
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|OperationState
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|OperationState
operator|.
name|RUNNING
argument_list|,
name|OperationState
operator|.
name|FINISHED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resultSchema
operator|==
literal|null
condition|)
block|{
name|resultSchema
operator|=
operator|new
name|TableSchema
argument_list|(
name|driver
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resultSchema
return|;
block|}
specifier|private
specifier|transient
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|convey
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|RowSet
name|getNextRowSet
parameter_list|(
name|FetchOrientation
name|orientation
parameter_list|,
name|long
name|maxRows
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|validateDefaultFetchOrientation
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
name|assertState
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|OperationState
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|OperationState
operator|.
name|FINISHED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FetchTask
name|fetchTask
init|=
name|driver
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
name|boolean
name|isBlobBased
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fetchTask
operator|!=
literal|null
operator|&&
name|fetchTask
operator|.
name|getWork
argument_list|()
operator|.
name|isUsingThriftJDBCBinarySerDe
argument_list|()
condition|)
block|{
comment|// Just fetch one blob if we've serialized thrift objects in final tasks
name|maxRows
operator|=
literal|1
expr_stmt|;
name|isBlobBased
operator|=
literal|true
expr_stmt|;
block|}
name|driver
operator|.
name|setMaxRows
argument_list|(
operator|(
name|int
operator|)
name|maxRows
argument_list|)
expr_stmt|;
name|RowSet
name|rowSet
init|=
name|RowSetFactory
operator|.
name|create
argument_list|(
name|resultSchema
argument_list|,
name|getProtocolVersion
argument_list|()
argument_list|,
name|isBlobBased
argument_list|)
decl_stmt|;
try|try
block|{
comment|/* if client is requesting fetch-from-start and its not the first time reading from this operation        * then reset the fetch position to beginning        */
if|if
condition|(
name|orientation
operator|.
name|equals
argument_list|(
name|FetchOrientation
operator|.
name|FETCH_FIRST
argument_list|)
operator|&&
name|fetchStarted
condition|)
block|{
name|driver
operator|.
name|resetFetch
argument_list|()
expr_stmt|;
block|}
name|fetchStarted
operator|=
literal|true
expr_stmt|;
name|driver
operator|.
name|setMaxRows
argument_list|(
operator|(
name|int
operator|)
name|maxRows
argument_list|)
expr_stmt|;
if|if
condition|(
name|driver
operator|.
name|getResults
argument_list|(
name|convey
argument_list|)
condition|)
block|{
return|return
name|decode
argument_list|(
name|convey
argument_list|,
name|rowSet
argument_list|)
return|;
block|}
return|return
name|rowSet
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|convey
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTaskStatus
parameter_list|()
throws|throws
name|HiveSQLException
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|QueryDisplay
operator|.
name|TaskDisplay
argument_list|>
name|statuses
init|=
name|driver
operator|.
name|getQueryDisplay
argument_list|()
operator|.
name|getTaskDisplays
argument_list|()
decl_stmt|;
if|if
condition|(
name|statuses
operator|!=
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|mapper
operator|.
name|writeValue
argument_list|(
name|out
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonGenerationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|JsonMappingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// Driver not initialized
return|return
literal|null
return|;
block|}
specifier|private
name|RowSet
name|decode
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|rows
parameter_list|,
name|RowSet
name|rowSet
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|driver
operator|.
name|isFetchingTable
argument_list|()
condition|)
block|{
return|return
name|prepareFromRow
argument_list|(
name|rows
argument_list|,
name|rowSet
argument_list|)
return|;
block|}
return|return
name|decodeFromString
argument_list|(
name|rows
argument_list|,
name|rowSet
argument_list|)
return|;
block|}
comment|// already encoded to thrift-able object in ThriftFormatter
specifier|private
name|RowSet
name|prepareFromRow
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|rows
parameter_list|,
name|RowSet
name|rowSet
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Object
name|row
range|:
name|rows
control|)
block|{
name|rowSet
operator|.
name|addRow
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|rowSet
return|;
block|}
specifier|private
name|RowSet
name|decodeFromString
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|rows
parameter_list|,
name|RowSet
name|rowSet
parameter_list|)
throws|throws
name|SQLException
throws|,
name|SerDeException
block|{
name|getSerDe
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|Object
index|[]
name|deserializedFields
init|=
operator|new
name|Object
index|[
name|fieldRefs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Object
name|rowObj
decl_stmt|;
name|ObjectInspector
name|fieldOI
decl_stmt|;
name|int
name|protocol
init|=
name|getProtocolVersion
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|rowString
range|:
name|rows
control|)
block|{
try|try
block|{
name|rowObj
operator|=
name|serde
operator|.
name|deserialize
argument_list|(
operator|new
name|BytesWritable
argument_list|(
operator|(
operator|(
name|String
operator|)
name|rowString
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StructField
name|fieldRef
init|=
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|fieldOI
operator|=
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|rowObj
argument_list|,
name|fieldRef
argument_list|)
decl_stmt|;
name|deserializedFields
index|[
name|i
index|]
operator|=
name|SerDeUtils
operator|.
name|toThriftPayload
argument_list|(
name|fieldData
argument_list|,
name|fieldOI
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
block|}
name|rowSet
operator|.
name|addRow
argument_list|(
name|deserializedFields
argument_list|)
expr_stmt|;
block|}
return|return
name|rowSet
return|;
block|}
specifier|private
name|AbstractSerDe
name|getSerDe
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|serde
operator|!=
literal|null
condition|)
block|{
return|return
name|serde
return|;
block|}
try|try
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
init|=
name|mResultSchema
operator|.
name|getFieldSchemas
argument_list|()
decl_stmt|;
name|StringBuilder
name|namesSb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|typesSb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldSchemas
operator|!=
literal|null
operator|&&
operator|!
name|fieldSchemas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|fieldSchemas
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
block|{
name|namesSb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|typesSb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|namesSb
operator|.
name|append
argument_list|(
name|fieldSchemas
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesSb
operator|.
name|append
argument_list|(
name|fieldSchemas
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|names
init|=
name|namesSb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|types
init|=
name|typesSb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|serde
operator|=
operator|new
name|LazySimpleSerDe
argument_list|()
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Column names: "
operator|+
name|names
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Column types: "
operator|+
name|types
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|queryState
operator|.
name|getConf
argument_list|()
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Could not create ResultSet: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
name|serde
return|;
block|}
comment|/**    * Get summary information of this SQLOperation for display in WebUI.    */
specifier|public
name|SQLOperationDisplay
name|getSQLOperationDisplay
parameter_list|()
block|{
return|return
name|sqlOpDisplay
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onNewState
parameter_list|(
name|OperationState
name|state
parameter_list|,
name|OperationState
name|prevState
parameter_list|)
block|{
name|super
operator|.
name|onNewState
argument_list|(
name|state
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
name|currentSQLStateScope
operator|=
name|updateOperationStateMetrics
argument_list|(
name|currentSQLStateScope
argument_list|,
name|MetricsConstant
operator|.
name|SQL_OPERATION_PREFIX
argument_list|,
name|MetricsConstant
operator|.
name|COMPLETED_SQL_OPERATION_PREFIX
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
comment|// New state is changed to running from something else (user is active)
if|if
condition|(
name|state
operator|==
name|OperationState
operator|.
name|RUNNING
operator|&&
name|prevState
operator|!=
name|state
condition|)
block|{
name|incrementUserQueries
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
block|}
comment|// New state is not running (user not active) any more
if|if
condition|(
name|prevState
operator|==
name|OperationState
operator|.
name|RUNNING
operator|&&
name|prevState
operator|!=
name|state
condition|)
block|{
name|decrementUserQueries
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|state
operator|==
name|OperationState
operator|.
name|FINISHED
operator|||
name|state
operator|==
name|OperationState
operator|.
name|CANCELED
operator|||
name|state
operator|==
name|OperationState
operator|.
name|ERROR
condition|)
block|{
comment|//update runtime
name|sqlOpDisplay
operator|.
name|setRuntime
argument_list|(
name|getOperationComplete
argument_list|()
operator|-
name|getOperationStart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
operator|&&
name|submittedQryScp
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|endScope
argument_list|(
name|submittedQryScp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|state
operator|==
name|OperationState
operator|.
name|CLOSED
condition|)
block|{
name|sqlOpDisplay
operator|.
name|closed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//CLOSED state not interesting, state before (FINISHED, ERROR) is.
name|sqlOpDisplay
operator|.
name|updateState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
name|OperationState
operator|.
name|ERROR
condition|)
block|{
name|markQueryMetric
argument_list|(
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
argument_list|,
name|MetricsConstant
operator|.
name|HS2_FAILED_QUERIES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
name|OperationState
operator|.
name|FINISHED
condition|)
block|{
name|markQueryMetric
argument_list|(
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
argument_list|,
name|MetricsConstant
operator|.
name|HS2_SUCEEDED_QUERIES
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|incrementUserQueries
parameter_list|(
name|Metrics
name|metrics
parameter_list|)
block|{
name|String
name|username
init|=
name|parentSession
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|userQueries
init|)
block|{
name|AtomicInteger
name|count
init|=
name|userQueries
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|AtomicInteger
name|prev
init|=
name|userQueries
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrementCounter
argument_list|(
name|ACTIVE_SQL_USER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
name|prev
expr_stmt|;
block|}
block|}
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|decrementUserQueries
parameter_list|(
name|Metrics
name|metrics
parameter_list|)
block|{
name|String
name|username
init|=
name|parentSession
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|userQueries
init|)
block|{
name|AtomicInteger
name|count
init|=
name|userQueries
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
operator|&&
name|count
operator|.
name|decrementAndGet
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|metrics
operator|.
name|decrementCounter
argument_list|(
name|ACTIVE_SQL_USER
argument_list|)
expr_stmt|;
name|userQueries
operator|.
name|remove
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|markQueryMetric
parameter_list|(
name|Metrics
name|metric
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|metric
operator|!=
literal|null
condition|)
block|{
name|metric
operator|.
name|markMeter
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getExecutionEngine
parameter_list|()
block|{
return|return
name|queryState
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

