begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|KerberosNameShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|TSetIpAddressProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthFactory
operator|.
name|AuthTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|CLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|FetchOrientation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|FetchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|GetInfoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|GetInfoValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|SessionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|TableSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCancelDelegationTokenReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCancelDelegationTokenResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCancelOperationReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCancelOperationResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCloseOperationReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCloseOperationResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCloseSessionReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCloseSessionResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TExecuteStatementReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TExecuteStatementResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TFetchResultsReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TFetchResultsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetCatalogsReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetCatalogsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetColumnsReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetColumnsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetCrossReferenceReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetCrossReferenceResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetDelegationTokenReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetDelegationTokenResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetFunctionsReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetFunctionsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetInfoReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetInfoResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetOperationStatusReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetOperationStatusResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetPrimaryKeysReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetPrimaryKeysResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetResultSetMetadataReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetResultSetMetadataResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetSchemasReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetSchemasResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetTableTypesReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetTableTypesResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetTablesReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetTablesResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetTypeInfoReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetTypeInfoResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TOpenSessionReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TOpenSessionResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TRenewDelegationTokenReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TRenewDelegationTokenResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TStatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
operator|.
name|HiveServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|ServerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * ThriftCLIService.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ThriftCLIService
extends|extends
name|AbstractService
implements|implements
name|TCLIService
operator|.
name|Iface
implements|,
name|Runnable
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThriftCLIService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|CLIService
name|cliService
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TStatus
name|OK_STATUS
init|=
operator|new
name|TStatus
argument_list|(
name|TStatusCode
operator|.
name|SUCCESS_STATUS
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|HiveAuthFactory
name|hiveAuthFactory
decl_stmt|;
specifier|protected
name|int
name|portNum
decl_stmt|;
specifier|protected
name|InetAddress
name|serverIPAddress
decl_stmt|;
specifier|protected
name|String
name|hiveHost
decl_stmt|;
specifier|protected
name|TServer
name|server
decl_stmt|;
specifier|protected
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
name|httpServer
decl_stmt|;
specifier|private
name|boolean
name|isStarted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|isEmbedded
init|=
literal|false
decl_stmt|;
specifier|protected
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|protected
name|int
name|minWorkerThreads
decl_stmt|;
specifier|protected
name|int
name|maxWorkerThreads
decl_stmt|;
specifier|protected
name|long
name|workerKeepAliveTime
decl_stmt|;
specifier|protected
name|ThreadLocal
argument_list|<
name|ServerContext
argument_list|>
name|currentServerContext
decl_stmt|;
specifier|static
class|class
name|ThriftCLIServerContext
implements|implements
name|ServerContext
block|{
specifier|private
name|SessionHandle
name|sessionHandle
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|setSessionHandle
parameter_list|(
name|SessionHandle
name|sessionHandle
parameter_list|)
block|{
name|this
operator|.
name|sessionHandle
operator|=
name|sessionHandle
expr_stmt|;
block|}
specifier|public
name|SessionHandle
name|getSessionHandle
parameter_list|()
block|{
return|return
name|sessionHandle
return|;
block|}
block|}
specifier|public
name|ThriftCLIService
parameter_list|(
name|CLIService
name|service
parameter_list|,
name|String
name|serviceName
parameter_list|)
block|{
name|super
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|this
operator|.
name|cliService
operator|=
name|service
expr_stmt|;
name|currentServerContext
operator|=
operator|new
name|ThreadLocal
argument_list|<
name|ServerContext
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|String
name|hiveHost
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_SERVER2_THRIFT_BIND_HOST"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveHost
operator|==
literal|null
condition|)
block|{
name|hiveHost
operator|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|serverIPAddress
operator|=
name|ServerUtils
operator|.
name|getHostAddress
argument_list|(
name|hiveHost
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Initialize common server configs needed in both binary& http modes
name|String
name|portString
decl_stmt|;
comment|// HTTP mode
if|if
condition|(
name|HiveServer2
operator|.
name|isHTTPTransportMode
argument_list|(
name|hiveConf
argument_list|)
condition|)
block|{
name|workerKeepAliveTime
operator|=
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_WORKER_KEEPALIVE_TIME
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|portString
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_SERVER2_THRIFT_HTTP_PORT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|portString
operator|!=
literal|null
condition|)
block|{
name|portNum
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|portNum
operator|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PORT
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Binary mode
else|else
block|{
name|workerKeepAliveTime
operator|=
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_WORKER_KEEPALIVE_TIME
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|portString
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_SERVER2_THRIFT_PORT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|portString
operator|!=
literal|null
condition|)
block|{
name|portNum
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|portNum
operator|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_PORT
argument_list|)
expr_stmt|;
block|}
block|}
name|minWorkerThreads
operator|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_MIN_WORKER_THREADS
argument_list|)
expr_stmt|;
name|maxWorkerThreads
operator|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_MAX_WORKER_THREADS
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isStarted
operator|&&
operator|!
name|isEmbedded
condition|)
block|{
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|isStarted
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|isStarted
operator|&&
operator|!
name|isEmbedded
condition|)
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Thrift server has stopped"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|httpServer
operator|!=
literal|null
operator|)
operator|&&
name|httpServer
operator|.
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Http server has stopped"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error stopping Http server: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|isStarted
operator|=
literal|false
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getPortNumber
parameter_list|()
block|{
return|return
name|portNum
return|;
block|}
specifier|public
name|InetAddress
name|getServerIPAddress
parameter_list|()
block|{
return|return
name|serverIPAddress
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetDelegationTokenResp
name|GetDelegationToken
parameter_list|(
name|TGetDelegationTokenReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetDelegationTokenResp
name|resp
init|=
operator|new
name|TGetDelegationTokenResp
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveAuthFactory
operator|==
literal|null
operator|||
operator|!
name|hiveAuthFactory
operator|.
name|isSASLKerberosUser
argument_list|()
condition|)
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|unsecureTokenErrorStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|String
name|token
init|=
name|cliService
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|hiveAuthFactory
argument_list|,
name|req
operator|.
name|getOwner
argument_list|()
argument_list|,
name|req
operator|.
name|getRenewer
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error obtaining delegation token"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|TStatus
name|tokenErrorStatus
init|=
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|tokenErrorStatus
operator|.
name|setSqlState
argument_list|(
literal|"42000"
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|tokenErrorStatus
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TCancelDelegationTokenResp
name|CancelDelegationToken
parameter_list|(
name|TCancelDelegationTokenReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TCancelDelegationTokenResp
name|resp
init|=
operator|new
name|TCancelDelegationTokenResp
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveAuthFactory
operator|==
literal|null
operator|||
operator|!
name|hiveAuthFactory
operator|.
name|isSASLKerberosUser
argument_list|()
condition|)
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|unsecureTokenErrorStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|cliService
operator|.
name|cancelDelegationToken
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|hiveAuthFactory
argument_list|,
name|req
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error canceling delegation token"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TRenewDelegationTokenResp
name|RenewDelegationToken
parameter_list|(
name|TRenewDelegationTokenReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TRenewDelegationTokenResp
name|resp
init|=
operator|new
name|TRenewDelegationTokenResp
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveAuthFactory
operator|==
literal|null
operator|||
operator|!
name|hiveAuthFactory
operator|.
name|isSASLKerberosUser
argument_list|()
condition|)
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|unsecureTokenErrorStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|cliService
operator|.
name|renewDelegationToken
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|hiveAuthFactory
argument_list|,
name|req
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error obtaining renewing token"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resp
return|;
block|}
specifier|private
name|TStatus
name|unsecureTokenErrorStatus
parameter_list|()
block|{
name|TStatus
name|errorStatus
init|=
operator|new
name|TStatus
argument_list|(
name|TStatusCode
operator|.
name|ERROR_STATUS
argument_list|)
decl_stmt|;
name|errorStatus
operator|.
name|setErrorMessage
argument_list|(
literal|"Delegation token only supported over remote "
operator|+
literal|"client with kerberos authentication"
argument_list|)
expr_stmt|;
return|return
name|errorStatus
return|;
block|}
annotation|@
name|Override
specifier|public
name|TOpenSessionResp
name|OpenSession
parameter_list|(
name|TOpenSessionReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client protocol version: "
operator|+
name|req
operator|.
name|getClient_protocol
argument_list|()
argument_list|)
expr_stmt|;
name|TOpenSessionResp
name|resp
init|=
operator|new
name|TOpenSessionResp
argument_list|()
decl_stmt|;
try|try
block|{
name|SessionHandle
name|sessionHandle
init|=
name|getSessionHandle
argument_list|(
name|req
argument_list|,
name|resp
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setSessionHandle
argument_list|(
name|sessionHandle
operator|.
name|toTSessionHandle
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: set real configuration map
name|resp
operator|.
name|setConfiguration
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
name|ThriftCLIServerContext
name|context
init|=
operator|(
name|ThriftCLIServerContext
operator|)
name|currentServerContext
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setSessionHandle
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error opening session: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
specifier|private
name|String
name|getIpAddress
parameter_list|()
block|{
name|String
name|clientIpAddress
decl_stmt|;
comment|// Http transport mode.
comment|// We set the thread local ip address, in ThriftHttpServlet.
if|if
condition|(
name|cliService
operator|.
name|getHiveConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|clientIpAddress
operator|=
name|SessionManager
operator|.
name|getIpAddress
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hiveAuthFactory
operator|!=
literal|null
operator|&&
name|hiveAuthFactory
operator|.
name|isSASLWithKerberizedHadoop
argument_list|()
condition|)
block|{
name|clientIpAddress
operator|=
name|hiveAuthFactory
operator|.
name|getIpAddress
argument_list|()
expr_stmt|;
block|}
comment|// NOSASL
else|else
block|{
name|clientIpAddress
operator|=
name|TSetIpAddressProcessor
operator|.
name|getUserIpAddress
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client's IP Address: "
operator|+
name|clientIpAddress
argument_list|)
expr_stmt|;
return|return
name|clientIpAddress
return|;
block|}
comment|/**    * Returns the effective username.    * 1. If hive.server2.allow.user.substitution = false: the username of the connecting user    * 2. If hive.server2.allow.user.substitution = true: the username of the end user,    * that the connecting user is trying to proxy for.    * This includes a check whether the connecting user is allowed to proxy for the end user.    * @param req    * @return    * @throws HiveSQLException    */
specifier|private
name|String
name|getUserName
parameter_list|(
name|TOpenSessionReq
name|req
parameter_list|)
throws|throws
name|HiveSQLException
throws|,
name|IOException
block|{
name|String
name|userName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hiveAuthFactory
operator|!=
literal|null
operator|&&
name|hiveAuthFactory
operator|.
name|isSASLWithKerberizedHadoop
argument_list|()
condition|)
block|{
name|userName
operator|=
name|hiveAuthFactory
operator|.
name|getRemoteUser
argument_list|()
expr_stmt|;
block|}
comment|// NOSASL
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
name|userName
operator|=
name|TSetIpAddressProcessor
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
comment|// Http transport mode.
comment|// We set the thread local username, in ThriftHttpServlet.
if|if
condition|(
name|cliService
operator|.
name|getHiveConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|userName
operator|=
name|SessionManager
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
name|userName
operator|=
name|req
operator|.
name|getUsername
argument_list|()
expr_stmt|;
block|}
name|userName
operator|=
name|getShortName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|String
name|effectiveClientUser
init|=
name|getProxyUser
argument_list|(
name|userName
argument_list|,
name|req
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|getIpAddress
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client's username: "
operator|+
name|effectiveClientUser
argument_list|)
expr_stmt|;
return|return
name|effectiveClientUser
return|;
block|}
specifier|private
name|String
name|getShortName
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hiveAuthFactory
operator|!=
literal|null
operator|&&
name|hiveAuthFactory
operator|.
name|isSASLKerberosUser
argument_list|()
condition|)
block|{
comment|// KerberosName.getShorName can only be used for kerberos user, but not for the user
comment|// logged in via other authentications such as LDAP
name|KerberosNameShim
name|fullKerberosName
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getKerberosNameShim
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|ret
operator|=
name|fullKerberosName
operator|.
name|getShortName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|indexOfDomainMatch
init|=
name|ServiceUtils
operator|.
name|indexOfDomainMatch
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|ret
operator|=
operator|(
name|indexOfDomainMatch
operator|<=
literal|0
operator|)
condition|?
name|userName
else|:
name|userName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfDomainMatch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Create a session handle    * @param req    * @param res    * @return    * @throws HiveSQLException    * @throws LoginException    * @throws IOException    */
name|SessionHandle
name|getSessionHandle
parameter_list|(
name|TOpenSessionReq
name|req
parameter_list|,
name|TOpenSessionResp
name|res
parameter_list|)
throws|throws
name|HiveSQLException
throws|,
name|LoginException
throws|,
name|IOException
block|{
name|String
name|userName
init|=
name|getUserName
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|String
name|ipAddress
init|=
name|getIpAddress
argument_list|()
decl_stmt|;
name|TProtocolVersion
name|protocol
init|=
name|getMinVersion
argument_list|(
name|CLIService
operator|.
name|SERVER_VERSION
argument_list|,
name|req
operator|.
name|getClient_protocol
argument_list|()
argument_list|)
decl_stmt|;
name|SessionHandle
name|sessionHandle
decl_stmt|;
if|if
condition|(
name|cliService
operator|.
name|getHiveConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|)
operator|&&
operator|(
name|userName
operator|!=
literal|null
operator|)
condition|)
block|{
name|String
name|delegationTokenStr
init|=
name|getDelegationToken
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|sessionHandle
operator|=
name|cliService
operator|.
name|openSessionWithImpersonation
argument_list|(
name|protocol
argument_list|,
name|userName
argument_list|,
name|req
operator|.
name|getPassword
argument_list|()
argument_list|,
name|ipAddress
argument_list|,
name|req
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|delegationTokenStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sessionHandle
operator|=
name|cliService
operator|.
name|openSession
argument_list|(
name|protocol
argument_list|,
name|userName
argument_list|,
name|req
operator|.
name|getPassword
argument_list|()
argument_list|,
name|ipAddress
argument_list|,
name|req
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setServerProtocolVersion
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
return|return
name|sessionHandle
return|;
block|}
specifier|private
name|String
name|getDelegationToken
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|HiveSQLException
throws|,
name|LoginException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|cliService
operator|.
name|getDelegationTokenFromMetaStore
argument_list|(
name|userName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// The delegation token is not applicable in the given deployment mode
comment|// such as HMS is not kerberos secured
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|TProtocolVersion
name|getMinVersion
parameter_list|(
name|TProtocolVersion
modifier|...
name|versions
parameter_list|)
block|{
name|TProtocolVersion
index|[]
name|values
init|=
name|TProtocolVersion
operator|.
name|values
argument_list|()
decl_stmt|;
name|int
name|current
init|=
name|values
index|[
name|values
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|TProtocolVersion
name|version
range|:
name|versions
control|)
block|{
if|if
condition|(
name|current
operator|>
name|version
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|current
operator|=
name|version
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|TProtocolVersion
name|version
range|:
name|values
control|)
block|{
if|if
condition|(
name|version
operator|.
name|getValue
argument_list|()
operator|==
name|current
condition|)
block|{
return|return
name|version
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"never"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|TCloseSessionResp
name|CloseSession
parameter_list|(
name|TCloseSessionReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TCloseSessionResp
name|resp
init|=
operator|new
name|TCloseSessionResp
argument_list|()
decl_stmt|;
try|try
block|{
name|SessionHandle
name|sessionHandle
init|=
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
decl_stmt|;
name|cliService
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
name|ThriftCLIServerContext
name|context
init|=
operator|(
name|ThriftCLIServerContext
operator|)
name|currentServerContext
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setSessionHandle
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing session: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetInfoResp
name|GetInfo
parameter_list|(
name|TGetInfoReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetInfoResp
name|resp
init|=
operator|new
name|TGetInfoResp
argument_list|()
decl_stmt|;
try|try
block|{
name|GetInfoValue
name|getInfoValue
init|=
name|cliService
operator|.
name|getInfo
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|GetInfoType
operator|.
name|getGetInfoType
argument_list|(
name|req
operator|.
name|getInfoType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setInfoValue
argument_list|(
name|getInfoValue
operator|.
name|toTGetInfoValue
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting info: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TExecuteStatementResp
name|ExecuteStatement
parameter_list|(
name|TExecuteStatementReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TExecuteStatementResp
name|resp
init|=
operator|new
name|TExecuteStatementResp
argument_list|()
decl_stmt|;
try|try
block|{
name|SessionHandle
name|sessionHandle
init|=
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|statement
init|=
name|req
operator|.
name|getStatement
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
name|req
operator|.
name|getConfOverlay
argument_list|()
decl_stmt|;
name|Boolean
name|runAsync
init|=
name|req
operator|.
name|isRunAsync
argument_list|()
decl_stmt|;
name|long
name|queryTimeout
init|=
name|req
operator|.
name|getQueryTimeout
argument_list|()
decl_stmt|;
name|OperationHandle
name|operationHandle
init|=
name|runAsync
condition|?
name|cliService
operator|.
name|executeStatementAsync
argument_list|(
name|sessionHandle
argument_list|,
name|statement
argument_list|,
name|confOverlay
argument_list|,
name|queryTimeout
argument_list|)
else|:
name|cliService
operator|.
name|executeStatement
argument_list|(
name|sessionHandle
argument_list|,
name|statement
argument_list|,
name|confOverlay
argument_list|,
name|queryTimeout
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|operationHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Note: it's rather important that this (and other methods) catch Exception, not Throwable;
comment|// in combination with HiveSessionProxy.invoke code, perhaps unintentionally, it used
comment|// to also catch all errors; and now it allows OOMs only to propagate.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error executing statement: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetTypeInfoResp
name|GetTypeInfo
parameter_list|(
name|TGetTypeInfoReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetTypeInfoResp
name|resp
init|=
operator|new
name|TGetTypeInfoResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationHandle
name|operationHandle
init|=
name|cliService
operator|.
name|getTypeInfo
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|operationHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting type info: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetCatalogsResp
name|GetCatalogs
parameter_list|(
name|TGetCatalogsReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetCatalogsResp
name|resp
init|=
operator|new
name|TGetCatalogsResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationHandle
name|opHandle
init|=
name|cliService
operator|.
name|getCatalogs
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|opHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting catalogs: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetSchemasResp
name|GetSchemas
parameter_list|(
name|TGetSchemasReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetSchemasResp
name|resp
init|=
operator|new
name|TGetSchemasResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationHandle
name|opHandle
init|=
name|cliService
operator|.
name|getSchemas
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|req
operator|.
name|getSchemaName
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|opHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting schemas: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetTablesResp
name|GetTables
parameter_list|(
name|TGetTablesReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetTablesResp
name|resp
init|=
operator|new
name|TGetTablesResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationHandle
name|opHandle
init|=
name|cliService
operator|.
name|getTables
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|req
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|req
operator|.
name|getTableName
argument_list|()
argument_list|,
name|req
operator|.
name|getTableTypes
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|opHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting tables: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetTableTypesResp
name|GetTableTypes
parameter_list|(
name|TGetTableTypesReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetTableTypesResp
name|resp
init|=
operator|new
name|TGetTableTypesResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationHandle
name|opHandle
init|=
name|cliService
operator|.
name|getTableTypes
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|opHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting table types: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetColumnsResp
name|GetColumns
parameter_list|(
name|TGetColumnsReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetColumnsResp
name|resp
init|=
operator|new
name|TGetColumnsResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationHandle
name|opHandle
init|=
name|cliService
operator|.
name|getColumns
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|req
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|req
operator|.
name|getTableName
argument_list|()
argument_list|,
name|req
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|opHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting columns: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetFunctionsResp
name|GetFunctions
parameter_list|(
name|TGetFunctionsReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetFunctionsResp
name|resp
init|=
operator|new
name|TGetFunctionsResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationHandle
name|opHandle
init|=
name|cliService
operator|.
name|getFunctions
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|req
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|req
operator|.
name|getFunctionName
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|opHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting functions: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetOperationStatusResp
name|GetOperationStatus
parameter_list|(
name|TGetOperationStatusReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetOperationStatusResp
name|resp
init|=
operator|new
name|TGetOperationStatusResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationStatus
name|operationStatus
init|=
name|cliService
operator|.
name|getOperationStatus
argument_list|(
operator|new
name|OperationHandle
argument_list|(
name|req
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationState
argument_list|(
name|operationStatus
operator|.
name|getState
argument_list|()
operator|.
name|toTOperationState
argument_list|()
argument_list|)
expr_stmt|;
name|HiveSQLException
name|opException
init|=
name|operationStatus
operator|.
name|getOperationException
argument_list|()
decl_stmt|;
name|resp
operator|.
name|setTaskStatus
argument_list|(
name|operationStatus
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setOperationStarted
argument_list|(
name|operationStatus
operator|.
name|getOperationStarted
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setOperationCompleted
argument_list|(
name|operationStatus
operator|.
name|getOperationCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setHasResultSet
argument_list|(
name|operationStatus
operator|.
name|getHasResultSet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|opException
operator|!=
literal|null
condition|)
block|{
name|resp
operator|.
name|setSqlState
argument_list|(
name|opException
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setErrorCode
argument_list|(
name|opException
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setErrorMessage
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|opException
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting operation status: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TCancelOperationResp
name|CancelOperation
parameter_list|(
name|TCancelOperationReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TCancelOperationResp
name|resp
init|=
operator|new
name|TCancelOperationResp
argument_list|()
decl_stmt|;
try|try
block|{
name|cliService
operator|.
name|cancelOperation
argument_list|(
operator|new
name|OperationHandle
argument_list|(
name|req
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error cancelling operation: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TCloseOperationResp
name|CloseOperation
parameter_list|(
name|TCloseOperationReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TCloseOperationResp
name|resp
init|=
operator|new
name|TCloseOperationResp
argument_list|()
decl_stmt|;
try|try
block|{
name|cliService
operator|.
name|closeOperation
argument_list|(
operator|new
name|OperationHandle
argument_list|(
name|req
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing operation: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetResultSetMetadataResp
name|GetResultSetMetadata
parameter_list|(
name|TGetResultSetMetadataReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetResultSetMetadataResp
name|resp
init|=
operator|new
name|TGetResultSetMetadataResp
argument_list|()
decl_stmt|;
try|try
block|{
name|TableSchema
name|schema
init|=
name|cliService
operator|.
name|getResultSetMetadata
argument_list|(
operator|new
name|OperationHandle
argument_list|(
name|req
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setSchema
argument_list|(
name|schema
operator|.
name|toTTableSchema
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting result set metadata: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TFetchResultsResp
name|FetchResults
parameter_list|(
name|TFetchResultsReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TFetchResultsResp
name|resp
init|=
operator|new
name|TFetchResultsResp
argument_list|()
decl_stmt|;
try|try
block|{
name|RowSet
name|rowSet
init|=
name|cliService
operator|.
name|fetchResults
argument_list|(
operator|new
name|OperationHandle
argument_list|(
name|req
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
argument_list|,
name|FetchOrientation
operator|.
name|getFetchOrientation
argument_list|(
name|req
operator|.
name|getOrientation
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getMaxRows
argument_list|()
argument_list|,
name|FetchType
operator|.
name|getFetchType
argument_list|(
name|req
operator|.
name|getFetchType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setResults
argument_list|(
name|rowSet
operator|.
name|toTRowSet
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setHasMoreRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error fetching results: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetPrimaryKeysResp
name|GetPrimaryKeys
parameter_list|(
name|TGetPrimaryKeysReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetPrimaryKeysResp
name|resp
init|=
operator|new
name|TGetPrimaryKeysResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationHandle
name|opHandle
init|=
name|cliService
operator|.
name|getPrimaryKeys
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|req
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|opHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting functions: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|TGetCrossReferenceResp
name|GetCrossReference
parameter_list|(
name|TGetCrossReferenceReq
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|TGetCrossReferenceResp
name|resp
init|=
operator|new
name|TGetCrossReferenceResp
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationHandle
name|opHandle
init|=
name|cliService
operator|.
name|getCrossReference
argument_list|(
operator|new
name|SessionHandle
argument_list|(
name|req
operator|.
name|getSessionHandle
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getParentCatalogName
argument_list|()
argument_list|,
name|req
operator|.
name|getParentSchemaName
argument_list|()
argument_list|,
name|req
operator|.
name|getParentTableName
argument_list|()
argument_list|,
name|req
operator|.
name|getForeignCatalogName
argument_list|()
argument_list|,
name|req
operator|.
name|getForeignSchemaName
argument_list|()
argument_list|,
name|req
operator|.
name|getForeignTableName
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setOperationHandle
argument_list|(
name|opHandle
operator|.
name|toTOperationHandle
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting functions: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HiveSQLException
operator|.
name|toTStatus
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|abstract
name|void
name|run
parameter_list|()
function_decl|;
comment|/**    * If the proxy user name is provided then check privileges to substitute the user.    * @param realUser    * @param sessionConf    * @param ipAddress    * @return    * @throws HiveSQLException    */
specifier|private
name|String
name|getProxyUser
parameter_list|(
name|String
name|realUser
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sessionConf
parameter_list|,
name|String
name|ipAddress
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|String
name|proxyUser
init|=
literal|null
decl_stmt|;
comment|// Http transport mode.
comment|// We set the thread local proxy username, in ThriftHttpServlet.
if|if
condition|(
name|cliService
operator|.
name|getHiveConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|proxyUser
operator|=
name|SessionManager
operator|.
name|getProxyUserName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Proxy user from query string: "
operator|+
name|proxyUser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxyUser
operator|==
literal|null
operator|&&
name|sessionConf
operator|!=
literal|null
operator|&&
name|sessionConf
operator|.
name|containsKey
argument_list|(
name|HiveAuthFactory
operator|.
name|HS2_PROXY_USER
argument_list|)
condition|)
block|{
name|String
name|proxyUserFromThriftBody
init|=
name|sessionConf
operator|.
name|get
argument_list|(
name|HiveAuthFactory
operator|.
name|HS2_PROXY_USER
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Proxy user from thrift body: "
operator|+
name|proxyUserFromThriftBody
argument_list|)
expr_stmt|;
name|proxyUser
operator|=
name|proxyUserFromThriftBody
expr_stmt|;
block|}
if|if
condition|(
name|proxyUser
operator|==
literal|null
condition|)
block|{
return|return
name|realUser
return|;
block|}
comment|// check whether substitution is allowed
if|if
condition|(
operator|!
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ALLOW_USER_SUBSTITUTION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"Proxy user substitution is not allowed"
argument_list|)
throw|;
block|}
comment|// If there's no authentication, then directly substitute the user
if|if
condition|(
name|HiveAuthFactory
operator|.
name|AuthTypes
operator|.
name|NONE
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|proxyUser
return|;
block|}
comment|// Verify proxy user privilege of the realUser for the proxyUser
name|HiveAuthFactory
operator|.
name|verifyProxyAccess
argument_list|(
name|realUser
argument_list|,
name|proxyUser
argument_list|,
name|ipAddress
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verified proxy user: "
operator|+
name|proxyUser
argument_list|)
expr_stmt|;
return|return
name|proxyUser
return|;
block|}
block|}
end_class

end_unit

