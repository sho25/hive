begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TColumnDesc
import|;
end_import

begin_comment
comment|/**  * ColumnDescriptor.  *  */
end_comment

begin_class
specifier|public
class|class
name|ColumnDescriptor
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|comment
decl_stmt|;
specifier|private
specifier|final
name|TypeDescriptor
name|type
decl_stmt|;
comment|// ordinal position of this column in the schema
specifier|private
specifier|final
name|int
name|position
decl_stmt|;
specifier|public
name|ColumnDescriptor
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|comment
parameter_list|,
name|TypeDescriptor
name|type
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
block|}
specifier|public
name|ColumnDescriptor
parameter_list|(
name|TColumnDesc
name|tColumnDesc
parameter_list|)
block|{
name|name
operator|=
name|tColumnDesc
operator|.
name|getColumnName
argument_list|()
expr_stmt|;
name|comment
operator|=
name|tColumnDesc
operator|.
name|getComment
argument_list|()
expr_stmt|;
name|type
operator|=
operator|new
name|TypeDescriptor
argument_list|(
name|tColumnDesc
operator|.
name|getTypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|position
operator|=
name|tColumnDesc
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ColumnDescriptor
parameter_list|(
name|FieldSchema
name|column
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|name
operator|=
name|column
operator|.
name|getName
argument_list|()
expr_stmt|;
name|comment
operator|=
name|column
operator|.
name|getComment
argument_list|()
expr_stmt|;
name|type
operator|=
operator|new
name|TypeDescriptor
argument_list|(
name|column
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
block|}
specifier|public
specifier|static
name|ColumnDescriptor
name|newPrimitiveColumnDescriptor
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|comment
parameter_list|,
name|Type
name|type
parameter_list|,
name|int
name|position
parameter_list|)
block|{
comment|// Current usage looks like it's only for metadata columns, but if that changes then
comment|// this method may need to require a type qualifiers aruments.
return|return
operator|new
name|ColumnDescriptor
argument_list|(
name|name
argument_list|,
name|comment
argument_list|,
operator|new
name|TypeDescriptor
argument_list|(
name|type
argument_list|)
argument_list|,
name|position
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
specifier|public
name|TypeDescriptor
name|getTypeDescriptor
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|int
name|getOrdinalPosition
parameter_list|()
block|{
return|return
name|position
return|;
block|}
specifier|public
name|TColumnDesc
name|toTColumnDesc
parameter_list|()
block|{
name|TColumnDesc
name|tColumnDesc
init|=
operator|new
name|TColumnDesc
argument_list|()
decl_stmt|;
name|tColumnDesc
operator|.
name|setColumnName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|tColumnDesc
operator|.
name|setComment
argument_list|(
name|comment
argument_list|)
expr_stmt|;
name|tColumnDesc
operator|.
name|setTypeDesc
argument_list|(
name|type
operator|.
name|toTTypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|tColumnDesc
operator|.
name|setPosition
argument_list|(
name|position
argument_list|)
expr_stmt|;
return|return
name|tColumnDesc
return|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isPrimitive
parameter_list|()
block|{
return|return
name|type
operator|.
name|getType
argument_list|()
operator|.
name|isPrimitiveType
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|type
operator|.
name|getTypeName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

