begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|CLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
operator|.
name|ThreadFactoryWithGarbageCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ThriftBinaryCLIService
extends|extends
name|ThriftCLIService
block|{
specifier|public
name|ThriftBinaryCLIService
parameter_list|(
name|CLIService
name|cliService
parameter_list|)
block|{
name|super
argument_list|(
name|cliService
argument_list|,
name|ThriftBinaryCLIService
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Server thread pool
name|String
name|threadPoolName
init|=
literal|"HiveServer2-Handler-Pool"
decl_stmt|;
name|ExecutorService
name|executorService
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|minWorkerThreads
argument_list|,
name|maxWorkerThreads
argument_list|,
name|workerKeepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactoryWithGarbageCleanup
argument_list|(
name|threadPoolName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Thrift configs
name|hiveAuthFactory
operator|=
operator|new
name|HiveAuthFactory
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TTransportFactory
name|transportFactory
init|=
name|hiveAuthFactory
operator|.
name|getAuthTransFactory
argument_list|()
decl_stmt|;
name|TProcessorFactory
name|processorFactory
init|=
name|hiveAuthFactory
operator|.
name|getAuthProcFactory
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|TServerSocket
name|serverSocket
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sslVersionBlacklist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sslVersion
range|:
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SSL_PROTOCOL_BLACKLIST
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|sslVersionBlacklist
operator|.
name|add
argument_list|(
name|sslVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
argument_list|)
condition|)
block|{
name|serverSocket
operator|=
name|HiveAuthFactory
operator|.
name|getServerSocket
argument_list|(
name|hiveHost
argument_list|,
name|portNum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|keyStorePath
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SSL_KEYSTORE_PATH
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyStorePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SSL_KEYSTORE_PATH
operator|.
name|varname
operator|+
literal|" Not configured for SSL connection"
argument_list|)
throw|;
block|}
name|String
name|keyStorePassword
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getPassword
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_SSL_KEYSTORE_PASSWORD
operator|.
name|varname
argument_list|)
decl_stmt|;
name|serverSocket
operator|=
name|HiveAuthFactory
operator|.
name|getServerSSLSocket
argument_list|(
name|hiveHost
argument_list|,
name|portNum
argument_list|,
name|keyStorePath
argument_list|,
name|keyStorePassword
argument_list|,
name|sslVersionBlacklist
argument_list|)
expr_stmt|;
block|}
comment|// Server args
name|int
name|maxMessageSize
init|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_MAX_MESSAGE_SIZE
argument_list|)
decl_stmt|;
name|int
name|requestTimeout
init|=
operator|(
name|int
operator|)
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_LOGIN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|int
name|beBackoffSlotLength
init|=
operator|(
name|int
operator|)
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_LOGIN_BEBACKOFF_SLOT_LENGTH
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|TThreadPoolServer
operator|.
name|Args
name|sargs
init|=
operator|new
name|TThreadPoolServer
operator|.
name|Args
argument_list|(
name|serverSocket
argument_list|)
operator|.
name|processorFactory
argument_list|(
name|processorFactory
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
operator|.
name|inputProtocolFactory
argument_list|(
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|maxMessageSize
argument_list|,
name|maxMessageSize
argument_list|)
argument_list|)
operator|.
name|requestTimeout
argument_list|(
name|requestTimeout
argument_list|)
operator|.
name|requestTimeoutUnit
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|beBackoffSlotLength
argument_list|(
name|beBackoffSlotLength
argument_list|)
operator|.
name|beBackoffSlotLengthUnit
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|executorService
argument_list|(
name|executorService
argument_list|)
decl_stmt|;
comment|// TCP Server
name|server
operator|=
operator|new
name|TThreadPoolServer
argument_list|(
name|sargs
argument_list|)
expr_stmt|;
name|server
operator|.
name|serve
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"Started "
operator|+
name|ThriftBinaryCLIService
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" on port "
operator|+
name|portNum
operator|+
literal|" with "
operator|+
name|minWorkerThreads
operator|+
literal|"..."
operator|+
name|maxWorkerThreads
operator|+
literal|" worker threads"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error starting HiveServer2: could not start "
operator|+
name|ThriftBinaryCLIService
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

