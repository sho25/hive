begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TRowSet
import|;
end_import

begin_comment
comment|/**  * RowSet.  *  */
end_comment

begin_class
specifier|public
class|class
name|RowSet
block|{
specifier|private
name|long
name|startOffset
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|hasMoreResults
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Row
argument_list|>
name|rows
decl_stmt|;
specifier|public
name|RowSet
parameter_list|()
block|{
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|RowSet
parameter_list|(
name|TRowSet
name|tRowSet
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|startOffset
operator|=
name|tRowSet
operator|.
name|getStartRowOffset
argument_list|()
expr_stmt|;
for|for
control|(
name|TRow
name|tRow
range|:
name|tRowSet
operator|.
name|getRows
argument_list|()
control|)
block|{
name|rows
operator|.
name|add
argument_list|(
operator|new
name|Row
argument_list|(
name|tRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|RowSet
parameter_list|(
name|List
argument_list|<
name|Row
argument_list|>
name|rows
parameter_list|,
name|long
name|startOffset
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|rows
operator|.
name|addAll
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
block|}
specifier|public
name|RowSet
name|addRow
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RowSet
name|addRow
parameter_list|(
name|TableSchema
name|schema
parameter_list|,
name|Object
index|[]
name|fields
parameter_list|)
block|{
return|return
name|addRow
argument_list|(
operator|new
name|Row
argument_list|(
name|schema
argument_list|,
name|fields
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RowSet
name|extractSubset
parameter_list|(
name|int
name|maxRows
parameter_list|)
block|{
name|int
name|numRows
init|=
name|rows
operator|.
name|size
argument_list|()
decl_stmt|;
name|maxRows
operator|=
operator|(
name|maxRows
operator|<=
name|numRows
operator|)
condition|?
name|maxRows
else|:
name|numRows
expr_stmt|;
name|RowSet
name|result
init|=
operator|new
name|RowSet
argument_list|(
name|rows
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|maxRows
argument_list|)
argument_list|,
name|startOffset
argument_list|)
decl_stmt|;
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|(
name|rows
operator|.
name|subList
argument_list|(
name|maxRows
argument_list|,
name|numRows
argument_list|)
argument_list|)
expr_stmt|;
name|startOffset
operator|+=
name|result
operator|.
name|getSize
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|long
name|getStartOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
specifier|public
name|RowSet
name|setStartOffset
parameter_list|(
name|long
name|startOffset
parameter_list|)
block|{
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|getHasMoreResults
parameter_list|()
block|{
return|return
name|hasMoreResults
return|;
block|}
specifier|public
name|RowSet
name|setHasMoreResults
parameter_list|(
name|boolean
name|hasMoreResults
parameter_list|)
block|{
name|this
operator|.
name|hasMoreResults
operator|=
name|hasMoreResults
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|TRowSet
name|toTRowSet
parameter_list|()
block|{
name|TRowSet
name|tRowSet
init|=
operator|new
name|TRowSet
argument_list|()
decl_stmt|;
name|tRowSet
operator|.
name|setStartRowOffset
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TRow
argument_list|>
name|tRows
init|=
operator|new
name|ArrayList
argument_list|<
name|TRow
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
name|row
range|:
name|rows
control|)
block|{
name|tRows
operator|.
name|add
argument_list|(
name|row
operator|.
name|toTRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tRowSet
operator|.
name|setRows
argument_list|(
name|tRows
argument_list|)
expr_stmt|;
comment|/*     //List<Boolean> booleanColumn = new ArrayList<Boolean>();     //List<Byte> byteColumn = new ArrayList<Byte>();     //List<Short> shortColumn = new ArrayList<Short>();     List<Integer> integerColumn = new ArrayList<Integer>();      integerColumn.add(1);     //integerColumn.add(null);     integerColumn.add(3);     //integerColumn.add(null);       TColumnUnion column = TColumnUnion.i32Column(integerColumn);     List<TColumnUnion> columns = new ArrayList<TColumnUnion>();     columns.add(column);     tRowSet.setColumns(columns);     */
return|return
name|tRowSet
return|;
block|}
block|}
end_class

end_unit

