begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|DelegationTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenSelector
import|;
end_import

begin_class
specifier|public
class|class
name|SessionUtils
block|{
comment|/**    * Get the string form of the token given a token signature. The signature is used as the value of    * the "service" field in the token for lookup. Ref: AbstractDelegationTokenSelector in Hadoop. If    * there exists such a token in the token cache (credential store) of the job, the lookup returns    * that. This is relevant only when running against a "secure" hadoop release The method gets hold    * of the tokens if they are set up by hadoop - this should happen on the map/reduce tasks if the    * client added the tokens into hadoop's credential store in the front end during job submission.    * The method will select the hive delegation token among the set of tokens and return the string    * form of it    *     * @param tokenSignature    * @return the string form of the token found    * @throws IOException    */
specifier|public
specifier|static
name|String
name|getTokenStrForm
parameter_list|(
name|String
name|tokenSignature
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tokenSelector
init|=
operator|new
name|DelegationTokenSelector
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|tokenSelector
operator|.
name|selectToken
argument_list|(
name|tokenSignature
operator|==
literal|null
condition|?
operator|new
name|Text
argument_list|()
else|:
operator|new
name|Text
argument_list|(
name|tokenSignature
argument_list|)
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|token
operator|!=
literal|null
condition|?
name|token
operator|.
name|encodeToUrlString
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**    * Create a delegation token object for the given token string and service. Add the token to given    * UGI    *     * @param ugi    * @param tokenStr    * @param tokenService    * @throws IOException    */
specifier|public
specifier|static
name|void
name|setTokenStr
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|String
name|tokenStr
parameter_list|,
name|String
name|tokenService
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|delegationToken
init|=
name|createToken
argument_list|(
name|tokenStr
argument_list|,
name|tokenService
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|delegationToken
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a given service to delegation token string.    *     * @param tokenStr    * @param tokenService    * @return    * @throws IOException    */
specifier|public
specifier|static
name|String
name|addServiceToToken
parameter_list|(
name|String
name|tokenStr
parameter_list|,
name|String
name|tokenService
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|delegationToken
init|=
name|createToken
argument_list|(
name|tokenStr
argument_list|,
name|tokenService
argument_list|)
decl_stmt|;
return|return
name|delegationToken
operator|.
name|encodeToUrlString
argument_list|()
return|;
block|}
comment|/**    * Create a new token using the given string and service    *     * @param tokenStr    * @param tokenService    * @return    * @throws IOException    */
specifier|private
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|createToken
parameter_list|(
name|String
name|tokenStr
parameter_list|,
name|String
name|tokenService
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|delegationToken
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|delegationToken
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStr
argument_list|)
expr_stmt|;
name|delegationToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|tokenService
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|delegationToken
return|;
block|}
block|}
end_class

end_unit

