begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TRow
import|;
end_import

begin_comment
comment|/**  * Row.  *  */
end_comment

begin_class
specifier|public
class|class
name|Row
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|ColumnValue
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnValue
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Row
parameter_list|()
block|{   }
specifier|public
name|Row
parameter_list|(
name|TRow
name|tRow
parameter_list|)
block|{
for|for
control|(
name|TColumnValue
name|tColumnValues
range|:
name|tRow
operator|.
name|getColVals
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
operator|new
name|ColumnValue
argument_list|(
name|tColumnValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Row
parameter_list|(
name|TableSchema
name|schema
parameter_list|,
name|Object
index|[]
name|fields
parameter_list|)
block|{
assert|assert
name|fields
operator|.
name|length
operator|==
name|schema
operator|.
name|getColumnDescriptors
argument_list|()
operator|.
name|size
argument_list|()
assert|;
for|for
control|(
name|ColumnDescriptor
name|colDesc
range|:
name|schema
operator|.
name|getColumnDescriptors
argument_list|()
control|)
block|{
name|TypeDescriptor
name|typeDesc
init|=
name|colDesc
operator|.
name|getTypeDescriptor
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|ColumnValue
operator|.
name|newColumnValue
argument_list|(
name|typeDesc
operator|.
name|getType
argument_list|()
argument_list|,
name|fields
index|[
name|colDesc
operator|.
name|getOrdinalPosition
argument_list|()
operator|-
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Row
name|addColumnValue
parameter_list|(
name|ColumnValue
name|value
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Row
name|addBoolean
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|ColumnValue
operator|.
name|booleanValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Row
name|addByte
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|ColumnValue
operator|.
name|byteValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Row
name|addString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|ColumnValue
operator|.
name|stringValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TRow
name|toTRow
parameter_list|()
block|{
name|TRow
name|tRow
init|=
operator|new
name|TRow
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnValue
name|columnValue
range|:
name|values
control|)
block|{
if|if
condition|(
name|columnValue
operator|!=
literal|null
condition|)
block|{
name|tRow
operator|.
name|addToColVals
argument_list|(
name|columnValue
operator|.
name|toTColumnValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tRow
operator|.
name|addToColVals
argument_list|(
name|ColumnValue
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tRow
return|;
block|}
block|}
end_class

end_unit

