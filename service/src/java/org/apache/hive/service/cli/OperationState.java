begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TOperationState
import|;
end_import

begin_comment
comment|/**  * OperationState.  *  */
end_comment

begin_enum
specifier|public
enum|enum
name|OperationState
block|{
name|INITIALIZED
argument_list|(
name|TOperationState
operator|.
name|INITIALIZED_STATE
argument_list|,
literal|false
argument_list|)
block|,
name|RUNNING
argument_list|(
name|TOperationState
operator|.
name|RUNNING_STATE
argument_list|,
literal|false
argument_list|)
block|,
name|FINISHED
argument_list|(
name|TOperationState
operator|.
name|FINISHED_STATE
argument_list|,
literal|true
argument_list|)
block|,
name|CANCELED
argument_list|(
name|TOperationState
operator|.
name|CANCELED_STATE
argument_list|,
literal|true
argument_list|)
block|,
name|CLOSED
argument_list|(
name|TOperationState
operator|.
name|CLOSED_STATE
argument_list|,
literal|true
argument_list|)
block|,
name|ERROR
argument_list|(
name|TOperationState
operator|.
name|ERROR_STATE
argument_list|,
literal|true
argument_list|)
block|,
name|UNKNOWN
argument_list|(
name|TOperationState
operator|.
name|UKNOWN_STATE
argument_list|,
literal|false
argument_list|)
block|,
name|PENDING
argument_list|(
name|TOperationState
operator|.
name|PENDING_STATE
argument_list|,
literal|false
argument_list|)
block|;
specifier|private
specifier|final
name|TOperationState
name|tOperationState
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|terminal
decl_stmt|;
name|OperationState
parameter_list|(
name|TOperationState
name|tOperationState
parameter_list|,
name|boolean
name|terminal
parameter_list|)
block|{
name|this
operator|.
name|tOperationState
operator|=
name|tOperationState
expr_stmt|;
name|this
operator|.
name|terminal
operator|=
name|terminal
expr_stmt|;
block|}
comment|// must be sync with TOperationState in order
specifier|public
specifier|static
name|OperationState
name|getOperationState
parameter_list|(
name|TOperationState
name|tOperationState
parameter_list|)
block|{
return|return
name|OperationState
operator|.
name|values
argument_list|()
index|[
name|tOperationState
operator|.
name|getValue
argument_list|()
index|]
return|;
block|}
specifier|public
specifier|static
name|void
name|validateTransition
parameter_list|(
name|OperationState
name|oldState
parameter_list|,
name|OperationState
name|newState
parameter_list|)
throws|throws
name|HiveSQLException
block|{
switch|switch
condition|(
name|oldState
condition|)
block|{
case|case
name|INITIALIZED
case|:
switch|switch
condition|(
name|newState
condition|)
block|{
case|case
name|PENDING
case|:
case|case
name|RUNNING
case|:
case|case
name|CANCELED
case|:
case|case
name|CLOSED
case|:
return|return;
block|}
break|break;
case|case
name|PENDING
case|:
switch|switch
condition|(
name|newState
condition|)
block|{
case|case
name|RUNNING
case|:
case|case
name|FINISHED
case|:
case|case
name|CANCELED
case|:
case|case
name|ERROR
case|:
case|case
name|CLOSED
case|:
return|return;
block|}
break|break;
case|case
name|RUNNING
case|:
switch|switch
condition|(
name|newState
condition|)
block|{
case|case
name|FINISHED
case|:
case|case
name|CANCELED
case|:
case|case
name|ERROR
case|:
case|case
name|CLOSED
case|:
return|return;
block|}
break|break;
case|case
name|FINISHED
case|:
case|case
name|CANCELED
case|:
case|case
name|ERROR
case|:
if|if
condition|(
name|OperationState
operator|.
name|CLOSED
operator|.
name|equals
argument_list|(
name|newState
argument_list|)
condition|)
block|{
return|return;
block|}
default|default:
comment|// fall-through
block|}
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"Illegal Operation state transition "
operator|+
literal|"from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|newState
argument_list|)
throw|;
block|}
specifier|public
name|void
name|validateTransition
parameter_list|(
name|OperationState
name|newState
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|validateTransition
argument_list|(
name|this
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TOperationState
name|toTOperationState
parameter_list|()
block|{
return|return
name|tOperationState
return|;
block|}
specifier|public
name|boolean
name|isTerminal
parameter_list|()
block|{
return|return
name|terminal
return|;
block|}
block|}
end_enum

end_unit

