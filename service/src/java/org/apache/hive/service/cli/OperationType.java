begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TOperationType
import|;
end_import

begin_comment
comment|/**  * OperationType.  *  */
end_comment

begin_enum
specifier|public
enum|enum
name|OperationType
block|{
name|UNKNOWN_OPERATION
parameter_list|(
name|TOperationType
operator|.
name|UNKNOWN
parameter_list|)
operator|,
constructor|EXECUTE_STATEMENT(TOperationType.EXECUTE_STATEMENT
block|)
enum|,
name|GET_TYPE_INFO
argument_list|(
name|TOperationType
operator|.
name|GET_TYPE_INFO
argument_list|)
operator|,
name|GET_CATALOGS
argument_list|(
name|TOperationType
operator|.
name|GET_CATALOGS
argument_list|)
operator|,
name|GET_SCHEMAS
argument_list|(
name|TOperationType
operator|.
name|GET_SCHEMAS
argument_list|)
operator|,
name|GET_TABLES
argument_list|(
name|TOperationType
operator|.
name|GET_TABLES
argument_list|)
operator|,
name|GET_TABLE_TYPES
argument_list|(
name|TOperationType
operator|.
name|GET_TABLE_TYPES
argument_list|)
operator|,
name|GET_COLUMNS
argument_list|(
name|TOperationType
operator|.
name|GET_COLUMNS
argument_list|)
operator|,
name|GET_FUNCTIONS
argument_list|(
name|TOperationType
operator|.
name|GET_FUNCTIONS
argument_list|)
enum|;
end_enum

begin_decl_stmt
specifier|private
name|TOperationType
name|tOperationType
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|OperationType
argument_list|(
name|TOperationType
name|tOpType
argument_list|)
block|{
name|this
operator|.
name|tOperationType
operator|=
name|tOpType
block|;   }
specifier|public
specifier|static
name|OperationType
name|getOperationType
argument_list|(
name|TOperationType
name|tOperationType
argument_list|)
block|{
comment|// TODO: replace this with a Map?
for|for
control|(
name|OperationType
name|opType
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|tOperationType
operator|.
name|equals
argument_list|(
name|opType
operator|.
name|tOperationType
argument_list|)
condition|)
block|{
return|return
name|opType
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     return
name|OperationType
operator|.
name|UNKNOWN_OPERATION
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
name|TOperationType
name|toTOperationType
parameter_list|()
block|{
return|return
name|tOperationType
return|;
block|}
end_function

unit|}
end_unit

