begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|FetchOrientation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|TableSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|HiveSession
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|Operation
block|{
specifier|protected
specifier|final
name|HiveSession
name|parentSession
decl_stmt|;
specifier|private
name|OperationState
name|state
init|=
name|OperationState
operator|.
name|INITIALIZED
decl_stmt|;
specifier|private
specifier|final
name|OperationHandle
name|opHandle
decl_stmt|;
specifier|private
name|HiveConf
name|configuration
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Operation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_FETCH_MAX_ROWS
init|=
literal|100
decl_stmt|;
specifier|protected
name|boolean
name|hasResultSet
decl_stmt|;
specifier|protected
specifier|volatile
name|HiveSQLException
name|operationException
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|FetchOrientation
argument_list|>
name|DEFAULT_FETCH_ORIENTATION_SET
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|FetchOrientation
operator|.
name|FETCH_NEXT
argument_list|,
name|FetchOrientation
operator|.
name|FETCH_FIRST
argument_list|)
decl_stmt|;
specifier|protected
name|Operation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|,
name|OperationType
name|opType
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|parentSession
operator|=
name|parentSession
expr_stmt|;
name|opHandle
operator|=
operator|new
name|OperationHandle
argument_list|(
name|opType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|HiveConf
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
operator|new
name|HiveConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveConf
name|getConfiguration
parameter_list|()
block|{
return|return
operator|new
name|HiveConf
argument_list|(
name|configuration
argument_list|)
return|;
block|}
specifier|public
name|HiveSession
name|getParentSession
parameter_list|()
block|{
return|return
name|parentSession
return|;
block|}
specifier|public
name|OperationHandle
name|getHandle
parameter_list|()
block|{
return|return
name|opHandle
return|;
block|}
specifier|public
name|OperationType
name|getType
parameter_list|()
block|{
return|return
name|opHandle
operator|.
name|getOperationType
argument_list|()
return|;
block|}
specifier|public
name|OperationStatus
name|getStatus
parameter_list|()
block|{
return|return
operator|new
name|OperationStatus
argument_list|(
name|state
argument_list|,
name|operationException
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasResultSet
parameter_list|()
block|{
return|return
name|hasResultSet
return|;
block|}
specifier|protected
name|void
name|setHasResultSet
parameter_list|(
name|boolean
name|hasResultSet
parameter_list|)
block|{
name|this
operator|.
name|hasResultSet
operator|=
name|hasResultSet
expr_stmt|;
name|opHandle
operator|.
name|setHasResultSet
argument_list|(
name|hasResultSet
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|OperationState
name|setState
parameter_list|(
name|OperationState
name|newState
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|state
operator|.
name|validateTransition
argument_list|(
name|newState
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|newState
expr_stmt|;
return|return
name|this
operator|.
name|state
return|;
block|}
specifier|protected
name|void
name|setOperationException
parameter_list|(
name|HiveSQLException
name|operationException
parameter_list|)
block|{
name|this
operator|.
name|operationException
operator|=
name|operationException
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|assertState
parameter_list|(
name|OperationState
name|state
parameter_list|)
throws|throws
name|HiveSQLException
block|{
if|if
condition|(
name|this
operator|.
name|state
operator|!=
name|state
condition|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"Expected state "
operator|+
name|state
operator|+
literal|", but found "
operator|+
name|this
operator|.
name|state
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|OperationState
operator|.
name|RUNNING
operator|.
name|equals
argument_list|(
name|state
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
name|OperationState
operator|.
name|FINISHED
operator|.
name|equals
argument_list|(
name|state
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|OperationState
operator|.
name|CANCELED
operator|.
name|equals
argument_list|(
name|state
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isFailed
parameter_list|()
block|{
return|return
name|OperationState
operator|.
name|ERROR
operator|.
name|equals
argument_list|(
name|state
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|void
name|run
parameter_list|()
throws|throws
name|HiveSQLException
function_decl|;
comment|// TODO: make this abstract and implement in subclasses.
specifier|public
name|void
name|cancel
parameter_list|()
throws|throws
name|HiveSQLException
block|{
name|setState
argument_list|(
name|OperationState
operator|.
name|CANCELED
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"SQLOperation.cancel()"
argument_list|)
throw|;
block|}
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
throws|throws
name|HiveSQLException
function_decl|;
specifier|public
specifier|abstract
name|TableSchema
name|getResultSetSchema
parameter_list|()
throws|throws
name|HiveSQLException
function_decl|;
specifier|public
specifier|abstract
name|RowSet
name|getNextRowSet
parameter_list|(
name|FetchOrientation
name|orientation
parameter_list|,
name|long
name|maxRows
parameter_list|)
throws|throws
name|HiveSQLException
function_decl|;
specifier|public
name|RowSet
name|getNextRowSet
parameter_list|()
throws|throws
name|HiveSQLException
block|{
return|return
name|getNextRowSet
argument_list|(
name|FetchOrientation
operator|.
name|FETCH_NEXT
argument_list|,
name|DEFAULT_FETCH_MAX_ROWS
argument_list|)
return|;
block|}
comment|/**    * Verify if the given fetch orientation is part of the default orientation types.    * @param orientation    * @throws HiveSQLException    */
specifier|protected
name|void
name|validateDefaultFetchOrientation
parameter_list|(
name|FetchOrientation
name|orientation
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|validateFetchOrientation
argument_list|(
name|orientation
argument_list|,
name|DEFAULT_FETCH_ORIENTATION_SET
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify if the given fetch orientation is part of the supported orientation types.    * @param orientation    * @param supportedOrientations    * @throws HiveSQLException    */
specifier|protected
name|void
name|validateFetchOrientation
parameter_list|(
name|FetchOrientation
name|orientation
parameter_list|,
name|EnumSet
argument_list|<
name|FetchOrientation
argument_list|>
name|supportedOrientations
parameter_list|)
throws|throws
name|HiveSQLException
block|{
if|if
condition|(
operator|!
name|supportedOrientations
operator|.
name|contains
argument_list|(
name|orientation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"The fetch type "
operator|+
name|orientation
operator|.
name|toString
argument_list|()
operator|+
literal|" is not supported for this resultset"
argument_list|,
literal|"HY106"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

