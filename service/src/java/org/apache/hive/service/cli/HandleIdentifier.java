begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|THandleIdentifier
import|;
end_import

begin_comment
comment|/**  * HandleIdentifier.  *  */
end_comment

begin_class
specifier|public
class|class
name|HandleIdentifier
block|{
specifier|private
specifier|final
name|UUID
name|publicId
decl_stmt|;
specifier|private
specifier|final
name|UUID
name|secretId
decl_stmt|;
specifier|public
name|HandleIdentifier
parameter_list|()
block|{
name|publicId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
name|secretId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HandleIdentifier
parameter_list|(
name|UUID
name|publicId
parameter_list|,
name|UUID
name|secretId
parameter_list|)
block|{
name|this
operator|.
name|publicId
operator|=
name|publicId
expr_stmt|;
name|this
operator|.
name|secretId
operator|=
name|secretId
expr_stmt|;
block|}
specifier|public
name|HandleIdentifier
parameter_list|(
name|THandleIdentifier
name|tHandleId
parameter_list|)
block|{
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tHandleId
operator|.
name|getGuid
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|publicId
operator|=
operator|new
name|UUID
argument_list|(
name|bb
operator|.
name|getLong
argument_list|()
argument_list|,
name|bb
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
name|bb
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tHandleId
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|secretId
operator|=
operator|new
name|UUID
argument_list|(
name|bb
operator|.
name|getLong
argument_list|()
argument_list|,
name|bb
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UUID
name|getPublicId
parameter_list|()
block|{
return|return
name|publicId
return|;
block|}
specifier|public
name|UUID
name|getSecretId
parameter_list|()
block|{
return|return
name|secretId
return|;
block|}
specifier|public
name|THandleIdentifier
name|toTHandleIdentifier
parameter_list|()
block|{
name|byte
index|[]
name|guid
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|byte
index|[]
name|secret
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|ByteBuffer
name|guidBB
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|guid
argument_list|)
decl_stmt|;
name|ByteBuffer
name|secretBB
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|secret
argument_list|)
decl_stmt|;
name|guidBB
operator|.
name|putLong
argument_list|(
name|publicId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|guidBB
operator|.
name|putLong
argument_list|(
name|publicId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|secretBB
operator|.
name|putLong
argument_list|(
name|secretId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|secretBB
operator|.
name|putLong
argument_list|(
name|secretId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|THandleIdentifier
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|guid
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|secret
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|publicId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|publicId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|secretId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|secretId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|HandleIdentifier
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HandleIdentifier
name|other
init|=
operator|(
name|HandleIdentifier
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|publicId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|publicId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|publicId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|publicId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|secretId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|secretId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|secretId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|secretId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|publicId
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

