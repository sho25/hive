begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|CharArrayWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|WriterAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_comment
comment|/**  * An Appender to divert logs from individual threads to the LogObject they belong to.  */
end_comment

begin_class
specifier|public
class|class
name|LogDivertAppender
extends|extends
name|WriterAppender
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|LogDivertAppender
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|OperationManager
name|operationManager
decl_stmt|;
comment|/**    * A log filter that exclude messages coming from the logger with the given name.    * We apply this filter on the Loggers used by the log diversion stuff, so that    * they don't generate more logs for themselves when they process logs.    */
specifier|private
specifier|static
class|class
name|NameExclusionFilter
extends|extends
name|Filter
block|{
specifier|private
name|String
name|excludeLoggerName
init|=
literal|null
decl_stmt|;
specifier|public
name|NameExclusionFilter
parameter_list|(
name|String
name|excludeLoggerName
parameter_list|)
block|{
name|this
operator|.
name|excludeLoggerName
operator|=
name|excludeLoggerName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|decide
parameter_list|(
name|LoggingEvent
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|.
name|getLoggerName
argument_list|()
operator|.
name|equals
argument_list|(
name|excludeLoggerName
argument_list|)
condition|)
block|{
return|return
name|Filter
operator|.
name|DENY
return|;
block|}
return|return
name|Filter
operator|.
name|NEUTRAL
return|;
block|}
block|}
comment|/** This is where the log message will go to */
specifier|private
specifier|final
name|CharArrayWriter
name|writer
init|=
operator|new
name|CharArrayWriter
argument_list|()
decl_stmt|;
specifier|public
name|LogDivertAppender
parameter_list|(
name|Layout
name|layout
parameter_list|,
name|OperationManager
name|operationManager
parameter_list|)
block|{
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|setWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|setName
argument_list|(
literal|"LogDivertAppender"
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationManager
operator|=
name|operationManager
expr_stmt|;
comment|// Filter out messages coming from log processing classes, or we'll run an infinite loop.
name|addFilter
argument_list|(
operator|new
name|NameExclusionFilter
argument_list|(
name|LOG
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|NameExclusionFilter
argument_list|(
name|OperationLog
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|NameExclusionFilter
argument_list|(
name|OperationManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Overrides WriterAppender.subAppend(), which does the real logging.    * No need to worry about concurrency since log4j calls this synchronously.    */
annotation|@
name|Override
specifier|protected
name|void
name|subAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|super
operator|.
name|subAppend
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|// That should've gone into our writer. Notify the LogContext.
name|String
name|logOutput
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|OperationLog
name|log
init|=
name|operationManager
operator|.
name|getOperationLogByThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" ---+++=== Dropped log event from thread "
operator|+
name|event
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|writeOperationLog
argument_list|(
name|logOutput
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

