begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|OperationLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|AbstractOutputStreamAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|ConsoleAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|OutputStreamManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|filter
operator|.
name|AbstractFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|layout
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * Divert appender to redirect operation logs to separate files.  */
end_comment

begin_class
specifier|public
class|class
name|LogDivertAppender
extends|extends
name|AbstractOutputStreamAppender
argument_list|<
name|LogDivertAppender
operator|.
name|StringOutputStreamManager
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogDivertAppender
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|LoggerContext
name|context
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Layout
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|verboseLayout
init|=
name|PatternLayout
operator|.
name|createLayout
argument_list|(
literal|"%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n"
argument_list|,
literal|null
argument_list|,
name|configuration
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Layout
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|nonVerboseLayout
init|=
name|PatternLayout
operator|.
name|createLayout
argument_list|(
literal|"%-5p : %m%n"
argument_list|,
literal|null
argument_list|,
name|configuration
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|OperationManager
name|operationManager
decl_stmt|;
specifier|private
specifier|final
name|StringOutputStreamManager
name|manager
decl_stmt|;
specifier|private
name|boolean
name|isVerbose
decl_stmt|;
specifier|private
specifier|final
name|Layout
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|layout
decl_stmt|;
comment|/**    * Instantiate a WriterAppender and set the output destination to a    * new {@link OutputStreamWriter} initialized with<code>os</code>    * as its {@link OutputStream}.    *    * @param name             The name of the Appender.    * @param filter           Filter    * @param manager          The OutputStreamManager.    * @param operationManager Operation manager    */
specifier|protected
name|LogDivertAppender
parameter_list|(
name|String
name|name
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|StringOutputStreamManager
name|manager
parameter_list|,
name|OperationManager
name|operationManager
parameter_list|,
name|OperationLog
operator|.
name|LoggingLevel
name|loggingMode
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|filter
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|manager
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationManager
operator|=
name|operationManager
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|isVerbose
operator|=
operator|(
name|loggingMode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|VERBOSE
operator|)
expr_stmt|;
name|this
operator|.
name|layout
operator|=
name|getDefaultLayout
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Layout
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|getDefaultLayout
parameter_list|()
block|{
comment|// There should be a ConsoleAppender. Copy its Layout.
name|Logger
name|root
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|Layout
name|layout
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Appender
name|ap
range|:
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Logger
operator|)
name|root
operator|)
operator|.
name|getAppenders
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ap
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|ConsoleAppender
operator|.
name|class
argument_list|)
condition|)
block|{
name|layout
operator|=
name|ap
operator|.
name|getLayout
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|layout
return|;
block|}
comment|/**    * A log filter that filters messages coming from the logger with the given names.    * It be used as a white list filter or a black list filter.    * We apply black list filter on the Loggers used by the log diversion stuff, so that    * they don't generate more logs for themselves when they process logs.    * White list filter is used for less verbose log collection    */
specifier|private
specifier|static
class|class
name|NameFilter
extends|extends
name|AbstractFilter
block|{
specifier|private
name|Pattern
name|namePattern
decl_stmt|;
specifier|private
name|OperationLog
operator|.
name|LoggingLevel
name|loggingMode
decl_stmt|;
specifier|private
specifier|final
name|OperationManager
name|operationManager
decl_stmt|;
comment|/* Patterns that are excluded in verbose logging level.      * Filter out messages coming from log processing classes, or we'll run an infinite loop.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|verboseExcludeNamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"|"
argument_list|)
operator|.
name|join
argument_list|(
operator|new
name|String
index|[]
block|{
name|LOG
operator|.
name|getName
argument_list|()
block|,
name|OperationLog
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|OperationManager
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|/* Patterns that are included in execution logging level.      * In execution mode, show only select logger messages.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|executionIncludeNamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"|"
argument_list|)
operator|.
name|join
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"org.apache.hadoop.mapreduce.JobSubmitter"
block|,
literal|"org.apache.hadoop.mapreduce.Job"
block|,
literal|"SessionState"
block|,
name|Task
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Driver
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"org.apache.hadoop.hive.ql.exec.spark.status.SparkJobMonitor"
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|/* Patterns that are included in performance logging level.      * In performance mode, show execution and performance logger messages.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|performanceIncludeNamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|executionIncludeNamePattern
operator|.
name|pattern
argument_list|()
operator|+
literal|"|"
operator|+
name|PerfLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|void
name|setCurrentNamePattern
parameter_list|(
name|OperationLog
operator|.
name|LoggingLevel
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|VERBOSE
condition|)
block|{
name|this
operator|.
name|namePattern
operator|=
name|verboseExcludeNamePattern
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|EXECUTION
condition|)
block|{
name|this
operator|.
name|namePattern
operator|=
name|executionIncludeNamePattern
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|PERFORMANCE
condition|)
block|{
name|this
operator|.
name|namePattern
operator|=
name|performanceIncludeNamePattern
expr_stmt|;
block|}
block|}
specifier|public
name|NameFilter
parameter_list|(
name|OperationLog
operator|.
name|LoggingLevel
name|loggingMode
parameter_list|,
name|OperationManager
name|op
parameter_list|)
block|{
name|this
operator|.
name|operationManager
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|loggingMode
operator|=
name|loggingMode
expr_stmt|;
name|setCurrentNamePattern
argument_list|(
name|loggingMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|filter
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{
name|OperationLog
name|log
init|=
name|operationManager
operator|.
name|getOperationLogByThread
argument_list|()
decl_stmt|;
name|boolean
name|excludeMatches
init|=
operator|(
name|loggingMode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|VERBOSE
operator|)
decl_stmt|;
if|if
condition|(
name|log
operator|==
literal|null
condition|)
block|{
return|return
name|Result
operator|.
name|DENY
return|;
block|}
name|OperationLog
operator|.
name|LoggingLevel
name|currentLoggingMode
init|=
name|log
operator|.
name|getOpLoggingLevel
argument_list|()
decl_stmt|;
comment|// If logging is disabled, deny everything.
if|if
condition|(
name|currentLoggingMode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|NONE
condition|)
block|{
return|return
name|Result
operator|.
name|DENY
return|;
block|}
comment|// Look at the current session's setting
comment|// and set the pattern and excludeMatches accordingly.
if|if
condition|(
name|currentLoggingMode
operator|!=
name|loggingMode
condition|)
block|{
name|loggingMode
operator|=
name|currentLoggingMode
expr_stmt|;
name|excludeMatches
operator|=
operator|(
name|loggingMode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|VERBOSE
operator|)
expr_stmt|;
name|setCurrentNamePattern
argument_list|(
name|loggingMode
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isMatch
init|=
name|namePattern
operator|.
name|matcher
argument_list|(
name|event
operator|.
name|getLoggerName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeMatches
operator|==
name|isMatch
condition|)
block|{
comment|// Deny if this is black-list filter (excludeMatches = true) and it
comment|// matched or if this is whitelist filter and it didn't match
return|return
name|Result
operator|.
name|DENY
return|;
block|}
return|return
name|Result
operator|.
name|NEUTRAL
return|;
block|}
block|}
specifier|public
specifier|static
name|LogDivertAppender
name|createInstance
parameter_list|(
name|OperationManager
name|operationManager
parameter_list|,
name|OperationLog
operator|.
name|LoggingLevel
name|loggingMode
parameter_list|)
block|{
return|return
operator|new
name|LogDivertAppender
argument_list|(
literal|"LogDivertAppender"
argument_list|,
operator|new
name|NameFilter
argument_list|(
name|loggingMode
argument_list|,
name|operationManager
argument_list|)
argument_list|,
operator|new
name|StringOutputStreamManager
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|,
literal|"StringStream"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|operationManager
argument_list|,
name|loggingMode
argument_list|)
return|;
block|}
specifier|public
name|String
name|getOutput
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|manager
operator|.
name|getStream
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Layout
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|getLayout
parameter_list|()
block|{
comment|// If there is a logging level change from verbose->non-verbose or vice-versa since
comment|// the last subAppend call, change the layout to preserve consistency.
name|OperationLog
name|log
init|=
name|operationManager
operator|.
name|getOperationLogByThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|isVerbose
operator|=
operator|(
name|log
operator|.
name|getOpLoggingLevel
argument_list|()
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|VERBOSE
operator|)
expr_stmt|;
block|}
comment|// layout is immutable in log4j2, so we cheat here and return a different layout when
comment|// verbosity changes
if|if
condition|(
name|isVerbose
condition|)
block|{
return|return
name|verboseLayout
return|;
block|}
else|else
block|{
return|return
name|layout
operator|==
literal|null
condition|?
name|nonVerboseLayout
else|:
name|layout
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{
name|super
operator|.
name|append
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|String
name|logOutput
init|=
name|getOutput
argument_list|()
decl_stmt|;
name|manager
operator|.
name|reset
argument_list|()
expr_stmt|;
name|OperationLog
name|log
init|=
name|operationManager
operator|.
name|getOperationLogByThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" ---+++=== Dropped log event from thread "
operator|+
name|event
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|writeOperationLog
argument_list|(
name|logOutput
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
class|class
name|StringOutputStreamManager
extends|extends
name|OutputStreamManager
block|{
name|ByteArrayOutputStream
name|stream
decl_stmt|;
specifier|protected
name|StringOutputStreamManager
parameter_list|(
name|ByteArrayOutputStream
name|os
parameter_list|,
name|String
name|streamName
parameter_list|,
name|Layout
argument_list|<
name|?
argument_list|>
name|layout
parameter_list|)
block|{
name|super
argument_list|(
name|os
argument_list|,
name|streamName
argument_list|,
name|layout
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|=
name|os
expr_stmt|;
block|}
specifier|public
name|ByteArrayOutputStream
name|getStream
parameter_list|()
block|{
return|return
name|stream
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

