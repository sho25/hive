begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TTableSchema
import|;
end_import

begin_comment
comment|/**  * TableSchema.  *  */
end_comment

begin_class
specifier|public
class|class
name|TableSchema
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TableSchema
parameter_list|()
block|{   }
specifier|public
name|TableSchema
parameter_list|(
name|int
name|numColumns
parameter_list|)
block|{
comment|// TODO: remove this constructor
block|}
specifier|public
name|TableSchema
parameter_list|(
name|TTableSchema
name|tTableSchema
parameter_list|)
block|{
for|for
control|(
name|TColumnDesc
name|tColumnDesc
range|:
name|tTableSchema
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnDescriptor
argument_list|(
name|tColumnDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TableSchema
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
parameter_list|)
block|{
name|int
name|pos
init|=
literal|1
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|fieldSchemas
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnDescriptor
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getComment
argument_list|()
argument_list|,
operator|new
name|TypeDescriptor
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|pos
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TableSchema
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|this
argument_list|(
name|schema
operator|.
name|getFieldSchemas
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|(
name|columns
argument_list|)
return|;
block|}
specifier|public
name|ColumnDescriptor
name|getColumnDescriptorAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|columns
operator|.
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|columns
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TTableSchema
name|toTTableSchema
parameter_list|()
block|{
name|TTableSchema
name|tTableSchema
init|=
operator|new
name|TTableSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnDescriptor
name|col
range|:
name|columns
control|)
block|{
name|tTableSchema
operator|.
name|addToColumns
argument_list|(
name|col
operator|.
name|toTColumnDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tTableSchema
return|;
block|}
specifier|public
name|TypeDescriptor
index|[]
name|toTypeDescriptors
parameter_list|()
block|{
name|TypeDescriptor
index|[]
name|types
init|=
operator|new
name|TypeDescriptor
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeDescriptor
argument_list|()
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
specifier|public
name|TableSchema
name|addPrimitiveColumn
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Type
name|columnType
parameter_list|,
name|String
name|columnComment
parameter_list|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|ColumnDescriptor
operator|.
name|newPrimitiveColumnDescriptor
argument_list|(
name|columnName
argument_list|,
name|columnComment
argument_list|,
name|columnType
argument_list|,
name|columns
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableSchema
name|addStringColumn
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
name|columnComment
parameter_list|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|ColumnDescriptor
operator|.
name|newPrimitiveColumnDescriptor
argument_list|(
name|columnName
argument_list|,
name|columnComment
argument_list|,
name|Type
operator|.
name|STRING_TYPE
argument_list|,
name|columns
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

