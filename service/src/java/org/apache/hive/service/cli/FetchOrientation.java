begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TFetchOrientation
import|;
end_import

begin_comment
comment|/**  * FetchOrientation.  *  */
end_comment

begin_enum
specifier|public
enum|enum
name|FetchOrientation
block|{
name|FETCH_NEXT
parameter_list|(
name|TFetchOrientation
operator|.
name|FETCH_NEXT
parameter_list|)
operator|,
constructor|FETCH_PRIOR(TFetchOrientation.FETCH_PRIOR
block|)
enum|,
name|FETCH_RELATIVE
argument_list|(
name|TFetchOrientation
operator|.
name|FETCH_RELATIVE
argument_list|)
operator|,
name|FETCH_ABSOLUTE
argument_list|(
name|TFetchOrientation
operator|.
name|FETCH_ABSOLUTE
argument_list|)
operator|,
name|FETCH_FIRST
argument_list|(
name|TFetchOrientation
operator|.
name|FETCH_FIRST
argument_list|)
operator|,
name|FETCH_LAST
argument_list|(
name|TFetchOrientation
operator|.
name|FETCH_LAST
argument_list|)
enum|;
end_enum

begin_decl_stmt
specifier|private
name|TFetchOrientation
name|tFetchOrientation
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|FetchOrientation
argument_list|(
name|TFetchOrientation
name|tFetchOrientation
argument_list|)
block|{
name|this
operator|.
name|tFetchOrientation
operator|=
name|tFetchOrientation
block|;   }
specifier|public
specifier|static
name|FetchOrientation
name|getFetchOrientation
argument_list|(
name|TFetchOrientation
name|tFetchOrientation
argument_list|)
block|{
for|for
control|(
name|FetchOrientation
name|fetchOrientation
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|tFetchOrientation
operator|.
name|equals
argument_list|(
name|fetchOrientation
operator|.
name|toTFetchOrientation
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fetchOrientation
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// TODO: Should this really default to FETCH_NEXT?
end_comment

begin_expr_stmt
unit|return
name|FETCH_NEXT
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
name|TFetchOrientation
name|toTFetchOrientation
parameter_list|()
block|{
return|return
name|tFetchOrientation
return|;
block|}
end_function

unit|}
end_unit

