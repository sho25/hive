begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TOperationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TProtocolVersion
import|;
end_import

begin_class
specifier|public
class|class
name|OperationHandle
extends|extends
name|Handle
block|{
specifier|private
specifier|final
name|OperationType
name|opType
decl_stmt|;
specifier|private
specifier|final
name|TProtocolVersion
name|protocol
decl_stmt|;
specifier|private
name|boolean
name|hasResultSet
init|=
literal|false
decl_stmt|;
specifier|public
name|OperationHandle
parameter_list|(
name|OperationType
name|opType
parameter_list|,
name|TProtocolVersion
name|protocol
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|opType
operator|=
name|opType
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
comment|// dummy handle for ThriftCLIService
specifier|public
name|OperationHandle
parameter_list|(
name|TOperationHandle
name|tOperationHandle
parameter_list|)
block|{
name|this
argument_list|(
name|tOperationHandle
argument_list|,
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OperationHandle
parameter_list|(
name|TOperationHandle
name|tOperationHandle
parameter_list|,
name|TProtocolVersion
name|protocol
parameter_list|)
block|{
name|super
argument_list|(
name|tOperationHandle
operator|.
name|getOperationId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|opType
operator|=
name|OperationType
operator|.
name|getOperationType
argument_list|(
name|tOperationHandle
operator|.
name|getOperationType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|hasResultSet
operator|=
name|tOperationHandle
operator|.
name|isHasResultSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
specifier|public
name|OperationType
name|getOperationType
parameter_list|()
block|{
return|return
name|opType
return|;
block|}
specifier|public
name|void
name|setHasResultSet
parameter_list|(
name|boolean
name|hasResultSet
parameter_list|)
block|{
name|this
operator|.
name|hasResultSet
operator|=
name|hasResultSet
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasResultSet
parameter_list|()
block|{
return|return
name|hasResultSet
return|;
block|}
specifier|public
name|TOperationHandle
name|toTOperationHandle
parameter_list|()
block|{
name|TOperationHandle
name|tOperationHandle
init|=
operator|new
name|TOperationHandle
argument_list|()
decl_stmt|;
name|tOperationHandle
operator|.
name|setOperationId
argument_list|(
name|getHandleIdentifier
argument_list|()
operator|.
name|toTHandleIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|tOperationHandle
operator|.
name|setOperationType
argument_list|(
name|opType
operator|.
name|toTOperationType
argument_list|()
argument_list|)
expr_stmt|;
name|tOperationHandle
operator|.
name|setHasResultSet
argument_list|(
name|hasResultSet
argument_list|)
expr_stmt|;
return|return
name|tOperationHandle
return|;
block|}
specifier|public
name|TProtocolVersion
name|getProtocolVersion
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|opType
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|opType
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|OperationHandle
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OperationHandle
name|other
init|=
operator|(
name|OperationHandle
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|opType
operator|!=
name|other
operator|.
name|opType
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OperationHandle [opType="
operator|+
name|opType
operator|+
literal|", getHandleIdentifier()="
operator|+
name|getHandleIdentifier
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

