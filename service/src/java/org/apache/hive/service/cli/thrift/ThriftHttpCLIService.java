begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthFactory
operator|.
name|AuthTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|CLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_class
specifier|public
class|class
name|ThriftHttpCLIService
extends|extends
name|ThriftCLIService
block|{
specifier|public
name|ThriftHttpCLIService
parameter_list|(
name|CLIService
name|cliService
parameter_list|)
block|{
name|super
argument_list|(
name|cliService
argument_list|,
literal|"ThriftHttpCLIService"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Configure Jetty to serve http requests
comment|// Example of a client connection URL: http://localhost:10000/servlets/thrifths2/
comment|// a gateway may cause actual target URL to differ, e.g. http://gateway:port/hive2/servlets/thrifths2/
name|verifyHttpConfiguration
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
name|portString
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_SERVER2_THRIFT_HTTP_PORT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|portString
operator|!=
literal|null
condition|)
block|{
name|portNum
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|portString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|portNum
operator|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PORT
argument_list|)
expr_stmt|;
block|}
name|minWorkerThreads
operator|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_MIN_WORKER_THREADS
argument_list|)
expr_stmt|;
name|maxWorkerThreads
operator|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_MAX_WORKER_THREADS
argument_list|)
expr_stmt|;
name|String
name|httpPath
init|=
name|getHttpPath
argument_list|(
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|httpServer
operator|=
operator|new
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
argument_list|()
expr_stmt|;
name|QueuedThreadPool
name|threadPool
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
name|threadPool
operator|.
name|setMinThreads
argument_list|(
name|minWorkerThreads
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|setMaxThreads
argument_list|(
name|maxWorkerThreads
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|setThreadPool
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|SelectChannelConnector
name|connector
init|=
operator|new
name|SelectChannelConnector
argument_list|()
decl_stmt|;
empty_stmt|;
name|boolean
name|useSsl
init|=
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
argument_list|)
decl_stmt|;
name|String
name|schemeName
init|=
name|useSsl
condition|?
literal|"https"
else|:
literal|"http"
decl_stmt|;
name|String
name|authType
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
argument_list|)
decl_stmt|;
comment|// Set during the init phase of HiveServer2 if auth mode is kerberos
comment|// UGI for the hive/_HOST (kerberos) principal
name|UserGroupInformation
name|serviceUGI
init|=
name|cliService
operator|.
name|getServiceUGI
argument_list|()
decl_stmt|;
comment|// UGI for the http/_HOST (SPNego) principal
name|UserGroupInformation
name|httpUGI
init|=
name|cliService
operator|.
name|getHttpUGI
argument_list|()
decl_stmt|;
if|if
condition|(
name|useSsl
condition|)
block|{
name|String
name|keyStorePath
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SSL_KEYSTORE_PATH
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|keyStorePassword
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SSL_KEYSTORE_PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStorePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SSL_KEYSTORE_PATH
operator|.
name|varname
operator|+
literal|" Not configured for SSL connection"
argument_list|)
throw|;
block|}
name|SslContextFactory
name|sslContextFactory
init|=
operator|new
name|SslContextFactory
argument_list|()
decl_stmt|;
name|sslContextFactory
operator|.
name|setKeyStorePath
argument_list|(
name|keyStorePath
argument_list|)
expr_stmt|;
name|sslContextFactory
operator|.
name|setKeyStorePassword
argument_list|(
name|keyStorePassword
argument_list|)
expr_stmt|;
name|connector
operator|=
operator|new
name|SslSelectChannelConnector
argument_list|(
name|sslContextFactory
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setPort
argument_list|(
name|portNum
argument_list|)
expr_stmt|;
comment|// Linux:yes, Windows:no
name|connector
operator|.
name|setReuseAddress
argument_list|(
operator|!
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|hiveAuthFactory
operator|=
operator|new
name|HiveAuthFactory
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TProcessorFactory
name|processorFactory
init|=
name|hiveAuthFactory
operator|.
name|getAuthProcFactory
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|TProcessor
name|processor
init|=
name|processorFactory
operator|.
name|getProcessor
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|TProtocolFactory
name|protocolFactory
init|=
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|TServlet
name|thriftHttpServlet
init|=
operator|new
name|ThriftHttpServlet
argument_list|(
name|processor
argument_list|,
name|protocolFactory
argument_list|,
name|authType
argument_list|,
name|serviceUGI
argument_list|,
name|httpUGI
argument_list|)
decl_stmt|;
specifier|final
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|thriftHttpServlet
argument_list|)
argument_list|,
name|httpPath
argument_list|)
expr_stmt|;
comment|// TODO: check defaults: maxTimeout, keepalive, maxBodySize, bodyRecieveDuration, etc.
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"Started ThriftHttpCLIService in "
operator|+
name|schemeName
operator|+
literal|" mode on port "
operator|+
name|portNum
operator|+
literal|" path="
operator|+
name|httpPath
operator|+
literal|" with "
operator|+
name|minWorkerThreads
operator|+
literal|".."
operator|+
name|maxWorkerThreads
operator|+
literal|" worker threads"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The config parameter can be like "path", "/path", "/path/", "path/*", "/path1/path2/*" and so on.    * httpPath should end up as "/*", "/path/*" or "/path1/../pathN/*"    * @param httpPath    * @return    */
specifier|private
name|String
name|getHttpPath
parameter_list|(
name|String
name|httpPath
parameter_list|)
block|{
if|if
condition|(
name|httpPath
operator|==
literal|null
operator|||
name|httpPath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|httpPath
operator|=
literal|"/*"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|httpPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|httpPath
operator|=
literal|"/"
operator|+
name|httpPath
expr_stmt|;
block|}
if|if
condition|(
name|httpPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|httpPath
operator|=
name|httpPath
operator|+
literal|"*"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|httpPath
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|httpPath
operator|=
name|httpPath
operator|+
literal|"/*"
expr_stmt|;
block|}
block|}
return|return
name|httpPath
return|;
block|}
comment|/**    * Verify that this configuration is supported by transportMode of HTTP    * @param hiveConf    */
specifier|private
specifier|static
name|void
name|verifyHttpConfiguration
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|String
name|authType
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
argument_list|)
decl_stmt|;
comment|// Error out if KERBEROS auth mode is being used and use SSL is also set to true
if|if
condition|(
name|authType
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthTypes
operator|.
name|KERBEROS
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
operator|+
literal|" setting of "
operator|+
name|authType
operator|+
literal|" is not supported with "
operator|+
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
operator|+
literal|" set to true"
decl_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// Warn that SASL is not used in http mode
if|if
condition|(
name|authType
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthTypes
operator|.
name|NONE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// NONE in case of thrift mode uses SASL
name|LOG
operator|.
name|warn
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
operator|+
literal|" setting to "
operator|+
name|authType
operator|+
literal|". SASL is not supported with http transport mode,"
operator|+
literal|" so using equivalent of "
operator|+
name|AuthTypes
operator|.
name|NOSASL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

