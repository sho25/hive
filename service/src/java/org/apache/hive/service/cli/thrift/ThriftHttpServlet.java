begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServlet
import|;
end_import

begin_class
specifier|public
class|class
name|ThriftHttpServlet
extends|extends
name|TServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ThriftHttpServlet
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|ThriftHttpServlet
parameter_list|(
name|TProcessor
name|processor
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|,
name|protocolFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|logRequestHeader
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|super
operator|.
name|doPost
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|logRequestHeader
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|authHeaderBase64
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Authorization"
argument_list|)
decl_stmt|;
if|if
condition|(
name|authHeaderBase64
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ThriftHttpServlet: no HTTP Authorization header"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|authHeaderBase64
operator|.
name|startsWith
argument_list|(
literal|"Basic"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ThriftHttpServlet: HTTP Authorization header exists but is not Basic."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|authHeaderBase64_Payload
init|=
name|authHeaderBase64
operator|.
name|substring
argument_list|(
literal|"Basic "
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|authHeaderString
init|=
name|StringUtils
operator|.
name|newStringUtf8
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|authHeaderBase64_Payload
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|creds
init|=
name|authHeaderString
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|username
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|creds
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|username
operator|=
name|creds
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|creds
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|password
operator|=
name|creds
index|[
literal|1
index|]
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|==
literal|null
operator|||
name|password
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
operator|||
name|password
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|password
operator|=
literal|"<no password>"
expr_stmt|;
block|}
else|else
block|{
comment|// don't log the actual password.
name|password
operator|=
literal|"******"
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"HttpServlet:  HTTP Authorization header:: username="
operator|+
name|username
operator|+
literal|" password="
operator|+
name|password
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

