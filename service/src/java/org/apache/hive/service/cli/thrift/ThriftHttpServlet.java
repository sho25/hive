begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|KerberosNameShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|AuthenticationProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|AuthenticationProviderFactory
operator|.
name|AuthMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HttpAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HttpAuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|PasswdAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSCredential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|Oid
import|;
end_import

begin_comment
comment|/**  *  * ThriftHttpServlet  *  */
end_comment

begin_class
specifier|public
class|class
name|ThriftHttpServlet
extends|extends
name|TServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ThriftHttpServlet
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|authType
decl_stmt|;
specifier|private
specifier|final
name|UserGroupInformation
name|serviceUGI
decl_stmt|;
specifier|private
specifier|final
name|UserGroupInformation
name|httpUGI
decl_stmt|;
specifier|public
name|ThriftHttpServlet
parameter_list|(
name|TProcessor
name|processor
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|String
name|authType
parameter_list|,
name|UserGroupInformation
name|serviceUGI
parameter_list|,
name|UserGroupInformation
name|httpUGI
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|,
name|protocolFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|authType
operator|=
name|authType
expr_stmt|;
name|this
operator|.
name|serviceUGI
operator|=
name|serviceUGI
expr_stmt|;
name|this
operator|.
name|httpUGI
operator|=
name|httpUGI
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|clientUserName
decl_stmt|;
name|String
name|clientIpAddress
decl_stmt|;
try|try
block|{
comment|// For a kerberos setup
if|if
condition|(
name|isKerberosAuthMode
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|clientUserName
operator|=
name|doKerberosAuth
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|String
name|doAsQueryParam
init|=
name|getDoAsQueryParam
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doAsQueryParam
operator|!=
literal|null
condition|)
block|{
name|SessionManager
operator|.
name|setProxyUserName
argument_list|(
name|doAsQueryParam
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|clientUserName
operator|=
name|doPasswdAuth
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client username: "
operator|+
name|clientUserName
argument_list|)
expr_stmt|;
comment|// Set the thread local username to be used for doAs if true
name|SessionManager
operator|.
name|setUserName
argument_list|(
name|clientUserName
argument_list|)
expr_stmt|;
name|clientIpAddress
operator|=
name|request
operator|.
name|getRemoteAddr
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client IP Address: "
operator|+
name|clientIpAddress
argument_list|)
expr_stmt|;
comment|// Set the thread local ip address
name|SessionManager
operator|.
name|setIpAddress
argument_list|(
name|clientIpAddress
argument_list|)
expr_stmt|;
name|super
operator|.
name|doPost
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpAuthenticationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Send a 401 to the client
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
if|if
condition|(
name|isKerberosAuthMode
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|HttpAuthUtils
operator|.
name|WWW_AUTHENTICATE
argument_list|,
name|HttpAuthUtils
operator|.
name|NEGOTIATE
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|println
argument_list|(
literal|"Authentication Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Clear the thread locals
name|SessionManager
operator|.
name|clearUserName
argument_list|()
expr_stmt|;
name|SessionManager
operator|.
name|clearIpAddress
argument_list|()
expr_stmt|;
name|SessionManager
operator|.
name|clearProxyUserName
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Do the LDAP/PAM authentication    * @param request    * @param authType    * @throws HttpAuthenticationException    */
specifier|private
name|String
name|doPasswdAuth
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|userName
init|=
name|getUsername
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
comment|// No-op when authType is NOSASL
if|if
condition|(
operator|!
name|authType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveAuthFactory
operator|.
name|AuthTypes
operator|.
name|NOSASL
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|AuthMethods
name|authMethod
init|=
name|AuthMethods
operator|.
name|getValidAuthMethod
argument_list|(
name|authType
argument_list|)
decl_stmt|;
name|PasswdAuthenticationProvider
name|provider
init|=
name|AuthenticationProviderFactory
operator|.
name|getAuthenticationProvider
argument_list|(
name|authMethod
argument_list|)
decl_stmt|;
name|provider
operator|.
name|Authenticate
argument_list|(
name|userName
argument_list|,
name|getPassword
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|userName
return|;
block|}
comment|/**    * Do the GSS-API kerberos authentication.    * We already have a logged in subject in the form of serviceUGI,    * which GSS-API will extract information from.    * In case of a SPNego request we use the httpUGI,    * for the authenticating service tickets.    * @param request    * @return    * @throws HttpAuthenticationException    */
specifier|private
name|String
name|doKerberosAuth
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
comment|// Try authenticating with the http/_HOST principal
if|if
condition|(
name|httpUGI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|httpUGI
operator|.
name|doAs
argument_list|(
operator|new
name|HttpKerberosServerAction
argument_list|(
name|request
argument_list|,
name|httpUGI
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to authenticate with http/_HOST kerberos principal, "
operator|+
literal|"trying with hive/_HOST kerberos principal"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now try with hive/_HOST principal
try|try
block|{
return|return
name|serviceUGI
operator|.
name|doAs
argument_list|(
operator|new
name|HttpKerberosServerAction
argument_list|(
name|request
argument_list|,
name|serviceUGI
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to authenticate with hive/_HOST kerberos principal"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
class|class
name|HttpKerberosServerAction
implements|implements
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
block|{
name|HttpServletRequest
name|request
decl_stmt|;
name|UserGroupInformation
name|serviceUGI
decl_stmt|;
name|HttpKerberosServerAction
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|UserGroupInformation
name|serviceUGI
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|serviceUGI
operator|=
name|serviceUGI
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|HttpAuthenticationException
block|{
comment|// Get own Kerberos credentials for accepting connection
name|GSSManager
name|manager
init|=
name|GSSManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|GSSContext
name|gssContext
init|=
literal|null
decl_stmt|;
name|String
name|serverPrincipal
init|=
name|getPrincipalWithoutRealm
argument_list|(
name|serviceUGI
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// This Oid for Kerberos GSS-API mechanism.
name|Oid
name|kerberosMechOid
init|=
operator|new
name|Oid
argument_list|(
literal|"1.2.840.113554.1.2.2"
argument_list|)
decl_stmt|;
comment|// Oid for SPNego GSS-API mechanism.
name|Oid
name|spnegoMechOid
init|=
operator|new
name|Oid
argument_list|(
literal|"1.3.6.1.5.5.2"
argument_list|)
decl_stmt|;
comment|// Oid for kerberos principal name
name|Oid
name|krb5PrincipalOid
init|=
operator|new
name|Oid
argument_list|(
literal|"1.2.840.113554.1.2.2.1"
argument_list|)
decl_stmt|;
comment|// GSS name for server
name|GSSName
name|serverName
init|=
name|manager
operator|.
name|createName
argument_list|(
name|serverPrincipal
argument_list|,
name|krb5PrincipalOid
argument_list|)
decl_stmt|;
comment|// GSS credentials for server
name|GSSCredential
name|serverCreds
init|=
name|manager
operator|.
name|createCredential
argument_list|(
name|serverName
argument_list|,
name|GSSCredential
operator|.
name|DEFAULT_LIFETIME
argument_list|,
operator|new
name|Oid
index|[]
block|{
name|kerberosMechOid
block|,
name|spnegoMechOid
block|}
argument_list|,
name|GSSCredential
operator|.
name|ACCEPT_ONLY
argument_list|)
decl_stmt|;
comment|// Create a GSS context
name|gssContext
operator|=
name|manager
operator|.
name|createContext
argument_list|(
name|serverCreds
argument_list|)
expr_stmt|;
comment|// Get service ticket from the authorization header
name|String
name|serviceTicketBase64
init|=
name|getAuthHeader
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
name|byte
index|[]
name|inToken
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|serviceTicketBase64
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|gssContext
operator|.
name|acceptSecContext
argument_list|(
name|inToken
argument_list|,
literal|0
argument_list|,
name|inToken
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Authenticate or deny based on its context completion
if|if
condition|(
operator|!
name|gssContext
operator|.
name|isEstablished
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Kerberos authentication failed: "
operator|+
literal|"unable to establish context with the service ticket "
operator|+
literal|"provided by the client."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|getPrincipalWithoutRealmAndHost
argument_list|(
name|gssContext
operator|.
name|getSrcName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|GSSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Kerberos authentication failed: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|gssContext
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|gssContext
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GSSException
name|e
parameter_list|)
block|{
comment|// No-op
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getPrincipalWithoutRealm
parameter_list|(
name|String
name|fullPrincipal
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|KerberosNameShim
name|fullKerberosName
decl_stmt|;
try|try
block|{
name|fullKerberosName
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getKerberosNameShim
argument_list|(
name|fullPrincipal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|serviceName
init|=
name|fullKerberosName
operator|.
name|getServiceName
argument_list|()
decl_stmt|;
name|String
name|hostName
init|=
name|fullKerberosName
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|String
name|principalWithoutRealm
init|=
name|serviceName
decl_stmt|;
if|if
condition|(
name|hostName
operator|!=
literal|null
condition|)
block|{
name|principalWithoutRealm
operator|=
name|serviceName
operator|+
literal|"/"
operator|+
name|hostName
expr_stmt|;
block|}
return|return
name|principalWithoutRealm
return|;
block|}
specifier|private
name|String
name|getPrincipalWithoutRealmAndHost
parameter_list|(
name|String
name|fullPrincipal
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|KerberosNameShim
name|fullKerberosName
decl_stmt|;
try|try
block|{
name|fullKerberosName
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getKerberosNameShim
argument_list|(
name|fullPrincipal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|fullKerberosName
operator|.
name|getServiceName
argument_list|()
return|;
block|}
block|}
specifier|private
name|String
name|getUsername
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|creds
index|[]
init|=
name|getAuthHeaderTokens
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
comment|// Username must be present
if|if
condition|(
name|creds
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|creds
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Authorization header received "
operator|+
literal|"from the client does not contain username."
argument_list|)
throw|;
block|}
return|return
name|creds
index|[
literal|0
index|]
return|;
block|}
specifier|private
name|String
name|getPassword
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|creds
index|[]
init|=
name|getAuthHeaderTokens
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
comment|// Password must be present
if|if
condition|(
name|creds
index|[
literal|1
index|]
operator|==
literal|null
operator|||
name|creds
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Authorization header received "
operator|+
literal|"from the client does not contain username."
argument_list|)
throw|;
block|}
return|return
name|creds
index|[
literal|1
index|]
return|;
block|}
specifier|private
name|String
index|[]
name|getAuthHeaderTokens
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|authHeaderBase64
init|=
name|getAuthHeader
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
name|String
name|authHeaderString
init|=
name|StringUtils
operator|.
name|newStringUtf8
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|authHeaderBase64
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|creds
init|=
name|authHeaderString
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
return|return
name|creds
return|;
block|}
comment|/**    * Returns the base64 encoded auth header payload    * @param request    * @param authType    * @return    * @throws HttpAuthenticationException    */
specifier|private
name|String
name|getAuthHeader
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|authHeader
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HttpAuthUtils
operator|.
name|AUTHORIZATION
argument_list|)
decl_stmt|;
comment|// Each http request must have an Authorization header
if|if
condition|(
name|authHeader
operator|==
literal|null
operator|||
name|authHeader
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Authorization header received "
operator|+
literal|"from the client is empty."
argument_list|)
throw|;
block|}
name|String
name|authHeaderBase64String
decl_stmt|;
name|int
name|beginIndex
decl_stmt|;
if|if
condition|(
name|isKerberosAuthMode
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|beginIndex
operator|=
operator|(
name|HttpAuthUtils
operator|.
name|NEGOTIATE
operator|+
literal|" "
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|beginIndex
operator|=
operator|(
name|HttpAuthUtils
operator|.
name|BASIC
operator|+
literal|" "
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|authHeaderBase64String
operator|=
name|authHeader
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|)
expr_stmt|;
comment|// Authorization header must have a payload
if|if
condition|(
name|authHeaderBase64String
operator|==
literal|null
operator|||
name|authHeaderBase64String
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Authorization header received "
operator|+
literal|"from the client does not contain any data."
argument_list|)
throw|;
block|}
return|return
name|authHeaderBase64String
return|;
block|}
specifier|private
name|boolean
name|isKerberosAuthMode
parameter_list|(
name|String
name|authType
parameter_list|)
block|{
return|return
name|authType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveAuthFactory
operator|.
name|AuthTypes
operator|.
name|KERBEROS
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getDoAsQueryParam
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|params
init|=
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpUtils
operator|.
name|parseQueryString
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|params
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keySet
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"doAs"
argument_list|)
condition|)
block|{
return|return
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
index|[
literal|0
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

