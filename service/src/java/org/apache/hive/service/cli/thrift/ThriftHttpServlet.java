begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|NewCookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|KerberosNameShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|CookieSigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|AuthenticationProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|AuthenticationProviderFactory
operator|.
name|AuthMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HttpAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HttpAuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|PasswdAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSCredential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|Oid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  * ThriftHttpServlet  *  */
end_comment

begin_class
specifier|public
class|class
name|ThriftHttpServlet
extends|extends
name|TServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThriftHttpServlet
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|authType
decl_stmt|;
specifier|private
specifier|final
name|UserGroupInformation
name|serviceUGI
decl_stmt|;
specifier|private
specifier|final
name|UserGroupInformation
name|httpUGI
decl_stmt|;
specifier|private
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
comment|// Class members for cookie based authentication.
specifier|private
name|CookieSigner
name|signer
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_COOKIE
init|=
literal|"hive.server2.auth"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isCookieAuthEnabled
decl_stmt|;
specifier|private
name|String
name|cookieDomain
decl_stmt|;
specifier|private
name|String
name|cookiePath
decl_stmt|;
specifier|private
name|int
name|cookieMaxAge
decl_stmt|;
specifier|private
name|boolean
name|isCookieSecure
decl_stmt|;
specifier|private
name|boolean
name|isHttpOnlyCookie
decl_stmt|;
specifier|private
specifier|final
name|HiveAuthFactory
name|hiveAuthFactory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_DELEGATION_TOKEN_HEADER
init|=
literal|"X-Hive-Delegation-Token"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|X_FORWARDED_FOR
init|=
literal|"X-Forwarded-For"
decl_stmt|;
specifier|public
name|ThriftHttpServlet
parameter_list|(
name|TProcessor
name|processor
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|String
name|authType
parameter_list|,
name|UserGroupInformation
name|serviceUGI
parameter_list|,
name|UserGroupInformation
name|httpUGI
parameter_list|,
name|HiveAuthFactory
name|hiveAuthFactory
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|,
name|protocolFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|authType
operator|=
name|authType
expr_stmt|;
name|this
operator|.
name|serviceUGI
operator|=
name|serviceUGI
expr_stmt|;
name|this
operator|.
name|httpUGI
operator|=
name|httpUGI
expr_stmt|;
name|this
operator|.
name|hiveAuthFactory
operator|=
name|hiveAuthFactory
expr_stmt|;
name|this
operator|.
name|isCookieAuthEnabled
operator|=
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_COOKIE_AUTH_ENABLED
argument_list|)
expr_stmt|;
comment|// Initialize the cookie based authentication related variables.
if|if
condition|(
name|isCookieAuthEnabled
condition|)
block|{
comment|// Generate the signer with secret.
name|String
name|secret
init|=
name|Long
operator|.
name|toString
argument_list|(
name|RAN
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using the random number as the secret for cookie generation "
operator|+
name|secret
argument_list|)
expr_stmt|;
name|this
operator|.
name|signer
operator|=
operator|new
name|CookieSigner
argument_list|(
name|secret
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cookieMaxAge
operator|=
operator|(
name|int
operator|)
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_COOKIE_MAX_AGE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|cookieDomain
operator|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_COOKIE_DOMAIN
argument_list|)
expr_stmt|;
name|this
operator|.
name|cookiePath
operator|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_COOKIE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|isCookieSecure
operator|=
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_COOKIE_IS_SECURE
argument_list|)
expr_stmt|;
name|this
operator|.
name|isHttpOnlyCookie
operator|=
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_COOKIE_IS_HTTPONLY
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|clientUserName
init|=
literal|null
decl_stmt|;
name|String
name|clientIpAddress
decl_stmt|;
name|boolean
name|requireNewCookie
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|hiveConf
operator|.
name|getBoolean
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_XSRF_FILTER_ENABLED
operator|.
name|varname
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|boolean
name|continueProcessing
init|=
name|Utils
operator|.
name|doXsrfFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|continueProcessing
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Request did not have valid XSRF header, rejecting."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// If the cookie based authentication is already enabled, parse the
comment|// request and validate the request cookies.
if|if
condition|(
name|isCookieAuthEnabled
condition|)
block|{
name|clientUserName
operator|=
name|validateCookie
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|requireNewCookie
operator|=
operator|(
name|clientUserName
operator|==
literal|null
operator|)
expr_stmt|;
if|if
condition|(
name|requireNewCookie
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not validate cookie sent, will try to generate a new cookie"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If the cookie based authentication is not enabled or the request does
comment|// not have a valid cookie, use the kerberos or password based authentication
comment|// depending on the server setup.
if|if
condition|(
name|clientUserName
operator|==
literal|null
condition|)
block|{
comment|// For a kerberos setup
if|if
condition|(
name|isKerberosAuthMode
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|String
name|delegationToken
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HIVE_DELEGATION_TOKEN_HEADER
argument_list|)
decl_stmt|;
comment|// Each http request must have an Authorization header
if|if
condition|(
operator|(
name|delegationToken
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|delegationToken
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|clientUserName
operator|=
name|doTokenAuth
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clientUserName
operator|=
name|doKerberosAuth
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For password based authentication
else|else
block|{
name|clientUserName
operator|=
name|doPasswdAuth
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client username: "
operator|+
name|clientUserName
argument_list|)
expr_stmt|;
comment|// Set the thread local username to be used for doAs if true
name|SessionManager
operator|.
name|setUserName
argument_list|(
name|clientUserName
argument_list|)
expr_stmt|;
comment|// find proxy user if any from query param
name|String
name|doAsQueryParam
init|=
name|getDoAsQueryParam
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doAsQueryParam
operator|!=
literal|null
condition|)
block|{
name|SessionManager
operator|.
name|setProxyUserName
argument_list|(
name|doAsQueryParam
argument_list|)
expr_stmt|;
block|}
name|clientIpAddress
operator|=
name|request
operator|.
name|getRemoteAddr
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client IP Address: "
operator|+
name|clientIpAddress
argument_list|)
expr_stmt|;
comment|// Set the thread local ip address
name|SessionManager
operator|.
name|setIpAddress
argument_list|(
name|clientIpAddress
argument_list|)
expr_stmt|;
comment|// get forwarded hosts address
name|String
name|forwarded_for
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|X_FORWARDED_FOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|forwarded_for
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}:{}"
argument_list|,
name|X_FORWARDED_FOR
argument_list|,
name|forwarded_for
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|forwardedAddresses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|forwarded_for
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|SessionManager
operator|.
name|setForwardedAddresses
argument_list|(
name|forwardedAddresses
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SessionManager
operator|.
name|setForwardedAddresses
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Generate new cookie and add it to the response
if|if
condition|(
name|requireNewCookie
operator|&&
operator|!
name|authType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveAuthFactory
operator|.
name|AuthTypes
operator|.
name|NOSASL
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|cookieToken
init|=
name|HttpAuthUtils
operator|.
name|createCookieToken
argument_list|(
name|clientUserName
argument_list|)
decl_stmt|;
name|Cookie
name|hs2Cookie
init|=
name|createCookie
argument_list|(
name|signer
operator|.
name|signCookie
argument_list|(
name|cookieToken
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHttpOnlyCookie
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"SET-COOKIE"
argument_list|,
name|getHttpOnlyCookieHeader
argument_list|(
name|hs2Cookie
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|addCookie
argument_list|(
name|hs2Cookie
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Cookie added for clientUserName "
operator|+
name|clientUserName
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doPost
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpAuthenticationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Send a 401 to the client
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
if|if
condition|(
name|isKerberosAuthMode
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|HttpAuthUtils
operator|.
name|WWW_AUTHENTICATE
argument_list|,
name|HttpAuthUtils
operator|.
name|NEGOTIATE
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|println
argument_list|(
literal|"Authentication Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Clear the thread locals
name|SessionManager
operator|.
name|clearUserName
argument_list|()
expr_stmt|;
name|SessionManager
operator|.
name|clearIpAddress
argument_list|()
expr_stmt|;
name|SessionManager
operator|.
name|clearProxyUserName
argument_list|()
expr_stmt|;
name|SessionManager
operator|.
name|clearForwardedAddresses
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Retrieves the client name from cookieString. If the cookie does not    * correspond to a valid client, the function returns null.    * @param cookies HTTP Request cookies.    * @return Client Username if cookieString has a HS2 Generated cookie that is currently valid.    * Else, returns null.    */
specifier|private
name|String
name|getClientNameFromCookie
parameter_list|(
name|Cookie
index|[]
name|cookies
parameter_list|)
block|{
comment|// Current Cookie Name, Current Cookie Value
name|String
name|currName
decl_stmt|,
name|currValue
decl_stmt|;
comment|// Following is the main loop which iterates through all the cookies send by the client.
comment|// The HS2 generated cookies are of the format hive.server2.auth=<value>
comment|// A cookie which is identified as a hiveserver2 generated cookie is validated
comment|// by calling signer.verifyAndExtract(). If the validation passes, send the
comment|// username for which the cookie is validated to the caller. If no client side
comment|// cookie passes the validation, return null to the caller.
for|for
control|(
name|Cookie
name|currCookie
range|:
name|cookies
control|)
block|{
comment|// Get the cookie name
name|currName
operator|=
name|currCookie
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|currName
operator|.
name|equals
argument_list|(
name|AUTH_COOKIE
argument_list|)
condition|)
block|{
comment|// Not a HS2 generated cookie, continue.
continue|continue;
block|}
comment|// If we reached here, we have match for HS2 generated cookie
name|currValue
operator|=
name|currCookie
operator|.
name|getValue
argument_list|()
expr_stmt|;
comment|// Validate the value.
name|currValue
operator|=
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|currValue
argument_list|)
expr_stmt|;
comment|// Retrieve the user name, do the final validation step.
if|if
condition|(
name|currValue
operator|!=
literal|null
condition|)
block|{
name|String
name|userName
init|=
name|HttpAuthUtils
operator|.
name|getUserNameFromCookieToken
argument_list|(
name|currValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid cookie token "
operator|+
name|currValue
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|//We have found a valid cookie in the client request.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Validated the cookie for user "
operator|+
name|userName
argument_list|)
expr_stmt|;
block|}
return|return
name|userName
return|;
block|}
block|}
comment|// No valid HS2 generated cookies found, return null
return|return
literal|null
return|;
block|}
comment|/**    * Convert cookie array to human readable cookie string    * @param cookies Cookie Array    * @return String containing all the cookies separated by a newline character.    * Each cookie is of the format [key]=[value]    */
specifier|private
name|String
name|toCookieStr
parameter_list|(
name|Cookie
index|[]
name|cookies
parameter_list|)
block|{
name|String
name|cookieStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Cookie
name|c
range|:
name|cookies
control|)
block|{
name|cookieStr
operator|+=
name|c
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|c
operator|.
name|getValue
argument_list|()
operator|+
literal|" ;\n"
expr_stmt|;
block|}
return|return
name|cookieStr
return|;
block|}
comment|/**    * Validate the request cookie. This function iterates over the request cookie headers    * and finds a cookie that represents a valid client/server session. If it finds one, it    * returns the client name associated with the session. Else, it returns null.    * @param request The HTTP Servlet Request send by the client    * @return Client Username if the request has valid HS2 cookie, else returns null    * @throws UnsupportedEncodingException    */
specifier|private
name|String
name|validateCookie
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
comment|// Find all the valid cookies associated with the request.
name|Cookie
index|[]
name|cookies
init|=
name|request
operator|.
name|getCookies
argument_list|()
decl_stmt|;
if|if
condition|(
name|cookies
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No valid cookies associated with the request "
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received cookies: "
operator|+
name|toCookieStr
argument_list|(
name|cookies
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|getClientNameFromCookie
argument_list|(
name|cookies
argument_list|)
return|;
block|}
comment|/**    * Generate a server side cookie given the cookie value as the input.    * @param str Input string token.    * @return The generated cookie.    * @throws UnsupportedEncodingException    */
specifier|private
name|Cookie
name|createCookie
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cookie name = "
operator|+
name|AUTH_COOKIE
operator|+
literal|" value = "
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AUTH_COOKIE
argument_list|,
name|str
argument_list|)
decl_stmt|;
name|cookie
operator|.
name|setMaxAge
argument_list|(
name|cookieMaxAge
argument_list|)
expr_stmt|;
if|if
condition|(
name|cookieDomain
operator|!=
literal|null
condition|)
block|{
name|cookie
operator|.
name|setDomain
argument_list|(
name|cookieDomain
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cookiePath
operator|!=
literal|null
condition|)
block|{
name|cookie
operator|.
name|setPath
argument_list|(
name|cookiePath
argument_list|)
expr_stmt|;
block|}
name|cookie
operator|.
name|setSecure
argument_list|(
name|isCookieSecure
argument_list|)
expr_stmt|;
return|return
name|cookie
return|;
block|}
comment|/**    * Generate httponly cookie from HS2 cookie    * @param cookie HS2 generated cookie    * @return The httponly cookie    */
specifier|private
specifier|static
name|String
name|getHttpOnlyCookieHeader
parameter_list|(
name|Cookie
name|cookie
parameter_list|)
block|{
name|NewCookie
name|newCookie
init|=
operator|new
name|NewCookie
argument_list|(
name|cookie
operator|.
name|getName
argument_list|()
argument_list|,
name|cookie
operator|.
name|getValue
argument_list|()
argument_list|,
name|cookie
operator|.
name|getPath
argument_list|()
argument_list|,
name|cookie
operator|.
name|getDomain
argument_list|()
argument_list|,
name|cookie
operator|.
name|getVersion
argument_list|()
argument_list|,
name|cookie
operator|.
name|getComment
argument_list|()
argument_list|,
name|cookie
operator|.
name|getMaxAge
argument_list|()
argument_list|,
name|cookie
operator|.
name|getSecure
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newCookie
operator|+
literal|"; HttpOnly"
return|;
block|}
comment|/**    * Do the LDAP/PAM authentication    * @param request    * @param authType    * @throws HttpAuthenticationException    */
specifier|private
name|String
name|doPasswdAuth
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|userName
init|=
name|getUsername
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
comment|// No-op when authType is NOSASL
if|if
condition|(
operator|!
name|authType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveAuthFactory
operator|.
name|AuthTypes
operator|.
name|NOSASL
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|AuthMethods
name|authMethod
init|=
name|AuthMethods
operator|.
name|getValidAuthMethod
argument_list|(
name|authType
argument_list|)
decl_stmt|;
name|PasswdAuthenticationProvider
name|provider
init|=
name|AuthenticationProviderFactory
operator|.
name|getAuthenticationProvider
argument_list|(
name|authMethod
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|provider
operator|.
name|Authenticate
argument_list|(
name|userName
argument_list|,
name|getPassword
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|userName
return|;
block|}
specifier|private
name|String
name|doTokenAuth
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|tokenStr
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HIVE_DELEGATION_TOKEN_HEADER
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|hiveAuthFactory
operator|.
name|verifyDelegationToken
argument_list|(
name|tokenStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Do the GSS-API kerberos authentication.    * We already have a logged in subject in the form of serviceUGI,    * which GSS-API will extract information from.    * In case of a SPNego request we use the httpUGI,    * for the authenticating service tickets.    * @param request    * @return    * @throws HttpAuthenticationException    */
specifier|private
name|String
name|doKerberosAuth
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
comment|// Try authenticating with the http/_HOST principal
if|if
condition|(
name|httpUGI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|httpUGI
operator|.
name|doAs
argument_list|(
operator|new
name|HttpKerberosServerAction
argument_list|(
name|request
argument_list|,
name|httpUGI
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to authenticate with http/_HOST kerberos principal, "
operator|+
literal|"trying with hive/_HOST kerberos principal"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now try with hive/_HOST principal
try|try
block|{
return|return
name|serviceUGI
operator|.
name|doAs
argument_list|(
operator|new
name|HttpKerberosServerAction
argument_list|(
name|request
argument_list|,
name|serviceUGI
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to authenticate with hive/_HOST kerberos principal"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
class|class
name|HttpKerberosServerAction
implements|implements
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
block|{
name|HttpServletRequest
name|request
decl_stmt|;
name|UserGroupInformation
name|serviceUGI
decl_stmt|;
name|HttpKerberosServerAction
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|UserGroupInformation
name|serviceUGI
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|serviceUGI
operator|=
name|serviceUGI
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|HttpAuthenticationException
block|{
comment|// Get own Kerberos credentials for accepting connection
name|GSSManager
name|manager
init|=
name|GSSManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|GSSContext
name|gssContext
init|=
literal|null
decl_stmt|;
name|String
name|serverPrincipal
init|=
name|getPrincipalWithoutRealm
argument_list|(
name|serviceUGI
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// This Oid for Kerberos GSS-API mechanism.
name|Oid
name|kerberosMechOid
init|=
operator|new
name|Oid
argument_list|(
literal|"1.2.840.113554.1.2.2"
argument_list|)
decl_stmt|;
comment|// Oid for SPNego GSS-API mechanism.
name|Oid
name|spnegoMechOid
init|=
operator|new
name|Oid
argument_list|(
literal|"1.3.6.1.5.5.2"
argument_list|)
decl_stmt|;
comment|// Oid for kerberos principal name
name|Oid
name|krb5PrincipalOid
init|=
operator|new
name|Oid
argument_list|(
literal|"1.2.840.113554.1.2.2.1"
argument_list|)
decl_stmt|;
comment|// GSS name for server
name|GSSName
name|serverName
init|=
name|manager
operator|.
name|createName
argument_list|(
name|serverPrincipal
argument_list|,
name|krb5PrincipalOid
argument_list|)
decl_stmt|;
comment|// GSS credentials for server
name|GSSCredential
name|serverCreds
init|=
name|manager
operator|.
name|createCredential
argument_list|(
name|serverName
argument_list|,
name|GSSCredential
operator|.
name|DEFAULT_LIFETIME
argument_list|,
operator|new
name|Oid
index|[]
block|{
name|kerberosMechOid
block|,
name|spnegoMechOid
block|}
argument_list|,
name|GSSCredential
operator|.
name|ACCEPT_ONLY
argument_list|)
decl_stmt|;
comment|// Create a GSS context
name|gssContext
operator|=
name|manager
operator|.
name|createContext
argument_list|(
name|serverCreds
argument_list|)
expr_stmt|;
comment|// Get service ticket from the authorization header
name|String
name|serviceTicketBase64
init|=
name|getAuthHeader
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
name|byte
index|[]
name|inToken
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|serviceTicketBase64
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|gssContext
operator|.
name|acceptSecContext
argument_list|(
name|inToken
argument_list|,
literal|0
argument_list|,
name|inToken
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Authenticate or deny based on its context completion
if|if
condition|(
operator|!
name|gssContext
operator|.
name|isEstablished
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Kerberos authentication failed: "
operator|+
literal|"unable to establish context with the service ticket "
operator|+
literal|"provided by the client."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|getPrincipalWithoutRealmAndHost
argument_list|(
name|gssContext
operator|.
name|getSrcName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|GSSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Kerberos authentication failed: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|gssContext
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|gssContext
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GSSException
name|e
parameter_list|)
block|{
comment|// No-op
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getPrincipalWithoutRealm
parameter_list|(
name|String
name|fullPrincipal
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|KerberosNameShim
name|fullKerberosName
decl_stmt|;
try|try
block|{
name|fullKerberosName
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getKerberosNameShim
argument_list|(
name|fullPrincipal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|serviceName
init|=
name|fullKerberosName
operator|.
name|getServiceName
argument_list|()
decl_stmt|;
name|String
name|hostName
init|=
name|fullKerberosName
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|String
name|principalWithoutRealm
init|=
name|serviceName
decl_stmt|;
if|if
condition|(
name|hostName
operator|!=
literal|null
condition|)
block|{
name|principalWithoutRealm
operator|=
name|serviceName
operator|+
literal|"/"
operator|+
name|hostName
expr_stmt|;
block|}
return|return
name|principalWithoutRealm
return|;
block|}
specifier|private
name|String
name|getPrincipalWithoutRealmAndHost
parameter_list|(
name|String
name|fullPrincipal
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|KerberosNameShim
name|fullKerberosName
decl_stmt|;
try|try
block|{
name|fullKerberosName
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getKerberosNameShim
argument_list|(
name|fullPrincipal
argument_list|)
expr_stmt|;
return|return
name|fullKerberosName
operator|.
name|getShortName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|String
name|getUsername
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|creds
index|[]
init|=
name|getAuthHeaderTokens
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
comment|// Username must be present
if|if
condition|(
name|creds
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|creds
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Authorization header received "
operator|+
literal|"from the client does not contain username."
argument_list|)
throw|;
block|}
return|return
name|creds
index|[
literal|0
index|]
return|;
block|}
specifier|private
name|String
name|getPassword
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|creds
index|[]
init|=
name|getAuthHeaderTokens
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
comment|// Password must be present
if|if
condition|(
name|creds
index|[
literal|1
index|]
operator|==
literal|null
operator|||
name|creds
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Authorization header received "
operator|+
literal|"from the client does not contain username."
argument_list|)
throw|;
block|}
return|return
name|creds
index|[
literal|1
index|]
return|;
block|}
specifier|private
name|String
index|[]
name|getAuthHeaderTokens
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|authHeaderBase64
init|=
name|getAuthHeader
argument_list|(
name|request
argument_list|,
name|authType
argument_list|)
decl_stmt|;
name|String
name|authHeaderString
init|=
name|StringUtils
operator|.
name|newStringUtf8
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|authHeaderBase64
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|creds
init|=
name|authHeaderString
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
return|return
name|creds
return|;
block|}
comment|/**    * Returns the base64 encoded auth header payload    * @param request    * @param authType    * @return    * @throws HttpAuthenticationException    */
specifier|private
name|String
name|getAuthHeader
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|HttpAuthenticationException
block|{
name|String
name|authHeader
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HttpAuthUtils
operator|.
name|AUTHORIZATION
argument_list|)
decl_stmt|;
comment|// Each http request must have an Authorization header
if|if
condition|(
name|authHeader
operator|==
literal|null
operator|||
name|authHeader
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Authorization header received "
operator|+
literal|"from the client is empty."
argument_list|)
throw|;
block|}
name|String
name|authHeaderBase64String
decl_stmt|;
name|int
name|beginIndex
decl_stmt|;
if|if
condition|(
name|isKerberosAuthMode
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|beginIndex
operator|=
operator|(
name|HttpAuthUtils
operator|.
name|NEGOTIATE
operator|+
literal|" "
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|beginIndex
operator|=
operator|(
name|HttpAuthUtils
operator|.
name|BASIC
operator|+
literal|" "
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|authHeaderBase64String
operator|=
name|authHeader
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|)
expr_stmt|;
comment|// Authorization header must have a payload
if|if
condition|(
name|authHeaderBase64String
operator|==
literal|null
operator|||
name|authHeaderBase64String
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HttpAuthenticationException
argument_list|(
literal|"Authorization header received "
operator|+
literal|"from the client does not contain any data."
argument_list|)
throw|;
block|}
return|return
name|authHeaderBase64String
return|;
block|}
specifier|private
name|boolean
name|isKerberosAuthMode
parameter_list|(
name|String
name|authType
parameter_list|)
block|{
return|return
name|authType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveAuthFactory
operator|.
name|AuthTypes
operator|.
name|KERBEROS
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getDoAsQueryParam
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"URL query string:"
operator|+
name|queryString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|params
init|=
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpUtils
operator|.
name|parseQueryString
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|params
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keySet
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"doAs"
argument_list|)
condition|)
block|{
return|return
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
index|[
literal|0
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

