begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ColumnBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TRowSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * ColumnBasedSet.  */
end_comment

begin_class
specifier|public
class|class
name|ColumnBasedSet
implements|implements
name|RowSet
block|{
specifier|private
name|long
name|startOffset
decl_stmt|;
specifier|private
specifier|final
name|TypeDescriptor
index|[]
name|descriptors
decl_stmt|;
comment|// non-null only for writing (server-side)
specifier|private
specifier|final
name|List
argument_list|<
name|ColumnBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|byte
index|[]
name|blob
decl_stmt|;
specifier|private
name|boolean
name|isBlobBased
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ColumnBasedSet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ColumnBasedSet
parameter_list|(
name|TableSchema
name|schema
parameter_list|)
block|{
name|descriptors
operator|=
name|schema
operator|.
name|toTypeDescriptors
argument_list|()
expr_stmt|;
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnBuffer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ColumnDescriptor
name|colDesc
range|:
name|schema
operator|.
name|getColumnDescriptors
argument_list|()
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnBuffer
argument_list|(
name|colDesc
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ColumnBasedSet
parameter_list|(
name|TRowSet
name|tRowSet
parameter_list|)
throws|throws
name|TException
block|{
name|descriptors
operator|=
literal|null
expr_stmt|;
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnBuffer
argument_list|>
argument_list|()
expr_stmt|;
comment|// Use TCompactProtocol to read serialized TColumns
if|if
condition|(
name|tRowSet
operator|.
name|isSetBinaryColumns
argument_list|()
condition|)
block|{
name|TProtocol
name|protocol
init|=
operator|new
name|TCompactProtocol
argument_list|(
operator|new
name|TIOStreamTransport
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|tRowSet
operator|.
name|getBinaryColumns
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Read from the stream using the protocol for each column in final schema
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tRowSet
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TColumn
name|tvalue
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
try|try
block|{
name|tvalue
operator|.
name|read
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TException
argument_list|(
literal|"Error reading column value from the row set blob"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnBuffer
argument_list|(
name|tvalue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tRowSet
operator|.
name|getColumns
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TColumn
name|tvalue
range|:
name|tRowSet
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnBuffer
argument_list|(
name|tvalue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|startOffset
operator|=
name|tRowSet
operator|.
name|getStartRowOffset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ColumnBasedSet
parameter_list|(
name|TypeDescriptor
index|[]
name|descriptors
parameter_list|,
name|List
argument_list|<
name|ColumnBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|startOffset
parameter_list|)
block|{
name|this
operator|.
name|descriptors
operator|=
name|descriptors
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
block|}
specifier|public
name|ColumnBasedSet
parameter_list|(
name|TableSchema
name|schema
parameter_list|,
name|boolean
name|isBlobBased
parameter_list|)
block|{
name|this
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|this
operator|.
name|isBlobBased
operator|=
name|isBlobBased
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnBasedSet
name|addRow
parameter_list|(
name|Object
index|[]
name|fields
parameter_list|)
block|{
if|if
condition|(
name|isBlobBased
condition|)
block|{
name|this
operator|.
name|blob
operator|=
operator|(
name|byte
index|[]
operator|)
name|fields
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TypeDescriptor
name|descriptor
init|=
name|descriptors
index|[
name|i
index|]
decl_stmt|;
name|Object
name|field
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
operator|&&
name|descriptor
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|DECIMAL_TYPE
condition|)
block|{
name|int
name|scale
init|=
name|descriptor
operator|.
name|getDecimalDigits
argument_list|()
decl_stmt|;
name|field
operator|=
operator|(
operator|(
name|HiveDecimal
operator|)
name|field
operator|)
operator|.
name|toFormatString
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|addValue
argument_list|(
name|descriptor
operator|.
name|getType
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|public
name|List
argument_list|<
name|ColumnBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|numColumns
parameter_list|()
block|{
return|return
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|numRows
parameter_list|()
block|{
return|return
name|columns
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|columns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnBasedSet
name|extractSubset
parameter_list|(
name|int
name|maxRows
parameter_list|)
block|{
name|int
name|numRows
init|=
name|Math
operator|.
name|min
argument_list|(
name|numRows
argument_list|()
argument_list|,
name|maxRows
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnBuffer
argument_list|>
name|subset
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|subset
operator|.
name|add
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|extractSubset
argument_list|(
name|numRows
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ColumnBasedSet
name|result
init|=
operator|new
name|ColumnBasedSet
argument_list|(
name|descriptors
argument_list|,
name|subset
argument_list|,
name|startOffset
argument_list|)
decl_stmt|;
name|startOffset
operator|+=
name|numRows
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getStartOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStartOffset
parameter_list|(
name|long
name|startOffset
parameter_list|)
block|{
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
block|}
specifier|public
name|TRowSet
name|toTRowSet
parameter_list|()
block|{
name|TRowSet
name|tRowSet
init|=
operator|new
name|TRowSet
argument_list|(
name|startOffset
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TRow
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBlobBased
condition|)
block|{
name|tRowSet
operator|.
name|setColumns
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tRowSet
operator|.
name|setBinaryColumns
argument_list|(
name|blob
argument_list|)
expr_stmt|;
name|tRowSet
operator|.
name|setColumnCount
argument_list|(
name|numColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|tRowSet
operator|.
name|addToColumns
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toTColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tRowSet
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
index|[]
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|convey
init|=
operator|new
name|Object
index|[
name|numColumns
argument_list|()
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|index
operator|<
name|numRows
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|next
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|convey
index|[
name|i
index|]
operator|=
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
return|return
name|convey
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
specifier|public
name|Object
index|[]
name|fill
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
index|[]
name|convey
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|convey
index|[
name|i
index|]
operator|=
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|convey
return|;
block|}
block|}
end_class

end_unit

