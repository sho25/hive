begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TRowSet
import|;
end_import

begin_comment
comment|/**  * RowBasedSet  */
end_comment

begin_class
specifier|public
class|class
name|RowBasedSet
implements|implements
name|RowSet
block|{
specifier|private
name|long
name|startOffset
decl_stmt|;
specifier|private
specifier|final
name|TypeDescriptor
index|[]
name|descriptors
decl_stmt|;
comment|// non-null only for writing (server-side)
specifier|private
specifier|final
name|RemovableList
argument_list|<
name|TRow
argument_list|>
name|rows
decl_stmt|;
specifier|public
name|RowBasedSet
parameter_list|(
name|TableSchema
name|schema
parameter_list|)
block|{
name|descriptors
operator|=
name|schema
operator|.
name|toTypeDescriptors
argument_list|()
expr_stmt|;
name|rows
operator|=
operator|new
name|RemovableList
argument_list|<
name|TRow
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|RowBasedSet
parameter_list|(
name|TRowSet
name|tRowSet
parameter_list|)
block|{
name|descriptors
operator|=
literal|null
expr_stmt|;
name|rows
operator|=
operator|new
name|RemovableList
argument_list|<
name|TRow
argument_list|>
argument_list|(
name|tRowSet
operator|.
name|getRows
argument_list|()
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|tRowSet
operator|.
name|getStartRowOffset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|RowBasedSet
parameter_list|(
name|TypeDescriptor
index|[]
name|descriptors
parameter_list|,
name|List
argument_list|<
name|TRow
argument_list|>
name|rows
parameter_list|,
name|long
name|startOffset
parameter_list|)
block|{
name|this
operator|.
name|descriptors
operator|=
name|descriptors
expr_stmt|;
name|this
operator|.
name|rows
operator|=
operator|new
name|RemovableList
argument_list|<
name|TRow
argument_list|>
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RowBasedSet
name|addRow
parameter_list|(
name|Object
index|[]
name|fields
parameter_list|)
block|{
name|TRow
name|tRow
init|=
operator|new
name|TRow
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tRow
operator|.
name|addToColVals
argument_list|(
name|ColumnValue
operator|.
name|toTColumnValue
argument_list|(
name|descriptors
index|[
name|i
index|]
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|tRow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|numColumns
parameter_list|()
block|{
return|return
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColVals
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|numRows
parameter_list|()
block|{
return|return
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|RowBasedSet
name|extractSubset
parameter_list|(
name|int
name|maxRows
parameter_list|)
block|{
name|int
name|numRows
init|=
name|Math
operator|.
name|min
argument_list|(
name|numRows
argument_list|()
argument_list|,
name|maxRows
argument_list|)
decl_stmt|;
name|RowBasedSet
name|result
init|=
operator|new
name|RowBasedSet
argument_list|(
name|descriptors
argument_list|,
name|rows
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numRows
argument_list|)
argument_list|,
name|startOffset
argument_list|)
decl_stmt|;
name|rows
operator|.
name|removeRange
argument_list|(
literal|0
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
name|startOffset
operator|+=
name|numRows
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|long
name|getStartOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
specifier|public
name|void
name|setStartOffset
parameter_list|(
name|long
name|startOffset
parameter_list|)
block|{
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|TRowSet
name|toTRowSet
parameter_list|()
block|{
name|TRowSet
name|tRowSet
init|=
operator|new
name|TRowSet
argument_list|()
decl_stmt|;
name|tRowSet
operator|.
name|setStartRowOffset
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|tRowSet
operator|.
name|setRows
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|TRow
argument_list|>
argument_list|(
name|rows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tRowSet
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
index|[]
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|TRow
argument_list|>
name|iterator
init|=
name|rows
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Object
index|[]
name|convey
init|=
operator|new
name|Object
index|[
name|numColumns
argument_list|()
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|next
parameter_list|()
block|{
name|TRow
name|row
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|values
init|=
name|row
operator|.
name|getColVals
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|convey
index|[
name|i
index|]
operator|=
name|ColumnValue
operator|.
name|toColumnValue
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|convey
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
class|class
name|RemovableList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ArrayList
argument_list|<
name|E
argument_list|>
block|{
specifier|public
name|RemovableList
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|RemovableList
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|rows
parameter_list|)
block|{
name|super
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRange
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|super
operator|.
name|removeRange
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

