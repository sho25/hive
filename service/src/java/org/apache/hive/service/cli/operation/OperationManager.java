begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|LogDivertAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|LogDivertAppenderForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|OperationLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|FetchOrientation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|TableSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|HiveSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * OperationManager.  *  */
end_comment

begin_class
specifier|public
class|class
name|OperationManager
extends|extends
name|AbstractService
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OperationManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|OperationHandle
argument_list|,
name|Operation
argument_list|>
name|handleToOperation
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|OperationHandle
argument_list|,
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Operation
argument_list|>
name|queryIdOperation
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryTagToIdMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Following fields for displaying queries on WebUI
specifier|private
name|Object
name|webuiLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|QueryInfoCache
name|historicalQueryInfos
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|QueryInfo
argument_list|>
name|liveQueryInfos
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|OperationManager
parameter_list|()
block|{
name|super
argument_list|(
name|OperationManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|LogDivertAppender
operator|.
name|registerRoutingAppender
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|LogDivertAppenderForTest
operator|.
name|registerRoutingAppenderIfInTest
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveConf
operator|.
name|isWebUiQueryInfoCacheEnabled
argument_list|()
condition|)
block|{
name|historicalQueryInfos
operator|=
operator|new
name|QueryInfoCache
argument_list|(
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_MAX_HISTORIC_QUERIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ExecuteStatementOperation
name|newExecuteStatementOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|,
name|String
name|statement
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|,
name|boolean
name|runAsync
parameter_list|,
name|long
name|queryTimeout
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|ExecuteStatementOperation
name|executeStatementOperation
init|=
name|ExecuteStatementOperation
operator|.
name|newExecuteStatementOperation
argument_list|(
name|parentSession
argument_list|,
name|statement
argument_list|,
name|confOverlay
argument_list|,
name|runAsync
argument_list|,
name|queryTimeout
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|executeStatementOperation
argument_list|)
expr_stmt|;
return|return
name|executeStatementOperation
return|;
block|}
specifier|public
name|GetTypeInfoOperation
name|newGetTypeInfoOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|)
block|{
name|GetTypeInfoOperation
name|operation
init|=
operator|new
name|GetTypeInfoOperation
argument_list|(
name|parentSession
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
specifier|public
name|GetCatalogsOperation
name|newGetCatalogsOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|)
block|{
name|GetCatalogsOperation
name|operation
init|=
operator|new
name|GetCatalogsOperation
argument_list|(
name|parentSession
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
specifier|public
name|GetSchemasOperation
name|newGetSchemasOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|)
block|{
name|GetSchemasOperation
name|operation
init|=
operator|new
name|GetSchemasOperation
argument_list|(
name|parentSession
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
specifier|public
name|MetadataOperation
name|newGetTablesOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
block|{
name|MetadataOperation
name|operation
init|=
operator|new
name|GetTablesOperation
argument_list|(
name|parentSession
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|tableName
argument_list|,
name|tableTypes
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
specifier|public
name|GetTableTypesOperation
name|newGetTableTypesOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|)
block|{
name|GetTableTypesOperation
name|operation
init|=
operator|new
name|GetTableTypesOperation
argument_list|(
name|parentSession
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
specifier|public
name|GetColumnsOperation
name|newGetColumnsOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
name|GetColumnsOperation
name|operation
init|=
operator|new
name|GetColumnsOperation
argument_list|(
name|parentSession
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
specifier|public
name|GetFunctionsOperation
name|newGetFunctionsOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|functionName
parameter_list|)
block|{
name|GetFunctionsOperation
name|operation
init|=
operator|new
name|GetFunctionsOperation
argument_list|(
name|parentSession
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|functionName
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
specifier|public
name|GetPrimaryKeysOperation
name|newGetPrimaryKeysOperation
parameter_list|(
name|HiveSession
name|parentSession
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|GetPrimaryKeysOperation
name|operation
init|=
operator|new
name|GetPrimaryKeysOperation
argument_list|(
name|parentSession
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
specifier|public
name|GetCrossReferenceOperation
name|newGetCrossReferenceOperation
parameter_list|(
name|HiveSession
name|session
parameter_list|,
name|String
name|primaryCatalog
parameter_list|,
name|String
name|primarySchema
parameter_list|,
name|String
name|primaryTable
parameter_list|,
name|String
name|foreignCatalog
parameter_list|,
name|String
name|foreignSchema
parameter_list|,
name|String
name|foreignTable
parameter_list|)
block|{
name|GetCrossReferenceOperation
name|operation
init|=
operator|new
name|GetCrossReferenceOperation
argument_list|(
name|session
argument_list|,
name|primaryCatalog
argument_list|,
name|primarySchema
argument_list|,
name|primaryTable
argument_list|,
name|foreignCatalog
argument_list|,
name|foreignSchema
argument_list|,
name|foreignTable
argument_list|)
decl_stmt|;
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
specifier|public
name|Operation
name|getOperation
parameter_list|(
name|OperationHandle
name|operationHandle
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|Operation
name|operation
init|=
name|getOperationInternal
argument_list|(
name|operationHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"Invalid OperationHandle: "
operator|+
name|operationHandle
argument_list|)
throw|;
block|}
return|return
name|operation
return|;
block|}
specifier|private
name|Operation
name|getOperationInternal
parameter_list|(
name|OperationHandle
name|operationHandle
parameter_list|)
block|{
return|return
name|handleToOperation
operator|.
name|get
argument_list|(
name|operationHandle
argument_list|)
return|;
block|}
specifier|private
name|String
name|getQueryId
parameter_list|(
name|Operation
name|operation
parameter_list|)
block|{
return|return
name|operation
operator|.
name|getParentSession
argument_list|()
operator|.
name|getHiveConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
return|;
block|}
specifier|private
name|void
name|addOperation
parameter_list|(
name|Operation
name|operation
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding operation: "
operator|+
name|operation
operator|.
name|getHandle
argument_list|()
argument_list|)
expr_stmt|;
name|queryIdOperation
operator|.
name|put
argument_list|(
name|getQueryId
argument_list|(
name|operation
argument_list|)
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|handleToOperation
operator|.
name|put
argument_list|(
name|operation
operator|.
name|getHandle
argument_list|()
argument_list|,
name|operation
argument_list|)
expr_stmt|;
if|if
condition|(
name|operation
operator|instanceof
name|SQLOperation
condition|)
block|{
synchronized|synchronized
init|(
name|webuiLock
init|)
block|{
name|liveQueryInfos
operator|.
name|put
argument_list|(
name|operation
operator|.
name|getHandle
argument_list|()
operator|.
name|getHandleIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
operator|(
name|SQLOperation
operator|)
name|operation
operator|)
operator|.
name|getQueryInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|updateQueryTag
parameter_list|(
name|String
name|queryId
parameter_list|,
name|String
name|queryTag
parameter_list|)
block|{
name|Operation
name|operation
init|=
name|queryIdOperation
operator|.
name|get
argument_list|(
name|queryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|!=
literal|null
condition|)
block|{
name|String
name|queryIdTemp
init|=
name|queryTagToIdMap
operator|.
name|get
argument_list|(
name|queryTag
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryIdTemp
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"tag "
operator|+
name|queryTag
operator|+
literal|" is already applied for query "
operator|+
name|queryIdTemp
argument_list|)
throw|;
block|}
name|queryTagToIdMap
operator|.
name|put
argument_list|(
name|queryTag
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Query "
operator|+
name|queryId
operator|+
literal|" is updated with tag "
operator|+
name|queryTag
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Query id is missing during query tag updation"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Operation
name|removeOperation
parameter_list|(
name|OperationHandle
name|opHandle
parameter_list|)
block|{
name|Operation
name|operation
init|=
name|handleToOperation
operator|.
name|remove
argument_list|(
name|opHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Operation does not exist: "
operator|+
name|opHandle
argument_list|)
throw|;
block|}
name|String
name|queryId
init|=
name|getQueryId
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|queryIdOperation
operator|.
name|remove
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
name|String
name|queryTag
init|=
name|operation
operator|.
name|getQueryTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryTag
operator|!=
literal|null
condition|)
block|{
name|queryTagToIdMap
operator|.
name|remove
argument_list|(
name|queryTag
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed queryId: {} corresponding to operation: {} with tag: {}"
argument_list|,
name|queryId
argument_list|,
name|opHandle
argument_list|,
name|queryTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|operation
operator|instanceof
name|SQLOperation
condition|)
block|{
name|removeSafeQueryInfo
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
block|}
return|return
name|operation
return|;
block|}
specifier|private
name|Operation
name|removeTimedOutOperation
parameter_list|(
name|OperationHandle
name|operationHandle
parameter_list|)
block|{
name|Operation
name|operation
init|=
name|handleToOperation
operator|.
name|get
argument_list|(
name|operationHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|!=
literal|null
operator|&&
name|operation
operator|.
name|isTimedOut
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operation is timed out,operation="
operator|+
name|operation
operator|.
name|getHandle
argument_list|()
operator|+
literal|",state="
operator|+
name|operation
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|metrics
operator|.
name|decrementCounter
argument_list|(
name|MetricsConstant
operator|.
name|OPEN_OPERATIONS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error decrementing open_operations metric, reported values may be incorrect"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|removeOperation
argument_list|(
name|operationHandle
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|removeSafeQueryInfo
parameter_list|(
name|OperationHandle
name|operationHandle
parameter_list|)
block|{
synchronized|synchronized
init|(
name|webuiLock
init|)
block|{
name|String
name|opKey
init|=
name|operationHandle
operator|.
name|getHandleIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// remove from list of live operations
name|QueryInfo
name|display
init|=
name|liveQueryInfos
operator|.
name|remove
argument_list|(
name|opKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|display
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected display object value of null for operation {}"
argument_list|,
name|opKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|historicalQueryInfos
operator|!=
literal|null
condition|)
block|{
comment|// add to list of saved historic operations
name|historicalQueryInfos
operator|.
name|put
argument_list|(
name|opKey
argument_list|,
name|display
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|OperationStatus
name|getOperationStatus
parameter_list|(
name|OperationHandle
name|opHandle
parameter_list|)
throws|throws
name|HiveSQLException
block|{
return|return
name|getOperation
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**    * Cancel the running operation unless it is already in a terminal state    * @param opHandle operation handle    * @param errMsg error message    * @throws HiveSQLException    */
specifier|public
name|void
name|cancelOperation
parameter_list|(
name|OperationHandle
name|opHandle
parameter_list|,
name|String
name|errMsg
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|Operation
name|operation
init|=
name|getOperation
argument_list|(
name|opHandle
argument_list|)
decl_stmt|;
name|OperationState
name|opState
init|=
name|operation
operator|.
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|opState
operator|.
name|isTerminal
argument_list|()
condition|)
block|{
comment|// Cancel should be a no-op in either cases
name|LOG
operator|.
name|debug
argument_list|(
name|opHandle
operator|+
literal|": Operation is already aborted in state - "
operator|+
name|opState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|opHandle
operator|+
literal|": Attempting to cancel from state - "
operator|+
name|opState
argument_list|)
expr_stmt|;
name|OperationState
name|operationState
init|=
name|OperationState
operator|.
name|CANCELED
decl_stmt|;
name|operationState
operator|.
name|setErrorMessage
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|operation
operator|.
name|cancel
argument_list|(
name|operationState
argument_list|)
expr_stmt|;
if|if
condition|(
name|operation
operator|instanceof
name|SQLOperation
condition|)
block|{
name|removeSafeQueryInfo
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Cancel the running operation unless it is already in a terminal state    * @param opHandle    * @throws HiveSQLException    */
specifier|public
name|void
name|cancelOperation
parameter_list|(
name|OperationHandle
name|opHandle
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|cancelOperation
argument_list|(
name|opHandle
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|closeOperation
parameter_list|(
name|OperationHandle
name|opHandle
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing operation: "
operator|+
name|opHandle
argument_list|)
expr_stmt|;
name|Operation
name|operation
init|=
name|removeOperation
argument_list|(
name|opHandle
argument_list|)
decl_stmt|;
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|metrics
operator|.
name|decrementCounter
argument_list|(
name|MetricsConstant
operator|.
name|OPEN_OPERATIONS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error Reporting close operation to Metrics system"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|operation
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TableSchema
name|getOperationResultSetSchema
parameter_list|(
name|OperationHandle
name|opHandle
parameter_list|)
throws|throws
name|HiveSQLException
block|{
return|return
name|getOperation
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getResultSetSchema
argument_list|()
return|;
block|}
specifier|public
name|RowSet
name|getOperationNextRowSet
parameter_list|(
name|OperationHandle
name|opHandle
parameter_list|,
name|FetchOrientation
name|orientation
parameter_list|,
name|long
name|maxRows
parameter_list|)
throws|throws
name|HiveSQLException
block|{
return|return
name|getOperation
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getNextRowSet
argument_list|(
name|orientation
argument_list|,
name|maxRows
argument_list|)
return|;
block|}
specifier|public
name|RowSet
name|getOperationLogRowSet
parameter_list|(
name|OperationHandle
name|opHandle
parameter_list|,
name|FetchOrientation
name|orientation
parameter_list|,
name|long
name|maxRows
parameter_list|,
name|HiveConf
name|hConf
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|TableSchema
name|tableSchema
init|=
operator|new
name|TableSchema
argument_list|(
name|getLogSchema
argument_list|()
argument_list|)
decl_stmt|;
name|RowSet
name|rowSet
init|=
name|RowSetFactory
operator|.
name|create
argument_list|(
name|tableSchema
argument_list|,
name|getOperation
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getProtocolVersion
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|hConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_LOGGING_OPERATION_ENABLED
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Try to get operation log when hive.server2.logging.operation.enabled is false, no log will be returned. "
argument_list|)
expr_stmt|;
return|return
name|rowSet
return|;
block|}
comment|// get the OperationLog object from the operation
name|OperationLog
name|operationLog
init|=
name|getOperation
argument_list|(
name|opHandle
argument_list|)
operator|.
name|getOperationLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|operationLog
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
literal|"Couldn't find log associated with operation handle: "
operator|+
name|opHandle
argument_list|)
throw|;
block|}
comment|// read logs
name|List
argument_list|<
name|String
argument_list|>
name|logs
decl_stmt|;
try|try
block|{
name|logs
operator|=
name|operationLog
operator|.
name|readOperationLog
argument_list|(
name|isFetchFirst
argument_list|(
name|orientation
argument_list|)
argument_list|,
name|maxRows
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveSQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
comment|// convert logs to RowSet
for|for
control|(
name|String
name|log
range|:
name|logs
control|)
block|{
name|rowSet
operator|.
name|addRow
argument_list|(
operator|new
name|String
index|[]
block|{
name|log
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|rowSet
return|;
block|}
specifier|private
name|boolean
name|isFetchFirst
parameter_list|(
name|FetchOrientation
name|fetchOrientation
parameter_list|)
block|{
comment|//TODO: Since OperationLog is moved to package o.a.h.h.ql.session,
comment|// we may add a Enum there and map FetchOrientation to it.
if|if
condition|(
name|fetchOrientation
operator|.
name|equals
argument_list|(
name|FetchOrientation
operator|.
name|FETCH_FIRST
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|Schema
name|getLogSchema
parameter_list|()
block|{
name|Schema
name|schema
init|=
operator|new
name|Schema
argument_list|()
decl_stmt|;
name|FieldSchema
name|fieldSchema
init|=
operator|new
name|FieldSchema
argument_list|()
decl_stmt|;
name|fieldSchema
operator|.
name|setName
argument_list|(
literal|"operation_log"
argument_list|)
expr_stmt|;
name|fieldSchema
operator|.
name|setType
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addToFieldSchemas
argument_list|(
name|fieldSchema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Operation
argument_list|>
name|getOperations
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|handleToOperation
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|removeExpiredOperations
parameter_list|(
name|OperationHandle
index|[]
name|handles
parameter_list|)
block|{
name|List
argument_list|<
name|Operation
argument_list|>
name|removed
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationHandle
name|handle
range|:
name|handles
control|)
block|{
name|Operation
name|operation
init|=
name|removeTimedOutOperation
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Operation "
operator|+
name|handle
operator|+
literal|" is timed-out and will be closed"
argument_list|)
expr_stmt|;
name|removed
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|removed
return|;
block|}
comment|/**    * @return displays representing a number of historical SQLOperations, at max number of    * hive.server2.webui.max.historic.queries. Newest items will be first.    */
specifier|public
name|List
argument_list|<
name|QueryInfo
argument_list|>
name|getHistoricalQueryInfos
parameter_list|()
block|{
name|List
argument_list|<
name|QueryInfo
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|webuiLock
init|)
block|{
if|if
condition|(
name|historicalQueryInfos
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|historicalQueryInfos
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * @return displays representing live SQLOperations    */
specifier|public
name|List
argument_list|<
name|QueryInfo
argument_list|>
name|getLiveQueryInfos
parameter_list|()
block|{
name|List
argument_list|<
name|QueryInfo
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|webuiLock
init|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|liveQueryInfos
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param handle handle of SQLOperation.    * @return display representing a particular SQLOperation.    */
specifier|public
name|QueryInfo
name|getQueryInfo
parameter_list|(
name|String
name|handle
parameter_list|)
block|{
synchronized|synchronized
init|(
name|webuiLock
init|)
block|{
if|if
condition|(
name|historicalQueryInfos
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QueryInfo
name|result
init|=
name|liveQueryInfos
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|historicalQueryInfos
operator|.
name|get
argument_list|(
name|handle
argument_list|)
return|;
block|}
block|}
specifier|public
name|Operation
name|getOperationByQueryId
parameter_list|(
name|String
name|queryId
parameter_list|)
block|{
return|return
name|queryIdOperation
operator|.
name|get
argument_list|(
name|queryId
argument_list|)
return|;
block|}
specifier|public
name|Operation
name|getOperationByQueryTag
parameter_list|(
name|String
name|queryTag
parameter_list|)
block|{
name|String
name|queryId
init|=
name|queryTagToIdMap
operator|.
name|get
argument_list|(
name|queryTag
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryId
operator|!=
literal|null
condition|)
block|{
return|return
name|getOperationByQueryId
argument_list|(
name|queryId
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

