begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|servlet
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
operator|.
name|HttpServer
operator|.
name|CONF_CONTEXT_ATTRIBUTE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|KerberosAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
operator|.
name|HiveServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Returns "true" if this HS2 instance is leader else "false".  * Invoking a "DELETE" method on this endpoint will trigger a failover if this instance is a leader.  * hadoop.security.instrumentation.requires.admin should be set to true and current user has to be in admin ACLS  * for accessing any of these endpoints.  */
end_comment

begin_class
specifier|public
class|class
name|HS2LeadershipStatus
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HS2LeadershipStatus
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// admin check -
comment|// allows when hadoop.security.instrumentation.requires.admin is set to false
comment|// when hadoop.security.instrumentation.requires.admin is set to true, checks if hadoop.security.authorization
comment|// is true and if the logged in user (via PAM or SPNEGO + kerberos) is in hive.users.in.admin.role list
specifier|final
name|ServletContext
name|context
init|=
name|getServletContext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|HttpServer
operator|.
name|isInstrumentationAccessAllowed
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unauthorized to perform GET action. remoteUser: {}"
argument_list|,
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ServletContext
name|ctx
init|=
name|getServletContext
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|isLeader
init|=
operator|(
name|AtomicBoolean
operator|)
name|ctx
operator|.
name|getAttribute
argument_list|(
literal|"hs2.isLeader"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning isLeader: {}"
argument_list|,
name|isLeader
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|,
name|isLeader
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|FailoverResponse
block|{
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|String
name|message
decl_stmt|;
name|FailoverResponse
parameter_list|()
block|{ }
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
specifier|final
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|doDelete
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// strict admin check -
comment|// allows ONLY if hadoop.security.instrumentation.requires.admin is set to true
comment|// when hadoop.security.instrumentation.requires.admin is set to true, checks if hadoop.security.authorization
comment|// is true and if the logged in user (via PAM or SPNEGO + kerberos) is in hive.users.in.admin.role list
specifier|final
name|ServletContext
name|context
init|=
name|getServletContext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|HttpServer
operator|.
name|isInstrumentationAccessAllowedStrict
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unauthorized to perform DELETE action. remoteUser: {}"
argument_list|,
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"DELETE handler invoked for failover.."
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|FailoverResponse
name|failoverResponse
init|=
operator|new
name|FailoverResponse
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|isLeader
init|=
operator|(
name|AtomicBoolean
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"hs2.isLeader"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isLeader
operator|.
name|get
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Cannot failover an instance that is not a leader"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|failoverResponse
operator|.
name|setSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|failoverResponse
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|,
name|failoverResponse
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
expr_stmt|;
return|return;
block|}
name|HiveServer2
operator|.
name|FailoverHandlerCallback
name|failoverHandler
init|=
operator|(
name|HiveServer2
operator|.
name|FailoverHandlerCallback
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"hs2.failover.callback"
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|msg
init|=
literal|"Failover successful!"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|failoverHandler
operator|.
name|failover
argument_list|()
expr_stmt|;
name|failoverResponse
operator|.
name|setSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|failoverResponse
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|,
name|failoverResponse
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot perform failover of HS2 instance. err: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failoverResponse
operator|.
name|setSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|failoverResponse
operator|.
name|setMessage
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|,
name|failoverResponse
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

