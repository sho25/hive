begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|OperationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|HiveSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|SerializerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|module
operator|.
name|SimpleModule
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * QueriesRESTfulAPIServlet.  *  */
end_comment

begin_class
specifier|public
class|class
name|QueriesRESTfulAPIServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QueriesRESTfulAPIServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|API_V1
init|=
literal|"v1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REQ_QUERIES
init|=
literal|"queries"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REQ_SESSIONS
init|=
literal|"sessions"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REQ_ACTIVE
init|=
literal|"active"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REQ_HISTORICAL
init|=
literal|"historical"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
comment|/*             Available endpoints are:              - /v1/queries/active              - /v1/queries/historical              - /v1/sessions         */
name|String
name|pathInfo
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathInfo
operator|==
literal|null
operator|||
literal|"/"
operator|.
name|equals
argument_list|(
name|pathInfo
argument_list|)
condition|)
block|{
name|sendError
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Path to the endpoint is missing"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
index|[]
name|splits
init|=
name|pathInfo
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|length
operator|<
literal|3
condition|)
block|{
comment|//expecting at least 2 parts in the path
name|sendError
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Expecting at least 2 parts in the path"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ServletContext
name|ctx
init|=
name|getServletContext
argument_list|()
decl_stmt|;
name|SessionManager
name|sessionManager
init|=
operator|(
name|SessionManager
operator|)
name|ctx
operator|.
name|getAttribute
argument_list|(
literal|"hive.sm"
argument_list|)
decl_stmt|;
name|OperationManager
name|operationManager
init|=
name|sessionManager
operator|.
name|getOperationManager
argument_list|()
decl_stmt|;
name|String
name|apiVersion
init|=
name|splits
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|apiVersion
operator|.
name|equals
argument_list|(
name|API_V1
argument_list|)
condition|)
block|{
name|String
name|reqType
init|=
name|splits
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|reqType
operator|.
name|equals
argument_list|(
name|REQ_QUERIES
argument_list|)
condition|)
block|{
if|if
condition|(
name|splits
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
name|sendError
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Expecting 3 parts in the path: /v1/queries/active or /v1/queries/historical"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|queriesType
init|=
name|splits
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|queriesType
operator|.
name|equals
argument_list|(
name|REQ_ACTIVE
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|QueryInfo
argument_list|>
name|operations
init|=
name|operationManager
operator|.
name|getLiveQueryInfos
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning active SQL operations via the RESTful API"
argument_list|)
expr_stmt|;
name|sendAsJson
argument_list|(
name|response
argument_list|,
name|operations
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queriesType
operator|.
name|equals
argument_list|(
name|REQ_HISTORICAL
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|QueryInfo
argument_list|>
name|operations
init|=
name|operationManager
operator|.
name|getHistoricalQueryInfos
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning historical SQL operations via the RESTful API"
argument_list|)
expr_stmt|;
name|sendAsJson
argument_list|(
name|response
argument_list|,
name|operations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendError
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Unknown query type: "
operator|+
name|queriesType
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|reqType
operator|.
name|equals
argument_list|(
name|REQ_SESSIONS
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|HiveSession
argument_list|>
name|hiveSessions
init|=
name|sessionManager
operator|.
name|getSessions
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning active sessions via the RESTful API"
argument_list|)
expr_stmt|;
name|sendAsJson
argument_list|(
name|response
argument_list|,
name|hiveSessions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// unrecognized request
name|sendError
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Unknown request type: "
operator|+
name|reqType
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// unrecognized API version
name|sendError
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"This server only handles API v1"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|private
name|void
name|sendError
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|Integer
name|errorCode
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|errorCode
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
try|try
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"{\"message\" : "
operator|+
name|message
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught an exception while writing an HTTP error status"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendAsJson
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|SimpleModule
name|module
init|=
operator|new
name|SimpleModule
argument_list|(
literal|"CustomSessionModule"
argument_list|,
operator|new
name|Version
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|module
operator|.
name|addSerializer
argument_list|(
name|HiveSession
operator|.
name|class
argument_list|,
operator|new
name|HiveSessionSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|registerModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
try|try
block|{
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|String
name|objectAsJson
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|objectAsJson
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught an exception while writing an HTTP response"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|HiveSessionSerializer
extends|extends
name|JsonSerializer
argument_list|<
name|HiveSession
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|HiveSession
name|hiveSession
parameter_list|,
name|JsonGenerator
name|jgen
parameter_list|,
name|SerializerProvider
name|serializerProvider
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonProcessingException
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|jgen
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|jgen
operator|.
name|writeStringField
argument_list|(
literal|"sessionId"
argument_list|,
name|hiveSession
operator|.
name|getSessionHandle
argument_list|()
operator|.
name|getSessionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jgen
operator|.
name|writeStringField
argument_list|(
literal|"username"
argument_list|,
name|hiveSession
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|jgen
operator|.
name|writeStringField
argument_list|(
literal|"ipAddress"
argument_list|,
name|hiveSession
operator|.
name|getIpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|jgen
operator|.
name|writeNumberField
argument_list|(
literal|"operationCount"
argument_list|,
name|hiveSession
operator|.
name|getOpenOperationCount
argument_list|()
argument_list|)
expr_stmt|;
name|jgen
operator|.
name|writeNumberField
argument_list|(
literal|"activeTime"
argument_list|,
operator|(
name|currentTime
operator|-
name|hiveSession
operator|.
name|getCreationTime
argument_list|()
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|jgen
operator|.
name|writeNumberField
argument_list|(
literal|"idleTime"
argument_list|,
operator|(
name|currentTime
operator|-
name|hiveSession
operator|.
name|getLastAccessTime
argument_list|()
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|jgen
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

