begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
operator|.
name|ServiceInstanceBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|HiveServer2Instance
extends|extends
name|ServiceInstanceBase
block|{
specifier|private
name|boolean
name|isLeader
decl_stmt|;
specifier|private
name|String
name|transportMode
decl_stmt|;
specifier|private
name|String
name|httpEndpoint
decl_stmt|;
comment|// empty c'tor to make jackson happy
specifier|public
name|HiveServer2Instance
parameter_list|()
block|{    }
specifier|public
name|HiveServer2Instance
parameter_list|(
specifier|final
name|ServiceRecord
name|srv
parameter_list|,
specifier|final
name|String
name|endPointName
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|srv
argument_list|,
name|endPointName
argument_list|)
expr_stmt|;
name|Endpoint
name|activeEndpoint
init|=
name|srv
operator|.
name|getInternalEndpoint
argument_list|(
name|HS2ActivePassiveHARegistry
operator|.
name|ACTIVE_ENDPOINT
argument_list|)
decl_stmt|;
name|Endpoint
name|passiveEndpoint
init|=
name|srv
operator|.
name|getInternalEndpoint
argument_list|(
name|HS2ActivePassiveHARegistry
operator|.
name|PASSIVE_ENDPOINT
argument_list|)
decl_stmt|;
name|this
operator|.
name|isLeader
operator|=
name|activeEndpoint
operator|!=
literal|null
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|activeEndpoint
operator|==
literal|null
operator|||
name|passiveEndpoint
operator|==
literal|null
argument_list|,
literal|"Incorrect service record. Both active and passive endpoints cannot be non-null!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportMode
operator|=
name|srv
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|)
expr_stmt|;
if|if
condition|(
name|transportMode
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|this
operator|.
name|httpEndpoint
operator|=
name|srv
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PATH
operator|.
name|varname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|httpEndpoint
operator|=
literal|""
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isLeader
parameter_list|()
block|{
return|return
name|isLeader
return|;
block|}
specifier|public
name|String
name|getTransportMode
parameter_list|()
block|{
return|return
name|transportMode
return|;
block|}
specifier|public
name|String
name|getHttpEndpoint
parameter_list|()
block|{
return|return
name|httpEndpoint
return|;
block|}
specifier|public
name|void
name|setLeader
parameter_list|(
specifier|final
name|boolean
name|leader
parameter_list|)
block|{
name|isLeader
operator|=
name|leader
expr_stmt|;
block|}
specifier|public
name|void
name|setTransportMode
parameter_list|(
specifier|final
name|String
name|transportMode
parameter_list|)
block|{
name|this
operator|.
name|transportMode
operator|=
name|transportMode
expr_stmt|;
block|}
specifier|public
name|void
name|setHttpEndpoint
parameter_list|(
specifier|final
name|String
name|httpEndpoint
parameter_list|)
block|{
name|this
operator|.
name|httpEndpoint
operator|=
name|httpEndpoint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HiveServer2Instance
name|other
init|=
operator|(
name|HiveServer2Instance
operator|)
name|o
decl_stmt|;
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|&&
name|isLeader
operator|==
name|other
operator|.
name|isLeader
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|transportMode
argument_list|,
name|other
operator|.
name|transportMode
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|httpEndpoint
argument_list|,
name|other
operator|.
name|httpEndpoint
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
name|isLeader
argument_list|)
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
name|transportMode
argument_list|)
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
name|httpEndpoint
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|result
init|=
literal|"instanceId: "
operator|+
name|getWorkerIdentity
argument_list|()
operator|+
literal|" isLeader: "
operator|+
name|isLeader
operator|+
literal|" host: "
operator|+
name|getHost
argument_list|()
operator|+
literal|" port: "
operator|+
name|getRpcPort
argument_list|()
operator|+
literal|" transportMode: "
operator|+
name|transportMode
decl_stmt|;
if|if
condition|(
name|httpEndpoint
operator|!=
literal|null
condition|)
block|{
name|result
operator|+=
literal|" httpEndpoint: "
operator|+
name|httpEndpoint
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

