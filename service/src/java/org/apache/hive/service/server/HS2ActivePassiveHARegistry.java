begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
operator|.
name|HiveServer2
operator|.
name|INSTANCE_URI_CONFIG
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|cache
operator|.
name|PathChildrenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|leader
operator|.
name|LeaderLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|leader
operator|.
name|LeaderLatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|CloseableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|ServiceInstanceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|ServiceInstanceStateChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
operator|.
name|ZkRegistryBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|HS2ActivePassiveHARegistry
extends|extends
name|ZkRegistryBase
argument_list|<
name|HiveServer2Instance
argument_list|>
implements|implements
name|ServiceRegistry
argument_list|<
name|HiveServer2Instance
argument_list|>
implements|,
name|HiveServer2HAInstanceSet
implements|,
name|HiveServer2
operator|.
name|FailoverHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HS2ActivePassiveHARegistry
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|ACTIVE_ENDPOINT
init|=
literal|"activeEndpoint"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PASSIVE_ENDPOINT
init|=
literal|"passiveEndpoint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SASL_LOGIN_CONTEXT_NAME
init|=
literal|"HS2ActivePassiveHAZooKeeperClient"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSTANCE_PREFIX
init|=
literal|"instance-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSTANCE_GROUP
init|=
literal|"instances"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LEADER_LATCH_PATH
init|=
literal|"/_LEADER"
decl_stmt|;
specifier|private
name|LeaderLatch
name|leaderLatch
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|LeaderLatchListener
argument_list|,
name|ExecutorService
argument_list|>
name|registeredListeners
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|latchPath
decl_stmt|;
specifier|private
name|ServiceRecord
name|srv
decl_stmt|;
specifier|private
name|boolean
name|isClient
decl_stmt|;
specifier|private
specifier|final
name|String
name|uniqueId
decl_stmt|;
comment|// There are 2 paths under which the instances get registered
comment|// 1) Standard path used by ZkRegistryBase where all instances register themselves (also stores metadata)
comment|// Secure: /hs2ActivePassiveHA-sasl/instances/instance-0000000000
comment|// Unsecure: /hs2ActivePassiveHA-unsecure/instances/instance-0000000000
comment|// 2) Leader latch path used for HS2 HA Active/Passive configuration where all instances register under _LEADER
comment|//    path but only one among them is the leader
comment|// Secure: /hs2ActivePassiveHA-sasl/_LEADER/xxxx-latch-0000000000
comment|// Unsecure: /hs2ActivePassiveHA-unsecure/_LEADER/xxxx-latch-0000000000
specifier|static
name|HS2ActivePassiveHARegistry
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isClient
parameter_list|)
block|{
name|String
name|zkNameSpace
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ACTIVE_PASSIVE_HA_REGISTRY_NAMESPACE
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|zkNameSpace
argument_list|)
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ACTIVE_PASSIVE_HA_REGISTRY_NAMESPACE
operator|.
name|varname
operator|+
literal|" cannot be null or empty"
argument_list|)
expr_stmt|;
name|String
name|principal
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_PRINCIPAL
argument_list|)
decl_stmt|;
name|String
name|keytab
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_KEYTAB
argument_list|)
decl_stmt|;
name|String
name|zkNameSpacePrefix
init|=
name|zkNameSpace
operator|+
literal|"-"
decl_stmt|;
return|return
operator|new
name|HS2ActivePassiveHARegistry
argument_list|(
literal|null
argument_list|,
name|zkNameSpacePrefix
argument_list|,
name|LEADER_LATCH_PATH
argument_list|,
name|principal
argument_list|,
name|keytab
argument_list|,
name|isClient
condition|?
literal|null
else|:
name|SASL_LOGIN_CONTEXT_NAME
argument_list|,
name|conf
argument_list|,
name|isClient
argument_list|)
return|;
block|}
specifier|private
name|HS2ActivePassiveHARegistry
parameter_list|(
specifier|final
name|String
name|instanceName
parameter_list|,
specifier|final
name|String
name|zkNamespacePrefix
parameter_list|,
specifier|final
name|String
name|leaderLatchPath
parameter_list|,
specifier|final
name|String
name|krbPrincipal
parameter_list|,
specifier|final
name|String
name|krbKeytab
parameter_list|,
specifier|final
name|String
name|saslContextName
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|boolean
name|isClient
parameter_list|)
block|{
name|super
argument_list|(
name|instanceName
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
name|zkNamespacePrefix
argument_list|,
literal|null
argument_list|,
name|INSTANCE_PREFIX
argument_list|,
name|INSTANCE_GROUP
argument_list|,
name|saslContextName
argument_list|,
name|krbPrincipal
argument_list|,
name|krbKeytab
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|isClient
operator|=
name|isClient
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
operator|&&
name|conf
operator|.
name|get
argument_list|(
name|ZkRegistryBase
operator|.
name|UNIQUE_IDENTIFIER
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|uniqueId
operator|=
name|conf
operator|.
name|get
argument_list|(
name|ZkRegistryBase
operator|.
name|UNIQUE_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|uniqueId
operator|=
name|UNIQUE_ID
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|latchPath
operator|=
name|leaderLatchPath
expr_stmt|;
name|this
operator|.
name|leaderLatch
operator|=
name|getNewLeaderLatchPath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isClient
condition|)
block|{
name|this
operator|.
name|srv
operator|=
name|getNewServiceRecord
argument_list|()
expr_stmt|;
name|register
argument_list|()
expr_stmt|;
name|registerLeaderLatchListener
argument_list|(
operator|new
name|HS2LeaderLatchListener
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
comment|// all participating instances uses the same latch path, and curator randomly chooses one instance to be leader
comment|// which can be verified via leaderLatch.hasLeadership()
name|leaderLatch
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered HS2 with ZK. service record: {}"
argument_list|,
name|srv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populateCache
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Populating instances cache for client"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|unregisterInternal
parameter_list|()
block|{
name|super
operator|.
name|unregisterInternal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|register
parameter_list|()
throws|throws
name|IOException
block|{
name|updateEndpoint
argument_list|(
name|srv
argument_list|,
name|PASSIVE_ENDPOINT
argument_list|)
expr_stmt|;
return|return
name|registerServiceRecord
argument_list|(
name|srv
argument_list|,
name|uniqueId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|leaderLatch
argument_list|)
expr_stmt|;
name|unregisterInternal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateRegistration
parameter_list|(
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|void
name|populateCache
parameter_list|()
throws|throws
name|IOException
block|{
name|PathChildrenCache
name|pcc
init|=
name|ensureInstancesCache
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|populateCache
argument_list|(
name|pcc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ServiceInstanceSet
argument_list|<
name|HiveServer2Instance
argument_list|>
name|getInstances
parameter_list|(
specifier|final
name|String
name|component
parameter_list|,
specifier|final
name|long
name|clusterReadyTimeoutMs
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported to get instances by component name"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|addActiveEndpointToServiceRecord
parameter_list|()
throws|throws
name|IOException
block|{
name|addEndpointToServiceRecord
argument_list|(
name|getNewServiceRecord
argument_list|()
argument_list|,
name|ACTIVE_ENDPOINT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPassiveEndpointToServiceRecord
parameter_list|()
throws|throws
name|IOException
block|{
name|addEndpointToServiceRecord
argument_list|(
name|getNewServiceRecord
argument_list|()
argument_list|,
name|PASSIVE_ENDPOINT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addEndpointToServiceRecord
parameter_list|(
specifier|final
name|ServiceRecord
name|srv
parameter_list|,
specifier|final
name|String
name|endpointName
parameter_list|)
throws|throws
name|IOException
block|{
name|updateEndpoint
argument_list|(
name|srv
argument_list|,
name|endpointName
argument_list|)
expr_stmt|;
name|updateServiceRecord
argument_list|(
name|srv
argument_list|,
name|doCheckAcls
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateEndpoint
parameter_list|(
specifier|final
name|ServiceRecord
name|srv
parameter_list|,
specifier|final
name|String
name|endpointName
parameter_list|)
block|{
specifier|final
name|String
name|instanceUri
init|=
name|srv
operator|.
name|get
argument_list|(
name|INSTANCE_URI_CONFIG
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|tokens
init|=
name|instanceUri
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|hostname
init|=
name|tokens
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokens
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Endpoint
name|urlEndpoint
init|=
name|RegistryTypeUtils
operator|.
name|ipcEndpoint
argument_list|(
name|endpointName
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
argument_list|)
decl_stmt|;
name|srv
operator|.
name|addInternalEndpoint
argument_list|(
name|urlEndpoint
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added {} endpoint to service record"
argument_list|,
name|urlEndpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|leaderLatch
argument_list|)
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|HiveServer2Instance
name|createServiceInstance
parameter_list|(
specifier|final
name|ServiceRecord
name|srv
parameter_list|)
throws|throws
name|IOException
block|{
name|Endpoint
name|activeEndpoint
init|=
name|srv
operator|.
name|getInternalEndpoint
argument_list|(
name|HS2ActivePassiveHARegistry
operator|.
name|ACTIVE_ENDPOINT
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveServer2Instance
argument_list|(
name|srv
argument_list|,
name|activeEndpoint
operator|!=
literal|null
condition|?
name|ACTIVE_ENDPOINT
else|:
name|PASSIVE_ENDPOINT
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|registerStateChangeListener
parameter_list|(
specifier|final
name|ServiceInstanceStateChangeListener
argument_list|<
name|HiveServer2Instance
argument_list|>
name|listener
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|registerStateChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported until HS2 runs as YARN application"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getZkPathUser
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|currentUser
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|hasLeadership
parameter_list|()
block|{
return|return
name|leaderLatch
operator|.
name|hasLeadership
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failover
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hasLeadership
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failover request received for HS2 instance: {}. Restarting leader latch.."
argument_list|,
name|uniqueId
argument_list|)
expr_stmt|;
name|leaderLatch
operator|.
name|close
argument_list|(
name|LeaderLatch
operator|.
name|CloseMode
operator|.
name|NOTIFY_LEADER
argument_list|)
expr_stmt|;
name|leaderLatch
operator|=
name|getNewLeaderLatchPath
argument_list|()
expr_stmt|;
comment|// re-attach all registered listeners
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|LeaderLatchListener
argument_list|,
name|ExecutorService
argument_list|>
name|registeredListener
range|:
name|registeredListeners
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|registeredListener
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|leaderLatch
operator|.
name|addListener
argument_list|(
name|registeredListener
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|leaderLatch
operator|.
name|addListener
argument_list|(
name|registeredListener
operator|.
name|getKey
argument_list|()
argument_list|,
name|registeredListener
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|leaderLatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failover complete. Leader latch restarted successfully. New leader: {}"
argument_list|,
name|leaderLatch
operator|.
name|getLeader
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failover request received for HS2 instance: {} that is not leader. Skipping.."
argument_list|,
name|uniqueId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns a new instance of leader latch path but retains the same uniqueId. This is only used when HS2 startsup or    * when a manual failover is triggered (in which case uniqueId will still remain as the instance has not restarted)    *    * @return - new leader latch    */
specifier|private
name|LeaderLatch
name|getNewLeaderLatchPath
parameter_list|()
block|{
return|return
operator|new
name|LeaderLatch
argument_list|(
name|zooKeeperClient
argument_list|,
name|latchPath
argument_list|,
name|uniqueId
argument_list|,
name|LeaderLatch
operator|.
name|CloseMode
operator|.
name|NOTIFY_LEADER
argument_list|)
return|;
block|}
specifier|private
class|class
name|HS2LeaderLatchListener
implements|implements
name|LeaderLatchListener
block|{
comment|// leadership state changes and sending out notifications to listener happens inside synchronous method in curator.
comment|// Do only lightweight actions in main-event handler thread. Time consuming operations are handled via separate
comment|// executor service registered via registerLeaderLatchListener().
annotation|@
name|Override
specifier|public
name|void
name|isLeader
parameter_list|()
block|{
comment|// only leader publishes instance uri as endpoint which will be used by clients to make connections to HS2 via
comment|// service discovery.
try|try
block|{
if|if
condition|(
operator|!
name|hasLeadership
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"isLeader notification received but hasLeadership returned false.. awaiting.."
argument_list|)
expr_stmt|;
name|leaderLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|addActiveEndpointToServiceRecord
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HS2 instance in ACTIVE mode. Service record: {}"
argument_list|,
name|srv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Unable to add active endpoint to service record"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|notLeader
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|hasLeadership
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"notLeader notification received but hasLeadership returned true.. awaiting.."
argument_list|)
expr_stmt|;
name|leaderLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|addPassiveEndpointToServiceRecord
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HS2 instance lost leadership. Switched to PASSIVE standby mode. Service record: {}"
argument_list|,
name|srv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Unable to add passive endpoint to service record"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|HiveServer2Instance
name|getLeader
parameter_list|()
block|{
for|for
control|(
name|HiveServer2Instance
name|hs2Instance
range|:
name|getAll
argument_list|()
control|)
block|{
if|if
condition|(
name|hs2Instance
operator|.
name|isLeader
argument_list|()
condition|)
block|{
return|return
name|hs2Instance
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|HiveServer2Instance
argument_list|>
name|getAll
parameter_list|()
block|{
return|return
name|getAllInternal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveServer2Instance
name|getInstance
parameter_list|(
specifier|final
name|String
name|instanceId
parameter_list|)
block|{
for|for
control|(
name|HiveServer2Instance
name|hs2Instance
range|:
name|getAll
argument_list|()
control|)
block|{
if|if
condition|(
name|hs2Instance
operator|.
name|getWorkerIdentity
argument_list|()
operator|.
name|equals
argument_list|(
name|instanceId
argument_list|)
condition|)
block|{
return|return
name|hs2Instance
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|HiveServer2Instance
argument_list|>
name|getByHost
parameter_list|(
specifier|final
name|String
name|host
parameter_list|)
block|{
return|return
name|getByHostInternal
argument_list|(
name|host
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|sizeInternal
argument_list|()
return|;
block|}
comment|/**    * If leadership related notifications is desired, use this method to register leader latch listener.    *    * @param latchListener   - listener    * @param executorService - event handler executor service    */
name|void
name|registerLeaderLatchListener
parameter_list|(
specifier|final
name|LeaderLatchListener
name|latchListener
parameter_list|,
specifier|final
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|registeredListeners
operator|.
name|put
argument_list|(
name|latchListener
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
if|if
condition|(
name|executorService
operator|==
literal|null
condition|)
block|{
name|leaderLatch
operator|.
name|addListener
argument_list|(
name|latchListener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|leaderLatch
operator|.
name|addListener
argument_list|(
name|latchListener
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfsToPublish
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confsToPublish
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Hostname
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
comment|// Web port
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_PORT
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_PORT
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
comment|// Hostname:port
name|confsToPublish
operator|.
name|put
argument_list|(
name|INSTANCE_URI_CONFIG
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|INSTANCE_URI_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|confsToPublish
operator|.
name|put
argument_list|(
name|UNIQUE_IDENTIFIER
argument_list|,
name|uniqueId
argument_list|)
expr_stmt|;
comment|// Transport mode
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transport specific confs
if|if
condition|(
name|HiveServer2
operator|.
name|isHTTPTransportMode
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PORT
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PORT
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PATH
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PATH
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_PORT
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_PORT
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_SASL_QOP
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_SASL_QOP
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Auth specific confs
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveServer2
operator|.
name|isKerberosAuthMode
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_PRINCIPAL
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_PRINCIPAL
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// SSL conf
name|confsToPublish
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|confsToPublish
return|;
block|}
specifier|private
name|ServiceRecord
name|getNewServiceRecord
parameter_list|()
block|{
name|ServiceRecord
name|srv
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confsToPublish
init|=
name|getConfsToPublish
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|confsToPublish
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|srv
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|srv
return|;
block|}
block|}
end_class

end_unit

