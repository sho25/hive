begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
operator|.
name|LogInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|CLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftBinaryCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftHttpCLIService
import|;
end_import

begin_comment
comment|/**  * HiveServer2.  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveServer2
extends|extends
name|CompositeService
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveServer2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CLIService
name|cliService
decl_stmt|;
specifier|private
name|ThriftCLIService
name|thriftCLIService
decl_stmt|;
specifier|public
name|HiveServer2
parameter_list|()
block|{
name|super
argument_list|(
literal|"HiveServer2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|cliService
operator|=
operator|new
name|CLIService
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|cliService
argument_list|)
expr_stmt|;
name|String
name|transportMode
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_SERVER2_TRANSPORT_MODE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|transportMode
operator|==
literal|null
condition|)
block|{
name|transportMode
operator|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transportMode
operator|!=
literal|null
operator|&&
operator|(
name|transportMode
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
operator|)
condition|)
block|{
name|thriftCLIService
operator|=
operator|new
name|ThriftHttpCLIService
argument_list|(
name|cliService
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|thriftCLIService
operator|=
operator|new
name|ThriftBinaryCLIService
argument_list|(
name|cliService
argument_list|)
expr_stmt|;
block|}
name|addService
argument_list|(
name|thriftCLIService
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startHiveServer2
parameter_list|()
throws|throws
name|Throwable
block|{
name|long
name|attempts
init|=
literal|0
decl_stmt|,
name|maxAttempts
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|maxAttempts
operator|=
name|hiveConf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_MAX_START_ATTEMPTS
argument_list|)
expr_stmt|;
name|HiveServer2
name|server
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|=
operator|new
name|HiveServer2
argument_list|()
expr_stmt|;
name|server
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
operator|++
name|attempts
operator|>=
name|maxAttempts
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Max start attempts "
operator|+
name|maxAttempts
operator|+
literal|" exhausted"
argument_list|,
name|throwable
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error starting HiveServer2 on attempt "
operator|+
name|attempts
operator|+
literal|", will retry in 60 seconds"
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception caught when calling stop of HiveServer2 before"
operator|+
literal|" retrying start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|60L
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|ServerOptionsProcessor
name|oproc
init|=
operator|new
name|ServerOptionsProcessor
argument_list|(
literal|"hiveserver2"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oproc
operator|.
name|process
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error starting HiveServer2 with given arguments"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//NOTE: It is critical to do this here so that log4j is reinitialized
comment|// before any of the other core hive classes are loaded
name|String
name|initLog4jMessage
init|=
name|LogUtils
operator|.
name|initHiveLog4j
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|initLog4jMessage
argument_list|)
expr_stmt|;
name|HiveStringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|HiveServer2
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|//log debug message from "oproc" after log4j initialize properly
name|LOG
operator|.
name|debug
argument_list|(
name|oproc
operator|.
name|getDebugMessage
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|startHiveServer2
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogInitializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error initializing log: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error starting HiveServer2"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

