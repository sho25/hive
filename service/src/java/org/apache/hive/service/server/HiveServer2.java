begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|concurrent
operator|.
name|BasicThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|ACLProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|BackgroundCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|CuratorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|CuratorEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|nodes
operator|.
name|PersistentEphemeralNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|ExponentialBackoffRetry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JvmPauseMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
operator|.
name|LogInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
operator|.
name|CommonCliOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|coordinator
operator|.
name|LlapCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
operator|.
name|CachedStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSessionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezSessionPoolManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|WorkloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveMaterializedViewsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|ClearDanglingScratchDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|ZooKeeperHiveHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
operator|.
name|LlapServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|CLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftBinaryCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftHttpCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|servlet
operator|.
name|QueryProfileServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Perms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * HiveServer2.  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveServer2
extends|extends
name|CompositeService
block|{
specifier|private
specifier|static
name|CountDownLatch
name|deleteSignal
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveServer2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CLIService
name|cliService
decl_stmt|;
specifier|private
name|ThriftCLIService
name|thriftCLIService
decl_stmt|;
specifier|private
name|PersistentEphemeralNode
name|znode
decl_stmt|;
specifier|private
name|String
name|znodePath
decl_stmt|;
specifier|private
name|CuratorFramework
name|zooKeeperClient
decl_stmt|;
specifier|private
name|boolean
name|deregisteredWithZooKeeper
init|=
literal|false
decl_stmt|;
comment|// Set to true only when deregistration happens
specifier|private
name|HttpServer
name|webServer
decl_stmt|;
comment|// Web UI
specifier|private
name|WorkloadManager
name|wm
decl_stmt|;
specifier|public
name|HiveServer2
parameter_list|()
block|{
name|super
argument_list|(
name|HiveServer2
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setLoadHiveServer2Config
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
comment|//Initialize metrics first, as some metrics are for initialization stuff.
try|try
block|{
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_METRICS_ENABLED
argument_list|)
condition|)
block|{
name|MetricsFactory
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not initiate the HiveServer2 Metrics system.  Metrics may not be reported."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Initialize cachedstore with background prewarm. The prewarm will only start if configured.
name|CachedStore
operator|.
name|initSharedCacheAsync
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|cliService
operator|=
operator|new
name|CLIService
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|cliService
argument_list|)
expr_stmt|;
specifier|final
name|HiveServer2
name|hiveServer2
init|=
name|this
decl_stmt|;
name|Runnable
name|oomHook
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|hiveServer2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|isHTTPTransportMode
argument_list|(
name|hiveConf
argument_list|)
condition|)
block|{
name|thriftCLIService
operator|=
operator|new
name|ThriftHttpCLIService
argument_list|(
name|cliService
argument_list|,
name|oomHook
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|thriftCLIService
operator|=
operator|new
name|ThriftBinaryCLIService
argument_list|(
name|cliService
argument_list|,
name|oomHook
argument_list|)
expr_stmt|;
block|}
name|addService
argument_list|(
name|thriftCLIService
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// Set host name in hiveConf
try|try
block|{
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
operator|.
name|varname
argument_list|,
name|getServerHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unable to intitialize HiveServer2"
argument_list|,
name|t
argument_list|)
throw|;
block|}
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|LLAP_HS2_ENABLE_COORDINATOR
argument_list|)
condition|)
block|{
comment|// See method comment.
try|try
block|{
name|LlapCoordinator
operator|.
name|initializeInstance
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Trigger the creation of LLAP registry client, if in use. Clients may be using a different
comment|// cluster than the default one, but at least for the default case we'd have it covered.
name|String
name|llapHosts
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|llapHosts
operator|!=
literal|null
operator|&&
operator|!
name|llapHosts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LlapRegistryService
operator|.
name|getClient
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
comment|// Initialize workload management.
name|String
name|wmQueue
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_INTERACTIVE_QUEUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|wmQueue
operator|!=
literal|null
operator|&&
operator|!
name|wmQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wm
operator|=
name|WorkloadManager
operator|.
name|create
argument_list|(
name|wmQueue
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wm
operator|=
literal|null
expr_stmt|;
block|}
comment|// Create views registry
try|try
block|{
name|Hive
name|sessionHive
init|=
name|Hive
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|HiveMaterializedViewsRegistry
operator|.
name|get
argument_list|()
operator|.
name|init
argument_list|(
name|sessionHive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to get metastore connection"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Setup web UI
try|try
block|{
name|int
name|webUIPort
init|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_PORT
argument_list|)
decl_stmt|;
comment|// We disable web UI in tests unless the test is explicitly setting a
comment|// unique web ui port so that we don't mess up ptests.
name|boolean
name|uiDisabledInTest
init|=
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
operator|&&
operator|(
name|webUIPort
operator|==
name|Integer
operator|.
name|valueOf
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_PORT
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|uiDisabledInTest
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Web UI is disabled in test mode since webui port was not specified"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|webUIPort
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Web UI is disabled since port is set to "
operator|+
name|webUIPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Web UI on port "
operator|+
name|webUIPort
argument_list|)
expr_stmt|;
name|HttpServer
operator|.
name|Builder
name|builder
init|=
operator|new
name|HttpServer
operator|.
name|Builder
argument_list|(
literal|"hiveserver2"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPort
argument_list|(
name|webUIPort
argument_list|)
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHost
argument_list|(
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_BIND_HOST
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMaxThreads
argument_list|(
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_MAX_THREADS
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAdmins
argument_list|(
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|USERS_IN_ADMIN_ROLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// SessionManager is initialized
name|builder
operator|.
name|setContextAttribute
argument_list|(
literal|"hive.sm"
argument_list|,
name|cliService
operator|.
name|getSessionManager
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"startcode"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_USE_SSL
argument_list|)
condition|)
block|{
name|String
name|keyStorePath
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isBlank
argument_list|(
name|keyStorePath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PATH
operator|.
name|varname
operator|+
literal|" Not configured for SSL connection"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|setKeyStorePassword
argument_list|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getPassword
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PASSWORD
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setKeyStorePath
argument_list|(
name|keyStorePath
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUseSSL
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_USE_SPNEGO
argument_list|)
condition|)
block|{
name|String
name|spnegoPrincipal
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_SPNEGO_PRINCIPAL
argument_list|)
decl_stmt|;
name|String
name|spnegoKeytab
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_SPNEGO_KEYTAB
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isBlank
argument_list|(
name|spnegoPrincipal
argument_list|)
operator|||
name|Strings
operator|.
name|isBlank
argument_list|(
name|spnegoKeytab
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_SPNEGO_PRINCIPAL
operator|.
name|varname
operator|+
literal|"/"
operator|+
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_SPNEGO_KEYTAB
operator|.
name|varname
operator|+
literal|" Not configured for SPNEGO authentication"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|setSPNEGOPrincipal
argument_list|(
name|spnegoPrincipal
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSPNEGOKeytab
argument_list|(
name|spnegoKeytab
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUseSPNEGO
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addServlet
argument_list|(
literal|"llap"
argument_list|,
name|LlapServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setContextRootRewriteTarget
argument_list|(
literal|"/hiveserver2.jsp"
argument_list|)
expr_stmt|;
name|webServer
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|webServer
operator|.
name|addServlet
argument_list|(
literal|"query_page"
argument_list|,
literal|"/query_page"
argument_list|,
name|QueryProfileServlet
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
comment|// Add a shutdown hook for catching SIGTERM& SIGINT
name|ShutdownHookManager
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|hiveServer2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isHTTPTransportMode
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|String
name|transportMode
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_SERVER2_TRANSPORT_MODE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|transportMode
operator|==
literal|null
condition|)
block|{
name|transportMode
operator|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transportMode
operator|!=
literal|null
operator|&&
operator|(
name|transportMode
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isKerberosAuthMode
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|String
name|authMode
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|authMode
operator|!=
literal|null
operator|&&
operator|(
name|authMode
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"KERBEROS"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * ACLProvider for providing appropriate ACLs to CuratorFrameworkFactory    */
specifier|private
specifier|final
name|ACLProvider
name|zooKeeperAclProvider
init|=
operator|new
name|ACLProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ACL
argument_list|>
name|getDefaultAcl
parameter_list|()
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|nodeAcls
init|=
operator|new
name|ArrayList
argument_list|<
name|ACL
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// Read all to the world
name|nodeAcls
operator|.
name|addAll
argument_list|(
name|Ids
operator|.
name|READ_ACL_UNSAFE
argument_list|)
expr_stmt|;
comment|// Create/Delete/Write/Admin to the authenticated user
name|nodeAcls
operator|.
name|add
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
name|Ids
operator|.
name|AUTH_IDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ACLs for znodes on a non-kerberized cluster
comment|// Create/Read/Delete/Write/Admin to the world
name|nodeAcls
operator|.
name|addAll
argument_list|(
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeAcls
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ACL
argument_list|>
name|getAclForPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|getDefaultAcl
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Adds a server instance to ZooKeeper as a znode.    *    * @param hiveConf    * @throws Exception    */
specifier|private
name|void
name|addServerInstanceToZooKeeper
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|zooKeeperEnsemble
init|=
name|ZooKeeperHiveHelper
operator|.
name|getQuorumServers
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|String
name|rootNamespace
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ZOOKEEPER_NAMESPACE
argument_list|)
decl_stmt|;
name|String
name|instanceURI
init|=
name|getServerInstanceURI
argument_list|()
decl_stmt|;
name|setUpZooKeeperAuth
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|int
name|sessionTimeout
init|=
operator|(
name|int
operator|)
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_SESSION_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|int
name|baseSleepTime
init|=
operator|(
name|int
operator|)
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_CONNECTION_BASESLEEPTIME
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|int
name|maxRetries
init|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_CONNECTION_MAX_RETRIES
argument_list|)
decl_stmt|;
comment|// Create a CuratorFramework instance to be used as the ZooKeeper client
comment|// Use the zooKeeperAclProvider to create appropriate ACLs
name|zooKeeperClient
operator|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|zooKeeperEnsemble
argument_list|)
operator|.
name|sessionTimeoutMs
argument_list|(
name|sessionTimeout
argument_list|)
operator|.
name|aclProvider
argument_list|(
name|zooKeeperAclProvider
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|ExponentialBackoffRetry
argument_list|(
name|baseSleepTime
argument_list|,
name|maxRetries
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|zooKeeperClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create the parent znodes recursively; ignore if the parent already exists.
try|try
block|{
name|zooKeeperClient
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|withMode
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
operator|.
name|forPath
argument_list|(
name|ZooKeeperHiveHelper
operator|.
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|rootNamespace
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created the root name space: "
operator|+
name|rootNamespace
operator|+
literal|" on ZooKeeper for HiveServer2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create HiveServer2 namespace: "
operator|+
name|rootNamespace
operator|+
literal|" on ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// Create a znode under the rootNamespace parent for this instance of the server
comment|// Znode name: serverUri=host:port;version=versionInfo;sequence=sequenceNumber
try|try
block|{
name|String
name|pathPrefix
init|=
name|ZooKeeperHiveHelper
operator|.
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|rootNamespace
operator|+
name|ZooKeeperHiveHelper
operator|.
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
literal|"serverUri="
operator|+
name|instanceURI
operator|+
literal|";"
operator|+
literal|"version="
operator|+
name|HiveVersionInfo
operator|.
name|getVersion
argument_list|()
operator|+
literal|";"
operator|+
literal|"sequence="
decl_stmt|;
name|String
name|znodeData
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ZOOKEEPER_PUBLISH_CONFIGS
argument_list|)
condition|)
block|{
comment|// HiveServer2 configs that this instance will publish to ZooKeeper,
comment|// so that the clients can read these and configure themselves properly.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confsToPublish
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addConfsToPublish
argument_list|(
name|hiveConf
argument_list|,
name|confsToPublish
argument_list|)
expr_stmt|;
comment|// Publish configs for this instance as the data on the node
name|znodeData
operator|=
name|Joiner
operator|.
name|on
argument_list|(
literal|';'
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|"="
argument_list|)
operator|.
name|join
argument_list|(
name|confsToPublish
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|znodeData
operator|=
name|instanceURI
expr_stmt|;
block|}
name|byte
index|[]
name|znodeDataUTF8
init|=
name|znodeData
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|znode
operator|=
operator|new
name|PersistentEphemeralNode
argument_list|(
name|zooKeeperClient
argument_list|,
name|PersistentEphemeralNode
operator|.
name|Mode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|,
name|pathPrefix
argument_list|,
name|znodeDataUTF8
argument_list|)
expr_stmt|;
name|znode
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// We'll wait for 120s for node creation
name|long
name|znodeCreationTimeout
init|=
literal|120
decl_stmt|;
if|if
condition|(
operator|!
name|znode
operator|.
name|waitForInitialCreate
argument_list|(
name|znodeCreationTimeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Max znode creation wait time: "
operator|+
name|znodeCreationTimeout
operator|+
literal|"s exhausted"
argument_list|)
throw|;
block|}
name|setDeregisteredWithZooKeeper
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|znodePath
operator|=
name|znode
operator|.
name|getActualPath
argument_list|()
expr_stmt|;
comment|// Set a watch on the znode
if|if
condition|(
name|zooKeeperClient
operator|.
name|checkExists
argument_list|()
operator|.
name|usingWatcher
argument_list|(
operator|new
name|DeRegisterWatcher
argument_list|()
argument_list|)
operator|.
name|forPath
argument_list|(
name|znodePath
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// No node exists, throw exception
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to create znode for this HiveServer2 instance on ZooKeeper."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a znode on ZooKeeper for HiveServer2 uri: "
operator|+
name|instanceURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create a znode for this server instance"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|znode
operator|!=
literal|null
condition|)
block|{
name|znode
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
comment|/**    * Add conf keys, values that HiveServer2 will publish to ZooKeeper.    * @param hiveConf    */
specifier|private
name|void
name|addConfsToPublish
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confsToPublish
parameter_list|)
block|{
comment|// Hostname
name|confsToPublish
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
operator|.
name|varname
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transport mode
name|confsToPublish
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transport specific confs
if|if
condition|(
name|isHTTPTransportMode
argument_list|(
name|hiveConf
argument_list|)
condition|)
block|{
name|confsToPublish
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PORT
operator|.
name|varname
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PORT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|confsToPublish
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PATH
operator|.
name|varname
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|confsToPublish
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_PORT
operator|.
name|varname
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_PORT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|confsToPublish
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_SASL_QOP
operator|.
name|varname
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_SASL_QOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Auth specific confs
name|confsToPublish
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
operator|.
name|varname
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isKerberosAuthMode
argument_list|(
name|hiveConf
argument_list|)
condition|)
block|{
name|confsToPublish
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_PRINCIPAL
operator|.
name|varname
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_PRINCIPAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// SSL conf
name|confsToPublish
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
operator|.
name|varname
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * For a kerberized cluster, we dynamically set up the client's JAAS conf.    *    * @param hiveConf    * @return    * @throws Exception    */
specifier|private
name|void
name|setUpZooKeeperAuth
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|String
name|principal
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_PRINCIPAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HiveServer2 Kerberos principal is empty"
argument_list|)
throw|;
block|}
name|String
name|keyTabFile
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_KEYTAB
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyTabFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HiveServer2 Kerberos keytab is empty"
argument_list|)
throw|;
block|}
comment|// Install the JAAS Configuration for the runtime
name|Utils
operator|.
name|setZookeeperClientKerberosJaasConfig
argument_list|(
name|principal
argument_list|,
name|keyTabFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The watcher class which sets the de-register flag when the znode corresponding to this server    * instance is deleted. Additionally, it shuts down the server if there are no more active client    * sessions at the time of receiving a 'NodeDeleted' notification from ZooKeeper.    */
specifier|private
class|class
name|DeRegisterWatcher
implements|implements
name|Watcher
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Watcher
operator|.
name|Event
operator|.
name|EventType
operator|.
name|NodeDeleted
argument_list|)
condition|)
block|{
if|if
condition|(
name|znode
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|znode
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"This HiveServer2 instance is now de-registered from ZooKeeper. "
operator|+
literal|"The server will be shut down after the last client sesssion completes."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close the persistent ephemeral znode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HiveServer2
operator|.
name|this
operator|.
name|setDeregisteredWithZooKeeper
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// If there are no more active client sessions, stop the server
if|if
condition|(
name|cliService
operator|.
name|getSessionManager
argument_list|()
operator|.
name|getOpenSessionCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"This instance of HiveServer2 has been removed from the list of server "
operator|+
literal|"instances available for dynamic service discovery. "
operator|+
literal|"The last client session has ended - will shutdown now."
argument_list|)
expr_stmt|;
name|HiveServer2
operator|.
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|removeServerInstanceFromZooKeeper
parameter_list|()
throws|throws
name|Exception
block|{
name|setDeregisteredWithZooKeeper
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|znode
operator|!=
literal|null
condition|)
block|{
name|znode
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|zooKeeperClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Server instance removed from ZooKeeper."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDeregisteredWithZooKeeper
parameter_list|()
block|{
return|return
name|deregisteredWithZooKeeper
return|;
block|}
specifier|private
name|void
name|setDeregisteredWithZooKeeper
parameter_list|(
name|boolean
name|deregisteredWithZooKeeper
parameter_list|)
block|{
name|this
operator|.
name|deregisteredWithZooKeeper
operator|=
name|deregisteredWithZooKeeper
expr_stmt|;
block|}
specifier|private
name|String
name|getServerInstanceURI
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|(
name|thriftCLIService
operator|==
literal|null
operator|)
operator|||
operator|(
name|thriftCLIService
operator|.
name|getServerIPAddress
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to get the server address; it hasn't been initialized yet."
argument_list|)
throw|;
block|}
return|return
name|thriftCLIService
operator|.
name|getServerIPAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|thriftCLIService
operator|.
name|getPortNumber
argument_list|()
return|;
block|}
specifier|public
name|String
name|getServerHost
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|(
name|thriftCLIService
operator|==
literal|null
operator|)
operator|||
operator|(
name|thriftCLIService
operator|.
name|getServerIPAddress
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to get the server address; it hasn't been initialized yet."
argument_list|)
throw|;
block|}
return|return
name|thriftCLIService
operator|.
name|getServerIPAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// If we're supporting dynamic service discovery, we'll add the service uri for this
comment|// HiveServer2 instance to Zookeeper as a znode.
name|HiveConf
name|hiveConf
init|=
name|this
operator|.
name|getHiveConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY
argument_list|)
condition|)
block|{
try|try
block|{
name|addServerInstanceToZooKeeper
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error adding this HiveServer2 instance to ZooKeeper: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|webServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|webServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Web UI has started on port "
operator|+
name|webServer
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting Web UI: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down HiveServer2"
argument_list|)
expr_stmt|;
name|HiveConf
name|hiveConf
init|=
name|this
operator|.
name|getHiveConf
argument_list|()
decl_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|webServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|webServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Web UI has stopped"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error stopping Web UI: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Shutdown Metrics
if|if
condition|(
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|MetricsFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error in Metrics deinit: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove this server instance from ZooKeeper if dynamic service discovery is set
if|if
condition|(
name|hiveConf
operator|!=
literal|null
operator|&&
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY
argument_list|)
condition|)
block|{
try|try
block|{
name|removeServerInstanceFromZooKeeper
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error removing znode for this HiveServer2 instance from ZooKeeper."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// There should already be an instance of the session pool manager.
comment|// If not, ignoring is fine while stopping HiveServer2.
if|if
condition|(
name|hiveConf
operator|!=
literal|null
operator|&&
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_INITIALIZE_DEFAULT_SESSIONS
argument_list|)
condition|)
block|{
try|try
block|{
name|TezSessionPoolManager
operator|.
name|getInstance
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Tez session pool manager stop had an error during stop of HiveServer2. "
operator|+
literal|"Shutting down HiveServer2 anyway."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wm
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|wm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Workload manager stop had an error during stop of HiveServer2. "
operator|+
literal|"Shutting down HiveServer2 anyway."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hiveConf
operator|!=
literal|null
operator|&&
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"spark"
argument_list|)
condition|)
block|{
try|try
block|{
name|SparkSessionManagerImpl
operator|.
name|getInstance
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Spark session pool manager failed to stop during HiveServer2 shutdown."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|void
name|scheduleClearDanglingScratchDir
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|int
name|initialWaitInSec
parameter_list|)
block|{
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_CLEAR_DANGLING_SCRATCH_DIR
argument_list|)
condition|)
block|{
name|ScheduledExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|BasicThreadFactory
operator|.
name|Builder
argument_list|()
operator|.
name|namingPattern
argument_list|(
literal|"cleardanglingscratchdir-%d"
argument_list|)
operator|.
name|daemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|ClearDanglingScratchDir
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
argument_list|,
name|initialWaitInSec
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SERVER2_CLEAR_DANGLING_SCRATCH_DIR_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|startHiveServer2
parameter_list|()
throws|throws
name|Throwable
block|{
name|long
name|attempts
init|=
literal|0
decl_stmt|,
name|maxAttempts
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting HiveServer2"
argument_list|)
expr_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|maxAttempts
operator|=
name|hiveConf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_MAX_START_ATTEMPTS
argument_list|)
expr_stmt|;
name|long
name|retrySleepIntervalMs
init|=
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SLEEP_INTERVAL_BETWEEN_START_ATTEMPTS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|HiveServer2
name|server
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Initialize the pool before we start the server; don't start yet.
name|TezSessionPoolManager
name|sessionPool
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_INITIALIZE_DEFAULT_SESSIONS
argument_list|)
condition|)
block|{
name|sessionPool
operator|=
name|TezSessionPoolManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|sessionPool
operator|.
name|setupPool
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
comment|// Cleanup the scratch dir before starting
name|ServerUtils
operator|.
name|cleanUpScratchDir
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// Schedule task to cleanup dangling scratch dir periodically,
comment|// initial wait for a random time between 0-10 min to
comment|// avoid intial spike when using multiple HS2
name|scheduleClearDanglingScratchDir
argument_list|(
name|hiveConf
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|600
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|HiveServer2
argument_list|()
expr_stmt|;
name|server
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|JvmPauseMonitor
name|pauseMonitor
init|=
operator|new
name|JvmPauseMonitor
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|pauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not initiate the JvmPauseMonitor thread."
operator|+
literal|" GCs and Pauses may not be "
operator|+
literal|"warned upon."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sessionPool
operator|!=
literal|null
condition|)
block|{
name|sessionPool
operator|.
name|startPool
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|.
name|wm
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"spark"
argument_list|)
condition|)
block|{
name|SparkSessionManagerImpl
operator|.
name|getInstance
argument_list|()
operator|.
name|setup
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception caught when calling stop of HiveServer2 before retrying start"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|++
name|attempts
operator|>=
name|maxAttempts
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Max start attempts "
operator|+
name|maxAttempts
operator|+
literal|" exhausted"
argument_list|,
name|throwable
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error starting HiveServer2 on attempt "
operator|+
name|attempts
operator|+
literal|", will retry in "
operator|+
name|retrySleepIntervalMs
operator|+
literal|"ms"
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|retrySleepIntervalMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Remove all znodes corresponding to the given version number from ZooKeeper    *    * @param versionNumber    * @throws Exception    */
specifier|static
name|void
name|deleteServerInstancesFromZooKeeper
parameter_list|(
name|String
name|versionNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|String
name|zooKeeperEnsemble
init|=
name|ZooKeeperHiveHelper
operator|.
name|getQuorumServers
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|String
name|rootNamespace
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ZOOKEEPER_NAMESPACE
argument_list|)
decl_stmt|;
name|int
name|baseSleepTime
init|=
operator|(
name|int
operator|)
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_CONNECTION_BASESLEEPTIME
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|int
name|maxRetries
init|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_CONNECTION_MAX_RETRIES
argument_list|)
decl_stmt|;
name|CuratorFramework
name|zooKeeperClient
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|zooKeeperEnsemble
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|ExponentialBackoffRetry
argument_list|(
name|baseSleepTime
argument_list|,
name|maxRetries
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|zooKeeperClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|znodePaths
init|=
name|zooKeeperClient
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|ZooKeeperHiveHelper
operator|.
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|rootNamespace
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|znodePathsUpdated
decl_stmt|;
comment|// Now for each path that is for the given versionNumber, delete the znode from ZooKeeper
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|znodePaths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|znodePath
init|=
name|znodePaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|deleteSignal
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|znodePath
operator|.
name|contains
argument_list|(
literal|"version="
operator|+
name|versionNumber
operator|+
literal|";"
argument_list|)
condition|)
block|{
name|String
name|fullZnodePath
init|=
name|ZooKeeperHiveHelper
operator|.
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|rootNamespace
operator|+
name|ZooKeeperHiveHelper
operator|.
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|znodePath
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Will attempt to remove the znode: "
operator|+
name|fullZnodePath
operator|+
literal|" from ZooKeeper"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Will attempt to remove the znode: "
operator|+
name|fullZnodePath
operator|+
literal|" from ZooKeeper"
argument_list|)
expr_stmt|;
name|zooKeeperClient
operator|.
name|delete
argument_list|()
operator|.
name|guaranteed
argument_list|()
operator|.
name|inBackground
argument_list|(
operator|new
name|DeleteCallBack
argument_list|()
argument_list|)
operator|.
name|forPath
argument_list|(
name|fullZnodePath
argument_list|)
expr_stmt|;
comment|// Wait for the delete to complete
name|deleteSignal
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Get the updated path list
name|znodePathsUpdated
operator|=
name|zooKeeperClient
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|ZooKeeperHiveHelper
operator|.
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|rootNamespace
argument_list|)
expr_stmt|;
comment|// Gives a list of any new paths that may have been created to maintain the persistent ephemeral node
name|znodePathsUpdated
operator|.
name|removeAll
argument_list|(
name|znodePaths
argument_list|)
expr_stmt|;
comment|// Add the new paths to the znodes list. We'll try for their removal as well.
name|znodePaths
operator|.
name|addAll
argument_list|(
name|znodePathsUpdated
argument_list|)
expr_stmt|;
block|}
block|}
name|zooKeeperClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|DeleteCallBack
implements|implements
name|BackgroundCallback
block|{
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|CuratorFramework
name|zooKeeperClient
parameter_list|,
name|CuratorEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|CuratorEventType
operator|.
name|DELETE
condition|)
block|{
name|deleteSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|HiveConf
operator|.
name|setLoadHiveServer2Config
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|ServerOptionsProcessor
name|oproc
init|=
operator|new
name|ServerOptionsProcessor
argument_list|(
literal|"hiveserver2"
argument_list|)
decl_stmt|;
name|ServerOptionsProcessorResponse
name|oprocResponse
init|=
name|oproc
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
comment|// NOTE: It is critical to do this here so that log4j is reinitialized
comment|// before any of the other core hive classes are loaded
name|String
name|initLog4jMessage
init|=
name|LogUtils
operator|.
name|initHiveLog4j
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|initLog4jMessage
argument_list|)
expr_stmt|;
name|HiveStringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|HiveServer2
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// Logger debug message from "oproc" after log4j initialize properly
name|LOG
operator|.
name|debug
argument_list|(
name|oproc
operator|.
name|getDebugMessage
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call the executor which will execute the appropriate command based on the parsed options
name|oprocResponse
operator|.
name|getServerOptionsExecutor
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogInitializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error initializing log: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * ServerOptionsProcessor.    * Process arguments given to HiveServer2 (-hiveconf property=value)    * Set properties in System properties    * Create an appropriate response object,    * which has executor to execute the appropriate command based on the parsed options.    */
specifier|static
class|class
name|ServerOptionsProcessor
block|{
specifier|private
specifier|final
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
name|commandLine
decl_stmt|;
specifier|private
specifier|final
name|String
name|serverName
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|debugMessage
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
name|ServerOptionsProcessor
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
comment|// -hiveconf x=y
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// -deregister<versionNumber>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArgs
argument_list|(
literal|1
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"versionNumber"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"deregister"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Deregister all instances of given version from dynamic service discovery"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"H"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help information"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ServerOptionsProcessorResponse
name|parse
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
try|try
block|{
name|commandLine
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|argv
argument_list|)
expr_stmt|;
comment|// Process --hiveconf
comment|// Get hiveconf param values and set the System property values
name|Properties
name|confProps
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|confProps
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
comment|// save logging message for log4j output latter after log4j initialize properly
name|debugMessage
operator|.
name|append
argument_list|(
literal|"Setting "
operator|+
name|propKey
operator|+
literal|"="
operator|+
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|propKey
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"hive.root.logger"
argument_list|)
condition|)
block|{
name|CommonCliOptions
operator|.
name|splitAndSetLogger
argument_list|(
name|propKey
argument_list|,
name|confProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Process --help
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'H'
argument_list|)
condition|)
block|{
return|return
operator|new
name|ServerOptionsProcessorResponse
argument_list|(
operator|new
name|HelpOptionExecutor
argument_list|(
name|serverName
argument_list|,
name|options
argument_list|)
argument_list|)
return|;
block|}
comment|// Process --deregister
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"deregister"
argument_list|)
condition|)
block|{
return|return
operator|new
name|ServerOptionsProcessorResponse
argument_list|(
operator|new
name|DeregisterOptionExecutor
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"deregister"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// Error out& exit - we were not able to parse the args successfully
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error starting HiveServer2 with given arguments: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Default executor, when no option is specified
return|return
operator|new
name|ServerOptionsProcessorResponse
argument_list|(
operator|new
name|StartOptionExecutor
argument_list|()
argument_list|)
return|;
block|}
name|StringBuilder
name|getDebugMessage
parameter_list|()
block|{
return|return
name|debugMessage
return|;
block|}
block|}
comment|/**    * The response sent back from {@link ServerOptionsProcessor#parse(String[])}    */
specifier|static
class|class
name|ServerOptionsProcessorResponse
block|{
specifier|private
specifier|final
name|ServerOptionsExecutor
name|serverOptionsExecutor
decl_stmt|;
name|ServerOptionsProcessorResponse
parameter_list|(
name|ServerOptionsExecutor
name|serverOptionsExecutor
parameter_list|)
block|{
name|this
operator|.
name|serverOptionsExecutor
operator|=
name|serverOptionsExecutor
expr_stmt|;
block|}
name|ServerOptionsExecutor
name|getServerOptionsExecutor
parameter_list|()
block|{
return|return
name|serverOptionsExecutor
return|;
block|}
block|}
comment|/**    * The executor interface for running the appropriate HiveServer2 command based on parsed options    */
specifier|static
interface|interface
name|ServerOptionsExecutor
block|{
specifier|public
name|void
name|execute
parameter_list|()
function_decl|;
block|}
comment|/**    * HelpOptionExecutor: executes the --help option by printing out the usage    */
specifier|static
class|class
name|HelpOptionExecutor
implements|implements
name|ServerOptionsExecutor
block|{
specifier|private
specifier|final
name|Options
name|options
decl_stmt|;
specifier|private
specifier|final
name|String
name|serverName
decl_stmt|;
name|HelpOptionExecutor
parameter_list|(
name|String
name|serverName
parameter_list|,
name|Options
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
name|serverName
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * StartOptionExecutor: starts HiveServer2.    * This is the default executor, when no option is specified.    */
specifier|static
class|class
name|StartOptionExecutor
implements|implements
name|ServerOptionsExecutor
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
try|try
block|{
name|startHiveServer2
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting HiveServer2"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * DeregisterOptionExecutor: executes the --deregister option by deregistering all HiveServer2    * instances from ZooKeeper of a specific version.    */
specifier|static
class|class
name|DeregisterOptionExecutor
implements|implements
name|ServerOptionsExecutor
block|{
specifier|private
specifier|final
name|String
name|versionNumber
decl_stmt|;
name|DeregisterOptionExecutor
parameter_list|(
name|String
name|versionNumber
parameter_list|)
block|{
name|this
operator|.
name|versionNumber
operator|=
name|versionNumber
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
try|try
block|{
name|deleteServerInstancesFromZooKeeper
argument_list|(
name|versionNumber
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error deregistering HiveServer2 instances for version: "
operator|+
name|versionNumber
operator|+
literal|" from ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error deregistering HiveServer2 instances for version: "
operator|+
name|versionNumber
operator|+
literal|" from ZooKeeper."
operator|+
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

