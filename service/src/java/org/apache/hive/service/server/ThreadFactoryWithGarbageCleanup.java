begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStore
import|;
end_import

begin_comment
comment|/**  * A ThreadFactory for constructing new HiveServer2 threads that lets you plug  * in custom cleanup code to be called before this thread is GC-ed.  * Currently cleans up the following:  * 1. ThreadLocal RawStore object:  * In case of an embedded metastore, HiveServer2 threads (foreground& background)  * end up caching a ThreadLocal RawStore object. The ThreadLocal RawStore object has  * an instance of PersistenceManagerFactory& PersistenceManager.  * The PersistenceManagerFactory keeps a cache of PersistenceManager objects,  * which are only removed when PersistenceManager#close method is called.  * HiveServer2 uses ExecutorService for managing thread pools for foreground& background threads.  * ExecutorService unfortunately does not provide any hooks to be called,  * when a thread from the pool is terminated.  * As a solution, we're using this ThreadFactory to keep a cache of RawStore objects per thread.  * And we are doing clean shutdown in the finalizer for each thread.  */
end_comment

begin_class
specifier|public
class|class
name|ThreadFactoryWithGarbageCleanup
implements|implements
name|ThreadFactory
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|RawStore
argument_list|>
name|threadRawStoreMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|RawStore
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|namePrefix
decl_stmt|;
specifier|public
name|ThreadFactoryWithGarbageCleanup
parameter_list|(
name|String
name|threadPoolName
parameter_list|)
block|{
name|namePrefix
operator|=
name|threadPoolName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|newThread
init|=
operator|new
name|ThreadWithGarbageCleanup
argument_list|(
name|runnable
argument_list|)
decl_stmt|;
name|newThread
operator|.
name|setName
argument_list|(
name|namePrefix
operator|+
literal|": Thread-"
operator|+
name|newThread
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newThread
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|RawStore
argument_list|>
name|getThreadRawStoreMap
parameter_list|()
block|{
return|return
name|threadRawStoreMap
return|;
block|}
block|}
end_class

end_unit

