begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
operator|.
name|ZkRegistryBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|HS2ActivePassiveHARegistryClient
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HS2ActivePassiveHARegistryClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HS2ActivePassiveHARegistry
argument_list|>
name|hs2Registries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Helper method to get a HiveServer2HARegistry instance to read from the registry. Only used by clients (JDBC),    * service discovery to connect to active HS2 instance in Active/Passive HA configuration.    *    * @param conf {@link Configuration} instance which contains service registry information.    * @return HiveServer2HARegistry    */
specifier|public
specifier|static
specifier|synchronized
name|HS2ActivePassiveHARegistry
name|getClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|namespace
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ACTIVE_PASSIVE_HA_REGISTRY_NAMESPACE
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|namespace
argument_list|)
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ACTIVE_PASSIVE_HA_REGISTRY_NAMESPACE
operator|.
name|varname
operator|+
literal|" cannot be null or empty"
argument_list|)
expr_stmt|;
name|String
name|nsKey
init|=
name|ZkRegistryBase
operator|.
name|getRootNamespace
argument_list|(
literal|null
argument_list|,
name|namespace
operator|+
literal|"-"
argument_list|)
decl_stmt|;
name|HS2ActivePassiveHARegistry
name|registry
init|=
name|hs2Registries
operator|.
name|get
argument_list|(
name|nsKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|==
literal|null
condition|)
block|{
name|registry
operator|=
name|HS2ActivePassiveHARegistry
operator|.
name|create
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registry
operator|.
name|start
argument_list|()
expr_stmt|;
name|hs2Registries
operator|.
name|put
argument_list|(
name|nsKey
argument_list|,
name|registry
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added registry client to cache with namespace: {}"
argument_list|,
name|nsKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning cached registry client for namespace: {}"
argument_list|,
name|nsKey
argument_list|)
expr_stmt|;
block|}
return|return
name|registry
return|;
block|}
block|}
end_class

end_unit

