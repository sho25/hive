begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
operator|.
name|LogInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
operator|.
name|CommonCliOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|fb_status
import|;
end_import

begin_comment
comment|/**  * Thrift Hive Server Implementation.  */
end_comment

begin_class
specifier|public
class|class
name|HiveServer
extends|extends
name|ThriftHive
block|{
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"1"
decl_stmt|;
comment|/**    * default port on which to start the Hive server    */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_HIVE_SERVER_PORT
init|=
literal|10000
decl_stmt|;
comment|/**    * default minimum number of threads serving the Hive server    */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_WORKER_THREADS
init|=
literal|100
decl_stmt|;
comment|/**    * default maximum number of threads serving the Hive server    */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_WORKER_THREADS
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Handler which implements the Hive Interface This class can be used in lieu    * of the HiveClient class to get an embedded server.    */
specifier|public
specifier|static
class|class
name|HiveServerHandler
extends|extends
name|HiveMetaStore
operator|.
name|HMSHandler
implements|implements
name|HiveInterface
block|{
comment|/**      * Hive server uses org.apache.hadoop.hive.ql.Driver for run() and      * getResults() methods.      * It is the instance of the last Hive query.      */
specifier|private
name|Driver
name|driver
decl_stmt|;
comment|/**      * For processors other than Hive queries (Driver), they output to session.out (a temp file)      * first and the fetchOne/fetchN/fetchAll functions get the output from pipeIn.      */
specifier|private
name|BufferedReader
name|pipeIn
decl_stmt|;
comment|/**      * Flag that indicates whether the last executed command was a Hive query.      */
specifier|private
name|boolean
name|isHiveQuery
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Construct a new handler.      *      * @throws MetaException unable to create metastore      */
specifier|public
name|HiveServerHandler
parameter_list|()
throws|throws
name|MetaException
block|{
name|this
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a new handler with the specified hive configuration.      *      * @param conf caller specified hive configuration      * @throws MetaException unable to create metastore      */
specifier|public
name|HiveServerHandler
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|HiveServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|isHiveQuery
operator|=
literal|false
expr_stmt|;
name|driver
operator|=
literal|null
expr_stmt|;
name|SessionState
name|session
init|=
operator|new
name|SessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|setupSessionIO
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupSessionIO
parameter_list|(
name|SessionState
name|session
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Putting temp output to file "
operator|+
name|session
operator|.
name|getTmpOutputFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|in
operator|=
literal|null
expr_stmt|;
comment|// hive server's session input stream is not used
comment|// open a per-session file in auto-flush mode for writing temp results
name|session
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|session
operator|.
name|getTmpOutputFile
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|// TODO: for hadoop jobs, progress is printed out to session.err,
comment|// we should find a way to feed back job progress to client
name|session
operator|.
name|err
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in creating temp output file "
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|in
operator|=
literal|null
expr_stmt|;
name|session
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|session
operator|.
name|err
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ee
parameter_list|)
block|{
name|ee
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|session
operator|.
name|out
operator|=
literal|null
expr_stmt|;
name|session
operator|.
name|err
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Executes a query.      *      * @param cmd      *          HiveQL query to execute      */
specifier|public
name|void
name|execute
parameter_list|(
name|String
name|cmd
parameter_list|)
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
name|HiveServerHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Running the query: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|SessionState
name|session
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|cmd_trimmed
init|=
name|cmd
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|cmd_trimmed
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|String
name|cmd_1
init|=
name|cmd_trimmed
operator|.
name|substring
argument_list|(
name|tokens
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|String
name|errorMessage
init|=
literal|""
decl_stmt|;
name|String
name|SQLState
init|=
literal|null
decl_stmt|;
try|try
block|{
name|CommandProcessor
name|proc
init|=
name|CommandProcessorFactory
operator|.
name|get
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|CommandProcessorResponse
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|proc
operator|instanceof
name|Driver
condition|)
block|{
name|isHiveQuery
operator|=
literal|true
expr_stmt|;
name|driver
operator|=
operator|(
name|Driver
operator|)
name|proc
expr_stmt|;
comment|// In Hive server mode, we are not able to retry in the FetchTask
comment|// case, when calling fetch quueries since execute() has returned.
comment|// For now, we disable the test attempts.
name|driver
operator|.
name|setTryCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|response
operator|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isHiveQuery
operator|=
literal|false
expr_stmt|;
name|driver
operator|=
literal|null
expr_stmt|;
comment|// need to reset output for each non-Hive query
name|setupSessionIO
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|response
operator|=
name|proc
operator|.
name|run
argument_list|(
name|cmd_1
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|response
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|SQLState
operator|=
name|response
operator|.
name|getSQLState
argument_list|()
expr_stmt|;
name|errorMessage
operator|=
name|response
operator|.
name|getErrorMessage
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
literal|"Error running query: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|.
name|setErrorCode
argument_list|(
name|ret
operator|==
literal|0
condition|?
operator|-
literal|10000
else|:
name|ret
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveServerException
argument_list|(
literal|"Query returned non-zero code: "
operator|+
name|ret
operator|+
literal|", cause: "
operator|+
name|errorMessage
argument_list|,
name|ret
argument_list|,
name|SQLState
argument_list|)
throw|;
block|}
block|}
comment|/**      * Should be called by the client at the end of a session.      */
specifier|public
name|void
name|clean
parameter_list|()
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|SessionState
name|session
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getTmpOutputFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|getTmpOutputFile
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|pipeIn
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Return the status information about the Map-Reduce cluster.      */
specifier|public
name|HiveClusterStatus
name|getClusterStatus
parameter_list|()
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
name|HiveClusterStatus
name|hcs
decl_stmt|;
try|try
block|{
name|Driver
name|drv
init|=
operator|new
name|Driver
argument_list|()
decl_stmt|;
name|drv
operator|.
name|init
argument_list|()
expr_stmt|;
name|ClusterStatus
name|cs
init|=
name|drv
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|JobTracker
operator|.
name|State
name|jbs
init|=
name|cs
operator|.
name|getJobTrackerState
argument_list|()
decl_stmt|;
comment|// Convert the ClusterStatus to its Thrift equivalent: HiveClusterStatus
name|JobTrackerState
name|state
decl_stmt|;
switch|switch
condition|(
name|jbs
condition|)
block|{
case|case
name|INITIALIZING
case|:
name|state
operator|=
name|JobTrackerState
operator|.
name|INITIALIZING
expr_stmt|;
break|break;
case|case
name|RUNNING
case|:
name|state
operator|=
name|JobTrackerState
operator|.
name|RUNNING
expr_stmt|;
break|break;
default|default:
name|String
name|errorMsg
init|=
literal|"Unrecognized JobTracker state: "
operator|+
name|jbs
operator|.
name|toString
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
name|hcs
operator|=
operator|new
name|HiveClusterStatus
argument_list|(
name|cs
operator|.
name|getTaskTrackers
argument_list|()
argument_list|,
name|cs
operator|.
name|getMapTasks
argument_list|()
argument_list|,
name|cs
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
name|cs
operator|.
name|getMaxMapTasks
argument_list|()
argument_list|,
name|cs
operator|.
name|getMaxReduceTasks
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
literal|"Unable to get cluster status: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|hcs
return|;
block|}
comment|/**      * Return the Hive schema of the query result.      */
specifier|public
name|Schema
name|getSchema
parameter_list|()
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
if|if
condition|(
operator|!
name|isHiveQuery
condition|)
block|{
comment|// Return empty schema if the last command was not a Hive query
return|return
operator|new
name|Schema
argument_list|()
return|;
block|}
assert|assert
name|driver
operator|!=
literal|null
operator|:
literal|"getSchema() is called on a Hive query and driver is NULL."
assert|;
try|try
block|{
name|Schema
name|schema
init|=
name|driver
operator|.
name|getSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
operator|new
name|Schema
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning schema: "
operator|+
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
literal|"Unable to get schema: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**      * Return the Thrift schema of the query result.      */
specifier|public
name|Schema
name|getThriftSchema
parameter_list|()
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
if|if
condition|(
operator|!
name|isHiveQuery
condition|)
block|{
comment|// Return empty schema if the last command was not a Hive query
return|return
operator|new
name|Schema
argument_list|()
return|;
block|}
assert|assert
name|driver
operator|!=
literal|null
operator|:
literal|"getThriftSchema() is called on a Hive query and driver is NULL."
assert|;
try|try
block|{
name|Schema
name|schema
init|=
name|driver
operator|.
name|getThriftSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
operator|new
name|Schema
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning schema: "
operator|+
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
literal|"Unable to get schema: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**      * Fetches the next row in a query result set.      *      * @return the next row in a query result set. null if there is no more row      *         to fetch.      */
specifier|public
name|String
name|fetchOne
parameter_list|()
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
if|if
condition|(
operator|!
name|isHiveQuery
condition|)
block|{
comment|// Return no results if the last command was not a Hive query
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|readResults
argument_list|(
name|results
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
comment|//  throw an EOF exception
throw|throw
operator|new
name|HiveServerException
argument_list|(
literal|"OK"
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
throw|;
block|}
block|}
assert|assert
name|driver
operator|!=
literal|null
operator|:
literal|"fetchOne() is called on a Hive query and driver is NULL."
assert|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|setMaxRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|driver
operator|.
name|getResults
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// TODO: Cannot return null here because thrift cannot handle nulls
comment|// TODO: Returning empty string for now. Need to figure out how to
comment|// TODO: return null in some other way
throw|throw
operator|new
name|HiveServerException
argument_list|(
literal|"OK"
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
throw|;
comment|// return "";
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
specifier|private
name|void
name|cleanTmpFile
parameter_list|()
block|{
if|if
condition|(
name|pipeIn
operator|!=
literal|null
condition|)
block|{
name|SessionState
name|session
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|File
name|tmp
init|=
name|session
operator|.
name|getTmpOutputFile
argument_list|()
decl_stmt|;
name|tmp
operator|.
name|delete
argument_list|()
expr_stmt|;
name|pipeIn
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Reads the temporary results for non-Hive (non-Driver) commands to the      * resulting List of strings.      * @param results list of strings containing the results      * @param nLines number of lines read at once. If it is<= 0, then read all lines.      */
specifier|private
name|void
name|readResults
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|results
parameter_list|,
name|int
name|nLines
parameter_list|)
block|{
if|if
condition|(
name|pipeIn
operator|==
literal|null
condition|)
block|{
name|SessionState
name|session
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|File
name|tmp
init|=
name|session
operator|.
name|getTmpOutputFile
argument_list|()
decl_stmt|;
try|try
block|{
name|pipeIn
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"File "
operator|+
name|tmp
operator|+
literal|" not found. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|boolean
name|readAll
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nLines
operator|||
name|nLines
operator|<=
literal|0
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|String
name|line
init|=
name|pipeIn
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
comment|// reached the end of the result file
name|readAll
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Reading temp results encountered an exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|readAll
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|readAll
condition|)
block|{
name|cleanTmpFile
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Fetches numRows rows.      *      * @param numRows      *          Number of rows to fetch.      * @return A list of rows. The size of the list is numRows if there are at      *         least numRows rows available to return. The size is smaller than      *         numRows if there aren't enough rows. The list will be empty if      *         there is no more row to fetch or numRows == 0.      * @throws HiveServerException      *           Invalid value for numRows (numRows< 0)      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fetchN
parameter_list|(
name|int
name|numRows
parameter_list|)
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
if|if
condition|(
name|numRows
operator|<
literal|0
condition|)
block|{
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
literal|"Invalid argument for number of rows: "
operator|+
name|numRows
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isHiveQuery
condition|)
block|{
name|readResults
argument_list|(
name|result
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
assert|assert
name|driver
operator|!=
literal|null
operator|:
literal|"fetchN() is called on a Hive query and driver is NULL."
assert|;
name|driver
operator|.
name|setMaxRows
argument_list|(
name|numRows
argument_list|)
expr_stmt|;
try|try
block|{
name|driver
operator|.
name|getResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Fetches all the rows in a result set.      *      * @return All the rows in a result set of a query executed using execute      *         method.      *      *         TODO: Currently the server buffers all the rows before returning      *         them to the client. Decide whether the buffering should be done      *         in the client.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fetchAll
parameter_list|()
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isHiveQuery
condition|)
block|{
comment|// Return all results if numRows<= 0
name|readResults
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
try|try
block|{
while|while
condition|(
name|driver
operator|.
name|getResults
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|rows
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|rows
return|;
block|}
comment|/**      * Return the status of the server.      */
annotation|@
name|Override
specifier|public
name|fb_status
name|getStatus
parameter_list|()
block|{
return|return
name|fb_status
operator|.
name|ALIVE
return|;
block|}
comment|/**      * Return the version of the server software.      */
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryPlan
name|getQueryPlan
parameter_list|()
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
name|QueryPlan
name|qp
init|=
operator|new
name|QueryPlan
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isHiveQuery
condition|)
block|{
return|return
name|qp
return|;
block|}
assert|assert
name|driver
operator|!=
literal|null
operator|:
literal|"getQueryPlan() is called on a Hive query and driver is NULL."
assert|;
comment|// TODO for now only return one query at a time
comment|// going forward, all queries associated with a single statement
comment|// will be returned in a single QueryPlan
try|try
block|{
name|qp
operator|.
name|addToQueries
argument_list|(
name|driver
operator|.
name|getQueryPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|HiveServerException
name|ex
init|=
operator|new
name|HiveServerException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|qp
return|;
block|}
block|}
comment|/**    * ThriftHiveProcessorFactory.    *    */
specifier|public
specifier|static
class|class
name|ThriftHiveProcessorFactory
extends|extends
name|TProcessorFactory
block|{
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|ThriftHiveProcessorFactory
parameter_list|(
name|TProcessor
name|processor
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TProcessor
name|getProcessor
parameter_list|(
name|TTransport
name|trans
parameter_list|)
block|{
try|try
block|{
name|Iface
name|handler
init|=
operator|new
name|HiveServerHandler
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|ThriftHive
operator|.
name|Processor
argument_list|(
name|handler
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * HiveServer specific CLI    *    */
specifier|static
specifier|public
class|class
name|HiveServerCli
extends|extends
name|CommonCliOptions
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_MAX_WORKER_THREADS
init|=
literal|"maxWorkerThreads"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_MIN_WORKER_THREADS
init|=
literal|"minWorkerThreads"
decl_stmt|;
specifier|public
name|int
name|port
init|=
name|DEFAULT_HIVE_SERVER_PORT
decl_stmt|;
specifier|public
name|int
name|minWorkerThreads
init|=
name|DEFAULT_MIN_WORKER_THREADS
decl_stmt|;
specifier|public
name|int
name|maxWorkerThreads
init|=
name|DEFAULT_MAX_WORKER_THREADS
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|public
name|HiveServerCli
parameter_list|()
block|{
name|super
argument_list|(
literal|"hiveserver"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// -p port
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"port"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Hive Server port number, default:"
operator|+
name|DEFAULT_HIVE_SERVER_PORT
argument_list|)
operator|.
name|create
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
comment|// min worker thread count
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withLongOpt
argument_list|(
name|OPTION_MIN_WORKER_THREADS
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"minimum number of worker threads, default:"
operator|+
name|DEFAULT_MIN_WORKER_THREADS
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// max worker thread count
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withLongOpt
argument_list|(
name|OPTION_MAX_WORKER_THREADS
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"maximum number of worker threads, default:"
operator|+
name|DEFAULT_MAX_WORKER_THREADS
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|super
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// support the old syntax "hiveserver [port [threads]]" but complain
name|args
operator|=
name|commandLine
operator|.
name|getArgs
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
comment|// complain about the deprecated syntax -- but still run
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"This usage has been deprecated, consider using the new command "
operator|+
literal|"line syntax (run with -h to see usage information)"
argument_list|)
expr_stmt|;
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|minWorkerThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// notice that command line options take precedence over the
comment|// deprecated (old style) naked args...
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'p'
argument_list|)
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// legacy handling
name|String
name|hivePort
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_PORT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hivePort
operator|!=
literal|null
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|hivePort
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OPTION_MIN_WORKER_THREADS
argument_list|)
condition|)
block|{
name|minWorkerThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OPTION_MIN_WORKER_THREADS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OPTION_MAX_WORKER_THREADS
argument_list|)
condition|)
block|{
name|maxWorkerThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OPTION_MAX_WORKER_THREADS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|HiveServerCli
name|cli
init|=
operator|new
name|HiveServerCli
argument_list|()
decl_stmt|;
name|cli
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// NOTE: It is critical to do this prior to initializing log4j, otherwise
comment|// any log specific settings via hiveconf will be ignored
name|Properties
name|hiveconf
init|=
name|cli
operator|.
name|addHiveconfToSystemProperties
argument_list|()
decl_stmt|;
comment|// NOTE: It is critical to do this here so that log4j is reinitialized
comment|// before any of the other core hive classes are loaded
try|try
block|{
name|LogUtils
operator|.
name|initHiveLog4j
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogInitializationException
name|e
parameter_list|)
block|{
name|HiveServerHandler
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TServerTransport
name|serverTransport
init|=
operator|new
name|TServerSocket
argument_list|(
name|cli
operator|.
name|port
argument_list|)
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|HiveServerHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// set all properties specified on the command line
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|item
range|:
name|hiveconf
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
operator|(
name|String
operator|)
name|item
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ThriftHiveProcessorFactory
name|hfactory
init|=
operator|new
name|ThriftHiveProcessorFactory
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|TThreadPoolServer
operator|.
name|Options
name|options
init|=
operator|new
name|TThreadPoolServer
operator|.
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|minWorkerThreads
operator|=
name|cli
operator|.
name|minWorkerThreads
expr_stmt|;
name|options
operator|.
name|maxWorkerThreads
operator|=
name|cli
operator|.
name|maxWorkerThreads
expr_stmt|;
name|TServer
name|server
init|=
operator|new
name|TThreadPoolServer
argument_list|(
name|hfactory
argument_list|,
name|serverTransport
argument_list|,
operator|new
name|TTransportFactory
argument_list|()
argument_list|,
operator|new
name|TTransportFactory
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Starting hive server on port "
operator|+
name|cli
operator|.
name|port
operator|+
literal|" with "
operator|+
name|cli
operator|.
name|minWorkerThreads
operator|+
literal|" min worker threads and "
operator|+
name|cli
operator|.
name|maxWorkerThreads
operator|+
literal|" max worker threads"
decl_stmt|;
name|HiveServerHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|cli
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|x
parameter_list|)
block|{
name|x
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

