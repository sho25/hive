begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|tableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|service
operator|.
name|ThriftHive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|service
operator|.
name|ThriftHive
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|service
operator|.
name|HiveServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|fb_status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Thrift Hive Server Implementation  */
end_comment

begin_class
specifier|public
class|class
name|HiveServer
extends|extends
name|ThriftHive
block|{
specifier|private
specifier|final
specifier|static
name|String
name|VERSION
init|=
literal|"0"
decl_stmt|;
comment|/**    * Handler which implements the Hive Interface    * This class can be used in lieu of the HiveClient class    * to get an embedded server    */
specifier|public
specifier|static
class|class
name|HiveServerHandler
extends|extends
name|HiveMetaStore
operator|.
name|HMSHandler
implements|implements
name|HiveInterface
block|{
comment|/**      * Hive server uses org.apache.hadoop.hive.ql.Driver for run() and       * getResults() methods.      * TODO: There should be one Driver object per query statement executed      * TODO: That will allow clients to run multiple queries simulteneously      */
specifier|private
name|Driver
name|driver
decl_stmt|;
comment|/**      * Stores state per connection      */
specifier|private
name|SessionState
name|session
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * A constructor.      */
specifier|public
name|HiveServerHandler
parameter_list|()
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|HiveServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|=
operator|new
name|SessionState
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
name|session
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|session
operator|.
name|in
operator|=
literal|null
expr_stmt|;
name|session
operator|.
name|out
operator|=
literal|null
expr_stmt|;
name|session
operator|.
name|err
operator|=
literal|null
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|()
expr_stmt|;
block|}
comment|/**      * Executes a query.      *      * @param query HiveQL query to execute      */
specifier|public
name|void
name|execute
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
name|HiveServerHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Running the query: "
operator|+
name|query
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
comment|// TODO: driver.run should either return int or throw exception, not both.
try|try
block|{
name|rc
operator|=
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveServerException
argument_list|(
literal|"Error running query: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveServerException
argument_list|(
literal|"Query returned non-zero code: "
operator|+
name|rc
argument_list|)
throw|;
block|}
block|}
comment|/**      * Return the schema of the query result      */
specifier|public
name|String
name|getSchema
parameter_list|()
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
try|try
block|{
return|return
name|driver
operator|.
name|getSchema
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveServerException
argument_list|(
literal|"Unable to get schema: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**       * Fetches the next row in a query result set.      *       * @return the next row in a query result set. null if there is no more row to fetch.      */
specifier|public
name|String
name|fetchOne
parameter_list|()
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
name|driver
operator|.
name|setMaxRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|driver
operator|.
name|getResults
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// TODO: Cannot return null here because thrift cannot handle nulls
comment|// TODO: Returning empty string for now. Need to figure out how to
comment|// TODO: return null in some other way
return|return
literal|""
return|;
block|}
comment|/**      * Fetches numRows rows.      *      * @param numRows Number of rows to fetch.      * @return A list of rows. The size of the list is numRows if there are at least       *         numRows rows available to return. The size is smaller than numRows if      *         there aren't enough rows. The list will be empty if there is no more       *         row to fetch or numRows == 0.       * @throws HiveServerException Invalid value for numRows (numRows< 0)      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fetchN
parameter_list|(
name|int
name|numRows
parameter_list|)
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
if|if
condition|(
name|numRows
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveServerException
argument_list|(
literal|"Invalid argument for number of rows: "
operator|+
name|numRows
argument_list|)
throw|;
block|}
name|Vector
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|setMaxRows
argument_list|(
name|numRows
argument_list|)
expr_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Fetches all the rows in a result set.      *      * @return All the rows in a result set of a query executed using execute method.      *      * TODO: Currently the server buffers all the rows before returning them       * to the client. Decide whether the buffering should be done in the client.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fetchAll
parameter_list|()
throws|throws
name|HiveServerException
throws|,
name|TException
block|{
name|Vector
argument_list|<
name|String
argument_list|>
name|rows
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|driver
operator|.
name|getResults
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|rows
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|rows
return|;
block|}
comment|/**      * Return the status of the server      */
annotation|@
name|Override
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**      * Return the version of the server software      */
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|int
name|port
init|=
literal|10000
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|TServerTransport
name|serverTransport
init|=
operator|new
name|TServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|Iface
name|handler
init|=
operator|new
name|HiveServerHandler
argument_list|()
decl_stmt|;
name|FacebookService
operator|.
name|Processor
name|processor
init|=
operator|new
name|ThriftHive
operator|.
name|Processor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|TThreadPoolServer
operator|.
name|Options
name|options
init|=
operator|new
name|TThreadPoolServer
operator|.
name|Options
argument_list|()
decl_stmt|;
name|TServer
name|server
init|=
operator|new
name|TThreadPoolServer
argument_list|(
name|processor
argument_list|,
name|serverTransport
argument_list|,
operator|new
name|TTransportFactory
argument_list|()
argument_list|,
operator|new
name|TTransportFactory
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|server
operator|.
name|serve
argument_list|()
expr_stmt|;
name|HiveServerHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Started the new hive server on port "
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|x
parameter_list|)
block|{
name|x
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

