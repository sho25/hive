begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TStatus
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|TStatus
argument_list|,
name|TStatus
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"TStatus"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|STATUS_CODE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"statusCode"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|INFO_MESSAGES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"infoMessages"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SQL_STATE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"sqlState"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ERROR_CODE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"errorCode"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ERROR_MESSAGE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"errorMessage"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|TStatusStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|TStatusTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TStatusCode
name|statusCode
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|infoMessages
decl_stmt|;
comment|// optional
specifier|private
name|String
name|sqlState
decl_stmt|;
comment|// optional
specifier|private
name|int
name|errorCode
decl_stmt|;
comment|// optional
specifier|private
name|String
name|errorMessage
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**      *       * @see TStatusCode      */
name|STATUS_CODE
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"statusCode"
argument_list|)
block|,
name|INFO_MESSAGES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"infoMessages"
argument_list|)
block|,
name|SQL_STATE
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"sqlState"
argument_list|)
block|,
name|ERROR_CODE
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"errorCode"
argument_list|)
block|,
name|ERROR_MESSAGE
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"errorMessage"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// STATUS_CODE
return|return
name|STATUS_CODE
return|;
case|case
literal|2
case|:
comment|// INFO_MESSAGES
return|return
name|INFO_MESSAGES
return|;
case|case
literal|3
case|:
comment|// SQL_STATE
return|return
name|SQL_STATE
return|;
case|case
literal|4
case|:
comment|// ERROR_CODE
return|return
name|ERROR_CODE
return|;
case|case
literal|5
case|:
comment|// ERROR_MESSAGE
return|return
name|ERROR_MESSAGE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__ERRORCODE_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
specifier|private
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|INFO_MESSAGES
block|,
name|_Fields
operator|.
name|SQL_STATE
block|,
name|_Fields
operator|.
name|ERROR_CODE
block|,
name|_Fields
operator|.
name|ERROR_MESSAGE
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STATUS_CODE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"statusCode"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|TStatusCode
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|INFO_MESSAGES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"infoMessages"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SQL_STATE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"sqlState"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ERROR_CODE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"errorCode"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ERROR_MESSAGE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"errorMessage"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|TStatus
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TStatus
parameter_list|()
block|{   }
specifier|public
name|TStatus
parameter_list|(
name|TStatusCode
name|statusCode
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|TStatus
parameter_list|(
name|TStatus
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetStatusCode
argument_list|()
condition|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|other
operator|.
name|statusCode
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetInfoMessages
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__infoMessages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|infoMessages
control|)
block|{
name|__this__infoMessages
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|infoMessages
operator|=
name|__this__infoMessages
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetSqlState
argument_list|()
condition|)
block|{
name|this
operator|.
name|sqlState
operator|=
name|other
operator|.
name|sqlState
expr_stmt|;
block|}
name|this
operator|.
name|errorCode
operator|=
name|other
operator|.
name|errorCode
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetErrorMessage
argument_list|()
condition|)
block|{
name|this
operator|.
name|errorMessage
operator|=
name|other
operator|.
name|errorMessage
expr_stmt|;
block|}
block|}
specifier|public
name|TStatus
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|TStatus
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|statusCode
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|infoMessages
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|sqlState
operator|=
literal|null
expr_stmt|;
name|setErrorCodeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCode
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|errorMessage
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    *     * @see TStatusCode    */
specifier|public
name|TStatusCode
name|getStatusCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|statusCode
return|;
block|}
comment|/**    *     * @see TStatusCode    */
specifier|public
name|void
name|setStatusCode
parameter_list|(
name|TStatusCode
name|statusCode
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
block|}
specifier|public
name|void
name|unsetStatusCode
parameter_list|()
block|{
name|this
operator|.
name|statusCode
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStatusCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|statusCode
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStatusCodeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|statusCode
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getInfoMessagesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|infoMessages
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|infoMessages
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getInfoMessagesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|infoMessages
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|infoMessages
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToInfoMessages
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|infoMessages
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|infoMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|infoMessages
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getInfoMessages
parameter_list|()
block|{
return|return
name|this
operator|.
name|infoMessages
return|;
block|}
specifier|public
name|void
name|setInfoMessages
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|infoMessages
parameter_list|)
block|{
name|this
operator|.
name|infoMessages
operator|=
name|infoMessages
expr_stmt|;
block|}
specifier|public
name|void
name|unsetInfoMessages
parameter_list|()
block|{
name|this
operator|.
name|infoMessages
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field infoMessages is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetInfoMessages
parameter_list|()
block|{
return|return
name|this
operator|.
name|infoMessages
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setInfoMessagesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|infoMessages
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getSqlState
parameter_list|()
block|{
return|return
name|this
operator|.
name|sqlState
return|;
block|}
specifier|public
name|void
name|setSqlState
parameter_list|(
name|String
name|sqlState
parameter_list|)
block|{
name|this
operator|.
name|sqlState
operator|=
name|sqlState
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSqlState
parameter_list|()
block|{
name|this
operator|.
name|sqlState
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field sqlState is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSqlState
parameter_list|()
block|{
return|return
name|this
operator|.
name|sqlState
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSqlStateIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|sqlState
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getErrorCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorCode
return|;
block|}
specifier|public
name|void
name|setErrorCode
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
name|this
operator|.
name|errorCode
operator|=
name|errorCode
expr_stmt|;
name|setErrorCodeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetErrorCode
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__ERRORCODE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetErrorCode
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__ERRORCODE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setErrorCodeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__ERRORCODE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorMessage
return|;
block|}
specifier|public
name|void
name|setErrorMessage
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
name|this
operator|.
name|errorMessage
operator|=
name|errorMessage
expr_stmt|;
block|}
specifier|public
name|void
name|unsetErrorMessage
parameter_list|()
block|{
name|this
operator|.
name|errorMessage
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetErrorMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorMessage
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setErrorMessageIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|errorMessage
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|STATUS_CODE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStatusCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStatusCode
argument_list|(
operator|(
name|TStatusCode
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INFO_MESSAGES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetInfoMessages
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setInfoMessages
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SQL_STATE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSqlState
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSqlState
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ERROR_CODE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetErrorCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setErrorCode
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ERROR_MESSAGE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetErrorMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setErrorMessage
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|STATUS_CODE
case|:
return|return
name|getStatusCode
argument_list|()
return|;
case|case
name|INFO_MESSAGES
case|:
return|return
name|getInfoMessages
argument_list|()
return|;
case|case
name|SQL_STATE
case|:
return|return
name|getSqlState
argument_list|()
return|;
case|case
name|ERROR_CODE
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getErrorCode
argument_list|()
argument_list|)
return|;
case|case
name|ERROR_MESSAGE
case|:
return|return
name|getErrorMessage
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|STATUS_CODE
case|:
return|return
name|isSetStatusCode
argument_list|()
return|;
case|case
name|INFO_MESSAGES
case|:
return|return
name|isSetInfoMessages
argument_list|()
return|;
case|case
name|SQL_STATE
case|:
return|return
name|isSetSqlState
argument_list|()
return|;
case|case
name|ERROR_CODE
case|:
return|return
name|isSetErrorCode
argument_list|()
return|;
case|case
name|ERROR_MESSAGE
case|:
return|return
name|isSetErrorMessage
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|TStatus
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|TStatus
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|TStatus
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_statusCode
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStatusCode
argument_list|()
decl_stmt|;
name|boolean
name|that_present_statusCode
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_statusCode
operator|||
name|that_present_statusCode
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_statusCode
operator|&&
name|that_present_statusCode
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|statusCode
operator|.
name|equals
argument_list|(
name|that
operator|.
name|statusCode
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_infoMessages
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetInfoMessages
argument_list|()
decl_stmt|;
name|boolean
name|that_present_infoMessages
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetInfoMessages
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_infoMessages
operator|||
name|that_present_infoMessages
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_infoMessages
operator|&&
name|that_present_infoMessages
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|infoMessages
operator|.
name|equals
argument_list|(
name|that
operator|.
name|infoMessages
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_sqlState
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSqlState
argument_list|()
decl_stmt|;
name|boolean
name|that_present_sqlState
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSqlState
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_sqlState
operator|||
name|that_present_sqlState
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_sqlState
operator|&&
name|that_present_sqlState
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|sqlState
operator|.
name|equals
argument_list|(
name|that
operator|.
name|sqlState
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_errorCode
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetErrorCode
argument_list|()
decl_stmt|;
name|boolean
name|that_present_errorCode
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_errorCode
operator|||
name|that_present_errorCode
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_errorCode
operator|&&
name|that_present_errorCode
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|errorCode
operator|!=
name|that
operator|.
name|errorCode
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_errorMessage
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetErrorMessage
argument_list|()
decl_stmt|;
name|boolean
name|that_present_errorMessage
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetErrorMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_errorMessage
operator|||
name|that_present_errorMessage
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_errorMessage
operator|&&
name|that_present_errorMessage
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|errorMessage
operator|.
name|equals
argument_list|(
name|that
operator|.
name|errorMessage
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|builder
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
name|boolean
name|present_statusCode
init|=
literal|true
operator|&&
operator|(
name|isSetStatusCode
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_statusCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_statusCode
condition|)
name|builder
operator|.
name|append
argument_list|(
name|statusCode
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|present_infoMessages
init|=
literal|true
operator|&&
operator|(
name|isSetInfoMessages
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_infoMessages
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_infoMessages
condition|)
name|builder
operator|.
name|append
argument_list|(
name|infoMessages
argument_list|)
expr_stmt|;
name|boolean
name|present_sqlState
init|=
literal|true
operator|&&
operator|(
name|isSetSqlState
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_sqlState
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_sqlState
condition|)
name|builder
operator|.
name|append
argument_list|(
name|sqlState
argument_list|)
expr_stmt|;
name|boolean
name|present_errorCode
init|=
literal|true
operator|&&
operator|(
name|isSetErrorCode
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_errorCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_errorCode
condition|)
name|builder
operator|.
name|append
argument_list|(
name|errorCode
argument_list|)
expr_stmt|;
name|boolean
name|present_errorMessage
init|=
literal|true
operator|&&
operator|(
name|isSetErrorMessage
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_errorMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_errorMessage
condition|)
name|builder
operator|.
name|append
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toHashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|TStatus
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|TStatus
name|typedOther
init|=
operator|(
name|TStatus
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStatusCode
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStatusCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStatusCode
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|statusCode
argument_list|,
name|typedOther
operator|.
name|statusCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetInfoMessages
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetInfoMessages
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetInfoMessages
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|infoMessages
argument_list|,
name|typedOther
operator|.
name|infoMessages
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSqlState
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSqlState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSqlState
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|sqlState
argument_list|,
name|typedOther
operator|.
name|sqlState
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetErrorCode
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetErrorCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetErrorCode
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|errorCode
argument_list|,
name|typedOther
operator|.
name|errorCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetErrorMessage
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetErrorMessage
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|errorMessage
argument_list|,
name|typedOther
operator|.
name|errorMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"TStatus("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"statusCode:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|statusCode
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|statusCode
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetInfoMessages
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"infoMessages:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|infoMessages
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|infoMessages
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetSqlState
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sqlState:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sqlState
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|sqlState
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetErrorCode
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"errorCode:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|errorCode
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetErrorMessage
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"errorMessage:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|errorMessage
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|errorMessage
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
if|if
condition|(
operator|!
name|isSetStatusCode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'statusCode' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// check for sub-struct validity
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TStatusStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|TStatusStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TStatusStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TStatusStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|TStatus
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|TStatus
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// STATUS_CODE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|statusCode
operator|=
name|TStatusCode
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setStatusCodeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// INFO_MESSAGES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list190
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|infoMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list190
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i191
init|=
literal|0
init|;
name|_i191
operator|<
name|_list190
operator|.
name|size
condition|;
operator|++
name|_i191
control|)
block|{
name|String
name|_elem192
decl_stmt|;
comment|// required
name|_elem192
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|infoMessages
operator|.
name|add
argument_list|(
name|_elem192
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setInfoMessagesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// SQL_STATE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|sqlState
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSqlStateIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ERROR_CODE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|errorCode
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setErrorCodeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// ERROR_MESSAGE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|errorMessage
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setErrorMessageIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|TStatus
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|statusCode
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STATUS_CODE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|statusCode
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|infoMessages
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetInfoMessages
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|INFO_MESSAGES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|infoMessages
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter193
range|:
name|struct
operator|.
name|infoMessages
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter193
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|sqlState
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetSqlState
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SQL_STATE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|sqlState
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetErrorCode
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ERROR_CODE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|errorCode
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetErrorMessage
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ERROR_MESSAGE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|errorMessage
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TStatusTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|TStatusTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TStatusTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TStatusTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|TStatus
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TStatus
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|statusCode
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetInfoMessages
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSqlState
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetErrorCode
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetErrorMessage
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetInfoMessages
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|infoMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter194
range|:
name|struct
operator|.
name|infoMessages
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter194
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSqlState
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|sqlState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetErrorCode
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|errorCode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetErrorMessage
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|errorMessage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TStatus
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|struct
operator|.
name|statusCode
operator|=
name|TStatusCode
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setStatusCodeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list195
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|infoMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list195
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i196
init|=
literal|0
init|;
name|_i196
operator|<
name|_list195
operator|.
name|size
condition|;
operator|++
name|_i196
control|)
block|{
name|String
name|_elem197
decl_stmt|;
comment|// required
name|_elem197
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|infoMessages
operator|.
name|add
argument_list|(
name|_elem197
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setInfoMessagesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|sqlState
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSqlStateIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|errorCode
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setErrorCodeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|errorMessage
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setErrorMessageIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

