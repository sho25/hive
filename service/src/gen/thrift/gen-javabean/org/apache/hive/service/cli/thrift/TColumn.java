begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TColumn
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TUnion
argument_list|<
name|TColumn
argument_list|,
name|TColumn
operator|.
name|_Fields
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"TColumn"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|BOOL_COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"boolColumn"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|BYTE_COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"byteColumn"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|I16_COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"i16Column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|I32_COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"i32Column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|I64_COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"i64Column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DOUBLE_COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"doubleColumn"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|STRING_COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"stringColumn"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|BOOL_COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"boolColumn"
argument_list|)
block|,
name|BYTE_COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"byteColumn"
argument_list|)
block|,
name|I16_COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"i16Column"
argument_list|)
block|,
name|I32_COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"i32Column"
argument_list|)
block|,
name|I64_COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"i64Column"
argument_list|)
block|,
name|DOUBLE_COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"doubleColumn"
argument_list|)
block|,
name|STRING_COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"stringColumn"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// BOOL_COLUMN
return|return
name|BOOL_COLUMN
return|;
case|case
literal|2
case|:
comment|// BYTE_COLUMN
return|return
name|BYTE_COLUMN
return|;
case|case
literal|3
case|:
comment|// I16_COLUMN
return|return
name|I16_COLUMN
return|;
case|case
literal|4
case|:
comment|// I32_COLUMN
return|return
name|I32_COLUMN
return|;
case|case
literal|5
case|:
comment|// I64_COLUMN
return|return
name|I64_COLUMN
return|;
case|case
literal|6
case|:
comment|// DOUBLE_COLUMN
return|return
name|DOUBLE_COLUMN
return|;
case|case
literal|7
case|:
comment|// STRING_COLUMN
return|return
name|STRING_COLUMN
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BOOL_COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"boolColumn"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TBoolValue
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BYTE_COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"byteColumn"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TByteValue
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|I16_COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"i16Column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TI16Value
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|I32_COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"i32Column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TI32Value
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|I64_COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"i64Column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TI64Value
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DOUBLE_COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"doubleColumn"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TDoubleValue
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STRING_COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"stringColumn"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TStringValue
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|TColumn
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TColumn
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TColumn
parameter_list|(
name|_Fields
name|setField
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|setField
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TColumn
parameter_list|(
name|TColumn
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TColumn
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|TColumn
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TColumn
name|boolColumn
parameter_list|(
name|List
argument_list|<
name|TBoolValue
argument_list|>
name|value
parameter_list|)
block|{
name|TColumn
name|x
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|x
operator|.
name|setBoolColumn
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
specifier|static
name|TColumn
name|byteColumn
parameter_list|(
name|List
argument_list|<
name|TByteValue
argument_list|>
name|value
parameter_list|)
block|{
name|TColumn
name|x
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|x
operator|.
name|setByteColumn
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
specifier|static
name|TColumn
name|i16Column
parameter_list|(
name|List
argument_list|<
name|TI16Value
argument_list|>
name|value
parameter_list|)
block|{
name|TColumn
name|x
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|x
operator|.
name|setI16Column
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
specifier|static
name|TColumn
name|i32Column
parameter_list|(
name|List
argument_list|<
name|TI32Value
argument_list|>
name|value
parameter_list|)
block|{
name|TColumn
name|x
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|x
operator|.
name|setI32Column
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
specifier|static
name|TColumn
name|i64Column
parameter_list|(
name|List
argument_list|<
name|TI64Value
argument_list|>
name|value
parameter_list|)
block|{
name|TColumn
name|x
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|x
operator|.
name|setI64Column
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
specifier|static
name|TColumn
name|doubleColumn
parameter_list|(
name|List
argument_list|<
name|TDoubleValue
argument_list|>
name|value
parameter_list|)
block|{
name|TColumn
name|x
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|x
operator|.
name|setDoubleColumn
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
specifier|static
name|TColumn
name|stringColumn
parameter_list|(
name|List
argument_list|<
name|TStringValue
argument_list|>
name|value
parameter_list|)
block|{
name|TColumn
name|x
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|x
operator|.
name|setStringColumn
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkType
parameter_list|(
name|_Fields
name|setField
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|ClassCastException
block|{
switch|switch
condition|(
name|setField
condition|)
block|{
case|case
name|BOOL_COLUMN
case|:
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
break|break;
block|}
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Was expecting value of type List<TBoolValue> for field 'boolColumn', but got "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
case|case
name|BYTE_COLUMN
case|:
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
break|break;
block|}
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Was expecting value of type List<TByteValue> for field 'byteColumn', but got "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
case|case
name|I16_COLUMN
case|:
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
break|break;
block|}
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Was expecting value of type List<TI16Value> for field 'i16Column', but got "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
case|case
name|I32_COLUMN
case|:
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
break|break;
block|}
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Was expecting value of type List<TI32Value> for field 'i32Column', but got "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
case|case
name|I64_COLUMN
case|:
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
break|break;
block|}
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Was expecting value of type List<TI64Value> for field 'i64Column', but got "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
case|case
name|DOUBLE_COLUMN
case|:
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
break|break;
block|}
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Was expecting value of type List<TDoubleValue> for field 'doubleColumn', but got "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
case|case
name|STRING_COLUMN
case|:
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
break|break;
block|}
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Was expecting value of type List<TStringValue> for field 'stringColumn', but got "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown field id "
operator|+
name|setField
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|standardSchemeReadValue
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|field
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|_Fields
name|setField
init|=
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|field
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|setField
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|setField
condition|)
block|{
case|case
name|BOOL_COLUMN
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|BOOL_COLUMN_FIELD_DESC
operator|.
name|type
condition|)
block|{
name|List
argument_list|<
name|TBoolValue
argument_list|>
name|boolColumn
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list46
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|boolColumn
operator|=
operator|new
name|ArrayList
argument_list|<
name|TBoolValue
argument_list|>
argument_list|(
name|_list46
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i47
init|=
literal|0
init|;
name|_i47
operator|<
name|_list46
operator|.
name|size
condition|;
operator|++
name|_i47
control|)
block|{
name|TBoolValue
name|_elem48
decl_stmt|;
comment|// optional
name|_elem48
operator|=
operator|new
name|TBoolValue
argument_list|()
expr_stmt|;
name|_elem48
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|boolColumn
operator|.
name|add
argument_list|(
name|_elem48
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|boolColumn
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|BYTE_COLUMN
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|BYTE_COLUMN_FIELD_DESC
operator|.
name|type
condition|)
block|{
name|List
argument_list|<
name|TByteValue
argument_list|>
name|byteColumn
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list49
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|byteColumn
operator|=
operator|new
name|ArrayList
argument_list|<
name|TByteValue
argument_list|>
argument_list|(
name|_list49
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i50
init|=
literal|0
init|;
name|_i50
operator|<
name|_list49
operator|.
name|size
condition|;
operator|++
name|_i50
control|)
block|{
name|TByteValue
name|_elem51
decl_stmt|;
comment|// optional
name|_elem51
operator|=
operator|new
name|TByteValue
argument_list|()
expr_stmt|;
name|_elem51
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|byteColumn
operator|.
name|add
argument_list|(
name|_elem51
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|byteColumn
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|I16_COLUMN
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|I16_COLUMN_FIELD_DESC
operator|.
name|type
condition|)
block|{
name|List
argument_list|<
name|TI16Value
argument_list|>
name|i16Column
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list52
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|i16Column
operator|=
operator|new
name|ArrayList
argument_list|<
name|TI16Value
argument_list|>
argument_list|(
name|_list52
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i53
init|=
literal|0
init|;
name|_i53
operator|<
name|_list52
operator|.
name|size
condition|;
operator|++
name|_i53
control|)
block|{
name|TI16Value
name|_elem54
decl_stmt|;
comment|// optional
name|_elem54
operator|=
operator|new
name|TI16Value
argument_list|()
expr_stmt|;
name|_elem54
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|i16Column
operator|.
name|add
argument_list|(
name|_elem54
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|i16Column
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|I32_COLUMN
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|I32_COLUMN_FIELD_DESC
operator|.
name|type
condition|)
block|{
name|List
argument_list|<
name|TI32Value
argument_list|>
name|i32Column
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list55
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|i32Column
operator|=
operator|new
name|ArrayList
argument_list|<
name|TI32Value
argument_list|>
argument_list|(
name|_list55
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i56
init|=
literal|0
init|;
name|_i56
operator|<
name|_list55
operator|.
name|size
condition|;
operator|++
name|_i56
control|)
block|{
name|TI32Value
name|_elem57
decl_stmt|;
comment|// optional
name|_elem57
operator|=
operator|new
name|TI32Value
argument_list|()
expr_stmt|;
name|_elem57
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|i32Column
operator|.
name|add
argument_list|(
name|_elem57
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|i32Column
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|I64_COLUMN
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|I64_COLUMN_FIELD_DESC
operator|.
name|type
condition|)
block|{
name|List
argument_list|<
name|TI64Value
argument_list|>
name|i64Column
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list58
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|i64Column
operator|=
operator|new
name|ArrayList
argument_list|<
name|TI64Value
argument_list|>
argument_list|(
name|_list58
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i59
init|=
literal|0
init|;
name|_i59
operator|<
name|_list58
operator|.
name|size
condition|;
operator|++
name|_i59
control|)
block|{
name|TI64Value
name|_elem60
decl_stmt|;
comment|// optional
name|_elem60
operator|=
operator|new
name|TI64Value
argument_list|()
expr_stmt|;
name|_elem60
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|i64Column
operator|.
name|add
argument_list|(
name|_elem60
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|i64Column
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|DOUBLE_COLUMN
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|DOUBLE_COLUMN_FIELD_DESC
operator|.
name|type
condition|)
block|{
name|List
argument_list|<
name|TDoubleValue
argument_list|>
name|doubleColumn
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list61
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|doubleColumn
operator|=
operator|new
name|ArrayList
argument_list|<
name|TDoubleValue
argument_list|>
argument_list|(
name|_list61
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i62
init|=
literal|0
init|;
name|_i62
operator|<
name|_list61
operator|.
name|size
condition|;
operator|++
name|_i62
control|)
block|{
name|TDoubleValue
name|_elem63
decl_stmt|;
comment|// optional
name|_elem63
operator|=
operator|new
name|TDoubleValue
argument_list|()
expr_stmt|;
name|_elem63
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|doubleColumn
operator|.
name|add
argument_list|(
name|_elem63
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|doubleColumn
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|STRING_COLUMN
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|STRING_COLUMN_FIELD_DESC
operator|.
name|type
condition|)
block|{
name|List
argument_list|<
name|TStringValue
argument_list|>
name|stringColumn
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list64
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|stringColumn
operator|=
operator|new
name|ArrayList
argument_list|<
name|TStringValue
argument_list|>
argument_list|(
name|_list64
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i65
init|=
literal|0
init|;
name|_i65
operator|<
name|_list64
operator|.
name|size
condition|;
operator|++
name|_i65
control|)
block|{
name|TStringValue
name|_elem66
decl_stmt|;
comment|// optional
name|_elem66
operator|=
operator|new
name|TStringValue
argument_list|()
expr_stmt|;
name|_elem66
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|stringColumn
operator|.
name|add
argument_list|(
name|_elem66
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|stringColumn
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"setField wasn't null, but didn't match any of the case statements!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|standardSchemeWriteValue
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
switch|switch
condition|(
name|setField_
condition|)
block|{
case|case
name|BOOL_COLUMN
case|:
name|List
argument_list|<
name|TBoolValue
argument_list|>
name|boolColumn
init|=
operator|(
name|List
argument_list|<
name|TBoolValue
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|boolColumn
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TBoolValue
name|_iter67
range|:
name|boolColumn
control|)
block|{
name|_iter67
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|BYTE_COLUMN
case|:
name|List
argument_list|<
name|TByteValue
argument_list|>
name|byteColumn
init|=
operator|(
name|List
argument_list|<
name|TByteValue
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|byteColumn
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TByteValue
name|_iter68
range|:
name|byteColumn
control|)
block|{
name|_iter68
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|I16_COLUMN
case|:
name|List
argument_list|<
name|TI16Value
argument_list|>
name|i16Column
init|=
operator|(
name|List
argument_list|<
name|TI16Value
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|i16Column
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TI16Value
name|_iter69
range|:
name|i16Column
control|)
block|{
name|_iter69
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|I32_COLUMN
case|:
name|List
argument_list|<
name|TI32Value
argument_list|>
name|i32Column
init|=
operator|(
name|List
argument_list|<
name|TI32Value
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|i32Column
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TI32Value
name|_iter70
range|:
name|i32Column
control|)
block|{
name|_iter70
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|I64_COLUMN
case|:
name|List
argument_list|<
name|TI64Value
argument_list|>
name|i64Column
init|=
operator|(
name|List
argument_list|<
name|TI64Value
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|i64Column
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TI64Value
name|_iter71
range|:
name|i64Column
control|)
block|{
name|_iter71
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|DOUBLE_COLUMN
case|:
name|List
argument_list|<
name|TDoubleValue
argument_list|>
name|doubleColumn
init|=
operator|(
name|List
argument_list|<
name|TDoubleValue
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|doubleColumn
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TDoubleValue
name|_iter72
range|:
name|doubleColumn
control|)
block|{
name|_iter72
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|STRING_COLUMN
case|:
name|List
argument_list|<
name|TStringValue
argument_list|>
name|stringColumn
init|=
operator|(
name|List
argument_list|<
name|TStringValue
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|stringColumn
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TStringValue
name|_iter73
range|:
name|stringColumn
control|)
block|{
name|_iter73
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot write union with unknown field "
operator|+
name|setField_
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|tupleSchemeReadValue
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|short
name|fieldID
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|_Fields
name|setField
init|=
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldID
argument_list|)
decl_stmt|;
if|if
condition|(
name|setField
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|setField
condition|)
block|{
case|case
name|BOOL_COLUMN
case|:
name|List
argument_list|<
name|TBoolValue
argument_list|>
name|boolColumn
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list74
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|boolColumn
operator|=
operator|new
name|ArrayList
argument_list|<
name|TBoolValue
argument_list|>
argument_list|(
name|_list74
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i75
init|=
literal|0
init|;
name|_i75
operator|<
name|_list74
operator|.
name|size
condition|;
operator|++
name|_i75
control|)
block|{
name|TBoolValue
name|_elem76
decl_stmt|;
comment|// optional
name|_elem76
operator|=
operator|new
name|TBoolValue
argument_list|()
expr_stmt|;
name|_elem76
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|boolColumn
operator|.
name|add
argument_list|(
name|_elem76
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|boolColumn
return|;
case|case
name|BYTE_COLUMN
case|:
name|List
argument_list|<
name|TByteValue
argument_list|>
name|byteColumn
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list77
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|byteColumn
operator|=
operator|new
name|ArrayList
argument_list|<
name|TByteValue
argument_list|>
argument_list|(
name|_list77
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i78
init|=
literal|0
init|;
name|_i78
operator|<
name|_list77
operator|.
name|size
condition|;
operator|++
name|_i78
control|)
block|{
name|TByteValue
name|_elem79
decl_stmt|;
comment|// optional
name|_elem79
operator|=
operator|new
name|TByteValue
argument_list|()
expr_stmt|;
name|_elem79
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|byteColumn
operator|.
name|add
argument_list|(
name|_elem79
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|byteColumn
return|;
case|case
name|I16_COLUMN
case|:
name|List
argument_list|<
name|TI16Value
argument_list|>
name|i16Column
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list80
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|i16Column
operator|=
operator|new
name|ArrayList
argument_list|<
name|TI16Value
argument_list|>
argument_list|(
name|_list80
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i81
init|=
literal|0
init|;
name|_i81
operator|<
name|_list80
operator|.
name|size
condition|;
operator|++
name|_i81
control|)
block|{
name|TI16Value
name|_elem82
decl_stmt|;
comment|// optional
name|_elem82
operator|=
operator|new
name|TI16Value
argument_list|()
expr_stmt|;
name|_elem82
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|i16Column
operator|.
name|add
argument_list|(
name|_elem82
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|i16Column
return|;
case|case
name|I32_COLUMN
case|:
name|List
argument_list|<
name|TI32Value
argument_list|>
name|i32Column
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list83
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|i32Column
operator|=
operator|new
name|ArrayList
argument_list|<
name|TI32Value
argument_list|>
argument_list|(
name|_list83
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i84
init|=
literal|0
init|;
name|_i84
operator|<
name|_list83
operator|.
name|size
condition|;
operator|++
name|_i84
control|)
block|{
name|TI32Value
name|_elem85
decl_stmt|;
comment|// optional
name|_elem85
operator|=
operator|new
name|TI32Value
argument_list|()
expr_stmt|;
name|_elem85
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|i32Column
operator|.
name|add
argument_list|(
name|_elem85
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|i32Column
return|;
case|case
name|I64_COLUMN
case|:
name|List
argument_list|<
name|TI64Value
argument_list|>
name|i64Column
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list86
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|i64Column
operator|=
operator|new
name|ArrayList
argument_list|<
name|TI64Value
argument_list|>
argument_list|(
name|_list86
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i87
init|=
literal|0
init|;
name|_i87
operator|<
name|_list86
operator|.
name|size
condition|;
operator|++
name|_i87
control|)
block|{
name|TI64Value
name|_elem88
decl_stmt|;
comment|// optional
name|_elem88
operator|=
operator|new
name|TI64Value
argument_list|()
expr_stmt|;
name|_elem88
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|i64Column
operator|.
name|add
argument_list|(
name|_elem88
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|i64Column
return|;
case|case
name|DOUBLE_COLUMN
case|:
name|List
argument_list|<
name|TDoubleValue
argument_list|>
name|doubleColumn
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list89
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|doubleColumn
operator|=
operator|new
name|ArrayList
argument_list|<
name|TDoubleValue
argument_list|>
argument_list|(
name|_list89
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i90
init|=
literal|0
init|;
name|_i90
operator|<
name|_list89
operator|.
name|size
condition|;
operator|++
name|_i90
control|)
block|{
name|TDoubleValue
name|_elem91
decl_stmt|;
comment|// optional
name|_elem91
operator|=
operator|new
name|TDoubleValue
argument_list|()
expr_stmt|;
name|_elem91
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|doubleColumn
operator|.
name|add
argument_list|(
name|_elem91
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|doubleColumn
return|;
case|case
name|STRING_COLUMN
case|:
name|List
argument_list|<
name|TStringValue
argument_list|>
name|stringColumn
decl_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list92
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|stringColumn
operator|=
operator|new
name|ArrayList
argument_list|<
name|TStringValue
argument_list|>
argument_list|(
name|_list92
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i93
init|=
literal|0
init|;
name|_i93
operator|<
name|_list92
operator|.
name|size
condition|;
operator|++
name|_i93
control|)
block|{
name|TStringValue
name|_elem94
decl_stmt|;
comment|// optional
name|_elem94
operator|=
operator|new
name|TStringValue
argument_list|()
expr_stmt|;
name|_elem94
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|stringColumn
operator|.
name|add
argument_list|(
name|_elem94
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|stringColumn
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"setField wasn't null, but didn't match any of the case statements!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|TProtocolException
argument_list|(
literal|"Couldn't find a field with field id "
operator|+
name|fieldID
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tupleSchemeWriteValue
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
switch|switch
condition|(
name|setField_
condition|)
block|{
case|case
name|BOOL_COLUMN
case|:
name|List
argument_list|<
name|TBoolValue
argument_list|>
name|boolColumn
init|=
operator|(
name|List
argument_list|<
name|TBoolValue
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|boolColumn
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TBoolValue
name|_iter95
range|:
name|boolColumn
control|)
block|{
name|_iter95
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|BYTE_COLUMN
case|:
name|List
argument_list|<
name|TByteValue
argument_list|>
name|byteColumn
init|=
operator|(
name|List
argument_list|<
name|TByteValue
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|byteColumn
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TByteValue
name|_iter96
range|:
name|byteColumn
control|)
block|{
name|_iter96
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|I16_COLUMN
case|:
name|List
argument_list|<
name|TI16Value
argument_list|>
name|i16Column
init|=
operator|(
name|List
argument_list|<
name|TI16Value
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|i16Column
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TI16Value
name|_iter97
range|:
name|i16Column
control|)
block|{
name|_iter97
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|I32_COLUMN
case|:
name|List
argument_list|<
name|TI32Value
argument_list|>
name|i32Column
init|=
operator|(
name|List
argument_list|<
name|TI32Value
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|i32Column
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TI32Value
name|_iter98
range|:
name|i32Column
control|)
block|{
name|_iter98
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|I64_COLUMN
case|:
name|List
argument_list|<
name|TI64Value
argument_list|>
name|i64Column
init|=
operator|(
name|List
argument_list|<
name|TI64Value
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|i64Column
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TI64Value
name|_iter99
range|:
name|i64Column
control|)
block|{
name|_iter99
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|DOUBLE_COLUMN
case|:
name|List
argument_list|<
name|TDoubleValue
argument_list|>
name|doubleColumn
init|=
operator|(
name|List
argument_list|<
name|TDoubleValue
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|doubleColumn
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TDoubleValue
name|_iter100
range|:
name|doubleColumn
control|)
block|{
name|_iter100
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|STRING_COLUMN
case|:
name|List
argument_list|<
name|TStringValue
argument_list|>
name|stringColumn
init|=
operator|(
name|List
argument_list|<
name|TStringValue
argument_list|>
operator|)
name|value_
decl_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|stringColumn
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TStringValue
name|_iter101
range|:
name|stringColumn
control|)
block|{
name|_iter101
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
return|return;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot write union with unknown field "
operator|+
name|setField_
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|getFieldDesc
parameter_list|(
name|_Fields
name|setField
parameter_list|)
block|{
switch|switch
condition|(
name|setField
condition|)
block|{
case|case
name|BOOL_COLUMN
case|:
return|return
name|BOOL_COLUMN_FIELD_DESC
return|;
case|case
name|BYTE_COLUMN
case|:
return|return
name|BYTE_COLUMN_FIELD_DESC
return|;
case|case
name|I16_COLUMN
case|:
return|return
name|I16_COLUMN_FIELD_DESC
return|;
case|case
name|I32_COLUMN
case|:
return|return
name|I32_COLUMN_FIELD_DESC
return|;
case|case
name|I64_COLUMN
case|:
return|return
name|I64_COLUMN_FIELD_DESC
return|;
case|case
name|DOUBLE_COLUMN
case|:
return|return
name|DOUBLE_COLUMN_FIELD_DESC
return|;
case|case
name|STRING_COLUMN
case|:
return|return
name|STRING_COLUMN_FIELD_DESC
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown field id "
operator|+
name|setField
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|getStructDesc
parameter_list|()
block|{
return|return
name|STRUCT_DESC
return|;
block|}
annotation|@
name|Override
specifier|protected
name|_Fields
name|enumForId
parameter_list|(
name|short
name|id
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TBoolValue
argument_list|>
name|getBoolColumn
parameter_list|()
block|{
if|if
condition|(
name|getSetField
argument_list|()
operator|==
name|_Fields
operator|.
name|BOOL_COLUMN
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|TBoolValue
argument_list|>
operator|)
name|getFieldValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get field 'boolColumn' because union is currently set to "
operator|+
name|getFieldDesc
argument_list|(
name|getSetField
argument_list|()
argument_list|)
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setBoolColumn
parameter_list|(
name|List
argument_list|<
name|TBoolValue
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|setField_
operator|=
name|_Fields
operator|.
name|BOOL_COLUMN
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TByteValue
argument_list|>
name|getByteColumn
parameter_list|()
block|{
if|if
condition|(
name|getSetField
argument_list|()
operator|==
name|_Fields
operator|.
name|BYTE_COLUMN
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|TByteValue
argument_list|>
operator|)
name|getFieldValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get field 'byteColumn' because union is currently set to "
operator|+
name|getFieldDesc
argument_list|(
name|getSetField
argument_list|()
argument_list|)
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setByteColumn
parameter_list|(
name|List
argument_list|<
name|TByteValue
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|setField_
operator|=
name|_Fields
operator|.
name|BYTE_COLUMN
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TI16Value
argument_list|>
name|getI16Column
parameter_list|()
block|{
if|if
condition|(
name|getSetField
argument_list|()
operator|==
name|_Fields
operator|.
name|I16_COLUMN
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|TI16Value
argument_list|>
operator|)
name|getFieldValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get field 'i16Column' because union is currently set to "
operator|+
name|getFieldDesc
argument_list|(
name|getSetField
argument_list|()
argument_list|)
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setI16Column
parameter_list|(
name|List
argument_list|<
name|TI16Value
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|setField_
operator|=
name|_Fields
operator|.
name|I16_COLUMN
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TI32Value
argument_list|>
name|getI32Column
parameter_list|()
block|{
if|if
condition|(
name|getSetField
argument_list|()
operator|==
name|_Fields
operator|.
name|I32_COLUMN
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|TI32Value
argument_list|>
operator|)
name|getFieldValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get field 'i32Column' because union is currently set to "
operator|+
name|getFieldDesc
argument_list|(
name|getSetField
argument_list|()
argument_list|)
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setI32Column
parameter_list|(
name|List
argument_list|<
name|TI32Value
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|setField_
operator|=
name|_Fields
operator|.
name|I32_COLUMN
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TI64Value
argument_list|>
name|getI64Column
parameter_list|()
block|{
if|if
condition|(
name|getSetField
argument_list|()
operator|==
name|_Fields
operator|.
name|I64_COLUMN
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|TI64Value
argument_list|>
operator|)
name|getFieldValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get field 'i64Column' because union is currently set to "
operator|+
name|getFieldDesc
argument_list|(
name|getSetField
argument_list|()
argument_list|)
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setI64Column
parameter_list|(
name|List
argument_list|<
name|TI64Value
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|setField_
operator|=
name|_Fields
operator|.
name|I64_COLUMN
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TDoubleValue
argument_list|>
name|getDoubleColumn
parameter_list|()
block|{
if|if
condition|(
name|getSetField
argument_list|()
operator|==
name|_Fields
operator|.
name|DOUBLE_COLUMN
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|TDoubleValue
argument_list|>
operator|)
name|getFieldValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get field 'doubleColumn' because union is currently set to "
operator|+
name|getFieldDesc
argument_list|(
name|getSetField
argument_list|()
argument_list|)
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setDoubleColumn
parameter_list|(
name|List
argument_list|<
name|TDoubleValue
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|setField_
operator|=
name|_Fields
operator|.
name|DOUBLE_COLUMN
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TStringValue
argument_list|>
name|getStringColumn
parameter_list|()
block|{
if|if
condition|(
name|getSetField
argument_list|()
operator|==
name|_Fields
operator|.
name|STRING_COLUMN
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|TStringValue
argument_list|>
operator|)
name|getFieldValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get field 'stringColumn' because union is currently set to "
operator|+
name|getFieldDesc
argument_list|(
name|getSetField
argument_list|()
argument_list|)
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setStringColumn
parameter_list|(
name|List
argument_list|<
name|TStringValue
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|setField_
operator|=
name|_Fields
operator|.
name|STRING_COLUMN
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSetBoolColumn
parameter_list|()
block|{
return|return
name|setField_
operator|==
name|_Fields
operator|.
name|BOOL_COLUMN
return|;
block|}
specifier|public
name|boolean
name|isSetByteColumn
parameter_list|()
block|{
return|return
name|setField_
operator|==
name|_Fields
operator|.
name|BYTE_COLUMN
return|;
block|}
specifier|public
name|boolean
name|isSetI16Column
parameter_list|()
block|{
return|return
name|setField_
operator|==
name|_Fields
operator|.
name|I16_COLUMN
return|;
block|}
specifier|public
name|boolean
name|isSetI32Column
parameter_list|()
block|{
return|return
name|setField_
operator|==
name|_Fields
operator|.
name|I32_COLUMN
return|;
block|}
specifier|public
name|boolean
name|isSetI64Column
parameter_list|()
block|{
return|return
name|setField_
operator|==
name|_Fields
operator|.
name|I64_COLUMN
return|;
block|}
specifier|public
name|boolean
name|isSetDoubleColumn
parameter_list|()
block|{
return|return
name|setField_
operator|==
name|_Fields
operator|.
name|DOUBLE_COLUMN
return|;
block|}
specifier|public
name|boolean
name|isSetStringColumn
parameter_list|()
block|{
return|return
name|setField_
operator|==
name|_Fields
operator|.
name|STRING_COLUMN
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|TColumn
condition|)
block|{
return|return
name|equals
argument_list|(
operator|(
name|TColumn
operator|)
name|other
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|TColumn
name|other
parameter_list|)
block|{
return|return
name|other
operator|!=
literal|null
operator|&&
name|getSetField
argument_list|()
operator|==
name|other
operator|.
name|getSetField
argument_list|()
operator|&&
name|getFieldValue
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getFieldValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TColumn
name|other
parameter_list|)
block|{
name|int
name|lastComparison
init|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|getSetField
argument_list|()
argument_list|,
name|other
operator|.
name|getSetField
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastComparison
operator|==
literal|0
condition|)
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|getFieldValue
argument_list|()
argument_list|,
name|other
operator|.
name|getFieldValue
argument_list|()
argument_list|)
return|;
block|}
return|return
name|lastComparison
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|hcb
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
name|hcb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
name|setField
init|=
name|getSetField
argument_list|()
decl_stmt|;
if|if
condition|(
name|setField
operator|!=
literal|null
condition|)
block|{
name|hcb
operator|.
name|append
argument_list|(
name|setField
operator|.
name|getThriftFieldId
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|getFieldValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TEnum
condition|)
block|{
name|hcb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TEnum
operator|)
name|getFieldValue
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hcb
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hcb
operator|.
name|toHashCode
argument_list|()
return|;
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

