begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hwi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|OptionsProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|SetProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistoryViewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * HWISessionItem can be viewed as a wrapper for a Hive shell. With it the user  * has a session on the web server rather then in a console window.  *   */
end_comment

begin_class
specifier|public
class|class
name|HWISessionItem
implements|implements
name|Runnable
implements|,
name|Comparable
argument_list|<
name|HWISessionItem
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|l4j
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HWISessionItem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** 	 * Represents the state a session item can be in. 	 *  	 */
specifier|public
enum|enum
name|WebSessionItemStatus
block|{
name|NEW
block|,
name|QUERY_SET
block|,
name|QUERY_RUNNING
block|,
name|QUERY_COMPLETE
block|,
name|DESTROY
block|,
name|KILL_QUERY
block|}
empty_stmt|;
specifier|private
name|String
name|sessionName
decl_stmt|;
specifier|private
name|HWISessionItem
operator|.
name|WebSessionItemStatus
name|status
decl_stmt|;
specifier|private
name|CliSessionState
name|ss
decl_stmt|;
specifier|private
name|SetProcessor
name|sp
decl_stmt|;
specifier|private
name|Driver
name|qp
decl_stmt|;
specifier|private
name|String
name|resultFile
decl_stmt|;
specifier|private
name|String
name|errorFile
decl_stmt|;
specifier|private
name|String
name|query
decl_stmt|;
specifier|private
name|int
name|queryRet
decl_stmt|;
name|HiveConf
name|conf
decl_stmt|;
name|Thread
name|runnable
decl_stmt|;
name|HWIAuth
name|auth
decl_stmt|;
specifier|private
name|String
name|historyFile
decl_stmt|;
comment|/** 	 * Creates an instance of WebSessionItem, sets status to NEW. 	 */
specifier|protected
name|HWISessionItem
parameter_list|()
block|{
name|l4j
operator|.
name|debug
argument_list|(
literal|"HWISessionItem created"
argument_list|)
expr_stmt|;
name|status
operator|=
name|WebSessionItemStatus
operator|.
name|NEW
expr_stmt|;
name|queryRet
operator|=
operator|-
literal|40
expr_stmt|;
name|runnable
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|runnable
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * This is the initialization process that is carried out for each 	 * SessionItem. The goal is to emulate the startup of CLIDriver. 	 */
specifier|protected
name|void
name|itemInit
parameter_list|()
block|{
name|l4j
operator|.
name|debug
argument_list|(
literal|"HWISessionItem itemInit start "
operator|+
name|this
operator|.
name|getSessionName
argument_list|()
argument_list|)
expr_stmt|;
name|OptionsProcessor
name|oproc
init|=
operator|new
name|OptionsProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hwi-args"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hwi-args"
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oproc
operator|.
name|process_stage1
argument_list|(
name|parts
argument_list|)
condition|)
block|{ 			}
block|}
name|SessionState
operator|.
name|initHiveLog4j
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
expr_stmt|;
name|ss
operator|=
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|sp
operator|=
operator|new
name|SetProcessor
argument_list|()
expr_stmt|;
name|qp
operator|=
operator|new
name|Driver
argument_list|()
expr_stmt|;
name|runSetProcessorQuery
argument_list|(
literal|"hadoop.job.ugi="
operator|+
name|auth
operator|.
name|getUser
argument_list|()
operator|+
literal|","
operator|+
name|auth
operator|.
name|getGroups
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|runSetProcessorQuery
argument_list|(
literal|"user.name="
operator|+
name|auth
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 		 * HiveHistoryFileName will not be accessible outside this thread. We must 		 * capture this now. 		 */
name|this
operator|.
name|historyFile
operator|=
name|this
operator|.
name|ss
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|getHistFileName
argument_list|()
expr_stmt|;
name|l4j
operator|.
name|debug
argument_list|(
literal|"HWISessionItem itemInit Complete "
operator|+
name|this
operator|.
name|getSessionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Set processor queries block for only a short amount of time. The client can 	 * issue these directly. 	 *  	 * @param query 	 *          This is a query in the form of SET THIS=THAT 	 * @return chained call to setProcessor.run(String) 	 */
specifier|public
name|int
name|runSetProcessorQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
return|return
name|sp
operator|.
name|run
argument_list|(
name|query
argument_list|)
return|;
block|}
comment|/** 	 * HWISessionItem is a Runnable instance. Calling this method will change the 	 * status to QUERY_SET and notify(). The run method detects this and then 	 * continues processing. 	 */
specifier|public
name|void
name|clientStart
parameter_list|()
throws|throws
name|HWIException
block|{
if|if
condition|(
name|this
operator|.
name|status
operator|==
name|WebSessionItemStatus
operator|.
name|QUERY_RUNNING
condition|)
block|{
throw|throw
operator|new
name|HWIException
argument_list|(
literal|"Query already running"
argument_list|)
throw|;
block|}
name|this
operator|.
name|status
operator|=
name|WebSessionItemStatus
operator|.
name|QUERY_SET
expr_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|runnable
init|)
block|{
name|this
operator|.
name|runnable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|l4j
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" Query is set to start"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clientKill
parameter_list|()
throws|throws
name|HWIException
block|{
if|if
condition|(
name|this
operator|.
name|status
operator|!=
name|WebSessionItemStatus
operator|.
name|QUERY_RUNNING
condition|)
block|{
throw|throw
operator|new
name|HWIException
argument_list|(
literal|"Can not kill that which is not running."
argument_list|)
throw|;
block|}
name|this
operator|.
name|status
operator|=
name|WebSessionItemStatus
operator|.
name|KILL_QUERY
expr_stmt|;
name|l4j
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" Query is set to KILL_QUERY"
argument_list|)
expr_stmt|;
block|}
comment|/** This method clears the private member variables. */
specifier|public
name|void
name|clientRenew
parameter_list|()
throws|throws
name|HWIException
block|{
if|if
condition|(
name|this
operator|.
name|status
operator|==
name|WebSessionItemStatus
operator|.
name|QUERY_RUNNING
condition|)
block|{
throw|throw
operator|new
name|HWIException
argument_list|(
literal|"Query already running"
argument_list|)
throw|;
block|}
name|this
operator|.
name|query
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|resultFile
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|errorFile
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|WebSessionItemStatus
operator|.
name|NEW
expr_stmt|;
name|this
operator|.
name|resultFile
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|conf
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ss
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|qp
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|sp
operator|=
literal|null
expr_stmt|;
name|l4j
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" Query is renewed to start"
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * This is a chained call to SessionState.setIsSilent(). Use this if you do 	 * not want the result file to have information status 	 */
specifier|public
name|void
name|setSSIsSilent
parameter_list|(
name|boolean
name|silent
parameter_list|)
throws|throws
name|HWIException
block|{
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
throw|throw
operator|new
name|HWIException
argument_list|(
literal|"Session State is null"
argument_list|)
throw|;
name|this
operator|.
name|ss
operator|.
name|setIsSilent
argument_list|(
name|silent
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * This is a chained call to SessionState.getIsSilent() 	 */
specifier|public
name|boolean
name|getSSIsSilent
parameter_list|()
throws|throws
name|HWIException
block|{
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
throw|throw
operator|new
name|HWIException
argument_list|(
literal|"Session State is null"
argument_list|)
throw|;
return|return
name|ss
operator|.
name|getIsSilent
argument_list|()
return|;
block|}
comment|/** 	 * This is a callback style function used by the HiveSessionManager. The 	 * HiveSessionManager notices this and attempts to stop the query. 	 */
specifier|protected
name|void
name|killIt
parameter_list|()
block|{
name|l4j
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" Attempting kill."
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|runnable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|runnable
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" Thread join complete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|l4j
operator|.
name|error
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" killing session caused exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Helper function to get configuration variables 	 *  	 * @param wanted 	 *          a ConfVar 	 * @return Value of the configuration variable. 	 */
specifier|public
name|String
name|getHiveConfVar
parameter_list|(
name|HiveConf
operator|.
name|ConfVars
name|wanted
parameter_list|)
throws|throws
name|HWIException
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|this
operator|.
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|wanted
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HWIException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|String
name|getHiveConfVar
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|HWIException
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|conf
operator|.
name|get
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HWIException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/* 	 * mapred.job.tracker could be host:port or just local 	 * mapred.job.tracker.http.address could be host:port or just host 	 * In some configurations http.address is set to 0.0.0.0 we are combining the two 	 * variables to provide a url to the job tracker WUI if it exists. If hadoop chose 	 * the first available port for the JobTracker HTTP port will can not determine it. 	 */
specifier|public
name|String
name|getJobTrackerURL
parameter_list|(
name|String
name|jobid
parameter_list|)
throws|throws
name|HWIException
block|{
name|String
name|jt
init|=
name|this
operator|.
name|getHiveConfVar
argument_list|(
literal|"mapred.job.tracker"
argument_list|)
decl_stmt|;
name|String
name|jth
init|=
name|this
operator|.
name|getHiveConfVar
argument_list|(
literal|"mapred.job.tracker.http.address"
argument_list|)
decl_stmt|;
name|String
index|[]
name|jtparts
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|jthttpParts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jt
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"local"
argument_list|)
condition|)
block|{
name|jtparts
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|jtparts
index|[
literal|0
index|]
operator|=
literal|"local"
expr_stmt|;
name|jtparts
index|[
literal|1
index|]
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|jtparts
operator|=
name|jt
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jth
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|jthttpParts
operator|=
name|jth
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jthttpParts
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|jthttpParts
index|[
literal|0
index|]
operator|=
name|jth
expr_stmt|;
name|jthttpParts
index|[
literal|1
index|]
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|jtparts
index|[
literal|0
index|]
operator|+
literal|":"
operator|+
name|jthttpParts
index|[
literal|1
index|]
operator|+
literal|"/jobdetails.jsp?jobid="
operator|+
name|jobid
operator|+
literal|"&refresh=30"
return|;
block|}
annotation|@
name|Override
comment|/* 	 * HWISessionItem uses a wait() notify() system. If the thread detects conf to 	 * be null, control is transfered to initItem().A status of QUERY_SET causes 	 * control to transfer to the runQuery() method. DESTROY will cause the run 	 * loop to end permanently. 	 */
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|runnable
init|)
block|{
while|while
condition|(
name|this
operator|.
name|status
operator|!=
name|HWISessionItem
operator|.
name|WebSessionItemStatus
operator|.
name|DESTROY
condition|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|itemInit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|status
operator|==
name|WebSessionItemStatus
operator|.
name|QUERY_SET
condition|)
block|{
name|this
operator|.
name|runQuery
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|runnable
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|l4j
operator|.
name|error
argument_list|(
literal|"in wait() state "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** 	 * This method calls the qp.run() method, writes the output to the result 	 * file, when finished the status will be QUERY_COMPLETE. 	 */
specifier|public
name|void
name|runQuery
parameter_list|()
block|{
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getResultFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|this
operator|.
name|resultFile
argument_list|)
argument_list|)
expr_stmt|;
name|ss
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|fos
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
name|fex
parameter_list|)
block|{
name|l4j
operator|.
name|error
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" opening resultfile "
operator|+
name|this
operator|.
name|resultFile
argument_list|,
name|fex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|uex
parameter_list|)
block|{
name|l4j
operator|.
name|error
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" opening resultfile "
operator|+
name|this
operator|.
name|resultFile
argument_list|,
name|uex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|l4j
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" Output file was not specified"
argument_list|)
expr_stmt|;
block|}
name|l4j
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" state is now QUERY_RUNNING."
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|WebSessionItemStatus
operator|.
name|QUERY_RUNNING
expr_stmt|;
name|queryRet
operator|=
name|qp
operator|.
name|run
argument_list|(
name|this
operator|.
name|query
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|qp
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|row
range|:
name|res
control|)
block|{
if|if
condition|(
name|ss
operator|.
name|out
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|l4j
operator|.
name|error
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" getting results "
operator|+
name|this
operator|.
name|getResultFile
argument_list|()
operator|+
literal|" caused exception."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|l4j
operator|.
name|error
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" closing result file "
operator|+
name|this
operator|.
name|getResultFile
argument_list|()
operator|+
literal|" caused exception."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|status
operator|=
name|WebSessionItemStatus
operator|.
name|QUERY_COMPLETE
expr_stmt|;
name|l4j
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" state is now QUERY_COMPLETE."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|HWISessionItem
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|this
operator|.
name|getSessionName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getSessionName
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @return the HiveHistoryViewer for the session 	 * @throws HWIException 	 */
specifier|public
name|HiveHistoryViewer
name|getHistoryViewer
parameter_list|()
throws|throws
name|HWIException
block|{
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
throw|throw
operator|new
name|HWIException
argument_list|(
literal|"Session state was null"
argument_list|)
throw|;
comment|/* 		 * we can not call this.ss.get().getHiveHistory().getHistFileName() directly 		 * as this call is made from a a Jetty thread and will return null 		 */
name|HiveHistoryViewer
name|hv
init|=
operator|new
name|HiveHistoryViewer
argument_list|(
name|this
operator|.
name|historyFile
argument_list|)
decl_stmt|;
return|return
name|hv
return|;
block|}
comment|/** 	 * Uses the sessionName property to compare to sessions 	 *  	 * @return true if sessionNames are equal false otherwise 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|HWISessionItem
operator|)
condition|)
return|return
literal|false
return|;
name|HWISessionItem
name|o
init|=
operator|(
name|HWISessionItem
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getSessionName
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getSessionName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|void
name|setQp
parameter_list|(
name|Driver
name|qp
parameter_list|)
block|{
name|this
operator|.
name|qp
operator|=
name|qp
expr_stmt|;
block|}
comment|/** 	 * The query executed by Hive 	 *  	 * @return The query that this is executing or will be executed 	 */
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
comment|/** 	 * Use this function to set the query that Hive will run. 	 *  	 * @param query 	 *          A query in Hive Query Language 	 */
specifier|public
name|void
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
comment|/** 	 * Used to determine the status of a query, possibly why it failed 	 *  	 * @return The result from Hive queryProcessor 	 */
specifier|public
name|int
name|getQueryRet
parameter_list|()
block|{
return|return
name|queryRet
return|;
block|}
specifier|protected
name|void
name|setQueryRet
parameter_list|(
name|int
name|queryRet
parameter_list|)
block|{
name|this
operator|.
name|queryRet
operator|=
name|queryRet
expr_stmt|;
block|}
specifier|public
name|String
name|getResultFile
parameter_list|()
block|{
return|return
name|resultFile
return|;
block|}
specifier|public
name|void
name|setResultFile
parameter_list|(
name|String
name|resultFile
parameter_list|)
block|{
name|this
operator|.
name|resultFile
operator|=
name|resultFile
expr_stmt|;
block|}
comment|/** 	 * The session name is an identifier to recognize the session 	 *  	 * @return the session's name 	 */
specifier|public
name|String
name|getSessionName
parameter_list|()
block|{
return|return
name|sessionName
return|;
block|}
specifier|protected
name|void
name|setSessionName
parameter_list|(
name|String
name|sessionName
parameter_list|)
block|{
name|this
operator|.
name|sessionName
operator|=
name|sessionName
expr_stmt|;
block|}
specifier|protected
name|SetProcessor
name|getSp
parameter_list|()
block|{
return|return
name|sp
return|;
block|}
specifier|protected
name|void
name|setSp
parameter_list|(
name|SetProcessor
name|sp
parameter_list|)
block|{
name|this
operator|.
name|sp
operator|=
name|sp
expr_stmt|;
block|}
specifier|protected
name|CliSessionState
name|getSs
parameter_list|()
block|{
return|return
name|ss
return|;
block|}
specifier|protected
name|void
name|setSs
parameter_list|(
name|CliSessionState
name|ss
parameter_list|)
block|{
name|this
operator|.
name|ss
operator|=
name|ss
expr_stmt|;
block|}
comment|/** 	 * Used to represent to the user and other components what state the 	 * HWISessionItem is in. Certain commands can only be run when the application 	 * is in certain states. 	 *  	 * @return the current status of the session 	 */
specifier|public
name|WebSessionItemStatus
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/** 	 * Currently unused 	 *  	 * @return a String with the full path to the error file. 	 */
specifier|public
name|String
name|getErrorFile
parameter_list|()
block|{
return|return
name|errorFile
return|;
block|}
comment|/** 	 * Currently unused 	 *  	 * @param errorFile 	 *          the full path to the file for results. 	 */
specifier|public
name|void
name|setErrorFile
parameter_list|(
name|String
name|errorFile
parameter_list|)
block|{
name|this
operator|.
name|errorFile
operator|=
name|errorFile
expr_stmt|;
block|}
comment|/** 	 * @return the auth 	 */
specifier|public
name|HWIAuth
name|getAuth
parameter_list|()
block|{
return|return
name|auth
return|;
block|}
comment|/** 	 * @param auth the auth to set 	 */
specifier|protected
name|void
name|setAuth
parameter_list|(
name|HWIAuth
name|auth
parameter_list|)
block|{
name|this
operator|.
name|auth
operator|=
name|auth
expr_stmt|;
block|}
block|}
end_class

end_unit

