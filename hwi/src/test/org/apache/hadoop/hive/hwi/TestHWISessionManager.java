begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hwi
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hwi
operator|.
name|HWIAuth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hwi
operator|.
name|HWISessionItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hwi
operator|.
name|HWISessionManager
import|;
end_import

begin_class
specifier|public
class|class
name|TestHWISessionManager
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|String
name|tableName
init|=
literal|"test_hwi_table"
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Path
name|dataFilePath
decl_stmt|;
specifier|private
name|HWISessionManager
name|hsm
decl_stmt|;
specifier|public
name|TestHWISessionManager
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestHWISessionManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|dataFileDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|dataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|hsm
operator|=
operator|new
name|HWISessionManager
argument_list|()
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|hsm
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|hsm
operator|.
name|setGoOn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|testHiveDriver
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create a user
name|HWIAuth
name|user1
init|=
operator|new
name|HWIAuth
argument_list|()
decl_stmt|;
name|user1
operator|.
name|setUser
argument_list|(
literal|"hadoop"
argument_list|)
expr_stmt|;
name|user1
operator|.
name|setGroups
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"hadoop"
block|}
argument_list|)
expr_stmt|;
comment|//create two sessions for user
name|HWISessionItem
name|user1_item1
init|=
name|hsm
operator|.
name|createSession
argument_list|(
name|user1
argument_list|,
literal|"session1"
argument_list|)
decl_stmt|;
name|HWISessionItem
name|user1_item2
init|=
name|hsm
operator|.
name|createSession
argument_list|(
name|user1
argument_list|,
literal|"session2"
argument_list|)
decl_stmt|;
comment|//create second user
name|HWIAuth
name|user2
init|=
operator|new
name|HWIAuth
argument_list|()
decl_stmt|;
name|user2
operator|.
name|setUser
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
name|user2
operator|.
name|setGroups
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"user2"
block|}
argument_list|)
expr_stmt|;
comment|//create one session for this user
name|HWISessionItem
name|user2_item1
init|=
name|hsm
operator|.
name|createSession
argument_list|(
name|user2
argument_list|,
literal|"session1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hsm
operator|.
name|findAllSessionsForUser
argument_list|(
name|user1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsm
operator|.
name|findAllSessionsForUser
argument_list|(
name|user2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsm
operator|.
name|findAllSessionItems
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|HWISessionItem
name|searchItem
init|=
name|hsm
operator|.
name|findSessionItemByName
argument_list|(
name|user1
argument_list|,
literal|"session1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|searchItem
argument_list|,
name|user1_item1
argument_list|)
expr_stmt|;
name|searchItem
operator|.
name|setQuery
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (key int, value string)"
argument_list|)
expr_stmt|;
name|searchItem
operator|.
name|clientStart
argument_list|()
expr_stmt|;
comment|//wait for the session manager to make the table it is non blocking api
while|while
condition|(
name|searchItem
operator|.
name|getStatus
argument_list|()
operator|!=
name|HWISessionItem
operator|.
name|WebSessionItemStatus
operator|.
name|QUERY_COMPLETE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|searchItem
operator|.
name|getQueryRet
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//start two queries simultaniously
name|user1_item2
operator|.
name|setQuery
argument_list|(
literal|"select distinct(test_hwi_table.key) from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|user2_item1
operator|.
name|setQuery
argument_list|(
literal|"select distinct(test_hwi_table.key) from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|user1_item2
operator|.
name|clientStart
argument_list|()
expr_stmt|;
name|user2_item1
operator|.
name|clientStart
argument_list|()
expr_stmt|;
while|while
condition|(
name|user1_item2
operator|.
name|getStatus
argument_list|()
operator|!=
name|HWISessionItem
operator|.
name|WebSessionItemStatus
operator|.
name|QUERY_COMPLETE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|user2_item1
operator|.
name|getStatus
argument_list|()
operator|!=
name|HWISessionItem
operator|.
name|WebSessionItemStatus
operator|.
name|QUERY_COMPLETE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|user1_item2
operator|.
name|getQueryRet
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user2_item1
operator|.
name|getQueryRet
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HWISessionItem
name|cleanup
init|=
name|hsm
operator|.
name|createSession
argument_list|(
name|user1
argument_list|,
literal|"cleanup"
argument_list|)
decl_stmt|;
name|cleanup
operator|.
name|setQuery
argument_list|(
literal|"drop table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|cleanup
operator|.
name|clientStart
argument_list|()
expr_stmt|;
while|while
condition|(
name|cleanup
operator|.
name|getStatus
argument_list|()
operator|!=
name|HWISessionItem
operator|.
name|WebSessionItemStatus
operator|.
name|QUERY_COMPLETE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|cleanup
operator|.
name|getQueryRet
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

