begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProviderBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * An AuthorizationProvider, which checks against the data access level permissions on HDFS.  * It makes sense to eventually move this class to Hive, so that all hive users can  * use this authorization model.   * @deprecated Use/modify {@link org.apache.hive.hcatalog.security.HdfsAuthorizationProvider} instead  */
end_comment

begin_class
specifier|public
class|class
name|HdfsAuthorizationProvider
extends|extends
name|HiveAuthorizationProviderBase
block|{
specifier|protected
name|Warehouse
name|wh
decl_stmt|;
comment|//Config variables : create an enum to store them if we have more
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_USER_NAME
init|=
literal|"proxy.user.name"
decl_stmt|;
specifier|public
name|HdfsAuthorizationProvider
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HdfsAuthorizationProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|hive_db
operator|=
operator|new
name|HiveProxy
argument_list|(
name|Hive
operator|.
name|get
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|,
name|HiveAuthorizationProvider
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|wh
operator|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|FsAction
name|getFsAction
parameter_list|(
name|Privilege
name|priv
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
switch|switch
condition|(
name|priv
operator|.
name|getPriv
argument_list|()
condition|)
block|{
case|case
name|ALL
case|:
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"no matching Action for Privilege.All"
argument_list|)
throw|;
case|case
name|ALTER_DATA
case|:
return|return
name|FsAction
operator|.
name|WRITE
return|;
case|case
name|ALTER_METADATA
case|:
return|return
name|FsAction
operator|.
name|WRITE
return|;
case|case
name|CREATE
case|:
return|return
name|FsAction
operator|.
name|WRITE
return|;
case|case
name|DROP
case|:
return|return
name|FsAction
operator|.
name|WRITE
return|;
case|case
name|INDEX
case|:
return|return
name|FsAction
operator|.
name|WRITE
return|;
case|case
name|LOCK
case|:
return|return
name|FsAction
operator|.
name|WRITE
return|;
case|case
name|SELECT
case|:
return|return
name|FsAction
operator|.
name|READ
return|;
case|case
name|SHOW_DATABASE
case|:
return|return
name|FsAction
operator|.
name|READ
return|;
case|case
name|UNKNOWN
case|:
default|default:
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"Unknown privilege"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|EnumSet
argument_list|<
name|FsAction
argument_list|>
name|getFsActions
parameter_list|(
name|Privilege
index|[]
name|privs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|FsAction
argument_list|>
name|actions
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FsAction
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|privs
operator|==
literal|null
condition|)
block|{
return|return
name|actions
return|;
block|}
for|for
control|(
name|Privilege
name|priv
range|:
name|privs
control|)
block|{
name|actions
operator|.
name|add
argument_list|(
name|getFsAction
argument_list|(
name|priv
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actions
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DATABASE_WAREHOUSE_SUFFIX
init|=
literal|".db"
decl_stmt|;
specifier|private
name|Path
name|getDefaultDatabasePath
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
condition|)
block|{
return|return
name|wh
operator|.
name|getWhRoot
argument_list|()
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|wh
operator|.
name|getWhRoot
argument_list|()
argument_list|,
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|+
name|DATABASE_WAREHOUSE_SUFFIX
argument_list|)
return|;
block|}
specifier|protected
name|Path
name|getDbLocation
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|String
name|location
init|=
name|db
operator|.
name|getLocationUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
return|return
name|getDefaultDatabasePath
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|wh
operator|.
name|getDnsPath
argument_list|(
name|wh
operator|.
name|getDatabasePath
argument_list|(
name|db
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|authorize
parameter_list|(
name|Privilege
index|[]
name|readRequiredPriv
parameter_list|,
name|Privilege
index|[]
name|writeRequiredPriv
parameter_list|)
throws|throws
name|HiveException
throws|,
name|AuthorizationException
block|{
comment|//Authorize for global level permissions at the warehouse dir
name|Path
name|root
decl_stmt|;
try|try
block|{
name|root
operator|=
name|wh
operator|.
name|getWhRoot
argument_list|()
expr_stmt|;
name|authorize
argument_list|(
name|root
argument_list|,
name|readRequiredPriv
argument_list|,
name|writeRequiredPriv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|authorize
parameter_list|(
name|Database
name|db
parameter_list|,
name|Privilege
index|[]
name|readRequiredPriv
parameter_list|,
name|Privilege
index|[]
name|writeRequiredPriv
parameter_list|)
throws|throws
name|HiveException
throws|,
name|AuthorizationException
block|{
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Path
name|path
init|=
name|getDbLocation
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|authorize
argument_list|(
name|path
argument_list|,
name|readRequiredPriv
argument_list|,
name|writeRequiredPriv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|authorize
parameter_list|(
name|Table
name|table
parameter_list|,
name|Privilege
index|[]
name|readRequiredPriv
parameter_list|,
name|Privilege
index|[]
name|writeRequiredPriv
parameter_list|)
throws|throws
name|HiveException
throws|,
name|AuthorizationException
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|//unlike Hive's model, this can be called at CREATE TABLE as well, since we should authorize
comment|//against the table's declared location
name|Path
name|path
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
operator|||
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|path
operator|=
name|wh
operator|.
name|getTablePath
argument_list|(
name|hive_db
operator|.
name|getDatabase
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|table
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|authorize
argument_list|(
name|path
argument_list|,
name|readRequiredPriv
argument_list|,
name|writeRequiredPriv
argument_list|)
expr_stmt|;
block|}
comment|//TODO: HiveAuthorizationProvider should expose this interface instead of #authorize(Partition, Privilege[], Privilege[])
specifier|public
name|void
name|authorize
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|part
parameter_list|,
name|Privilege
index|[]
name|readRequiredPriv
parameter_list|,
name|Privilege
index|[]
name|writeRequiredPriv
parameter_list|)
throws|throws
name|HiveException
throws|,
name|AuthorizationException
block|{
if|if
condition|(
name|part
operator|==
literal|null
operator|||
name|part
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|authorize
argument_list|(
name|table
argument_list|,
name|readRequiredPriv
argument_list|,
name|writeRequiredPriv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorize
argument_list|(
name|part
operator|.
name|getPartitionPath
argument_list|()
argument_list|,
name|readRequiredPriv
argument_list|,
name|writeRequiredPriv
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|authorize
parameter_list|(
name|Partition
name|part
parameter_list|,
name|Privilege
index|[]
name|readRequiredPriv
parameter_list|,
name|Privilege
index|[]
name|writeRequiredPriv
parameter_list|)
throws|throws
name|HiveException
throws|,
name|AuthorizationException
block|{
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|authorize
argument_list|(
name|part
operator|.
name|getTable
argument_list|()
argument_list|,
name|part
argument_list|,
name|readRequiredPriv
argument_list|,
name|writeRequiredPriv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|authorize
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|part
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|Privilege
index|[]
name|readRequiredPriv
parameter_list|,
name|Privilege
index|[]
name|writeRequiredPriv
parameter_list|)
throws|throws
name|HiveException
throws|,
name|AuthorizationException
block|{
comment|//columns cannot live in different files, just check for partition level permissions
name|authorize
argument_list|(
name|table
argument_list|,
name|part
argument_list|,
name|readRequiredPriv
argument_list|,
name|writeRequiredPriv
argument_list|)
expr_stmt|;
block|}
comment|/**      * Authorization privileges against a path.      * @param path a filesystem path      * @param readRequiredPriv a list of privileges needed for inputs.      * @param writeRequiredPriv a list of privileges needed for outputs.      */
specifier|public
name|void
name|authorize
parameter_list|(
name|Path
name|path
parameter_list|,
name|Privilege
index|[]
name|readRequiredPriv
parameter_list|,
name|Privilege
index|[]
name|writeRequiredPriv
parameter_list|)
throws|throws
name|HiveException
throws|,
name|AuthorizationException
block|{
try|try
block|{
name|EnumSet
argument_list|<
name|FsAction
argument_list|>
name|actions
init|=
name|getFsActions
argument_list|(
name|readRequiredPriv
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|actions
operator|.
name|addAll
argument_list|(
name|getFsActions
argument_list|(
name|writeRequiredPriv
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|actions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|checkPermissions
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|path
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Checks the permissions for the given path and current user on Hadoop FS. If the given path      * does not exists, it checks for it's parent folder.      */
specifier|protected
specifier|static
name|void
name|checkPermissions
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|FsAction
argument_list|>
name|actions
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path is null"
argument_list|)
throw|;
block|}
name|HadoopShims
name|shims
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|PROXY_USER_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|PROXY_USER_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ugi
operator|=
name|shims
operator|.
name|getUGIForConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|user
init|=
name|shims
operator|.
name|getShortUserName
argument_list|(
name|ugi
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|checkPermissions
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|actions
argument_list|,
name|user
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// find the ancestor which exists to check it's permissions
name|Path
name|par
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|par
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|par
argument_list|)
condition|)
block|{
break|break;
block|}
name|par
operator|=
name|par
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|checkPermissions
argument_list|(
name|fs
argument_list|,
name|par
argument_list|,
name|actions
argument_list|,
name|user
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks the permissions for the given path and current user on Hadoop FS. If the given path      * does not exists, it returns.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|protected
specifier|static
name|void
name|checkPermissions
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|FsAction
argument_list|>
name|actions
parameter_list|,
name|String
name|user
parameter_list|,
name|String
index|[]
name|groups
parameter_list|)
throws|throws
name|IOException
throws|,
name|AccessControlException
block|{
specifier|final
name|FileStatus
name|stat
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// File named by path doesn't exist; nothing to validate.
return|return;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AccessControlException
name|ace
parameter_list|)
block|{
comment|// Older hadoop version will throw this @deprecated Exception.
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|ace
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|FsPermission
name|dirPerms
init|=
name|stat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
specifier|final
name|String
name|grp
init|=
name|stat
operator|.
name|getGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|FsAction
name|action
range|:
name|actions
control|)
block|{
if|if
condition|(
name|user
operator|.
name|equals
argument_list|(
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|dirPerms
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|action
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|ArrayUtils
operator|.
name|contains
argument_list|(
name|groups
argument_list|,
name|grp
argument_list|)
condition|)
block|{
if|if
condition|(
name|dirPerms
operator|.
name|getGroupAction
argument_list|()
operator|.
name|implies
argument_list|(
name|action
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|dirPerms
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|action
argument_list|)
condition|)
block|{
continue|continue;
block|}
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"action "
operator|+
name|action
operator|+
literal|" not permitted on path "
operator|+
name|path
operator|+
literal|" for user "
operator|+
name|user
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

