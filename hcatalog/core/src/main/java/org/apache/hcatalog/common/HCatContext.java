begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * HCatContext is a singleton that provides global access to configuration data.  *  *<p>HCatalog provides a variety of functionality that users can configure at runtime through  * configuration properties. Available configuration properties are defined in  * {@link HCatConstants}. HCatContext allows users to enable optional functionality by  * setting properties in a provided configuration.</p>  *  *<p>HCatalog<em>users</em> (MR apps, processing framework adapters) should set properties  * in a configuration that has been provided to  * {@link #setConf(org.apache.hadoop.conf.Configuration)} to enable optional functionality.  * The job configuration must be used to ensure properties are passed to the backend MR tasks.</p>  *  *<p>HCatalog<em>developers</em> should enable optional functionality by checking properties  * from {@link #getConf()}. Since users are not obligated to set a configuration, optional  * functionality must provide a sensible default.</p>  */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
enum|enum
name|HCatContext
block|{
name|INSTANCE
block|;
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
comment|/**      * Use the given configuration for optional behavior. Keys exclusive to an existing config      * are set in the new conf. The job conf must be used to ensure properties are passed to      * backend MR tasks.      */
specifier|public
specifier|synchronized
name|HCatContext
name|setConf
parameter_list|(
name|Configuration
name|newConf
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|newConf
argument_list|,
literal|"Required parameter 'newConf' must not be null."
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|newConf
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|conf
operator|!=
name|newConf
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
control|)
block|{
if|if
condition|(
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|matches
argument_list|(
literal|"hcat.*"
argument_list|)
operator|)
operator|&&
operator|(
name|newConf
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
condition|)
block|{
name|newConf
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|=
name|newConf
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Get the configuration, if there is one. Users are not required to setup HCatContext      * unless they wish to override default behavior, so the configuration may not be present.      *      * @return an Optional that might contain a Configuration      */
specifier|public
name|Optional
argument_list|<
name|Configuration
argument_list|>
name|getConf
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|fromNullable
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

