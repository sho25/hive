begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * @deprecated Use/modify {@link org.apache.hive.hcatalog.mapreduce.InternalUtil} instead  */
end_comment

begin_class
class|class
name|InternalUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InternalUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|StorerInfo
name|extractStorerInfo
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|hcatProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|hcatProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// also populate with StorageDescriptor->SerDe.Parameters
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|param
range|:
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|hcatProperties
operator|.
name|put
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StorerInfo
argument_list|(
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
argument_list|,
name|hcatProperties
argument_list|)
return|;
block|}
specifier|static
name|StructObjectInspector
name|createStructObjectInspector
parameter_list|(
name|HCatSchema
name|outputSchema
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|outputSchema
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid output schema specified"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|hcatFieldSchema
range|:
name|outputSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
name|TypeInfo
name|type
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|hcatFieldSchema
operator|.
name|getTypeString
argument_list|()
argument_list|)
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
name|hcatFieldSchema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldInspectors
operator|.
name|add
argument_list|(
name|getObjectInspector
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|structInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldInspectors
argument_list|)
decl_stmt|;
return|return
name|structInspector
return|;
block|}
specifier|private
specifier|static
name|ObjectInspector
name|getObjectInspector
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|PrimitiveTypeInfo
name|primitiveType
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|type
decl_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|primitiveType
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
return|;
case|case
name|MAP
case|:
name|MapTypeInfo
name|mapType
init|=
operator|(
name|MapTypeInfo
operator|)
name|type
decl_stmt|;
name|MapObjectInspector
name|mapInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|getObjectInspector
argument_list|(
name|mapType
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
argument_list|,
name|getObjectInspector
argument_list|(
name|mapType
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|mapInspector
return|;
case|case
name|LIST
case|:
name|ListTypeInfo
name|listType
init|=
operator|(
name|ListTypeInfo
operator|)
name|type
decl_stmt|;
name|ListObjectInspector
name|listInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|getObjectInspector
argument_list|(
name|listType
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|listInspector
return|;
case|case
name|STRUCT
case|:
name|StructTypeInfo
name|structType
init|=
operator|(
name|StructTypeInfo
operator|)
name|type
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypes
init|=
name|structType
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeInfo
name|fieldType
range|:
name|fieldTypes
control|)
block|{
name|fieldInspectors
operator|.
name|add
argument_list|(
name|getObjectInspector
argument_list|(
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|structInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|structType
operator|.
name|getAllStructFieldNames
argument_list|()
argument_list|,
name|fieldInspectors
argument_list|)
decl_stmt|;
return|return
name|structInspector
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown field schema type"
argument_list|)
throw|;
block|}
block|}
comment|//TODO this has to find a better home, it's also hardcoded as default in hive would be nice
comment|// if the default was decided by the serde
specifier|static
name|void
name|initializeOutputSerDe
parameter_list|(
name|SerDe
name|serDe
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|OutputJobInfo
name|jobInfo
parameter_list|)
throws|throws
name|SerDeException
block|{
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|getSerdeProperties
argument_list|(
name|jobInfo
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|jobInfo
operator|.
name|getOutputSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|initializeDeserializer
parameter_list|(
name|Deserializer
name|deserializer
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HCatTableInfo
name|info
parameter_list|,
name|HCatSchema
name|schema
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Properties
name|props
init|=
name|getSerdeProperties
argument_list|(
name|info
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing "
operator|+
name|deserializer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" with properties "
operator|+
name|props
argument_list|)
expr_stmt|;
name|deserializer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Properties
name|getSerdeProperties
parameter_list|(
name|HCatTableInfo
name|info
parameter_list|,
name|HCatSchema
name|s
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|HCatUtil
operator|.
name|getFieldSchemaList
argument_list|(
name|s
operator|.
name|getFields
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
comment|// setting these props to match LazySimpleSerde
name|props
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
literal|"\\N"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|//add props from params set in table schema
name|props
operator|.
name|putAll
argument_list|(
name|info
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|static
name|Reporter
name|createReporter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ProgressReporter
argument_list|(
name|context
argument_list|)
return|;
block|}
comment|/**      * Casts an InputSplit into a HCatSplit, providing a useful error message if the cast fails.      * @param split the InputSplit      * @return the HCatSplit      * @throws IOException      */
specifier|public
specifier|static
name|HCatSplit
name|castToHCatSplit
parameter_list|(
name|InputSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|split
operator|instanceof
name|HCatSplit
condition|)
block|{
return|return
operator|(
name|HCatSplit
operator|)
name|split
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Split must be "
operator|+
name|HCatSplit
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" but found "
operator|+
name|split
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createPtnKeyValueMap
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|ptn
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|ptn
operator|.
name|getValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|!=
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Partition values in partition inconsistent with table definition, table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" has "
operator|+
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" partition keys, partition has "
operator|+
name|values
operator|.
name|size
argument_list|()
operator|+
literal|"partition values"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ptnKeyValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldSchema
name|schema
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
comment|// CONCERN : the way this mapping goes, the order *needs* to be
comment|// preserved for table.getPartitionKeys() and ptn.getValues()
name|ptnKeyValues
operator|.
name|put
argument_list|(
name|schema
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|ptnKeyValues
return|;
block|}
block|}
end_class

end_unit

