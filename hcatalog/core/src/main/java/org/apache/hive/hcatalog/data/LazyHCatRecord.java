begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of HCatRecord that wraps an Object returned by a SerDe  * and an ObjectInspector.  This delays deserialization of unused columns.  */
end_comment

begin_class
specifier|public
class|class
name|LazyHCatRecord
extends|extends
name|HCatRecord
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazyHCatRecord
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Object
name|wrappedObject
decl_stmt|;
specifier|private
name|StructObjectInspector
name|soi
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|fieldNum
parameter_list|)
block|{
try|try
block|{
name|StructField
name|fref
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
name|fieldNum
argument_list|)
decl_stmt|;
return|return
name|HCatRecordSerDe
operator|.
name|serializeField
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|wrappedObject
argument_list|,
name|fref
argument_list|)
argument_list|,
name|fref
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"SerDe Exception deserializing"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getAll
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|this
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|int
name|fieldNum
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not allowed to run set() on LazyHCatRecord"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"LazyHCatRecord is intended to wrap"
operator|+
literal|" an object/object inspector as a HCatRecord "
operator|+
literal|"- it does not need to be read from DataInput."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"LazyHCatRecord is intended to wrap"
operator|+
literal|" an object/object inspector as a HCatRecord "
operator|+
literal|"- it does not need to be written to a DataOutput."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|HCatSchema
name|recordSchema
parameter_list|)
throws|throws
name|HCatException
block|{
name|int
name|idx
init|=
name|recordSchema
operator|.
name|getPosition
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|HCatSchema
name|recordSchema
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|HCatException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not allowed to run set() on LazyHCatRecord"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|int
name|idx
parameter_list|)
throws|throws
name|HCatException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not allowed to run remove() on LazyHCatRecord"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
name|HCatRecord
name|r
parameter_list|)
throws|throws
name|HCatException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not allowed to run copy() on LazyHCatRecord"
argument_list|)
throw|;
block|}
specifier|public
name|LazyHCatRecord
parameter_list|(
name|Object
name|wrappedObject
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" can only make a lazy hcat record from "
operator|+
literal|"objects of struct types, but we got: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|soi
operator|=
operator|(
name|StructObjectInspector
operator|)
name|oi
expr_stmt|;
name|this
operator|.
name|wrappedObject
operator|=
name|wrappedObject
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\t"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Convert this LazyHCatRecord to a DefaultHCatRecord.  This is required      * before you can write out a record via write.      * @return an HCatRecord that can be serialized      * @throws HCatException      */
specifier|public
name|HCatRecord
name|getWritable
parameter_list|()
throws|throws
name|HCatException
block|{
name|DefaultHCatRecord
name|d
init|=
operator|new
name|DefaultHCatRecord
argument_list|()
decl_stmt|;
name|d
operator|.
name|copy
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
block|}
end_class

end_unit

