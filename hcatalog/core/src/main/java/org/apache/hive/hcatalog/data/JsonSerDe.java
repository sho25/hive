begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|FloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|TimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|BaseCharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TimestampParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SerDeSpec
argument_list|(
name|schemaProps
operator|=
block|{
name|serdeConstants
operator|.
name|LIST_COLUMNS
block|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
block|,
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
block|}
argument_list|)
specifier|public
class|class
name|JsonSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonSerDe
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|private
name|HCatSchema
name|schema
decl_stmt|;
specifier|private
name|JsonFactory
name|jsonFactory
init|=
literal|null
decl_stmt|;
specifier|private
name|HCatRecordObjectInspector
name|cachedObjectInspector
decl_stmt|;
specifier|private
name|TimestampParser
name|tsParser
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
decl_stmt|;
name|StructTypeInfo
name|rowTypeInfo
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing JsonSerDe: {}"
argument_list|,
name|tbl
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get column names and types
name|String
name|columnNameProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
name|String
name|columnTypeProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnNameDelimiter
init|=
name|tbl
operator|.
name|containsKey
argument_list|(
name|serdeConstants
operator|.
name|COLUMN_NAME_DELIMITER
argument_list|)
condition|?
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|COLUMN_NAME_DELIMITER
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|SerDeUtils
operator|.
name|COMMA
argument_list|)
decl_stmt|;
comment|// all table column names
if|if
condition|(
name|columnNameProperty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|columnNames
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
name|columnNameDelimiter
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// all column types
if|if
condition|(
name|columnTypeProperty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|columnTypes
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnTypes
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"columns: {}, {}"
argument_list|,
name|columnNameProperty
argument_list|,
name|columnNames
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"types: {}, {} "
argument_list|,
name|columnTypeProperty
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|columnNames
operator|.
name|size
argument_list|()
operator|==
name|columnTypes
operator|.
name|size
argument_list|()
operator|)
assert|;
name|rowTypeInfo
operator|=
operator|(
name|StructTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
name|cachedObjectInspector
operator|=
name|HCatRecordObjectInspectorFactory
operator|.
name|getHCatRecordObjectInspector
argument_list|(
name|rowTypeInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|schema
operator|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
name|rowTypeInfo
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStructSubSchema
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"schema : {}"
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fields : {}"
argument_list|,
name|schema
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|jsonFactory
operator|=
operator|new
name|JsonFactory
argument_list|()
expr_stmt|;
name|tsParser
operator|=
operator|new
name|TimestampParser
argument_list|(
name|HiveStringUtils
operator|.
name|splitAndUnEscape
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Takes JSON string in Text form, and has to return an object representation above    * it that's readable by the corresponding object inspector.    *    * For this implementation, since we're using the jackson parser, we can construct    * our own object implementation, and we use HCatRecord for it    */
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Text
name|t
init|=
operator|(
name|Text
operator|)
name|blob
decl_stmt|;
name|JsonParser
name|p
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|p
operator|=
name|jsonFactory
operator|.
name|createJsonParser
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
name|t
operator|.
name|getBytes
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|nextToken
argument_list|()
operator|!=
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Start token not found where expected"
argument_list|)
throw|;
block|}
name|JsonToken
name|token
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|token
operator|=
name|p
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|JsonToken
operator|.
name|END_OBJECT
operator|)
operator|&&
operator|(
name|token
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// iterate through each token, and create appropriate object here.
name|populateRecord
argument_list|(
name|r
argument_list|,
name|token
argument_list|,
name|p
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JsonParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error [{}] parsing json text [{}]."
argument_list|,
name|e
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error [{}] parsing json text [{}]."
argument_list|,
name|e
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|DefaultHCatRecord
argument_list|(
name|r
argument_list|)
return|;
block|}
specifier|private
name|void
name|populateRecord
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|r
parameter_list|,
name|JsonToken
name|token
parameter_list|,
name|JsonParser
name|p
parameter_list|,
name|HCatSchema
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|token
operator|!=
name|JsonToken
operator|.
name|FIELD_NAME
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Field name expected"
argument_list|)
throw|;
block|}
name|String
name|fieldName
init|=
name|p
operator|.
name|getText
argument_list|()
decl_stmt|;
name|Integer
name|fpos
init|=
name|s
operator|.
name|getPosition
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fpos
operator|==
literal|null
condition|)
block|{
name|fpos
operator|=
name|getPositionFromHiveInternalColumnName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"NPE finding position for field [{}] in schema [{}],"
operator|+
literal|" attempting to check if it is an internal column name like _col0"
argument_list|,
name|fieldName
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|fpos
operator|==
operator|-
literal|1
condition|)
block|{
name|skipValue
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return;
comment|// unknown field, we return. We'll continue from the next field onwards.
block|}
comment|// If we get past this, then the column name did match the hive pattern for an internal
comment|// column name, such as _col0, etc, so it *MUST* match the schema for the appropriate column.
comment|// This means people can't use arbitrary column names such as _col0, and expect us to ignore it
comment|// if we find it.
if|if
condition|(
operator|!
name|fieldName
operator|.
name|equalsIgnoreCase
argument_list|(
name|getHiveInternalColumnName
argument_list|(
name|fpos
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Hive internal column name {} and position "
operator|+
literal|"encoding {} for the column name are at odds"
argument_list|,
name|fieldName
argument_list|,
name|fpos
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Hive internal column name ("
operator|+
name|fieldName
operator|+
literal|") and position encoding ("
operator|+
name|fpos
operator|+
literal|") for the column name are at odds"
argument_list|)
throw|;
block|}
comment|// If we reached here, then we were successful at finding an alternate internal
comment|// column mapping, and we're about to proceed.
block|}
name|HCatFieldSchema
name|hcatFieldSchema
init|=
name|s
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
name|fpos
argument_list|)
decl_stmt|;
name|Object
name|currField
init|=
name|extractCurrentField
argument_list|(
name|p
argument_list|,
name|hcatFieldSchema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
name|fpos
argument_list|,
name|currField
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getHiveInternalColumnName
parameter_list|(
name|int
name|fpos
parameter_list|)
block|{
return|return
name|HiveConf
operator|.
name|getColumnInternalName
argument_list|(
name|fpos
argument_list|)
return|;
block|}
specifier|public
name|int
name|getPositionFromHiveInternalColumnName
parameter_list|(
name|String
name|internalName
parameter_list|)
block|{
comment|//    return HiveConf.getPositionFromInternalName(fieldName);
comment|// The above line should have been all the implementation that
comment|// we need, but due to a bug in that impl which recognizes
comment|// only single-digit columns, we need another impl here.
name|Pattern
name|internalPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"_col([0-9]+)"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|internalPattern
operator|.
name|matcher
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Utility method to extract (and forget) the next value token from the JsonParser,    * as a whole. The reason this function gets called is to yank out the next value altogether,    * because it corresponds to a field name that we do not recognize, and thus, do not have    * a schema/type for. Thus, this field is to be ignored.    * @throws IOException    * @throws JsonParseException    */
specifier|private
name|void
name|skipValue
parameter_list|(
name|JsonParser
name|p
parameter_list|)
throws|throws
name|JsonParseException
throws|,
name|IOException
block|{
name|JsonToken
name|valueToken
init|=
name|p
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|START_ARRAY
operator|)
operator|||
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|START_OBJECT
operator|)
condition|)
block|{
comment|// if the currently read token is a beginning of an array or object, move stream forward
comment|// skipping any child tokens till we're at the corresponding END_ARRAY or END_OBJECT token
name|p
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
comment|// At the end of this function, the stream should be pointing to the last token that
comment|// corresponds to the value being skipped. This way, the next call to nextToken
comment|// will advance it to the next field name.
block|}
comment|/**    * Utility method to extract current expected field from given JsonParser    *    * isTokenCurrent is a boolean variable also passed in, which determines    * if the JsonParser is already at the token we expect to read next, or    * needs advancing to the next before we read.    */
specifier|private
name|Object
name|extractCurrentField
parameter_list|(
name|JsonParser
name|p
parameter_list|,
name|HCatFieldSchema
name|hcatFieldSchema
parameter_list|,
name|boolean
name|isTokenCurrent
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|val
init|=
literal|null
decl_stmt|;
name|JsonToken
name|valueToken
decl_stmt|;
if|if
condition|(
name|isTokenCurrent
condition|)
block|{
name|valueToken
operator|=
name|p
operator|.
name|getCurrentToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|valueToken
operator|=
name|p
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|hcatFieldSchema
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|INT
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getIntValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|TINYINT
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getByteValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|SMALLINT
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getShortValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BIGINT
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getLongValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|String
name|bval
init|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|bval
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|bval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
literal|null
expr_stmt|;
block|}
break|break;
case|case
name|FLOAT
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getFloatValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getDoubleValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getText
argument_list|()
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|String
name|b
init|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|t
init|=
name|Text
operator|.
name|decode
argument_list|(
name|b
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|t
operator|.
name|getBytes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error generating json binary type from object."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|val
operator|=
literal|null
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|Date
operator|.
name|valueOf
argument_list|(
name|p
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|tsParser
operator|.
name|parseTimestamp
argument_list|(
name|p
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
name|HiveDecimal
operator|.
name|create
argument_list|(
name|p
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|int
name|vLen
init|=
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|hcatFieldSchema
operator|.
name|getTypeInfo
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
operator|new
name|HiveVarchar
argument_list|(
name|p
operator|.
name|getText
argument_list|()
argument_list|,
name|vLen
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|int
name|cLen
init|=
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|hcatFieldSchema
operator|.
name|getTypeInfo
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|val
operator|=
operator|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
operator|)
condition|?
literal|null
else|:
operator|new
name|HiveChar
argument_list|(
name|p
operator|.
name|getText
argument_list|()
argument_list|,
name|cLen
argument_list|)
expr_stmt|;
break|break;
case|case
name|ARRAY
case|:
if|if
condition|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
condition|)
block|{
name|val
operator|=
literal|null
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|valueToken
operator|!=
name|JsonToken
operator|.
name|START_ARRAY
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Start of Array expected"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|arr
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|valueToken
operator|=
name|p
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|JsonToken
operator|.
name|END_ARRAY
condition|)
block|{
name|arr
operator|.
name|add
argument_list|(
name|extractCurrentField
argument_list|(
name|p
argument_list|,
name|hcatFieldSchema
operator|.
name|getArrayElementSchema
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|arr
expr_stmt|;
break|break;
case|case
name|MAP
case|:
if|if
condition|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
condition|)
block|{
name|val
operator|=
literal|null
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|valueToken
operator|!=
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Start of Object expected"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|HCatFieldSchema
name|valueSchema
init|=
name|hcatFieldSchema
operator|.
name|getMapValueSchema
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|valueToken
operator|=
name|p
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
name|Object
name|k
init|=
name|getObjectOfCorrespondingPrimitiveType
argument_list|(
name|p
operator|.
name|getCurrentName
argument_list|()
argument_list|,
name|hcatFieldSchema
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|v
init|=
name|extractCurrentField
argument_list|(
name|p
argument_list|,
name|valueSchema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|map
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
if|if
condition|(
name|valueToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
condition|)
block|{
name|val
operator|=
literal|null
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|valueToken
operator|!=
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Start of Object expected"
argument_list|)
throw|;
block|}
name|HCatSchema
name|subSchema
init|=
name|hcatFieldSchema
operator|.
name|getStructSubSchema
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|subSchema
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|struct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|sz
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|valueToken
operator|=
name|p
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
name|populateRecord
argument_list|(
name|struct
argument_list|,
name|valueToken
argument_list|,
name|p
argument_list|,
name|subSchema
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|struct
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown type found: "
operator|+
name|hcatFieldSchema
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|val
return|;
block|}
specifier|private
name|Object
name|getObjectOfCorrespondingPrimitiveType
parameter_list|(
name|String
name|s
parameter_list|,
name|PrimitiveTypeInfo
name|mapKeyType
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|Type
operator|.
name|getPrimitiveHType
argument_list|(
name|mapKeyType
argument_list|)
condition|)
block|{
case|case
name|INT
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|TINYINT
case|:
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|SMALLINT
case|:
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|BIGINT
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
operator|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|s
return|;
case|case
name|BINARY
case|:
try|try
block|{
name|String
name|t
init|=
name|Text
operator|.
name|decode
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|t
operator|.
name|getBytes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error generating json binary type from object."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|DATE
case|:
return|return
name|Date
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
name|s
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|HiveVarchar
argument_list|(
name|s
argument_list|,
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|mapKeyType
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|HiveChar
argument_list|(
name|s
argument_list|,
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|mapKeyType
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not convert from string to map type "
operator|+
name|mapKeyType
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Given an object and object inspector pair, traverse the object    * and generate a Text representation of the object.    */
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|columnNames
operator|.
name|size
argument_list|()
operator|==
name|structFields
operator|.
name|size
argument_list|()
operator|)
assert|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|LBRACE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|structFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|COMMA
argument_list|)
expr_stmt|;
block|}
name|appendWithQuotes
argument_list|(
name|sb
argument_list|,
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|COLON
argument_list|)
expr_stmt|;
name|buildJSONString
argument_list|(
name|sb
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|obj
argument_list|,
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|RBRACE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error generating json text from object."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|Text
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|StringBuilder
name|appendWithQuotes
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|sb
operator|==
literal|null
condition|?
literal|null
else|:
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|QUOTE
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|QUOTE
argument_list|)
return|;
block|}
comment|// TODO : code section copied over from SerDeUtils because of non-standard json production there
comment|// should use quotes for all field names. We should fix this there, and then remove this copy.
comment|// See http://jackson.codehaus.org/1.7.3/javadoc/org/codehaus/jackson/JsonParser.Feature.html#ALLOW_UNQUOTED_FIELD_NAMES
comment|// for details - trying to enable Jackson to ignore that doesn't seem to work(compilation failure
comment|// when attempting to use that feature, so having to change the production itself.
comment|// Also, throws IOException when Binary is detected.
specifier|private
specifier|static
name|void
name|buildJSONString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|boolean
name|b
init|=
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|b
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|BYTE
case|:
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SHORT
case|:
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INT
case|:
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|IntObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LONG
case|:
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|LongObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FLOAT
case|:
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE
case|:
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING
case|:
block|{
name|String
name|s
init|=
name|SerDeUtils
operator|.
name|escapeString
argument_list|(
operator|(
operator|(
name|StringObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
argument_list|)
decl_stmt|;
name|appendWithQuotes
argument_list|(
name|sb
argument_list|,
name|s
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|BINARY
case|:
name|byte
index|[]
name|b
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|Text
name|txt
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|txt
operator|.
name|set
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|appendWithQuotes
argument_list|(
name|sb
argument_list|,
name|SerDeUtils
operator|.
name|escapeString
argument_list|(
name|txt
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|Date
name|d
init|=
operator|(
operator|(
name|DateObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|appendWithQuotes
argument_list|(
name|sb
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|Timestamp
name|t
init|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|appendWithQuotes
argument_list|(
name|sb
argument_list|,
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DECIMAL
case|:
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
block|{
name|String
name|s
init|=
name|SerDeUtils
operator|.
name|escapeString
argument_list|(
operator|(
operator|(
name|HiveVarcharObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|appendWithQuotes
argument_list|(
name|sb
argument_list|,
name|s
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CHAR
case|:
block|{
comment|//this should use HiveChar.getPaddedValue() but it's protected; currently (v0.13)
comment|// HiveChar.toString() returns getPaddedValue()
name|String
name|s
init|=
name|SerDeUtils
operator|.
name|escapeString
argument_list|(
operator|(
operator|(
name|HiveCharObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|appendWithQuotes
argument_list|(
name|sb
argument_list|,
name|s
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown primitive type: "
operator|+
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|ObjectInspector
name|listElementObjectInspector
init|=
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|olist
init|=
name|loi
operator|.
name|getList
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|olist
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|LBRACKET
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|olist
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|COMMA
argument_list|)
expr_stmt|;
block|}
name|buildJSONString
argument_list|(
name|sb
argument_list|,
name|olist
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|listElementObjectInspector
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|RBRACKET
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|ObjectInspector
name|mapKeyObjectInspector
init|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|mapValueObjectInspector
init|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|omap
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|omap
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|LBRACE
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|entry
range|:
name|omap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|COMMA
argument_list|)
expr_stmt|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|entry
decl_stmt|;
name|StringBuilder
name|keyBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buildJSONString
argument_list|(
name|keyBuilder
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapKeyObjectInspector
argument_list|)
expr_stmt|;
name|String
name|keyString
init|=
name|keyBuilder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|keyString
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|keyString
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
name|SerDeUtils
operator|.
name|QUOTE
operator|)
condition|)
block|{
name|appendWithQuotes
argument_list|(
name|sb
argument_list|,
name|keyString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|keyString
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|COLON
argument_list|)
expr_stmt|;
name|buildJSONString
argument_list|(
name|sb
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapValueObjectInspector
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|RBRACE
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|LBRACE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|structFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|COMMA
argument_list|)
expr_stmt|;
block|}
name|appendWithQuotes
argument_list|(
name|sb
argument_list|,
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|COLON
argument_list|)
expr_stmt|;
name|buildJSONString
argument_list|(
name|sb
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|o
argument_list|,
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|RBRACE
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|LBRACE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|uoi
operator|.
name|getTag
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|COLON
argument_list|)
expr_stmt|;
name|buildJSONString
argument_list|(
name|sb
argument_list|,
name|uoi
operator|.
name|getField
argument_list|(
name|o
argument_list|)
argument_list|,
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
operator|.
name|get
argument_list|(
name|uoi
operator|.
name|getTag
argument_list|(
name|o
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|RBRACE
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type in ObjectInspector!"
argument_list|)
throw|;
block|}
block|}
comment|/**    *  Returns an object inspector for the specified schema that    *  is capable of reading in the object representation of the JSON string    */
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|cachedObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|Text
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
comment|// no support for statistics yet
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

