begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskInputOutputContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The MultiOutputFormat class simplifies writing output data to multiple  * outputs.  *<p>  * Multiple output formats can be defined each with its own  *<code>OutputFormat</code> class, own key class and own value class. Any  * configuration on these output format classes can be done without interfering  * with other output format's configuration.  *<p>  * Usage pattern for job submission:  *  *<pre>  *  * Job job = new Job();  *  * FileInputFormat.setInputPath(job, inDir);  *  * job.setMapperClass(WordCountMap.class);  * job.setReducerClass(WordCountReduce.class);  * job.setInputFormatClass(TextInputFormat.class);  * job.setOutputFormatClass(MultiOutputFormat.class);  * // Need not define OutputKeyClass and OutputValueClass. They default to  * // Writable.class  * job.setMapOutputKeyClass(Text.class);  * job.setMapOutputValueClass(IntWritable.class);  *  *  * // Create a JobConfigurer that will configure the job with the multiple  * // output format information.  * JobConfigurer configurer = MultiOutputFormat.createConfigurer(job);  *  * // Defines additional single text based output 'text' for the job.  * // Any configuration for the defined OutputFormat should be done with  * // the Job obtained with configurer.getJob() method.  * configurer.addOutputFormat("text", TextOutputFormat.class,  *                 IntWritable.class, Text.class);  * FileOutputFormat.setOutputPath(configurer.getJob("text"), textOutDir);  *  * // Defines additional sequence-file based output 'sequence' for the job  * configurer.addOutputFormat("sequence", SequenceFileOutputFormat.class,  *                 Text.class, IntWritable.class);  * FileOutputFormat.setOutputPath(configurer.getJob("sequence"), seqOutDir);  * ...  * // configure method to be called on the JobConfigurer once all the  * // output formats have been defined and configured.  * configurer.configure();  *  * job.waitForCompletion(true);  * ...  *</pre>  *<p>  * Usage in Reducer:  *  *<pre>  * public class WordCountReduce extends  *         Reducer&lt;Text, IntWritable, Writable, Writable&gt; {  *  *     private IntWritable count = new IntWritable();  *  *     public void reduce(Text word, Iterator&lt;IntWritable&gt; values,  *             Context context)  *             throws IOException {  *         int sum = 0;  *         for (IntWritable val : values) {  *             sum += val.get();  *         }  *         count.set(sum);  *         MultiOutputFormat.write(&quot;text&quot;, count, word, context);  *         MultiOutputFormat.write(&quot;sequence&quot;, word, count, context);  *     }  *  * }  *  *</pre>  *  * Map only jobs:  *<p>  * MultiOutputFormat.write("output", key, value, context); can be called similar  * to a reducer in map only jobs.  *  */
end_comment

begin_class
specifier|public
class|class
name|MultiOutputFormat
extends|extends
name|OutputFormat
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultiOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MO_ALIASES
init|=
literal|"mapreduce.multiout.aliases"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MO_ALIAS
init|=
literal|"mapreduce.multiout.alias"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_KEY_DELIM
init|=
literal|"%%"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_VALUE_DELIM
init|=
literal|";;"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMMA_DELIM
init|=
literal|","
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|configsToOverride
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configsToMerge
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|configsToOverride
operator|.
name|add
argument_list|(
literal|"mapred.output.dir"
argument_list|)
expr_stmt|;
name|configsToOverride
operator|.
name|add
argument_list|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getHCatShim
argument_list|()
operator|.
name|getPropertyName
argument_list|(
name|HadoopShims
operator|.
name|HCatHadoopShims
operator|.
name|PropertyName
operator|.
name|CACHE_SYMLINK
argument_list|)
argument_list|)
expr_stmt|;
name|configsToMerge
operator|.
name|put
argument_list|(
name|JobContext
operator|.
name|JOB_NAMENODES
argument_list|,
name|COMMA_DELIM
argument_list|)
expr_stmt|;
name|configsToMerge
operator|.
name|put
argument_list|(
literal|"tmpfiles"
argument_list|,
name|COMMA_DELIM
argument_list|)
expr_stmt|;
name|configsToMerge
operator|.
name|put
argument_list|(
literal|"tmpjars"
argument_list|,
name|COMMA_DELIM
argument_list|)
expr_stmt|;
name|configsToMerge
operator|.
name|put
argument_list|(
literal|"tmparchives"
argument_list|,
name|COMMA_DELIM
argument_list|)
expr_stmt|;
name|configsToMerge
operator|.
name|put
argument_list|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getHCatShim
argument_list|()
operator|.
name|getPropertyName
argument_list|(
name|HadoopShims
operator|.
name|HCatHadoopShims
operator|.
name|PropertyName
operator|.
name|CACHE_ARCHIVES
argument_list|)
argument_list|,
name|COMMA_DELIM
argument_list|)
expr_stmt|;
name|configsToMerge
operator|.
name|put
argument_list|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getHCatShim
argument_list|()
operator|.
name|getPropertyName
argument_list|(
name|HadoopShims
operator|.
name|HCatHadoopShims
operator|.
name|PropertyName
operator|.
name|CACHE_FILES
argument_list|)
argument_list|,
name|COMMA_DELIM
argument_list|)
expr_stmt|;
name|String
name|fileSep
decl_stmt|;
if|if
condition|(
name|HCatUtil
operator|.
name|isHadoop23
argument_list|()
condition|)
block|{
name|fileSep
operator|=
literal|","
expr_stmt|;
block|}
else|else
block|{
name|fileSep
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
expr_stmt|;
block|}
name|configsToMerge
operator|.
name|put
argument_list|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getHCatShim
argument_list|()
operator|.
name|getPropertyName
argument_list|(
name|HadoopShims
operator|.
name|HCatHadoopShims
operator|.
name|PropertyName
operator|.
name|CLASSPATH_ARCHIVES
argument_list|)
argument_list|,
name|fileSep
argument_list|)
expr_stmt|;
name|configsToMerge
operator|.
name|put
argument_list|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getHCatShim
argument_list|()
operator|.
name|getPropertyName
argument_list|(
name|HadoopShims
operator|.
name|HCatHadoopShims
operator|.
name|PropertyName
operator|.
name|CLASSPATH_FILES
argument_list|)
argument_list|,
name|fileSep
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a JobConfigurer instance that will support configuration of the job    * for multiple output formats.    *    * @param job the mapreduce job to be submitted    * @return JobConfigurer    */
specifier|public
specifier|static
name|JobConfigurer
name|createConfigurer
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
return|return
name|JobConfigurer
operator|.
name|create
argument_list|(
name|job
argument_list|)
return|;
block|}
comment|/**    * Get the JobContext with the related OutputFormat configuration populated given the alias    * and the actual JobContext    * @param alias the name given to the OutputFormat configuration    * @param context the JobContext    * @return a copy of the JobContext with the alias configuration populated    */
specifier|public
specifier|static
name|JobContext
name|getJobContext
parameter_list|(
name|String
name|alias
parameter_list|,
name|JobContext
name|context
parameter_list|)
block|{
name|String
name|aliasConf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|getAliasConfName
argument_list|(
name|alias
argument_list|)
argument_list|)
decl_stmt|;
name|JobContext
name|aliasContext
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getHCatShim
argument_list|()
operator|.
name|createJobContext
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|context
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|addToConfig
argument_list|(
name|aliasConf
argument_list|,
name|aliasContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|aliasContext
return|;
block|}
comment|/**    * Get the TaskAttemptContext with the related OutputFormat configuration populated given the alias    * and the actual TaskAttemptContext    * @param alias the name given to the OutputFormat configuration    * @param context the Mapper or Reducer Context    * @return a copy of the TaskAttemptContext with the alias configuration populated    */
specifier|public
specifier|static
name|TaskAttemptContext
name|getTaskAttemptContext
parameter_list|(
name|String
name|alias
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
name|String
name|aliasConf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|getAliasConfName
argument_list|(
name|alias
argument_list|)
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|aliasContext
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getHCatShim
argument_list|()
operator|.
name|createTaskAttemptContext
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
name|addToConfig
argument_list|(
name|aliasConf
argument_list|,
name|aliasContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|aliasContext
return|;
block|}
comment|/**    * Write the output key and value using the OutputFormat defined by the    * alias.    *    * @param alias the name given to the OutputFormat configuration    * @param key the output key to be written    * @param value the output value to be written    * @param context the Mapper or Reducer Context    * @throws IOException    * @throws InterruptedException    */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|write
parameter_list|(
name|String
name|alias
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|TaskInputOutputContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|KeyValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|keyval
init|=
operator|new
name|KeyValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
name|alias
argument_list|)
argument_list|,
name|keyval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|String
name|alias
range|:
name|getOutputFormatAliases
argument_list|(
name|context
argument_list|)
control|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Calling checkOutputSpecs for alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|JobContext
name|aliasContext
init|=
name|getJobContext
argument_list|(
name|alias
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outputFormat
init|=
name|getOutputFormatInstance
argument_list|(
name|aliasContext
argument_list|)
decl_stmt|;
name|outputFormat
operator|.
name|checkOutputSpecs
argument_list|(
name|aliasContext
argument_list|)
expr_stmt|;
comment|// Copy credentials and any new config added back to JobContext
name|context
operator|.
name|getCredentials
argument_list|()
operator|.
name|addAll
argument_list|(
name|aliasContext
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|setAliasConf
argument_list|(
name|alias
argument_list|,
name|context
argument_list|,
name|aliasContext
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RecordWriter
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|MultiRecordWriter
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OutputCommitter
name|getOutputCommitter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|MultiOutputCommitter
argument_list|(
name|context
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getOutputFormatInstance
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outputFormat
decl_stmt|;
try|try
block|{
name|outputFormat
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|context
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|outputFormat
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|getOutputFormatAliases
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getStrings
argument_list|(
name|MO_ALIASES
argument_list|)
return|;
block|}
comment|/**    * Compare the aliasContext with userJob and add the differing configuration    * as mapreduce.multiout.alias.<aliasname>.conf to the userJob.    *<p>    * Merge config like tmpjars, tmpfile, tmparchives,    * mapreduce.job.hdfs-servers that are directly handled by JobClient and add    * them to userJob.    *<p>    * Add mapred.output.dir config to userJob.    *    * @param alias alias name associated with a OutputFormat    * @param userJob reference to Job that the user is going to submit    * @param aliasContext JobContext populated with OutputFormat related    *            configuration.    */
specifier|private
specifier|static
name|void
name|setAliasConf
parameter_list|(
name|String
name|alias
parameter_list|,
name|JobContext
name|userJob
parameter_list|,
name|JobContext
name|aliasContext
parameter_list|)
block|{
name|Configuration
name|userConf
init|=
name|userJob
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
range|:
name|aliasContext
operator|.
name|getConfiguration
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|conf
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|conf
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|jobValue
init|=
name|userConf
operator|.
name|getRaw
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobValue
operator|==
literal|null
operator|||
operator|!
name|jobValue
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|configsToMerge
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
name|mergedValue
init|=
name|getMergedConfValue
argument_list|(
name|jobValue
argument_list|,
name|value
argument_list|,
name|configsToMerge
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|userConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|mergedValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configsToOverride
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|userConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
name|CONF_KEY_DELIM
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|CONF_VALUE_DELIM
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
name|CONF_VALUE_DELIM
operator|.
name|length
argument_list|()
condition|)
block|{
name|builder
operator|.
name|delete
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
name|CONF_VALUE_DELIM
operator|.
name|length
argument_list|()
argument_list|,
name|builder
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|userConf
operator|.
name|set
argument_list|(
name|getAliasConfName
argument_list|(
name|alias
argument_list|)
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getMergedConfValue
parameter_list|(
name|String
name|originalValues
parameter_list|,
name|String
name|newValues
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
name|originalValues
operator|==
literal|null
condition|)
block|{
return|return
name|newValues
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|mergedValues
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|mergedValues
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|StringUtils
operator|.
name|split
argument_list|(
name|originalValues
argument_list|,
name|separator
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mergedValues
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|StringUtils
operator|.
name|split
argument_list|(
name|newValues
argument_list|,
name|separator
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|originalValues
operator|.
name|length
argument_list|()
operator|+
name|newValues
operator|.
name|length
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|mergedValues
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|builder
operator|.
name|length
argument_list|()
operator|-
name|separator
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getAliasConfName
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
return|return
name|MO_ALIAS
operator|+
literal|"."
operator|+
name|alias
operator|+
literal|".conf"
return|;
block|}
specifier|private
specifier|static
name|void
name|addToConfig
parameter_list|(
name|String
name|aliasConf
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
index|[]
name|config
init|=
name|aliasConf
operator|.
name|split
argument_list|(
name|CONF_KEY_DELIM
operator|+
literal|"|"
operator|+
name|CONF_VALUE_DELIM
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|config
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|config
index|[
name|i
index|]
argument_list|,
name|config
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Class that supports configuration of the job for multiple output formats.    */
specifier|public
specifier|static
class|class
name|JobConfigurer
block|{
specifier|private
specifier|final
name|Job
name|job
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Job
argument_list|>
name|outputConfigs
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Job
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|JobConfigurer
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
block|}
specifier|private
specifier|static
name|JobConfigurer
name|create
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|JobConfigurer
name|configurer
init|=
operator|new
name|JobConfigurer
argument_list|(
name|job
argument_list|)
decl_stmt|;
return|return
name|configurer
return|;
block|}
comment|/**      * Add a OutputFormat configuration to the Job with a alias name.      *      * @param alias the name to be given to the OutputFormat configuration      * @param outputFormatClass OutputFormat class      * @param keyClass the key class for the output data      * @param valueClass the value class for the output data      * @throws IOException      */
specifier|public
name|void
name|addOutputFormat
parameter_list|(
name|String
name|alias
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|outputFormatClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|valueClass
parameter_list|)
throws|throws
name|IOException
block|{
name|Job
name|copy
init|=
operator|new
name|Job
argument_list|(
name|this
operator|.
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|outputConfigs
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setOutputFormatClass
argument_list|(
name|outputFormatClass
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setOutputKeyClass
argument_list|(
name|keyClass
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setOutputValueClass
argument_list|(
name|valueClass
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the Job configuration for a OutputFormat defined by the alias      * name. The job returned by this method should be passed to the      * OutputFormat for any configuration instead of the Job that will be      * submitted to the JobClient.      *      * @param alias the name used for the OutputFormat during      *            addOutputFormat      * @return Job      */
specifier|public
name|Job
name|getJob
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|Job
name|copy
init|=
name|outputConfigs
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|copy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OutputFormat with alias "
operator|+
name|alias
operator|+
literal|" has not beed added"
argument_list|)
throw|;
block|}
return|return
name|copy
return|;
block|}
comment|/**      * Configure the job with the multiple output formats added. This method      * should be called after all the output formats have been added and      * configured and before the job submission.      */
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|StringBuilder
name|aliases
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Configuration
name|jobConf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Job
argument_list|>
name|entry
range|:
name|outputConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Copy credentials
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|aliases
operator|.
name|append
argument_list|(
name|alias
argument_list|)
operator|.
name|append
argument_list|(
name|COMMA_DELIM
argument_list|)
expr_stmt|;
comment|// Store the differing configuration for each alias in the job
comment|// as a setting.
name|setAliasConf
argument_list|(
name|alias
argument_list|,
name|job
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|aliases
operator|.
name|delete
argument_list|(
name|aliases
operator|.
name|length
argument_list|()
operator|-
name|COMMA_DELIM
operator|.
name|length
argument_list|()
argument_list|,
name|aliases
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|MO_ALIASES
argument_list|,
name|aliases
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|KeyValue
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Writable
block|{
specifier|private
specifier|final
name|K
name|key
decl_stmt|;
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
specifier|public
name|KeyValue
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Ignore. Not required as this will be never
comment|// serialized/deserialized.
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Ignore. Not required as this will be never
comment|// serialized/deserialized.
block|}
block|}
specifier|private
specifier|static
class|class
name|MultiRecordWriter
extends|extends
name|RecordWriter
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BaseRecordWriterContainer
argument_list|>
name|baseRecordWriters
decl_stmt|;
specifier|public
name|MultiRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|baseRecordWriters
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|BaseRecordWriterContainer
argument_list|>
argument_list|()
expr_stmt|;
name|String
index|[]
name|aliases
init|=
name|getOutputFormatAliases
argument_list|(
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Creating record writer for alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|TaskAttemptContext
name|aliasContext
init|=
name|getTaskAttemptContext
argument_list|(
name|alias
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Configuration
name|aliasConf
init|=
name|aliasContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Create output directory if not already created.
name|String
name|outDir
init|=
name|aliasConf
operator|.
name|get
argument_list|(
literal|"mapred.output.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|outDir
operator|!=
literal|null
condition|)
block|{
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|outputDir
operator|.
name|getFileSystem
argument_list|(
name|aliasConf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|outputDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
block|}
block|}
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outputFormat
init|=
name|getOutputFormatInstance
argument_list|(
name|aliasContext
argument_list|)
decl_stmt|;
name|baseRecordWriters
operator|.
name|put
argument_list|(
name|alias
argument_list|,
operator|new
name|BaseRecordWriterContainer
argument_list|(
name|outputFormat
operator|.
name|getRecordWriter
argument_list|(
name|aliasContext
argument_list|)
argument_list|,
name|aliasContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Text
name|_key
init|=
operator|(
name|Text
operator|)
name|key
decl_stmt|;
name|KeyValue
name|_value
init|=
operator|(
name|KeyValue
operator|)
name|value
decl_stmt|;
name|String
name|alias
init|=
operator|new
name|String
argument_list|(
name|_key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|_key
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|BaseRecordWriterContainer
name|baseRWContainer
init|=
name|baseRecordWriters
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseRWContainer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OutputFormat with alias "
operator|+
name|alias
operator|+
literal|" has not been added"
argument_list|)
throw|;
block|}
name|baseRWContainer
operator|.
name|getRecordWriter
argument_list|()
operator|.
name|write
argument_list|(
name|_value
operator|.
name|getKey
argument_list|()
argument_list|,
name|_value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|BaseRecordWriterContainer
argument_list|>
name|entry
range|:
name|baseRecordWriters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BaseRecordWriterContainer
name|baseRWContainer
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Closing record writer for alias: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|baseRWContainer
operator|.
name|getRecordWriter
argument_list|()
operator|.
name|close
argument_list|(
name|baseRWContainer
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|BaseRecordWriterContainer
block|{
specifier|private
specifier|final
name|RecordWriter
name|recordWriter
decl_stmt|;
specifier|private
specifier|final
name|TaskAttemptContext
name|context
decl_stmt|;
specifier|public
name|BaseRecordWriterContainer
parameter_list|(
name|RecordWriter
name|recordWriter
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|recordWriter
operator|=
name|recordWriter
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|RecordWriter
name|getRecordWriter
parameter_list|()
block|{
return|return
name|recordWriter
return|;
block|}
specifier|public
name|TaskAttemptContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
block|}
specifier|public
class|class
name|MultiOutputCommitter
extends|extends
name|OutputCommitter
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BaseOutputCommitterContainer
argument_list|>
name|outputCommitters
decl_stmt|;
specifier|public
name|MultiOutputCommitter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|outputCommitters
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|MultiOutputFormat
operator|.
name|BaseOutputCommitterContainer
argument_list|>
argument_list|()
expr_stmt|;
name|String
index|[]
name|aliases
init|=
name|getOutputFormatAliases
argument_list|(
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Creating output committer for alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|TaskAttemptContext
name|aliasContext
init|=
name|getTaskAttemptContext
argument_list|(
name|alias
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|OutputCommitter
name|baseCommitter
init|=
name|getOutputFormatInstance
argument_list|(
name|aliasContext
argument_list|)
operator|.
name|getOutputCommitter
argument_list|(
name|aliasContext
argument_list|)
decl_stmt|;
name|outputCommitters
operator|.
name|put
argument_list|(
name|alias
argument_list|,
operator|new
name|BaseOutputCommitterContainer
argument_list|(
name|baseCommitter
argument_list|,
name|aliasContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|alias
range|:
name|outputCommitters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Calling setupJob for alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|BaseOutputCommitterContainer
name|outputContainer
init|=
name|outputCommitters
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|outputContainer
operator|.
name|getBaseCommitter
argument_list|()
operator|.
name|setupJob
argument_list|(
name|outputContainer
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|alias
range|:
name|outputCommitters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Calling setupTask for alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|BaseOutputCommitterContainer
name|outputContainer
init|=
name|outputCommitters
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|outputContainer
operator|.
name|getBaseCommitter
argument_list|()
operator|.
name|setupTask
argument_list|(
name|outputContainer
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|needTaskCommit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|outputCommitters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|BaseOutputCommitterContainer
name|outputContainer
init|=
name|outputCommitters
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|needTaskCommit
operator|=
name|needTaskCommit
operator|||
name|outputContainer
operator|.
name|getBaseCommitter
argument_list|()
operator|.
name|needsTaskCommit
argument_list|(
name|outputContainer
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|needTaskCommit
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|alias
range|:
name|outputCommitters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|BaseOutputCommitterContainer
name|outputContainer
init|=
name|outputCommitters
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|OutputCommitter
name|baseCommitter
init|=
name|outputContainer
operator|.
name|getBaseCommitter
argument_list|()
decl_stmt|;
name|TaskAttemptContext
name|committerContext
init|=
name|outputContainer
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseCommitter
operator|.
name|needsTaskCommit
argument_list|(
name|committerContext
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Calling commitTask for alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|baseCommitter
operator|.
name|commitTask
argument_list|(
name|committerContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|alias
range|:
name|outputCommitters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Calling abortTask for alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|BaseOutputCommitterContainer
name|outputContainer
init|=
name|outputCommitters
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|outputContainer
operator|.
name|getBaseCommitter
argument_list|()
operator|.
name|abortTask
argument_list|(
name|outputContainer
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|alias
range|:
name|outputCommitters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Calling commitJob for alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|BaseOutputCommitterContainer
name|outputContainer
init|=
name|outputCommitters
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|outputContainer
operator|.
name|getBaseCommitter
argument_list|()
operator|.
name|commitJob
argument_list|(
name|outputContainer
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|alias
range|:
name|outputCommitters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Calling abortJob for alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|BaseOutputCommitterContainer
name|outputContainer
init|=
name|outputCommitters
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|outputContainer
operator|.
name|getBaseCommitter
argument_list|()
operator|.
name|abortJob
argument_list|(
name|outputContainer
operator|.
name|getContext
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|BaseOutputCommitterContainer
block|{
specifier|private
specifier|final
name|OutputCommitter
name|outputCommitter
decl_stmt|;
specifier|private
specifier|final
name|TaskAttemptContext
name|context
decl_stmt|;
specifier|public
name|BaseOutputCommitterContainer
parameter_list|(
name|OutputCommitter
name|outputCommitter
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|outputCommitter
operator|=
name|outputCommitter
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|OutputCommitter
name|getBaseCommitter
parameter_list|()
block|{
return|return
name|outputCommitter
return|;
block|}
specifier|public
name|TaskAttemptContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
block|}
block|}
end_class

end_unit

