begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|FosterStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|InputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|PartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|StorerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|HCatUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HCatUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveConfCodeDefaults
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|HiveClientCache
name|hiveClientCache
decl_stmt|;
static|static
block|{
comment|// Load all of the default config values from HiveConf.
name|hiveConfCodeDefaults
operator|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveConf
operator|.
name|ConfVars
name|var
range|:
name|HiveConf
operator|.
name|ConfVars
operator|.
name|values
argument_list|()
control|)
block|{
name|hiveConfCodeDefaults
operator|.
name|put
argument_list|(
name|var
operator|.
name|toString
argument_list|()
argument_list|,
name|var
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|checkJobContextIfRunningFromBackend
parameter_list|(
name|JobContext
name|j
parameter_list|)
block|{
if|if
condition|(
name|j
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"pig.job.converted.fetch"
argument_list|,
literal|""
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|j
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"mapred.task.id"
argument_list|,
literal|""
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
operator|(
literal|"true"
operator|.
name|equals
argument_list|(
name|j
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"pig.illustrating"
argument_list|)
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|String
name|serialize
parameter_list|(
name|Serializable
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
try|try
block|{
name|ByteArrayOutputStream
name|serialObj
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|objStream
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|serialObj
argument_list|)
decl_stmt|;
name|objStream
operator|.
name|writeObject
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|objStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|encodeBytes
argument_list|(
name|serialObj
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Serialization error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|deserialize
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|ByteArrayInputStream
name|serialObj
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|decodeBytes
argument_list|(
name|str
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInputStream
name|objStream
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|serialObj
argument_list|)
decl_stmt|;
return|return
name|objStream
operator|.
name|readObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Deserialization error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|encodeBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|bytes
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decodeBytes
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|getHCatFieldSchemaList
parameter_list|(
name|FieldSchema
modifier|...
name|fields
parameter_list|)
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|(
name|fields
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|f
range|:
name|fields
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|getHCatFieldSchemaList
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
parameter_list|)
throws|throws
name|HCatException
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|f
range|:
name|fields
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|public
specifier|static
name|HCatSchema
name|extractSchema
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
operator|new
name|HCatSchema
argument_list|(
name|HCatUtil
operator|.
name|getHCatFieldSchemaList
argument_list|(
name|table
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HCatSchema
name|extractSchema
parameter_list|(
name|Partition
name|partition
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
operator|new
name|HCatSchema
argument_list|(
name|HCatUtil
operator|.
name|getHCatFieldSchemaList
argument_list|(
name|partition
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldSchemaList
parameter_list|(
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|hcatFields
parameter_list|)
block|{
if|if
condition|(
name|hcatFields
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|f
range|:
name|hcatFields
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getFieldSchema
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|public
specifier|static
name|Table
name|getTable
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|MetaException
block|{
return|return
operator|new
name|Table
argument_list|(
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HCatSchema
name|getTableSchemaWithPtnCols
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|HCatSchema
name|tableSchema
init|=
operator|new
name|HCatSchema
argument_list|(
name|HCatUtil
operator|.
name|getHCatFieldSchemaList
argument_list|(
name|table
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// add partition keys to table schema
comment|// NOTE : this assumes that we do not ever have ptn keys as columns
comment|// inside the table schema as well!
for|for
control|(
name|FieldSchema
name|fs
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|tableSchema
operator|.
name|append
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableSchema
return|;
block|}
comment|/**    * return the partition columns from a table instance    *    * @param table the instance to extract partition columns from    * @return HCatSchema instance which contains the partition columns    * @throws IOException    */
specifier|public
specifier|static
name|HCatSchema
name|getPartitionColumns
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|HCatSchema
name|cols
init|=
operator|new
name|HCatSchema
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|FieldSchema
name|fs
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|cols
operator|.
name|append
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cols
return|;
block|}
comment|/**    * Validate partition schema, checks if the column types match between the    * partition and the existing table schema. Returns the list of columns    * present in the partition but not in the table.    *    * @param table the table    * @param partitionSchema the partition schema    * @return the list of newly added fields    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|validatePartitionSchema
parameter_list|(
name|Table
name|table
parameter_list|,
name|HCatSchema
name|partitionSchema
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FieldSchema
argument_list|>
name|partitionKeyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|partitionKeyMap
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|tableCols
init|=
name|table
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newFields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionSchema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldSchema
name|field
init|=
name|HCatSchemaUtils
operator|.
name|getFieldSchema
argument_list|(
name|partitionSchema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|FieldSchema
name|tableField
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|tableCols
operator|.
name|size
argument_list|()
condition|)
block|{
name|tableField
operator|=
name|tableCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tableField
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_SCHEMA_COLUMN_MISMATCH
argument_list|,
literal|"Expected column<"
operator|+
name|tableField
operator|.
name|getName
argument_list|()
operator|+
literal|"> at position "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|", found column<"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|">"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|tableField
operator|=
name|partitionKeyMap
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableField
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_SCHEMA_PARTITION_KEY
argument_list|,
literal|"Key<"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|">"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|tableField
operator|==
literal|null
condition|)
block|{
comment|// field present in partition but not in table
name|newFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// field present in both. validate type has not changed
name|TypeInfo
name|partitionType
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|TypeInfo
name|tableType
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|tableField
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|partitionType
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Column<"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|">, expected<"
operator|+
name|tableType
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">, got<"
operator|+
name|partitionType
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_SCHEMA_TYPE_MISMATCH
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|newFields
return|;
block|}
comment|/**    * Test if the first FsAction is more permissive than the second. This is    * useful in cases where we want to ensure that a file owner has more    * permissions than the group they belong to, for eg. More completely(but    * potentially more cryptically) owner-r>= group-r>= world-r : bitwise    * and-masked with 0444 => 444>= 440>= 400>= 000 owner-w>= group-w>=    * world-w : bitwise and-masked with&0222 => 222>= 220>= 200>= 000    * owner-x>= group-x>= world-x : bitwise and-masked with&0111 => 111>=    * 110>= 100>= 000    *    * @return true if first FsAction is more permissive than the second, false    *         if not.    */
specifier|public
specifier|static
name|boolean
name|validateMorePermissive
parameter_list|(
name|FsAction
name|first
parameter_list|,
name|FsAction
name|second
parameter_list|)
block|{
if|if
condition|(
operator|(
name|first
operator|==
name|FsAction
operator|.
name|ALL
operator|)
operator|||
operator|(
name|second
operator|==
name|FsAction
operator|.
name|NONE
operator|)
operator|||
operator|(
name|first
operator|==
name|second
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
switch|switch
condition|(
name|first
condition|)
block|{
case|case
name|READ_EXECUTE
case|:
return|return
operator|(
operator|(
name|second
operator|==
name|FsAction
operator|.
name|READ
operator|)
operator|||
operator|(
name|second
operator|==
name|FsAction
operator|.
name|EXECUTE
operator|)
operator|)
return|;
case|case
name|READ_WRITE
case|:
return|return
operator|(
operator|(
name|second
operator|==
name|FsAction
operator|.
name|READ
operator|)
operator|||
operator|(
name|second
operator|==
name|FsAction
operator|.
name|WRITE
operator|)
operator|)
return|;
case|case
name|WRITE_EXECUTE
case|:
return|return
operator|(
operator|(
name|second
operator|==
name|FsAction
operator|.
name|WRITE
operator|)
operator|||
operator|(
name|second
operator|==
name|FsAction
operator|.
name|EXECUTE
operator|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Ensure that read or write permissions are not granted without also    * granting execute permissions. Essentially, r-- , rw- and -w- are invalid,    * r-x, -wx, rwx, ---, --x are valid    *    * @param perms The FsAction to verify    * @return true if the presence of read or write permission is accompanied    *         by execute permissions    */
specifier|public
specifier|static
name|boolean
name|validateExecuteBitPresentIfReadOrWrite
parameter_list|(
name|FsAction
name|perms
parameter_list|)
block|{
if|if
condition|(
operator|(
name|perms
operator|==
name|FsAction
operator|.
name|READ
operator|)
operator|||
operator|(
name|perms
operator|==
name|FsAction
operator|.
name|WRITE
operator|)
operator|||
operator|(
name|perms
operator|==
name|FsAction
operator|.
name|READ_WRITE
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|Token
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
argument_list|>
name|getJobTrackerDelegationToken
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// LOG.info("getJobTrackerDelegationToken("+conf+","+userName+")");
name|JobClient
name|jcl
init|=
operator|new
name|JobClient
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|HCatOutputFormat
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
argument_list|>
name|t
init|=
name|jcl
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
name|userName
argument_list|)
argument_list|)
decl_stmt|;
comment|// LOG.info("got "+t);
return|return
name|t
return|;
comment|// return null;
block|}
specifier|public
specifier|static
name|Token
argument_list|<
name|?
extends|extends
name|AbstractDelegationTokenIdentifier
argument_list|>
name|extractThriftToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|,
name|String
name|tokenSignature
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|IOException
block|{
comment|// LOG.info("extractThriftToken("+tokenStrForm+","+tokenSignature+")");
name|Token
argument_list|<
name|?
extends|extends
name|AbstractDelegationTokenIdentifier
argument_list|>
name|t
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|t
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
name|t
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|tokenSignature
argument_list|)
argument_list|)
expr_stmt|;
comment|// LOG.info("returning "+t);
return|return
name|t
return|;
block|}
comment|/**    * Create an instance of a storage handler defined in storerInfo. If one cannot be found    * then FosterStorageHandler is used to encapsulate the InputFormat, OutputFormat and SerDe.    * This StorageHandler assumes the other supplied storage artifacts are for a file-based storage system.    * @param conf job's configuration will be used to configure the Configurable StorageHandler    * @param storerInfo StorerInfo to definining the StorageHandler and InputFormat, OutputFormat and SerDe    * @return storageHandler instance    * @throws IOException    */
specifier|public
specifier|static
name|HiveStorageHandler
name|getStorageHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|StorerInfo
name|storerInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getStorageHandler
argument_list|(
name|conf
argument_list|,
name|storerInfo
operator|.
name|getStorageHandlerClass
argument_list|()
argument_list|,
name|storerInfo
operator|.
name|getSerdeClass
argument_list|()
argument_list|,
name|storerInfo
operator|.
name|getIfClass
argument_list|()
argument_list|,
name|storerInfo
operator|.
name|getOfClass
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HiveStorageHandler
name|getStorageHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PartInfo
name|partitionInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HCatUtil
operator|.
name|getStorageHandler
argument_list|(
name|conf
argument_list|,
name|partitionInfo
operator|.
name|getStorageHandlerClassName
argument_list|()
argument_list|,
name|partitionInfo
operator|.
name|getSerdeClassName
argument_list|()
argument_list|,
name|partitionInfo
operator|.
name|getInputFormatClassName
argument_list|()
argument_list|,
name|partitionInfo
operator|.
name|getOutputFormatClassName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create an instance of a storage handler. If storageHandler == null,    * then surrrogate StorageHandler is used to encapsulate the InputFormat, OutputFormat and SerDe.    * This StorageHandler assumes the other supplied storage artifacts are for a file-based storage system.    * @param conf job's configuration will be used to configure the Configurable StorageHandler    * @param storageHandler fully qualified class name of the desired StorageHandle instance    * @param serDe fully qualified class name of the desired SerDe instance    * @param inputFormat fully qualified class name of the desired InputFormat instance    * @param outputFormat fully qualified class name of the desired outputFormat instance    * @return storageHandler instance    * @throws IOException    */
specifier|public
specifier|static
name|HiveStorageHandler
name|getStorageHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|storageHandler
parameter_list|,
name|String
name|serDe
parameter_list|,
name|String
name|inputFormat
parameter_list|,
name|String
name|outputFormat
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|storageHandler
operator|==
literal|null
operator|)
operator|||
operator|(
name|storageHandler
operator|.
name|equals
argument_list|(
name|FosterStorageHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|FosterStorageHandler
name|fosterStorageHandler
init|=
operator|new
name|FosterStorageHandler
argument_list|(
name|inputFormat
argument_list|,
name|outputFormat
argument_list|,
name|serDe
argument_list|)
decl_stmt|;
name|fosterStorageHandler
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|fosterStorageHandler
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to load "
operator|+
literal|"foster storage handler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|HiveStorageHandler
argument_list|>
name|handlerClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HiveStorageHandler
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|storageHandler
argument_list|,
literal|true
argument_list|,
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|HiveStorageHandler
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|handlerClass
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in loading storage handler."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDbAndTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|dbTableNametokens
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbTableNametokens
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dbTableNametokens
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|dbTableNametokens
index|[
literal|0
index|]
argument_list|,
name|dbTableNametokens
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"tableName expected in the form "
operator|+
literal|"<databasename>.<table name> or<table name>. Got "
operator|+
name|tableName
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getInputJobProperties
parameter_list|(
name|HiveStorageHandler
name|storageHandler
parameter_list|,
name|InputJobInfo
name|inputJobInfo
parameter_list|)
block|{
name|Properties
name|props
init|=
name|inputJobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|storageHandler
operator|.
name|getSerDeClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TableDesc
name|tableDesc
init|=
operator|new
name|TableDesc
argument_list|(
name|storageHandler
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|storageHandler
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableDesc
operator|.
name|getJobProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|tableDesc
operator|.
name|setJobProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Properties
name|mytableProperties
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|mytableProperties
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|inputJobInfo
operator|.
name|getDatabaseName
argument_list|()
operator|+
literal|"."
operator|+
name|inputJobInfo
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableDesc
operator|.
name|getJobProperties
argument_list|()
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_JOB_INFO
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|inputJobInfo
argument_list|)
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|configureInputJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to configure StorageHandler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|jobProperties
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|static
name|void
name|configureOutputStorageHandler
parameter_list|(
name|HiveStorageHandler
name|storageHandler
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|OutputJobInfo
name|outputJobInfo
parameter_list|)
block|{
comment|//TODO replace IgnoreKeyTextOutputFormat with a
comment|//HiveOutputFormatWrapper in StorageHandler
name|Properties
name|props
init|=
name|outputJobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|storageHandler
operator|.
name|getSerDeClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TableDesc
name|tableDesc
init|=
operator|new
name|TableDesc
argument_list|(
name|storageHandler
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableDesc
operator|.
name|getJobProperties
argument_list|()
operator|==
literal|null
condition|)
name|tableDesc
operator|.
name|setJobProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|el
range|:
name|conf
control|)
block|{
name|tableDesc
operator|.
name|getJobProperties
argument_list|()
operator|.
name|put
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|,
name|el
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Properties
name|mytableProperties
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|mytableProperties
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|outputJobInfo
operator|.
name|getDatabaseName
argument_list|()
operator|+
literal|"."
operator|+
name|outputJobInfo
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableDesc
operator|.
name|getJobProperties
argument_list|()
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|outputJobInfo
argument_list|)
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|configureOutputJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableJobProperties
init|=
name|tableDesc
operator|.
name|getJobProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableJobProperties
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tableJobProperties
operator|.
name|containsKey
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
condition|)
block|{
name|String
name|jobString
init|=
name|tableJobProperties
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobString
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|jobProperties
operator|.
name|containsKey
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
condition|)
block|{
name|jobProperties
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|,
name|tableJobProperties
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|el
range|:
name|jobProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|,
name|el
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to configure StorageHandler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Replace the contents of dest with the contents of src    * @param src    * @param dest    */
specifier|public
specifier|static
name|void
name|copyConf
parameter_list|(
name|Configuration
name|src
parameter_list|,
name|Configuration
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|el
range|:
name|src
control|)
block|{
name|dest
operator|.
name|set
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|,
name|el
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get or create a hive client depending on whether it exits in cache or not    * @param hiveConf The hive configuration    * @return the client    * @throws MetaException When HiveMetaStoreClient couldn't be created    * @throws IOException    */
specifier|public
specifier|static
name|IMetaStoreClient
name|getHiveMetastoreClient
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
throws|,
name|IOException
block|{
if|if
condition|(
name|hiveConf
operator|.
name|getBoolean
argument_list|(
name|HCatConstants
operator|.
name|HCAT_HIVE_CLIENT_DISABLE_CACHE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// If cache is disabled, don't use it.
return|return
name|HiveClientCache
operator|.
name|getNonCachedHiveMetastoreClient
argument_list|(
name|hiveConf
argument_list|)
return|;
block|}
comment|// Singleton behaviour: create the cache instance if required.
if|if
condition|(
name|hiveClientCache
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|IMetaStoreClient
operator|.
name|class
init|)
block|{
if|if
condition|(
name|hiveClientCache
operator|==
literal|null
condition|)
block|{
name|hiveClientCache
operator|=
operator|new
name|HiveClientCache
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
return|return
name|hiveClientCache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create hiveMetaStoreClient, Error getting UGI for user"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get or create a hive client depending on whether it exits in cache or not.    * @Deprecated : use {@link #getHiveMetastoreClient(HiveConf)} instead.    * This was deprecated in Hive 1.2, slated for removal in two versions    * (i.e. 1.2& 1.3(projected) will have it, but it will be removed after that)    * @param hiveConf The hive configuration    * @return the client    * @throws MetaException When HiveMetaStoreClient couldn't be created    * @throws IOException    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|HiveMetaStoreClient
name|getHiveClient
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HCatUtil.getHiveClient is unsafe and can be a resource leak depending on HMSC "
operator|+
literal|"implementation and caching mechanism. Use HCatUtil.getHiveMetastoreClient instead."
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|closeHiveClientQuietly
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error closing metastore client. Ignored the error."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Configuration
name|getHiveSiteContentsFromClasspath
parameter_list|()
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Don't load defaults.
name|configuration
operator|.
name|addResource
argument_list|(
literal|"hive-site.xml"
argument_list|)
expr_stmt|;
comment|// NOTE: hive-site.xml is only available on client, not AM.
return|return
name|configuration
return|;
block|}
specifier|private
specifier|static
name|Properties
name|getHiveSiteOverrides
parameter_list|(
name|Configuration
name|jobConf
parameter_list|)
block|{
return|return
name|getHiveSiteOverrides
argument_list|(
name|getHiveSiteContentsFromClasspath
argument_list|()
argument_list|,
name|jobConf
argument_list|)
return|;
block|}
comment|/**    * Returns the hive-site.xml config settings which do not appear in<code>jobConf<code> or    * the hive-site.xml config settings which appear in<code>jobConf<code>, but have a    * different value than HiveConf code defaults.    * @param hiveSite the config settings as found in the hive-site.xml only.    * @param jobConf the config settings used to launch the job.    * @return the set difference between hiveSite and jobConf.    */
specifier|private
specifier|static
name|Properties
name|getHiveSiteOverrides
parameter_list|(
name|Configuration
name|hiveSite
parameter_list|,
name|Configuration
name|jobConf
parameter_list|)
block|{
comment|// return (hiveSite - jobConf);
name|Properties
name|difference
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyValue
range|:
name|hiveSite
control|)
block|{
name|String
name|key
init|=
name|keyValue
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|hiveSiteValue
init|=
name|keyValue
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|jobConfValue
init|=
name|jobConf
operator|.
name|getRaw
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobConfValue
operator|==
literal|null
condition|)
block|{
name|difference
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hiveSiteValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveConfCodeDefaults
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// Necessary to compare against HiveConf defaults as hive-site.xml is not available on task nodes (like AM).
if|if
condition|(
operator|!
name|jobConfValue
operator|.
name|equals
argument_list|(
name|hiveConfCodeDefaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|difference
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|jobConfValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration differences="
operator|+
name|difference
argument_list|)
expr_stmt|;
return|return
name|difference
return|;
block|}
specifier|public
specifier|static
name|HiveConf
name|getHiveConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|,
name|HCatUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//copy the hive conf into the job conf and restore it
comment|//in the backend context
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|)
argument_list|)
condition|)
block|{
comment|// Called once on the client.
name|LOG
operator|.
name|info
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
operator|+
literal|" not set. Generating configuration differences."
argument_list|)
expr_stmt|;
name|Properties
name|differences
init|=
name|getHiveSiteOverrides
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Must set this key even if differences is empty otherwise client and AM will attempt
comment|// to set this multiple times.
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|differences
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Called one or more times on the client and AM.
name|LOG
operator|.
name|info
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
operator|+
literal|" is set. Applying configuration differences."
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|(
name|Properties
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|)
argument_list|)
decl_stmt|;
name|storePropertiesToHiveConf
argument_list|(
name|properties
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_TOKEN_SIGNATURE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_TOKEN_SIGNATURE
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_TOKEN_SIGNATURE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hiveConf
return|;
block|}
specifier|public
specifier|static
name|HiveConf
name|storePropertiesToHiveConf
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|prop
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prop
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|hiveConf
operator|.
name|set
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prop
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|hiveConf
operator|.
name|setInt
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prop
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|hiveConf
operator|.
name|setBoolean
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prop
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|hiveConf
operator|.
name|setLong
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prop
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Float
condition|)
block|{
name|hiveConf
operator|.
name|setFloat
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Float
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unsupported type: key="
operator|+
name|prop
operator|.
name|getKey
argument_list|()
operator|+
literal|" value="
operator|+
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hiveConf
return|;
block|}
specifier|public
specifier|static
name|JobConf
name|getJobConfFromContext
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
block|{
name|JobConf
name|jobConf
decl_stmt|;
comment|// we need to convert the jobContext into a jobConf
comment|// 0.18 jobConf (Hive) vs 0.20+ jobContext (HCat)
comment|// begin conversion..
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// ..end of conversion
return|return
name|jobConf
return|;
block|}
comment|// Retrieve settings in HiveConf that aren't also set in the JobConf.
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHCatKeyHiveConf
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
try|try
block|{
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|=
operator|(
name|Properties
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
operator|+
literal|" is set. Using differences="
operator|+
name|properties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
operator|+
literal|" not set. Generating configuration differences."
argument_list|)
expr_stmt|;
name|properties
operator|=
name|getHiveSiteOverrides
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// This method may not be safe as it can throw an NPE if a key or value is null.
return|return
name|Maps
operator|.
name|fromProperties
argument_list|(
name|properties
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to deserialize hive conf"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|copyJobPropertiesToJobConf
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|jobProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|jobConf
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isHadoop23
parameter_list|()
block|{
name|String
name|version
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|matches
argument_list|(
literal|"\\b0\\.23\\..+\\b"
argument_list|)
operator|||
name|version
operator|.
name|matches
argument_list|(
literal|"\\b2\\..*"
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**    * Used by various tests to make sure the path is safe for Windows    */
specifier|public
specifier|static
name|String
name|makePathASafeFileName
parameter_list|(
name|String
name|filePath
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|assertNotNull
parameter_list|(
name|Object
name|t
parameter_list|,
name|String
name|msg
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

