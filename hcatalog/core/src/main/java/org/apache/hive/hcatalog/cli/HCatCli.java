begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
operator|.
name|LogInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|DfsProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|SetProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|SemanticAnalysis
operator|.
name|HCatSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_class
specifier|public
class|class
name|HCatCli
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|LogUtils
operator|.
name|initHiveLog4j
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogInitializationException
name|e
parameter_list|)
block|{      }
name|LOG
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HCatCli
operator|.
name|class
argument_list|)
expr_stmt|;
name|CliSessionState
name|ss
init|=
operator|new
name|CliSessionState
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ss
operator|.
name|in
operator|=
name|System
operator|.
name|in
expr_stmt|;
try|try
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|err
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|HiveConf
name|conf
init|=
name|ss
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
argument_list|,
name|HCatSemanticAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|engine
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|MR_ENGINE
init|=
literal|"mr"
decl_stmt|;
if|if
condition|(
operator|!
name|MR_ENGINE
operator|.
name|equalsIgnoreCase
argument_list|(
name|engine
argument_list|)
condition|)
block|{
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|,
name|MR_ENGINE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Forcing "
operator|+
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
operator|+
literal|" to "
operator|+
name|MR_ENGINE
argument_list|)
expr_stmt|;
block|}
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
comment|// -e 'quoted-query-string'
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"exec"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"hcat command given from command line"
argument_list|)
operator|.
name|create
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -f<query-file>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"file"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"hcat commands in file"
argument_list|)
operator|.
name|create
argument_list|(
literal|'f'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -g
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"group"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"group for the db/table specified in CREATE statement"
argument_list|)
operator|.
name|create
argument_list|(
literal|'g'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -p
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"perms"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"permissions for the db/table specified in CREATE statement"
argument_list|)
operator|.
name|create
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -D
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"use hadoop value for given property"
argument_list|)
operator|.
name|create
argument_list|(
literal|'D'
argument_list|)
argument_list|)
expr_stmt|;
comment|// [-h|--help]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help information"
argument_list|)
argument_list|)
expr_stmt|;
name|Parser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmdLine
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cmdLine
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|printUsage
argument_list|(
name|options
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
comment|// Note, we print to System.err instead of ss.err, because if we can't parse our
comment|// commandline, we haven't even begun, and therefore cannot be expected to have
comment|// reasonably constructed or started the SessionState.
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// -D : process these first, so that we can instantiate SessionState appropriately.
name|setConfProperties
argument_list|(
name|conf
argument_list|,
name|cmdLine
operator|.
name|getOptionProperties
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
comment|// -h
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|printUsage
argument_list|(
name|options
argument_list|,
name|ss
operator|.
name|out
argument_list|)
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// -e
name|String
name|execString
init|=
operator|(
name|String
operator|)
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|'e'
argument_list|)
decl_stmt|;
comment|// -f
name|String
name|fileName
init|=
operator|(
name|String
operator|)
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|'f'
argument_list|)
decl_stmt|;
if|if
condition|(
name|execString
operator|!=
literal|null
operator|&&
name|fileName
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The '-e' and '-f' options cannot be specified simultaneously"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|options
argument_list|,
name|ss
operator|.
name|err
argument_list|)
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// -p
name|String
name|perms
init|=
operator|(
name|String
operator|)
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|'p'
argument_list|)
decl_stmt|;
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
name|validatePermissions
argument_list|(
name|ss
argument_list|,
name|conf
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
comment|// -g
name|String
name|grp
init|=
operator|(
name|String
operator|)
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|'g'
argument_list|)
decl_stmt|;
if|if
condition|(
name|grp
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_GROUP
argument_list|,
name|grp
argument_list|)
expr_stmt|;
block|}
comment|// Now that the properties are in, we can instantiate SessionState.
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
comment|// all done parsing, let's run stuff!
if|if
condition|(
name|execString
operator|!=
literal|null
condition|)
block|{
name|sysExit
argument_list|(
name|ss
argument_list|,
name|processLine
argument_list|(
name|execString
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|sysExit
argument_list|(
name|ss
argument_list|,
name|processFile
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Input file not found. ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not open input file for reading. ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// -h
name|printUsage
argument_list|(
name|options
argument_list|,
name|ss
operator|.
name|err
argument_list|)
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wrapper for System.exit that makes sure we close our SessionState    * before we exit. This ignores any error generated by attempting to    * close the session state, merely printing out the error. The return    * code is not changed in such an occurrence because we want to retain    * the success code of whatever command we already ran.    */
specifier|private
specifier|static
name|void
name|sysExit
parameter_list|(
name|SessionState
name|ss
parameter_list|,
name|int
name|retCode
parameter_list|)
block|{
try|try
block|{
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If we got an error attempting to ss.close, then it's not likely that
comment|// ss.err is valid. So we're back to System.err. Also, we don't change
comment|// the return code, we simply log a warning, and return whatever return
comment|// code we expected to do already.
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|retCode
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setConfProperties
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|processLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|String
name|command
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|oneCmd
range|:
name|line
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|oneCmd
argument_list|,
literal|"\\"
argument_list|)
condition|)
block|{
name|command
operator|+=
name|StringUtils
operator|.
name|chop
argument_list|(
name|oneCmd
argument_list|)
operator|+
literal|";"
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|command
operator|+=
name|oneCmd
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|command
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ret
operator|=
name|processCmd
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|command
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|int
name|processFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|FileReader
name|fileReader
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileReader
operator|=
operator|new
name|FileReader
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fileReader
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|StringBuilder
name|qsb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|qsb
operator|.
name|append
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|processLine
argument_list|(
name|qsb
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileReader
operator|!=
literal|null
condition|)
block|{
name|fileReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|int
name|processCmd
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|cmd
operator|=
name|cmd
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|firstToken
init|=
name|cmd
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstToken
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
return|return
operator|new
name|SetProcessor
argument_list|()
operator|.
name|run
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|firstToken
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|getResponseCode
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|firstToken
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"dfs"
argument_list|)
condition|)
block|{
return|return
operator|new
name|DfsProcessor
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|run
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|firstToken
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|getResponseCode
argument_list|()
return|;
block|}
name|HCatDriver
name|driver
init|=
operator|new
name|HCatDriver
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|r
range|:
name|res
control|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed with exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|cret
init|=
name|driver
operator|.
name|close
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|ret
operator|=
name|cret
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|end
operator|>
name|start
condition|)
block|{
name|double
name|timeTaken
init|=
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000.0
decl_stmt|;
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Time taken: "
operator|+
name|timeTaken
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|Options
name|options
parameter_list|,
name|OutputStream
name|os
parameter_list|)
block|{
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
name|pw
argument_list|,
literal|2
operator|*
name|HelpFormatter
operator|.
name|DEFAULT_WIDTH
argument_list|,
literal|"hcat { -e \"<query>\" | -f \"<filepath>\" } [ -g \"<group>\" ] [ -p \"<perms>\" ] [ -D\"<name>=<value>\" ]"
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|HelpFormatter
operator|.
name|DEFAULT_LEFT_PAD
argument_list|,
name|HelpFormatter
operator|.
name|DEFAULT_DESC_PAD
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|validatePermissions
parameter_list|(
name|CliSessionState
name|ss
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|String
name|perms
parameter_list|)
block|{
name|perms
operator|=
name|perms
operator|.
name|trim
argument_list|()
expr_stmt|;
name|FsPermission
name|fp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|perms
operator|.
name|matches
argument_list|(
literal|"^\\s*([r,w,x,-]{9})\\s*$"
argument_list|)
condition|)
block|{
name|fp
operator|=
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"d"
operator|+
name|perms
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|perms
operator|.
name|matches
argument_list|(
literal|"^\\s*([0-7]{3})\\s*$"
argument_list|)
condition|)
block|{
name|fp
operator|=
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|decode
argument_list|(
literal|"0"
operator|+
name|perms
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid permission specification: "
operator|+
name|perms
argument_list|)
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|fp
operator|.
name|getUserAction
argument_list|()
argument_list|,
name|fp
operator|.
name|getGroupAction
argument_list|()
argument_list|)
condition|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid permission specification: "
operator|+
name|perms
operator|+
literal|" : user permissions must be more permissive than group permission "
argument_list|)
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|fp
operator|.
name|getGroupAction
argument_list|()
argument_list|,
name|fp
operator|.
name|getOtherAction
argument_list|()
argument_list|)
condition|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid permission specification: "
operator|+
name|perms
operator|+
literal|" : group permissions must be more permissive than other permission "
argument_list|)
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|fp
operator|.
name|getUserAction
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|fp
operator|.
name|getGroupAction
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|fp
operator|.
name|getOtherAction
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid permission specification: "
operator|+
name|perms
operator|+
literal|" : permissions must have execute permissions if read or write permissions are specified "
argument_list|)
expr_stmt|;
name|sysExit
argument_list|(
name|ss
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_PERMS
argument_list|,
literal|"d"
operator|+
name|fp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

