begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_class
specifier|public
class|class
name|HCatFileUtil
block|{
comment|// regex of the form: ${column name}. Following characters are not allowed in column name:
comment|// whitespace characters, /, {, }, \
specifier|private
specifier|static
specifier|final
name|Pattern
name|customPathPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\$\\{)([^\\s/\\{\\}\\\\]+)(\\})"
argument_list|)
decl_stmt|;
comment|// This method parses the custom dynamic path and replaces each occurrence
comment|// of column name within regex pattern with its corresponding value, if provided
specifier|public
specifier|static
name|String
name|resolveCustomPath
parameter_list|(
name|OutputJobInfo
name|jobInfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dynPartKVs
parameter_list|,
name|boolean
name|createRegexPath
parameter_list|)
block|{
comment|// get custom path string
name|String
name|customPath
init|=
name|jobInfo
operator|.
name|getCustomDynamicPath
argument_list|()
decl_stmt|;
comment|// create matcher for custom path
name|Matcher
name|matcher
init|=
name|customPathPattern
operator|.
name|matcher
argument_list|(
name|customPath
argument_list|)
decl_stmt|;
comment|// get the set of all partition columns in custom path
name|HashSet
argument_list|<
name|String
argument_list|>
name|partColumns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
init|=
name|dynPartKVs
operator|!=
literal|null
condition|?
name|dynPartKVs
else|:
name|jobInfo
operator|.
name|getPartitionValues
argument_list|()
decl_stmt|;
comment|// build the final custom path string by replacing each column name with
comment|// its value, if provided
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|previousEndIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
comment|// append the path substring since previous match
name|sb
operator|.
name|append
argument_list|(
name|customPath
operator|.
name|substring
argument_list|(
name|previousEndIndex
argument_list|,
name|matcher
operator|.
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|createRegexPath
condition|)
block|{
comment|// append the first group within pattern: "${"
name|sb
operator|.
name|append
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// column name is the second group from current match
name|String
name|columnName
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|partColumns
operator|.
name|add
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
comment|// find the value of matched column
name|String
name|columnValue
init|=
name|partKVs
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
comment|// if column value is provided, replace column name with value
if|if
condition|(
name|columnValue
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"__HIVE_DEFAULT_PARTITION__"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|createRegexPath
condition|)
block|{
comment|// append the third group within pattern: "}"
name|sb
operator|.
name|append
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// update startIndex
name|previousEndIndex
operator|=
name|matcher
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
comment|// append the trailing path string, if any
if|if
condition|(
name|previousEndIndex
operator|<
name|customPath
operator|.
name|length
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|customPath
operator|.
name|substring
argument_list|(
name|previousEndIndex
argument_list|,
name|customPath
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// validate that the set of partition columns found in custom path must match
comment|// the set of dynamic partitions
if|if
condition|(
name|partColumns
operator|.
name|size
argument_list|()
operator|!=
name|jobInfo
operator|.
name|getDynamicPartitioningKeys
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to configure custom dynamic location, "
operator|+
literal|" mismatch between number of dynamic partition columns obtained["
operator|+
name|partColumns
operator|.
name|size
argument_list|()
operator|+
literal|"] and number of dynamic partition columns required["
operator|+
name|jobInfo
operator|.
name|getDynamicPartitioningKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|getPartKeyValuesForCustomLocation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|OutputJobInfo
name|jobInfo
parameter_list|,
name|String
name|partitionPath
parameter_list|)
block|{
comment|// create matchers for custom path string as well as actual dynamic partition path created
name|Matcher
name|customPathMatcher
init|=
name|customPathPattern
operator|.
name|matcher
argument_list|(
name|jobInfo
operator|.
name|getCustomDynamicPath
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|dynamicPathMatcher
init|=
name|customPathPattern
operator|.
name|matcher
argument_list|(
name|partitionPath
argument_list|)
decl_stmt|;
while|while
condition|(
name|customPathMatcher
operator|.
name|find
argument_list|()
operator|&&
name|dynamicPathMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
comment|// get column name from custom path matcher and column value from dynamic path matcher
name|partSpec
operator|.
name|put
argument_list|(
name|customPathMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|,
name|dynamicPathMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add any partition key values provided as part of job info
name|partSpec
operator|.
name|putAll
argument_list|(
name|jobInfo
operator|.
name|getPartitionValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setCustomPath
parameter_list|(
name|String
name|customPathFormat
parameter_list|,
name|OutputJobInfo
name|jobInfo
parameter_list|)
block|{
comment|// find the root of all custom paths from custom pattern. The root is the
comment|// largest prefix in input pattern string that doesn't match customPathPattern
name|Path
name|customPath
init|=
operator|new
name|Path
argument_list|(
name|customPathFormat
argument_list|)
decl_stmt|;
name|URI
name|customURI
init|=
name|customPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
while|while
condition|(
name|customPath
operator|!=
literal|null
operator|&&
operator|!
name|customPath
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Matcher
name|m
init|=
name|customPathPattern
operator|.
name|matcher
argument_list|(
name|customPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
break|break;
block|}
name|customPath
operator|=
name|customPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|URI
name|rootURI
init|=
name|customPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|childURI
init|=
name|rootURI
operator|.
name|relativize
argument_list|(
name|customURI
argument_list|)
decl_stmt|;
name|jobInfo
operator|.
name|setCustomDynamicLocation
argument_list|(
name|rootURI
operator|.
name|getPath
argument_list|()
argument_list|,
name|childURI
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

