begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** The Class used to serialize the partition information read from the metadata server that maps to a partition. */
end_comment

begin_class
specifier|public
class|class
name|PartInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PartInfo
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** The serialization version */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/** The partition data-schema. */
specifier|private
name|HCatSchema
name|partitionSchema
decl_stmt|;
comment|/** The information about which input storage handler to use */
specifier|private
name|String
name|storageHandlerClassName
decl_stmt|;
specifier|private
name|String
name|inputFormatClassName
decl_stmt|;
specifier|private
name|String
name|outputFormatClassName
decl_stmt|;
specifier|private
name|String
name|serdeClassName
decl_stmt|;
comment|/** HCat-specific properties set at the partition */
specifier|private
specifier|final
name|Properties
name|hcatProperties
decl_stmt|;
comment|/** The data location. */
specifier|private
specifier|final
name|String
name|location
decl_stmt|;
comment|/** The map of partition key names and their values. */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
decl_stmt|;
comment|/** Job properties associated with this parition */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
decl_stmt|;
comment|/**    * The table info associated with this partition.    * Not serialized per PartInfo instance. Constant, per table.    */
specifier|transient
name|HCatTableInfo
name|tableInfo
decl_stmt|;
comment|/**    * Instantiates a new hcat partition info.    * @param partitionSchema the partition schema    * @param storageHandler the storage handler    * @param location the location    * @param hcatProperties hcat-specific properties at the partition    * @param jobProperties the job properties    * @param tableInfo the table information    */
specifier|public
name|PartInfo
parameter_list|(
name|HCatSchema
name|partitionSchema
parameter_list|,
name|HiveStorageHandler
name|storageHandler
parameter_list|,
name|String
name|location
parameter_list|,
name|Properties
name|hcatProperties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|,
name|HCatTableInfo
name|tableInfo
parameter_list|)
block|{
name|this
operator|.
name|partitionSchema
operator|=
name|partitionSchema
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|hcatProperties
operator|=
name|hcatProperties
expr_stmt|;
name|this
operator|.
name|jobProperties
operator|=
name|jobProperties
expr_stmt|;
name|this
operator|.
name|tableInfo
operator|=
name|tableInfo
expr_stmt|;
name|this
operator|.
name|storageHandlerClassName
operator|=
name|storageHandler
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|inputFormatClassName
operator|=
name|storageHandler
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|serdeClassName
operator|=
name|storageHandler
operator|.
name|getSerDeClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|outputFormatClassName
operator|=
name|storageHandler
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets the value of partitionSchema.    * @return the partitionSchema    */
specifier|public
name|HCatSchema
name|getPartitionSchema
parameter_list|()
block|{
return|return
name|partitionSchema
return|;
block|}
comment|/**    * @return the storage handler class name    */
specifier|public
name|String
name|getStorageHandlerClassName
parameter_list|()
block|{
return|return
name|storageHandlerClassName
return|;
block|}
comment|/**    * @return the inputFormatClassName    */
specifier|public
name|String
name|getInputFormatClassName
parameter_list|()
block|{
return|return
name|inputFormatClassName
return|;
block|}
comment|/**    * @return the outputFormatClassName    */
specifier|public
name|String
name|getOutputFormatClassName
parameter_list|()
block|{
return|return
name|outputFormatClassName
return|;
block|}
comment|/**    * @return the serdeClassName    */
specifier|public
name|String
name|getSerdeClassName
parameter_list|()
block|{
return|return
name|serdeClassName
return|;
block|}
comment|/**    * Gets the input storage handler properties.    * @return HCat-specific properties set at the partition    */
specifier|public
name|Properties
name|getInputStorageHandlerProperties
parameter_list|()
block|{
return|return
name|hcatProperties
return|;
block|}
comment|/**    * Gets the value of location.    * @return the location    */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
comment|/**    * Sets the partition values.    * @param partitionValues the new partition values    */
specifier|public
name|void
name|setPartitionValues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|)
block|{
name|this
operator|.
name|partitionValues
operator|=
name|partitionValues
expr_stmt|;
block|}
comment|/**    * Gets the partition values.    * @return the partition values    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionValues
parameter_list|()
block|{
return|return
name|partitionValues
return|;
block|}
comment|/**    * Gets the job properties.    * @return a map of the job properties    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getJobProperties
parameter_list|()
block|{
return|return
name|jobProperties
return|;
block|}
comment|/**    * Gets the HCatalog table information.    * @return the table information    */
specifier|public
name|HCatTableInfo
name|getTableInfo
parameter_list|()
block|{
return|return
name|tableInfo
return|;
block|}
name|void
name|setTableInfo
parameter_list|(
name|HCatTableInfo
name|thatTableInfo
parameter_list|)
block|{
name|this
operator|.
name|tableInfo
operator|=
name|thatTableInfo
expr_stmt|;
name|restoreLocalInfoFromTableInfo
argument_list|()
expr_stmt|;
block|}
comment|/**    * Undoes the effects of compression( dedupWithTableInfo() ) during serialization,    * and restores PartInfo fields to return original data.    * Can be called idempotently, repeatably.    */
specifier|private
name|void
name|restoreLocalInfoFromTableInfo
parameter_list|()
block|{
assert|assert
name|tableInfo
operator|!=
literal|null
operator|:
literal|"TableInfo can't be null at this point."
assert|;
if|if
condition|(
name|partitionSchema
operator|==
literal|null
condition|)
block|{
name|partitionSchema
operator|=
name|tableInfo
operator|.
name|getDataColumns
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|storageHandlerClassName
operator|==
literal|null
condition|)
block|{
name|storageHandlerClassName
operator|=
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getStorageHandlerClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inputFormatClassName
operator|==
literal|null
condition|)
block|{
name|inputFormatClassName
operator|=
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getIfClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|outputFormatClassName
operator|==
literal|null
condition|)
block|{
name|outputFormatClassName
operator|=
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getOfClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serdeClassName
operator|==
literal|null
condition|)
block|{
name|serdeClassName
operator|=
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getSerdeClass
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Finds commonalities with TableInfo, and suppresses (nulls) fields if they are identical    */
specifier|private
name|void
name|dedupWithTableInfo
parameter_list|()
block|{
assert|assert
name|tableInfo
operator|!=
literal|null
operator|:
literal|"TableInfo can't be null at this point."
assert|;
if|if
condition|(
name|partitionSchema
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|partitionSchema
operator|.
name|equals
argument_list|(
name|tableInfo
operator|.
name|getDataColumns
argument_list|()
argument_list|)
condition|)
block|{
name|partitionSchema
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can't suppress data-schema. Partition-schema and table-schema seem to differ! "
operator|+
literal|" partitionSchema: "
operator|+
name|partitionSchema
operator|.
name|getFields
argument_list|()
operator|+
literal|" tableSchema: "
operator|+
name|tableInfo
operator|.
name|getDataColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|storageHandlerClassName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|storageHandlerClassName
operator|.
name|equals
argument_list|(
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getStorageHandlerClass
argument_list|()
argument_list|)
condition|)
block|{
name|storageHandlerClassName
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition's storageHandler ("
operator|+
name|storageHandlerClassName
operator|+
literal|") "
operator|+
literal|"differs from table's storageHandler ("
operator|+
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getStorageHandlerClass
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|inputFormatClassName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|inputFormatClassName
operator|.
name|equals
argument_list|(
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getIfClass
argument_list|()
argument_list|)
condition|)
block|{
name|inputFormatClassName
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition's InputFormat ("
operator|+
name|inputFormatClassName
operator|+
literal|") "
operator|+
literal|"differs from table's InputFormat ("
operator|+
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getIfClass
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|outputFormatClassName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|outputFormatClassName
operator|.
name|equals
argument_list|(
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getOfClass
argument_list|()
argument_list|)
condition|)
block|{
name|outputFormatClassName
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition's OutputFormat ("
operator|+
name|outputFormatClassName
operator|+
literal|") "
operator|+
literal|"differs from table's OutputFormat ("
operator|+
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getOfClass
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|serdeClassName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|serdeClassName
operator|.
name|equals
argument_list|(
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getSerdeClass
argument_list|()
argument_list|)
condition|)
block|{
name|serdeClassName
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition's SerDe ("
operator|+
name|serdeClassName
operator|+
literal|") "
operator|+
literal|"differs from table's SerDe ("
operator|+
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getSerdeClass
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Serialization method used by java serialization.    * Suppresses serialization of redundant information that's already available from    * TableInfo before writing out, so as to minimize amount of serialized space but    * restore it back before returning, so that PartInfo object is still usable afterwards    * (See HIVE-8485 and HIVE-11344 for details.)    */
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|oos
parameter_list|)
throws|throws
name|IOException
block|{
name|dedupWithTableInfo
argument_list|()
expr_stmt|;
name|oos
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|restoreLocalInfoFromTableInfo
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

