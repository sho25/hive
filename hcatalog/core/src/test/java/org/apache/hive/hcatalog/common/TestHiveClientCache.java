begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|NoExitSecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|SemanticAnalysis
operator|.
name|HCatSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveClientCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHiveClientCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|testCacheHit
parameter_list|()
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|LoginException
block|{
name|HiveClientCache
name|cache
init|=
operator|new
name|HiveClientCache
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|HiveMetaStoreClient
name|client
init|=
name|cache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close shouldn't matter
comment|// Setting a non important configuration should return the same client only
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONMAXPARTS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|HiveMetaStoreClient
name|client2
init|=
name|cache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
argument_list|,
name|client2
argument_list|)
expr_stmt|;
name|client2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheMiss
parameter_list|()
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|LoginException
block|{
name|HiveClientCache
name|cache
init|=
operator|new
name|HiveClientCache
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|HiveMetaStoreClient
name|client
init|=
name|cache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
comment|// Set different uri as it is one of the criteria deciding whether to return the same client or not
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// URIs are checked for string equivalence, even spaces make them different
name|HiveMetaStoreClient
name|client2
init|=
name|cache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|client
argument_list|,
name|client2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that a new client is returned for the same configuration after the expiry time.    * Also verify that the expiry time configuration is honoured    */
annotation|@
name|Test
specifier|public
name|void
name|testCacheExpiry
parameter_list|()
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|LoginException
throws|,
name|InterruptedException
block|{
name|HiveClientCache
name|cache
init|=
operator|new
name|HiveClientCache
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HiveClientCache
operator|.
name|CacheableHiveMetaStoreClient
name|client
init|=
operator|(
name|HiveClientCache
operator|.
name|CacheableHiveMetaStoreClient
operator|)
name|cache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2500
argument_list|)
expr_stmt|;
name|HiveMetaStoreClient
name|client2
init|=
name|cache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|client
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// close() after *expiry time* and *a cache access* should  have tore down the client
name|assertNotNull
argument_list|(
name|client2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|client
argument_list|,
name|client2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that a *new* client is created if asked from different threads even with    * the same hive configuration    * @throws ExecutionException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testMultipleThreadAccess
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|HiveClientCache
name|cache
init|=
operator|new
name|HiveClientCache
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
class|class
name|GetHiveClient
implements|implements
name|Callable
argument_list|<
name|HiveMetaStoreClient
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|HiveMetaStoreClient
name|call
parameter_list|()
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|LoginException
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
return|;
block|}
block|}
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|HiveMetaStoreClient
argument_list|>
name|worker1
init|=
operator|new
name|GetHiveClient
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|HiveMetaStoreClient
argument_list|>
name|worker2
init|=
operator|new
name|GetHiveClient
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|HiveMetaStoreClient
argument_list|>
name|clientFuture1
init|=
name|executor
operator|.
name|submit
argument_list|(
name|worker1
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|HiveMetaStoreClient
argument_list|>
name|clientFuture2
init|=
name|executor
operator|.
name|submit
argument_list|(
name|worker2
argument_list|)
decl_stmt|;
name|HiveMetaStoreClient
name|client1
init|=
name|clientFuture1
operator|.
name|get
argument_list|()
decl_stmt|;
name|HiveMetaStoreClient
name|client2
init|=
name|clientFuture2
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|client1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|client1
argument_list|,
name|client2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseAllClients
parameter_list|()
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|LoginException
block|{
specifier|final
name|HiveClientCache
name|cache
init|=
operator|new
name|HiveClientCache
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|HiveClientCache
operator|.
name|CacheableHiveMetaStoreClient
name|client1
init|=
operator|(
name|HiveClientCache
operator|.
name|CacheableHiveMetaStoreClient
operator|)
name|cache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// URIs are checked for string equivalence, even spaces make them different
name|HiveClientCache
operator|.
name|CacheableHiveMetaStoreClient
name|client2
init|=
operator|(
name|HiveClientCache
operator|.
name|CacheableHiveMetaStoreClient
operator|)
name|cache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|cache
operator|.
name|closeAllClientsQuietly
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|client1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a long table name actually breaks the HMSC. Subsequently check that isOpen() reflects    * and tells if the client is broken    */
annotation|@
name|Ignore
argument_list|(
literal|"hangs indefinitely"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testHMSCBreakability
parameter_list|()
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|LoginException
throws|,
name|TException
throws|,
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
throws|,
name|InterruptedException
block|{
comment|// Setup
name|LocalMetaServer
name|metaServer
init|=
operator|new
name|LocalMetaServer
argument_list|()
decl_stmt|;
name|metaServer
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|HiveClientCache
name|cache
init|=
operator|new
name|HiveClientCache
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|HiveClientCache
operator|.
name|CacheableHiveMetaStoreClient
name|client
init|=
operator|(
name|HiveClientCache
operator|.
name|CacheableHiveMetaStoreClient
operator|)
name|cache
operator|.
name|get
argument_list|(
name|metaServer
operator|.
name|getHiveConf
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|client
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|DB_NAME
init|=
literal|"test_db"
decl_stmt|;
specifier|final
name|String
name|LONG_TABLE_NAME
init|=
literal|"long_table_name_"
operator|+
operator|new
name|BigInteger
argument_list|(
literal|200
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|DB_NAME
argument_list|,
name|LONG_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
try|try
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
name|client
operator|.
name|createDatabase
argument_list|(
operator|new
name|Database
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"colname"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|LONG_TABLE_NAME
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// Break the client
try|try
block|{
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception was expected while creating table with long name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
name|assertFalse
argument_list|(
name|client
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|metaServer
operator|.
name|shutDown
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|LocalMetaServer
implements|implements
name|Runnable
block|{
specifier|public
specifier|final
name|int
name|MS_PORT
init|=
literal|20101
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|final
name|SecurityManager
name|securityManager
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|WAIT_TIME_FOR_BOOTUP
init|=
literal|30000
decl_stmt|;
specifier|public
name|LocalMetaServer
parameter_list|()
block|{
name|securityManager
operator|=
name|System
operator|.
name|getSecurityManager
argument_list|()
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|NoExitSecurityManager
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestHiveClientCache
operator|.
name|class
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.metastore.local"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|MS_PORT
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTFAILURERETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
name|HCatSemanticAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_TIME_FOR_BOOTUP
argument_list|)
expr_stmt|;
comment|// Wait for the server to bootup
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|HiveMetaStore
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-v"
block|,
literal|"-p"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|MS_PORT
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exiting. Got exception from metastore: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|HiveConf
name|getHiveConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
specifier|public
name|void
name|shutDown
parameter_list|()
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

