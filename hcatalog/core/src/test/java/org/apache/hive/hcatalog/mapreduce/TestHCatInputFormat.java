begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|IntString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|TestHCatInputFormat
extends|extends
name|HCatBaseTest
block|{
specifier|private
name|boolean
name|setUpComplete
init|=
literal|false
decl_stmt|;
comment|/**    * Create an input sequence file with 100 records; every 10th record is bad.    * Load this table into Hive.    */
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|setUpComplete
condition|)
block|{
return|return;
block|}
name|Path
name|intStringSeq
init|=
operator|new
name|Path
argument_list|(
name|TEST_DATA_DIR
operator|+
literal|"/data/intString.seq"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating data file: "
operator|+
name|intStringSeq
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
name|seqFileWriter
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|intStringSeq
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
argument_list|,
name|hiveConf
argument_list|,
name|intStringSeq
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|TIOStreamTransport
name|transport
init|=
operator|new
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|TBinaryProtocol
name|protocol
init|=
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|seqFileWriter
operator|.
name|append
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|BytesWritable
argument_list|(
literal|"bad record"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|IntString
name|intString
init|=
operator|new
name|IntString
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|intString
operator|.
name|write
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|BytesWritable
name|bytesWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|seqFileWriter
operator|.
name|append
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|bytesWritable
argument_list|)
expr_stmt|;
block|}
block|}
name|seqFileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now let's load this file into a new Hive table.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists test_bad_records"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|run
argument_list|(
literal|"create table test_bad_records "
operator|+
literal|"row format serde 'org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer' "
operator|+
literal|"with serdeproperties ( "
operator|+
literal|"  'serialization.class'='org.apache.hadoop.hive.serde2.thrift.test.IntString', "
operator|+
literal|"  'serialization.format'='org.apache.thrift.protocol.TBinaryProtocol') "
operator|+
literal|"stored as"
operator|+
literal|"  inputformat 'org.apache.hadoop.mapred.SequenceFileInputFormat'"
operator|+
literal|"  outputformat 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|run
argument_list|(
literal|"load data local inpath '"
operator|+
name|intStringSeq
operator|.
name|getParent
argument_list|()
operator|+
literal|"' into table test_bad_records"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|setUpComplete
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadRecordHandlingPasses
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|runJob
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadRecordHandlingFails
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|runJob
argument_list|(
literal|0.01f
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|runJob
parameter_list|(
name|float
name|badRecordThreshold
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|HCatConstants
operator|.
name|HCAT_INPUT_BAD_RECORD_THRESHOLD_KEY
argument_list|,
name|badRecordThreshold
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MyMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|HCatInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|HCatInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
literal|"default"
argument_list|,
literal|"test_bad_records"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_DATA_DIR
argument_list|,
literal|"test_bad_record_handling_output"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|MyMapper
extends|extends
name|Mapper
argument_list|<
name|NullWritable
argument_list|,
name|HCatRecord
argument_list|,
name|NullWritable
argument_list|,
name|Text
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|HCatRecord
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HCatRecord: "
operator|+
name|value
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

