begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
operator|.
name|perm300
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
operator|.
name|perm500
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
operator|.
name|perm555
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
operator|.
name|perm700
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
operator|.
name|perm755
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|HCatDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|SemanticAnalysis
operator|.
name|HCatSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestHdfsAuthorizationProvider
block|{
specifier|protected
name|HCatDriver
name|hcatDriver
decl_stmt|;
specifier|protected
name|HiveMetaStoreClient
name|msc
decl_stmt|;
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
specifier|protected
name|String
name|whDir
decl_stmt|;
specifier|protected
name|Path
name|whPath
decl_stmt|;
specifier|protected
name|FileSystem
name|whFs
decl_stmt|;
specifier|protected
name|Warehouse
name|wh
decl_stmt|;
specifier|protected
name|Hive
name|hive
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.metastore.local"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
name|HCatSemanticAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
name|StorageDelegationAuthorizationProvider
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.pfile.impl"
argument_list|,
literal|"org.apache.hadoop.fs.ProxyLocalFileSystem"
argument_list|)
expr_stmt|;
name|whDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|,
literal|"/tmp/testhdfsauthorization_wh"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|whDir
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getUGIForConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getShortUserName
argument_list|(
name|ugi
argument_list|)
decl_stmt|;
name|whPath
operator|=
operator|new
name|Path
argument_list|(
name|whDir
argument_list|)
expr_stmt|;
name|whFs
operator|=
name|whPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|wh
operator|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hive
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//clean up mess in HMS
name|HcatTestUtils
operator|.
name|cleanupHMS
argument_list|(
name|hive
argument_list|,
name|wh
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|delete
argument_list|(
name|whPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|whPath
argument_list|,
name|perm755
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|hcatDriver
operator|=
operator|new
name|HCatDriver
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|whFs
operator|.
name|close
argument_list|()
expr_stmt|;
name|hcatDriver
operator|.
name|close
argument_list|()
expr_stmt|;
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Path
name|getDbPath
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|HiveException
block|{
return|return
name|HcatTestUtils
operator|.
name|getDbPath
argument_list|(
name|hive
argument_list|,
name|wh
argument_list|,
name|dbName
argument_list|)
return|;
block|}
specifier|public
name|Path
name|getTablePath
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|HiveException
block|{
name|Table
name|table
init|=
name|hive
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|table
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|public
name|Path
name|getPartPath
parameter_list|(
name|String
name|partName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|Path
argument_list|(
name|getTablePath
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|partName
argument_list|)
return|;
block|}
comment|/** Execute the query expecting success*/
specifier|public
name|void
name|exec
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resp
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resp
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|resp
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Execute the query expecting it to fail with AuthorizationException */
specifier|public
name|void
name|execFail
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|resp
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|resp
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|40000
operator|)
operator|||
operator|(
name|resp
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|403
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resp
operator|.
name|getErrorMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resp
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"org.apache.hadoop.security.AccessControlException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests whether the warehouse directory is writable by the current user (as defined by Hadoop)    */
annotation|@
name|Test
specifier|public
name|void
name|testWarehouseIsWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|top
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
literal|"_foobarbaz12_"
argument_list|)
decl_stmt|;
try|try
block|{
name|whFs
operator|.
name|mkdirs
argument_list|(
name|top
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|whFs
operator|.
name|delete
argument_list|(
name|top
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowDatabases
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"SHOW DATABASES"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|setPermission
argument_list|(
name|whPath
argument_list|,
name|perm300
argument_list|)
expr_stmt|;
comment|//revoke r
name|execFail
argument_list|(
literal|"SHOW DATABASES"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseOps
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"SHOW TABLES"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"SHOW TABLE EXTENDED LIKE foo1"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|setPermission
argument_list|(
name|whPath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE DATABASE doo"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"USE doo"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"SHOW TABLES"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"SHOW TABLE EXTENDED LIKE foo1"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DROP DATABASE doo"
argument_list|)
expr_stmt|;
comment|//custom location
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mydb"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|dbPath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE DATABASE doo2 LOCATION '%s'"
argument_list|,
name|dbPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE DATABASE doo2"
argument_list|,
name|dbPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"USE doo2"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"SHOW TABLES"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"SHOW TABLE EXTENDED LIKE foo1"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DROP DATABASE doo2"
argument_list|,
name|dbPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
comment|//custom non-existing location
name|exec
argument_list|(
literal|"CREATE DATABASE doo3 LOCATION '%s/subpath'"
argument_list|,
name|dbPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDatabaseFail1
parameter_list|()
throws|throws
name|Exception
block|{
name|whFs
operator|.
name|setPermission
argument_list|(
name|whPath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
comment|//in the default location
name|whFs
operator|.
name|setPermission
argument_list|(
name|whPath
argument_list|,
name|perm555
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"CREATE DATABASE doo2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDatabaseFail2
parameter_list|()
throws|throws
name|Exception
block|{
comment|//custom location
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mydb"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|dbPath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|setPermission
argument_list|(
name|dbPath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"CREATE DATABASE doo2 LOCATION '%s'"
argument_list|,
name|dbPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseFail1
parameter_list|()
throws|throws
name|Exception
block|{
name|whFs
operator|.
name|setPermission
argument_list|(
name|whPath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
comment|//in the default location
name|whFs
operator|.
name|setPermission
argument_list|(
name|getDbPath
argument_list|(
literal|"doo"
argument_list|)
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke write
name|execFail
argument_list|(
literal|"DROP DATABASE doo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseFail2
parameter_list|()
throws|throws
name|Exception
block|{
comment|//custom location
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mydb"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|dbPath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE DATABASE doo2 LOCATION '%s'"
argument_list|,
name|dbPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|setPermission
argument_list|(
name|dbPath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"DROP DATABASE doo2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDescSwitchDatabaseFail
parameter_list|()
throws|throws
name|Exception
block|{
name|whFs
operator|.
name|setPermission
argument_list|(
name|whPath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|setPermission
argument_list|(
name|getDbPath
argument_list|(
literal|"doo"
argument_list|)
argument_list|,
name|perm300
argument_list|)
expr_stmt|;
comment|//revoke read
name|execFail
argument_list|(
literal|"DESCRIBE DATABASE doo"
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"USE doo"
argument_list|)
expr_stmt|;
comment|//custom location
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mydb"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|dbPath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE DATABASE doo2 LOCATION '%s'"
argument_list|,
name|dbPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|dbPath
argument_list|,
name|perm300
argument_list|)
expr_stmt|;
comment|//revoke read
name|execFail
argument_list|(
literal|"DESCRIBE DATABASE doo2"
argument_list|,
name|dbPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"USE doo2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowTablesFail
parameter_list|()
throws|throws
name|Exception
block|{
name|whFs
operator|.
name|setPermission
argument_list|(
name|whPath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"USE doo"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|setPermission
argument_list|(
name|getDbPath
argument_list|(
literal|"doo"
argument_list|)
argument_list|,
name|perm300
argument_list|)
expr_stmt|;
comment|//revoke read
name|execFail
argument_list|(
literal|"SHOW TABLES"
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"SHOW TABLE EXTENDED LIKE foo1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableOps
parameter_list|()
throws|throws
name|Exception
block|{
comment|//default db
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE foo1"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DROP TABLE foo1"
argument_list|)
expr_stmt|;
comment|//default db custom location
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo2 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE foo2"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DROP TABLE foo2"
argument_list|)
expr_stmt|;
comment|//default db custom non existing location
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo3 (foo INT) STORED AS RCFILE LOCATION '%s/subpath'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE foo3"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DROP TABLE foo3"
argument_list|)
expr_stmt|;
comment|//non default db
name|exec
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"USE doo"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE TABLE foo4 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE foo4"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DROP TABLE foo4"
argument_list|)
expr_stmt|;
comment|//non-default db custom location
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo5 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE foo5"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DROP TABLE foo5"
argument_list|)
expr_stmt|;
comment|//non-default db custom non existing location
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo6 (foo INT) STORED AS RCFILE LOCATION '%s/subpath'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE foo6"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DROP TABLE foo6"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DROP TABLE IF EXISTS foo_non_exists"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE EXTENDED foo1"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE FORMATTED foo1"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"DESCRIBE foo1.foo"
argument_list|)
expr_stmt|;
comment|//deep non-existing path for the table
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo2 (foo INT) STORED AS RCFILE LOCATION '%s/a/a/a/'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableFail1
parameter_list|()
throws|throws
name|Exception
block|{
comment|//default db
name|whFs
operator|.
name|mkdirs
argument_list|(
name|whPath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke w
name|execFail
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableFail2
parameter_list|()
throws|throws
name|Exception
block|{
comment|//default db custom location
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"CREATE EXTERNAL TABLE foo2 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
comment|//default db custom non existing location
name|execFail
argument_list|(
literal|"CREATE EXTERNAL TABLE foo3 (foo INT) STORED AS RCFILE LOCATION '%s/subpath'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableFail3
parameter_list|()
throws|throws
name|Exception
block|{
comment|//non default db
name|exec
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|setPermission
argument_list|(
name|getDbPath
argument_list|(
literal|"doo"
argument_list|)
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"CREATE TABLE doo.foo4 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
comment|//non-default db custom location, permission to write to tablePath, but not on db path
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"USE doo"
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"CREATE EXTERNAL TABLE foo5 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableFail4
parameter_list|()
throws|throws
name|Exception
block|{
comment|//non default db
name|exec
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
comment|//non-default db custom location
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"CREATE EXTERNAL TABLE doo.foo5 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
comment|//non-default db custom non existing location
name|execFail
argument_list|(
literal|"CREATE EXTERNAL TABLE doo.foo6 (foo INT) STORED AS RCFILE LOCATION '%s/a/a/a/'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableFail1
parameter_list|()
throws|throws
name|Exception
block|{
comment|//default db
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|getTablePath
argument_list|(
literal|"default"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke w
name|execFail
argument_list|(
literal|"DROP TABLE foo1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableFail2
parameter_list|()
throws|throws
name|Exception
block|{
comment|//default db custom location
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo2 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"DROP TABLE foo2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableFail4
parameter_list|()
throws|throws
name|Exception
block|{
comment|//non default db
name|exec
argument_list|(
literal|"CREATE DATABASE doo"
argument_list|)
expr_stmt|;
comment|//non-default db custom location
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE doo.foo5 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"USE doo"
argument_list|)
expr_stmt|;
comment|//There is no DROP TABLE doo.foo5 support in Hive
name|execFail
argument_list|(
literal|"DROP TABLE foo5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDescTableFail
parameter_list|()
throws|throws
name|Exception
block|{
comment|//default db
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|getTablePath
argument_list|(
literal|"default"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|,
name|perm300
argument_list|)
expr_stmt|;
comment|//revoke read
name|execFail
argument_list|(
literal|"DESCRIBE foo1"
argument_list|)
expr_stmt|;
comment|//default db custom location
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo2 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm300
argument_list|)
expr_stmt|;
comment|//revoke read
name|execFail
argument_list|(
literal|"DESCRIBE foo2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableRename
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 RENAME TO foo2"
argument_list|)
expr_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo3 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo3 RENAME TO foo4"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableRenameFail
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|getTablePath
argument_list|(
literal|"default"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke write
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 RENAME TO foo2"
argument_list|)
expr_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo3 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke write
name|execFail
argument_list|(
literal|"ALTER TABLE foo3 RENAME TO foo4"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableRelocate
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 SET LOCATION '%s'"
argument_list|,
name|tablePath
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable2"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo3 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable2"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo3 SET LOCATION '%s'"
argument_list|,
name|tablePath
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableRelocateFail
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable"
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke write
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 SET LOCATION '%s'"
argument_list|,
name|tablePath
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
comment|//dont have access to new table loc
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable2"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo3 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable2"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke write
name|execFail
argument_list|(
literal|"ALTER TABLE foo3 SET LOCATION '%s'"
argument_list|,
name|tablePath
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
comment|//have access to new table loc, but not old table loc
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable3"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"CREATE EXTERNAL TABLE foo4 (foo INT) STORED AS RCFILE LOCATION '%s'"
argument_list|,
name|tablePath
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|tablePath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke write
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mytable3"
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"ALTER TABLE foo4 SET LOCATION '%s'"
argument_list|,
name|tablePath
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTable
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 SET TBLPROPERTIES ('foo'='bar')"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 SET SERDEPROPERTIES ('foo'='bar')"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD COLUMNS (foo2 INT)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddDropPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-10')"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD IF NOT EXISTS PARTITION (b='2010-10-10')"
argument_list|)
expr_stmt|;
name|String
name|relPath
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mypart"
decl_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-11') LOCATION '%s'"
argument_list|,
name|relPath
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 PARTITION (b='2010-10-10') SET FILEFORMAT RCFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 PARTITION (b='2010-10-10') SET FILEFORMAT INPUTFORMAT "
operator|+
literal|"'org.apache.hadoop.hive.ql.io.RCFileInputFormat' OUTPUTFORMAT "
operator|+
literal|"'org.apache.hadoop.hive.ql.io.RCFileOutputFormat' inputdriver "
operator|+
literal|"'mydriver' outputdriver 'yourdriver'"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 DROP PARTITION (b='2010-10-10')"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 DROP PARTITION (b='2010-10-11')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionFail1
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|getTablePath
argument_list|(
literal|"default"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-10')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionFail2
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|String
name|relPath
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mypart"
decl_stmt|;
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|getTablePath
argument_list|(
literal|"default"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|partPath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-10') LOCATION '%s'"
argument_list|,
name|partPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionFail1
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-10')"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|getPartPath
argument_list|(
literal|"b=2010-10-10"
argument_list|,
literal|"default"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 DROP PARTITION (b='2010-10-10')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionFail2
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|String
name|relPath
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mypart"
decl_stmt|;
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|getTablePath
argument_list|(
literal|"default"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|partPath
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-10') LOCATION '%s'"
argument_list|,
name|partPath
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|partPath
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke write
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 DROP PARTITION (b='2010-10-10')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableFail
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (boo STRING) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|getTablePath
argument_list|(
literal|"default"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke write
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 SET TBLPROPERTIES ('foo'='bar')"
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 SET SERDEPROPERTIES ('foo'='bar')"
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 ADD COLUMNS (foo2 INT)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowTables
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (boo STRING) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"SHOW PARTITIONS foo1"
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|getTablePath
argument_list|(
literal|"default"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|,
name|perm300
argument_list|)
expr_stmt|;
comment|//revoke read
name|execFail
argument_list|(
literal|"SHOW PARTITIONS foo1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTablePartRename
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|Path
name|loc
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mypart"
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-16') LOCATION '%s'"
argument_list|,
name|loc
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 PARTITION (b='2010-10-16') RENAME TO PARTITION (b='2010-10-17')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTablePartRenameFail
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|Path
name|loc
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mypart"
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-16') LOCATION '%s'"
argument_list|,
name|loc
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|setPermission
argument_list|(
name|loc
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
comment|//revoke w
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 PARTITION (b='2010-10-16') RENAME TO PARTITION (b='2010-10-17')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTablePartRelocate
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-16')"
argument_list|)
expr_stmt|;
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mypart"
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 PARTITION (b='2010-10-16') SET LOCATION '%s'"
argument_list|,
name|partPath
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTablePartRelocateFail
parameter_list|()
throws|throws
name|Exception
block|{
name|exec
argument_list|(
literal|"CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS RCFILE"
argument_list|)
expr_stmt|;
name|Path
name|oldLoc
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mypart"
argument_list|)
decl_stmt|;
name|Path
name|newLoc
init|=
operator|new
name|Path
argument_list|(
name|whPath
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"/mypart2"
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|"ALTER TABLE foo1 ADD PARTITION (b='2010-10-16') LOCATION '%s'"
argument_list|,
name|oldLoc
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|oldLoc
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 PARTITION (b='2010-10-16') SET LOCATION '%s'"
argument_list|,
name|newLoc
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|oldLoc
argument_list|,
name|perm700
argument_list|)
expr_stmt|;
name|whFs
operator|.
name|mkdirs
argument_list|(
name|newLoc
argument_list|,
name|perm500
argument_list|)
expr_stmt|;
name|execFail
argument_list|(
literal|"ALTER TABLE foo1 PARTITION (b='2010-10-16') SET LOCATION '%s'"
argument_list|,
name|newLoc
operator|.
name|makeQualified
argument_list|(
name|whFs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

