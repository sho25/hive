begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|SemanticAnalysis
operator|.
name|HCatSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestSemanticAnalysis
extends|extends
name|HCatBaseTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSemanticAnalysis
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TBL_NAME
init|=
literal|"junit_sem_analysis"
decl_stmt|;
specifier|private
name|IDriver
name|hcatDriver
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|query
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUpHCatDriver
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hcatDriver
operator|==
literal|null
condition|)
block|{
name|HiveConf
name|hcatConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|hcatConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEDEFAULTRCFILESERDE
operator|.
name|varname
argument_list|,
literal|"org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe"
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
name|HCatSemanticAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_DISALLOW_INCOMPATIBLE_COL_TYPE_CHANGES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hcatDriver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|hcatConf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDescDB
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop database mydb cascade"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create database mydb"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"describe database mydb"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hcatDriver
operator|.
name|getResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"mydb"
argument_list|)
argument_list|)
expr_stmt|;
comment|// location is not shown in test mode
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop database mydb cascade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTblWithLowerCasePartNames
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table junit_sem_analysis (a int) partitioned by (B string) stored as TEXTFILE"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|resp
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|TBL_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Partition key name case problem"
argument_list|,
literal|"b"
argument_list|,
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTblFFpart
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create table junit_sem_analysis (a int) partitioned by (b string) stored as TEXTFILE"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis add partition (b='2010-10-10')"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis partition (b='2010-10-10') set fileformat RCFILE"
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|TBL_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TextInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|"2010-10-10"
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|TBL_NAME
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUsNonExistentDB
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|resp
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"use no_such_db"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbs
init|=
name|client
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
name|String
name|testDb1
init|=
literal|"testdatabaseoperatons1"
decl_stmt|;
name|String
name|testDb2
init|=
literal|"testdatabaseoperatons2"
decl_stmt|;
if|if
condition|(
name|dbs
operator|.
name|contains
argument_list|(
name|testDb1
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|testDb1
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dbs
operator|.
name|contains
argument_list|(
name|testDb2
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|testDb2
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|testDb1
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|()
operator|.
name|contains
argument_list|(
name|testDb1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create database if not exists "
operator|+
name|testDb1
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|()
operator|.
name|contains
argument_list|(
name|testDb1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create database if not exists "
operator|+
name|testDb2
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|()
operator|.
name|contains
argument_list|(
name|testDb2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|testDb1
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|testDb2
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|()
operator|.
name|contains
argument_list|(
name|testDb1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|()
operator|.
name|contains
argument_list|(
name|testDb2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableIfNotExists
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table "
operator|+
name|TBL_NAME
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|TBL_NAME
operator|+
literal|" (a int) stored as RCFILE"
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|TBL_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create table if not exists junit_sem_analysis (a int) stored as RCFILE"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resp
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|TBL_NAME
argument_list|)
expr_stmt|;
name|cols
operator|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTblTouch
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create table junit_sem_analysis (a int) partitioned by (b string) stored as RCFILE"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis touch"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis touch partition (b='12')"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create table junit_sem_analysis (a int, c string) partitioned by (b string) stored as RCFILE"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis change a a1 int"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis change a1 a string"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis change a a int after c"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddReplaceCols
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create table junit_sem_analysis (a int, c string) partitioned by (b string) stored as RCFILE"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis replace columns (a1 tinyint)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis add columns (d tinyint)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|response
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"describe extended junit_sem_analysis"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|TBL_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"a1"
argument_list|,
literal|"tinyint"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"d"
argument_list|,
literal|"tinyint"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTblClusteredBy
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create table junit_sem_analysis (a int) partitioned by (b string) stored as RCFILE"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis clustered by (a) into 7 buckets"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableRename
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table oldname"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table newname"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create table oldname (a int)"
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"oldname"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The old table location is: "
operator|+
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|contains
argument_list|(
literal|"oldname"
argument_list|)
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table oldname rename to newNAME"
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"newname"
argument_list|)
expr_stmt|;
comment|// since the oldname table is not under its database (See HIVE-15059), the renamed oldname table will keep
comment|// its location after HIVE-14909. I changed to check the existence of the newname table and its name instead
comment|// of verifying its location
comment|// assertTrue(tbl.getSd().getLocation().contains("newname"));
name|assertTrue
argument_list|(
name|tbl
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"newname"
argument_list|)
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table newname"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableSetFF
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create table junit_sem_analysis (a int) partitioned by (b string) stored as RCFILE"
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|TBL_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis set fileformat INPUTFORMAT 'org.apache.hadoop.hive.ql.io.RCFileInputFormat' OUTPUTFORMAT "
operator|+
literal|"'org.apache.hadoop.hive.ql.io.RCFileOutputFormat' inputdriver 'mydriver' outputdriver 'yourdriver'"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"desc extended junit_sem_analysis"
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|TBL_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartFail
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create table junit_sem_analysis (a int) partitioned by (b string) stored as RCFILE"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis add partition (b='2') location 'README.txt'"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartPass
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"create table junit_sem_analysis (a int) partitioned by (b string) stored as RCFILE"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"alter table junit_sem_analysis add partition (b='2') location '"
operator|+
name|TEST_DATA_DIR
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|response
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCTAS
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table junit_sem_analysis (a int) as select * from tbl2"
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|40000
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"FAILED: SemanticException Operation not supported. Create table as Select is not a valid operation."
argument_list|)
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoredAs
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table junit_sem_analysis (a int)"
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddDriverInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table junit_sem_analysis (a int) partitioned by (b string)  stored as "
operator|+
literal|"INPUTFORMAT 'org.apache.hadoop.hive.ql.io.RCFileInputFormat' OUTPUTFORMAT "
operator|+
literal|"'org.apache.hadoop.hive.ql.io.RCFileOutputFormat' inputdriver 'mydriver' outputdriver 'yourdriver' "
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|client
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|TBL_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidateNonStringPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table junit_sem_analysis (a int) partitioned by (b int)  stored as RCFILE"
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|40000
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FAILED: SemanticException Operation not supported. HCatalog only supports partition columns of type string. For column: b Found type: int"
argument_list|,
name|response
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidateSeqFileStoredAs
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table junit_sem_analysis (a int) partitioned by (b string)  stored as SEQUENCEFILE"
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidateTextFileStoredAs
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table junit_sem_analysis (a int) partitioned by (b string)  stored as TEXTFILE"
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidateClusteredBy
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table junit_sem_analysis (a int) partitioned by (b string) clustered by (a) into 10 buckets stored as TEXTFILE"
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCTLFail
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table like_table"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table junit_sem_analysis (a int) partitioned by (b string) stored as RCFILE"
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table like_table like junit_sem_analysis"
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCTLPass
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table junit_sem_analysis"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in drop table."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
literal|"create table junit_sem_analysis (a int) partitioned by (b string) stored as RCFILE"
expr_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|String
name|likeTbl
init|=
literal|"like_table"
decl_stmt|;
name|hcatDriver
operator|.
name|run
argument_list|(
literal|"drop table "
operator|+
name|likeTbl
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"create table like_table like junit_sem_analysis"
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|//    Table tbl = client.getTable(MetaStoreUtils.DEFAULT_DATABASE_NAME, likeTbl);
comment|//    assertEquals(likeTbl,tbl.getTableName());
comment|//    List<FieldSchema> cols = tbl.getSd().getCols();
comment|//    assertEquals(1, cols.size());
comment|//    assertEquals(new FieldSchema("a", "int", null), cols.get(0));
comment|//    assertEquals("org.apache.hadoop.hive.ql.io.RCFileInputFormat",tbl.getSd().getInputFormat());
comment|//    assertEquals("org.apache.hadoop.hive.ql.io.RCFileOutputFormat",tbl.getSd().getOutputFormat());
comment|//    Map<String, String> tblParams = tbl.getParameters();
comment|//    assertEquals("org.apache.hadoop.hive.hcat.rcfile.RCFileInputStorageDriver", tblParams.get("hcat.isd"));
comment|//    assertEquals("org.apache.hadoop.hive.hcat.rcfile.RCFileOutputStorageDriver", tblParams.get("hcat.osd"));
comment|//
comment|//    hcatDriver.run("drop table junit_sem_analysis");
comment|//    hcatDriver.run("drop table "+likeTbl);
block|}
comment|// This test case currently fails, since add partitions don't inherit anything from tables.
comment|//  public void testAddPartInheritDrivers() throws MetaException, TException, NoSuchObjectException{
comment|//
comment|//    hcatDriver.run("drop table "+TBL_NAME);
comment|//    hcatDriver.run("create table junit_sem_analysis (a int) partitioned by (b string) stored as RCFILE");
comment|//    hcatDriver.run("alter table "+TBL_NAME+" add partition (b='2010-10-10')");
comment|//
comment|//    List<String> partVals = new ArrayList<String>(1);
comment|//    partVals.add("2010-10-10");
comment|//
comment|//    Map<String,String> map = client.getPartition(MetaStoreUtils.DEFAULT_DATABASE_NAME, TBL_NAME, partVals).getParameters();
comment|//    assertEquals(map.get(InitializeInput.HOWL_ISD_CLASS), RCFileInputStorageDriver.class.getName());
comment|//    assertEquals(map.get(InitializeInput.HOWL_OSD_CLASS), RCFileOutputStorageDriver.class.getName());
comment|//  }
block|}
end_class

end_unit

