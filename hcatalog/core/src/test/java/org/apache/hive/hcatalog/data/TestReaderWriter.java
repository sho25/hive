begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|transfer
operator|.
name|DataTransferFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|transfer
operator|.
name|HCatReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|transfer
operator|.
name|HCatWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|transfer
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|transfer
operator|.
name|ReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|transfer
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|transfer
operator|.
name|WriterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestReaderWriter
extends|extends
name|HCatBaseTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|MetaException
throws|,
name|CommandNeedRetryException
throws|,
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table mytbl"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create table mytbl (a string, b int)"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|itr
init|=
name|hiveConf
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kv
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WriterContext
name|cntxt
init|=
name|runsInMaster
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|File
name|writeCntxtFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"hcat-write"
argument_list|,
literal|"temp"
argument_list|)
decl_stmt|;
name|writeCntxtFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
comment|// Serialize context.
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|writeCntxtFile
argument_list|)
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|cntxt
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now, deserialize it.
name|ObjectInputStream
name|ois
init|=
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|writeCntxtFile
argument_list|)
argument_list|)
decl_stmt|;
name|cntxt
operator|=
operator|(
name|WriterContext
operator|)
name|ois
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|ois
operator|.
name|close
argument_list|()
expr_stmt|;
name|runsInSlave
argument_list|(
name|cntxt
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|map
argument_list|,
literal|true
argument_list|,
name|cntxt
argument_list|)
expr_stmt|;
name|ReaderContext
name|readCntxt
init|=
name|runsInMaster
argument_list|(
name|map
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|readCntxtFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"hcat-read"
argument_list|,
literal|"temp"
argument_list|)
decl_stmt|;
name|readCntxtFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|readCntxtFile
argument_list|)
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|readCntxt
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
name|ois
operator|=
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|readCntxtFile
argument_list|)
argument_list|)
expr_stmt|;
name|readCntxt
operator|=
operator|(
name|ReaderContext
operator|)
name|ois
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|ois
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readCntxt
operator|.
name|numSplits
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|runsInSlave
argument_list|(
name|readCntxt
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|WriterContext
name|runsInMaster
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
throws|throws
name|HCatException
block|{
name|WriteEntity
operator|.
name|Builder
name|builder
init|=
operator|new
name|WriteEntity
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|WriteEntity
name|entity
init|=
name|builder
operator|.
name|withTable
argument_list|(
literal|"mytbl"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HCatWriter
name|writer
init|=
name|DataTransferFactory
operator|.
name|getHCatWriter
argument_list|(
name|entity
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|WriterContext
name|info
init|=
name|writer
operator|.
name|prepareWrite
argument_list|()
decl_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|ReaderContext
name|runsInMaster
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|boolean
name|bogus
parameter_list|)
throws|throws
name|HCatException
block|{
name|ReadEntity
name|entity
init|=
operator|new
name|ReadEntity
operator|.
name|Builder
argument_list|()
operator|.
name|withTable
argument_list|(
literal|"mytbl"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HCatReader
name|reader
init|=
name|DataTransferFactory
operator|.
name|getHCatReader
argument_list|(
name|entity
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|ReaderContext
name|cntxt
init|=
name|reader
operator|.
name|prepareRead
argument_list|()
decl_stmt|;
return|return
name|cntxt
return|;
block|}
specifier|private
name|void
name|runsInSlave
parameter_list|(
name|ReaderContext
name|cntxt
parameter_list|,
name|int
name|slaveNum
parameter_list|)
throws|throws
name|HCatException
block|{
name|HCatReader
name|reader
init|=
name|DataTransferFactory
operator|.
name|getHCatReader
argument_list|(
name|cntxt
argument_list|,
name|slaveNum
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|HCatRecord
argument_list|>
name|itr
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HCatRecord
name|read
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|HCatRecord
name|written
init|=
name|getRecord
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
comment|// Argh, HCatRecord doesnt implement equals()
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Read: "
operator|+
name|read
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"Written: "
operator|+
name|written
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|written
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|read
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Read: "
operator|+
name|read
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|+
literal|"Written: "
operator|+
name|written
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|written
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|read
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Assert.assertFalse(itr.hasNext());
block|}
specifier|private
name|void
name|runsInSlave
parameter_list|(
name|WriterContext
name|context
parameter_list|)
throws|throws
name|HCatException
block|{
name|HCatWriter
name|writer
init|=
name|DataTransferFactory
operator|.
name|getHCatWriter
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
operator|new
name|HCatRecordItr
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|commit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|boolean
name|status
parameter_list|,
name|WriterContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|WriteEntity
operator|.
name|Builder
name|builder
init|=
operator|new
name|WriteEntity
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|WriteEntity
name|entity
init|=
name|builder
operator|.
name|withTable
argument_list|(
literal|"mytbl"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HCatWriter
name|writer
init|=
name|DataTransferFactory
operator|.
name|getHCatWriter
argument_list|(
name|entity
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|abort
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|HCatRecord
name|getRecord
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"Row #: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultHCatRecord
argument_list|(
name|list
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|HCatRecordItr
implements|implements
name|Iterator
argument_list|<
name|HCatRecord
argument_list|>
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|++
operator|<
literal|100
condition|?
literal|true
else|:
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|HCatRecord
name|next
parameter_list|()
block|{
return|return
name|getRecord
argument_list|(
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

