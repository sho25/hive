begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|SemanticAnalysis
operator|.
name|HCatSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|DefaultHCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|MultiOutputFormat
operator|.
name|JobConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestHCatMultiOutputFormat
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHCatMultiOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATABASE
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|tableNames
init|=
block|{
literal|"test1"
block|,
literal|"test2"
block|,
literal|"test3"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|tablePerms
init|=
block|{
literal|"755"
block|,
literal|"750"
block|,
literal|"700"
block|}
decl_stmt|;
specifier|private
specifier|static
name|Path
name|warehousedir
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|HCatSchema
argument_list|>
name|schemaMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HCatSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|HiveMetaStoreClient
name|hmsc
decl_stmt|;
specifier|private
specifier|static
name|MiniMRCluster
name|mrCluster
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|mrConf
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|static
name|File
name|workDir
decl_stmt|;
specifier|private
specifier|static
name|int
name|msPort
decl_stmt|;
specifier|private
specifier|static
name|Thread
name|t
decl_stmt|;
static|static
block|{
name|schemaMap
operator|.
name|put
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|,
operator|new
name|HCatSchema
argument_list|(
name|ColumnHolder
operator|.
name|hCattest1Cols
argument_list|)
argument_list|)
expr_stmt|;
name|schemaMap
operator|.
name|put
argument_list|(
name|tableNames
index|[
literal|1
index|]
argument_list|,
operator|new
name|HCatSchema
argument_list|(
name|ColumnHolder
operator|.
name|hCattest2Cols
argument_list|)
argument_list|)
expr_stmt|;
name|schemaMap
operator|.
name|put
argument_list|(
name|tableNames
index|[
literal|2
index|]
argument_list|,
operator|new
name|HCatSchema
argument_list|(
name|ColumnHolder
operator|.
name|hCattest3Cols
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Private class which holds all the data for the test cases    */
specifier|private
specifier|static
class|class
name|ColumnHolder
block|{
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|hCattest1Cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|hCattest2Cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|hCattest3Cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|partitionCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|test1Cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|test2Cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|test3Cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
argument_list|>
name|colMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
try|try
block|{
name|FieldSchema
name|keyCol
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"key"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|test1Cols
operator|.
name|add
argument_list|(
name|keyCol
argument_list|)
expr_stmt|;
name|test2Cols
operator|.
name|add
argument_list|(
name|keyCol
argument_list|)
expr_stmt|;
name|test3Cols
operator|.
name|add
argument_list|(
name|keyCol
argument_list|)
expr_stmt|;
name|hCattest1Cols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|keyCol
argument_list|)
argument_list|)
expr_stmt|;
name|hCattest2Cols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|keyCol
argument_list|)
argument_list|)
expr_stmt|;
name|hCattest3Cols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|keyCol
argument_list|)
argument_list|)
expr_stmt|;
name|FieldSchema
name|valueCol
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"value"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|test1Cols
operator|.
name|add
argument_list|(
name|valueCol
argument_list|)
expr_stmt|;
name|test3Cols
operator|.
name|add
argument_list|(
name|valueCol
argument_list|)
expr_stmt|;
name|hCattest1Cols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|valueCol
argument_list|)
argument_list|)
expr_stmt|;
name|hCattest3Cols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|valueCol
argument_list|)
argument_list|)
expr_stmt|;
name|FieldSchema
name|extraCol
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"extra"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|test3Cols
operator|.
name|add
argument_list|(
name|extraCol
argument_list|)
expr_stmt|;
name|hCattest3Cols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|extraCol
argument_list|)
argument_list|)
expr_stmt|;
name|colMapping
operator|.
name|put
argument_list|(
literal|"test1"
argument_list|,
name|test1Cols
argument_list|)
expr_stmt|;
name|colMapping
operator|.
name|put
argument_list|(
literal|"test2"
argument_list|,
name|test2Cols
argument_list|)
expr_stmt|;
name|colMapping
operator|.
name|put
argument_list|(
literal|"test3"
argument_list|,
name|test3Cols
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in setting up schema fields for the table"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
static|static
block|{
name|partitionCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partitionCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"cluster"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"mapred.job.tracker"
argument_list|)
expr_stmt|;
name|String
name|testDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"./"
argument_list|)
decl_stmt|;
name|testDir
operator|=
name|testDir
operator|+
literal|"/test_multitable_"
operator|+
name|Math
operator|.
name|abs
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|+
literal|"/"
expr_stmt|;
name|workDir
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|workDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|warehousedir
operator|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConf
name|metastoreConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|metastoreConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|warehousedir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run hive metastore server
name|msPort
operator|=
name|MetaStoreTestUtils
operator|.
name|startMetaStore
argument_list|(
name|metastoreConf
argument_list|)
expr_stmt|;
comment|// LocalJobRunner does not work with mapreduce OutputCommitter. So need
comment|// to use MiniMRCluster. MAPREDUCE-2350
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.queues"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.default.capacity"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"/logs"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|mrConf
operator|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
name|initializeSetup
argument_list|()
expr_stmt|;
name|warehousedir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|warehousedir
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|initializeSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|mrConf
argument_list|,
name|TestHCatMultiOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|msPort
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTFAILURERETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
name|HCatSemanticAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|warehousedir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|hmsc
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|initalizeTables
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while setting up testcase"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hmsc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|initalizeTables
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|table
range|:
name|tableNames
control|)
block|{
try|try
block|{
if|if
condition|(
name|hmsc
operator|.
name|getTable
argument_list|(
name|DATABASE
argument_list|,
name|table
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hmsc
operator|.
name|dropTable
argument_list|(
name|DATABASE
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|ignored
parameter_list|)
block|{       }
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|createTable
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|,
name|tablePerms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|createTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|tablePerm
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|DATABASE
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|ColumnHolder
operator|.
name|colMapping
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|ColumnarSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
name|ColumnHolder
operator|.
name|partitionCols
argument_list|)
expr_stmt|;
name|hmsc
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|warehousedir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|tablePerm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|warehousedir
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|warehousedir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|warehousedir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Simple test case.    *<ol>    *<li>Submits a mapred job which writes out one fixed line to each of the tables</li>    *<li>uses hive fetch task to read the data and see if it matches what was written</li>    *</ol>    *    * @throws Exception if any error occurs    */
annotation|@
name|Test
specifier|public
name|void
name|testOutputFormat
parameter_list|()
throws|throws
name|Throwable
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionValues
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|partitionValues
operator|.
name|put
argument_list|(
literal|"cluster"
argument_list|,
literal|"ag"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|OutputJobInfo
argument_list|>
name|infoList
init|=
operator|new
name|ArrayList
argument_list|<
name|OutputJobInfo
argument_list|>
argument_list|()
decl_stmt|;
name|infoList
operator|.
name|add
argument_list|(
name|OutputJobInfo
operator|.
name|create
argument_list|(
literal|"default"
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|partitionValues
argument_list|)
argument_list|)
expr_stmt|;
name|infoList
operator|.
name|add
argument_list|(
name|OutputJobInfo
operator|.
name|create
argument_list|(
literal|"default"
argument_list|,
name|tableNames
index|[
literal|1
index|]
argument_list|,
name|partitionValues
argument_list|)
argument_list|)
expr_stmt|;
name|infoList
operator|.
name|add
argument_list|(
name|OutputJobInfo
operator|.
name|create
argument_list|(
literal|"default"
argument_list|,
name|tableNames
index|[
literal|2
index|]
argument_list|,
name|partitionValues
argument_list|)
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|hiveConf
argument_list|,
literal|"SampleJob"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MyMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|MultiOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|JobConfigurer
name|configurer
init|=
name|MultiOutputFormat
operator|.
name|createConfigurer
argument_list|(
name|job
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|configurer
operator|.
name|addOutputFormat
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|,
name|HCatOutputFormat
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|HCatOutputFormat
operator|.
name|setOutput
argument_list|(
name|configurer
operator|.
name|getJob
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|,
name|infoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|HCatOutputFormat
operator|.
name|setSchema
argument_list|(
name|configurer
operator|.
name|getJob
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|,
name|schemaMap
operator|.
name|get
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|configurer
operator|.
name|configure
argument_list|()
expr_stmt|;
name|Path
name|filePath
init|=
name|createInputFile
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tbl
range|:
name|tableNames
control|)
block|{
name|outputs
operator|.
name|add
argument_list|(
name|getTableData
argument_list|(
name|tbl
argument_list|,
literal|"default"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing output of table "
operator|+
name|tableNames
index|[
literal|0
index|]
operator|+
literal|" is not correct"
argument_list|,
name|outputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"a,a,1,ag"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing output of table "
operator|+
name|tableNames
index|[
literal|1
index|]
operator|+
literal|" is not correct"
argument_list|,
name|outputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"a,1,ag"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing output of table "
operator|+
name|tableNames
index|[
literal|2
index|]
operator|+
literal|" is not correct"
argument_list|,
name|outputs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"a,a,extra,1,ag"
argument_list|)
expr_stmt|;
comment|// Check permisssion on partition dirs and files created
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|partitionFile
init|=
operator|new
name|Path
argument_list|(
name|warehousedir
operator|+
literal|"/"
operator|+
name|tableNames
index|[
name|i
index|]
operator|+
literal|"/ds=1/cluster=ag/part-m-00000"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|partitionFile
operator|.
name|getFileSystem
argument_list|(
name|mrConf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File permissions of table "
operator|+
name|tableNames
index|[
name|i
index|]
operator|+
literal|" is not correct"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|partitionFile
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|tablePerms
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File permissions of table "
operator|+
name|tableNames
index|[
name|i
index|]
operator|+
literal|" is not correct"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|partitionFile
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|tablePerms
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File permissions of table "
operator|+
name|tableNames
index|[
name|i
index|]
operator|+
literal|" is not correct"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|partitionFile
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|tablePerms
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"File permissions verified"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a input file for map    *    * @return absolute path of the file.    * @throws IOException if any error encountered    */
specifier|private
name|Path
name|createInputFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|workDir
operator|+
literal|"/MultiTableInput.txt"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|mrConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"a,a\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
comment|/**    * Method to fetch table data    *    * @param table table name    * @param database database    * @return list of columns in comma seperated way    * @throws Exception if any error occurs    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getTableData
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|database
parameter_list|)
throws|throws
name|Exception
block|{
name|QueryState
name|queryState
init|=
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
name|queryState
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hive-site.xml"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|temp
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Hive
name|hive
init|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|tbl
init|=
name|hive
operator|.
name|getTable
argument_list|(
name|database
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|FetchWork
name|work
decl_stmt|;
if|if
condition|(
operator|!
name|tbl
operator|.
name|getPartCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|hive
operator|.
name|getPartitions
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PartitionDesc
argument_list|>
name|partDesc
init|=
operator|new
name|ArrayList
argument_list|<
name|PartitionDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|partLocs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|TableDesc
name|tableDesc
init|=
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
name|partLocs
operator|.
name|add
argument_list|(
name|part
operator|.
name|getDataLocation
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|add
argument_list|(
name|Utilities
operator|.
name|getPartitionDescFromTableDesc
argument_list|(
name|tableDesc
argument_list|,
name|part
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|work
operator|=
operator|new
name|FetchWork
argument_list|(
name|partLocs
argument_list|,
name|partDesc
argument_list|,
name|tableDesc
argument_list|)
expr_stmt|;
name|work
operator|.
name|setLimit
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|work
operator|=
operator|new
name|FetchWork
argument_list|(
name|tbl
operator|.
name|getDataLocation
argument_list|()
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FetchTask
name|task
init|=
operator|new
name|FetchTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setWork
argument_list|(
name|work
argument_list|)
expr_stmt|;
name|task
operator|.
name|initialize
argument_list|(
name|queryState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|CompilationOpContext
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|fetch
argument_list|(
name|temp
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|str
range|:
name|temp
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|str
operator|.
name|replace
argument_list|(
literal|"\t"
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
specifier|static
class|class
name|MyMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|BytesWritable
argument_list|,
name|HCatRecord
argument_list|>
block|{
specifier|private
name|int
name|i
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HCatRecord
name|record
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|record
operator|=
operator|new
name|DefaultHCatRecord
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|splits
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|record
operator|=
operator|new
name|DefaultHCatRecord
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|record
operator|=
operator|new
name|DefaultHCatRecord
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|splits
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|"extra"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"This should not happen!!!!!"
argument_list|)
expr_stmt|;
block|}
name|MultiOutputFormat
operator|.
name|write
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|,
name|record
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

