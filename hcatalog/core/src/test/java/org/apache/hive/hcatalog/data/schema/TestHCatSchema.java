begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * TestHCatSchema.  */
end_comment

begin_class
specifier|public
class|class
name|TestHCatSchema
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCannotAddFieldMoreThanOnce
parameter_list|()
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|fieldSchemaList
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"name"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"What's your handle?"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"age"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"So very old"
argument_list|)
argument_list|)
expr_stmt|;
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
name|fieldSchemaList
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|schema
operator|.
name|getFieldNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"age"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"So very old"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was able to append field schema with same name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|he
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|he
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Attempt to append HCatFieldSchema with already existing name: age."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|schema
operator|.
name|getFieldNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should also not be able to add fields of different types with same name
try|try
block|{
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"age"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"Maybe spelled out?"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was able to append field schema with same name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|he
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|he
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Attempt to append HCatFieldSchema with already existing name: age."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|schema
operator|.
name|getFieldNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodeEquals
parameter_list|()
throws|throws
name|HCatException
block|{
name|HCatFieldSchema
name|memberID1
init|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"as a number"
argument_list|)
decl_stmt|;
name|HCatFieldSchema
name|memberID2
init|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"as a number"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected objects to be equal"
argument_list|,
name|memberID1
operator|.
name|equals
argument_list|(
name|memberID2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected hash codes to be equal"
argument_list|,
name|memberID1
operator|.
name|hashCode
argument_list|()
operator|==
name|memberID2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|memberID1
operator|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|TypeInfoFactory
operator|.
name|getDecimalTypeInfo
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"decimal(5,2)"
argument_list|)
expr_stmt|;
name|memberID2
operator|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|TypeInfoFactory
operator|.
name|getDecimalTypeInfo
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"decimal(5)"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Expected objects to be unequal"
argument_list|,
name|memberID1
operator|.
name|equals
argument_list|(
name|memberID2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Expected hash codes to be unequal"
argument_list|,
name|memberID1
operator|.
name|hashCode
argument_list|()
operator|==
name|memberID2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|memberID1
operator|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|TypeInfoFactory
operator|.
name|getVarcharTypeInfo
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"varchar(5)"
argument_list|)
expr_stmt|;
name|memberID2
operator|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|TypeInfoFactory
operator|.
name|getVarcharTypeInfo
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"varchar(5)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected objects to be equal"
argument_list|,
name|memberID1
operator|.
name|equals
argument_list|(
name|memberID2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected hash codes to be equal"
argument_list|,
name|memberID1
operator|.
name|hashCode
argument_list|()
operator|==
name|memberID2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCannotInstantiateSchemaWithRepeatedFieldNames
parameter_list|()
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|fieldSchemaList
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"as a number"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"location"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"there's Waldo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No duplicate names.  This should be ok
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
name|fieldSchemaList
argument_list|)
decl_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"as a String"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now a duplicated field name.  Should fail
try|try
block|{
name|HCatSchema
name|schema2
init|=
operator|new
name|HCatSchema
argument_list|(
name|fieldSchemaList
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Able to add duplicate field name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Field named memberID already exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAddField
parameter_list|()
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|fieldSchemaList
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"as a number"
argument_list|)
argument_list|)
expr_stmt|;
name|HCatFieldSchema
name|locationField
init|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"location"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"there's Waldo"
argument_list|)
decl_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
name|locationField
argument_list|)
expr_stmt|;
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
name|fieldSchemaList
argument_list|)
decl_stmt|;
name|schema
operator|.
name|remove
argument_list|(
name|locationField
argument_list|)
expr_stmt|;
name|Integer
name|position
init|=
name|schema
operator|.
name|getPosition
argument_list|(
name|locationField
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"position is not null after remove"
argument_list|,
name|position
operator|==
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|schema
operator|.
name|append
argument_list|(
name|locationField
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|ex
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// HIVE-5336. Re-number the position after remove such that:
comment|// (1) getPosition on a column always returns a value between 0..schema.size()-1
comment|// (2) getPosition() on 2 different columns should never give the same value.
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAddField2
parameter_list|()
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|fieldSchemaList
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|HCatFieldSchema
name|memberIDField
init|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"id as number"
argument_list|)
decl_stmt|;
name|HCatFieldSchema
name|locationField
init|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"location"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"loc as string"
argument_list|)
decl_stmt|;
name|HCatFieldSchema
name|memberNameField
init|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberName"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"name as string"
argument_list|)
decl_stmt|;
name|HCatFieldSchema
name|memberSalaryField
init|=
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberSalary"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"sal as number"
argument_list|)
decl_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
name|memberIDField
argument_list|)
expr_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
name|locationField
argument_list|)
expr_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
name|memberNameField
argument_list|)
expr_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
name|memberSalaryField
argument_list|)
expr_stmt|;
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
name|fieldSchemaList
argument_list|)
decl_stmt|;
name|schema
operator|.
name|remove
argument_list|(
name|locationField
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The position of atleast one of the fields is incorrect"
argument_list|,
name|schema
operator|.
name|getPosition
argument_list|(
name|memberIDField
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
name|schema
operator|.
name|getPosition
argument_list|(
name|locationField
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
name|schema
operator|.
name|getPosition
argument_list|(
name|memberNameField
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|1
operator|&&
name|schema
operator|.
name|getPosition
argument_list|(
name|memberSalaryField
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

