begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestLazyHCatRecord
block|{
specifier|private
specifier|final
name|int
name|INT_CONST
init|=
literal|789
decl_stmt|;
specifier|private
specifier|final
name|long
name|LONG_CONST
init|=
literal|5000000000L
decl_stmt|;
specifier|private
specifier|final
name|double
name|DOUBLE_CONST
init|=
literal|3.141592654
decl_stmt|;
specifier|private
specifier|final
name|String
name|STRING_CONST
init|=
literal|"hello world"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INT_CONST
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|r
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LONG_CONST
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|r
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DOUBLE_CONST
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|r
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STRING_CONST
argument_list|,
operator|(
name|String
operator|)
name|r
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWithName
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeInfo
name|ti
init|=
name|getTypeInfo
argument_list|()
decl_stmt|;
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|(
name|ti
argument_list|)
argument_list|)
decl_stmt|;
name|HCatSchema
name|schema
init|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
name|ti
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStructSubSchema
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INT_CONST
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|r
operator|.
name|get
argument_list|(
literal|"an_int"
argument_list|,
name|schema
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LONG_CONST
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|r
operator|.
name|get
argument_list|(
literal|"a_long"
argument_list|,
name|schema
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DOUBLE_CONST
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|r
operator|.
name|get
argument_list|(
literal|"a_double"
argument_list|,
name|schema
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STRING_CONST
argument_list|,
operator|(
name|String
operator|)
name|r
operator|.
name|get
argument_list|(
literal|"a_string"
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAll
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|r
operator|.
name|getAll
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INT_CONST
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LONG_CONST
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DOUBLE_CONST
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STRING_CONST
argument_list|,
operator|(
name|String
operator|)
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSet
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|sawException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|r
operator|.
name|set
argument_list|(
literal|3
argument_list|,
literal|"Mary had a little lamb"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|sawException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadFields
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|sawException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|r
operator|.
name|readFields
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|sawException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|sawException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|r
operator|.
name|write
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|sawException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetWithName
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|sawException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|r
operator|.
name|set
argument_list|(
literal|"fred"
argument_list|,
literal|null
argument_list|,
literal|"bob"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|sawException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|sawException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|r
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|sawException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|sawException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|r
operator|.
name|copy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|sawException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatRecord
name|r
init|=
operator|new
name|LazyHCatRecord
argument_list|(
name|getHCatRecord
argument_list|()
argument_list|,
name|getObjectInspector
argument_list|()
argument_list|)
operator|.
name|getWritable
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INT_CONST
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|r
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LONG_CONST
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|r
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DOUBLE_CONST
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|r
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STRING_CONST
argument_list|,
operator|(
name|String
operator|)
name|r
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"org.apache.hive.hcatalog.data.DefaultHCatRecord"
argument_list|,
name|r
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HCatRecord
name|getHCatRecord
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|rec_1
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|rec_1
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|INT_CONST
argument_list|)
argument_list|)
expr_stmt|;
name|rec_1
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|LONG_CONST
argument_list|)
argument_list|)
expr_stmt|;
name|rec_1
operator|.
name|add
argument_list|(
operator|new
name|Double
argument_list|(
name|DOUBLE_CONST
argument_list|)
argument_list|)
expr_stmt|;
name|rec_1
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|STRING_CONST
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultHCatRecord
argument_list|(
name|rec_1
argument_list|)
return|;
block|}
specifier|private
name|TypeInfo
name|getTypeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"an_int"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a_long"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a_double"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a_string"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|tis
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|tis
operator|.
name|add
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|tis
operator|.
name|add
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"bigint"
argument_list|)
argument_list|)
expr_stmt|;
name|tis
operator|.
name|add
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
name|tis
operator|.
name|add
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|names
argument_list|,
name|tis
argument_list|)
return|;
block|}
specifier|private
name|ObjectInspector
name|getObjectInspector
parameter_list|(
name|TypeInfo
name|ti
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|HCatRecordObjectInspectorFactory
operator|.
name|getHCatRecordObjectInspector
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|ti
argument_list|)
return|;
block|}
specifier|private
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|HCatRecordObjectInspectorFactory
operator|.
name|getHCatRecordObjectInspector
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|getTypeInfo
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

