begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TestHCatSchema
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testCannotAddFieldMoreThanOnce
parameter_list|()
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|fieldSchemaList
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"name"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"What's your handle?"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"age"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"So very old"
argument_list|)
argument_list|)
expr_stmt|;
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
name|fieldSchemaList
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|schema
operator|.
name|getFieldNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"age"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"So very old"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was able to append field schema with same name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|he
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|he
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Attempt to append HCatFieldSchema with already existing name: age."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|schema
operator|.
name|getFieldNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should also not be able to add fields of different types with same name
try|try
block|{
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"age"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"Maybe spelled out?"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was able to append field schema with same name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|he
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|he
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Attempt to append HCatFieldSchema with already existing name: age."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|schema
operator|.
name|getFieldNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCannotInstantiateSchemaWithRepeatedFieldNames
parameter_list|()
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|fieldSchemaList
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|"as a number"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"location"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"there's Waldo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No duplicate names.  This should be ok
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
name|fieldSchemaList
argument_list|)
decl_stmt|;
name|fieldSchemaList
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"memberID"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"as a String"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now a duplicated field name.  Should fail
try|try
block|{
name|HCatSchema
name|schema2
init|=
operator|new
name|HCatSchema
argument_list|(
name|fieldSchemaList
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Able to add duplicate field name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Field named memberID already exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

