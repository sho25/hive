begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Flushable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|BucketCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|AcidTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Orchestrates the application of an ordered sequence of mutation events to a given ACID table. Events must be grouped  * by partition, then bucket and ordered by origTxnId, then rowId. Ordering is enforced by the {@link SequenceValidator}  * and grouping is by the {@link GroupingValidator}. An acid delta file is created for each combination partition, and  * bucket id (a single transaction id is implied). Once a delta file has been closed it cannot be reopened. Therefore  * care is needed as to group the data correctly otherwise failures will occur if a delta belonging to group has been  * previously closed. The {@link MutatorCoordinator} will seamlessly handle transitions between groups, creating and  * closing {@link Mutator Mutators} as needed to write to the appropriate partition and bucket. New partitions will be  * created in the meta store if {@link AcidTable#createPartitions()} is set.  *<p/>  * {@link #insert(List, Object) Insert} events must be artificially assigned appropriate bucket ids in the preceding  * grouping phase so that they are grouped correctly. Note that any transaction id or row id assigned to the  * {@link RecordIdentifier RecordIdentifier} of such events will be ignored by both the coordinator and the underlying  * {@link RecordUpdater}.  */
end_comment

begin_class
specifier|public
class|class
name|MutatorCoordinator
implements|implements
name|Closeable
implements|,
name|Flushable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MutatorCoordinator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MutatorFactory
name|mutatorFactory
decl_stmt|;
specifier|private
specifier|final
name|GroupingValidator
name|groupingValidator
decl_stmt|;
specifier|private
specifier|final
name|SequenceValidator
name|sequenceValidator
decl_stmt|;
specifier|private
specifier|final
name|AcidTable
name|table
decl_stmt|;
specifier|private
specifier|final
name|RecordInspector
name|recordInspector
decl_stmt|;
specifier|private
specifier|final
name|PartitionHelper
name|partitionHelper
decl_stmt|;
specifier|private
specifier|final
name|AcidOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outputFormat
decl_stmt|;
specifier|private
specifier|final
name|BucketIdResolver
name|bucketIdResolver
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|deleteDeltaIfExists
decl_stmt|;
specifier|private
name|int
name|bucketId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
decl_stmt|;
specifier|private
name|Path
name|partitionPath
decl_stmt|;
specifier|private
name|Mutator
name|mutator
decl_stmt|;
name|MutatorCoordinator
parameter_list|(
name|HiveConf
name|configuration
parameter_list|,
name|MutatorFactory
name|mutatorFactory
parameter_list|,
name|PartitionHelper
name|partitionHelper
parameter_list|,
name|AcidTable
name|table
parameter_list|,
name|boolean
name|deleteDeltaIfExists
parameter_list|)
throws|throws
name|WorkerException
block|{
name|this
argument_list|(
name|configuration
argument_list|,
name|mutatorFactory
argument_list|,
name|partitionHelper
argument_list|,
operator|new
name|GroupingValidator
argument_list|()
argument_list|,
operator|new
name|SequenceValidator
argument_list|()
argument_list|,
name|table
argument_list|,
name|deleteDeltaIfExists
argument_list|)
expr_stmt|;
block|}
comment|/** Visible for testing only. */
name|MutatorCoordinator
parameter_list|(
name|HiveConf
name|configuration
parameter_list|,
name|MutatorFactory
name|mutatorFactory
parameter_list|,
name|PartitionHelper
name|partitionHelper
parameter_list|,
name|GroupingValidator
name|groupingValidator
parameter_list|,
name|SequenceValidator
name|sequenceValidator
parameter_list|,
name|AcidTable
name|table
parameter_list|,
name|boolean
name|deleteDeltaIfExists
parameter_list|)
throws|throws
name|WorkerException
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|mutatorFactory
operator|=
name|mutatorFactory
expr_stmt|;
name|this
operator|.
name|partitionHelper
operator|=
name|partitionHelper
expr_stmt|;
name|this
operator|.
name|groupingValidator
operator|=
name|groupingValidator
expr_stmt|;
name|this
operator|.
name|sequenceValidator
operator|=
name|sequenceValidator
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|deleteDeltaIfExists
operator|=
name|deleteDeltaIfExists
expr_stmt|;
name|this
operator|.
name|recordInspector
operator|=
name|this
operator|.
name|mutatorFactory
operator|.
name|newRecordInspector
argument_list|()
expr_stmt|;
name|bucketIdResolver
operator|=
name|this
operator|.
name|mutatorFactory
operator|.
name|newBucketIdResolver
argument_list|(
name|table
operator|.
name|getTotalBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|bucketId
operator|=
operator|-
literal|1
expr_stmt|;
name|outputFormat
operator|=
name|createOutputFormat
argument_list|(
name|table
operator|.
name|getOutputFormatName
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**    * We expect records grouped by (partitionValues,bucketId) and ordered by (origWriteId,rowId).    *     * @throws BucketIdException The bucket ID in the {@link RecordIdentifier} of the record does not match that computed    *           using the values in the record's bucketed columns.    * @throws RecordSequenceException The record was submitted that was not in the correct ascending (origWriteId, rowId)    *           sequence.    * @throws GroupRevisitedException If an event was submitted for a (partition, bucketId) combination that has already    *           been closed.    * @throws PartitionCreationException Could not create a new partition in the meta store.    * @throws WorkerException    */
specifier|public
name|void
name|insert
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
parameter_list|,
name|Object
name|record
parameter_list|)
throws|throws
name|WorkerException
block|{
name|reconfigureState
argument_list|(
name|OperationType
operator|.
name|INSERT
argument_list|,
name|partitionValues
argument_list|,
name|record
argument_list|)
expr_stmt|;
try|try
block|{
name|mutator
operator|.
name|insert
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Inserted into partition={}, record={}"
argument_list|,
name|partitionValues
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WorkerException
argument_list|(
literal|"Failed to insert record '"
operator|+
name|record
operator|+
literal|" using mutator '"
operator|+
name|mutator
operator|+
literal|"'."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * We expect records grouped by (partitionValues,bucketId) and ordered by (origWriteId,rowId).    *     * @throws BucketIdException The bucket ID in the {@link RecordIdentifier} of the record does not match that computed    *           using the values in the record's bucketed columns.    * @throws RecordSequenceException The record was submitted that was not in the correct ascending (origWriteId, rowId)    *           sequence.    * @throws GroupRevisitedException If an event was submitted for a (partition, bucketId) combination that has already    *           been closed.    * @throws PartitionCreationException Could not create a new partition in the meta store.    * @throws WorkerException    */
specifier|public
name|void
name|update
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
parameter_list|,
name|Object
name|record
parameter_list|)
throws|throws
name|WorkerException
block|{
name|reconfigureState
argument_list|(
name|OperationType
operator|.
name|UPDATE
argument_list|,
name|partitionValues
argument_list|,
name|record
argument_list|)
expr_stmt|;
try|try
block|{
name|mutator
operator|.
name|update
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updated in partition={}, record={}"
argument_list|,
name|partitionValues
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WorkerException
argument_list|(
literal|"Failed to update record '"
operator|+
name|record
operator|+
literal|" using mutator '"
operator|+
name|mutator
operator|+
literal|"'."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * We expect records grouped by (partitionValues,bucketId) and ordered by (origWriteId,rowId).    *     * @throws BucketIdException The bucket ID in the {@link RecordIdentifier} of the record does not match that computed    *           using the values in the record's bucketed columns.    * @throws RecordSequenceException The record was submitted that was not in the correct ascending (origWriteId, rowId)    *           sequence.    * @throws GroupRevisitedException If an event was submitted for a (partition, bucketId) combination that has already    *           been closed.    * @throws PartitionCreationException Could not create a new partition in the meta store.    * @throws WorkerException    */
specifier|public
name|void
name|delete
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
parameter_list|,
name|Object
name|record
parameter_list|)
throws|throws
name|WorkerException
block|{
name|reconfigureState
argument_list|(
name|OperationType
operator|.
name|DELETE
argument_list|,
name|partitionValues
argument_list|,
name|record
argument_list|)
expr_stmt|;
try|try
block|{
name|mutator
operator|.
name|delete
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted from partition={}, record={}"
argument_list|,
name|partitionValues
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WorkerException
argument_list|(
literal|"Failed to delete record '"
operator|+
name|record
operator|+
literal|" using mutator '"
operator|+
name|mutator
operator|+
literal|"'."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|mutator
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|partitionHelper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|mutator
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reconfigureState
parameter_list|(
name|OperationType
name|operationType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|newPartitionValues
parameter_list|,
name|Object
name|record
parameter_list|)
throws|throws
name|WorkerException
block|{
name|RecordIdentifier
name|newRecordIdentifier
init|=
name|extractRecordIdentifier
argument_list|(
name|operationType
argument_list|,
name|newPartitionValues
argument_list|,
name|record
argument_list|)
decl_stmt|;
name|int
name|newBucketId
init|=
name|newRecordIdentifier
operator|.
name|getBucketProperty
argument_list|()
decl_stmt|;
if|if
condition|(
name|newPartitionValues
operator|==
literal|null
condition|)
block|{
name|newPartitionValues
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|partitionHasChanged
argument_list|(
name|newPartitionValues
argument_list|)
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|createPartitions
argument_list|()
operator|&&
name|operationType
operator|==
name|OperationType
operator|.
name|INSERT
condition|)
block|{
name|partitionHelper
operator|.
name|createPartitionIfNotExists
argument_list|(
name|newPartitionValues
argument_list|)
expr_stmt|;
block|}
name|Path
name|newPartitionPath
init|=
name|partitionHelper
operator|.
name|getPathForPartition
argument_list|(
name|newPartitionValues
argument_list|)
decl_stmt|;
name|resetMutator
argument_list|(
name|newBucketId
argument_list|,
name|newPartitionValues
argument_list|,
name|newPartitionPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bucketIdHasChanged
argument_list|(
name|newBucketId
argument_list|)
condition|)
block|{
name|resetMutator
argument_list|(
name|newBucketId
argument_list|,
name|partitionValues
argument_list|,
name|partitionPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|validateRecordSequence
argument_list|(
name|operationType
argument_list|,
name|newRecordIdentifier
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WorkerException
argument_list|(
literal|"Failed to reset mutator when performing "
operator|+
name|operationType
operator|+
literal|" of record: "
operator|+
name|record
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RecordIdentifier
name|extractRecordIdentifier
parameter_list|(
name|OperationType
name|operationType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|newPartitionValues
parameter_list|,
name|Object
name|record
parameter_list|)
throws|throws
name|BucketIdException
block|{
name|RecordIdentifier
name|recordIdentifier
init|=
name|recordInspector
operator|.
name|extractRecordIdentifier
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|int
name|bucketIdFromRecord
init|=
name|BucketCodec
operator|.
name|determineVersion
argument_list|(
name|recordIdentifier
operator|.
name|getBucketProperty
argument_list|()
argument_list|)
operator|.
name|decodeWriterId
argument_list|(
name|recordIdentifier
operator|.
name|getBucketProperty
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|computedBucketId
init|=
name|bucketIdResolver
operator|.
name|computeBucketId
argument_list|(
name|record
argument_list|)
decl_stmt|;
if|if
condition|(
name|operationType
operator|!=
name|OperationType
operator|.
name|DELETE
operator|&&
name|bucketIdFromRecord
operator|!=
name|computedBucketId
condition|)
block|{
throw|throw
operator|new
name|BucketIdException
argument_list|(
literal|"RecordIdentifier.bucketId != computed bucketId ("
operator|+
name|computedBucketId
operator|+
literal|") for record "
operator|+
name|recordIdentifier
operator|+
literal|" in partition "
operator|+
name|newPartitionValues
operator|+
literal|"."
argument_list|)
throw|;
block|}
return|return
name|recordIdentifier
return|;
block|}
specifier|private
name|void
name|resetMutator
parameter_list|(
name|int
name|newBucketId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|newPartitionValues
parameter_list|,
name|Path
name|newPartitionPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|GroupRevisitedException
block|{
if|if
condition|(
name|mutator
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|validateGrouping
argument_list|(
name|newPartitionValues
argument_list|,
name|newBucketId
argument_list|)
expr_stmt|;
name|sequenceValidator
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteDeltaIfExists
condition|)
block|{
comment|// TODO: Should this be the concern of the mutator?
name|deleteDeltaIfExists
argument_list|(
name|newPartitionPath
argument_list|,
name|table
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|newBucketId
argument_list|)
expr_stmt|;
block|}
name|mutator
operator|=
name|mutatorFactory
operator|.
name|newMutator
argument_list|(
name|outputFormat
argument_list|,
name|table
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|newPartitionPath
argument_list|,
name|newBucketId
argument_list|)
expr_stmt|;
name|bucketId
operator|=
name|newBucketId
expr_stmt|;
name|partitionValues
operator|=
name|newPartitionValues
expr_stmt|;
name|partitionPath
operator|=
name|newPartitionPath
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reset mutator: bucketId={}, partition={}, partitionPath={}"
argument_list|,
name|bucketId
argument_list|,
name|partitionValues
argument_list|,
name|partitionPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|partitionHasChanged
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|newPartitionValues
parameter_list|)
block|{
name|boolean
name|partitionHasChanged
init|=
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|partitionValues
argument_list|,
name|newPartitionValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionHasChanged
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition changed from={}, to={}"
argument_list|,
name|this
operator|.
name|partitionValues
argument_list|,
name|newPartitionValues
argument_list|)
expr_stmt|;
block|}
return|return
name|partitionHasChanged
return|;
block|}
specifier|private
name|boolean
name|bucketIdHasChanged
parameter_list|(
name|int
name|newBucketId
parameter_list|)
block|{
name|boolean
name|bucketIdHasChanged
init|=
name|this
operator|.
name|bucketId
operator|!=
name|newBucketId
decl_stmt|;
if|if
condition|(
name|bucketIdHasChanged
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bucket ID changed from={}, to={}"
argument_list|,
name|this
operator|.
name|bucketId
argument_list|,
name|newBucketId
argument_list|)
expr_stmt|;
block|}
return|return
name|bucketIdHasChanged
return|;
block|}
specifier|private
name|void
name|validateGrouping
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|newPartitionValues
parameter_list|,
name|int
name|newBucketId
parameter_list|)
throws|throws
name|GroupRevisitedException
block|{
if|if
condition|(
operator|!
name|groupingValidator
operator|.
name|isInSequence
argument_list|(
name|newPartitionValues
argument_list|,
name|bucketId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GroupRevisitedException
argument_list|(
literal|"Group out of sequence: state="
operator|+
name|groupingValidator
operator|+
literal|", partition="
operator|+
name|newPartitionValues
operator|+
literal|", bucketId="
operator|+
name|newBucketId
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|validateRecordSequence
parameter_list|(
name|OperationType
name|operationType
parameter_list|,
name|RecordIdentifier
name|newRecordIdentifier
parameter_list|)
throws|throws
name|RecordSequenceException
block|{
name|boolean
name|identiferOutOfSequence
init|=
name|operationType
operator|!=
name|OperationType
operator|.
name|INSERT
operator|&&
operator|!
name|sequenceValidator
operator|.
name|isInSequence
argument_list|(
name|newRecordIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|identiferOutOfSequence
condition|)
block|{
throw|throw
operator|new
name|RecordSequenceException
argument_list|(
literal|"Records not in sequence: state="
operator|+
name|sequenceValidator
operator|+
literal|", recordIdentifier="
operator|+
name|newRecordIdentifier
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|AcidOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|createOutputFormat
parameter_list|(
name|String
name|outputFormatName
parameter_list|,
name|HiveConf
name|configuration
parameter_list|)
throws|throws
name|WorkerException
block|{
try|try
block|{
return|return
operator|(
name|AcidOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|outputFormatName
argument_list|)
argument_list|,
name|configuration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WorkerException
argument_list|(
literal|"Could not locate class for '"
operator|+
name|outputFormatName
operator|+
literal|"'."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/* A delta may be present from a previous failed task attempt. */
specifier|private
name|void
name|deleteDeltaIfExists
parameter_list|(
name|Path
name|partitionPath
parameter_list|,
name|long
name|writeId
parameter_list|,
name|int
name|bucketId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|deltaPath
init|=
name|AcidUtils
operator|.
name|createFilename
argument_list|(
name|partitionPath
argument_list|,
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|configuration
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucketId
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
name|writeId
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|writeId
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSystem
init|=
name|deltaPath
operator|.
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|deltaPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting existing delta path: {}"
argument_list|,
name|deltaPath
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|delete
argument_list|(
name|deltaPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

