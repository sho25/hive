begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|RegexSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Streaming Writer handles text input data with regex. Uses  * org.apache.hadoop.hive.serde2.RegexSerDe  */
end_comment

begin_class
specifier|public
class|class
name|StrictRegexWriter
extends|extends
name|AbstractRecordWriter
block|{
specifier|private
name|RegexSerDe
name|serde
decl_stmt|;
specifier|private
specifier|final
name|StructObjectInspector
name|recordObjInspector
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
index|[]
name|bucketObjInspectors
decl_stmt|;
specifier|private
specifier|final
name|StructField
index|[]
name|bucketStructFields
decl_stmt|;
comment|/**    * @param endPoint the end point to write to    * @param conn connection this Writer is to be used with    * @throws ConnectionError    * @throws SerializationError    * @throws StreamingException    */
specifier|public
name|StrictRegexWriter
parameter_list|(
name|HiveEndPoint
name|endPoint
parameter_list|,
name|StreamingConnection
name|conn
parameter_list|)
throws|throws
name|ConnectionError
throws|,
name|SerializationError
throws|,
name|StreamingException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|endPoint
argument_list|,
literal|null
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param endPoint the end point to write to    * @param conf a Hive conf object. Should be null if not using advanced Hive settings.    * @param conn connection this Writer is to be used with    * @throws ConnectionError    * @throws SerializationError    * @throws StreamingException    */
specifier|public
name|StrictRegexWriter
parameter_list|(
name|HiveEndPoint
name|endPoint
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|StreamingConnection
name|conn
parameter_list|)
throws|throws
name|ConnectionError
throws|,
name|SerializationError
throws|,
name|StreamingException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|endPoint
argument_list|,
name|conf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param regex to parse the data    * @param endPoint the end point to write to    * @param conf a Hive conf object. Should be null if not using advanced Hive settings.    * @param conn connection this Writer is to be used with    * @throws ConnectionError    * @throws SerializationError    * @throws StreamingException    */
specifier|public
name|StrictRegexWriter
parameter_list|(
name|String
name|regex
parameter_list|,
name|HiveEndPoint
name|endPoint
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|StreamingConnection
name|conn
parameter_list|)
throws|throws
name|ConnectionError
throws|,
name|SerializationError
throws|,
name|StreamingException
block|{
name|super
argument_list|(
name|endPoint
argument_list|,
name|conf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|this
operator|.
name|serde
operator|=
name|createSerde
argument_list|(
name|tbl
argument_list|,
name|conf
argument_list|,
name|regex
argument_list|)
expr_stmt|;
comment|// get ObjInspectors for entire record and bucketed cols
try|try
block|{
name|recordObjInspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|this
operator|.
name|bucketObjInspectors
operator|=
name|getObjectInspectorsForBucketedCols
argument_list|(
name|bucketIds
argument_list|,
name|recordObjInspector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerializationError
argument_list|(
literal|"Unable to get ObjectInspector for bucket columns"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// get StructFields for bucketed cols
name|bucketStructFields
operator|=
operator|new
name|StructField
index|[
name|bucketIds
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|allFields
init|=
name|recordObjInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|bucketStructFields
index|[
name|i
index|]
operator|=
name|allFields
operator|.
name|get
argument_list|(
name|bucketIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AbstractSerDe
name|getSerde
parameter_list|()
block|{
return|return
name|serde
return|;
block|}
annotation|@
name|Override
specifier|protected
name|StructObjectInspector
name|getRecordObjectInspector
parameter_list|()
block|{
return|return
name|recordObjInspector
return|;
block|}
annotation|@
name|Override
specifier|protected
name|StructField
index|[]
name|getBucketStructFields
parameter_list|()
block|{
return|return
name|bucketStructFields
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ObjectInspector
index|[]
name|getBucketObjectInspectors
parameter_list|()
block|{
return|return
name|bucketObjInspectors
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|long
name|transactionId
parameter_list|,
name|byte
index|[]
name|record
parameter_list|)
throws|throws
name|StreamingIOFailure
throws|,
name|SerializationError
block|{
try|try
block|{
name|Object
name|encodedRow
init|=
name|encode
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|int
name|bucket
init|=
name|getBucket
argument_list|(
name|encodedRow
argument_list|)
decl_stmt|;
name|getRecordUpdater
argument_list|(
name|bucket
argument_list|)
operator|.
name|insert
argument_list|(
name|transactionId
argument_list|,
name|encodedRow
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StreamingIOFailure
argument_list|(
literal|"Error writing record in transaction("
operator|+
name|transactionId
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates RegexSerDe    * @param tbl   used to create serde    * @param conf  used to create serde    * @param regex  used to create serde    * @return    * @throws SerializationError if serde could not be initialized    */
specifier|private
specifier|static
name|RegexSerDe
name|createSerde
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|SerializationError
block|{
try|try
block|{
name|Properties
name|tableProps
init|=
name|MetaStoreUtils
operator|.
name|getTableMetadata
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
name|RegexSerDe
operator|.
name|INPUT_REGEX
argument_list|,
name|regex
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tableColumns
init|=
name|getCols
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|tableColumns
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|RegexSerDe
name|serde
init|=
operator|new
name|RegexSerDe
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|tableProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|serde
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerializationError
argument_list|(
literal|"Error initializing serde "
operator|+
name|RegexSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getCols
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|cols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|colNames
return|;
block|}
comment|/**    * Encode Utf8 encoded string bytes using RegexSerDe    *     * @param utf8StrRecord    * @return The encoded object    * @throws SerializationError    */
annotation|@
name|Override
specifier|public
name|Object
name|encode
parameter_list|(
name|byte
index|[]
name|utf8StrRecord
parameter_list|)
throws|throws
name|SerializationError
block|{
try|try
block|{
name|Text
name|blob
init|=
operator|new
name|Text
argument_list|(
name|utf8StrRecord
argument_list|)
decl_stmt|;
return|return
name|serde
operator|.
name|deserialize
argument_list|(
name|blob
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerializationError
argument_list|(
literal|"Unable to convert byte[] record into Object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

