begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Utility class that can create new table partitions within the {@link IMetaStoreClient meta store}. */
end_comment

begin_class
class|class
name|CreatePartitionHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CreatePartitionHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreClient
name|metaStoreClient
decl_stmt|;
specifier|private
specifier|final
name|String
name|databaseName
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
decl_stmt|;
name|CreatePartitionHelper
parameter_list|(
name|IMetaStoreClient
name|metaStoreClient
parameter_list|,
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|metaStoreClient
operator|=
name|metaStoreClient
expr_stmt|;
name|this
operator|.
name|databaseName
operator|=
name|databaseName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/** Returns the expected {@link Path} for a given partition value. */
name|Path
name|getPathForPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|newPartitionValues
parameter_list|)
throws|throws
name|WorkerException
block|{
try|try
block|{
name|String
name|location
decl_stmt|;
if|if
condition|(
name|newPartitionValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|location
operator|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|location
operator|=
name|metaStoreClient
operator|.
name|getPartition
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|,
name|newPartitionValues
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found path {} for partition {}"
argument_list|,
name|location
argument_list|,
name|newPartitionValues
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|location
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WorkerException
argument_list|(
literal|"Table not found '"
operator|+
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"'."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WorkerException
argument_list|(
literal|"Failed to get path for partitions '"
operator|+
name|newPartitionValues
operator|+
literal|"' on table '"
operator|+
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"' with meta store: "
operator|+
name|metaStoreClient
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Creates the specified partition if it does not already exist. Does nothing if the table is unpartitioned. */
name|void
name|createPartitionIfNotExists
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|newPartitionValues
parameter_list|)
throws|throws
name|WorkerException
block|{
if|if
condition|(
name|newPartitionValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to create partition (if not exists) {}.{}:{}"
argument_list|,
name|databaseName
argument_list|,
name|tableName
argument_list|,
name|newPartitionValues
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|partition
operator|.
name|setDbName
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setTableName
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|partitionSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|partitionSd
operator|.
name|setLocation
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|newPartitionValues
argument_list|)
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setSd
argument_list|(
name|partitionSd
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setValues
argument_list|(
name|newPartitionValues
argument_list|)
expr_stmt|;
name|metaStoreClient
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition already exisits: {}.{}:{}"
argument_list|,
name|databaseName
argument_list|,
name|tableName
argument_list|,
name|newPartitionValues
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create partition : "
operator|+
name|newPartitionValues
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PartitionCreationException
argument_list|(
literal|"Table not found '"
operator|+
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"'."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create partition : "
operator|+
name|newPartitionValues
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PartitionCreationException
argument_list|(
literal|"Failed to create partition '"
operator|+
name|newPartitionValues
operator|+
literal|"' on table '"
operator|+
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

