begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * Describes an ACID table that can receive mutation events. Used to encode the information required by workers to write  * ACID events without requiring them to once more retrieve the data from the meta store db.  * @deprecated as of Hive 3.0.0  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|AcidTable
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|String
name|databaseName
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|createPartitions
decl_stmt|;
specifier|private
specifier|final
name|TableType
name|tableType
decl_stmt|;
specifier|private
name|long
name|writeId
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
name|AcidTable
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|createPartitions
parameter_list|,
name|TableType
name|tableType
parameter_list|)
block|{
name|this
operator|.
name|databaseName
operator|=
name|databaseName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|createPartitions
operator|=
name|createPartitions
expr_stmt|;
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
block|}
comment|/**    * Returns {@code 0} until such a time that a {@link Transaction} has been acquired (when    * {@link MutatorClient#newTransaction()} exits), at which point this will return the    * write id.    */
specifier|public
name|long
name|getWriteId
parameter_list|()
block|{
return|return
name|writeId
return|;
block|}
specifier|public
name|String
name|getDatabaseName
parameter_list|()
block|{
return|return
name|databaseName
return|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|public
name|boolean
name|createPartitions
parameter_list|()
block|{
return|return
name|createPartitions
return|;
block|}
comment|/**    * Returns {@code null} until such a time that the table described by the {@link #getDatabaseName() database_name}    * {@code .}{@link #getTableName() table_name} has been resolved with the meta store database (when    * {@link MutatorClient#connect()} exits), at which point this will then return the corresponding    * {@link StorageDescriptor#getOutputFormat() OutputFormat}.    */
specifier|public
name|String
name|getOutputFormatName
parameter_list|()
block|{
return|return
name|table
operator|!=
literal|null
condition|?
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**    * Returns {@code 0} until such a time that the table described by the {@link #getDatabaseName() database_name}    * {@code .}{@link #getTableName() table_name} has been resolved with the meta store database (when    * {@link MutatorClient#connect()} exits), at which point this will then return the corresponding    * {@link StorageDescriptor#getNumBuckets() total bucket count}.    */
specifier|public
name|int
name|getTotalBuckets
parameter_list|()
block|{
return|return
name|table
operator|!=
literal|null
condition|?
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
else|:
literal|0
return|;
block|}
specifier|public
name|TableType
name|getTableType
parameter_list|()
block|{
return|return
name|tableType
return|;
block|}
specifier|public
name|String
name|getQualifiedName
parameter_list|()
block|{
return|return
operator|(
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|)
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
comment|/**    * Returns {@code null} until such a time that the table described by the {@link #getDatabaseName() database_name}    * {@code .}{@link #getTableName() table_name} has been resolved with the meta store database (when    * {@link MutatorClient#connect()} exits), at which point this will then return the corresponding {@link Table}.    * Provided as a convenience to API users who may wish to gather further meta data regarding the table without    * connecting with the meta store once more.    */
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
name|void
name|setWriteId
parameter_list|(
name|long
name|writeId
parameter_list|)
block|{
name|this
operator|.
name|writeId
operator|=
name|writeId
expr_stmt|;
block|}
name|void
name|setTable
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
if|if
condition|(
operator|!
name|databaseName
operator|.
name|equalsIgnoreCase
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Incorrect database name."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Incorrect table name."
argument_list|)
throw|;
block|}
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AcidTable [databaseName="
operator|+
name|databaseName
operator|+
literal|", tableName="
operator|+
name|tableName
operator|+
literal|", createPartitions="
operator|+
name|createPartitions
operator|+
literal|", tableType="
operator|+
name|tableType
operator|+
literal|", outputFormatName="
operator|+
name|getOutputFormatName
argument_list|()
operator|+
literal|", totalBuckets="
operator|+
name|getTotalBuckets
argument_list|()
operator|+
literal|", writeId="
operator|+
name|writeId
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

