begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchTxnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@link TimerTask} that sends {@link IMetaStoreClient#heartbeat(long, long) heartbeat} events to the  * {@link IMetaStoreClient meta store} to keet the {@link Lock} and {@link Transaction} alive. Nofifies the registered  * {@link LockFailureListener} should the lock fail.  */
end_comment

begin_class
class|class
name|HeartbeatTimerTask
extends|extends
name|TimerTask
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HeartbeatTimerTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreClient
name|metaStoreClient
decl_stmt|;
specifier|private
specifier|final
name|long
name|lockId
decl_stmt|;
specifier|private
specifier|final
name|Long
name|transactionId
decl_stmt|;
specifier|private
specifier|final
name|LockFailureListener
name|listener
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|Table
argument_list|>
name|tableDescriptors
decl_stmt|;
name|HeartbeatTimerTask
parameter_list|(
name|IMetaStoreClient
name|metaStoreClient
parameter_list|,
name|LockFailureListener
name|listener
parameter_list|,
name|Long
name|transactionId
parameter_list|,
name|Collection
argument_list|<
name|Table
argument_list|>
name|tableDescriptors
parameter_list|,
name|long
name|lockId
parameter_list|)
block|{
name|this
operator|.
name|metaStoreClient
operator|=
name|metaStoreClient
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|transactionId
operator|=
name|transactionId
expr_stmt|;
name|this
operator|.
name|tableDescriptors
operator|=
name|tableDescriptors
expr_stmt|;
name|this
operator|.
name|lockId
operator|=
name|lockId
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reporting to listener {}"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// I'm assuming that there is no transaction ID for a read lock.
name|metaStoreClient
operator|.
name|heartbeat
argument_list|(
name|transactionId
operator|==
literal|null
condition|?
literal|0
else|:
name|transactionId
argument_list|,
name|lockId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sent heartbeat for lock={}, transactionId={}"
argument_list|,
name|lockId
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchLockException
decl||
name|NoSuchTxnException
decl||
name|TxnAbortedException
name|e
parameter_list|)
block|{
name|failLock
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to send heartbeat to meta store."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|failLock
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Lock "
operator|+
name|lockId
operator|+
literal|" failed, cancelling heartbeat and notifiying listener: "
operator|+
name|listener
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Cancel the heartbeat
name|cancel
argument_list|()
expr_stmt|;
name|listener
operator|.
name|lockFailed
argument_list|(
name|lockId
argument_list|,
name|transactionId
argument_list|,
name|Lock
operator|.
name|asStrings
argument_list|(
name|tableDescriptors
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HeartbeatTimerTask [lockId="
operator|+
name|lockId
operator|+
literal|", transactionId="
operator|+
name|transactionId
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

