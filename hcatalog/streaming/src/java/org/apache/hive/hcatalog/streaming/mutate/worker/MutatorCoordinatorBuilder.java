begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|HiveConfFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|UgiMetaStoreClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|AcidTable
import|;
end_import

begin_comment
comment|/** Convenience class for building {@link MutatorCoordinator} instances. */
end_comment

begin_class
specifier|public
class|class
name|MutatorCoordinatorBuilder
block|{
specifier|private
name|HiveConf
name|configuration
decl_stmt|;
specifier|private
name|MutatorFactory
name|mutatorFactory
decl_stmt|;
specifier|private
name|UserGroupInformation
name|authenticatedUser
decl_stmt|;
specifier|private
name|String
name|metaStoreUri
decl_stmt|;
specifier|private
name|AcidTable
name|table
decl_stmt|;
specifier|private
name|boolean
name|deleteDeltaIfExists
decl_stmt|;
specifier|public
name|MutatorCoordinatorBuilder
name|configuration
parameter_list|(
name|HiveConf
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MutatorCoordinatorBuilder
name|authenticatedUser
parameter_list|(
name|UserGroupInformation
name|authenticatedUser
parameter_list|)
block|{
name|this
operator|.
name|authenticatedUser
operator|=
name|authenticatedUser
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MutatorCoordinatorBuilder
name|metaStoreUri
parameter_list|(
name|String
name|metaStoreUri
parameter_list|)
block|{
name|this
operator|.
name|metaStoreUri
operator|=
name|metaStoreUri
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Set the destination ACID table for this client. */
specifier|public
name|MutatorCoordinatorBuilder
name|table
parameter_list|(
name|AcidTable
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * If the delta file already exists, delete it. THis is useful in a MapReduce setting where a number of task retries    * will attempt to write the same delta file.    */
specifier|public
name|MutatorCoordinatorBuilder
name|deleteDeltaIfExists
parameter_list|()
block|{
name|this
operator|.
name|deleteDeltaIfExists
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MutatorCoordinatorBuilder
name|mutatorFactory
parameter_list|(
name|MutatorFactory
name|mutatorFactory
parameter_list|)
block|{
name|this
operator|.
name|mutatorFactory
operator|=
name|mutatorFactory
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MutatorCoordinator
name|build
parameter_list|()
throws|throws
name|WorkerException
throws|,
name|MetaException
block|{
name|configuration
operator|=
name|HiveConfFactory
operator|.
name|newInstance
argument_list|(
name|configuration
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|metaStoreUri
argument_list|)
expr_stmt|;
name|PartitionHelper
name|partitionHelper
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|createPartitions
argument_list|()
condition|)
block|{
name|partitionHelper
operator|=
name|newMetaStorePartitionHelper
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|partitionHelper
operator|=
name|newWarehousePartitionHelper
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|MutatorCoordinator
argument_list|(
name|configuration
argument_list|,
name|mutatorFactory
argument_list|,
name|partitionHelper
argument_list|,
name|table
argument_list|,
name|deleteDeltaIfExists
argument_list|)
return|;
block|}
specifier|private
name|PartitionHelper
name|newWarehousePartitionHelper
parameter_list|()
throws|throws
name|MetaException
throws|,
name|WorkerException
block|{
name|String
name|location
init|=
name|table
operator|.
name|getTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionFields
init|=
name|table
operator|.
name|getTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partitionFields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|partitionFields
control|)
block|{
name|partitionColumns
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|WarehousePartitionHelper
argument_list|(
name|configuration
argument_list|,
name|tablePath
argument_list|,
name|partitionColumns
argument_list|)
return|;
block|}
specifier|private
name|PartitionHelper
name|newMetaStorePartitionHelper
parameter_list|()
throws|throws
name|MetaException
throws|,
name|WorkerException
block|{
name|String
name|user
init|=
name|authenticatedUser
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
else|:
name|authenticatedUser
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|boolean
name|secureMode
init|=
name|authenticatedUser
operator|==
literal|null
condition|?
literal|false
else|:
name|authenticatedUser
operator|.
name|hasKerberosCredentials
argument_list|()
decl_stmt|;
try|try
block|{
name|IMetaStoreClient
name|metaStoreClient
init|=
operator|new
name|UgiMetaStoreClientFactory
argument_list|(
name|metaStoreUri
argument_list|,
name|configuration
argument_list|,
name|authenticatedUser
argument_list|,
name|user
argument_list|,
name|secureMode
argument_list|)
operator|.
name|newInstance
argument_list|(
name|HCatUtil
operator|.
name|getHiveMetastoreClient
argument_list|(
name|configuration
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
return|return
operator|new
name|MetaStorePartitionHelper
argument_list|(
name|metaStoreClient
argument_list|,
name|table
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tablePath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WorkerException
argument_list|(
literal|"Could not create meta store client."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

