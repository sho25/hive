begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchTxnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|TransactionBatch
operator|.
name|TxnState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Transaction
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Transaction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreClient
name|metaStoreClient
decl_stmt|;
specifier|private
specifier|final
name|long
name|transactionId
decl_stmt|;
specifier|private
name|TxnState
name|state
decl_stmt|;
name|Transaction
parameter_list|(
name|IMetaStoreClient
name|metaStoreClient
parameter_list|,
name|Lock
operator|.
name|Options
name|lockOptions
parameter_list|)
throws|throws
name|TransactionException
block|{
name|this
argument_list|(
name|metaStoreClient
argument_list|,
operator|new
name|Lock
argument_list|(
name|metaStoreClient
argument_list|,
name|lockOptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Visible for testing only. */
name|Transaction
parameter_list|(
name|IMetaStoreClient
name|metaStoreClient
parameter_list|,
name|Lock
name|lock
parameter_list|)
throws|throws
name|TransactionException
block|{
name|this
operator|.
name|metaStoreClient
operator|=
name|metaStoreClient
expr_stmt|;
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
name|transactionId
operator|=
name|open
argument_list|(
name|lock
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getTransactionId
parameter_list|()
block|{
return|return
name|transactionId
return|;
block|}
specifier|public
name|TxnState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/**    * Begin the transaction. Acquires a {@link Lock} for the transaction and {@link AcidTable AcidTables}.    */
specifier|public
name|void
name|begin
parameter_list|()
throws|throws
name|TransactionException
block|{
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionException
argument_list|(
literal|"Unable to acquire lock for transaction: "
operator|+
name|transactionId
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|state
operator|=
name|TxnState
operator|.
name|OPEN
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin. Transaction id: {}"
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
block|}
comment|/** Commits the transaction. Releases the {@link Lock}. */
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|TransactionException
block|{
try|try
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
comment|// This appears to leave the remove transaction in an inconsistent state but the heartbeat is now
comment|// cancelled and it will eventually time out
throw|throw
operator|new
name|TransactionException
argument_list|(
literal|"Unable to release lock: "
operator|+
name|lock
operator|+
literal|" for transaction: "
operator|+
name|transactionId
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|metaStoreClient
operator|.
name|commitTxn
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|state
operator|=
name|TxnState
operator|.
name|COMMITTED
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionException
argument_list|(
literal|"Invalid transaction id: "
operator|+
name|transactionId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TxnAbortedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionException
argument_list|(
literal|"Aborted transaction cannot be committed: "
operator|+
name|transactionId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionException
argument_list|(
literal|"Unable to commit transaction: "
operator|+
name|transactionId
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Committed. Transaction id: {}"
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
block|}
comment|/** Aborts the transaction. Releases the {@link Lock}. */
specifier|public
name|void
name|abort
parameter_list|()
throws|throws
name|TransactionException
block|{
try|try
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
comment|// This appears to leave the remove transaction in an inconsistent state but the heartbeat is now
comment|// cancelled and it will eventually time out
throw|throw
operator|new
name|TransactionException
argument_list|(
literal|"Unable to release lock: "
operator|+
name|lock
operator|+
literal|" for transaction: "
operator|+
name|transactionId
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|metaStoreClient
operator|.
name|rollbackTxn
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|state
operator|=
name|TxnState
operator|.
name|ABORTED
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionException
argument_list|(
literal|"Unable to abort invalid transaction id : "
operator|+
name|transactionId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionException
argument_list|(
literal|"Unable to abort transaction id : "
operator|+
name|transactionId
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Aborted. Transaction id: {}"
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Transaction [transactionId="
operator|+
name|transactionId
operator|+
literal|", state="
operator|+
name|state
operator|+
literal|"]"
return|;
block|}
specifier|private
name|long
name|open
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|TransactionException
block|{
name|long
name|transactionId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|transactionId
operator|=
name|metaStoreClient
operator|.
name|openTxn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|state
operator|=
name|TxnState
operator|.
name|INACTIVE
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionException
argument_list|(
literal|"Unable to open transaction for user: "
operator|+
name|user
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opened transaction with id: {}"
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
return|return
name|transactionId
return|;
block|}
block|}
end_class

end_unit

