begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility to serialize/deserialize {@link AcidTable AcidTables} into strings so that they can be easily transported as  * {@link Configuration} properties.  */
end_comment

begin_class
specifier|public
class|class
name|AcidTableSerializer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AcidTableSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* Allow for improved schemes. */
specifier|private
specifier|static
specifier|final
name|String
name|PROLOG_V1
init|=
literal|"AcidTableV1:"
decl_stmt|;
comment|/** Returns a base 64 encoded representation of the supplied {@link AcidTable}. */
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|AcidTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|data
init|=
literal|null
decl_stmt|;
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|data
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeUTF
argument_list|(
name|table
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeUTF
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeBoolean
argument_list|(
name|table
operator|.
name|createPartitions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getWriteId
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Write ID<= 0. The recipient is probably expecting a table write ID."
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|writeLong
argument_list|(
name|table
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeByte
argument_list|(
name|table
operator|.
name|getTableType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|metaTable
init|=
name|table
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaTable
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|thrift
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TCompactProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
operator|.
name|serialize
argument_list|(
name|metaTable
argument_list|)
decl_stmt|;
name|data
operator|.
name|writeInt
argument_list|(
name|thrift
operator|.
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|write
argument_list|(
name|thrift
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Meta store table is null. The recipient is probably expecting an instance."
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error serializing meta store table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|PROLOG_V1
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns the {@link AcidTable} instance decoded from a base 64 representation. */
specifier|public
specifier|static
name|AcidTable
name|decode
parameter_list|(
name|String
name|encoded
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|encoded
operator|.
name|startsWith
argument_list|(
name|PROLOG_V1
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported version."
argument_list|)
throw|;
block|}
name|encoded
operator|=
name|encoded
operator|.
name|substring
argument_list|(
name|PROLOG_V1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decoded
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
name|AcidTable
name|table
init|=
literal|null
decl_stmt|;
try|try
init|(
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|decoded
argument_list|)
argument_list|)
init|)
block|{
name|String
name|databaseName
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|boolean
name|createPartitions
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
name|long
name|writeId
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|TableType
name|tableType
init|=
name|TableType
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|thriftLength
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|table
operator|=
operator|new
name|AcidTable
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|,
name|createPartitions
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWriteId
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|Table
name|metaTable
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|thriftLength
operator|>
literal|0
condition|)
block|{
name|metaTable
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|thriftEncoded
init|=
operator|new
name|byte
index|[
name|thriftLength
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|thriftEncoded
argument_list|,
literal|0
argument_list|,
name|thriftLength
argument_list|)
expr_stmt|;
operator|new
name|TDeserializer
argument_list|(
operator|new
name|TCompactProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
operator|.
name|deserialize
argument_list|(
name|metaTable
argument_list|,
name|thriftEncoded
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTable
argument_list|(
name|metaTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing meta store table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

