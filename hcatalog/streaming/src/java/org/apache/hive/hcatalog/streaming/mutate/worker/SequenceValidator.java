begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Verifies that the sequence of {@link RecordIdentifier RecordIdentifiers} are in a valid order for insertion into an  * ACID delta file in a given partition and bucket.  */
end_comment

begin_class
class|class
name|SequenceValidator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SequenceValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|lastTxId
decl_stmt|;
specifier|private
name|Long
name|lastRowId
decl_stmt|;
name|SequenceValidator
parameter_list|()
block|{   }
name|boolean
name|isInSequence
parameter_list|(
name|RecordIdentifier
name|recordIdentifier
parameter_list|)
block|{
if|if
condition|(
name|lastTxId
operator|!=
literal|null
operator|&&
name|recordIdentifier
operator|.
name|getTransactionId
argument_list|()
operator|<
name|lastTxId
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Non-sequential transaction ID. Expected>{}, recordIdentifier={}"
argument_list|,
name|lastTxId
argument_list|,
name|recordIdentifier
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|lastTxId
operator|!=
literal|null
operator|&&
name|recordIdentifier
operator|.
name|getTransactionId
argument_list|()
operator|==
name|lastTxId
operator|&&
name|lastRowId
operator|!=
literal|null
operator|&&
name|recordIdentifier
operator|.
name|getRowId
argument_list|()
operator|<=
name|lastRowId
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Non-sequential row ID. Expected>{}, recordIdentifier={}"
argument_list|,
name|lastRowId
argument_list|,
name|recordIdentifier
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|lastTxId
operator|=
name|recordIdentifier
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
name|lastRowId
operator|=
name|recordIdentifier
operator|.
name|getRowId
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Validator must be reset for each new partition and or bucket.    */
name|void
name|reset
parameter_list|()
block|{
name|lastTxId
operator|=
literal|null
expr_stmt|;
name|lastRowId
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"reset"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SequenceValidator [lastTxId="
operator|+
name|lastTxId
operator|+
literal|", lastRowId="
operator|+
name|lastRowId
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

