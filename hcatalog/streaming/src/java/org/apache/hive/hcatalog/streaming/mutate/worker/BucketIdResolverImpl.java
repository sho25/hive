begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|BucketCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_comment
comment|/**  * Implementation of a {@link BucketIdResolver} that includes the logic required to calculate a bucket id from a record  * that is consistent with Hive's own internal computation scheme.  * @deprecated as of Hive 3.0.0  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|BucketIdResolverImpl
implements|implements
name|BucketIdResolver
block|{
specifier|private
specifier|static
specifier|final
name|long
name|INVALID_TRANSACTION_ID
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|INVALID_ROW_ID
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|SettableStructObjectInspector
name|structObjectInspector
decl_stmt|;
specifier|private
specifier|final
name|StructField
index|[]
name|bucketFields
decl_stmt|;
specifier|private
specifier|final
name|int
name|totalBuckets
decl_stmt|;
specifier|private
specifier|final
name|StructField
name|recordIdentifierField
decl_stmt|;
comment|/**    * Note that all column indexes are with respect to your record structure, not the Hive table structure. Bucket column    * indexes must be presented in the same order as they are in the Hive table definition.    */
specifier|public
name|BucketIdResolverImpl
parameter_list|(
name|ObjectInspector
name|objectInspector
parameter_list|,
name|int
name|recordIdColumn
parameter_list|,
name|int
name|totalBuckets
parameter_list|,
name|int
index|[]
name|bucketColumns
parameter_list|)
block|{
name|this
operator|.
name|totalBuckets
operator|=
name|totalBuckets
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|objectInspector
operator|instanceof
name|SettableStructObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Serious problem, expected a StructObjectInspector, "
operator|+
literal|"but got a "
operator|+
name|objectInspector
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|bucketColumns
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No bucket column indexes set."
argument_list|)
throw|;
block|}
name|structObjectInspector
operator|=
operator|(
name|SettableStructObjectInspector
operator|)
name|objectInspector
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|recordIdentifierField
operator|=
name|structFields
operator|.
name|get
argument_list|(
name|recordIdColumn
argument_list|)
expr_stmt|;
name|bucketFields
operator|=
operator|new
name|StructField
index|[
name|bucketColumns
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketColumns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|bucketColumnsIndex
init|=
name|bucketColumns
index|[
name|i
index|]
decl_stmt|;
name|bucketFields
index|[
name|i
index|]
operator|=
name|structFields
operator|.
name|get
argument_list|(
name|bucketColumnsIndex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|attachBucketIdToRecord
parameter_list|(
name|Object
name|record
parameter_list|)
block|{
name|int
name|bucketId
init|=
name|computeBucketId
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|int
name|bucketProperty
init|=
name|BucketCodec
operator|.
name|V1
operator|.
name|encode
argument_list|(
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
literal|null
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucketId
argument_list|)
argument_list|)
decl_stmt|;
name|RecordIdentifier
name|recordIdentifier
init|=
operator|new
name|RecordIdentifier
argument_list|(
name|INVALID_TRANSACTION_ID
argument_list|,
name|bucketProperty
argument_list|,
name|INVALID_ROW_ID
argument_list|)
decl_stmt|;
name|structObjectInspector
operator|.
name|setStructFieldData
argument_list|(
name|record
argument_list|,
name|recordIdentifierField
argument_list|,
name|recordIdentifier
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|computeBucketId
parameter_list|(
name|Object
name|record
parameter_list|)
block|{
name|Object
index|[]
name|bucketFieldValues
init|=
operator|new
name|Object
index|[
name|bucketFields
operator|.
name|length
index|]
decl_stmt|;
name|ObjectInspector
index|[]
name|bucketFiledInspectors
init|=
operator|new
name|ObjectInspector
index|[
name|bucketFields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|columnIndex
init|=
literal|0
init|;
name|columnIndex
operator|<
name|bucketFields
operator|.
name|length
condition|;
name|columnIndex
operator|++
control|)
block|{
name|bucketFieldValues
index|[
name|columnIndex
index|]
operator|=
name|structObjectInspector
operator|.
name|getStructFieldData
argument_list|(
name|record
argument_list|,
name|bucketFields
index|[
name|columnIndex
index|]
argument_list|)
expr_stmt|;
name|bucketFiledInspectors
index|[
name|columnIndex
index|]
operator|=
name|bucketFields
index|[
name|columnIndex
index|]
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
return|return
name|ObjectInspectorUtils
operator|.
name|getBucketNumber
argument_list|(
name|bucketFieldValues
argument_list|,
name|bucketFiledInspectors
argument_list|,
name|totalBuckets
argument_list|)
return|;
block|}
block|}
end_class

end_unit

