begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyZeroInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Captor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetaStorePartitionHelper
block|{
specifier|private
specifier|static
specifier|final
name|Path
name|TABLE_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_LOCATION
init|=
name|TABLE_PATH
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FieldSchema
name|PARTITION_KEY_A
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"A"
argument_list|,
literal|"string"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FieldSchema
name|PARTITION_KEY_B
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"B"
argument_list|,
literal|"string"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|PARTITION_KEYS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|PARTITION_KEY_A
argument_list|,
name|PARTITION_KEY_B
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|PARTITION_PATH
init|=
operator|new
name|Path
argument_list|(
name|TABLE_PATH
argument_list|,
literal|"a=1/b=2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARTITION_LOCATION
init|=
name|PARTITION_PATH
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATABASE_NAME
init|=
literal|"db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"one"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|UNPARTITIONED_VALUES
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|PARTITIONED_VALUES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|IMetaStoreClient
name|mockClient
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Table
name|mockTable
decl_stmt|;
specifier|private
name|StorageDescriptor
name|tableStorageDescriptor
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Partition
name|mockPartition
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|StorageDescriptor
name|mockPartitionStorageDescriptor
decl_stmt|;
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|Partition
argument_list|>
name|partitionCaptor
decl_stmt|;
specifier|private
name|PartitionHelper
name|helper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|injectMocks
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|mockClient
operator|.
name|getTable
argument_list|(
name|DATABASE_NAME
argument_list|,
name|TABLE_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTable
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTable
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DATABASE_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTable
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PARTITION_KEYS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTable
operator|.
name|getSd
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableStorageDescriptor
argument_list|)
expr_stmt|;
name|tableStorageDescriptor
operator|.
name|setLocation
argument_list|(
name|TABLE_LOCATION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockClient
operator|.
name|getPartition
argument_list|(
name|DATABASE_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONED_VALUES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockPartition
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockPartition
operator|.
name|getSd
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockPartitionStorageDescriptor
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockPartitionStorageDescriptor
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PARTITION_LOCATION
argument_list|)
expr_stmt|;
name|helper
operator|=
operator|new
name|MetaStorePartitionHelper
argument_list|(
name|mockClient
argument_list|,
name|DATABASE_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|TABLE_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPathForUnpartitionedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|helper
operator|.
name|getPathForPartition
argument_list|(
name|UNPARTITIONED_VALUES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|path
argument_list|,
name|is
argument_list|(
name|TABLE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|mockClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPathForPartitionedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|helper
operator|.
name|getPathForPartition
argument_list|(
name|PARTITIONED_VALUES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|path
argument_list|,
name|is
argument_list|(
name|PARTITION_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createOnUnpartitionTableDoesNothing
parameter_list|()
throws|throws
name|Exception
block|{
name|helper
operator|.
name|createPartitionIfNotExists
argument_list|(
name|UNPARTITIONED_VALUES
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|mockClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createOnPartitionTable
parameter_list|()
throws|throws
name|Exception
block|{
name|helper
operator|.
name|createPartitionIfNotExists
argument_list|(
name|PARTITIONED_VALUES
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockClient
argument_list|)
operator|.
name|add_partition
argument_list|(
name|partitionCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|actual
init|=
name|partitionCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|is
argument_list|(
name|PARTITION_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getValues
argument_list|()
argument_list|,
name|is
argument_list|(
name|PARTITIONED_VALUES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|closeSucceeds
parameter_list|()
throws|throws
name|IOException
block|{
name|helper
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockClient
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

