begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|TransactionBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTransaction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TRANSACTION_ID
init|=
literal|10L
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Lock
name|mockLock
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|IMetaStoreClient
name|mockMetaStoreClient
decl_stmt|;
specifier|private
name|Transaction
name|transaction
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createTransaction
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|mockLock
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|USER
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMetaStoreClient
operator|.
name|openTxn
argument_list|(
name|USER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TRANSACTION_ID
argument_list|)
expr_stmt|;
name|transaction
operator|=
operator|new
name|Transaction
argument_list|(
name|mockMetaStoreClient
argument_list|,
name|mockLock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialState
parameter_list|()
block|{
name|assertThat
argument_list|(
name|transaction
operator|.
name|getState
argument_list|()
argument_list|,
name|is
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transaction
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|is
argument_list|(
name|TRANSACTION_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBegin
parameter_list|()
throws|throws
name|Exception
block|{
name|transaction
operator|.
name|begin
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockLock
argument_list|)
operator|.
name|acquire
argument_list|(
name|TRANSACTION_ID
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transaction
operator|.
name|getState
argument_list|()
argument_list|,
name|is
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBeginLockFails
parameter_list|()
throws|throws
name|Exception
block|{
name|doThrow
argument_list|(
operator|new
name|LockException
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockLock
argument_list|)
operator|.
name|acquire
argument_list|(
name|TRANSACTION_ID
argument_list|)
expr_stmt|;
try|try
block|{
name|transaction
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransactionException
name|ignore
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|transaction
operator|.
name|getState
argument_list|()
argument_list|,
name|is
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockLock
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockMetaStoreClient
argument_list|)
operator|.
name|commitTxn
argument_list|(
name|TRANSACTION_ID
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transaction
operator|.
name|getState
argument_list|()
argument_list|,
name|is
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TransactionException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCommitLockFails
parameter_list|()
throws|throws
name|Exception
block|{
name|doThrow
argument_list|(
operator|new
name|LockException
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockLock
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|transaction
operator|.
name|abort
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockLock
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockMetaStoreClient
argument_list|)
operator|.
name|rollbackTxn
argument_list|(
name|TRANSACTION_ID
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transaction
operator|.
name|getState
argument_list|()
argument_list|,
name|is
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TransactionException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAbortLockFails
parameter_list|()
throws|throws
name|Exception
block|{
name|doThrow
argument_list|(
operator|new
name|LockException
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockLock
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

