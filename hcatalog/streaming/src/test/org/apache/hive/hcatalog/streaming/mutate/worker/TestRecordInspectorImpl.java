begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|MutableRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestRecordInspectorImpl
block|{
specifier|private
specifier|static
specifier|final
name|int
name|ROW_ID_COLUMN
init|=
literal|2
decl_stmt|;
specifier|private
name|RecordInspectorImpl
name|inspector
init|=
operator|new
name|RecordInspectorImpl
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MutableRecord
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
argument_list|,
name|ROW_ID_COLUMN
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testExtractRecordIdentifier
parameter_list|()
block|{
name|RecordIdentifier
name|recordIdentifier
init|=
operator|new
name|RecordIdentifier
argument_list|(
literal|10L
argument_list|,
literal|4
argument_list|,
literal|20L
argument_list|)
decl_stmt|;
name|MutableRecord
name|record
init|=
operator|new
name|MutableRecord
argument_list|(
literal|1
argument_list|,
literal|"hello"
argument_list|,
name|recordIdentifier
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|inspector
operator|.
name|extractRecordIdentifier
argument_list|(
name|record
argument_list|)
argument_list|,
name|is
argument_list|(
name|recordIdentifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNotAStructObjectInspector
parameter_list|()
block|{
operator|new
name|RecordInspectorImpl
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaBooleanObjectInspector
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

