begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|MutatorClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|MutatorClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|AcidTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|client
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
operator|.
name|BucketIdResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
operator|.
name|MutatorCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
operator|.
name|MutatorCoordinatorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|mutate
operator|.
name|worker
operator|.
name|MutatorFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ExampleUseCase
block|{
specifier|private
name|String
name|metaStoreUri
decl_stmt|;
specifier|private
name|String
name|databaseName
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|boolean
name|createPartitions
init|=
literal|true
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues1
decl_stmt|,
name|partitionValues2
decl_stmt|,
name|partitionValues3
decl_stmt|;
specifier|private
name|Object
name|record1
decl_stmt|,
name|record2
decl_stmt|,
name|record3
decl_stmt|;
specifier|private
name|MutatorFactory
name|mutatorFactory
decl_stmt|;
comment|/* This is an illustration, not a functioning example. */
specifier|public
name|void
name|example
parameter_list|()
throws|throws
name|Exception
block|{
comment|// CLIENT/TOOL END
comment|//
comment|// Singleton instance in the job client
comment|// Create a client to manage our transaction
name|MutatorClient
name|client
init|=
operator|new
name|MutatorClientBuilder
argument_list|()
operator|.
name|addSinkTable
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|,
name|createPartitions
argument_list|)
operator|.
name|metaStoreUri
argument_list|(
name|metaStoreUri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Get the transaction
name|Transaction
name|transaction
init|=
name|client
operator|.
name|newTransaction
argument_list|()
decl_stmt|;
comment|// Get serializable details of the destination tables
name|List
argument_list|<
name|AcidTable
argument_list|>
name|tables
init|=
name|client
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|transaction
operator|.
name|begin
argument_list|()
expr_stmt|;
comment|// CLUSTER / WORKER END
comment|//
comment|// Job submitted to the cluster
comment|//
name|BucketIdResolver
name|bucketIdResolver
init|=
name|mutatorFactory
operator|.
name|newBucketIdResolver
argument_list|(
name|tables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTotalBuckets
argument_list|()
argument_list|)
decl_stmt|;
name|record1
operator|=
name|bucketIdResolver
operator|.
name|attachBucketIdToRecord
argument_list|(
name|record1
argument_list|)
expr_stmt|;
comment|// --------------------------------------------------------------
comment|// DATA SHOULD GET SORTED BY YOUR ETL/MERGE PROCESS HERE
comment|//
comment|// Group the data by (partitionValues, ROW__ID.bucketId)
comment|// Order the groups by (ROW__ID.lastTransactionId, ROW__ID.rowId)
comment|// --------------------------------------------------------------
comment|// One of these runs at the output of each reducer
comment|//
name|MutatorCoordinator
name|coordinator
init|=
operator|new
name|MutatorCoordinatorBuilder
argument_list|()
operator|.
name|metaStoreUri
argument_list|(
name|metaStoreUri
argument_list|)
operator|.
name|table
argument_list|(
name|tables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|mutatorFactory
argument_list|(
name|mutatorFactory
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|coordinator
operator|.
name|insert
argument_list|(
name|partitionValues1
argument_list|,
name|record1
argument_list|)
expr_stmt|;
name|coordinator
operator|.
name|update
argument_list|(
name|partitionValues2
argument_list|,
name|record2
argument_list|)
expr_stmt|;
name|coordinator
operator|.
name|delete
argument_list|(
name|partitionValues3
argument_list|,
name|record3
argument_list|)
expr_stmt|;
name|coordinator
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// CLIENT/TOOL END
comment|//
comment|// The tasks have completed, control is back at the tool
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

