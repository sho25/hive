begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|AcidHouseKeeperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableLongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|public
class|class
name|TestStreaming
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStreaming
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|RawFileSystem
extends|extends
name|RawLocalFileSystem
block|{
specifier|private
specifier|static
specifier|final
name|URI
name|NAME
decl_stmt|;
static|static
block|{
try|try
block|{
name|NAME
operator|=
operator|new
name|URI
argument_list|(
literal|"raw:///"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad uri"
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|pathToFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Can't find "
operator|+
name|path
argument_list|)
throw|;
block|}
comment|// get close enough
name|short
name|mod
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0444
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|canWrite
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0200
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|canExecute
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0111
expr_stmt|;
block|}
return|return
operator|new
name|FileStatus
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
name|mod
argument_list|)
argument_list|,
literal|"owen"
argument_list|,
literal|"users"
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|COL1
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COL2
init|=
literal|"msg"
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreClient
name|msClient
decl_stmt|;
specifier|final
name|String
name|metaStoreURI
init|=
literal|null
decl_stmt|;
comment|// partitioned table
specifier|private
specifier|final
specifier|static
name|String
name|dbName
init|=
literal|"testing"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName
init|=
literal|"alerts"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|,
name|COL2
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionVals
decl_stmt|;
specifier|private
specifier|static
name|Path
name|partLoc
decl_stmt|;
specifier|private
specifier|static
name|Path
name|partLoc2
decl_stmt|;
comment|// unpartitioned table
specifier|private
specifier|final
specifier|static
name|String
name|dbName2
init|=
literal|"testing2"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName2
init|=
literal|"alerts"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|fieldNames2
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|,
name|COL2
block|}
decl_stmt|;
comment|// for bucket join testing
specifier|private
specifier|final
specifier|static
name|String
name|dbName3
init|=
literal|"testing3"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName3
init|=
literal|"dimensionTable"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|dbName4
init|=
literal|"testing4"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName4
init|=
literal|"factTable"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionVals2
decl_stmt|;
specifier|private
specifier|final
name|String
name|PART1_CONTINENT
init|=
literal|"Asia"
decl_stmt|;
specifier|private
specifier|final
name|String
name|PART1_COUNTRY
init|=
literal|"India"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dbFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|public
name|TestStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|partitionVals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
name|PART1_CONTINENT
argument_list|)
expr_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
name|PART1_COUNTRY
argument_list|)
expr_stmt|;
name|partitionVals2
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|partitionVals2
operator|.
name|add
argument_list|(
name|PART1_COUNTRY
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.raw.impl"
argument_list|,
name|RawFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.enforce.bucketing"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|metaStoreURI
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
name|metaStoreURI
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EXECUTE_SET_UGI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dbFolder
operator|.
name|create
argument_list|()
expr_stmt|;
comment|//1) Start from a clean slate (metastore)
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
comment|//2) obtain metastore clients
name|msClient
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|.
name|setMaxRows
argument_list|(
literal|200002
argument_list|)
expr_stmt|;
comment|//make sure Driver returns all results
comment|// drop and recreate the necessary databases and tables
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|String
index|[]
name|colNames
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|,
name|COL2
block|}
decl_stmt|;
name|String
index|[]
name|colTypes
init|=
operator|new
name|String
index|[]
block|{
name|serdeConstants
operator|.
name|INT_TYPE_NAME
block|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
block|}
decl_stmt|;
name|String
index|[]
name|bucketCols
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|}
decl_stmt|;
name|String
name|loc1
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName
operator|+
literal|".db"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|partNames
init|=
operator|new
name|String
index|[]
block|{
literal|"Continent"
block|,
literal|"Country"
block|}
decl_stmt|;
name|partLoc
operator|=
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketCols
argument_list|,
name|partNames
argument_list|,
name|loc1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName2
argument_list|)
expr_stmt|;
name|String
name|loc2
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName2
operator|+
literal|".db"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|partLoc2
operator|=
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
name|partitionVals
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketCols
argument_list|,
name|partNames
argument_list|,
name|loc2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|loc3
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
literal|"testing5.db"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|createStoreSales
argument_list|(
literal|"testing5"
argument_list|,
name|loc3
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table testBucketing3.streamedtable"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table testBucketing3.finaltable"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table testBucketing3.nobucket"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getPartitionKeys
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
comment|// Defining partition names in unsorted order
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"continent"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"country"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
specifier|private
name|void
name|createStoreSales
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|loc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|loc
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"store_sales"
decl_stmt|;
name|boolean
name|success
init|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database IF NOT EXISTS "
operator|+
name|dbName
operator|+
literal|" location '"
operator|+
name|dbUri
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists store_sales"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table store_sales\n"
operator|+
literal|"(\n"
operator|+
literal|"    ss_sold_date_sk           int,\n"
operator|+
literal|"    ss_sold_time_sk           int,\n"
operator|+
literal|"    ss_item_sk                int,\n"
operator|+
literal|"    ss_customer_sk            int,\n"
operator|+
literal|"    ss_cdemo_sk               int,\n"
operator|+
literal|"    ss_hdemo_sk               int,\n"
operator|+
literal|"    ss_addr_sk                int,\n"
operator|+
literal|"    ss_store_sk               int,\n"
operator|+
literal|"    ss_promo_sk               int,\n"
operator|+
literal|"    ss_ticket_number          int,\n"
operator|+
literal|"    ss_quantity               int,\n"
operator|+
literal|"    ss_wholesale_cost         decimal(7,2),\n"
operator|+
literal|"    ss_list_price             decimal(7,2),\n"
operator|+
literal|"    ss_sales_price            decimal(7,2),\n"
operator|+
literal|"    ss_ext_discount_amt       decimal(7,2),\n"
operator|+
literal|"    ss_ext_sales_price        decimal(7,2),\n"
operator|+
literal|"    ss_ext_wholesale_cost     decimal(7,2),\n"
operator|+
literal|"    ss_ext_list_price         decimal(7,2),\n"
operator|+
literal|"    ss_ext_tax                decimal(7,2),\n"
operator|+
literal|"    ss_coupon_amt             decimal(7,2),\n"
operator|+
literal|"    ss_net_paid               decimal(7,2),\n"
operator|+
literal|"    ss_net_paid_inc_tax       decimal(7,2),\n"
operator|+
literal|"    ss_net_profit             decimal(7,2)\n"
operator|+
literal|")\n"
operator|+
literal|" partitioned by (dt string)\n"
operator|+
literal|"clustered by (ss_store_sk, ss_promo_sk)\n"
operator|+
literal|"INTO 4 BUCKETS stored as orc "
operator|+
literal|" location '"
operator|+
name|tableLoc
operator|+
literal|"'"
operator|+
literal|"  TBLPROPERTIES ('orc.compress'='NONE', 'transactional'='true')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"alter table store_sales add partition(dt='2015')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
comment|/**    * make sure it works with table where bucket col is not 1st col    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBucketingWhereBucketColIsNotFirstCol
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
literal|"2015"
argument_list|)
expr_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
literal|"testing5"
argument_list|,
literal|"store_sales"
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ss_sold_date_sk"
block|,
literal|"ss_sold_time_sk"
block|,
literal|"ss_item_sk"
block|,
literal|"ss_customer_sk"
block|,
literal|"ss_cdemo_sk"
block|,
literal|"ss_hdemo_sk"
block|,
literal|"ss_addr_sk"
block|,
literal|"ss_store_sk"
block|,
literal|"ss_promo_sk"
block|,
literal|"ss_ticket_number"
block|,
literal|"ss_quantity"
block|,
literal|"ss_wholesale_cost"
block|,
literal|"ss_list_price"
block|,
literal|"ss_sales_price"
block|,
literal|"ss_ext_discount_amt"
block|,
literal|"ss_ext_sales_price"
block|,
literal|"ss_ext_wholesale_cost"
block|,
literal|"ss_ext_list_price"
block|,
literal|"ss_ext_tax"
block|,
literal|"ss_coupon_amt"
block|,
literal|"ss_net_paid"
block|,
literal|"ss_net_paid_inc_tax"
block|,
literal|"ss_net_profit"
block|}
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//should this really be null?
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|2
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|StringBuilder
name|row
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|ints
init|=
literal|0
init|;
name|ints
operator|<
literal|11
condition|;
name|ints
operator|++
control|)
block|{
name|row
operator|.
name|append
argument_list|(
name|ints
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|decs
init|=
literal|0
init|;
name|decs
operator|<
literal|12
condition|;
name|decs
operator|++
control|)
block|{
name|row
operator|.
name|append
argument_list|(
name|i
operator|+
literal|0.1
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|setLength
argument_list|(
name|row
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
name|row
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select row__id.bucketid, * from testing5.store_sales"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|re
range|:
name|res
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
block|}
comment|// stream data into streaming table with N buckets, then copy the data into another bucketed table
comment|// check if bucketing in both was done in the same way
annotation|@
name|Test
specifier|public
name|void
name|testStreamBucketingMatchesRegularBucketing
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|bucketCount
init|=
literal|100
decl_stmt|;
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|dbFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"streamedtable"
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableLoc2
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"finaltable"
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableLoc3
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"nobucket"
operator|+
literal|"'"
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table streamedtable ( key1 string,key2 int,data string ) clustered by ( key1,key2 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc  location "
operator|+
name|tableLoc
operator|+
literal|" TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
comment|//  In 'nobucket' table we capture bucketid from streamedtable to workaround a hive bug that prevents joins two identically bucketed tables
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table nobucket ( bucketid int, key1 string,key2 int,data string ) location "
operator|+
name|tableLoc3
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table finaltable ( bucketid int, key1 string,key2 int,data string ) clustered by ( key1,key2 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc location "
operator|+
name|tableLoc2
operator|+
literal|" TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|String
index|[]
name|records
init|=
operator|new
name|String
index|[]
block|{
literal|"PSFAHYLZVC,29,EPNMA"
block|,
literal|"PPPRKWAYAU,96,VUTEE"
block|,
literal|"MIAOFERCHI,3,WBDSI"
block|,
literal|"CEGQAZOWVN,0,WCUZL"
block|,
literal|"XWAKMNSVQF,28,YJVHU"
block|,
literal|"XBWTSAJWME,2,KDQFO"
block|,
literal|"FUVLQTAXAY,5,LDSDG"
block|,
literal|"QTQMDJMGJH,6,QBOMA"
block|,
literal|"EFLOTLWJWN,71,GHWPS"
block|,
literal|"PEQNAOJHCM,82,CAAFI"
block|,
literal|"MOEKQLGZCP,41,RUACR"
block|,
literal|"QZXMCOPTID,37,LFLWE"
block|,
literal|"EYALVWICRD,13,JEZLC"
block|,
literal|"VYWLZAYTXX,16,DMVZX"
block|,
literal|"OSALYSQIXR,47,HNZVE"
block|,
literal|"JGKVHKCEGQ,25,KSCJB"
block|,
literal|"WQFMMYDHET,12,DTRWA"
block|,
literal|"AJOVAYZKZQ,15,YBKFO"
block|,
literal|"YAQONWCUAU,31,QJNHZ"
block|,
literal|"DJBXUEUOEB,35,IYCBL"
block|}
decl_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
literal|"testBucketing3"
argument_list|,
literal|"streamedtable"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|colNames1
init|=
operator|new
name|String
index|[]
block|{
literal|"key1"
block|,
literal|"key2"
block|,
literal|"data"
block|}
decl_stmt|;
name|DelimitedInputWriter
name|wr
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|colNames1
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|2
argument_list|,
name|wr
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|record
range|:
name|records
control|)
block|{
name|txnBatch
operator|.
name|write
argument_list|(
name|record
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res1
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select row__id.bucketid, * from streamedtable order by key2"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|re
range|:
name|res1
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
name|driver
operator|.
name|run
argument_list|(
literal|"insert into nobucket select row__id.bucketid,* from streamedtable"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|" insert into finaltable select * from nobucket"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res2
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select row__id.bucketid,* from finaltable where row__id.bucketid<>bucketid"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|res2
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|res2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDataWritten
parameter_list|(
name|Path
name|partitionPath
parameter_list|,
name|long
name|minTxn
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|buckets
parameter_list|,
name|int
name|numExpectedFiles
parameter_list|,
name|String
modifier|...
name|records
parameter_list|)
throws|throws
name|Exception
block|{
name|ValidTxnList
name|txns
init|=
name|msClient
operator|.
name|getValidTxns
argument_list|()
decl_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
name|partitionPath
argument_list|,
name|conf
argument_list|,
name|txns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getObsolete
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getOriginalFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AcidUtils
operator|.
name|ParsedDelta
argument_list|>
name|current
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files found: "
argument_list|)
expr_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|current
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pd
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numExpectedFiles
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// find the absolute minimum transaction
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|current
control|)
block|{
if|if
condition|(
name|pd
operator|.
name|getMaxTransaction
argument_list|()
operator|>
name|max
condition|)
name|max
operator|=
name|pd
operator|.
name|getMaxTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|getMinTransaction
argument_list|()
operator|<
name|min
condition|)
name|min
operator|=
name|pd
operator|.
name|getMinTransaction
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|minTxn
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxTxn
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|InputFormat
name|inf
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|partitionPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
literal|"bucket_count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|buckets
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|,
name|txns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inf
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|buckets
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buckets
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|OrcStruct
argument_list|>
name|rr
init|=
name|inf
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|job
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|NullWritable
name|key
init|=
name|rr
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|OrcStruct
name|value
init|=
name|rr
operator|.
name|createValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|records
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rr
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|records
index|[
name|i
index|]
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rr
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkNothingWritten
parameter_list|(
name|Path
name|partitionPath
parameter_list|)
throws|throws
name|Exception
block|{
name|ValidTxnList
name|txns
init|=
name|msClient
operator|.
name|getValidTxns
argument_list|()
decl_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
name|partitionPath
argument_list|,
name|conf
argument_list|,
name|txns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getObsolete
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getOriginalFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AcidUtils
operator|.
name|ParsedDelta
argument_list|>
name|current
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpointConnection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1) Basic
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//shouldn't throw
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2) Leave partition unspecified
name|endPt
operator|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// should not throw
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newPartVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|newPartVals
operator|.
name|add
argument_list|(
name|PART1_CONTINENT
argument_list|)
expr_stmt|;
name|newPartVals
operator|.
name|add
argument_list|(
literal|"Nepal"
argument_list|)
expr_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newPartVals
argument_list|)
decl_stmt|;
comment|// Ensure partition is absent
try|try
block|{
name|msClient
operator|.
name|getPartition
argument_list|(
name|endPt
operator|.
name|database
argument_list|,
name|endPt
operator|.
name|table
argument_list|,
name|endPt
operator|.
name|partitionVals
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Partition already exists"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// expect this exception
block|}
comment|// Create partition
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure partition is present
name|Partition
name|p
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|endPt
operator|.
name|database
argument_list|,
name|endPt
operator|.
name|table
argument_list|,
name|endPt
operator|.
name|partitionVals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Did not find added partition"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchEmptyCommit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1)  to partitioned table
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2) To unpartitioned table
name|endPt
operator|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames2
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
expr_stmt|;
name|connection
operator|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * check that transactions that have not heartbeated and timedout get properly aborted    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testTimeOutReaper
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames2
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|5
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TIMEDOUT_TXN_REAPER_START
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|//ensure txn timesout
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|AcidHouseKeeperService
name|houseKeeperService
init|=
operator|new
name|AcidHouseKeeperService
argument_list|()
decl_stmt|;
name|houseKeeperService
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
while|while
condition|(
name|houseKeeperService
operator|.
name|getIsAliveCounter
argument_list|()
operator|<=
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|//make sure it has run at least once
block|}
name|houseKeeperService
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
comment|//should fail because the TransactionBatch timed out
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransactionError
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected aborted transaction"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TxnAbortedException
argument_list|)
expr_stmt|;
block|}
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|int
name|lastCount
init|=
name|houseKeeperService
operator|.
name|getIsAliveCounter
argument_list|()
decl_stmt|;
name|houseKeeperService
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
while|while
condition|(
name|houseKeeperService
operator|.
name|getIsAliveCounter
argument_list|()
operator|<=
name|lastCount
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|//make sure it has run at least once
block|}
name|houseKeeperService
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
comment|//should fail because the TransactionBatch timed out
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransactionError
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected aborted transaction"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TxnAbortedException
argument_list|)
expr_stmt|;
block|}
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchEmptyAbort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1) to partitioned table
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2) to unpartitioned table
name|endPt
operator|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
expr_stmt|;
name|connection
operator|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchCommit_Delimited
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// 1st Txn
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2nd Txn
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// data should not be visible
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// To Unpartitioned table
name|endPt
operator|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
expr_stmt|;
name|connection
operator|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// 1st Txn
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchCommit_Json
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|StrictJsonWriter
name|writer
init|=
operator|new
name|StrictJsonWriter
argument_list|(
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// 1st Txn
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rec1
init|=
literal|"{\"id\" : 1, \"msg\": \"Hello streaming\"}"
decl_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
name|rec1
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemainingTransactions
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// 1) test with txn.Commit()
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|int
name|batch
init|=
literal|0
decl_stmt|;
name|int
name|initialCount
init|=
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
decl_stmt|;
while|while
condition|(
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|--
name|initialCount
argument_list|,
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rec
init|=
literal|0
init|;
name|rec
operator|<
literal|2
condition|;
operator|++
name|rec
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
operator|(
name|batch
operator|*
name|rec
operator|+
literal|",Hello streaming"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|batch
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2) test with txn.Abort()
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|batch
operator|=
literal|0
expr_stmt|;
name|initialCount
operator|=
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
expr_stmt|;
while|while
condition|(
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|--
name|initialCount
argument_list|,
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rec
init|=
literal|0
init|;
name|rec
operator|<
literal|2
condition|;
operator|++
name|rec
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
operator|(
name|batch
operator|*
name|rec
operator|+
literal|",Hello streaming"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|batch
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|checkNothingWritten
argument_list|(
name|partLoc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkNothingWritten
argument_list|(
name|partLoc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchAbortAndCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|checkNothingWritten
argument_list|(
name|partLoc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleTransactionBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2nd Txn Batch
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"3,Hello streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"4,Welcome to streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|,
literal|"{4, Welcome to streaming - once again}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterleavedTransactionBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Acquire 1st Txn Batch
name|TransactionBatch
name|txnBatch1
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch1
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
comment|// Acquire 2nd Txn Batch
name|DelimitedInputWriter
name|writer2
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch2
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer2
argument_list|)
decl_stmt|;
name|txnBatch2
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
comment|// Interleaved writes to both batches
name|txnBatch1
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch2
operator|.
name|write
argument_list|(
literal|"3,Hello streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|checkNothingWritten
argument_list|(
name|partLoc
argument_list|)
expr_stmt|;
name|txnBatch2
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|11
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch1
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch1
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch2
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch2
operator|.
name|write
argument_list|(
literal|"4,Welcome to streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch2
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|,
literal|"{4, Welcome to streaming - once again}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch1
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch2
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch1
operator|.
name|close
argument_list|()
expr_stmt|;
name|txnBatch2
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|WriterThd
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|StreamingConnection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|DelimitedInputWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|String
name|data
decl_stmt|;
specifier|private
name|Throwable
name|error
decl_stmt|;
name|WriterThd
parameter_list|(
name|HiveEndPoint
name|ep
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
literal|"Writer_"
operator|+
name|data
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|conn
operator|=
name|ep
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|error
operator|=
name|throwable
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread "
operator|+
name|thread
operator|.
name|getName
argument_list|()
operator|+
literal|" died: "
operator|+
name|throwable
operator|.
name|getMessage
argument_list|()
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TransactionBatch
name|txnBatch
init|=
literal|null
decl_stmt|;
try|try
block|{
name|txnBatch
operator|=
name|conn
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
while|while
condition|(
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|// while
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|txnBatch
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"txnBatch.close() failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"conn.close() failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentTransactionBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HiveEndPoint
name|ep
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WriterThd
argument_list|>
name|writers
init|=
operator|new
name|ArrayList
argument_list|<
name|WriterThd
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|WriterThd
argument_list|(
name|ep
argument_list|,
literal|"1,Matrix"
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|WriterThd
argument_list|(
name|ep
argument_list|,
literal|"2,Gandhi"
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|WriterThd
argument_list|(
name|ep
argument_list|,
literal|"3,Silence"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|WriterThd
name|w
range|:
name|writers
control|)
block|{
name|w
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThd
name|w
range|:
name|writers
control|)
block|{
name|w
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThd
name|w
range|:
name|writers
control|)
block|{
if|if
condition|(
name|w
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Writer thread"
operator|+
name|w
operator|.
name|getName
argument_list|()
operator|+
literal|" died: "
operator|+
name|w
operator|.
name|error
operator|.
name|getMessage
argument_list|()
operator|+
literal|" See log file for stack trace"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
name|dumpBucket
parameter_list|(
name|Path
name|orcFile
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
name|fs
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|orcFile
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|StructObjectInspector
name|inspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|reader
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Found Bucket File : %s \n"
argument_list|,
name|orcFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|row
init|=
name|rows
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|SampleRec
name|rec
init|=
operator|(
name|SampleRec
operator|)
name|deserializeDeltaFileRow
argument_list|(
name|row
argument_list|,
name|inspector
argument_list|)
index|[
literal|5
index|]
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Assumes stored data schema = [acid fields],string,int,string
comment|// return array of 6 fields, where the last field has the actual data
specifier|private
specifier|static
name|Object
index|[]
name|deserializeDeltaFileRow
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|inspector
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|WritableIntObjectInspector
name|f0ins
init|=
operator|(
name|WritableIntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableLongObjectInspector
name|f1ins
init|=
operator|(
name|WritableLongObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableIntObjectInspector
name|f2ins
init|=
operator|(
name|WritableIntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableLongObjectInspector
name|f3ins
init|=
operator|(
name|WritableLongObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableLongObjectInspector
name|f4ins
init|=
operator|(
name|WritableLongObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|f5ins
init|=
operator|(
name|StructObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|int
name|f0
init|=
name|f0ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|f1
init|=
name|f1ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|f2
init|=
name|f2ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|f3
init|=
name|f3ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|f4
init|=
name|f4ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SampleRec
name|f5
init|=
name|deserializeInner
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|f5ins
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|f0
block|,
name|f1
block|,
name|f2
block|,
name|f3
block|,
name|f4
block|,
name|f5
block|}
return|;
block|}
comment|// Assumes row schema => string,int,string
specifier|private
specifier|static
name|SampleRec
name|deserializeInner
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|inspector
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|WritableStringObjectInspector
name|f0ins
init|=
operator|(
name|WritableStringObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableIntObjectInspector
name|f1ins
init|=
operator|(
name|WritableIntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableStringObjectInspector
name|f2ins
init|=
operator|(
name|WritableStringObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|String
name|f0
init|=
name|f0ins
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|f1
init|=
name|f1ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|f2
init|=
name|f2ins
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SampleRec
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBucketing
parameter_list|()
throws|throws
name|Exception
block|{
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName3
argument_list|)
expr_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName4
argument_list|)
expr_stmt|;
comment|// 1) Create two bucketed tables
name|String
name|dbLocation
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName3
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation
operator|=
name|dbLocation
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames
init|=
literal|"key1,key2,data"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames
init|=
literal|"key1,key2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|bucketCount
init|=
literal|4
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName3
argument_list|,
name|tblName3
argument_list|,
literal|null
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketNames
argument_list|,
literal|null
argument_list|,
name|dbLocation
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
name|String
name|dbLocation2
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName4
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation2
operator|=
name|dbLocation2
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames2
init|=
literal|"key3,key4,data2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes2
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames2
init|=
literal|"key3,key4"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName4
argument_list|,
name|tblName4
argument_list|,
literal|null
argument_list|,
name|colNames2
argument_list|,
name|colTypes2
argument_list|,
name|bucketNames2
argument_list|,
literal|null
argument_list|,
name|dbLocation2
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
comment|// 2) Insert data into both tables
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName3
argument_list|,
name|tblName3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|colNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|2
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"name0,1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"name2,2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"name4,2,more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"name5,2,even more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|HiveEndPoint
name|endPt2
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName4
argument_list|,
name|tblName4
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer2
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|colNames2
argument_list|,
literal|","
argument_list|,
name|endPt2
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection2
init|=
name|endPt2
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch2
init|=
name|connection2
operator|.
name|fetchTransactionBatch
argument_list|(
literal|2
argument_list|,
name|writer2
argument_list|)
decl_stmt|;
name|txnBatch2
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch2
operator|.
name|write
argument_list|(
literal|"name5,2,fact3"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// bucket 0
name|txnBatch2
operator|.
name|write
argument_list|(
literal|"name8,2,fact3"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// bucket 1
name|txnBatch2
operator|.
name|write
argument_list|(
literal|"name0,1,fact1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// bucket 2
comment|// no data for bucket 3 -- expect 0 length bucket file
name|txnBatch2
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// 3 Check data distribution in  buckets
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
name|actual1
init|=
name|dumpAllBuckets
argument_list|(
name|dbLocation
argument_list|,
name|tblName3
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
name|actual2
init|=
name|dumpAllBuckets
argument_list|(
name|dbLocation2
argument_list|,
name|tblName4
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\n  Table 1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|actual1
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\n  Table 2"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|actual2
argument_list|)
expr_stmt|;
comment|// assert bucket listing is as expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"number of buckets does not match expectation"
argument_list|,
name|actual1
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"records in bucket does not match expectation"
argument_list|,
name|actual1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"records in bucket does not match expectation"
argument_list|,
name|actual1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"records in bucket does not match expectation"
argument_list|,
name|actual1
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"records in bucket does not match expectation"
argument_list|,
name|actual1
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// assumes un partitioned table
comment|// returns a map<bucketNum, list<record>>
specifier|private
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
name|dumpAllBuckets
parameter_list|(
name|String
name|dbLocation
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|deltaDir
range|:
operator|new
name|File
argument_list|(
name|dbLocation
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|deltaDir
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"delta"
argument_list|)
condition|)
continue|continue;
name|File
index|[]
name|bucketFiles
init|=
name|deltaDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|bucketFile
range|:
name|bucketFiles
control|)
block|{
if|if
condition|(
name|bucketFile
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"length"
argument_list|)
condition|)
continue|continue;
name|Integer
name|bucketNum
init|=
name|getBucketNumber
argument_list|(
name|bucketFile
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
name|recs
init|=
name|dumpBucket
argument_list|(
operator|new
name|Path
argument_list|(
name|bucketFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|bucketNum
argument_list|,
name|recs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|//assumes bucket_NNNNN format of file name
specifier|private
name|Integer
name|getBucketNumber
parameter_list|(
name|File
name|bucketFile
parameter_list|)
block|{
name|String
name|fname
init|=
name|bucketFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|fname
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
name|String
name|number
init|=
name|fname
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|fname
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
return|;
block|}
comment|// delete db and all tables in it
specifier|public
specifier|static
name|void
name|dropDB
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|String
name|databaseName
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|String
name|table
range|:
name|client
operator|.
name|listTableNamesByFilter
argument_list|(
name|databaseName
argument_list|,
literal|""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|databaseName
argument_list|,
name|table
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|databaseName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{     }
block|}
comment|///////// -------- UTILS ------- /////////
comment|// returns Path of the partition created (if any) else Path of table
specifier|public
specifier|static
name|Path
name|createDbAndTable
parameter_list|(
name|Driver
name|driver
parameter_list|,
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
index|[]
name|colNames
parameter_list|,
name|String
index|[]
name|colTypes
parameter_list|,
name|String
index|[]
name|bucketCols
parameter_list|,
name|String
index|[]
name|partNames
parameter_list|,
name|String
name|dbLocation
parameter_list|,
name|int
name|bucketCount
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|dbLocation
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tableName
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database IF NOT EXISTS "
operator|+
name|databaseName
operator|+
literal|" location '"
operator|+
name|dbUri
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use "
operator|+
name|databaseName
argument_list|)
expr_stmt|;
name|String
name|crtTbl
init|=
literal|"create table "
operator|+
name|tableName
operator|+
literal|" ( "
operator|+
name|getTableColumnsStr
argument_list|(
name|colNames
argument_list|,
name|colTypes
argument_list|)
operator|+
literal|" )"
operator|+
name|getPartitionStmtStr
argument_list|(
name|partNames
argument_list|)
operator|+
literal|" clustered by ( "
operator|+
name|join
argument_list|(
name|bucketCols
argument_list|,
literal|","
argument_list|)
operator|+
literal|" )"
operator|+
literal|" into "
operator|+
name|bucketCount
operator|+
literal|" buckets "
operator|+
literal|" stored as orc "
operator|+
literal|" location '"
operator|+
name|tableLoc
operator|+
literal|"'"
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
name|crtTbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|partNames
operator|!=
literal|null
operator|&&
name|partNames
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
name|addPartition
argument_list|(
name|driver
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|,
name|partNames
argument_list|)
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|tableLoc
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Path
name|addPartition
parameter_list|(
name|Driver
name|driver
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
index|[]
name|partNames
parameter_list|)
throws|throws
name|QueryFailedException
throws|,
name|CommandNeedRetryException
throws|,
name|IOException
block|{
name|String
name|partSpec
init|=
name|getPartsSpec
argument_list|(
name|partNames
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|String
name|addPart
init|=
literal|"alter table "
operator|+
name|tableName
operator|+
literal|" add partition ( "
operator|+
name|partSpec
operator|+
literal|" )"
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
name|addPart
argument_list|)
expr_stmt|;
return|return
name|getPartitionPath
argument_list|(
name|driver
argument_list|,
name|tableName
argument_list|,
name|partSpec
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Path
name|getPartitionPath
parameter_list|(
name|Driver
name|driver
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partSpec
parameter_list|)
throws|throws
name|CommandNeedRetryException
throws|,
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"describe extended "
operator|+
name|tableName
operator|+
literal|" PARTITION ("
operator|+
name|partSpec
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|String
name|partInfo
init|=
name|res
operator|.
name|get
argument_list|(
name|res
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|partInfo
operator|.
name|indexOf
argument_list|(
literal|"location:"
argument_list|)
operator|+
literal|"location:"
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|partInfo
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|,
name|start
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|partInfo
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getTableColumnsStr
parameter_list|(
name|String
index|[]
name|colNames
parameter_list|,
name|String
index|[]
name|colTypes
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|colNames
index|[
name|i
index|]
operator|+
literal|" "
operator|+
name|colTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|colNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// converts partNames into "partName1 string, partName2 string"
specifier|private
specifier|static
name|String
name|getTablePartsStr
parameter_list|(
name|String
index|[]
name|partNames
parameter_list|)
block|{
if|if
condition|(
name|partNames
operator|==
literal|null
operator|||
name|partNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|partNames
index|[
name|i
index|]
operator|+
literal|" string"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|partNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// converts partNames,partVals into "partName1=val1, partName2=val2"
specifier|private
specifier|static
name|String
name|getPartsSpec
parameter_list|(
name|String
index|[]
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|partNames
index|[
name|i
index|]
operator|+
literal|" = '"
operator|+
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|join
parameter_list|(
name|String
index|[]
name|values
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringBuffer
name|strbuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|strbuf
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|strbuf
operator|.
name|append
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|strbuf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getPartitionStmtStr
parameter_list|(
name|String
index|[]
name|partNames
parameter_list|)
block|{
if|if
condition|(
name|partNames
operator|==
literal|null
operator|||
name|partNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
literal|" partitioned by ("
operator|+
name|getTablePartsStr
argument_list|(
name|partNames
argument_list|)
operator|+
literal|" )"
return|;
block|}
specifier|private
specifier|static
name|boolean
name|runDDL
parameter_list|(
name|Driver
name|driver
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|QueryFailedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|int
name|retryCount
init|=
literal|1
decl_stmt|;
comment|// # of times to retry if first attempt fails
for|for
control|(
name|int
name|attempt
init|=
literal|0
init|;
name|attempt
operator|<=
name|retryCount
condition|;
operator|++
name|attempt
control|)
block|{
try|try
block|{
comment|//LOG.debug("Running Hive Query: "+ sql);
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|sql
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Statement: "
operator|+
name|sql
operator|+
literal|" failed: "
operator|+
name|cpr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|attempt
operator|==
name|retryCount
condition|)
block|{
throw|throw
operator|new
name|QueryFailedException
argument_list|(
name|sql
argument_list|,
name|e
argument_list|)
throw|;
block|}
continue|continue;
block|}
block|}
comment|// for
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|queryTable
parameter_list|(
name|Driver
name|driver
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|CommandNeedRetryException
throws|,
name|IOException
block|{
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|driver
operator|.
name|getErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
specifier|static
class|class
name|SampleRec
block|{
specifier|public
name|String
name|field1
decl_stmt|;
specifier|public
name|int
name|field2
decl_stmt|;
specifier|public
name|String
name|field3
decl_stmt|;
specifier|public
name|SampleRec
parameter_list|(
name|String
name|field1
parameter_list|,
name|int
name|field2
parameter_list|,
name|String
name|field3
parameter_list|)
block|{
name|this
operator|.
name|field1
operator|=
name|field1
expr_stmt|;
name|this
operator|.
name|field2
operator|=
name|field2
expr_stmt|;
name|this
operator|.
name|field3
operator|=
name|field3
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|SampleRec
name|that
init|=
operator|(
name|SampleRec
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|field2
operator|!=
name|that
operator|.
name|field2
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|field1
operator|!=
literal|null
condition|?
operator|!
name|field1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|field1
argument_list|)
else|:
name|that
operator|.
name|field1
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|!
operator|(
name|field3
operator|!=
literal|null
condition|?
operator|!
name|field3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|field3
argument_list|)
else|:
name|that
operator|.
name|field3
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|field1
operator|!=
literal|null
condition|?
name|field1
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|field2
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|field3
operator|!=
literal|null
condition|?
name|field3
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|" { "
operator|+
literal|"'"
operator|+
name|field1
operator|+
literal|'\''
operator|+
literal|","
operator|+
name|field2
operator|+
literal|",'"
operator|+
name|field3
operator|+
literal|'\''
operator|+
literal|" }"
return|;
block|}
block|}
block|}
end_class

end_unit

