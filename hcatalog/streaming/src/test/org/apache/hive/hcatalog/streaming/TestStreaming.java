begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcSerde
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|TestStreaming
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStreaming
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|RawFileSystem
extends|extends
name|RawLocalFileSystem
block|{
specifier|private
specifier|static
specifier|final
name|URI
name|NAME
decl_stmt|;
static|static
block|{
try|try
block|{
name|NAME
operator|=
operator|new
name|URI
argument_list|(
literal|"raw:///"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad uri"
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|pathToFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Can't find "
operator|+
name|path
argument_list|)
throw|;
block|}
comment|// get close enough
name|short
name|mod
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0444
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|canWrite
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0200
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|canExecute
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0111
expr_stmt|;
block|}
return|return
operator|new
name|FileStatus
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
name|mod
argument_list|)
argument_list|,
literal|"owen"
argument_list|,
literal|"users"
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|COL1
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COL2
init|=
literal|"msg"
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreClient
name|msClient
decl_stmt|;
specifier|final
name|String
name|metaStoreURI
init|=
literal|null
decl_stmt|;
comment|// partitioned table
specifier|private
specifier|final
specifier|static
name|String
name|dbName
init|=
literal|"testing"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName
init|=
literal|"alerts"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|,
name|COL2
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionVals
decl_stmt|;
specifier|private
specifier|static
name|String
name|partLocation
decl_stmt|;
comment|// unpartitioned table
specifier|private
specifier|final
specifier|static
name|String
name|dbName2
init|=
literal|"testing"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName2
init|=
literal|"alerts"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|fieldNames2
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|,
name|COL2
block|}
decl_stmt|;
specifier|private
specifier|final
name|String
name|PART1_CONTINENT
init|=
literal|"Asia"
decl_stmt|;
specifier|private
specifier|final
name|String
name|PART1_COUNTRY
init|=
literal|"India"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dbFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|public
name|TestStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|partitionVals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
name|PART1_CONTINENT
argument_list|)
expr_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
name|PART1_COUNTRY
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.raw.impl"
argument_list|,
name|RawFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|metaStoreURI
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
name|metaStoreURI
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EXECUTE_SET_UGI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//1) Start from a clean slate (metastore)
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
comment|//2) obtain metastore clients
name|msClient
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// drop and recreate the necessary databases and tables
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|createDbAndTable
argument_list|(
name|msClient
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
expr_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName2
argument_list|)
expr_stmt|;
name|createDbAndTable
argument_list|(
name|msClient
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
name|partitionVals
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getPartitionKeys
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
comment|// Defining partition names in unsorted order
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"continent"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"country"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
specifier|private
name|void
name|checkDataWritten
parameter_list|(
name|long
name|minTxn
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|buckets
parameter_list|,
name|int
name|numExpectedFiles
parameter_list|,
name|String
modifier|...
name|records
parameter_list|)
throws|throws
name|Exception
block|{
name|ValidTxnList
name|txns
init|=
name|msClient
operator|.
name|getValidTxns
argument_list|()
decl_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
operator|new
name|Path
argument_list|(
name|partLocation
argument_list|)
argument_list|,
name|conf
argument_list|,
name|txns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getObsolete
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getOriginalFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AcidUtils
operator|.
name|ParsedDelta
argument_list|>
name|current
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files found: "
argument_list|)
expr_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|current
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pd
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numExpectedFiles
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// find the absolute mininum transaction
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|current
control|)
block|{
if|if
condition|(
name|pd
operator|.
name|getMaxTransaction
argument_list|()
operator|>
name|max
condition|)
name|max
operator|=
name|pd
operator|.
name|getMaxTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|getMinTransaction
argument_list|()
operator|<
name|min
condition|)
name|min
operator|=
name|pd
operator|.
name|getMinTransaction
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|minTxn
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxTxn
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|InputFormat
name|inf
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|partLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
literal|"bucket_count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|buckets
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|,
name|txns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inf
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|OrcStruct
argument_list|>
name|rr
init|=
name|inf
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|job
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|NullWritable
name|key
init|=
name|rr
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|OrcStruct
name|value
init|=
name|rr
operator|.
name|createValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|records
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rr
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|records
index|[
name|i
index|]
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rr
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkNothingWritten
parameter_list|()
throws|throws
name|Exception
block|{
name|ValidTxnList
name|txns
init|=
name|msClient
operator|.
name|getValidTxns
argument_list|()
decl_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
operator|new
name|Path
argument_list|(
name|partLocation
argument_list|)
argument_list|,
name|conf
argument_list|,
name|txns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getObsolete
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getOriginalFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AcidUtils
operator|.
name|ParsedDelta
argument_list|>
name|current
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpointConnection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1) Basic
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//shouldn't throw
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2) Leave partition unspecified
name|endPt
operator|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// should not throw
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newPartVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|newPartVals
operator|.
name|add
argument_list|(
name|PART1_CONTINENT
argument_list|)
expr_stmt|;
name|newPartVals
operator|.
name|add
argument_list|(
literal|"Nepal"
argument_list|)
expr_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newPartVals
argument_list|)
decl_stmt|;
comment|// Ensure partition is absent
try|try
block|{
name|msClient
operator|.
name|getPartition
argument_list|(
name|endPt
operator|.
name|database
argument_list|,
name|endPt
operator|.
name|table
argument_list|,
name|endPt
operator|.
name|partitionVals
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Partition already exists"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// expect this exception
block|}
comment|// Create partition
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure partition is present
name|Partition
name|p
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|endPt
operator|.
name|database
argument_list|,
name|endPt
operator|.
name|table
argument_list|,
name|endPt
operator|.
name|partitionVals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Did not find added partition"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchEmptyCommit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1)  to partitioned table
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2) To unpartitioned table
name|endPt
operator|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames2
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
expr_stmt|;
name|connection
operator|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchEmptyAbort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1) to partitioned table
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2) to unpartitioned table
name|endPt
operator|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
expr_stmt|;
name|connection
operator|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchCommit_Delimited
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// 1st Txn
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2nd Txn
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// data should not be visible
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// To Unpartitioned table
name|endPt
operator|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
expr_stmt|;
name|connection
operator|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// 1st Txn
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchCommit_Json
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|StrictJsonWriter
name|writer
init|=
operator|new
name|StrictJsonWriter
argument_list|(
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// 1st Txn
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rec1
init|=
literal|"{\"id\" : 1, \"msg\": \"Hello streaming\"}"
decl_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
name|rec1
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemainingTransactions
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// 1) test with txn.Commit()
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|int
name|batch
init|=
literal|0
decl_stmt|;
name|int
name|initialCount
init|=
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
decl_stmt|;
while|while
condition|(
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|--
name|initialCount
argument_list|,
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rec
init|=
literal|0
init|;
name|rec
operator|<
literal|2
condition|;
operator|++
name|rec
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
operator|(
name|batch
operator|*
name|rec
operator|+
literal|",Hello streaming"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|batch
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2) test with txn.Abort()
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|batch
operator|=
literal|0
expr_stmt|;
name|initialCount
operator|=
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
expr_stmt|;
while|while
condition|(
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|--
name|initialCount
argument_list|,
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rec
init|=
literal|0
init|;
name|rec
operator|<
literal|2
condition|;
operator|++
name|rec
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
operator|(
name|batch
operator|*
name|rec
operator|+
literal|",Hello streaming"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|batch
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|checkNothingWritten
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkNothingWritten
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchAbortAndCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|checkNothingWritten
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleTransactionBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2nd Txn Batch
name|txnBatch
operator|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"3,Hello streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"4,Welcome to streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|,
literal|"{4, Welcome to streaming - once again}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterleavedTransactionBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Acquire 1st Txn Batch
name|TransactionBatch
name|txnBatch1
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch1
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
comment|// Acquire 2nd Txn Batch
name|DelimitedInputWriter
name|writer2
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch2
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|10
argument_list|,
name|writer2
argument_list|)
decl_stmt|;
name|txnBatch2
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
comment|// Interleaved writes to both batches
name|txnBatch1
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch2
operator|.
name|write
argument_list|(
literal|"3,Hello streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|checkNothingWritten
argument_list|()
expr_stmt|;
name|txnBatch2
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch1
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch1
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch2
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch2
operator|.
name|write
argument_list|(
literal|"4,Welcome to streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|)
expr_stmt|;
name|txnBatch2
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|,
literal|"{3, Hello streaming - once again}"
argument_list|,
literal|"{4, Welcome to streaming - once again}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch1
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|txnBatch2
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch1
operator|.
name|close
argument_list|()
expr_stmt|;
name|txnBatch2
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|WriterThd
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|StreamingConnection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|DelimitedInputWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|String
name|data
decl_stmt|;
specifier|private
name|Throwable
name|error
decl_stmt|;
name|WriterThd
parameter_list|(
name|HiveEndPoint
name|ep
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
literal|"Writer_"
operator|+
name|data
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|DelimitedInputWriter
argument_list|(
name|fieldNames
argument_list|,
literal|","
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|conn
operator|=
name|ep
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|error
operator|=
name|throwable
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread "
operator|+
name|thread
operator|.
name|getName
argument_list|()
operator|+
literal|" died: "
operator|+
name|throwable
operator|.
name|getMessage
argument_list|()
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TransactionBatch
name|txnBatch
init|=
literal|null
decl_stmt|;
try|try
block|{
name|txnBatch
operator|=
name|conn
operator|.
name|fetchTransactionBatch
argument_list|(
literal|1000
argument_list|,
name|writer
argument_list|)
expr_stmt|;
while|while
condition|(
name|txnBatch
operator|.
name|remainingTransactions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|// while
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|txnBatch
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"txnBatch.close() failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"conn.close() failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentTransactionBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HiveEndPoint
name|ep
init|=
operator|new
name|HiveEndPoint
argument_list|(
name|metaStoreURI
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WriterThd
argument_list|>
name|writers
init|=
operator|new
name|ArrayList
argument_list|<
name|WriterThd
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|WriterThd
argument_list|(
name|ep
argument_list|,
literal|"1,Matrix"
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|WriterThd
argument_list|(
name|ep
argument_list|,
literal|"2,Gandhi"
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|WriterThd
argument_list|(
name|ep
argument_list|,
literal|"3,Silence"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|WriterThd
name|w
range|:
name|writers
control|)
block|{
name|w
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThd
name|w
range|:
name|writers
control|)
block|{
name|w
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThd
name|w
range|:
name|writers
control|)
block|{
if|if
condition|(
name|w
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Writer thread"
operator|+
name|w
operator|.
name|getName
argument_list|()
operator|+
literal|" died: "
operator|+
name|w
operator|.
name|error
operator|.
name|getMessage
argument_list|()
operator|+
literal|" See log file for stack trace"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// delete db and all tables in it
specifier|public
specifier|static
name|void
name|dropDB
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|String
name|databaseName
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|String
name|table
range|:
name|client
operator|.
name|listTableNamesByFilter
argument_list|(
name|databaseName
argument_list|,
literal|""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|databaseName
argument_list|,
name|table
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|databaseName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{     }
block|}
specifier|public
name|void
name|createDbAndTable
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|Exception
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|databaseName
argument_list|)
expr_stmt|;
name|String
name|dbLocation
init|=
literal|"raw://"
operator|+
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|databaseName
operator|+
literal|".db"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
name|db
operator|.
name|setLocationUri
argument_list|(
name|dbLocation
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|databaseName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|getTableColumns
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setLocation
argument_list|(
name|dbLocation
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|OrcSerde
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
name|HiveInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|OrcOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setParameters
argument_list|(
name|tableParams
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
try|try
block|{
name|addPartition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{     }
name|Partition
name|createdPartition
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|partLocation
operator|=
name|createdPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addPartition
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|Table
name|tbl
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|)
throws|throws
name|IOException
throws|,
name|TException
block|{
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setLocation
argument_list|(
name|sd
operator|.
name|getLocation
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|makePartPath
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partValues
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|partValues
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|makePartPath
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
if|if
condition|(
name|partKeys
operator|.
name|size
argument_list|()
operator|!=
name|partVals
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Partition values:"
operator|+
name|partVals
operator|+
literal|", does not match the partition Keys in table :"
operator|+
name|partKeys
argument_list|)
throw|;
block|}
name|StringBuffer
name|buff
init|=
operator|new
name|StringBuffer
argument_list|(
name|partKeys
operator|.
name|size
argument_list|()
operator|*
literal|20
argument_list|)
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|" ( "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldSchema
name|schema
range|:
name|partKeys
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|partKeys
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|" )"
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getTableColumns
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|COL1
argument_list|,
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|COL2
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
block|}
end_class

end_unit

