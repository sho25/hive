begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
specifier|public
class|class
name|TestDelimitedInputWriter
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFieldReordering
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"col1"
block|,
literal|"col2"
block|,
literal|"col3"
block|,
literal|"col4"
block|,
literal|"col5"
block|}
argument_list|)
decl_stmt|;
block|{
comment|//1)  test dropping fields - first middle& last
name|String
index|[]
name|fieldNames
init|=
block|{
literal|null
block|,
literal|"col2"
block|,
literal|null
block|,
literal|"col4"
block|,
literal|null
block|}
decl_stmt|;
name|int
index|[]
name|mapping
init|=
name|DelimitedInputWriter
operator|.
name|getFieldReordering
argument_list|(
name|fieldNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|mapping
argument_list|,
operator|new
name|int
index|[]
block|{
operator|-
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|3
block|,
operator|-
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|//2)  test reordering
name|String
index|[]
name|fieldNames
init|=
block|{
literal|"col5"
block|,
literal|"col4"
block|,
literal|"col3"
block|,
literal|"col2"
block|,
literal|"col1"
block|}
decl_stmt|;
name|int
index|[]
name|mapping
init|=
name|DelimitedInputWriter
operator|.
name|getFieldReordering
argument_list|(
name|fieldNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|mapping
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|,
literal|0
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|//3)  test bad field names
name|String
index|[]
name|fieldNames
init|=
block|{
literal|"xyz"
block|,
literal|"abc"
block|,
literal|"col3"
block|,
literal|"col4"
block|,
literal|"as"
block|}
decl_stmt|;
try|try
block|{
name|DelimitedInputWriter
operator|.
name|getFieldReordering
argument_list|(
name|fieldNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidColumn
name|e
parameter_list|)
block|{
comment|// should throw
block|}
block|}
block|{
comment|//4)  test few field names
name|String
index|[]
name|fieldNames
init|=
block|{
literal|"col3"
block|,
literal|"col4"
block|}
decl_stmt|;
name|int
index|[]
name|mapping
init|=
name|DelimitedInputWriter
operator|.
name|getFieldReordering
argument_list|(
name|fieldNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|mapping
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|//5)  test extra field names
name|String
index|[]
name|fieldNames
init|=
block|{
literal|"col5"
block|,
literal|"col4"
block|,
literal|"col3"
block|,
literal|"col2"
block|,
literal|"col1"
block|,
literal|"col1"
block|}
decl_stmt|;
try|try
block|{
name|DelimitedInputWriter
operator|.
name|getFieldReordering
argument_list|(
name|fieldNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidColumn
name|e
parameter_list|)
block|{
comment|//show throw
block|}
block|}
block|}
block|}
end_class

end_unit

