begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ResourceSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|FrontendException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|ObjectSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|UDFContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * HCatStorer.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|HCatStorer
extends|extends
name|HCatBaseStorer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HCatStorer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Signature for wrapped storer, see comments in LoadFuncBasedInputDriver.initialize
specifier|final
specifier|public
specifier|static
name|String
name|INNER_SIGNATURE
init|=
literal|"hcatstorer.inner.signature"
decl_stmt|;
specifier|final
specifier|public
specifier|static
name|String
name|INNER_SIGNATURE_PREFIX
init|=
literal|"hcatstorer_inner_signature"
decl_stmt|;
comment|// A hash map which stores job credentials. The key is a signature passed by Pig, which is
comment|//unique to the store func and out file name (table, in our case).
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Credentials
argument_list|>
name|jobCredentials
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Credentials
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Options
name|validOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
static|static
block|{
try|try
block|{
name|populateValidOptions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to build option list: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
comment|/**    * @param optString may empty str (not null), in which case it's no-op    */
specifier|public
name|HCatStorer
parameter_list|(
name|String
name|partSpecs
parameter_list|,
name|String
name|pigSchema
parameter_list|,
name|String
name|optString
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|partSpecs
argument_list|,
name|pigSchema
argument_list|)
expr_stmt|;
name|String
index|[]
name|optsArr
init|=
name|optString
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|CommandLine
name|configuredOptions
decl_stmt|;
try|try
block|{
name|configuredOptions
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|validOptions
argument_list|,
name|optsArr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"[-"
operator|+
name|ON_OOR_VALUE_OPT
operator|+
literal|"]"
argument_list|,
name|validOptions
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Properties
name|udfProps
init|=
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|getUDFProperties
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|sign
block|}
argument_list|)
decl_stmt|;
comment|//downstream code expects it to be set to a valid value
name|udfProps
operator|.
name|put
argument_list|(
name|ON_OORA_VALUE_PROP
argument_list|,
name|configuredOptions
operator|.
name|getOptionValue
argument_list|(
name|ON_OOR_VALUE_OPT
argument_list|,
name|getDefaultValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"setting "
operator|+
name|configuredOptions
operator|.
name|getOptionValue
argument_list|(
name|ON_OOR_VALUE_OPT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|isValidOOROption
argument_list|(
operator|(
name|String
operator|)
name|udfProps
operator|.
name|get
argument_list|(
name|ON_OORA_VALUE_PROP
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HCatStorer
parameter_list|(
name|String
name|partSpecs
parameter_list|,
name|String
name|pigSchema
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|partSpecs
argument_list|,
name|pigSchema
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HCatStorer
parameter_list|(
name|String
name|partSpecs
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|partSpecs
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HCatStorer
parameter_list|()
throws|throws
name|Exception
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OutputFormat
name|getOutputFormat
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|HCatOutputFormat
argument_list|()
return|;
block|}
comment|/**    * makes a list of all options that HCatStorer understands    */
specifier|private
specifier|static
name|void
name|populateValidOptions
parameter_list|()
block|{
name|validOptions
operator|.
name|addOption
argument_list|(
name|ON_OOR_VALUE_OPT
argument_list|,
literal|true
argument_list|,
literal|"Controls how store operation handles Pig values which are out of range for the target column"
operator|+
literal|"in Hive table.  Default is to throw an exception."
argument_list|)
expr_stmt|;
block|}
comment|/**    * check that onOutOfRangeValue handling is configured properly    * @throws FrontendException    */
specifier|private
specifier|static
name|void
name|isValidOOROption
parameter_list|(
name|String
name|optVal
parameter_list|)
throws|throws
name|FrontendException
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OOR_VALUE_OPT_VALUES
name|v
range|:
name|OOR_VALUE_OPT_VALUES
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|v
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|optVal
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
literal|"Unexpected value for '"
operator|+
name|ON_OOR_VALUE_OPT
operator|+
literal|"' found: "
operator|+
name|optVal
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param location databaseName.tableName    */
annotation|@
name|Override
specifier|public
name|void
name|setStoreLocation
parameter_list|(
name|String
name|location
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|INNER_SIGNATURE
argument_list|,
name|INNER_SIGNATURE_PREFIX
operator|+
literal|"_"
operator|+
name|sign
argument_list|)
expr_stmt|;
name|Properties
name|udfProps
init|=
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|getUDFProperties
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|sign
block|}
argument_list|)
decl_stmt|;
name|String
index|[]
name|userStr
init|=
name|location
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|udfProps
operator|.
name|containsKey
argument_list|(
name|HCatConstants
operator|.
name|HCAT_PIG_STORER_LOCATION_SET
argument_list|)
condition|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|Object
argument_list|>
name|emr
init|=
name|udfProps
operator|.
name|keys
argument_list|()
init|;
name|emr
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|PigHCatUtil
operator|.
name|getConfigFromUDFProperties
argument_list|(
name|udfProps
argument_list|,
name|config
argument_list|,
name|emr
operator|.
name|nextElement
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Credentials
name|crd
init|=
name|jobCredentials
operator|.
name|get
argument_list|(
name|INNER_SIGNATURE_PREFIX
operator|+
literal|"_"
operator|+
name|sign
argument_list|)
decl_stmt|;
if|if
condition|(
name|crd
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|addAll
argument_list|(
name|crd
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Job
name|clone
init|=
operator|new
name|Job
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|OutputJobInfo
name|outputJobInfo
decl_stmt|;
if|if
condition|(
name|userStr
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|outputJobInfo
operator|=
name|OutputJobInfo
operator|.
name|create
argument_list|(
name|userStr
index|[
literal|0
index|]
argument_list|,
name|userStr
index|[
literal|1
index|]
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|userStr
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|outputJobInfo
operator|=
name|OutputJobInfo
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|userStr
index|[
literal|0
index|]
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
literal|"location "
operator|+
name|location
operator|+
literal|" is invalid. It must be of the form [db.]table"
argument_list|,
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|)
throw|;
block|}
name|Schema
name|schema
init|=
operator|(
name|Schema
operator|)
name|ObjectSerializer
operator|.
name|deserialize
argument_list|(
name|udfProps
operator|.
name|getProperty
argument_list|(
name|PIG_SCHEMA
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|pigSchema
operator|=
name|schema
expr_stmt|;
block|}
if|if
condition|(
name|pigSchema
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
literal|"Schema for data cannot be determined."
argument_list|,
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|)
throw|;
block|}
name|String
name|externalLocation
init|=
operator|(
name|String
operator|)
name|udfProps
operator|.
name|getProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_PIG_STORER_EXTERNAL_LOCATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalLocation
operator|!=
literal|null
condition|)
block|{
name|outputJobInfo
operator|.
name|setLocation
argument_list|(
name|externalLocation
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HCatOutputFormat
operator|.
name|setOutput
argument_list|(
name|job
argument_list|,
name|outputJobInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|he
parameter_list|)
block|{
comment|// pass the message to the user - essentially something about
comment|// the table
comment|// information passed to HCatOutputFormat was not right
throw|throw
operator|new
name|PigException
argument_list|(
name|he
operator|.
name|getMessage
argument_list|()
argument_list|,
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|,
name|he
argument_list|)
throw|;
block|}
name|HCatSchema
name|hcatTblSchema
init|=
name|HCatOutputFormat
operator|.
name|getTableSchema
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|doSchemaValidations
argument_list|(
name|pigSchema
argument_list|,
name|hcatTblSchema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
name|he
operator|.
name|getMessage
argument_list|()
argument_list|,
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|,
name|he
argument_list|)
throw|;
block|}
name|computedSchema
operator|=
name|convertPigSchemaToHCatSchema
argument_list|(
name|pigSchema
argument_list|,
name|hcatTblSchema
argument_list|)
expr_stmt|;
name|HCatOutputFormat
operator|.
name|setSchema
argument_list|(
name|job
argument_list|,
name|computedSchema
argument_list|)
expr_stmt|;
name|udfProps
operator|.
name|setProperty
argument_list|(
name|COMPUTED_OUTPUT_SCHEMA
argument_list|,
name|ObjectSerializer
operator|.
name|serialize
argument_list|(
name|computedSchema
argument_list|)
argument_list|)
expr_stmt|;
comment|// We will store all the new /changed properties in the job in the
comment|// udf context, so the the HCatOutputFormat.setOutput and setSchema
comment|// methods need not be called many times.
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyValue
range|:
name|job
operator|.
name|getConfiguration
argument_list|()
control|)
block|{
name|String
name|oldValue
init|=
name|clone
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getRaw
argument_list|(
name|keyValue
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|oldValue
operator|==
literal|null
operator|)
operator|||
operator|(
name|keyValue
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
operator|==
literal|false
operator|)
condition|)
block|{
name|udfProps
operator|.
name|put
argument_list|(
name|keyValue
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Store credentials in a private hash map and not the udf context to
comment|// make sure they are not public.
name|jobCredentials
operator|.
name|put
argument_list|(
name|INNER_SIGNATURE_PREFIX
operator|+
literal|"_"
operator|+
name|sign
argument_list|,
name|job
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|udfProps
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_PIG_STORER_LOCATION_SET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeSchema
parameter_list|(
name|ResourceSchema
name|schema
parameter_list|,
name|String
name|arg1
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getHCatShim
argument_list|()
operator|.
name|commitJob
argument_list|(
name|getOutputFormat
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanupOnFailure
parameter_list|(
name|String
name|location
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getHCatShim
argument_list|()
operator|.
name|abortJob
argument_list|(
name|getOutputFormat
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

