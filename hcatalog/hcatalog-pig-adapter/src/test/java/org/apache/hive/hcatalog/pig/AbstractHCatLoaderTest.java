begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ResourceStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|schema
operator|.
name|Schema
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|tools
operator|.
name|pigstats
operator|.
name|OutputStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|tools
operator|.
name|pigstats
operator|.
name|PigStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHCatLoaderTest
extends|extends
name|HCatBaseTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractHCatLoaderTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BASIC_FILE_NAME
init|=
name|TEST_DATA_DIR
operator|+
literal|"/basic.input.data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMPLEX_FILE_NAME
init|=
name|TEST_DATA_DIR
operator|+
literal|"/complex.input.data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATE_FILE_NAME
init|=
name|TEST_DATA_DIR
operator|+
literal|"/datetimestamp.input.data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BASIC_TABLE
init|=
literal|"junit_unparted_basic"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMPLEX_TABLE
init|=
literal|"junit_unparted_complex"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARTITIONED_TABLE
init|=
literal|"junit_parted_basic"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPECIFIC_SIZE_TABLE
init|=
literal|"junit_specific_size"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPECIFIC_SIZE_TABLE_2
init|=
literal|"junit_specific_size2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARTITIONED_DATE_TABLE
init|=
literal|"junit_parted_date"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|basicInputData
decl_stmt|;
specifier|protected
name|String
name|storageFormat
decl_stmt|;
specifier|abstract
name|String
name|getStorageFormat
parameter_list|()
function_decl|;
specifier|public
name|AbstractHCatLoaderTest
parameter_list|()
block|{
name|this
operator|.
name|storageFormat
operator|=
name|getStorageFormat
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dropTable
parameter_list|(
name|String
name|tablename
parameter_list|)
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
name|tablename
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|dropTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|tablename
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|partitionedBy
parameter_list|)
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|tablename
argument_list|,
name|schema
argument_list|,
name|partitionedBy
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|createTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|partitionedBy
parameter_list|,
name|IDriver
name|driver
parameter_list|,
name|String
name|storageFormat
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|createTable
decl_stmt|;
name|createTable
operator|=
literal|"create table "
operator|+
name|tablename
operator|+
literal|"("
operator|+
name|schema
operator|+
literal|") "
expr_stmt|;
if|if
condition|(
operator|(
name|partitionedBy
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|partitionedBy
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|createTable
operator|=
name|createTable
operator|+
literal|"partitioned by ("
operator|+
name|partitionedBy
operator|+
literal|") "
expr_stmt|;
block|}
name|createTable
operator|=
name|createTable
operator|+
literal|"stored as "
operator|+
name|storageFormat
expr_stmt|;
comment|//HCat doesn't support transactional tables
name|createTable
operator|+=
literal|" TBLPROPERTIES ('transactional'='false')"
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
name|createTable
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|tablename
argument_list|,
name|schema
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute Hive CLI statement    * @param cmd arbitrary statement to execute    */
specifier|static
name|void
name|executeStatementOnDriver
parameter_list|(
name|String
name|cmd
parameter_list|,
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to execute \""
operator|+
name|cmd
operator|+
literal|"\". Driver returned "
operator|+
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" Error: "
operator|+
name|cpr
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkProjection
parameter_list|(
name|FieldSchema
name|fs
parameter_list|,
name|String
name|expectedName
parameter_list|,
name|byte
name|expectedPigType
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fs
operator|.
name|alias
argument_list|,
name|expectedName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|DataType
operator|.
name|findTypeName
argument_list|(
name|expectedPigType
argument_list|)
operator|+
literal|"; got "
operator|+
name|DataType
operator|.
name|findTypeName
argument_list|(
name|fs
operator|.
name|type
argument_list|)
argument_list|,
name|expectedPigType
argument_list|,
name|fs
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUpTest
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|BASIC_TABLE
argument_list|,
literal|"a int, b string"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|COMPLEX_TABLE
argument_list|,
literal|"name string, studentid int, "
operator|+
literal|"contact struct<phno:string,email:string>, "
operator|+
literal|"currently_registered_courses array<string>, "
operator|+
literal|"current_grades map<string,string>, "
operator|+
literal|"phnos array<struct<phno:string,type:string>>"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|PARTITIONED_TABLE
argument_list|,
literal|"a int, b string"
argument_list|,
literal|"bkt string"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|SPECIFIC_SIZE_TABLE
argument_list|,
literal|"a int, b string"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|SPECIFIC_SIZE_TABLE_2
argument_list|,
literal|"a int, b string"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|PARTITIONED_DATE_TABLE
argument_list|,
literal|"b string"
argument_list|,
literal|"dt date"
argument_list|)
expr_stmt|;
name|AllTypesTable
operator|.
name|setupAllTypesTable
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|basicInputData
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|String
name|sj
init|=
literal|"S"
operator|+
name|j
operator|+
literal|"S"
decl_stmt|;
name|input
index|[
name|k
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|sj
expr_stmt|;
name|basicInputData
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
name|i
argument_list|,
name|sj
argument_list|)
argument_list|)
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|BASIC_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|COMPLEX_FILE_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Henry Jekyll\t42\t(415-253-6367,hjekyll@contemporary.edu.uk)\t{(PHARMACOLOGY),(PSYCHIATRY)}\t[PHARMACOLOGY#A-,PSYCHIATRY#B+]\t{(415-253-6367,cell),(408-253-6367,landline)}"
block|,
literal|"Edward Hyde\t1337\t(415-253-6367,anonymous@b44chan.org)\t{(CREATIVE_WRITING),(COPYRIGHT_LAW)}\t[CREATIVE_WRITING#A+,COPYRIGHT_LAW#D]\t{(415-253-6367,cell),(408-253-6367,landline)}"
block|,       }
argument_list|)
expr_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|DATE_FILE_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2016-07-14 08:10:15\tHenry Jekyll"
block|,
literal|"2016-07-15 11:54:55\tEdward Hyde"
block|,       }
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|BASIC_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into '"
operator|+
name|BASIC_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatStorer();"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into '"
operator|+
name|SPECIFIC_SIZE_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatStorer();"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = foreach A generate a,b;"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B2 = filter B by a< 2;"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B2 into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatStorer('bkt=0');"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"C = foreach A generate a,b;"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"C2 = filter C by a>= 2;"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store C2 into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatStorer('bkt=1');"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"D = load '"
operator|+
name|COMPLEX_FILE_NAME
operator|+
literal|"' as (name:chararray, studentid:int, contact:tuple(phno:chararray,email:chararray), currently_registered_courses:bag{innertup:tuple(course:chararray)}, current_grades:map[ ] , phnos :bag{innertup:tuple(phno:chararray,type:chararray)});"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store D into '"
operator|+
name|COMPLEX_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatStorer();"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"E = load '"
operator|+
name|DATE_FILE_NAME
operator|+
literal|"' as (dt:chararray, b:chararray);"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"F = foreach E generate ToDate(dt, 'yyyy-MM-dd HH:mm:ss') as dt, b;"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store F into '"
operator|+
name|PARTITIONED_DATE_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatStorer();"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|dropTable
argument_list|(
name|BASIC_TABLE
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|COMPLEX_TABLE
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|PARTITIONED_TABLE
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|SPECIFIC_SIZE_TABLE
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|SPECIFIC_SIZE_TABLE_2
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|PARTITIONED_DATE_TABLE
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|AllTypesTable
operator|.
name|ALL_PRIMITIVE_TYPES_TABLE
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSchemaLoadBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// test that schema was loaded correctly
name|server
operator|.
name|registerQuery
argument_list|(
literal|"X = load '"
operator|+
name|BASIC_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedXSchema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Xfields
init|=
name|dumpedXSchema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Xfields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we properly translate data types in Hive/HCat table schema into Pig schema    */
annotation|@
name|Test
specifier|public
name|void
name|testSchemaLoadPrimitiveTypes
parameter_list|()
throws|throws
name|IOException
block|{
name|AllTypesTable
operator|.
name|testSchemaLoadPrimitiveTypes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that value from Hive table are read properly in Pig    */
annotation|@
name|Test
specifier|public
name|void
name|testReadDataPrimitiveTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|AllTypesTable
operator|.
name|testReadDataPrimitiveTypes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDataBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"X = load '"
operator|+
name|BASIC_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|XIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|int
name|numTuplesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|XIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|XIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|basicInputData
operator|.
name|size
argument_list|()
argument_list|,
name|numTuplesRead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSchemaLoadComplex
parameter_list|()
throws|throws
name|IOException
block|{
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// test that schema was loaded correctly
name|server
operator|.
name|registerQuery
argument_list|(
literal|"K = load '"
operator|+
name|COMPLEX_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedKSchema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"K"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Kfields
init|=
name|dumpedKSchema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|Kfields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|INTEGER
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"studentid"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|TUPLE
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"contact"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"phno"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"email"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|DataType
operator|.
name|BAG
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"currently_registered_courses"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|TUPLE
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
comment|// assertEquals("course",Kfields.get(3).schema.getFields().get(0).schema.getFields().get(0).alias.toLowerCase());
comment|// commented out, because the name becomes "innerfield" by default - we call it "course" in pig,
comment|// but in the metadata, it'd be anonymous, so this would be autogenerated, which is fine
block|}
name|assertEquals
argument_list|(
name|DataType
operator|.
name|MAP
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"current_grades"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|BAG
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"phnos"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|TUPLE
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"phno"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadPartitionedBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from "
operator|+
name|PARTITIONED_TABLE
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|valuesReadFromHiveDriver
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|basicInputData
operator|.
name|size
argument_list|()
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"W = load '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedWSchema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"W"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Wfields
init|=
name|dumpedWSchema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Wfields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"bkt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|WIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"W"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|valuesRead
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|WIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|WIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|valuesRead
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
operator|(
name|Integer
operator|)
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|Integer
operator|)
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|<
literal|2
condition|)
block|{
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|,
name|valuesRead
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"P1 = load '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"P1filter = filter P1 by bkt == '0';"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|P1Iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"P1filter"
argument_list|)
decl_stmt|;
name|int
name|count1
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|P1Iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|P1Iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|count1
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count1
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"P2 = load '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"P2filter = filter P2 by bkt == '1';"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|P2Iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"P2filter"
argument_list|)
decl_stmt|;
name|int
name|count2
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|P2Iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|P2Iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|>
literal|1
argument_list|)
expr_stmt|;
name|count2
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|count2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadMissingPartitionBasicNeg
parameter_list|()
throws|throws
name|Exception
block|{
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|File
name|removedPartitionDir
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"/bkt=0"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removeDirectory
argument_list|(
name|removedPartitionDir
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test did not run because its environment could not be set."
argument_list|)
expr_stmt|;
return|return;
block|}
name|driver
operator|.
name|run
argument_list|(
literal|"select * from "
operator|+
name|PARTITIONED_TABLE
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|valuesReadFromHiveDriver
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"W = load '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedWSchema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"W"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Wfields
init|=
name|dumpedWSchema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Wfields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"bkt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|WIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"W"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should failed in retriving an invalid partition"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|private
specifier|static
name|boolean
name|removeDirectory
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
name|files
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|success
operator|=
name|removeDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|success
operator|=
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|success
operator|=
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProjectionsBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// projections are handled by using generate, not "as" on the Load
name|server
operator|.
name|registerQuery
argument_list|(
literal|"Y1 = load '"
operator|+
name|BASIC_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"Y2 = foreach Y1 generate a;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"Y3 = foreach Y1 generate b,a;"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedY2Schema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"Y2"
argument_list|)
decl_stmt|;
name|Schema
name|dumpedY3Schema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"Y3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Y2fields
init|=
name|dumpedY2Schema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Y3fields
init|=
name|dumpedY3Schema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Y2fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|Y2fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|INTEGER
argument_list|,
name|Y2fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Y3fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|Y3fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Y3fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|Y3fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|INTEGER
argument_list|,
name|Y3fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|int
name|numTuplesRead
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|Y2Iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"Y2"
argument_list|)
decl_stmt|;
while|while
condition|(
name|Y2Iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|Y2Iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|numTuplesRead
operator|=
literal|0
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|Y3Iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"Y3"
argument_list|)
decl_stmt|;
while|while
condition|(
name|Y3Iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|Y3Iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|basicInputData
operator|.
name|size
argument_list|()
argument_list|,
name|numTuplesRead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnarStorePushdown
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|PIGOUTPUT_DIR
init|=
name|TEST_DATA_DIR
operator|+
literal|"/colpushdownop"
decl_stmt|;
name|String
name|PIG_FILE
init|=
literal|"test.pig"
decl_stmt|;
name|String
name|expectedCols
init|=
literal|"0,1"
decl_stmt|;
name|PrintWriter
name|w
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|PIG_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|"A = load '"
operator|+
name|COMPLEX_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|"B = foreach A generate name,studentid;"
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|"C = filter B by name is not null;"
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|"store C into '"
operator|+
name|PIGOUTPUT_DIR
operator|+
literal|"' using PigStorage();"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-x"
block|,
literal|"local"
block|,
name|PIG_FILE
block|}
decl_stmt|;
name|PigStats
name|stats
init|=
name|PigRunner
operator|.
name|run
argument_list|(
name|args
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//Pig script was successful
name|assertTrue
argument_list|(
name|stats
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
comment|//Single MapReduce job is launched
name|OutputStats
name|outstats
init|=
name|stats
operator|.
name|getOutputStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outstats
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCols
argument_list|,
name|outstats
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|)
argument_list|)
expr_stmt|;
comment|//delete output file on exit
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|outstats
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|PIGOUTPUT_DIR
argument_list|)
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|PIGOUTPUT_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
name|PIG_FILE
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests the failure case caused by HIVE-10752    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testColumnarStorePushdown2
parameter_list|()
throws|throws
name|Exception
block|{
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|COMPLEX_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = load '"
operator|+
name|COMPLEX_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"C = join A by name, B by name;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"D = foreach C generate B::studentid;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"E = ORDER D by studentid asc;"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"E"
argument_list|)
decl_stmt|;
name|Tuple
name|t
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1337
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
name|SPECIFIC_SIZE_TABLE
operator|+
literal|"/part-m-00000"
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|RandomAccessFile
name|randomAccessFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|randomAccessFile
operator|.
name|setLength
argument_list|(
literal|2L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|randomAccessFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|()
decl_stmt|;
name|HCatLoader
name|hCatLoader
init|=
operator|new
name|HCatLoader
argument_list|()
decl_stmt|;
name|hCatLoader
operator|.
name|setUDFContextSignature
argument_list|(
literal|"testGetInputBytes"
argument_list|)
expr_stmt|;
name|hCatLoader
operator|.
name|setLocation
argument_list|(
name|SPECIFIC_SIZE_TABLE
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|ResourceStatistics
name|statistics
init|=
name|hCatLoader
operator|.
name|getStatistics
argument_list|(
name|SPECIFIC_SIZE_TABLE
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
operator|(
name|long
operator|)
name|statistics
operator|.
name|getmBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simulates Pig relying on HCatLoader to inform about input size of multiple tables.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testGetInputBytesMultipleTables
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
name|SPECIFIC_SIZE_TABLE
operator|+
literal|"/part-m-00000"
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|RandomAccessFile
name|randomAccessFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|randomAccessFile
operator|.
name|setLength
argument_list|(
literal|987654321L
argument_list|)
expr_stmt|;
name|randomAccessFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
name|SPECIFIC_SIZE_TABLE_2
operator|+
literal|"/part-m-00000"
argument_list|)
expr_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|randomAccessFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|randomAccessFile
operator|.
name|setLength
argument_list|(
literal|12345678L
argument_list|)
expr_stmt|;
name|randomAccessFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|()
decl_stmt|;
name|HCatLoader
name|hCatLoader
init|=
operator|new
name|HCatLoader
argument_list|()
decl_stmt|;
comment|//Mocking that Pig would assign different signature for each POLoad operator
name|hCatLoader
operator|.
name|setUDFContextSignature
argument_list|(
literal|"testGetInputBytesMultipleTables"
operator|+
name|SPECIFIC_SIZE_TABLE
argument_list|)
expr_stmt|;
name|hCatLoader
operator|.
name|setLocation
argument_list|(
name|SPECIFIC_SIZE_TABLE
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|hCatLoader
operator|.
name|setUDFContextSignature
argument_list|(
literal|"testGetInputBytesMultipleTables"
operator|+
name|SPECIFIC_SIZE_TABLE_2
argument_list|)
expr_stmt|;
name|hCatLoader
operator|.
name|setLocation
argument_list|(
name|SPECIFIC_SIZE_TABLE_2
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|hCatLoader
operator|.
name|setUDFContextSignature
argument_list|(
literal|"testGetInputBytesMultipleTables"
operator|+
name|PARTITIONED_TABLE
argument_list|)
expr_stmt|;
name|hCatLoader
operator|.
name|setLocation
argument_list|(
name|PARTITIONED_TABLE
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|long
name|specificTableSize
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|specificTableSize2
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|partitionedTableSize
init|=
operator|-
literal|1
decl_stmt|;
name|ResourceStatistics
name|statistics
init|=
name|hCatLoader
operator|.
name|getStatistics
argument_list|(
name|SPECIFIC_SIZE_TABLE
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|specificTableSize
operator|=
name|statistics
operator|.
name|getSizeInBytes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|987654321
argument_list|,
name|specificTableSize
argument_list|)
expr_stmt|;
name|statistics
operator|=
name|hCatLoader
operator|.
name|getStatistics
argument_list|(
name|SPECIFIC_SIZE_TABLE_2
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|specificTableSize2
operator|=
name|statistics
operator|.
name|getSizeInBytes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|12345678
argument_list|,
name|specificTableSize2
argument_list|)
expr_stmt|;
name|statistics
operator|=
name|hCatLoader
operator|.
name|getStatistics
argument_list|(
name|PARTITIONED_TABLE
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|partitionedTableSize
operator|=
name|statistics
operator|.
name|getSizeInBytes
argument_list|()
expr_stmt|;
comment|//Partitioned table size here is dependent on underlying storage format, it's ~ 20<x<2000
name|assertTrue
argument_list|(
literal|20
operator|<
name|partitionedTableSize
operator|&&
name|partitionedTableSize
operator|<
literal|2000
argument_list|)
expr_stmt|;
comment|//No-op here, just a reminder that Pig would do the calculation of the sum itself
comment|//e.g. when joining the 3 tables is requested
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|specificTableSize
operator|+
name|specificTableSize2
operator|+
name|partitionedTableSize
operator|)
operator|-
operator|(
literal|987654321
operator|+
literal|12345678
operator|+
literal|1010
operator|)
argument_list|)
operator|<
literal|1010
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertBooleanToInt
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tbl
init|=
literal|"test_convert_boolean_to_int"
decl_stmt|;
name|String
name|inputFileName
init|=
name|TEST_DATA_DIR
operator|+
literal|"/testConvertBooleanToInt/data.txt"
decl_stmt|;
name|File
name|inputDataDir
init|=
operator|new
name|File
argument_list|(
name|inputFileName
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|inputDataDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|String
index|[]
name|lines
init|=
operator|new
name|String
index|[]
block|{
literal|"llama\ttrue"
block|,
literal|"alpaca\tfalse"
block|}
decl_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|inputFileName
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|tbl
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|run
argument_list|(
literal|"create external table "
operator|+
name|tbl
operator|+
literal|" (a string, b boolean) row format delimited fields terminated by '\t'"
operator|+
literal|" stored as textfile location 'file:///"
operator|+
name|inputDataDir
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|"'"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_DATA_CONVERT_BOOLEAN_TO_INTEGER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"stop.on.failure"
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|true
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"data = load 'test_convert_boolean_to_int' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|schema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|PigHCatUtil
operator|.
name|pigHasBooleanSupport
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|DataType
operator|.
name|BOOLEAN
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|DataType
operator|.
name|INTEGER
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|iterator
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|Tuple
name|t
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"llama"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alpaca"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if we can read a date partitioned table    */
annotation|@
name|Test
specifier|public
name|void
name|testDatePartitionPushUp
parameter_list|()
throws|throws
name|Exception
block|{
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"X = load '"
operator|+
name|PARTITIONED_DATE_TABLE
operator|+
literal|"' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"Y = filter X by dt == ToDate('2016-07-14','yyyy-MM-dd');"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|YIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"Y"
argument_list|)
decl_stmt|;
name|int
name|numTuplesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|YIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|YIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
literal|1
operator|+
literal|"; found "
operator|+
name|numTuplesRead
argument_list|,
name|numTuplesRead
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * basic tests that cover each scalar type    * https://issues.apache.org/jira/browse/HIVE-5814    */
specifier|protected
specifier|static
specifier|final
class|class
name|AllTypesTable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ALL_TYPES_FILE_NAME
init|=
name|TEST_DATA_DIR
operator|+
literal|"/alltypes.input.data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALL_PRIMITIVE_TYPES_TABLE
init|=
literal|"junit_unparted_alltypes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALL_TYPES_SCHEMA
init|=
literal|"( c_boolean boolean, "
operator|+
comment|//0
literal|"c_tinyint tinyint, "
operator|+
comment|//1
literal|"c_smallint smallint, "
operator|+
comment|//2
literal|"c_int int, "
operator|+
comment|//3
literal|"c_bigint bigint, "
operator|+
comment|//4
literal|"c_float float, "
operator|+
comment|//5
literal|"c_double double, "
operator|+
comment|//6
literal|"c_decimal decimal(5,2), "
operator|+
comment|//7
literal|"c_string string, "
operator|+
comment|//8
literal|"c_char char(10), "
operator|+
comment|//9
literal|"c_varchar varchar(20), "
operator|+
comment|//10
literal|"c_binary binary, "
operator|+
comment|//11
literal|"c_date date, "
operator|+
comment|//12
literal|"c_timestamp timestamp)"
decl_stmt|;
comment|//13
comment|/**      * raw data for #ALL_PRIMITIVE_TYPES_TABLE      * All the values are within range of target data type (column)      */
specifier|private
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|primitiveRows
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|Boolean
operator|.
name|TRUE
block|,
name|Byte
operator|.
name|MAX_VALUE
block|,
name|Short
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|,
name|Float
operator|.
name|MAX_VALUE
block|,
name|Double
operator|.
name|MAX_VALUE
block|,
literal|555.22
block|,
literal|"Kyiv"
block|,
literal|"char(10)xx"
block|,
literal|"varchar(20)"
block|,
literal|"blah"
operator|.
name|getBytes
argument_list|()
block|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-01-13"
argument_list|)
block|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2014-01-13 19:26:25.0123"
argument_list|)
block|}
block|,
block|{
name|Boolean
operator|.
name|FALSE
block|,
name|Byte
operator|.
name|MIN_VALUE
block|,
name|Short
operator|.
name|MIN_VALUE
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
name|Float
operator|.
name|MIN_VALUE
block|,
name|Double
operator|.
name|MIN_VALUE
block|,
operator|-
literal|555.22
block|,
literal|"Saint Petersburg"
block|,
literal|"char(xx)00"
block|,
literal|"varchar(yy)"
block|,
literal|"doh"
operator|.
name|getBytes
argument_list|()
block|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-01-14"
argument_list|)
block|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2014-01-14 19:26:25.0123"
argument_list|)
block|}
block|}
decl_stmt|;
comment|/**      * Test that we properly translate data types in Hive/HCat table schema into Pig schema      */
specifier|static
name|void
name|testSchemaLoadPrimitiveTypes
parameter_list|()
throws|throws
name|IOException
block|{
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"X = load '"
operator|+
name|ALL_PRIMITIVE_TYPES_TABLE
operator|+
literal|"' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedXSchema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Xfields
init|=
name|dumpedXSchema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|numPrimitiveTypes
argument_list|()
operator|+
literal|" fields, found "
operator|+
name|Xfields
operator|.
name|size
argument_list|()
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|numPrimitiveTypes
argument_list|()
argument_list|,
name|Xfields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"c_boolean"
argument_list|,
name|DataType
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"c_tinyint"
argument_list|,
name|DataType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"c_smallint"
argument_list|,
name|DataType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"c_int"
argument_list|,
name|DataType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"c_bigint"
argument_list|,
name|DataType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"c_float"
argument_list|,
name|DataType
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"c_double"
argument_list|,
name|DataType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"c_decimal"
argument_list|,
name|DataType
operator|.
name|BIGDECIMAL
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|,
literal|"c_string"
argument_list|,
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
literal|"c_char"
argument_list|,
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"c_varchar"
argument_list|,
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|11
argument_list|)
argument_list|,
literal|"c_binary"
argument_list|,
name|DataType
operator|.
name|BYTEARRAY
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|12
argument_list|)
argument_list|,
literal|"c_date"
argument_list|,
name|DataType
operator|.
name|DATETIME
argument_list|)
expr_stmt|;
name|checkProjection
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|13
argument_list|)
argument_list|,
literal|"c_timestamp"
argument_list|,
name|DataType
operator|.
name|DATETIME
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that value from Hive table are read properly in Pig      */
specifier|private
specifier|static
name|void
name|testReadDataPrimitiveTypes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testConvertBooleanToInt() sets HCatConstants.HCAT_DATA_CONVERT_BOOLEAN_TO_INTEGER=true, and
comment|// might be the last one to call HCatContext.INSTANCE.setConf(). Make sure setting is false.
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_DATA_CONVERT_BOOLEAN_TO_INTEGER
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"X = load '"
operator|+
name|ALL_PRIMITIVE_TYPES_TABLE
operator|+
literal|"' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|XIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|int
name|numTuplesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|XIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|XIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|numPrimitiveTypes
argument_list|()
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|colPos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|referenceData
range|:
name|primitiveRows
index|[
name|numTuplesRead
index|]
control|)
block|{
if|if
condition|(
name|referenceData
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"rowNum="
operator|+
name|numTuplesRead
operator|+
literal|" colNum="
operator|+
name|colPos
operator|+
literal|" Reference data is null; actual "
operator|+
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
argument_list|,
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|referenceData
operator|instanceof
name|Date
condition|)
block|{
comment|// Note that here we ignore nanos part of Hive Timestamp since nanos are dropped when
comment|// reading Hive from Pig by design.
name|assertTrue
argument_list|(
literal|"rowNum="
operator|+
name|numTuplesRead
operator|+
literal|" colNum="
operator|+
name|colPos
operator|+
literal|" Reference data="
operator|+
operator|(
operator|(
name|Date
operator|)
name|referenceData
operator|)
operator|.
name|toEpochMilli
argument_list|()
operator|+
literal|" actual="
operator|+
operator|(
operator|(
name|DateTime
operator|)
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|)
operator|.
name|getMillis
argument_list|()
operator|+
literal|"; types=("
operator|+
name|referenceData
operator|.
name|getClass
argument_list|()
operator|+
literal|","
operator|+
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|,
operator|(
operator|(
name|Date
operator|)
name|referenceData
operator|)
operator|.
name|toEpochMilli
argument_list|()
operator|==
operator|(
operator|(
name|DateTime
operator|)
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|)
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|referenceData
operator|instanceof
name|Timestamp
condition|)
block|{
comment|// Note that here we ignore nanos part of Hive Timestamp since nanos are dropped when
comment|// reading Hive from Pig by design.
name|assertTrue
argument_list|(
literal|"rowNum="
operator|+
name|numTuplesRead
operator|+
literal|" colNum="
operator|+
name|colPos
operator|+
literal|" Reference data="
operator|+
operator|(
operator|(
name|Timestamp
operator|)
name|referenceData
operator|)
operator|.
name|toEpochMilli
argument_list|()
operator|+
literal|" actual="
operator|+
operator|(
operator|(
name|DateTime
operator|)
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|)
operator|.
name|getMillis
argument_list|()
operator|+
literal|"; types=("
operator|+
name|referenceData
operator|.
name|getClass
argument_list|()
operator|+
literal|","
operator|+
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|,
operator|(
operator|(
name|Timestamp
operator|)
name|referenceData
operator|)
operator|.
name|toEpochMilli
argument_list|()
operator|==
operator|(
operator|(
name|DateTime
operator|)
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|)
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Doing String comps here as value objects in Hive in Pig are different so equals()
comment|// doesn't work.
name|assertTrue
argument_list|(
literal|"rowNum="
operator|+
name|numTuplesRead
operator|+
literal|" colNum="
operator|+
name|colPos
operator|+
literal|" Reference data="
operator|+
name|referenceData
operator|+
literal|" actual="
operator|+
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|+
literal|"; types=("
operator|+
name|referenceData
operator|.
name|getClass
argument_list|()
operator|+
literal|","
operator|+
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|.
name|getClass
argument_list|()
operator|+
literal|") "
argument_list|,
name|referenceData
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|t
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|colPos
operator|++
expr_stmt|;
block|}
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|primitiveRows
operator|.
name|length
operator|+
literal|"; found "
operator|+
name|numTuplesRead
argument_list|,
name|numTuplesRead
operator|==
name|primitiveRows
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setupAllTypesTable
parameter_list|(
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|primitiveData
init|=
operator|new
name|String
index|[
name|primitiveRows
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|primitiveRows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|rowData
init|=
name|primitiveRows
index|[
name|i
index|]
decl_stmt|;
name|StringBuilder
name|row
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|cell
range|:
name|rowData
control|)
block|{
name|row
operator|.
name|append
argument_list|(
name|row
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|cell
operator|==
literal|null
condition|?
literal|null
else|:
name|cell
argument_list|)
expr_stmt|;
block|}
name|primitiveData
index|[
name|i
index|]
operator|=
name|row
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|ALL_TYPES_FILE_NAME
argument_list|,
name|primitiveData
argument_list|)
expr_stmt|;
name|String
name|cmd
init|=
literal|"create table "
operator|+
name|ALL_PRIMITIVE_TYPES_TABLE
operator|+
name|ALL_TYPES_SCHEMA
operator|+
literal|"ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'"
operator|+
literal|" STORED AS TEXTFILE"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
name|cmd
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|cmd
operator|=
literal|"load data local inpath '"
operator|+
name|HCatUtil
operator|.
name|makePathASafeFileName
argument_list|(
name|ALL_TYPES_FILE_NAME
argument_list|)
operator|+
literal|"' into table "
operator|+
name|ALL_PRIMITIVE_TYPES_TABLE
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
name|cmd
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

