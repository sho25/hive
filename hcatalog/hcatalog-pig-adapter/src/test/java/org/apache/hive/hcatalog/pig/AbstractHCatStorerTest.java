begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|EvalFunc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ExecType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|DataByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|FrontendException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHCatStorerTest
extends|extends
name|HCatBaseTest
block|{
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractHCatStorerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|INPUT_FILE_NAME
init|=
name|TEST_DATA_DIR
operator|+
literal|"/input.data"
decl_stmt|;
name|String
name|storageFormat
decl_stmt|;
specifier|public
name|AbstractHCatStorerTest
parameter_list|()
block|{
name|storageFormat
operator|=
name|getStorageFormat
argument_list|()
expr_stmt|;
block|}
comment|// Start: tests that check values from Pig that are out of range for target column
annotation|@
name|Test
specifier|public
name|void
name|testWriteTinyint
parameter_list|()
throws|throws
name|Exception
block|{
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"tinyint"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"tinyint"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"tinyint"
argument_list|,
literal|"int"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"tinyint"
argument_list|,
literal|"int"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteSmallint
parameter_list|()
throws|throws
name|Exception
block|{
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"smallint"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"smallint"
argument_list|,
literal|"int"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|Short
operator|.
name|MAX_VALUE
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"smallint"
argument_list|,
literal|"int"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|Short
operator|.
name|MAX_VALUE
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteChar
parameter_list|()
throws|throws
name|Exception
block|{
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"char(5)"
argument_list|,
literal|"chararray"
argument_list|,
literal|null
argument_list|,
literal|"xxx"
argument_list|,
literal|"xxx  "
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"char(5)"
argument_list|,
literal|"chararray"
argument_list|,
literal|null
argument_list|,
literal|"too_long"
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"char(5)"
argument_list|,
literal|"chararray"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
literal|"too_long"
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"char(5)"
argument_list|,
literal|"chararray"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
literal|"too_long2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteVarchar
parameter_list|()
throws|throws
name|Exception
block|{
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"varchar(5)"
argument_list|,
literal|"chararray"
argument_list|,
literal|null
argument_list|,
literal|"xxx"
argument_list|,
literal|"xxx"
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"varchar(5)"
argument_list|,
literal|"chararray"
argument_list|,
literal|null
argument_list|,
literal|"too_long"
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"varchar(5)"
argument_list|,
literal|"chararray"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
literal|"too_long"
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"varchar(5)"
argument_list|,
literal|"chararray"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
literal|"too_long2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteDecimalXY
parameter_list|()
throws|throws
name|Exception
block|{
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"decimal(5,2)"
argument_list|,
literal|"bigdecimal"
argument_list|,
literal|null
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1.2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1.2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"decimal(5,2)"
argument_list|,
literal|"bigdecimal"
argument_list|,
literal|null
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|12345.12
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"decimal(5,2)"
argument_list|,
literal|"bigdecimal"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|500.123
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"decimal(5,2)"
argument_list|,
literal|"bigdecimal"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|500.123
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteDecimalX
parameter_list|()
throws|throws
name|Exception
block|{
comment|// interestingly decimal(2) means decimal(2,0)
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"decimal(2)"
argument_list|,
literal|"bigdecimal"
argument_list|,
literal|null
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|12
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|12
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"decimal(2)"
argument_list|,
literal|"bigdecimal"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|50.123
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"decimal(2)"
argument_list|,
literal|"bigdecimal"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|50.123
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteDecimal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// decimal means decimal(10,0)
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"decimal"
argument_list|,
literal|"bigdecimal"
argument_list|,
literal|null
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1234567890
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1234567890
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"decimal"
argument_list|,
literal|"bigdecimal"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|12345678900L
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"decimal"
argument_list|,
literal|"bigdecimal"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|12345678900L
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * because we want to ignore TZ which is included in toString() include time to make sure it's 0    */
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT_4_DATE
init|=
literal|"yyyy-MM-dd HH:mm:ss"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testWriteDate
parameter_list|()
throws|throws
name|Exception
block|{
name|DateTime
name|d
init|=
operator|new
name|DateTime
argument_list|(
literal|1991
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
literal|null
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|.
name|toString
argument_list|(
name|FORMAT_4_DATE
argument_list|)
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|d
operator|.
name|plusHours
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
comment|// time
comment|// != 0
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|d
operator|.
name|plusMinutes
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
comment|// time
comment|// !=
comment|// 0
name|d
operator|=
operator|new
name|DateTime
argument_list|(
literal|1991
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
operator|-
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest4"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
literal|null
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|.
name|toString
argument_list|(
name|FORMAT_4_DATE
argument_list|)
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest5"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|d
operator|.
name|plusHours
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
comment|// date
comment|// out
comment|// of
comment|// range
comment|// due
comment|// to
comment|// time
comment|// != 0
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest6"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|d
operator|.
name|plusMinutes
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
comment|// date
comment|// out
comment|// of
comment|// range
comment|// due
comment|// to
comment|// time!=0
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteDate3
parameter_list|()
throws|throws
name|Exception
block|{
name|DateTime
name|d
init|=
operator|new
name|DateTime
argument_list|(
literal|1991
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|23
argument_list|,
literal|10
argument_list|,
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
operator|-
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|FrontendException
name|fe
init|=
literal|null
decl_stmt|;
comment|// expect to fail since the time component is not 0
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest4"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest5"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|d
operator|.
name|plusHours
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest6"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|d
operator|.
name|plusMinutes
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteDate2
parameter_list|()
throws|throws
name|Exception
block|{
name|DateTime
name|d
init|=
operator|new
name|DateTime
argument_list|(
literal|1991
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"US/Eastern"
argument_list|)
argument_list|)
decl_stmt|;
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
literal|null
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|.
name|toString
argument_list|(
name|FORMAT_4_DATE
argument_list|)
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|d
operator|.
name|plusHours
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|d
operator|.
name|plusMillis
argument_list|(
literal|20
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|d
operator|.
name|plusMillis
argument_list|(
literal|12
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
name|pigValueRangeTestOverflow
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"date"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Throw
argument_list|,
name|d
operator|.
name|plusMinutes
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|FORMAT_4_DATE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Note that the value that comes back from Hive will have local TZ on it. Using local is    * arbitrary but DateTime needs TZ (or will assume default) and Hive does not have TZ. So if you    * start with Pig value in TZ=x and write to Hive, when you read it back the TZ may be different.    * The millis value should match, of course.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|DateTime
name|d
init|=
operator|new
name|DateTime
argument_list|(
literal|1991
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|14
argument_list|,
literal|23
argument_list|,
literal|30
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// uses default TZ
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"timestamp"
argument_list|,
literal|"datetime"
argument_list|,
literal|null
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|=
name|d
operator|.
name|plusHours
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest2"
argument_list|,
literal|"timestamp"
argument_list|,
literal|"datetime"
argument_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
operator|.
name|Null
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|=
name|d
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"timestamp"
argument_list|,
literal|"datetime"
argument_list|,
literal|null
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|DateTime
argument_list|(
literal|1991
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|23
argument_list|,
literal|24
argument_list|,
literal|25
argument_list|,
literal|26
argument_list|)
expr_stmt|;
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest1"
argument_list|,
literal|"timestamp"
argument_list|,
literal|"datetime"
argument_list|,
literal|null
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|=
name|d
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|pigValueRangeTest
argument_list|(
literal|"junitTypeTest3"
argument_list|,
literal|"timestamp"
argument_list|,
literal|"datetime"
argument_list|,
literal|null
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// End: tests that check values from Pig that are out of range for target column
name|void
name|pigValueRangeTestOverflow
parameter_list|(
name|String
name|tblName
parameter_list|,
name|String
name|hiveType
parameter_list|,
name|String
name|pigType
parameter_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
name|goal
parameter_list|,
name|String
name|inputValue
parameter_list|,
name|String
name|format
parameter_list|)
throws|throws
name|Exception
block|{
name|pigValueRangeTest
argument_list|(
name|tblName
argument_list|,
name|hiveType
argument_list|,
name|pigType
argument_list|,
name|goal
argument_list|,
name|inputValue
argument_list|,
literal|null
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
name|void
name|pigValueRangeTestOverflow
parameter_list|(
name|String
name|tblName
parameter_list|,
name|String
name|hiveType
parameter_list|,
name|String
name|pigType
parameter_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
name|goal
parameter_list|,
name|String
name|inputValue
parameter_list|)
throws|throws
name|Exception
block|{
name|pigValueRangeTest
argument_list|(
name|tblName
argument_list|,
name|hiveType
argument_list|,
name|pigType
argument_list|,
name|goal
argument_list|,
name|inputValue
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|void
name|pigValueRangeTest
parameter_list|(
name|String
name|tblName
parameter_list|,
name|String
name|hiveType
parameter_list|,
name|String
name|pigType
parameter_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
name|goal
parameter_list|,
name|String
name|inputValue
parameter_list|,
name|String
name|expectedValue
parameter_list|)
throws|throws
name|Exception
block|{
name|pigValueRangeTest
argument_list|(
name|tblName
argument_list|,
name|hiveType
argument_list|,
name|pigType
argument_list|,
name|goal
argument_list|,
name|inputValue
argument_list|,
name|expectedValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is used to test how Pig values of various data types which are out of range for Hive    * target column are handled. Currently the options are to raise an error or write NULL. 1. create    * a data file with 1 column, 1 row 2. load into pig 3. use pig to store into Hive table 4. read    * from Hive table using Pig 5. check that read value is what is expected    *    * @param tblName Hive table name to create    * @param hiveType datatype to use for the single column in table    * @param pigType corresponding Pig type when loading file into Pig    * @param goal how out-of-range values from Pig are handled by HCat, may be {@code null}    * @param inputValue written to file which is read by Pig, thus must be something Pig can read    *          (e.g. DateTime.toString(), rather than java.sql.Date)    * @param expectedValue what Pig should see when reading Hive table    * @param format date format to use for comparison of values since default DateTime.toString()    *          includes TZ which is meaningless for Hive DATE type    */
name|void
name|pigValueRangeTest
parameter_list|(
name|String
name|tblName
parameter_list|,
name|String
name|hiveType
parameter_list|,
name|String
name|pigType
parameter_list|,
name|HCatBaseStorer
operator|.
name|OOR_VALUE_OPT_VALUES
name|goal
parameter_list|,
name|String
name|inputValue
parameter_list|,
name|String
name|expectedValue
parameter_list|,
name|String
name|format
parameter_list|)
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
specifier|final
name|String
name|field
init|=
literal|"f1"
decl_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
name|tblName
argument_list|,
name|field
operator|+
literal|" "
operator|+
name|hiveType
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
name|inputValue
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"File="
operator|+
name|INPUT_FILE_NAME
argument_list|)
expr_stmt|;
name|dumpFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|int
name|queryNumber
init|=
literal|1
decl_stmt|;
name|logAndRegister
argument_list|(
name|server
argument_list|,
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as ("
operator|+
name|field
operator|+
literal|":"
operator|+
name|pigType
operator|+
literal|");"
argument_list|,
name|queryNumber
operator|++
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|firstLoad
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
if|if
condition|(
name|goal
operator|==
literal|null
condition|)
block|{
name|logAndRegister
argument_list|(
name|server
argument_list|,
literal|"store A into '"
operator|+
name|tblName
operator|+
literal|"' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|,
name|queryNumber
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FrontendException
name|fe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|logAndRegister
argument_list|(
name|server
argument_list|,
literal|"store A into '"
operator|+
name|tblName
operator|+
literal|"' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('','','-"
operator|+
name|HCatStorer
operator|.
name|ON_OOR_VALUE_OPT
operator|+
literal|" "
operator|+
name|goal
operator|+
literal|"');"
argument_list|,
name|queryNumber
operator|++
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FrontendException
name|e
parameter_list|)
block|{
name|fe
operator|=
name|e
expr_stmt|;
block|}
switch|switch
condition|(
name|goal
condition|)
block|{
case|case
name|Null
case|:
comment|// do nothing, fall through and verify the data
break|break;
case|case
name|Throw
case|:
name|assertTrue
argument_list|(
literal|"Expected a FrontendException"
argument_list|,
name|fe
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected a different FrontendException."
argument_list|,
name|fe
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Unable to store alias A"
argument_list|)
expr_stmt|;
return|return;
comment|// this test is done
default|default:
name|assertFalse
argument_list|(
literal|"Unexpected goal: "
operator|+
name|goal
argument_list|,
literal|1
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|logAndRegister
argument_list|(
name|server
argument_list|,
literal|"B = load '"
operator|+
name|tblName
operator|+
literal|"' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|,
name|queryNumber
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"select * from "
operator|+
name|tblName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"cpr.respCode="
operator|+
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" cpr.errMsg="
operator|+
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|+
literal|" for table "
operator|+
name|tblName
argument_list|)
expr_stmt|;
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dumping rows via SQL from "
operator|+
name|tblName
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|t
range|:
name|l
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|t
operator|==
literal|null
condition|?
literal|null
else|:
name|t
operator|.
name|toString
argument_list|()
operator|+
literal|" t.class="
operator|+
name|t
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|itr
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|int
name|numRowsRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"date"
operator|.
name|equals
argument_list|(
name|hiveType
argument_list|)
condition|)
block|{
name|DateTime
name|dateTime
init|=
operator|(
name|DateTime
operator|)
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|format
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Comparing Pig to Raw data for table "
operator|+
name|tblName
argument_list|,
name|expectedValue
argument_list|,
name|dateTime
operator|==
literal|null
condition|?
literal|null
else|:
name|dateTime
operator|.
name|toString
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Comparing Pig to Raw data for table "
operator|+
name|tblName
argument_list|,
name|expectedValue
argument_list|,
name|t
operator|.
name|isNull
argument_list|(
literal|0
argument_list|)
condition|?
literal|null
else|:
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// see comment at "Dumping rows via SQL..." for why this doesn't work
comment|// assertEquals("Comparing Pig to Hive", t.get(0), l.get(0));
name|numRowsRead
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
literal|1
operator|+
literal|" rows; got "
operator|+
name|numRowsRead
operator|+
literal|" file="
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"; table "
operator|+
name|tblName
argument_list|,
literal|1
argument_list|,
name|numRowsRead
argument_list|)
expr_stmt|;
comment|/*      * Misc notes: Unfortunately Timestamp.toString() adjusts the value for local TZ and 't' is a      * String thus the timestamp in 't' doesn't match rawData      */
block|}
specifier|abstract
name|String
name|getStorageFormat
parameter_list|()
function_decl|;
comment|/**    * Create a data file with datatypes added in 0.13. Read it with Pig and use Pig + HCatStorer to    * write to a Hive table. Then read it using Pig and Hive and make sure results match.    */
annotation|@
name|Test
specifier|public
name|void
name|testDateCharTypes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tblName
init|=
literal|"junit_date_char"
decl_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
name|tblName
argument_list|,
literal|"id int, char5 char(5), varchar10 varchar(10), dec52 decimal(5,2)"
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|int
name|NUM_ROWS
init|=
literal|5
decl_stmt|;
name|String
index|[]
name|rows
init|=
operator|new
name|String
index|[
name|NUM_ROWS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ROWS
condition|;
name|i
operator|++
control|)
block|{
comment|// since the file is read by Pig, we need to make sure the values are in format that Pig
comment|// understands
comment|// otherwise it will turn the value to NULL on read
name|rows
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|"\txxxxx\tyyy\t"
operator|+
literal|5.2
expr_stmt|;
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"File="
operator|+
name|INPUT_FILE_NAME
argument_list|)
expr_stmt|;
comment|// dumpFile(INPUT_FILE_NAME);
name|PigServer
name|server
init|=
name|createPigServer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|int
name|queryNumber
init|=
literal|1
decl_stmt|;
name|logAndRegister
argument_list|(
name|server
argument_list|,
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (id:int, char5:chararray, varchar10:chararray, dec52:bigdecimal);"
argument_list|,
name|queryNumber
operator|++
argument_list|)
expr_stmt|;
name|logAndRegister
argument_list|(
name|server
argument_list|,
literal|"store A into '"
operator|+
name|tblName
operator|+
literal|"' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|,
name|queryNumber
operator|++
argument_list|)
expr_stmt|;
name|logAndRegister
argument_list|(
name|server
argument_list|,
literal|"B = load '"
operator|+
name|tblName
operator|+
literal|"' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|,
name|queryNumber
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"select * from "
operator|+
name|tblName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"cpr.respCode="
operator|+
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" cpr.errMsg="
operator|+
name|cpr
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dumping rows via SQL from "
operator|+
name|tblName
argument_list|)
expr_stmt|;
comment|/*      * Unfortunately Timestamp.toString() adjusts the value for local TZ and 't' is a String thus      * the timestamp in 't' doesn't match rawData      */
for|for
control|(
name|Object
name|t
range|:
name|l
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|t
operator|==
literal|null
condition|?
literal|null
else|:
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|itr
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|int
name|numRowsRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringBuilder
name|rowFromPig
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rowFromPig
operator|.
name|append
argument_list|(
name|t
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|rowFromPig
operator|.
name|setLength
argument_list|(
name|rowFromPig
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Comparing Pig to Raw data"
argument_list|,
name|rows
index|[
name|numRowsRead
index|]
argument_list|,
name|rowFromPig
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// see comment at "Dumping rows via SQL..." for why this doesn't work (for all types)
comment|// assertEquals("Comparing Pig to Hive", rowFromPig.toString(), l.get(numRowsRead));
name|numRowsRead
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|NUM_ROWS
operator|+
literal|" rows; got "
operator|+
name|numRowsRead
operator|+
literal|" file="
operator|+
name|INPUT_FILE_NAME
argument_list|,
name|NUM_ROWS
argument_list|,
name|numRowsRead
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|dumpFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dumping raw file: "
operator|+
name|fileName
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartColsInData
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted"
argument_list|,
literal|"a int"
argument_list|,
literal|"b string"
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|11
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|input
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|"\t1"
expr_stmt|;
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('b=1');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = load 'default.junit_unparted' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|itr
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LOOP_SIZE
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiPartColsInData
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"employee"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"employee"
argument_list|,
literal|"emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING"
argument_list|,
literal|"emp_country STRING , emp_state STRING"
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputData
init|=
block|{
literal|"111237\tKrishna\t01/01/1990\tM\tIN\tTN"
block|,
literal|"111238\tKalpana\t01/01/2000\tF\tIN\tKA"
block|,
literal|"111239\tSatya\t01/01/2001\tM\tIN\tKL"
block|,
literal|"111240\tKavya\t01/01/2002\tF\tIN\tAP"
block|}
decl_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|pig
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|pig
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"A = LOAD '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"
operator|+
literal|"emp_gender:chararray,emp_country:chararray,emp_state:chararray);"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"TN = FILTER A BY emp_state == 'TN';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"KA = FILTER A BY emp_state == 'KA';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"KL = FILTER A BY emp_state == 'KL';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"AP = FILTER A BY emp_state == 'AP';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE TN INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN,emp_state=TN');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE KA INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN,emp_state=KA');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE KL INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN,emp_state=KL');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE AP INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN,emp_state=AP');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from employee"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify the directories in table location
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"employee"
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|client
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"employee"
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"emp_country=IN"
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table employee"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreInPartiitonedTbl
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted"
argument_list|,
literal|"a int"
argument_list|,
literal|"b string"
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|11
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|input
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|""
expr_stmt|;
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('b=1');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = load 'default.junit_unparted' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|itr
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// verify the scratch directories has been cleaned up
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"junit_unparted"
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoAlias
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_parted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_parted"
argument_list|,
literal|"a int, b string"
argument_list|,
literal|"ds string"
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|boolean
name|errCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = foreach A generate a+10, b;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B into 'junit_parted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('ds=20100101');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PigException
name|fe
parameter_list|)
block|{
name|PigException
name|pe
init|=
name|LogUtils
operator|.
name|getPigException
argument_list|(
name|fe
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pe
operator|instanceof
name|FrontendException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|,
name|pe
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Column name for a field is not specified. Please provide the full schema as an argument to HCatStorer."
argument_list|)
argument_list|)
expr_stmt|;
name|errCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|errCaught
argument_list|)
expr_stmt|;
name|errCaught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, B:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = foreach A generate a, B;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B into 'junit_parted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('ds=20100101');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PigException
name|fe
parameter_list|)
block|{
name|PigException
name|pe
init|=
name|LogUtils
operator|.
name|getPigException
argument_list|(
name|fe
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pe
operator|instanceof
name|FrontendException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|,
name|pe
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Column names should all be in lowercase. Invalid name found: B"
argument_list|)
argument_list|)
expr_stmt|;
name|errCaught
operator|=
literal|true
expr_stmt|;
block|}
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_parted"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errCaught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreMultiTables
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted"
argument_list|,
literal|"a int, b string"
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted2"
argument_list|,
literal|"a int, b string"
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
literal|"RCFILE"
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|input
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = filter A by a< 2;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B into 'junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"C = filter A by a>= 2;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store C into 'junit_unparted2' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted2"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res2
argument_list|)
expr_stmt|;
name|res
operator|.
name|addAll
argument_list|(
name|res2
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted2"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreWithNoSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted"
argument_list|,
literal|"a int, b string"
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|input
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreWithNoCtorArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted"
argument_list|,
literal|"a int, b string"
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|input
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyStore
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted"
argument_list|,
literal|"a int, b string"
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|input
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = filter A by a> 100;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('','a:int,b:chararray');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBagNStruct
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted"
argument_list|,
literal|"b string,a struct<a1:int>,  arr_of_struct array<string>, "
operator|+
literal|"arr_of_struct2 array<struct<s1:string,s2:string>>,  arr_of_struct3 array<struct<s3:string>>"
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputData
init|=
operator|new
name|String
index|[]
block|{
literal|"zookeeper\t(2)\t{(pig)}\t{(pnuts,hdfs)}\t{(hadoop),(hcat)}"
block|,
literal|"chubby\t(2)\t{(sawzall)}\t{(bigtable,gfs)}\t{(mapreduce),(hcat)}"
block|}
decl_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (b:chararray, a:tuple(a1:int), arr_of_struct:bag{mytup:tuple(s1:chararray)}, arr_of_struct2:bag{mytup:tuple(s1:chararray,s2:chararray)}, arr_of_struct3:bag{t3:tuple(s3:chararray)});"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('','b:chararray, a:tuple(a1:int),"
operator|+
literal|" arr_of_struct:bag{mytup:tuple(s1:chararray)}, arr_of_struct2:bag{mytup:tuple(s1:chararray,s2:chararray)}, arr_of_struct3:bag{t3:tuple(s3:chararray)}');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"zookeeper\t{\"a1\":2}\t[\"pig\"]\t[{\"s1\":\"pnuts\",\"s2\":\"hdfs\"}]\t[{\"s3\":\"hadoop\"},{\"s3\":\"hcat\"}]"
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"chubby\t{\"a1\":2}\t[\"sawzall\"]\t[{\"s1\":\"bigtable\",\"s2\":\"gfs\"}]\t[{\"s3\":\"mapreduce\"},{\"s3\":\"hcat\"}]"
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreFuncAllSimpleTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted"
argument_list|,
literal|"a int, b float, c double, d bigint, e string, h boolean, f binary, g binary"
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|input
index|[
name|i
operator|++
index|]
operator|=
literal|"0\t\t\t\t\t\t\t"
expr_stmt|;
comment|// Empty values except first column
name|input
index|[
name|i
operator|++
index|]
operator|=
literal|"\t"
operator|+
name|i
operator|*
literal|2.1f
operator|+
literal|"\t"
operator|+
name|i
operator|*
literal|1.1d
operator|+
literal|"\t"
operator|+
name|i
operator|*
literal|2L
operator|+
literal|"\t"
operator|+
literal|"lets hcat"
operator|+
literal|"\t"
operator|+
literal|"true"
operator|+
literal|"\tbinary-data"
expr_stmt|;
comment|// First column empty
name|input
index|[
name|i
operator|++
index|]
operator|=
name|i
operator|+
literal|"\t"
operator|+
name|i
operator|*
literal|2.1f
operator|+
literal|"\t"
operator|+
name|i
operator|*
literal|1.1d
operator|+
literal|"\t"
operator|+
name|i
operator|*
literal|2L
operator|+
literal|"\t"
operator|+
literal|"lets hcat"
operator|+
literal|"\t"
operator|+
literal|"false"
operator|+
literal|"\tbinary-data"
expr_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, b:float, c:double, d:long, e:chararray, h:boolean, f:bytearray);"
argument_list|)
expr_stmt|;
comment|// null gets stored into column g which is a binary field.
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('','a:int, b:float, c:double, d:long, e:chararray, h:boolean, f:bytearray');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|next
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NULL\t4.2\t2.2\t4\tlets hcat\ttrue\tbinary-data\tNULL"
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3\t6.2999997\t3.3000000000000003\t6\tlets hcat\tfalse\tbinary-data\tNULL"
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = load 'junit_unparted' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|num5nulls
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|==
literal|null
condition|)
block|{
name|num5nulls
operator|++
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|instanceof
name|DataByteArray
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|num5nulls
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreFuncSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"junit_unparted"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"junit_unparted"
argument_list|,
literal|"a int, b string"
argument_list|,
literal|null
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|inputData
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|inputData
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('','a:int,b:chararray');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|si
operator|+
literal|"\t"
operator|+
name|j
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDynamicPartitioningMultiPartColsInDataPartialSpec
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"employee"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"employee"
argument_list|,
literal|"emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING"
argument_list|,
literal|"emp_country STRING , emp_state STRING"
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputData
init|=
block|{
literal|"111237\tKrishna\t01/01/1990\tM\tIN\tTN"
block|,
literal|"111238\tKalpana\t01/01/2000\tF\tIN\tKA"
block|,
literal|"111239\tSatya\t01/01/2001\tM\tIN\tKL"
block|,
literal|"111240\tKavya\t01/01/2002\tF\tIN\tAP"
block|}
decl_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|pig
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|pig
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"A = LOAD '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"
operator|+
literal|"emp_gender:chararray,emp_country:chararray,emp_state:chararray);"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"IN = FILTER A BY emp_country == 'IN';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE IN INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from employee"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table employee"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDynamicPartitioningMultiPartColsInDataNoSpec
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"employee"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"employee"
argument_list|,
literal|"emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING"
argument_list|,
literal|"emp_country STRING , emp_state STRING"
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputData
init|=
block|{
literal|"111237\tKrishna\t01/01/1990\tM\tIN\tTN"
block|,
literal|"111238\tKalpana\t01/01/2000\tF\tIN\tKA"
block|,
literal|"111239\tSatya\t01/01/2001\tM\tIN\tKL"
block|,
literal|"111240\tKavya\t01/01/2002\tF\tIN\tAP"
block|}
decl_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|pig
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|pig
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"A = LOAD '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"
operator|+
literal|"emp_gender:chararray,emp_country:chararray,emp_state:chararray);"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"IN = FILTER A BY emp_country == 'IN';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE IN INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from employee"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table employee"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDynamicPartitioningMultiPartColsNoDataInDataNoSpec
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"employee"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"employee"
argument_list|,
literal|"emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING"
argument_list|,
literal|"emp_country STRING , emp_state STRING"
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputData
init|=
block|{}
decl_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|pig
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|pig
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"A = LOAD '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"
operator|+
literal|"emp_gender:chararray,emp_country:chararray,emp_state:chararray);"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"IN = FILTER A BY emp_country == 'IN';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE IN INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from employee"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table employee"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionPublish
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractHCatLoaderTest
operator|.
name|dropTable
argument_list|(
literal|"ptn_fail"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|AbstractHCatLoaderTest
operator|.
name|createTable
argument_list|(
literal|"ptn_fail"
argument_list|,
literal|"a int, c string"
argument_list|,
literal|"b string"
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|11
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|input
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|"\tmath"
expr_stmt|;
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|INPUT_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|INPUT_FILE_NAME
operator|+
literal|"' as (a:int, c:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = filter A by "
operator|+
name|FailEvalFunc
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"($0);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B into 'ptn_fail' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('b=math');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"show partitions ptn_fail"
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error "
operator|+
name|retCode
operator|+
literal|" running query "
operator|+
name|query
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the partitions directory is not in hdfs.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/ptn_fail"
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/ptn_fail/b=math"
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|public
class|class
name|FailEvalFunc
extends|extends
name|EvalFunc
argument_list|<
name|Boolean
argument_list|>
block|{
comment|/*      * @param Tuple /* @return null /* @throws IOException      *      * @see org.apache.pig.EvalFunc#exec(org.apache.pig.data.Tuple)      */
annotation|@
name|Override
specifier|public
name|Boolean
name|exec
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Eval Func to mimic Failure."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

