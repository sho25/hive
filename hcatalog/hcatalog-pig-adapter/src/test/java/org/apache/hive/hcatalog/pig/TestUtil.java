begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Test utilities for selectively disabling specific test methods for given storage formats.  */
end_comment

begin_class
specifier|public
class|class
name|TestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|SAMPLE_DISABLED_TESTS_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"test"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"testShouldSkip"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Determine whether the caller test method is in a set of disabled test methods for a given    * storage format.    *    * @param storageFormat The name of the storage format used in a STORED AS clause.    * @param disabledTestsMap Map of storage format name to set of test method names that indicate    *        which test methods should not run against the given storage format.    * @return True if the caller test method should be skipped for the given storage format.    */
specifier|public
specifier|static
name|boolean
name|shouldSkip
parameter_list|(
name|String
name|storageFormat
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|disabledTestsMap
parameter_list|)
block|{
specifier|final
name|StackTraceElement
index|[]
name|elements
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
comment|// The "bottom" of the call stack is at the front of the array. The elements are as follows:
comment|//   [0] getStackTrace()
comment|//   [1] shouldSkip()
comment|//   [2] caller test method
name|String
name|methodName
init|=
name|elements
index|[
literal|2
index|]
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|disabledTestsMap
operator|.
name|containsKey
argument_list|(
name|storageFormat
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|disabledMethods
init|=
name|disabledTestsMap
operator|.
name|get
argument_list|(
name|storageFormat
argument_list|)
decl_stmt|;
return|return
name|disabledMethods
operator|.
name|contains
argument_list|(
name|methodName
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShouldSkip
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|TestUtil
operator|.
name|shouldSkip
argument_list|(
literal|"test"
argument_list|,
name|SAMPLE_DISABLED_TESTS_MAP
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShouldNotSkip
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|TestUtil
operator|.
name|shouldSkip
argument_list|(
literal|"test"
argument_list|,
name|SAMPLE_DISABLED_TESTS_MAP
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TestUtil
operator|.
name|shouldSkip
argument_list|(
literal|"foo"
argument_list|,
name|SAMPLE_DISABLED_TESTS_MAP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

