begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|StorageFormats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|HiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ExecType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHCatLoaderEncryption
block|{
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|salt
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHCatLoaderEncryption
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|TEST_DATA_DIR
init|=
name|HCatUtil
operator|.
name|makePathASafeFileName
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestHCatLoaderEncryption
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
operator|+
name|salt
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|TEST_WAREHOUSE_DIR
init|=
name|TEST_DATA_DIR
operator|+
literal|"/warehouse"
decl_stmt|;
specifier|private
specifier|final
name|String
name|BASIC_FILE_NAME
init|=
name|TEST_DATA_DIR
operator|+
literal|"/basic.input.data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BASIC_TABLE
init|=
literal|"junit_unparted_basic"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENCRYPTED_TABLE
init|=
literal|"encrypted_table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SECURITY_KEY_PROVIDER_URI_NAME
init|=
literal|"dfs.encryption.key.provider.uri"
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|MiniDFSShim
name|dfs
init|=
literal|null
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|hes
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|testOnlyCommands
init|=
operator|new
name|String
index|[]
block|{
literal|"crypto"
block|}
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|basicInputData
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|HCatRecord
argument_list|>
name|readRecords
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|DISABLED_STORAGE_FORMATS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|storageFormat
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|generateParameters
parameter_list|()
block|{
return|return
name|StorageFormats
operator|.
name|names
argument_list|()
return|;
block|}
specifier|public
name|TestHCatLoaderEncryption
parameter_list|(
name|String
name|storageFormat
parameter_list|)
block|{
name|this
operator|.
name|storageFormat
operator|=
name|storageFormat
expr_stmt|;
block|}
specifier|private
name|void
name|dropTable
parameter_list|(
name|String
name|tablename
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|dropTable
argument_list|(
name|tablename
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|dropTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|Driver
name|driver
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|tablename
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|partitionedBy
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|createTable
argument_list|(
name|tablename
argument_list|,
name|schema
argument_list|,
name|partitionedBy
argument_list|,
name|driver
argument_list|,
name|storageFormat
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|createTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|partitionedBy
parameter_list|,
name|Driver
name|driver
parameter_list|,
name|String
name|storageFormat
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|String
name|createTable
decl_stmt|;
name|createTable
operator|=
literal|"create table "
operator|+
name|tablename
operator|+
literal|"("
operator|+
name|schema
operator|+
literal|") "
expr_stmt|;
if|if
condition|(
operator|(
name|partitionedBy
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|partitionedBy
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|createTable
operator|=
name|createTable
operator|+
literal|"partitioned by ("
operator|+
name|partitionedBy
operator|+
literal|") "
expr_stmt|;
block|}
name|createTable
operator|=
name|createTable
operator|+
literal|"stored as "
operator|+
name|storageFormat
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
name|createTable
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|createTable
argument_list|(
name|tablename
argument_list|,
name|schema
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute Hive CLI statement    * @param cmd arbitrary statement to execute    */
specifier|static
name|void
name|executeStatementOnDriver
parameter_list|(
name|String
name|cmd
parameter_list|,
name|Driver
name|driver
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to execute \""
operator|+
name|cmd
operator|+
literal|"\". Driver returned "
operator|+
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" Error: "
operator|+
name|cpr
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create "
operator|+
name|TEST_WAREHOUSE_DIR
argument_list|)
throw|;
block|}
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|TEST_WAREHOUSE_DIR
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|hiveConf
operator|.
name|get
argument_list|(
literal|"hdfs.minidfs.basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|//return System.getProperty("test.build.data", "build/test/data") + "/dfs/";
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hdfs.minidfs.basedir"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
operator|+
name|salt
operator|.
name|getAndIncrement
argument_list|()
operator|+
literal|"/dfs/"
argument_list|)
expr_stmt|;
block|}
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|initEncryptionShim
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
name|encryptedTablePath
init|=
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/encryptedTable"
decl_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|out
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|createTable
argument_list|(
name|BASIC_TABLE
argument_list|,
literal|"a int, b string"
argument_list|)
expr_stmt|;
name|createTableInSpecifiedPath
argument_list|(
name|ENCRYPTED_TABLE
argument_list|,
literal|"a int, b string"
argument_list|,
name|encryptedTablePath
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|associateEncryptionZoneWithPath
argument_list|(
name|encryptedTablePath
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|basicInputData
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|String
name|sj
init|=
literal|"S"
operator|+
name|j
operator|+
literal|"S"
decl_stmt|;
name|input
index|[
name|k
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|sj
expr_stmt|;
name|basicInputData
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
name|i
argument_list|,
name|sj
argument_list|)
argument_list|)
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|BASIC_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|BASIC_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into '"
operator|+
name|ENCRYPTED_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatStorer();"
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
name|void
name|initEncryptionShim
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
decl_stmt|;
name|HadoopShims
name|shims
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SECURITY_KEY_PROVIDER_URI_NAME
argument_list|,
name|getKeyProviderURI
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numberOfDataNodes
init|=
literal|4
decl_stmt|;
name|dfs
operator|=
name|shims
operator|.
name|getMiniDfs
argument_list|(
name|conf
argument_list|,
name|numberOfDataNodes
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// set up a java key provider for encrypted hdfs cluster
name|hes
operator|=
name|shims
operator|.
name|createHdfsEncryptionShim
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|ensurePathEndsInSlash
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Path cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
return|return
name|path
return|;
block|}
else|else
block|{
return|return
name|path
operator|+
name|File
operator|.
name|separator
return|;
block|}
block|}
specifier|private
name|void
name|associateEncryptionZoneWithPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SQLException
throws|,
name|CommandNeedRetryException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|storageFormat
operator|+
literal|": associateEncryptionZoneWithPath"
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
operator|!
name|TestUtil
operator|.
name|shouldSkip
argument_list|(
name|storageFormat
argument_list|,
name|DISABLED_STORAGE_FORMATS
argument_list|)
argument_list|)
expr_stmt|;
name|enableTestOnlyCmd
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessor
name|crypto
init|=
name|getTestCommand
argument_list|(
literal|"crypto"
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
return|return;
name|checkExecutionResponse
argument_list|(
name|crypto
operator|.
name|run
argument_list|(
literal|"CREATE_KEY --keyName key_128 --bitLength 128"
argument_list|)
argument_list|)
expr_stmt|;
name|checkExecutionResponse
argument_list|(
name|crypto
operator|.
name|run
argument_list|(
literal|"CREATE_ZONE --keyName key_128 --path "
operator|+
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkExecutionResponse
parameter_list|(
name|CommandProcessorResponse
name|response
parameter_list|)
block|{
name|int
name|rc
init|=
name|response
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|out
operator|.
name|println
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Crypto command failed with the exit code"
operator|+
name|rc
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeEncryptionZone
parameter_list|()
throws|throws
name|SQLException
throws|,
name|CommandNeedRetryException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|storageFormat
operator|+
literal|": removeEncryptionZone"
argument_list|)
expr_stmt|;
name|enableTestOnlyCmd
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessor
name|crypto
init|=
name|getTestCommand
argument_list|(
literal|"crypto"
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|checkExecutionResponse
argument_list|(
name|crypto
operator|.
name|run
argument_list|(
literal|"DELETE_KEY --keyName key_128"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CommandProcessor
name|getTestCommand
parameter_list|(
specifier|final
name|String
name|commandName
parameter_list|)
throws|throws
name|SQLException
block|{
name|HiveCommand
name|testCommand
init|=
name|HiveCommand
operator|.
name|find
argument_list|(
operator|new
name|String
index|[]
block|{
name|commandName
block|}
argument_list|,
name|HiveCommand
operator|.
name|ONLY_FOR_TESTING
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCommand
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|CommandProcessorFactory
operator|.
name|getForHiveCommandInternal
argument_list|(
operator|new
name|String
index|[]
block|{
name|commandName
block|}
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|testCommand
operator|.
name|isOnlyForTesting
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|enableTestOnlyCmd
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|StringBuilder
name|securityCMDs
init|=
operator|new
name|StringBuilder
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SECURITY_COMMAND_WHITELIST
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|testOnlyCommands
control|)
block|{
name|securityCMDs
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|securityCMDs
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SECURITY_COMMAND_WHITELIST
operator|.
name|toString
argument_list|()
argument_list|,
name|securityCMDs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getKeyProviderURI
parameter_list|()
block|{
comment|// Use the target directory if it is not specified
name|String
name|HIVE_ROOT
init|=
name|ensurePathEndsInSlash
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hive.root"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|keyDir
init|=
name|HIVE_ROOT
operator|+
literal|"ql/target/"
decl_stmt|;
comment|// put the jks file in the current test path only for test purpose
return|return
literal|"jceks://file"
operator|+
operator|new
name|Path
argument_list|(
name|keyDir
argument_list|,
literal|"test.jks"
argument_list|)
operator|.
name|toUri
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDataFromEncryptedHiveTableByPig
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
operator|!
name|TestUtil
operator|.
name|shouldSkip
argument_list|(
name|storageFormat
argument_list|,
name|DISABLED_STORAGE_FORMATS
argument_list|)
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"X = load '"
operator|+
name|ENCRYPTED_TABLE
operator|+
literal|"' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|XIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|int
name|numTuplesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|XIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|XIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"failed with storage format: "
operator|+
name|this
operator|.
name|storageFormat
argument_list|,
name|basicInputData
operator|.
name|size
argument_list|()
argument_list|,
name|numTuplesRead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDataFromEncryptedHiveTableByHCatMR
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
operator|!
name|TestUtil
operator|.
name|shouldSkip
argument_list|(
name|storageFormat
argument_list|,
name|DISABLED_STORAGE_FORMATS
argument_list|)
argument_list|)
expr_stmt|;
name|readRecords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
literal|"hcat mapreduce read encryption test"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|TestHCatLoaderEncryption
operator|.
name|MapRead
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// input/output settings
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|HCatInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|HCatInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|ENCRYPTED_TABLE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
operator|new
name|LocalFileSystem
argument_list|()
decl_stmt|;
name|String
name|pathLoc
init|=
name|TEST_DATA_DIR
operator|+
literal|"/testHCatMREncryptionOutput"
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathLoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|pathLoc
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|numTuplesRead
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HCatRecord
name|hCatRecord
range|:
name|readRecords
control|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hCatRecord
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|hCatRecord
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|hCatRecord
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hCatRecord
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hCatRecord
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hCatRecord
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hCatRecord
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"failed HCat MR read with storage format: "
operator|+
name|this
operator|.
name|storageFormat
argument_list|,
name|basicInputData
operator|.
name|size
argument_list|()
argument_list|,
name|numTuplesRead
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MapRead
extends|extends
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|HCatRecord
argument_list|,
name|BytesWritable
argument_list|,
name|Text
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|HCatRecord
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|readRecords
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error when read record."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|dropTable
argument_list|(
name|BASIC_TABLE
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|ENCRYPTED_TABLE
argument_list|)
expr_stmt|;
name|removeEncryptionZone
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|createTableInSpecifiedPath
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|path
parameter_list|,
name|Driver
name|driver
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|String
name|createTableStr
decl_stmt|;
name|createTableStr
operator|=
literal|"create table "
operator|+
name|tableName
operator|+
literal|"("
operator|+
name|schema
operator|+
literal|") location \'"
operator|+
name|path
operator|+
literal|"\'"
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
name|createTableStr
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

