begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|LoadFunc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|backend
operator|.
name|hadoop
operator|.
name|executionengine
operator|.
name|mapReduceLayer
operator|.
name|PigSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_comment
comment|/**  * @deprecated Use/modify {@link org.apache.hive.hcatalog.pig.MockLoader} instead  */
end_comment

begin_class
specifier|public
class|class
name|MockLoader
extends|extends
name|LoadFunc
block|{
specifier|private
specifier|static
specifier|final
class|class
name|MockRecordReader
extends|extends
name|RecordReader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|Object
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|"mockKey"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|"mockValue"
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|0.5f
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|arg1
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MockInputSplit
extends|extends
name|InputSplit
implements|implements
name|Writable
block|{
specifier|private
name|String
name|location
decl_stmt|;
specifier|public
name|MockInputSplit
parameter_list|()
block|{     }
specifier|public
name|MockInputSplit
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|String
index|[]
block|{
name|location
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|10000000
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|arg0
parameter_list|)
block|{
return|return
name|arg0
operator|==
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|location
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
name|location
operator|=
name|arg0
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
name|arg0
operator|.
name|writeUTF
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MockInputFormat
extends|extends
name|InputFormat
block|{
specifier|private
specifier|final
name|String
name|location
decl_stmt|;
specifier|public
name|MockInputFormat
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|createRecordReader
parameter_list|(
name|InputSplit
name|arg0
parameter_list|,
name|TaskAttemptContext
name|arg1
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|MockRecordReader
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
name|getSplits
parameter_list|(
name|JobContext
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|MockInputSplit
argument_list|(
name|location
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Iterable
argument_list|<
name|Tuple
argument_list|>
argument_list|>
name|locationToData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Iterable
argument_list|<
name|Tuple
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|setData
parameter_list|(
name|String
name|location
parameter_list|,
name|Iterable
argument_list|<
name|Tuple
argument_list|>
name|data
parameter_list|)
block|{
name|locationToData
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|location
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|data
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|relativeToAbsolutePath
parameter_list|(
name|String
name|location
parameter_list|,
name|Path
name|curDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|location
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"null location passed to MockLoader"
argument_list|)
throw|;
block|}
name|this
operator|.
name|data
operator|=
name|locationToData
operator|.
name|get
argument_list|(
name|location
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No data configured for location: "
operator|+
name|location
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Tuple
name|getNext
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"data was not correctly initialized in MockLoader"
argument_list|)
throw|;
block|}
return|return
name|data
operator|.
name|hasNext
argument_list|()
condition|?
name|data
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputFormat
name|getInputFormat
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MockInputFormat
argument_list|(
name|location
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepareToRead
parameter_list|(
name|RecordReader
name|arg0
parameter_list|,
name|PigSplit
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{   }
block|}
end_class

end_unit

