begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ExecType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ResourceStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|schema
operator|.
name|Schema
operator|.
name|FieldSchema
import|;
end_import

begin_class
specifier|public
class|class
name|TestHCatLoader
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/build/test/data/"
operator|+
name|TestHCatLoader
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_WAREHOUSE_DIR
init|=
name|TEST_DATA_DIR
operator|+
literal|"/warehouse"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BASIC_FILE_NAME
init|=
name|TEST_DATA_DIR
operator|+
literal|"/basic.input.data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMPLEX_FILE_NAME
init|=
name|TEST_DATA_DIR
operator|+
literal|"/complex.input.data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BASIC_TABLE
init|=
literal|"junit_unparted_basic"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMPLEX_TABLE
init|=
literal|"junit_unparted_complex"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARTITIONED_TABLE
init|=
literal|"junit_parted_basic"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPECIFIC_SIZE_TABLE
init|=
literal|"junit_specific_size"
decl_stmt|;
specifier|private
specifier|static
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|static
name|int
name|guardTestCount
init|=
literal|6
decl_stmt|;
comment|// ugh, instantiate using introspection in guardedSetupBeforeClass
specifier|private
specifier|static
name|boolean
name|setupHasRun
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|basicInputData
decl_stmt|;
specifier|protected
name|String
name|storageFormat
parameter_list|()
block|{
return|return
literal|"RCFILE tblproperties('hcat.isd'='org.apache.hcatalog.rcfile.RCFileInputDriver',"
operator|+
literal|"'hcat.osd'='org.apache.hcatalog.rcfile.RCFileOutputDriver')"
return|;
block|}
specifier|private
name|void
name|dropTable
parameter_list|(
name|String
name|tablename
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table "
operator|+
name|tablename
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|partitionedBy
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|String
name|createTable
decl_stmt|;
name|createTable
operator|=
literal|"create table "
operator|+
name|tablename
operator|+
literal|"("
operator|+
name|schema
operator|+
literal|") "
expr_stmt|;
if|if
condition|(
operator|(
name|partitionedBy
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|partitionedBy
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|createTable
operator|=
name|createTable
operator|+
literal|"partitioned by ("
operator|+
name|partitionedBy
operator|+
literal|") "
expr_stmt|;
block|}
name|createTable
operator|=
name|createTable
operator|+
literal|"stored as "
operator|+
name|storageFormat
argument_list|()
expr_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table. ["
operator|+
name|createTable
operator|+
literal|"], return code from hive driver : ["
operator|+
name|retCode
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|String
name|tablename
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|createTable
argument_list|(
name|tablename
argument_list|,
name|schema
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|guardedSetUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|setupHasRun
condition|)
block|{
name|setupHasRun
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|TEST_WAREHOUSE_DIR
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
name|BASIC_TABLE
argument_list|,
literal|"a int, b string"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|COMPLEX_TABLE
argument_list|,
literal|"name string, studentid int, "
operator|+
literal|"contact struct<phno:string,email:string>, "
operator|+
literal|"currently_registered_courses array<string>, "
operator|+
literal|"current_grades map<string,string>, "
operator|+
literal|"phnos array<struct<phno:string,type:string>>"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|PARTITIONED_TABLE
argument_list|,
literal|"a int, b string"
argument_list|,
literal|"bkt string"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|SPECIFIC_SIZE_TABLE
argument_list|,
literal|"a int, b string"
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|basicInputData
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|String
name|sj
init|=
literal|"S"
operator|+
name|j
operator|+
literal|"S"
decl_stmt|;
name|input
index|[
name|k
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|sj
expr_stmt|;
name|basicInputData
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
name|i
argument_list|,
name|sj
argument_list|)
argument_list|)
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|BASIC_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|COMPLEX_FILE_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
comment|//"Henry Jekyll\t42\t(415-253-6367,hjekyll@contemporary.edu.uk)\t{(PHARMACOLOGY),(PSYCHIATRY)},[PHARMACOLOGY#A-,PSYCHIATRY#B+],{(415-253-6367,cell),(408-253-6367,landline)}",
comment|//"Edward Hyde\t1337\t(415-253-6367,anonymous@b44chan.org)\t{(CREATIVE_WRITING),(COPYRIGHT_LAW)},[CREATIVE_WRITING#A+,COPYRIGHT_LAW#D],{(415-253-6367,cell),(408-253-6367,landline)}",
block|}
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|BASIC_FILE_NAME
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into '"
operator|+
name|BASIC_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatStorer();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into '"
operator|+
name|SPECIFIC_SIZE_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatStorer();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = foreach A generate a,b;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B2 = filter B by a< 2;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B2 into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatStorer('bkt=0');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"C = foreach A generate a,b;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"C2 = filter C by a>= 2;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store C2 into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatStorer('bkt=1');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"D = load '"
operator|+
name|COMPLEX_FILE_NAME
operator|+
literal|"' as (name:chararray, studentid:int, contact:tuple(phno:chararray,email:chararray), currently_registered_courses:bag{innertup:tuple(course:chararray)}, current_grades:map[ ] , phnos :bag{innertup:tuple(phno:chararray,type:chararray)});"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store D into '"
operator|+
name|COMPLEX_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatStorer();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|dropTable
argument_list|(
name|BASIC_TABLE
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|COMPLEX_TABLE
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|PARTITIONED_TABLE
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
name|SPECIFIC_SIZE_TABLE
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|guardedTearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|guardTestCount
operator|--
expr_stmt|;
if|if
condition|(
name|guardTestCount
operator|>
literal|0
condition|)
block|{
return|return;
block|}
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|guardedSetUpBeforeClass
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|guardedTearDownAfterClass
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testSchemaLoadBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
comment|// test that schema was loaded correctly
name|server
operator|.
name|registerQuery
argument_list|(
literal|"X = load '"
operator|+
name|BASIC_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedXSchema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Xfields
init|=
name|dumpedXSchema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Xfields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Xfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadDataBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"X = load '"
operator|+
name|BASIC_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|XIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|int
name|numTuplesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|XIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|XIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|basicInputData
operator|.
name|size
argument_list|()
argument_list|,
name|numTuplesRead
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSchemaLoadComplex
parameter_list|()
throws|throws
name|IOException
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
comment|// test that schema was loaded correctly
name|server
operator|.
name|registerQuery
argument_list|(
literal|"K = load '"
operator|+
name|COMPLEX_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedKSchema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"K"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Kfields
init|=
name|dumpedKSchema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|Kfields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|INTEGER
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"studentid"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|TUPLE
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"contact"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"phno"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"email"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|DataType
operator|.
name|BAG
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"currently_registered_courses"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|TUPLE
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
comment|// assertEquals("course",Kfields.get(3).schema.getFields().get(0).schema.getFields().get(0).alias.toLowerCase());
comment|// commented out, because the name becomes "innerfield" by default - we call it "course" in pig,
comment|// but in the metadata, it'd be anonymous, so this would be autogenerated, which is fine
block|}
name|assertEquals
argument_list|(
name|DataType
operator|.
name|MAP
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"current_grades"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|BAG
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"phnos"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|TUPLE
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"phno"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|Kfields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadPartitionedBasic
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from "
operator|+
name|PARTITIONED_TABLE
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|valuesReadFromHiveDriver
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|basicInputData
operator|.
name|size
argument_list|()
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"W = load '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedWSchema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"W"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Wfields
init|=
name|dumpedWSchema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Wfields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|alias
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"bkt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wfields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|type
operator|==
name|DataType
operator|.
name|CHARARRAY
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|WIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"W"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|valuesRead
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|WIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|WIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|valuesRead
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
operator|(
name|Integer
operator|)
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|Integer
operator|)
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|<
literal|2
condition|)
block|{
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|,
name|valuesRead
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"P1 = load '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"P1filter = filter P1 by bkt == '0';"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|P1Iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"P1filter"
argument_list|)
decl_stmt|;
name|int
name|count1
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|P1Iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|P1Iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|count1
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count1
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"P2 = load '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"P2filter = filter P2 by bkt == '1';"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|P2Iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"P2filter"
argument_list|)
decl_stmt|;
name|int
name|count2
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|P2Iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|P2Iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|>
literal|1
argument_list|)
expr_stmt|;
name|count2
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|count2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testProjectionsBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
comment|// projections are handled by using generate, not "as" on the Load
name|server
operator|.
name|registerQuery
argument_list|(
literal|"Y1 = load '"
operator|+
name|BASIC_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"Y2 = foreach Y1 generate a;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"Y3 = foreach Y1 generate b,a;"
argument_list|)
expr_stmt|;
name|Schema
name|dumpedY2Schema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"Y2"
argument_list|)
decl_stmt|;
name|Schema
name|dumpedY3Schema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"Y3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Y2fields
init|=
name|dumpedY2Schema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|Y3fields
init|=
name|dumpedY3Schema
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Y2fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|Y2fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|INTEGER
argument_list|,
name|Y2fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Y3fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|Y3fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|Y3fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|Y3fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|INTEGER
argument_list|,
name|Y3fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|int
name|numTuplesRead
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|Y2Iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"Y2"
argument_list|)
decl_stmt|;
while|while
condition|(
name|Y2Iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|Y2Iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|numTuplesRead
operator|=
literal|0
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|Y3Iter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"Y3"
argument_list|)
decl_stmt|;
while|while
condition|(
name|Y3Iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|Y3Iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|basicInputData
operator|.
name|get
argument_list|(
name|numTuplesRead
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|numTuplesRead
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|basicInputData
operator|.
name|size
argument_list|()
argument_list|,
name|numTuplesRead
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetInputBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
name|SPECIFIC_SIZE_TABLE
operator|+
literal|"/part-m-00000"
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|RandomAccessFile
name|randomAccessFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|randomAccessFile
operator|.
name|setLength
argument_list|(
literal|2L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|()
decl_stmt|;
name|HCatLoader
name|hCatLoader
init|=
operator|new
name|HCatLoader
argument_list|()
decl_stmt|;
name|hCatLoader
operator|.
name|setUDFContextSignature
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hCatLoader
operator|.
name|setLocation
argument_list|(
name|SPECIFIC_SIZE_TABLE
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|ResourceStatistics
name|statistics
init|=
name|hCatLoader
operator|.
name|getStatistics
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
operator|(
name|long
operator|)
name|statistics
operator|.
name|getmBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConvertBooleanToInt
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tbl
init|=
literal|"test_convert_boolean_to_int"
decl_stmt|;
name|String
name|inputFileName
init|=
name|TEST_DATA_DIR
operator|+
literal|"/testConvertBooleanToInt/data.txt"
decl_stmt|;
name|File
name|inputDataDir
init|=
operator|new
name|File
argument_list|(
name|inputFileName
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|inputDataDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|String
index|[]
name|lines
init|=
operator|new
name|String
index|[]
block|{
literal|"llama\ttrue"
block|,
literal|"alpaca\tfalse"
block|}
decl_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|inputFileName
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|tbl
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|run
argument_list|(
literal|"create external table "
operator|+
name|tbl
operator|+
literal|" (a string, b boolean) row format delimited fields terminated by '\t'"
operator|+
literal|" stored as textfile location 'file://"
operator|+
name|inputDataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_DATA_CONVERT_BOOLEAN_TO_INTEGER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"data = load 'test_convert_boolean_to_int' using org.apache.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|schema
init|=
name|server
operator|.
name|dumpSchema
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
operator|.
name|alias
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|PigHCatUtil
operator|.
name|pigHasBooleanSupport
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|DataType
operator|.
name|BOOLEAN
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|DataType
operator|.
name|INTEGER
argument_list|,
name|schema
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|iterator
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|Tuple
name|t
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"llama"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alpaca"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

