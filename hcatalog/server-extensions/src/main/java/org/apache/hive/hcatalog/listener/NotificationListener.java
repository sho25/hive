begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|listener
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IHMSHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|LoadPartitionDoneEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|messaging
operator|.
name|HCatEventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|messaging
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of  * {@link org.apache.hadoop.hive.metastore.MetaStoreEventListener} It sends  * message on two type of topics. One has name of form dbName.tblName On this  * topic, two kind of messages are sent: add/drop partition and  * finalize_partition message. Second topic has name "HCAT" and messages sent on  * it are: add/drop database and add/drop table. All messages also has a  * property named "HCAT_EVENT" set on them whose value can be used to configure  * message selector on subscriber side.  */
end_comment

begin_class
specifier|public
class|class
name|NotificationListener
extends|extends
name|MetaStoreEventListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NotificationListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Connection
name|conn
decl_stmt|;
specifier|private
specifier|static
name|MessageFactory
name|messageFactory
init|=
name|MessageFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NUM_RETRIES
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEALTH_CHECK_TOPIC_SUFFIX
init|=
literal|"jms_health_check"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEALTH_CHECK_MSG
init|=
literal|"HCAT_JMS_HEALTH_CHECK_MESSAGE"
decl_stmt|;
specifier|protected
specifier|final
name|ThreadLocal
argument_list|<
name|Session
argument_list|>
name|session
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Session
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Session
name|initialValue
parameter_list|()
block|{
try|try
block|{
return|return
name|createSession
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't create JMS Session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|get
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to close bad JMS session, ignored error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Create message bus connection and session in constructor.    */
specifier|public
name|NotificationListener
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testAndCreateConnection
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getTopicName
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAddPartition
parameter_list|(
name|AddPartitionEvent
name|partitionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification of newly add partition in a
comment|// particular table by listening on a topic named "dbName.tableName"
comment|// and message selector string as "HCAT_EVENT = HCAT_ADD_PARTITION"
if|if
condition|(
name|partitionEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|Table
name|table
init|=
name|partitionEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|String
name|topicName
init|=
name|getTopicName
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|topicName
operator|!=
literal|null
operator|&&
operator|!
name|topicName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|send
argument_list|(
name|messageFactory
operator|.
name|buildAddPartitionMessage
argument_list|(
name|table
argument_list|,
name|partitionEvent
operator|.
name|getPartitionIterator
argument_list|()
argument_list|)
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Topic name not found in metastore. Suppressing HCatalog notification for "
operator|+
name|partitionEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|partitionEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|" To enable notifications for this table, please do alter table set properties ("
operator|+
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
operator|+
literal|"=<dbname>.<tablename>) or whatever you want topic name to be."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterPartition
parameter_list|(
name|AlterPartitionEvent
name|ape
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|ape
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|Partition
name|before
init|=
name|ape
operator|.
name|getOldPartition
argument_list|()
decl_stmt|;
name|Partition
name|after
init|=
name|ape
operator|.
name|getNewPartition
argument_list|()
decl_stmt|;
name|String
name|topicName
init|=
name|getTopicName
argument_list|(
name|ape
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|send
argument_list|(
name|messageFactory
operator|.
name|buildAlterPartitionMessage
argument_list|(
name|ape
operator|.
name|getTable
argument_list|()
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Send dropped partition notifications. Subscribers can receive these notifications for a    * particular table by listening on a topic named "dbName.tableName" with message selector    * string {@value org.apache.hive.hcatalog.common.HCatConstants#HCAT_EVENT} =    * {@value org.apache.hive.hcatalog.common.HCatConstants#HCAT_DROP_PARTITION_EVENT}.    *</br>    * TODO: DataNucleus 2.0.3, currently used by the HiveMetaStore for persistence, has been    * found to throw NPE when serializing objects that contain null. For this reason we override    * some fields in the StorageDescriptor of this notification. This should be fixed after    * HIVE-2084 "Upgrade datanucleus from 2.0.3 to 3.0.1" is resolved.    */
annotation|@
name|Override
specifier|public
name|void
name|onDropPartition
parameter_list|(
name|DropPartitionEvent
name|partitionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|partitionEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|String
name|topicName
init|=
name|getTopicName
argument_list|(
name|partitionEvent
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|topicName
operator|!=
literal|null
operator|&&
operator|!
name|topicName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|send
argument_list|(
name|messageFactory
operator|.
name|buildDropPartitionMessage
argument_list|(
name|partitionEvent
operator|.
name|getTable
argument_list|()
argument_list|,
name|partitionEvent
operator|.
name|getPartitionIterator
argument_list|()
argument_list|)
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Topic name not found in metastore. Suppressing HCatalog notification for "
operator|+
name|partitionEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|partitionEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|" To enable notifications for this table, please do alter table set properties ("
operator|+
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
operator|+
literal|"=<dbname>.<tablename>) or whatever you want topic name to be."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateDatabase
parameter_list|(
name|CreateDatabaseEvent
name|dbEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification about addition of a database in HCAT
comment|// by listening on a topic named "HCAT" and message selector string
comment|// as "HCAT_EVENT = HCAT_ADD_DATABASE"
if|if
condition|(
name|dbEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|String
name|topicName
init|=
name|getTopicPrefix
argument_list|(
name|dbEvent
operator|.
name|getIHMSHandler
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|send
argument_list|(
name|messageFactory
operator|.
name|buildCreateDatabaseMessage
argument_list|(
name|dbEvent
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropDatabase
parameter_list|(
name|DropDatabaseEvent
name|dbEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification about drop of a database in HCAT
comment|// by listening on a topic named "HCAT" and message selector string
comment|// as "HCAT_EVENT = HCAT_DROP_DATABASE"
if|if
condition|(
name|dbEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|String
name|topicName
init|=
name|getTopicPrefix
argument_list|(
name|dbEvent
operator|.
name|getIHMSHandler
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|send
argument_list|(
name|messageFactory
operator|.
name|buildDropDatabaseMessage
argument_list|(
name|dbEvent
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateTable
parameter_list|(
name|CreateTableEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification about addition of a table in HCAT
comment|// by listening on a topic named "HCAT" and message selector string
comment|// as "HCAT_EVENT = HCAT_ADD_TABLE"
if|if
condition|(
name|tableEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|Table
name|tbl
init|=
name|tableEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|IHMSHandler
name|handler
init|=
name|tableEvent
operator|.
name|getIHMSHandler
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|handler
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Table
name|newTbl
decl_stmt|;
try|try
block|{
name|newTbl
operator|=
name|handler
operator|.
name|get_table_core
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
name|newTbl
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
argument_list|,
name|getTopicPrefix
argument_list|(
name|conf
argument_list|)
operator|+
literal|"."
operator|+
name|newTbl
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"."
operator|+
name|newTbl
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|alter_table
argument_list|(
name|newTbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
name|String
name|topicName
init|=
name|getTopicPrefix
argument_list|(
name|conf
argument_list|)
operator|+
literal|"."
operator|+
name|newTbl
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|send
argument_list|(
name|messageFactory
operator|.
name|buildCreateTableMessage
argument_list|(
name|newTbl
argument_list|)
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getTopicPrefix
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_PREFIX
argument_list|,
name|HCatConstants
operator|.
name|HCAT_DEFAULT_TOPIC_PREFIX
argument_list|)
return|;
block|}
comment|/**    * Send altered table notifications. Subscribers can receive these notifications for    * dropped tables by listening on topic "HCAT" with message selector string    * {@value org.apache.hive.hcatalog.common.HCatConstants#HCAT_EVENT} =    * {@value org.apache.hive.hcatalog.common.HCatConstants#HCAT_ALTER_TABLE_EVENT}    */
annotation|@
name|Override
specifier|public
name|void
name|onAlterTable
parameter_list|(
name|AlterTableEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|tableEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|Table
name|before
init|=
name|tableEvent
operator|.
name|getOldTable
argument_list|()
decl_stmt|;
name|Table
name|after
init|=
name|tableEvent
operator|.
name|getNewTable
argument_list|()
decl_stmt|;
comment|// onCreateTable alters the table to add the topic name.  Since this class is generating
comment|// that alter, we don't want to notify on that alter.  So take a quick look and see if
comment|// that's what this this alter is, and if so swallow it.
if|if
condition|(
name|after
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
operator|&&
name|after
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
name|before
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|before
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
argument_list|)
operator|==
literal|null
operator|)
condition|)
block|{
return|return;
block|}
comment|// I think this is wrong, the alter table statement should come on the table topic not the
comment|// DB topic - Alan.
name|String
name|topicName
init|=
name|getTopicPrefix
argument_list|(
name|tableEvent
operator|.
name|getIHMSHandler
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
operator|+
literal|"."
operator|+
name|after
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|send
argument_list|(
name|messageFactory
operator|.
name|buildAlterTableMessage
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Send dropped table notifications. Subscribers can receive these notifications for    * dropped tables by listening on topic "HCAT" with message selector string    * {@value org.apache.hive.hcatalog.common.HCatConstants#HCAT_EVENT} =    * {@value org.apache.hive.hcatalog.common.HCatConstants#HCAT_DROP_TABLE_EVENT}    *</br>    * TODO: DataNucleus 2.0.3, currently used by the HiveMetaStore for persistence, has been    * found to throw NPE when serializing objects that contain null. For this reason we override    * some fields in the StorageDescriptor of this notification. This should be fixed after    * HIVE-2084 "Upgrade datanucleus from 2.0.3 to 3.0.1" is resolved.    */
annotation|@
name|Override
specifier|public
name|void
name|onDropTable
parameter_list|(
name|DropTableEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification about drop of a table in HCAT
comment|// by listening on a topic named "HCAT" and message selector string
comment|// as "HCAT_EVENT = HCAT_DROP_TABLE"
comment|// Datanucleus throws NPE when we try to serialize a table object
comment|// retrieved from metastore. To workaround that we reset following objects
if|if
condition|(
name|tableEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|Table
name|table
init|=
name|tableEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
comment|// I think this is wrong, the drop table statement should come on the table topic not the
comment|// DB topic - Alan.
name|String
name|topicName
init|=
name|getTopicPrefix
argument_list|(
name|tableEvent
operator|.
name|getIHMSHandler
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
operator|+
literal|"."
operator|+
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|send
argument_list|(
name|messageFactory
operator|.
name|buildDropTableMessage
argument_list|(
name|table
argument_list|)
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param hCatEventMessage The HCatEventMessage being sent over JMS.    * @param topicName is the name on message broker on which message is sent.    */
specifier|protected
name|void
name|send
parameter_list|(
name|HCatEventMessage
name|hCatEventMessage
parameter_list|,
name|String
name|topicName
parameter_list|)
block|{
name|send
argument_list|(
name|hCatEventMessage
argument_list|,
name|topicName
argument_list|,
name|NUM_RETRIES
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param hCatEventMessage The HCatEventMessage being sent over JMS, this method is threadsafe    * @param topicName is the name on message broker on which message is sent.    * @param retries the number of retry attempts    */
specifier|protected
name|void
name|send
parameter_list|(
name|HCatEventMessage
name|hCatEventMessage
parameter_list|,
name|String
name|topicName
parameter_list|,
name|int
name|retries
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|session
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Need to reconnect
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Invalid JMS session"
argument_list|)
throw|;
block|}
name|Destination
name|topic
init|=
name|createTopic
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
name|session
operator|.
name|get
argument_list|()
operator|.
name|createTextMessage
argument_list|(
name|hCatEventMessage
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setStringProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_EVENT
argument_list|,
name|hCatEventMessage
operator|.
name|getEventType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setStringProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MESSAGE_VERSION
argument_list|,
name|messageFactory
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setStringProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MESSAGE_FORMAT
argument_list|,
name|messageFactory
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// Message must be transacted before we return.
name|session
operator|.
name|get
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|retries
operator|>=
literal|0
condition|)
block|{
comment|// this may happen if we were able to establish connection once, but its no longer valid
name|LOG
operator|.
name|error
argument_list|(
literal|"Seems like connection is lost. Will retry. Retries left : "
operator|+
name|retries
operator|+
literal|". error was:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|testAndCreateConnection
argument_list|()
expr_stmt|;
name|send
argument_list|(
name|hCatEventMessage
argument_list|,
name|topicName
argument_list|,
name|retries
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Gobble up the exception. Message delivery is best effort.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to send message on topic: "
operator|+
name|topicName
operator|+
literal|" event: "
operator|+
name|hCatEventMessage
operator|.
name|getEventType
argument_list|()
operator|+
literal|" after retries: "
operator|+
name|NUM_RETRIES
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the topic object for the topicName    *    * @param topicName The String identifying the message-topic.    * @return A {@link Topic} object corresponding to the specified topicName.    * @throws JMSException    */
specifier|protected
name|Topic
name|createTopic
parameter_list|(
specifier|final
name|String
name|topicName
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|session
operator|.
name|get
argument_list|()
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
return|;
block|}
comment|/**    * Does a health check on the connection by sending a dummy message.    * Create the connection if the connection is found to be bad    * Also recreates the session    */
specifier|protected
specifier|synchronized
name|void
name|testAndCreateConnection
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
comment|// This method is reached when error occurs while sending msg, so the session must be bad
name|session
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isConnectionHealthy
argument_list|()
condition|)
block|{
comment|// I am the first thread to detect the error, cleanup old connection& reconnect
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to close bad JMS connection, ignored error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|conn
operator|=
name|createConnection
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|conn
operator|=
name|createConnection
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|session
operator|.
name|set
argument_list|(
name|createSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't create JMS session, ignored the error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create the JMS connection    * @return newly created JMS connection    */
specifier|protected
name|Connection
name|createConnection
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Will create new JMS connection"
argument_list|)
expr_stmt|;
name|Context
name|jndiCntxt
decl_stmt|;
name|Connection
name|jmsConnection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jndiCntxt
operator|=
operator|new
name|InitialContext
argument_list|()
expr_stmt|;
name|ConnectionFactory
name|connFac
init|=
operator|(
name|ConnectionFactory
operator|)
name|jndiCntxt
operator|.
name|lookup
argument_list|(
literal|"ConnectionFactory"
argument_list|)
decl_stmt|;
name|jmsConnection
operator|=
name|connFac
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|jmsConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|jmsConnection
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|ExceptionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|jmse
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JMS Exception listener received exception. Ignored the error"
argument_list|,
name|jmse
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JNDI error while setting up Message Bus connection. "
operator|+
literal|"Please make sure file named 'jndi.properties' is in "
operator|+
literal|"classpath and contains appropriate key-value pairs."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to initialize connection to message bus"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to connect to JMS provider"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|jmsConnection
return|;
block|}
comment|/**    * Send a dummy message to probe if the JMS connection is healthy    * @return true if connection is healthy, false otherwise    */
specifier|protected
name|boolean
name|isConnectionHealthy
parameter_list|()
block|{
try|try
block|{
name|Topic
name|topic
init|=
name|createTopic
argument_list|(
name|getTopicPrefix
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|+
literal|"."
operator|+
name|HEALTH_CHECK_TOPIC_SUFFIX
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
name|session
operator|.
name|get
argument_list|()
operator|.
name|createTextMessage
argument_list|(
name|HEALTH_CHECK_MSG
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Creates a JMS session    * @return newly create JMS session    * @throws JMSException    */
specifier|protected
name|Session
name|createSession
parameter_list|()
throws|throws
name|JMSException
block|{
comment|// We want message to be sent when session commits, thus we run in
comment|// transacted mode.
return|return
name|conn
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
return|;
block|}
comment|/**    * Create a JMS producer    * @param topic    * @return newly created message producer    * @throws JMSException    */
specifier|protected
name|MessageProducer
name|createProducer
parameter_list|(
name|Destination
name|topic
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|session
operator|.
name|get
argument_list|()
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't close jms connection, ignored the error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onLoadPartitionDone
parameter_list|(
name|LoadPartitionDoneEvent
name|lpde
parameter_list|)
throws|throws
name|MetaException
block|{
comment|//  TODO: Fix LoadPartitionDoneEvent. Currently, LPDE can only carry a single partition-spec. And that defeats the purpose.
comment|//        if(lpde.getStatus())
comment|//            send(lpde.getPartitionName(),lpde.getTable().getParameters().get(HCatConstants.HCAT_MSGBUS_TOPIC_NAME),HCatConstants.HCAT_PARTITION_DONE_EVENT);
block|}
block|}
end_class

end_unit

