begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|messaging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Abstract Factory for the construction of HCatalog message instances.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
specifier|abstract
class|class
name|MessageFactory
block|{
specifier|private
specifier|static
name|MessageFactory
name|instance
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
static|static
block|{
name|hiveConf
operator|.
name|addResource
argument_list|(
literal|"hive-site.xml"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|CONF_LABEL_HCAT_MESSAGE_FACTORY_IMPL_PREFIX
init|=
literal|"hcatalog.message.factory.impl."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_LABEL_HCAT_MESSAGE_FORMAT
init|=
literal|"hcatalog.message.format"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HCAT_MESSAGE_FORMAT
init|=
name|hiveConf
operator|.
name|get
argument_list|(
name|CONF_LABEL_HCAT_MESSAGE_FORMAT
argument_list|,
literal|"json"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_MESSAGE_FACTORY_IMPL
init|=
literal|"org.apache.hive.hcatalog.messaging.json.JSONMessageFactory"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HCAT_MESSAGE_FACTORY_IMPL
init|=
name|hiveConf
operator|.
name|get
argument_list|(
name|CONF_LABEL_HCAT_MESSAGE_FACTORY_IMPL_PREFIX
operator|+
name|HCAT_MESSAGE_FORMAT
argument_list|,
name|DEFAULT_MESSAGE_FACTORY_IMPL
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|HCAT_SERVER_URL
init|=
name|hiveConf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
operator|.
name|name
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|HCAT_SERVICE_PRINCIPAL
init|=
name|hiveConf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_KERBEROS_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|/**    * Getter for MessageFactory instance.    */
specifier|public
specifier|static
name|MessageFactory
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
name|getInstance
argument_list|(
name|HCAT_MESSAGE_FACTORY_IMPL
argument_list|)
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
specifier|private
specifier|static
name|MessageFactory
name|getInstance
parameter_list|(
name|String
name|className
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|MessageFactory
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|classNotFound
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not construct MessageFactory implementation: "
argument_list|,
name|classNotFound
argument_list|)
throw|;
block|}
block|}
comment|/**    * Getter for MessageDeserializer, corresponding to the specified format and version.    * @param format Serialization format for notifications.    * @param version Version of serialization format (currently ignored.)    * @return MessageDeserializer.    */
specifier|public
specifier|static
name|MessageDeserializer
name|getDeserializer
parameter_list|(
name|String
name|format
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|hiveConf
operator|.
name|get
argument_list|(
name|CONF_LABEL_HCAT_MESSAGE_FACTORY_IMPL_PREFIX
operator|+
name|format
argument_list|,
name|DEFAULT_MESSAGE_FACTORY_IMPL
argument_list|)
argument_list|)
operator|.
name|getDeserializer
argument_list|()
return|;
block|}
specifier|public
specifier|abstract
name|MessageDeserializer
name|getDeserializer
parameter_list|()
function_decl|;
comment|/**    * Getter for version-string, corresponding to all constructed messages.    */
specifier|public
specifier|abstract
name|String
name|getVersion
parameter_list|()
function_decl|;
comment|/**    * Getter for message-format.    */
specifier|public
specifier|abstract
name|String
name|getMessageFormat
parameter_list|()
function_decl|;
comment|/**    * Factory method for CreateDatabaseMessage.    * @param db The Database being added.    * @return CreateDatabaseMessage instance.    */
specifier|public
specifier|abstract
name|CreateDatabaseMessage
name|buildCreateDatabaseMessage
parameter_list|(
name|Database
name|db
parameter_list|)
function_decl|;
comment|/**    * Factory method for DropDatabaseMessage.    * @param db The Database being dropped.    * @return DropDatabaseMessage instance.    */
specifier|public
specifier|abstract
name|DropDatabaseMessage
name|buildDropDatabaseMessage
parameter_list|(
name|Database
name|db
parameter_list|)
function_decl|;
comment|/**    * Factory method for CreateTableMessage.    * @param table The Table being created.    * @return CreateTableMessage instance.    */
specifier|public
specifier|abstract
name|CreateTableMessage
name|buildCreateTableMessage
parameter_list|(
name|Table
name|table
parameter_list|)
function_decl|;
comment|/**    * Factory method for AlterTableMessage.  Unlike most of these calls, this one can return null,    * which means no message should be sent.  This is because there are many flavors of alter    * table (add column, add partition, etc.).  Some are covered elsewhere (like add partition)    * and some are not yet supported.    * @param before The table before the alter    * @param after The table after the alter    * @param writeId writeId under which alter is done (for ACID tables)    * @return    */
specifier|public
specifier|abstract
name|AlterTableMessage
name|buildAlterTableMessage
parameter_list|(
name|Table
name|before
parameter_list|,
name|Table
name|after
parameter_list|,
name|Long
name|writeId
parameter_list|)
function_decl|;
comment|/**    * Factory method for DropTableMessage.    * @param table The Table being dropped.    * @return DropTableMessage instance.    */
specifier|public
specifier|abstract
name|DropTableMessage
name|buildDropTableMessage
parameter_list|(
name|Table
name|table
parameter_list|)
function_decl|;
comment|/**      * Factory method for AddPartitionMessage.      * @param table The Table to which the partitions are added.      * @param partitions The iterator to set of Partitions being added.      * @return AddPartitionMessage instance.      */
specifier|public
specifier|abstract
name|AddPartitionMessage
name|buildAddPartitionMessage
parameter_list|(
name|Table
name|table
parameter_list|,
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
function_decl|;
comment|/**    * Factory method for building AlterPartitionMessage    * @param table The table in which the partition is being altered    * @param before The partition before it was altered    * @param after The partition after it was altered    * @param writeId writeId under which alter is done (for ACID tables)    * @return a new AlterPartitionMessage    */
specifier|public
specifier|abstract
name|AlterPartitionMessage
name|buildAlterPartitionMessage
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|before
parameter_list|,
name|Partition
name|after
parameter_list|,
name|Long
name|writeId
parameter_list|)
function_decl|;
comment|/**    * Factory method for DropPartitionMessage.    * @param table The Table from which the partition is dropped.    * @param partitions The set of partitions being dropped.    * @return DropPartitionMessage instance.    */
specifier|public
specifier|abstract
name|DropPartitionMessage
name|buildDropPartitionMessage
parameter_list|(
name|Table
name|table
parameter_list|,
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
function_decl|;
comment|/**    * Factory method for CreateFunctionMessage.    * @param fn The Function being added.    * @return CreateFunctionMessage instance.    */
specifier|public
specifier|abstract
name|CreateFunctionMessage
name|buildCreateFunctionMessage
parameter_list|(
name|Function
name|fn
parameter_list|)
function_decl|;
comment|/**    * Factory method for DropFunctionMessage.    * @param fn The Function being dropped.    * @return DropFunctionMessage instance.    */
specifier|public
specifier|abstract
name|DropFunctionMessage
name|buildDropFunctionMessage
parameter_list|(
name|Function
name|fn
parameter_list|)
function_decl|;
comment|/**    * Factory method for building insert message    * @param db Name of the database the insert occurred in    * @param table Name of the table the insert occurred in    * @param partVals Partition values for the partition that the insert occurred in, may be null    *                 if the insert was done into a non-partitioned table    * @param files List of files created as a result of the insert, may be null.    * @return instance of InsertMessage    */
specifier|public
specifier|abstract
name|InsertMessage
name|buildInsertMessage
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partVals
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
function_decl|;
comment|/**    * Factory method for building insert message    * @param db Name of the database the insert occurred in    * @param table Table the insert occurred in    * @param partVals Partition values for the partition that the insert occurred in, may be null    *                 if the insert was done into a non-partitioned table    * @param files List of files created as a result of the insert, may be null.    * @return instance of InsertMessage    */
specifier|public
specifier|abstract
name|InsertMessage
name|buildInsertMessage
parameter_list|(
name|String
name|db
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partVals
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
function_decl|;
block|}
end_class

end_unit

