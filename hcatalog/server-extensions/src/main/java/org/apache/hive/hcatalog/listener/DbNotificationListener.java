begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|listener
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
operator|.
name|HMSHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreEventListenerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStoreProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TransactionalMetaStoreEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddForeignKeyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddNotNullConstraintEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPrimaryKeyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddUniqueConstraintEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|ConfigChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateFunctionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropConstraintEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropFunctionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|InsertEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|LoadPartitionDoneEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|OpenTxnEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CommitTxnEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AbortTxnEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AllocWriteIdEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|ListenerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AcidWriteEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|UpdateTableColumnStatEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DeleteTableColumnStatEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|UpdatePartitionColumnStatEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DeletePartitionColumnStatEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AbortTxnMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AcidWriteMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AddForeignKeyMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AddNotNullConstraintMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AddPrimaryKeyMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AddUniqueConstraintMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AllocWriteIdMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterDatabaseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|CommitTxnMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|CreateDatabaseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|CreateFunctionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|CreateTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DropConstraintMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DropDatabaseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DropFunctionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DropPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DropTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|InsertMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|OpenTxnMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|PartitionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|UpdateTableColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DeleteTableColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|UpdatePartitionColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DeletePartitionColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|SQLGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|DatabaseProduct
operator|.
name|MYSQL
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link org.apache.hadoop.hive.metastore.MetaStoreEventListener} that  * stores events in the database.  *  * Design overview:  This listener takes any event, builds a NotificationEventResponse,  * and puts it on a queue.  There is a dedicated thread that reads entries from the queue and  * places them in the database.  The reason for doing it in a separate thread is that we want to  * avoid slowing down other metadata operations with the work of putting the notification into  * the database.  Also, occasionally the thread needs to clean the database of old records.  We  * definitely don't want to do that as part of another metadata operation.  */
end_comment

begin_class
specifier|public
class|class
name|DbNotificationListener
extends|extends
name|TransactionalMetaStoreEventListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DbNotificationListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|CleanerThread
name|cleaner
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|MessageEncoder
name|msgEncoder
decl_stmt|;
comment|//cleaner is a static object, use static synchronized to make sure its thread-safe
specifier|private
specifier|static
specifier|synchronized
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|cleaner
operator|==
literal|null
condition|)
block|{
name|cleaner
operator|=
operator|new
name|CleanerThread
argument_list|(
name|conf
argument_list|,
name|RawStoreProxy
operator|.
name|getProxy
argument_list|(
name|conf
argument_list|,
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|RAW_STORE_IMPL
argument_list|)
argument_list|,
literal|999999
argument_list|)
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|DbNotificationListener
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|conf
operator|=
name|config
expr_stmt|;
name|DbNotificationListener
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|msgEncoder
operator|=
name|MessageFactory
operator|.
name|getDefaultInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tableEvent table event.    * @throws org.apache.hadoop.hive.metastore.api.MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onConfigChange
parameter_list|(
name|ConfigChangeEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|key
init|=
name|tableEvent
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_TTL
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|key
operator|.
name|equals
argument_list|(
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_TTL
operator|.
name|getHiveName
argument_list|()
argument_list|)
condition|)
block|{
comment|// This weirdness of setting it in our conf and then reading back does two things.
comment|// One, it handles the conversion of the TimeUnit.  Two, it keeps the value around for
comment|// later in case we need it again.
name|long
name|time
init|=
name|MetastoreConf
operator|.
name|convertTimeStr
argument_list|(
name|tableEvent
operator|.
name|getNewValue
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|MetastoreConf
operator|.
name|setTimeVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_TTL
argument_list|,
name|time
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|setTimeToLive
argument_list|(
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_TTL
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_CLEAN_INTERVAL
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|key
operator|.
name|equals
argument_list|(
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_CLEAN_INTERVAL
operator|.
name|getHiveName
argument_list|()
argument_list|)
condition|)
block|{
comment|// This weirdness of setting it in our conf and then reading back does two things.
comment|// One, it handles the conversion of the TimeUnit.  Two, it keeps the value around for
comment|// later in case we need it again.
name|long
name|time
init|=
name|MetastoreConf
operator|.
name|convertTimeStr
argument_list|(
name|tableEvent
operator|.
name|getNewValue
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|MetastoreConf
operator|.
name|setTimeVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_CLEAN_INTERVAL
argument_list|,
name|time
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|setCleanupInterval
argument_list|(
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_CLEAN_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param tableEvent table event.    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onCreateTable
parameter_list|(
name|CreateTableEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Table
name|t
init|=
name|tableEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|FileIterator
name|fileIter
init|=
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|t
argument_list|)
condition|?
literal|null
else|:
operator|new
name|FileIterator
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|CreateTableMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCreateTableMessage
argument_list|(
name|t
argument_list|,
name|fileIter
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|CREATE_TABLE
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|t
operator|.
name|isSetCatName
argument_list|()
condition|?
name|t
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|tableEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tableEvent table event.    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onDropTable
parameter_list|(
name|DropTableEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Table
name|t
init|=
name|tableEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|DropTableMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildDropTableMessage
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|DROP_TABLE
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|t
operator|.
name|isSetCatName
argument_list|()
condition|?
name|t
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|tableEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tableEvent alter table event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onAlterTable
parameter_list|(
name|AlterTableEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Table
name|before
init|=
name|tableEvent
operator|.
name|getOldTable
argument_list|()
decl_stmt|;
name|Table
name|after
init|=
name|tableEvent
operator|.
name|getNewTable
argument_list|()
decl_stmt|;
name|AlterTableMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAlterTableMessage
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|tableEvent
operator|.
name|getIsTruncateOp
argument_list|()
argument_list|,
name|tableEvent
operator|.
name|getWriteId
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ALTER_TABLE
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|after
operator|.
name|isSetCatName
argument_list|()
condition|?
name|after
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|after
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|after
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|tableEvent
argument_list|)
expr_stmt|;
block|}
class|class
name|FileIterator
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
block|{
comment|/***      * Filter for valid files only (no dir, no hidden)      */
name|PathFilter
name|VALID_FILES_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|isFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|FileStatus
index|[]
name|files
decl_stmt|;
specifier|private
name|int
name|i
init|=
literal|0
decl_stmt|;
name|FileIterator
parameter_list|(
name|String
name|locString
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|locString
operator|!=
literal|null
condition|)
block|{
name|Path
name|loc
init|=
operator|new
name|Path
argument_list|(
name|locString
argument_list|)
decl_stmt|;
name|fs
operator|=
name|loc
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|files
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|loc
argument_list|,
name|VALID_FILES_FILTER
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|i
operator|<
name|files
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
try|try
block|{
name|FileStatus
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|i
operator|++
expr_stmt|;
return|return
name|ReplChangeManager
operator|.
name|encodeFileUri
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ReplChangeManager
operator|.
name|checksumFor
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|fs
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
class|class
name|PartitionFilesIterator
implements|implements
name|Iterator
argument_list|<
name|PartitionFiles
argument_list|>
block|{
specifier|private
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|partitionIter
decl_stmt|;
specifier|private
name|Table
name|t
decl_stmt|;
name|PartitionFilesIterator
parameter_list|(
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|partitionIter
parameter_list|,
name|Table
name|t
parameter_list|)
block|{
name|this
operator|.
name|partitionIter
operator|=
name|partitionIter
expr_stmt|;
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|partitionIter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PartitionFiles
name|next
parameter_list|()
block|{
try|try
block|{
name|Partition
name|p
init|=
name|partitionIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|fileIterator
decl_stmt|;
comment|//For transactional tables, the actual file copy will be done by acid write event during replay of commit txn.
if|if
condition|(
operator|!
name|TxnUtils
operator|.
name|isTransactionalTable
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FileIterator
argument_list|(
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fileIterator
operator|=
name|files
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileIterator
operator|=
name|Collections
operator|.
name|emptyIterator
argument_list|()
expr_stmt|;
block|}
name|PartitionFiles
name|partitionFiles
init|=
operator|new
name|PartitionFiles
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|fileIterator
argument_list|)
decl_stmt|;
return|return
name|partitionFiles
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**    * @param partitionEvent partition event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onAddPartition
parameter_list|(
name|AddPartitionEvent
name|partitionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Table
name|t
init|=
name|partitionEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|PartitionFilesIterator
name|fileIter
init|=
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|t
argument_list|)
condition|?
literal|null
else|:
operator|new
name|PartitionFilesIterator
argument_list|(
name|partitionEvent
operator|.
name|getPartitionIterator
argument_list|()
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|EventMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAddPartitionMessage
argument_list|(
name|t
argument_list|,
name|partitionEvent
operator|.
name|getPartitionIterator
argument_list|()
argument_list|,
name|fileIter
argument_list|)
decl_stmt|;
name|MessageSerializer
name|serializer
init|=
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ADD_PARTITION
operator|.
name|toString
argument_list|()
argument_list|,
name|serializer
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|t
operator|.
name|isSetCatName
argument_list|()
condition|?
name|t
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|partitionEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param partitionEvent partition event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onDropPartition
parameter_list|(
name|DropPartitionEvent
name|partitionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Table
name|t
init|=
name|partitionEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|DropPartitionMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildDropPartitionMessage
argument_list|(
name|t
argument_list|,
name|partitionEvent
operator|.
name|getPartitionIterator
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|DROP_PARTITION
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|t
operator|.
name|isSetCatName
argument_list|()
condition|?
name|t
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|partitionEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param partitionEvent partition event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onAlterPartition
parameter_list|(
name|AlterPartitionEvent
name|partitionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Partition
name|before
init|=
name|partitionEvent
operator|.
name|getOldPartition
argument_list|()
decl_stmt|;
name|Partition
name|after
init|=
name|partitionEvent
operator|.
name|getNewPartition
argument_list|()
decl_stmt|;
name|AlterPartitionMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAlterPartitionMessage
argument_list|(
name|partitionEvent
operator|.
name|getTable
argument_list|()
argument_list|,
name|before
argument_list|,
name|after
argument_list|,
name|partitionEvent
operator|.
name|getIsTruncateOp
argument_list|()
argument_list|,
name|partitionEvent
operator|.
name|getWriteId
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ALTER_PARTITION
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|before
operator|.
name|isSetCatName
argument_list|()
condition|?
name|before
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|before
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|before
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|partitionEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbEvent database event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onCreateDatabase
parameter_list|(
name|CreateDatabaseEvent
name|dbEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Database
name|db
init|=
name|dbEvent
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|CreateDatabaseMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCreateDatabaseMessage
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|CREATE_DATABASE
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|db
operator|.
name|isSetCatalogName
argument_list|()
condition|?
name|db
operator|.
name|getCatalogName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|dbEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbEvent database event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onDropDatabase
parameter_list|(
name|DropDatabaseEvent
name|dbEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Database
name|db
init|=
name|dbEvent
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|DropDatabaseMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildDropDatabaseMessage
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|DROP_DATABASE
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|db
operator|.
name|isSetCatalogName
argument_list|()
condition|?
name|db
operator|.
name|getCatalogName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|dbEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbEvent alter database event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onAlterDatabase
parameter_list|(
name|AlterDatabaseEvent
name|dbEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Database
name|oldDb
init|=
name|dbEvent
operator|.
name|getOldDatabase
argument_list|()
decl_stmt|;
name|Database
name|newDb
init|=
name|dbEvent
operator|.
name|getNewDatabase
argument_list|()
decl_stmt|;
name|AlterDatabaseMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAlterDatabaseMessage
argument_list|(
name|oldDb
argument_list|,
name|newDb
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ALTER_DATABASE
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|oldDb
operator|.
name|isSetCatalogName
argument_list|()
condition|?
name|oldDb
operator|.
name|getCatalogName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|oldDb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|dbEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param fnEvent function event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onCreateFunction
parameter_list|(
name|CreateFunctionEvent
name|fnEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Function
name|fn
init|=
name|fnEvent
operator|.
name|getFunction
argument_list|()
decl_stmt|;
name|CreateFunctionMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCreateFunctionMessage
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|CREATE_FUNCTION
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|fn
operator|.
name|isSetCatName
argument_list|()
condition|?
name|fn
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|fn
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|fnEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param fnEvent function event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onDropFunction
parameter_list|(
name|DropFunctionEvent
name|fnEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Function
name|fn
init|=
name|fnEvent
operator|.
name|getFunction
argument_list|()
decl_stmt|;
name|DropFunctionMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildDropFunctionMessage
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|DROP_FUNCTION
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|fn
operator|.
name|isSetCatName
argument_list|()
condition|?
name|fn
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|fn
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|fnEvent
argument_list|)
expr_stmt|;
block|}
class|class
name|FileChksumIterator
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|files
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|chksums
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|subDirs
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|FileChksumIterator
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|chksums
parameter_list|)
block|{
name|this
argument_list|(
name|files
argument_list|,
name|chksums
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|FileChksumIterator
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|chksums
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|subDirs
parameter_list|)
block|{
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|chksums
operator|=
name|chksums
expr_stmt|;
name|this
operator|.
name|subDirs
operator|=
name|subDirs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|<
name|files
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
name|String
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ReplChangeManager
operator|.
name|encodeFileUri
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|chksums
operator|!=
literal|null
condition|?
name|chksums
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
argument_list|,
name|subDirs
operator|!=
literal|null
condition|?
name|subDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// File operations failed
name|LOG
operator|.
name|error
argument_list|(
literal|"Encoding file URI failed with error "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|i
operator|++
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onInsert
parameter_list|(
name|InsertEvent
name|insertEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Table
name|tableObj
init|=
name|insertEvent
operator|.
name|getTableObj
argument_list|()
decl_stmt|;
name|InsertMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildInsertMessage
argument_list|(
name|tableObj
argument_list|,
name|insertEvent
operator|.
name|getPartitionObj
argument_list|()
argument_list|,
name|insertEvent
operator|.
name|isReplace
argument_list|()
argument_list|,
operator|new
name|FileChksumIterator
argument_list|(
name|insertEvent
operator|.
name|getFiles
argument_list|()
argument_list|,
name|insertEvent
operator|.
name|getFileChecksums
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|INSERT
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|tableObj
operator|.
name|isSetCatName
argument_list|()
condition|?
name|tableObj
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|tableObj
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|tableObj
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|insertEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOpenTxn
parameter_list|(
name|OpenTxnEvent
name|openTxnEvent
parameter_list|,
name|Connection
name|dbConn
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|)
throws|throws
name|MetaException
block|{
name|int
name|lastTxnIdx
init|=
name|openTxnEvent
operator|.
name|getTxnIds
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|OpenTxnMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildOpenTxnMessage
argument_list|(
name|openTxnEvent
operator|.
name|getTxnIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|openTxnEvent
operator|.
name|getTxnIds
argument_list|()
operator|.
name|get
argument_list|(
name|lastTxnIdx
argument_list|)
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|OPEN_TXN
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|addNotificationLog
argument_list|(
name|event
argument_list|,
name|openTxnEvent
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to execute direct SQL "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCommitTxn
parameter_list|(
name|CommitTxnEvent
name|commitTxnEvent
parameter_list|,
name|Connection
name|dbConn
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|)
throws|throws
name|MetaException
block|{
name|CommitTxnMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCommitTxnMessage
argument_list|(
name|commitTxnEvent
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|COMMIT_TXN
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|addNotificationLog
argument_list|(
name|event
argument_list|,
name|commitTxnEvent
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to execute direct SQL "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAbortTxn
parameter_list|(
name|AbortTxnEvent
name|abortTxnEvent
parameter_list|,
name|Connection
name|dbConn
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|)
throws|throws
name|MetaException
block|{
name|AbortTxnMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAbortTxnMessage
argument_list|(
name|abortTxnEvent
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ABORT_TXN
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|addNotificationLog
argument_list|(
name|event
argument_list|,
name|abortTxnEvent
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to execute direct SQL "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param partSetDoneEvent    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onLoadPartitionDone
parameter_list|(
name|LoadPartitionDoneEvent
name|partSetDoneEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO, we don't support this, but we should, since users may create an empty partition and
comment|// then load data into it.
block|}
comment|/***    * @param addPrimaryKeyEvent add primary key event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onAddPrimaryKey
parameter_list|(
name|AddPrimaryKeyEvent
name|addPrimaryKeyEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|cols
init|=
name|addPrimaryKeyEvent
operator|.
name|getPrimaryKeyCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AddPrimaryKeyMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAddPrimaryKeyMessage
argument_list|(
name|addPrimaryKeyEvent
operator|.
name|getPrimaryKeyCols
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ADD_PRIMARYKEY
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSetCatName
argument_list|()
condition|?
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|addPrimaryKeyEvent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/***    * @param addForeignKeyEvent add foreign key event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onAddForeignKey
parameter_list|(
name|AddForeignKeyEvent
name|addForeignKeyEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|cols
init|=
name|addForeignKeyEvent
operator|.
name|getForeignKeyCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AddForeignKeyMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAddForeignKeyMessage
argument_list|(
name|addForeignKeyEvent
operator|.
name|getForeignKeyCols
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ADD_FOREIGNKEY
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSetCatName
argument_list|()
condition|?
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPktable_db
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPktable_name
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|addForeignKeyEvent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/***    * @param addUniqueConstraintEvent add unique constraint event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onAddUniqueConstraint
parameter_list|(
name|AddUniqueConstraintEvent
name|addUniqueConstraintEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|cols
init|=
name|addUniqueConstraintEvent
operator|.
name|getUniqueConstraintCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AddUniqueConstraintMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAddUniqueConstraintMessage
argument_list|(
name|addUniqueConstraintEvent
operator|.
name|getUniqueConstraintCols
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ADD_UNIQUECONSTRAINT
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSetCatName
argument_list|()
condition|?
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|addUniqueConstraintEvent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/***    * @param addNotNullConstraintEvent add not null constraint event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onAddNotNullConstraint
parameter_list|(
name|AddNotNullConstraintEvent
name|addNotNullConstraintEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|cols
init|=
name|addNotNullConstraintEvent
operator|.
name|getNotNullConstraintCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AddNotNullConstraintMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAddNotNullConstraintMessage
argument_list|(
name|addNotNullConstraintEvent
operator|.
name|getNotNullConstraintCols
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ADD_NOTNULLCONSTRAINT
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSetCatName
argument_list|()
condition|?
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|addNotNullConstraintEvent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/***    * @param dropConstraintEvent drop constraint event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onDropConstraint
parameter_list|(
name|DropConstraintEvent
name|dropConstraintEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|dbName
init|=
name|dropConstraintEvent
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|dropConstraintEvent
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|constraintName
init|=
name|dropConstraintEvent
operator|.
name|getConstraintName
argument_list|()
decl_stmt|;
name|DropConstraintMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildDropConstraintMessage
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|constraintName
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|DROP_CONSTRAINT
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|dropConstraintEvent
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|dropConstraintEvent
argument_list|)
expr_stmt|;
block|}
comment|/***    * @param allocWriteIdEvent Alloc write id event    * @throws MetaException    */
annotation|@
name|Override
specifier|public
name|void
name|onAllocWriteId
parameter_list|(
name|AllocWriteIdEvent
name|allocWriteIdEvent
parameter_list|,
name|Connection
name|dbConn
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|tableName
init|=
name|allocWriteIdEvent
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|allocWriteIdEvent
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|AllocWriteIdMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAllocWriteIdMessage
argument_list|(
name|allocWriteIdEvent
operator|.
name|getTxnToWriteIdList
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ALLOC_WRITE_ID
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
try|try
block|{
name|addNotificationLog
argument_list|(
name|event
argument_list|,
name|allocWriteIdEvent
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to execute direct SQL "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAcidWrite
parameter_list|(
name|AcidWriteEvent
name|acidWriteEvent
parameter_list|,
name|Connection
name|dbConn
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|)
throws|throws
name|MetaException
block|{
name|AcidWriteMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildAcidWriteMessage
argument_list|(
name|acidWriteEvent
argument_list|,
operator|new
name|FileChksumIterator
argument_list|(
name|acidWriteEvent
operator|.
name|getFiles
argument_list|()
argument_list|,
name|acidWriteEvent
operator|.
name|getChecksums
argument_list|()
argument_list|,
name|acidWriteEvent
operator|.
name|getSubDirs
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|ACID_WRITE
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setMessageFormat
argument_list|(
name|msgEncoder
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|acidWriteEvent
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|acidWriteEvent
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|addWriteNotificationLog
argument_list|(
name|event
argument_list|,
name|acidWriteEvent
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to add write notification log "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onUpdateTableColumnStat
parameter_list|(
name|UpdateTableColumnStatEvent
name|updateTableColumnStatEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|UpdateTableColumnStatMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildUpdateTableColumnStatMessage
argument_list|(
name|updateTableColumnStatEvent
operator|.
name|getColStats
argument_list|()
argument_list|,
name|updateTableColumnStatEvent
operator|.
name|getTableObj
argument_list|()
argument_list|,
name|updateTableColumnStatEvent
operator|.
name|getTableParameters
argument_list|()
argument_list|,
name|updateTableColumnStatEvent
operator|.
name|getValidWriteIds
argument_list|()
argument_list|,
name|updateTableColumnStatEvent
operator|.
name|getWriteId
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|UPDATE_TABLE_COLUMN_STAT
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnStatisticsDesc
name|statDesc
init|=
name|updateTableColumnStatEvent
operator|.
name|getColStats
argument_list|()
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|statDesc
operator|.
name|isSetCatName
argument_list|()
condition|?
name|statDesc
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|statDesc
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|statDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|updateTableColumnStatEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDeleteTableColumnStat
parameter_list|(
name|DeleteTableColumnStatEvent
name|deleteTableColumnStatEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|DeleteTableColumnStatMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildDeleteTableColumnStatMessage
argument_list|(
name|deleteTableColumnStatEvent
operator|.
name|getDBName
argument_list|()
argument_list|,
name|deleteTableColumnStatEvent
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|DELETE_TABLE_COLUMN_STAT
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|deleteTableColumnStatEvent
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|deleteTableColumnStatEvent
operator|.
name|getDBName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|deleteTableColumnStatEvent
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|deleteTableColumnStatEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onUpdatePartitionColumnStat
parameter_list|(
name|UpdatePartitionColumnStatEvent
name|updatePartColStatEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|UpdatePartitionColumnStatMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildUpdatePartitionColumnStatMessage
argument_list|(
name|updatePartColStatEvent
operator|.
name|getPartColStats
argument_list|()
argument_list|,
name|updatePartColStatEvent
operator|.
name|getPartVals
argument_list|()
argument_list|,
name|updatePartColStatEvent
operator|.
name|getPartParameters
argument_list|()
argument_list|,
name|updatePartColStatEvent
operator|.
name|getTableObj
argument_list|()
argument_list|,
name|updatePartColStatEvent
operator|.
name|getValidWriteIds
argument_list|()
argument_list|,
name|updatePartColStatEvent
operator|.
name|getWriteId
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|UPDATE_PARTITION_COLUMN_STAT
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnStatisticsDesc
name|statDesc
init|=
name|updatePartColStatEvent
operator|.
name|getPartColStats
argument_list|()
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|statDesc
operator|.
name|isSetCatName
argument_list|()
condition|?
name|statDesc
operator|.
name|getCatName
argument_list|()
else|:
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|statDesc
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|statDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|updatePartColStatEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDeletePartitionColumnStat
parameter_list|(
name|DeletePartitionColumnStatEvent
name|deletePartColStatEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|DeletePartitionColumnStatMessage
name|msg
init|=
name|MessageBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildDeletePartitionColumnStatMessage
argument_list|(
name|deletePartColStatEvent
operator|.
name|getDBName
argument_list|()
argument_list|,
name|deletePartColStatEvent
operator|.
name|getColName
argument_list|()
argument_list|,
name|deletePartColStatEvent
operator|.
name|getPartName
argument_list|()
argument_list|,
name|deletePartColStatEvent
operator|.
name|getPartVals
argument_list|()
argument_list|)
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
name|now
argument_list|()
argument_list|,
name|EventType
operator|.
name|DELETE_PARTITION_COLUMN_STAT
operator|.
name|toString
argument_list|()
argument_list|,
name|msgEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|deletePartColStatEvent
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|deletePartColStatEvent
operator|.
name|getDBName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|deletePartColStatEvent
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|deletePartColStatEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|doesAddEventsToNotificationLogTable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|private
name|int
name|now
parameter_list|()
block|{
name|long
name|millis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|millis
operator|/=
literal|1000
expr_stmt|;
if|if
condition|(
name|millis
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"We've passed max int value in seconds since the epoch, "
operator|+
literal|"all notification times will be the same!"
argument_list|)
expr_stmt|;
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
return|return
operator|(
name|int
operator|)
name|millis
return|;
block|}
comment|/**    * Close statement instance.    * @param stmt statement instance.    */
specifier|private
specifier|static
name|void
name|closeStmt
parameter_list|(
name|Statement
name|stmt
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|stmt
operator|!=
literal|null
operator|&&
operator|!
name|stmt
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close statement "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Close the ResultSet.    * @param rs may be {@code null}    */
specifier|private
specifier|static
name|void
name|close
parameter_list|(
name|ResultSet
name|rs
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
operator|&&
operator|!
name|rs
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close result set "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|getNextNLId
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|,
name|String
name|sequence
parameter_list|)
throws|throws
name|SQLException
throws|,
name|MetaException
block|{
name|String
name|s
init|=
name|sqlGenerator
operator|.
name|addForUpdateClause
argument_list|(
literal|"select \"NEXT_VAL\" from "
operator|+
literal|"\"SEQUENCE_TABLE\" where \"SEQUENCE_NAME\" = "
operator|+
name|quoteString
argument_list|(
name|sequence
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute query<"
operator|+
name|s
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Transaction database not properly configured, can't find next NL id."
argument_list|)
throw|;
block|}
name|long
name|nextNLId
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|updatedNLId
init|=
name|nextNLId
operator|+
literal|1
decl_stmt|;
name|s
operator|=
literal|"update \"SEQUENCE_TABLE\" set \"NEXT_VAL\" = "
operator|+
name|updatedNLId
operator|+
literal|" where \"SEQUENCE_NAME\" = "
operator|+
name|quoteString
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute update<"
operator|+
name|s
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|nextNLId
return|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addWriteNotificationLog
parameter_list|(
name|NotificationEvent
name|event
parameter_list|,
name|AcidWriteEvent
name|acidWriteEvent
parameter_list|,
name|Connection
name|dbConn
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|,
name|AcidWriteMessage
name|msg
parameter_list|)
throws|throws
name|MetaException
throws|,
name|SQLException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DbNotificationListener: adding write notification log for : {}"
argument_list|,
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|(
operator|(
name|dbConn
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|sqlGenerator
operator|!=
literal|null
operator|)
operator|)
assert|;
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|pst
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|String
name|dbName
init|=
name|acidWriteEvent
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|acidWriteEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|String
name|partition
init|=
name|acidWriteEvent
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|String
name|tableObj
init|=
name|msg
operator|.
name|getTableObjStr
argument_list|()
decl_stmt|;
name|String
name|partitionObj
init|=
name|msg
operator|.
name|getPartitionObjStr
argument_list|()
decl_stmt|;
name|String
name|files
init|=
name|ReplChangeManager
operator|.
name|joinWithSeparator
argument_list|(
name|msg
operator|.
name|getFiles
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|dbConn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
if|if
condition|(
name|sqlGenerator
operator|.
name|getDbProduct
argument_list|()
operator|==
name|MYSQL
condition|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET @@session.sql_mode=ANSI_QUOTES"
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|sqlGenerator
operator|.
name|addForUpdateClause
argument_list|(
literal|"select \"WNL_FILES\", \"WNL_ID\" from"
operator|+
literal|" \"TXN_WRITE_NOTIFICATION_LOG\" "
operator|+
literal|"where \"WNL_DATABASE\" = ? "
operator|+
literal|"and \"WNL_TABLE\" = ? "
operator|+
literal|" and \"WNL_PARTITION\" = ? "
operator|+
literal|"and \"WNL_TXNID\" = "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|acidWriteEvent
operator|.
name|getTxnId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|pst
operator|=
name|sqlGenerator
operator|.
name|prepareStmtWithParameters
argument_list|(
name|dbConn
argument_list|,
name|s
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute query<"
operator|+
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\\?"
argument_list|,
literal|"{}"
argument_list|)
operator|+
literal|">"
argument_list|,
name|quoteString
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|quoteString
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|quoteString
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|=
name|pst
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// if rs is empty then no lock is taken and thus it can not cause deadlock.
name|long
name|nextNLId
init|=
name|getNextNLId
argument_list|(
name|stmt
argument_list|,
name|sqlGenerator
argument_list|,
literal|"org.apache.hadoop.hive.metastore.model.MTxnWriteNotificationLog"
argument_list|)
decl_stmt|;
name|s
operator|=
literal|"insert into \"TXN_WRITE_NOTIFICATION_LOG\" "
operator|+
literal|"(\"WNL_ID\", \"WNL_TXNID\", \"WNL_WRITEID\", \"WNL_DATABASE\", \"WNL_TABLE\", "
operator|+
literal|"\"WNL_PARTITION\", \"WNL_TABLE_OBJ\", \"WNL_PARTITION_OBJ\", "
operator|+
literal|"\"WNL_FILES\", \"WNL_EVENT_TIME\") VALUES (?,?,?,?,?,?,?,?,?,?)"
expr_stmt|;
name|closeStmt
argument_list|(
name|pst
argument_list|)
expr_stmt|;
name|int
name|currentTime
init|=
name|now
argument_list|()
decl_stmt|;
name|pst
operator|=
name|dbConn
operator|.
name|prepareStatement
argument_list|(
name|sqlGenerator
operator|.
name|addEscapeCharacters
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|nextNLId
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|acidWriteEvent
operator|.
name|getTxnId
argument_list|()
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|acidWriteEvent
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|partition
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
name|tableObj
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setString
argument_list|(
literal|8
argument_list|,
name|partitionObj
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setString
argument_list|(
literal|9
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setInt
argument_list|(
literal|10
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to execute insert<"
operator|+
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\\?"
argument_list|,
literal|"{}"
argument_list|)
operator|+
literal|">"
argument_list|,
name|nextNLId
argument_list|,
name|acidWriteEvent
operator|.
name|getTxnId
argument_list|()
argument_list|,
name|acidWriteEvent
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|quoteString
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|quoteString
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|quoteString
argument_list|(
name|partition
argument_list|)
argument_list|,
name|quoteString
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|quoteString
argument_list|(
name|partitionObj
argument_list|)
argument_list|,
name|quoteString
argument_list|(
name|files
argument_list|)
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
name|pst
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|existingFiles
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingFiles
operator|.
name|contains
argument_list|(
name|sqlGenerator
operator|.
name|addEscapeCharacters
argument_list|(
name|files
argument_list|)
argument_list|)
condition|)
block|{
comment|// If list of files are already present then no need to update it again. This scenario can come in case of
comment|// retry done to the meta store for the same operation.
name|LOG
operator|.
name|info
argument_list|(
literal|"file list "
operator|+
name|files
operator|+
literal|" already present"
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|nlId
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|currentTime
init|=
name|now
argument_list|()
decl_stmt|;
name|files
operator|=
name|ReplChangeManager
operator|.
name|joinWithSeparator
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|files
argument_list|,
name|existingFiles
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"update \"TXN_WRITE_NOTIFICATION_LOG\" set \"WNL_TABLE_OBJ\" = ? ,"
operator|+
literal|" \"WNL_PARTITION_OBJ\" = ? ,"
operator|+
literal|" \"WNL_FILES\" = ? ,"
operator|+
literal|" \"WNL_EVENT_TIME\" = ?"
operator|+
literal|" where \"WNL_ID\" = ?"
expr_stmt|;
name|closeStmt
argument_list|(
name|pst
argument_list|)
expr_stmt|;
name|pst
operator|=
name|dbConn
operator|.
name|prepareStatement
argument_list|(
name|sqlGenerator
operator|.
name|addEscapeCharacters
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|tableObj
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|partitionObj
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setInt
argument_list|(
literal|4
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
name|pst
operator|.
name|setLong
argument_list|(
literal|5
argument_list|,
name|nlId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to execute update<"
operator|+
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\\?"
argument_list|,
literal|"{}"
argument_list|)
operator|+
literal|">"
argument_list|,
name|quoteString
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|quoteString
argument_list|(
name|partitionObj
argument_list|)
argument_list|,
name|quoteString
argument_list|(
name|files
argument_list|)
argument_list|,
name|currentTime
argument_list|,
name|nlId
argument_list|)
expr_stmt|;
name|pst
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to add write notification log"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeStmt
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|closeStmt
argument_list|(
name|pst
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|quoteString
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
literal|"'"
operator|+
name|input
operator|+
literal|"'"
return|;
block|}
specifier|private
name|void
name|addNotificationLog
parameter_list|(
name|NotificationEvent
name|event
parameter_list|,
name|ListenerEvent
name|listenerEvent
parameter_list|,
name|Connection
name|dbConn
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|)
throws|throws
name|MetaException
throws|,
name|SQLException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DbNotificationListener: adding notification log for : {}"
argument_list|,
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|dbConn
operator|==
literal|null
operator|)
operator|||
operator|(
name|sqlGenerator
operator|==
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"connection or sql generator is not set so executing sql via DN"
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|event
argument_list|,
name|listenerEvent
argument_list|)
expr_stmt|;
return|return;
block|}
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|pst
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|dbConn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|event
operator|.
name|setMessageFormat
argument_list|(
name|msgEncoder
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlGenerator
operator|.
name|getDbProduct
argument_list|()
operator|==
name|MYSQL
condition|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET @@session.sql_mode=ANSI_QUOTES"
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|sqlGenerator
operator|.
name|addForUpdateClause
argument_list|(
literal|"select \"NEXT_EVENT_ID\" "
operator|+
literal|" from \"NOTIFICATION_SEQUENCE\""
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute query<"
operator|+
name|s
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Transaction database not properly "
operator|+
literal|"configured, can't find next event id."
argument_list|)
throw|;
block|}
name|long
name|nextEventId
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|updatedEventid
init|=
name|nextEventId
operator|+
literal|1
decl_stmt|;
name|s
operator|=
literal|"update \"NOTIFICATION_SEQUENCE\" set \"NEXT_EVENT_ID\" = "
operator|+
name|updatedEventid
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute update<"
operator|+
name|s
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|long
name|nextNLId
init|=
name|getNextNLId
argument_list|(
name|stmt
argument_list|,
name|sqlGenerator
argument_list|,
literal|"org.apache.hadoop.hive.metastore.model.MNotificationLog"
argument_list|)
decl_stmt|;
name|String
name|insertVal
decl_stmt|;
name|String
name|columns
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Construct the values string, parameters and column string step by step simultaneously so
comment|// that the positions of columns and of their corresponding values do not go out of sync.
comment|// Notification log id
name|columns
operator|=
literal|"\"NL_ID\""
expr_stmt|;
name|insertVal
operator|=
literal|""
operator|+
name|nextNLId
expr_stmt|;
comment|// Event id
name|columns
operator|=
name|columns
operator|+
literal|", \"EVENT_ID\""
expr_stmt|;
name|insertVal
operator|=
name|insertVal
operator|+
literal|","
operator|+
name|nextEventId
expr_stmt|;
comment|// Event time
name|columns
operator|=
name|columns
operator|+
literal|", \"EVENT_TIME\""
expr_stmt|;
name|insertVal
operator|=
name|insertVal
operator|+
literal|","
operator|+
name|now
argument_list|()
expr_stmt|;
comment|// Event type
name|columns
operator|=
name|columns
operator|+
literal|", \"EVENT_TYPE\""
expr_stmt|;
name|insertVal
operator|=
name|insertVal
operator|+
literal|", ?"
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Message
name|columns
operator|=
name|columns
operator|+
literal|", \"MESSAGE\""
expr_stmt|;
name|insertVal
operator|=
name|insertVal
operator|+
literal|", ?"
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Message format
name|columns
operator|=
name|columns
operator|+
literal|", \"MESSAGE_FORMAT\""
expr_stmt|;
name|insertVal
operator|=
name|insertVal
operator|+
literal|", ?"
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|event
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// Database name, optional
name|String
name|dbName
init|=
name|event
operator|.
name|getDbName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbName
operator|!=
literal|null
condition|)
block|{
assert|assert
name|dbName
operator|.
name|equals
argument_list|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
assert|;
name|columns
operator|=
name|columns
operator|+
literal|", \"DB_NAME\""
expr_stmt|;
name|insertVal
operator|=
name|insertVal
operator|+
literal|", ?"
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
comment|// Table name, optional
name|String
name|tableName
init|=
name|event
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
assert|assert
name|tableName
operator|.
name|equals
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
assert|;
name|columns
operator|=
name|columns
operator|+
literal|", \"TBL_NAME\""
expr_stmt|;
name|insertVal
operator|=
name|insertVal
operator|+
literal|", ?"
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// Catalog name, optional
name|String
name|catName
init|=
name|event
operator|.
name|getCatName
argument_list|()
decl_stmt|;
if|if
condition|(
name|catName
operator|!=
literal|null
condition|)
block|{
assert|assert
name|catName
operator|.
name|equals
argument_list|(
name|catName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
assert|;
name|columns
operator|=
name|columns
operator|+
literal|", \"CAT_NAME\""
expr_stmt|;
name|insertVal
operator|=
name|insertVal
operator|+
literal|", ?"
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|catName
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
literal|"insert into \"NOTIFICATION_LOG\" ("
operator|+
name|columns
operator|+
literal|") VALUES ("
operator|+
name|insertVal
operator|+
literal|")"
expr_stmt|;
name|pst
operator|=
name|sqlGenerator
operator|.
name|prepareStmtWithParameters
argument_list|(
name|dbConn
argument_list|,
name|s
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute insert<"
operator|+
name|s
operator|+
literal|"> with parameters ("
operator|+
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|params
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|pst
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// Set the DB_NOTIFICATION_EVENT_ID for future reference by other listeners.
if|if
condition|(
name|event
operator|.
name|isSetEventId
argument_list|()
condition|)
block|{
name|listenerEvent
operator|.
name|putParameter
argument_list|(
name|MetaStoreEventListenerConstants
operator|.
name|DB_NOTIFICATION_EVENT_ID_KEY_NAME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to add notification log"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeStmt
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|closeStmt
argument_list|(
name|pst
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Process this notification by adding it to metastore DB.    *    * @param event NotificationEvent is the object written to the metastore DB.    * @param listenerEvent ListenerEvent (from which NotificationEvent was based) used only to set the    *                      DB_NOTIFICATION_EVENT_ID_KEY_NAME for future reference by other listeners.    */
specifier|private
name|void
name|process
parameter_list|(
name|NotificationEvent
name|event
parameter_list|,
name|ListenerEvent
name|listenerEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|event
operator|.
name|setMessageFormat
argument_list|(
name|msgEncoder
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DbNotificationListener: Processing : {}:{}"
argument_list|,
name|event
operator|.
name|getEventId
argument_list|()
argument_list|,
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|getMSForConf
argument_list|(
name|conf
argument_list|)
operator|.
name|addNotificationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|// Set the DB_NOTIFICATION_EVENT_ID for future reference by other listeners.
if|if
condition|(
name|event
operator|.
name|isSetEventId
argument_list|()
condition|)
block|{
name|listenerEvent
operator|.
name|putParameter
argument_list|(
name|MetaStoreEventListenerConstants
operator|.
name|DB_NOTIFICATION_EVENT_ID_KEY_NAME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CleanerThread
extends|extends
name|Thread
block|{
specifier|private
name|RawStore
name|rs
decl_stmt|;
specifier|private
name|int
name|ttl
decl_stmt|;
specifier|private
name|long
name|sleepTime
decl_stmt|;
name|CleanerThread
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RawStore
name|rs
parameter_list|)
block|{
name|super
argument_list|(
literal|"DB-Notification-Cleaner"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rs
operator|=
name|rs
expr_stmt|;
name|setTimeToLive
argument_list|(
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_TTL
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|setCleanupInterval
argument_list|(
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|EVENT_DB_LISTENER_CLEAN_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|rs
operator|.
name|cleanNotificationEvents
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|rs
operator|.
name|cleanWriteNotificationEvents
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//catching exceptions here makes sure that the thread doesn't die in case of unexpected
comment|//exceptions
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception received while cleaning notifications. More details can be found in debug mode"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleaner thread done"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaner thread sleep interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setTimeToLive
parameter_list|(
name|long
name|configTtl
parameter_list|)
block|{
if|if
condition|(
name|configTtl
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|ttl
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|ttl
operator|=
operator|(
name|int
operator|)
name|configTtl
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setCleanupInterval
parameter_list|(
name|long
name|configInterval
parameter_list|)
block|{
name|sleepTime
operator|=
name|configInterval
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

