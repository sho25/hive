begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/*  * Test submission of concurrent job requests.  */
end_comment

begin_class
specifier|public
class|class
name|TestConcurrentJobRequests
extends|extends
name|ConcurrentJobRequestsTestBase
block|{
specifier|private
specifier|static
name|AppConfig
name|config
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|Main
name|main
init|=
operator|new
name|Main
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|config
operator|=
name|main
operator|.
name|getAppConfigInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentJobsStatusSuccess
parameter_list|()
block|{
try|try
block|{
name|JobRunnable
name|jobRunnable
init|=
name|ConcurrentJobsStatus
argument_list|(
literal|6
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|statusJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|4
argument_list|,
operator|new
name|QueueStatusBean
argument_list|(
literal|"job_1000"
argument_list|,
literal|"Job not found"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentListJobsSuccess
parameter_list|()
block|{
try|try
block|{
name|JobRunnable
name|jobRunnable
init|=
name|ConcurrentListJobs
argument_list|(
literal|6
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|listJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|4
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|JobItemBean
argument_list|>
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentSubmitJobsSuccess
parameter_list|()
block|{
try|try
block|{
name|JobRunnable
name|jobRunnable
init|=
name|SubmitConcurrentJobs
argument_list|(
literal|6
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"job_1000"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

