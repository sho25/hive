begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/*  * Helper class to generate mocked response.  */
end_comment

begin_class
specifier|public
class|class
name|MockAnswerTestHelper
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|Answer
argument_list|<
name|T
argument_list|>
name|getIOExceptionAnswer
parameter_list|()
block|{
return|return
operator|new
name|Answer
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"IOException raised manually."
argument_list|)
throw|;
block|}
block|}
return|;
block|}
specifier|public
name|Answer
argument_list|<
name|T
argument_list|>
name|getOutOfMemoryErrorAnswer
parameter_list|()
block|{
return|return
operator|new
name|Answer
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|OutOfMemoryError
block|{
throw|throw
operator|new
name|OutOfMemoryError
argument_list|(
literal|"OutOfMemoryError raised manually."
argument_list|)
throw|;
block|}
block|}
return|;
block|}
specifier|public
name|Answer
argument_list|<
name|T
argument_list|>
name|getDelayedResonseAnswer
parameter_list|(
specifier|final
name|int
name|delayInSeconds
parameter_list|,
specifier|final
name|T
name|response
parameter_list|)
block|{
return|return
operator|new
name|Answer
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
operator|*
name|delayInSeconds
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

