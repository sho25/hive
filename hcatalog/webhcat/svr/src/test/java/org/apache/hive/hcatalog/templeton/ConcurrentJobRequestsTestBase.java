begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
operator|.
name|TempletonControllerJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/*  * Base class for mocking job operations with concurrent requests.  */
end_comment

begin_class
specifier|public
class|class
name|ConcurrentJobRequestsTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConcurrentJobRequestsTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|private
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|MockAnswerTestHelper
argument_list|<
name|QueueStatusBean
argument_list|>
name|statusJobHelper
init|=
operator|new
name|MockAnswerTestHelper
argument_list|<
name|QueueStatusBean
argument_list|>
argument_list|()
decl_stmt|;
name|MockAnswerTestHelper
argument_list|<
name|QueueStatusBean
argument_list|>
name|killJobHelper
init|=
operator|new
name|MockAnswerTestHelper
argument_list|<
name|QueueStatusBean
argument_list|>
argument_list|()
decl_stmt|;
name|MockAnswerTestHelper
argument_list|<
name|List
argument_list|<
name|JobItemBean
argument_list|>
argument_list|>
name|listJobHelper
init|=
operator|new
name|MockAnswerTestHelper
argument_list|<
name|List
argument_list|<
name|JobItemBean
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|MockAnswerTestHelper
argument_list|<
name|Integer
argument_list|>
name|submitJobHelper
init|=
operator|new
name|MockAnswerTestHelper
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/*    * Waits for other threads to join and returns with its Id.    */
specifier|private
name|int
name|waitForAllThreadsToStart
parameter_list|(
name|JobRunnable
name|jobRunnable
parameter_list|,
name|int
name|poolThreadCount
parameter_list|)
block|{
name|int
name|currentId
init|=
name|jobRunnable
operator|.
name|threadStartCount
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for other threads with thread id: "
operator|+
name|currentId
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|/*        * We need a total of poolThreadCount + 1 threads to start at same. There are        * poolThreadCount threads in thread pool and another one which has started them.        * The thread which sees atomic counter as poolThreadCount+1 is the last thread`        * to join and wake up all threads to start all at once.        */
if|if
condition|(
name|currentId
operator|>
name|poolThreadCount
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waking up all threads: "
operator|+
name|currentId
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|lock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
operator|!
name|started
condition|)
block|{
try|try
block|{
name|this
operator|.
name|lock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{           }
block|}
block|}
block|}
return|return
name|currentId
return|;
block|}
specifier|public
name|JobRunnable
name|ConcurrentJobsStatus
parameter_list|(
specifier|final
name|int
name|threadCount
parameter_list|,
name|AppConfig
name|appConfig
parameter_list|,
specifier|final
name|boolean
name|killThreads
parameter_list|,
name|boolean
name|interruptThreads
parameter_list|,
specifier|final
name|Answer
argument_list|<
name|QueueStatusBean
argument_list|>
name|answer
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|QueueException
throws|,
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|BusyException
block|{
name|StatusDelegator
name|delegator
init|=
operator|new
name|StatusDelegator
argument_list|(
name|appConfig
argument_list|)
decl_stmt|;
specifier|final
name|StatusDelegator
name|mockDelegator
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|delegator
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|answer
argument_list|)
operator|.
name|when
argument_list|(
name|mockDelegator
argument_list|)
operator|.
name|getJobStatus
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|JobRunnable
name|statusJobRunnable
init|=
operator|new
name|JobRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|threadId
init|=
name|waitForAllThreadsToStart
argument_list|(
name|this
argument_list|,
name|threadCount
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started executing Job Status operation. ThreadId : "
operator|+
name|threadId
argument_list|)
expr_stmt|;
name|mockDelegator
operator|.
name|run
argument_list|(
literal|"admin"
argument_list|,
literal|"job_1000"
operator|+
name|threadId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|executeJobOperations
argument_list|(
name|statusJobRunnable
argument_list|,
name|threadCount
argument_list|,
name|killThreads
argument_list|,
name|interruptThreads
argument_list|)
expr_stmt|;
return|return
name|statusJobRunnable
return|;
block|}
specifier|public
name|JobRunnable
name|ConcurrentListJobs
parameter_list|(
specifier|final
name|int
name|threadCount
parameter_list|,
name|AppConfig
name|config
parameter_list|,
specifier|final
name|boolean
name|killThreads
parameter_list|,
name|boolean
name|interruptThreads
parameter_list|,
specifier|final
name|Answer
argument_list|<
name|List
argument_list|<
name|JobItemBean
argument_list|>
argument_list|>
name|answer
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|QueueException
throws|,
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|BusyException
block|{
name|ListDelegator
name|delegator
init|=
operator|new
name|ListDelegator
argument_list|(
name|config
argument_list|)
decl_stmt|;
specifier|final
name|ListDelegator
name|mockDelegator
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|delegator
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|answer
argument_list|)
operator|.
name|when
argument_list|(
name|mockDelegator
argument_list|)
operator|.
name|listJobs
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|JobRunnable
name|listJobRunnable
init|=
operator|new
name|JobRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|threadId
init|=
name|waitForAllThreadsToStart
argument_list|(
name|this
argument_list|,
name|threadCount
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started executing Job List operation. ThreadId : "
operator|+
name|threadId
argument_list|)
expr_stmt|;
name|mockDelegator
operator|.
name|run
argument_list|(
literal|"admin"
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|executeJobOperations
argument_list|(
name|listJobRunnable
argument_list|,
name|threadCount
argument_list|,
name|killThreads
argument_list|,
name|interruptThreads
argument_list|)
expr_stmt|;
return|return
name|listJobRunnable
return|;
block|}
specifier|public
name|JobRunnable
name|SubmitConcurrentJobs
parameter_list|(
specifier|final
name|int
name|threadCount
parameter_list|,
name|AppConfig
name|config
parameter_list|,
specifier|final
name|boolean
name|killThreads
parameter_list|,
name|boolean
name|interruptThreads
parameter_list|,
specifier|final
name|Answer
argument_list|<
name|Integer
argument_list|>
name|responseAnswer
parameter_list|,
specifier|final
name|Answer
argument_list|<
name|QueueStatusBean
argument_list|>
name|timeoutResponseAnswer
parameter_list|,
specifier|final
name|String
name|jobIdResponse
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|QueueException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|TimeoutException
throws|,
name|Exception
block|{
name|LauncherDelegator
name|delegator
init|=
operator|new
name|LauncherDelegator
argument_list|(
name|config
argument_list|)
decl_stmt|;
specifier|final
name|LauncherDelegator
name|mockDelegator
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|delegator
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|listArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TempletonControllerJob
name|mockCtrl
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TempletonControllerJob
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|jobIdResponse
argument_list|)
operator|.
name|when
argument_list|(
name|mockCtrl
argument_list|)
operator|.
name|getSubmittedId
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|mockCtrl
argument_list|)
operator|.
name|when
argument_list|(
name|mockDelegator
argument_list|)
operator|.
name|getTempletonController
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|responseAnswer
argument_list|)
operator|.
name|when
argument_list|(
name|mockDelegator
argument_list|)
operator|.
name|runTempletonControllerJob
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|TempletonControllerJob
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|timeoutResponseAnswer
argument_list|)
operator|.
name|when
argument_list|(
name|mockDelegator
argument_list|)
operator|.
name|killJob
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockDelegator
argument_list|)
operator|.
name|registerJob
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|JobRunnable
name|submitJobRunnable
init|=
operator|new
name|JobRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|threadId
init|=
name|waitForAllThreadsToStart
argument_list|(
name|this
argument_list|,
name|threadCount
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started executing Job Submit operation. ThreadId : "
operator|+
name|threadId
argument_list|)
expr_stmt|;
name|mockDelegator
operator|.
name|enqueueController
argument_list|(
literal|"admin"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
name|listArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|executeJobOperations
argument_list|(
name|submitJobRunnable
argument_list|,
name|threadCount
argument_list|,
name|killThreads
argument_list|,
name|interruptThreads
argument_list|)
expr_stmt|;
return|return
name|submitJobRunnable
return|;
block|}
specifier|public
name|void
name|executeJobOperations
parameter_list|(
name|JobRunnable
name|jobRunnable
parameter_list|,
name|int
name|threadCount
parameter_list|,
name|boolean
name|killThreads
parameter_list|,
name|boolean
name|interruptThreads
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|QueueException
throws|,
name|NotAuthorizedException
block|{
name|started
operator|=
literal|false
expr_stmt|;
name|ExecutorService
name|executorService
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|threadCount
argument_list|,
name|threadCount
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
name|jobRunnable
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitForAllThreadsToStart
argument_list|(
name|jobRunnable
argument_list|,
name|threadCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started all threads "
argument_list|)
expr_stmt|;
if|if
condition|(
name|killThreads
condition|)
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|interruptThreads
condition|)
block|{
for|for
control|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancelling the thread"
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/*      * For both graceful or forceful shutdown, wait for tasks to terminate such that      * appropriate exceptions are raised and stored in JobRunnable.exception.      */
if|if
condition|(
operator|!
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Force Shutting down the pool\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|killThreads
condition|)
block|{
comment|/*          * killThreads option has already done force shutdown. No need to do again.          */
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|abstract
class|class
name|JobRunnable
implements|implements
name|Runnable
block|{
specifier|public
specifier|volatile
name|Throwable
name|exception
init|=
literal|null
decl_stmt|;
specifier|public
name|AtomicInteger
name|threadStartCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

