begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/*  * Test submission of concurrent job requests with the controlled number of concurrent  * Requests and job request execution time outs. Verify that we get appropriate exceptions  * and exception message.  */
end_comment

begin_class
specifier|public
class|class
name|TestConcurrentJobRequestsThreadsAndTimeout
extends|extends
name|ConcurrentJobRequestsTestBase
block|{
specifier|private
specifier|static
name|AppConfig
name|config
decl_stmt|;
specifier|private
specifier|static
name|QueueStatusBean
name|statusBean
decl_stmt|;
specifier|private
specifier|static
name|String
name|statusTooManyRequestsExceptionMessage
decl_stmt|;
specifier|private
specifier|static
name|String
name|listTooManyRequestsExceptionMessage
decl_stmt|;
specifier|private
specifier|static
name|String
name|submitTooManyRequestsExceptionMessage
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|Main
name|main
init|=
operator|new
name|Main
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|config
operator|=
name|main
operator|.
name|getAppConfigInstance
argument_list|()
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|AppConfig
operator|.
name|JOB_STATUS_MAX_THREADS
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|AppConfig
operator|.
name|JOB_LIST_MAX_THREADS
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|AppConfig
operator|.
name|JOB_SUBMIT_MAX_THREADS
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|AppConfig
operator|.
name|JOB_SUBMIT_TIMEOUT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|AppConfig
operator|.
name|JOB_STATUS_TIMEOUT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|AppConfig
operator|.
name|JOB_LIST_TIMEOUT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|AppConfig
operator|.
name|JOB_TIMEOUT_TASK_RETRY_COUNT
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|AppConfig
operator|.
name|JOB_TIMEOUT_TASK_RETRY_INTERVAL
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|statusBean
operator|=
operator|new
name|QueueStatusBean
argument_list|(
literal|"job_1000"
argument_list|,
literal|"Job not found"
argument_list|)
expr_stmt|;
name|statusTooManyRequestsExceptionMessage
operator|=
literal|"Unable to service the status job request as "
operator|+
literal|"templeton service is busy with too many status job requests. "
operator|+
literal|"Please wait for some time before retrying the operation. "
operator|+
literal|"Please refer to the config templeton.parallellism.job.status "
operator|+
literal|"to configure concurrent requests."
expr_stmt|;
name|listTooManyRequestsExceptionMessage
operator|=
literal|"Unable to service the list job request as "
operator|+
literal|"templeton service is busy with too many list job requests. "
operator|+
literal|"Please wait for some time before retrying the operation. "
operator|+
literal|"Please refer to the config templeton.parallellism.job.list "
operator|+
literal|"to configure concurrent requests."
expr_stmt|;
name|submitTooManyRequestsExceptionMessage
operator|=
literal|"Unable to service the submit job request as "
operator|+
literal|"templeton service is busy with too many submit job requests. "
operator|+
literal|"Please wait for some time before retrying the operation. "
operator|+
literal|"Please refer to the config templeton.parallellism.job.submit "
operator|+
literal|"to configure concurrent requests."
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentJobsStatusTooManyRequestsException
parameter_list|()
block|{
try|try
block|{
name|JobRunnable
name|jobRunnable
init|=
name|ConcurrentJobsStatus
argument_list|(
literal|6
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|statusJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|4
argument_list|,
name|statusBean
argument_list|)
argument_list|)
decl_stmt|;
name|verifyTooManyRequestsException
argument_list|(
name|jobRunnable
operator|.
name|exception
argument_list|,
name|this
operator|.
name|statusTooManyRequestsExceptionMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentListJobsTooManyRequestsException
parameter_list|()
block|{
try|try
block|{
name|JobRunnable
name|jobRunnable
init|=
name|ConcurrentListJobs
argument_list|(
literal|6
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|listJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|4
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|JobItemBean
argument_list|>
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|verifyTooManyRequestsException
argument_list|(
name|jobRunnable
operator|.
name|exception
argument_list|,
name|this
operator|.
name|listTooManyRequestsExceptionMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentSubmitJobsTooManyRequestsException
parameter_list|()
block|{
try|try
block|{
name|JobRunnable
name|jobRunnable
init|=
name|SubmitConcurrentJobs
argument_list|(
literal|6
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1000"
argument_list|)
decl_stmt|;
name|verifyTooManyRequestsException
argument_list|(
name|jobRunnable
operator|.
name|exception
argument_list|,
name|this
operator|.
name|submitTooManyRequestsExceptionMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentJobsStatusTimeOutException
parameter_list|()
block|{
try|try
block|{
name|JobRunnable
name|jobRunnable
init|=
name|ConcurrentJobsStatus
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|statusJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|6
argument_list|,
name|statusBean
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|TimeoutException
argument_list|)
expr_stmt|;
name|String
name|expectedMessage
init|=
literal|"Status job request got timed out. Please wait for some time before "
operator|+
literal|"retrying the operation. Please refer to the config "
operator|+
literal|"templeton.job.status.timeout to configure job request time out."
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Verify that new job requests should succeed with no issues.        */
name|jobRunnable
operator|=
name|ConcurrentJobsStatus
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|statusJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
name|statusBean
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentListJobsTimeOutException
parameter_list|()
block|{
try|try
block|{
name|JobRunnable
name|jobRunnable
init|=
name|ConcurrentListJobs
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|listJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|6
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|JobItemBean
argument_list|>
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|TimeoutException
argument_list|)
expr_stmt|;
name|String
name|expectedMessage
init|=
literal|"List job request got timed out. Please wait for some time before "
operator|+
literal|"retrying the operation. Please refer to the config "
operator|+
literal|"templeton.job.list.timeout to configure job request time out."
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Verify that new job requests should succeed with no issues.        */
name|jobRunnable
operator|=
name|ConcurrentListJobs
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|listJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|JobItemBean
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentSubmitJobsTimeOutException
parameter_list|()
block|{
try|try
block|{
name|JobRunnable
name|jobRunnable
init|=
name|SubmitConcurrentJobs
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|)
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1000"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|QueueException
argument_list|)
expr_stmt|;
name|String
name|expectedMessage
init|=
literal|"Submit job request got timed out. Please wait for some time before "
operator|+
literal|"retrying the operation. Please refer to the config "
operator|+
literal|"templeton.job.submit.timeout to configure job request time out."
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * For submit operation, tasks are not cancelled. Verify that new job request        * should fail with TooManyRequestsException.        */
name|jobRunnable
operator|=
name|SubmitConcurrentJobs
argument_list|(
literal|1
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1000"
argument_list|)
expr_stmt|;
name|verifyTooManyRequestsException
argument_list|(
name|jobRunnable
operator|.
name|exception
argument_list|,
name|this
operator|.
name|submitTooManyRequestsExceptionMessage
argument_list|)
expr_stmt|;
comment|/*       * Sleep until all threads with clean up tasks are completed.       */
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|/*        * Now, tasks would have passed. Verify that new job requests should succeed with no issues.        */
name|jobRunnable
operator|=
name|SubmitConcurrentJobs
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1000"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentStatusJobsVerifyExceptions
parameter_list|()
block|{
try|try
block|{
comment|/*        * Trigger kill threads and verify we get InterruptedException and expected Message.        */
name|int
name|timeoutTaskDelay
init|=
literal|4
decl_stmt|;
name|JobRunnable
name|jobRunnable
init|=
name|ConcurrentJobsStatus
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|statusJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
name|timeoutTaskDelay
argument_list|,
name|statusBean
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|InterruptedException
argument_list|)
expr_stmt|;
name|String
name|expectedMessage
init|=
literal|"Status job request got interrupted. Please wait for some time before "
operator|+
literal|"retrying the operation."
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Interrupt all thread and verify we get InterruptedException and expected Message.        */
name|jobRunnable
operator|=
name|ConcurrentJobsStatus
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|statusJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
name|timeoutTaskDelay
argument_list|,
name|statusBean
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|InterruptedException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Raise custom exception like IOException and verify expected Message.        */
name|jobRunnable
operator|=
name|ConcurrentJobsStatus
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|statusJobHelper
operator|.
name|getIOExceptionAnswer
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
comment|/*        * Now new job requests should succeed as status operation has no cancel threads.        */
name|jobRunnable
operator|=
name|ConcurrentJobsStatus
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|statusJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
name|statusBean
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentListJobsVerifyExceptions
parameter_list|()
block|{
try|try
block|{
comment|/*        * Trigger kill threads and verify we get InterruptedException and expected Message.        */
name|int
name|timeoutTaskDelay
init|=
literal|4
decl_stmt|;
name|JobRunnable
name|jobRunnable
init|=
name|ConcurrentListJobs
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|listJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
name|timeoutTaskDelay
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|JobItemBean
argument_list|>
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|InterruptedException
argument_list|)
expr_stmt|;
name|String
name|expectedMessage
init|=
literal|"List job request got interrupted. Please wait for some time before "
operator|+
literal|"retrying the operation."
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Interrupt all thread and verify we get InterruptedException and expected Message.        */
name|jobRunnable
operator|=
name|ConcurrentListJobs
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|listJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
name|timeoutTaskDelay
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|JobItemBean
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|InterruptedException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Raise custom exception like IOException and verify expected Message.        */
name|jobRunnable
operator|=
name|ConcurrentListJobs
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|listJobHelper
operator|.
name|getIOExceptionAnswer
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
comment|/*        * Now new job requests should succeed as list operation has no cancel threads.        */
name|jobRunnable
operator|=
name|ConcurrentListJobs
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|listJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|JobItemBean
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|ConcurrentSubmitJobsVerifyExceptions
parameter_list|()
block|{
try|try
block|{
name|int
name|timeoutTaskDelay
init|=
literal|4
decl_stmt|;
comment|/*        * Raise custom exception like IOException and verify expected Message.        * This should not invoke cancel operation.        */
name|JobRunnable
name|jobRunnable
init|=
name|SubmitConcurrentJobs
argument_list|(
literal|1
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getIOExceptionAnswer
argument_list|()
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
name|timeoutTaskDelay
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1002"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|QueueException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"IOException raised manually."
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Raise custom exception like IOException and verify expected Message.        * This should not invoke cancel operation.        */
name|jobRunnable
operator|=
name|SubmitConcurrentJobs
argument_list|(
literal|1
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getOutOfMemoryErrorAnswer
argument_list|()
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
name|timeoutTaskDelay
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1003"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|QueueException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError raised manually."
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Trigger kill threads and verify that we get InterruptedException and expected        * Message. This should raise 3 kill operations and ensure that retries keep the time out        * occupied for 4 sec.        */
name|jobRunnable
operator|=
name|SubmitConcurrentJobs
argument_list|(
literal|3
argument_list|,
name|config
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
name|timeoutTaskDelay
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1000"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|QueueException
argument_list|)
expr_stmt|;
name|String
name|expectedMessage
init|=
literal|"Submit job request got interrupted. Please wait for some time "
operator|+
literal|"before retrying the operation."
decl_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Interrupt all threads and verify we get InterruptedException and expected        * Message. Also raise 2 kill operations and ensure that retries keep the time out        * occupied for 4 sec.        */
name|jobRunnable
operator|=
name|SubmitConcurrentJobs
argument_list|(
literal|2
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|submitJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1001"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|instanceof
name|QueueException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * For submit operation, tasks are not cancelled. Verify that new job request        * should fail with TooManyRequestsException.        */
name|jobRunnable
operator|=
name|SubmitConcurrentJobs
argument_list|(
literal|1
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1002"
argument_list|)
expr_stmt|;
name|verifyTooManyRequestsException
argument_list|(
name|jobRunnable
operator|.
name|exception
argument_list|,
name|this
operator|.
name|submitTooManyRequestsExceptionMessage
argument_list|)
expr_stmt|;
comment|/*        * Sleep until all threads with clean up tasks are completed. 2 seconds completing task        * and 1 sec grace period.        */
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|timeoutTaskDelay
operator|+
literal|2
operator|+
literal|1
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|/*        * Now new job requests should succeed as all cancel threads would have completed.        */
name|jobRunnable
operator|=
name|SubmitConcurrentJobs
argument_list|(
literal|5
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|submitJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|killJobHelper
operator|.
name|getDelayedResonseAnswer
argument_list|(
literal|0
argument_list|,
name|statusBean
argument_list|)
argument_list|,
literal|"job_1004"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunnable
operator|.
name|exception
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyTooManyRequestsException
parameter_list|(
name|Throwable
name|exception
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TooManyRequestsException
argument_list|)
expr_stmt|;
name|TooManyRequestsException
name|ex
init|=
operator|(
name|TooManyRequestsException
operator|)
name|exception
decl_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|httpCode
operator|==
name|TooManyRequestsException
operator|.
name|TOO_MANY_REQUESTS_429
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

