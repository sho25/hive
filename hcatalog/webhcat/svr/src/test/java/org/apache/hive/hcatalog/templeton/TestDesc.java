begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_comment
comment|/**  * TestDesc - Test the desc objects that are correctly converted to  * and from json.  This also sets every field of the TableDesc object.  */
end_comment

begin_class
specifier|public
class|class
name|TestDesc
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testTableDesc
parameter_list|()
throws|throws
name|Exception
block|{
name|TableDesc
name|td
init|=
name|buildTableDesc
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|toJson
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|length
argument_list|()
operator|>
literal|100
argument_list|)
expr_stmt|;
name|TableDesc
name|tdCopy
init|=
operator|(
name|TableDesc
operator|)
name|fromJson
argument_list|(
name|json
argument_list|,
name|TableDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|td
argument_list|,
name|tdCopy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TableDesc
name|buildTableDesc
parameter_list|()
block|{
name|TableDesc
name|x
init|=
operator|new
name|TableDesc
argument_list|()
decl_stmt|;
name|x
operator|.
name|group
operator|=
literal|"staff"
expr_stmt|;
name|x
operator|.
name|permissions
operator|=
literal|"755"
expr_stmt|;
name|x
operator|.
name|external
operator|=
literal|true
expr_stmt|;
name|x
operator|.
name|ifNotExists
operator|=
literal|true
expr_stmt|;
name|x
operator|.
name|table
operator|=
literal|"a_table"
expr_stmt|;
name|x
operator|.
name|comment
operator|=
literal|"a comment"
expr_stmt|;
name|x
operator|.
name|columns
operator|=
name|buildColumns
argument_list|()
expr_stmt|;
name|x
operator|.
name|partitionedBy
operator|=
name|buildPartitionedBy
argument_list|()
expr_stmt|;
name|x
operator|.
name|clusteredBy
operator|=
name|buildClusterBy
argument_list|()
expr_stmt|;
name|x
operator|.
name|format
operator|=
name|buildStorageFormat
argument_list|()
expr_stmt|;
name|x
operator|.
name|location
operator|=
literal|"hdfs://localhost:9000/user/me/a_table"
expr_stmt|;
name|x
operator|.
name|tableProperties
operator|=
name|buildGenericProperties
argument_list|()
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
name|List
argument_list|<
name|ColumnDesc
argument_list|>
name|buildColumns
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ColumnDesc
argument_list|>
name|x
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDesc
argument_list|>
argument_list|()
decl_stmt|;
name|x
operator|.
name|add
argument_list|(
operator|new
name|ColumnDesc
argument_list|(
literal|"id"
argument_list|,
literal|"bigint"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|add
argument_list|(
operator|new
name|ColumnDesc
argument_list|(
literal|"price"
argument_list|,
literal|"float"
argument_list|,
literal|"The unit price"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|add
argument_list|(
operator|new
name|ColumnDesc
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|,
literal|"The item name"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
name|List
argument_list|<
name|ColumnDesc
argument_list|>
name|buildPartitionedBy
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ColumnDesc
argument_list|>
name|x
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDesc
argument_list|>
argument_list|()
decl_stmt|;
name|x
operator|.
name|add
argument_list|(
operator|new
name|ColumnDesc
argument_list|(
literal|"country"
argument_list|,
literal|"string"
argument_list|,
literal|"The country of origin"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
name|TableDesc
operator|.
name|ClusteredByDesc
name|buildClusterBy
parameter_list|()
block|{
name|TableDesc
operator|.
name|ClusteredByDesc
name|x
init|=
operator|new
name|TableDesc
operator|.
name|ClusteredByDesc
argument_list|()
decl_stmt|;
name|x
operator|.
name|columnNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|x
operator|.
name|columnNames
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|x
operator|.
name|sortedBy
operator|=
name|buildSortedBy
argument_list|()
expr_stmt|;
name|x
operator|.
name|numberOfBuckets
operator|=
literal|16
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
name|List
argument_list|<
name|TableDesc
operator|.
name|ClusterSortOrderDesc
argument_list|>
name|buildSortedBy
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|TableDesc
operator|.
name|ClusterSortOrderDesc
argument_list|>
name|x
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
operator|.
name|ClusterSortOrderDesc
argument_list|>
argument_list|()
decl_stmt|;
name|x
operator|.
name|add
argument_list|(
operator|new
name|TableDesc
operator|.
name|ClusterSortOrderDesc
argument_list|(
literal|"id"
argument_list|,
name|TableDesc
operator|.
name|SortDirectionDesc
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
name|TableDesc
operator|.
name|StorageFormatDesc
name|buildStorageFormat
parameter_list|()
block|{
name|TableDesc
operator|.
name|StorageFormatDesc
name|x
init|=
operator|new
name|TableDesc
operator|.
name|StorageFormatDesc
argument_list|()
decl_stmt|;
name|x
operator|.
name|rowFormat
operator|=
name|buildRowFormat
argument_list|()
expr_stmt|;
name|x
operator|.
name|storedAs
operator|=
literal|"rcfile"
expr_stmt|;
name|x
operator|.
name|storedBy
operator|=
name|buildStoredBy
argument_list|()
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
name|TableDesc
operator|.
name|RowFormatDesc
name|buildRowFormat
parameter_list|()
block|{
name|TableDesc
operator|.
name|RowFormatDesc
name|x
init|=
operator|new
name|TableDesc
operator|.
name|RowFormatDesc
argument_list|()
decl_stmt|;
name|x
operator|.
name|fieldsTerminatedBy
operator|=
literal|"\u0001"
expr_stmt|;
name|x
operator|.
name|collectionItemsTerminatedBy
operator|=
literal|"\u0002"
expr_stmt|;
name|x
operator|.
name|mapKeysTerminatedBy
operator|=
literal|"\u0003"
expr_stmt|;
name|x
operator|.
name|linesTerminatedBy
operator|=
literal|"\u0004"
expr_stmt|;
name|x
operator|.
name|serde
operator|=
name|buildSerde
argument_list|()
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
name|TableDesc
operator|.
name|SerdeDesc
name|buildSerde
parameter_list|()
block|{
name|TableDesc
operator|.
name|SerdeDesc
name|x
init|=
operator|new
name|TableDesc
operator|.
name|SerdeDesc
argument_list|()
decl_stmt|;
name|x
operator|.
name|name
operator|=
literal|"org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe"
expr_stmt|;
name|x
operator|.
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|x
operator|.
name|properties
operator|.
name|put
argument_list|(
literal|"field.delim"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
name|TableDesc
operator|.
name|StoredByDesc
name|buildStoredBy
parameter_list|()
block|{
name|TableDesc
operator|.
name|StoredByDesc
name|x
init|=
operator|new
name|TableDesc
operator|.
name|StoredByDesc
argument_list|()
decl_stmt|;
name|x
operator|.
name|className
operator|=
literal|"org.apache.hadoop.hive.hbase.HBaseStorageHandler"
expr_stmt|;
name|x
operator|.
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|x
operator|.
name|properties
operator|.
name|put
argument_list|(
literal|"hbase.columns.mapping"
argument_list|,
literal|"cf:string"
argument_list|)
expr_stmt|;
name|x
operator|.
name|properties
operator|.
name|put
argument_list|(
literal|"hbase.table.name"
argument_list|,
literal|"hbase_table_0"
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildGenericProperties
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|x
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|x
operator|.
name|put
argument_list|(
literal|"carmas"
argument_list|,
literal|"evil"
argument_list|)
expr_stmt|;
name|x
operator|.
name|put
argument_list|(
literal|"rachel"
argument_list|,
literal|"better"
argument_list|)
expr_stmt|;
name|x
operator|.
name|put
argument_list|(
literal|"ctdean"
argument_list|,
literal|"angelic"
argument_list|)
expr_stmt|;
name|x
operator|.
name|put
argument_list|(
literal|"paul"
argument_list|,
literal|"dangerously unbalanced"
argument_list|)
expr_stmt|;
name|x
operator|.
name|put
argument_list|(
literal|"dra"
argument_list|,
literal|"organic"
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|private
name|String
name|toJson
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|writeValue
argument_list|(
name|out
argument_list|,
name|obj
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Object
name|fromJson
parameter_list|(
name|String
name|json
parameter_list|,
name|Class
name|klass
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|klass
argument_list|)
return|;
block|}
block|}
end_class

end_unit

