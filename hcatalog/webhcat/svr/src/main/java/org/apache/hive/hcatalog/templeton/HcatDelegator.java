begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|ExecuteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
operator|.
name|TempletonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_comment
comment|/**  * Run hcat on the local server using the ExecService.  This is  * the backend of the ddl web service.  */
end_comment

begin_class
specifier|public
class|class
name|HcatDelegator
extends|extends
name|LauncherDelegator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HcatDelegator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExecService
name|execService
decl_stmt|;
specifier|public
name|HcatDelegator
parameter_list|(
name|AppConfig
name|appConf
parameter_list|,
name|ExecService
name|execService
parameter_list|)
block|{
name|super
argument_list|(
name|appConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|execService
operator|=
name|execService
expr_stmt|;
block|}
comment|/**    * Run the local hcat executable.    */
specifier|public
name|ExecBean
name|run
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|exec
parameter_list|,
name|boolean
name|format
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|permissions
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|SecureProxySupport
name|proxy
init|=
operator|new
name|SecureProxySupport
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|makeArgs
argument_list|(
name|exec
argument_list|,
name|format
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|open
argument_list|(
name|user
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
comment|// Setup the hadoop vars to specify the user.
name|String
name|cp
init|=
name|makeOverrideClasspath
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|TempletonUtils
operator|.
name|hadoopUserEnv
argument_list|(
name|user
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|addEnv
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|addArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|appConf
operator|.
name|clusterHcat
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".py"
argument_list|)
condition|)
block|{
return|return
name|execService
operator|.
name|run
argument_list|(
name|appConf
operator|.
name|clusterPython
argument_list|()
argument_list|,
name|args
argument_list|,
name|env
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|execService
operator|.
name|run
argument_list|(
name|appConf
operator|.
name|clusterHcat
argument_list|()
argument_list|,
name|args
argument_list|,
name|env
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|makeArgs
parameter_list|(
name|String
name|exec
parameter_list|,
name|boolean
name|format
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|permissions
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|appConf
operator|.
name|clusterHcat
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".py"
argument_list|)
condition|)
block|{
comment|// hcat.py will become the first argument pass to command "python"
name|args
operator|.
name|add
argument_list|(
name|appConf
operator|.
name|clusterHcat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|'"'
operator|+
name|exec
operator|+
literal|'"'
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-g"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|permissions
argument_list|)
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-D"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"hive.ddl.output.format=json"
argument_list|)
expr_stmt|;
comment|// Use both args to ease development.  Delete this one on
comment|// May 1.
name|args
operator|.
name|add
argument_list|(
literal|"-D"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"hive.format=json"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Main.getAppConfigInstance().get(AppConfig.UNIT_TEST_MODE)="
operator|+
name|Main
operator|.
name|getAppConfigInstance
argument_list|()
operator|.
name|get
argument_list|(
name|AppConfig
operator|.
name|UNIT_TEST_MODE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|/*when running in unit test mode, pass this property to HCat,       which will in turn pass it to Hive to make sure that Hive       tries to write to a directory that exists.*/
name|args
operator|.
name|add
argument_list|(
literal|"-D"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"hive.metastore.warehouse.dir="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|args
return|;
block|}
comment|/**    * Return a json description of the database.    */
specifier|public
name|Response
name|descDatabase
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|boolean
name|extended
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
literal|"desc database "
operator|+
name|db
operator|+
literal|"; "
decl_stmt|;
if|if
condition|(
name|extended
condition|)
name|exec
operator|=
literal|"desc database extended "
operator|+
name|db
operator|+
literal|"; "
expr_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to describe database: "
operator|+
name|db
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return a json "show databases like".  This will return a list of    * databases.    */
specifier|public
name|Response
name|listDatabases
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|dbPattern
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"show databases like '%s';"
argument_list|,
name|dbPattern
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to show databases for: "
operator|+
name|dbPattern
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create a database with the given name    */
specifier|public
name|Response
name|createDatabase
parameter_list|(
name|String
name|user
parameter_list|,
name|DatabaseDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
literal|"create database"
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|ifNotExists
condition|)
name|exec
operator|+=
literal|" if not exists"
expr_stmt|;
name|exec
operator|+=
literal|" "
operator|+
name|desc
operator|.
name|database
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|comment
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" comment '%s'"
argument_list|,
name|desc
operator|.
name|comment
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|location
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" location '%s'"
argument_list|,
name|desc
operator|.
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|properties
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" with dbproperties (%s)"
argument_list|,
name|makePropertiesStatement
argument_list|(
name|desc
operator|.
name|properties
argument_list|)
argument_list|)
expr_stmt|;
name|exec
operator|+=
literal|";"
expr_stmt|;
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|desc
operator|.
name|group
argument_list|,
name|desc
operator|.
name|permissions
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|desc
operator|.
name|database
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Drop the given database    */
specifier|public
name|Response
name|dropDatabase
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|String
name|option
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|permissions
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
literal|"drop database"
decl_stmt|;
if|if
condition|(
name|ifExists
condition|)
name|exec
operator|+=
literal|" if exists"
expr_stmt|;
name|exec
operator|+=
literal|" "
operator|+
name|db
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|option
argument_list|)
condition|)
name|exec
operator|+=
literal|" "
operator|+
name|option
expr_stmt|;
name|exec
operator|+=
literal|";"
expr_stmt|;
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a table.    */
specifier|public
name|Response
name|createTable
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|TableDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|makeCreateTable
argument_list|(
name|db
argument_list|,
name|desc
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|desc
operator|.
name|group
argument_list|,
name|desc
operator|.
name|permissions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|desc
operator|.
name|table
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to create table: "
operator|+
name|desc
operator|.
name|table
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create a table like another.    */
specifier|public
name|Response
name|createTableLike
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|TableLikeDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; create"
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|external
condition|)
name|exec
operator|+=
literal|" external"
expr_stmt|;
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" table %s like %s"
argument_list|,
name|desc
operator|.
name|newTable
argument_list|,
name|desc
operator|.
name|existingTable
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|location
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" location '%s'"
argument_list|,
name|desc
operator|.
name|location
argument_list|)
expr_stmt|;
name|exec
operator|+=
literal|";"
expr_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|desc
operator|.
name|group
argument_list|,
name|desc
operator|.
name|permissions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|desc
operator|.
name|newTable
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to create table: "
operator|+
name|desc
operator|.
name|newTable
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return a json description of the table.    */
specifier|public
name|Response
name|descTable
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|boolean
name|extended
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
literal|"use "
operator|+
name|db
operator|+
literal|"; "
decl_stmt|;
if|if
condition|(
name|extended
condition|)
name|exec
operator|+=
literal|"desc extended "
operator|+
name|table
operator|+
literal|"; "
expr_stmt|;
else|else
name|exec
operator|+=
literal|"desc "
operator|+
name|table
operator|+
literal|"; "
expr_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to describe database: "
operator|+
name|db
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return a json "show table like".  This will return a list of    * tables.    */
specifier|public
name|Response
name|listTables
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; show tables like '%s';"
argument_list|,
name|db
argument_list|,
name|tablePattern
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to show tables for: "
operator|+
name|tablePattern
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return a json "show table extended like" with extra info from "desc exteded"    * This will return table with exact name match.    */
specifier|public
name|Response
name|descExtendedTable
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; show table extended like %s;"
argument_list|,
name|db
argument_list|,
name|table
argument_list|)
decl_stmt|;
try|try
block|{
comment|//get detailed "tableInfo" from query "desc extended tablename;"
name|Response
name|res0
init|=
name|descTable
argument_list|(
name|user
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|res0
operator|.
name|getStatus
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|OK_200
condition|)
return|return
name|res0
return|;
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|res0
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|Map
name|tableInfo
init|=
operator|(
name|Map
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"tableInfo"
argument_list|)
decl_stmt|;
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|)
decl_stmt|;
name|JsonBuilder
name|jb
init|=
name|JsonBuilder
operator|.
name|create
argument_list|(
name|singleTable
argument_list|(
name|res
argument_list|,
name|table
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|(
literal|"tableName"
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"retention"
argument_list|,
name|tableInfo
operator|.
name|get
argument_list|(
literal|"retention"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"sd"
argument_list|,
name|tableInfo
operator|.
name|get
argument_list|(
literal|"sd"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"parameters"
argument_list|,
name|tableInfo
operator|.
name|get
argument_list|(
literal|"parameters"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"parametersSize"
argument_list|,
name|tableInfo
operator|.
name|get
argument_list|(
literal|"parametersSize"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"tableType"
argument_list|,
name|tableInfo
operator|.
name|get
argument_list|(
literal|"tableType"
argument_list|)
argument_list|)
decl_stmt|;
comment|// If we can get them from HDFS, add group and permission
name|String
name|loc
init|=
operator|(
name|String
operator|)
name|jb
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
operator|&&
name|loc
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
name|loc
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|jb
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|jb
operator|.
name|put
argument_list|(
literal|"permission"
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" Couldn't get permissions for "
operator|+
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jb
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to show table: "
operator|+
name|table
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|// Format a list of Columns for a create statement
specifier|private
name|String
name|makeCols
parameter_list|(
name|List
argument_list|<
name|ColumnDesc
argument_list|>
name|cols
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnDesc
name|col
range|:
name|cols
control|)
name|res
operator|.
name|add
argument_list|(
name|makeOneCol
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|res
argument_list|,
literal|", "
argument_list|)
return|;
block|}
comment|// Format a Column for a create statement
specifier|private
name|String
name|makeOneCol
parameter_list|(
name|ColumnDesc
name|col
parameter_list|)
block|{
name|String
name|res
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s %s"
argument_list|,
name|col
operator|.
name|name
argument_list|,
name|col
operator|.
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|col
operator|.
name|comment
argument_list|)
condition|)
name|res
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" comment '%s'"
argument_list|,
name|col
operator|.
name|comment
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|// Make a create table statement
specifier|private
name|String
name|makeCreateTable
parameter_list|(
name|String
name|db
parameter_list|,
name|TableDesc
name|desc
parameter_list|)
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; create"
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|external
condition|)
name|exec
operator|+=
literal|" external"
expr_stmt|;
name|exec
operator|+=
literal|" table"
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|ifNotExists
condition|)
name|exec
operator|+=
literal|" if not exists"
expr_stmt|;
name|exec
operator|+=
literal|" "
operator|+
name|desc
operator|.
name|table
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|columns
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|"(%s)"
argument_list|,
name|makeCols
argument_list|(
name|desc
operator|.
name|columns
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|comment
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" comment '%s'"
argument_list|,
name|desc
operator|.
name|comment
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|partitionedBy
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" partitioned by (%s)"
argument_list|,
name|makeCols
argument_list|(
name|desc
operator|.
name|partitionedBy
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|clusteredBy
operator|!=
literal|null
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" clustered by %s"
argument_list|,
name|makeClusteredBy
argument_list|(
name|desc
operator|.
name|clusteredBy
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|format
operator|!=
literal|null
condition|)
name|exec
operator|+=
literal|" "
operator|+
name|makeStorageFormat
argument_list|(
name|desc
operator|.
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|location
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" location '%s'"
argument_list|,
name|desc
operator|.
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|tableProperties
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" tblproperties (%s)"
argument_list|,
name|makePropertiesStatement
argument_list|(
name|desc
operator|.
name|tableProperties
argument_list|)
argument_list|)
expr_stmt|;
name|exec
operator|+=
literal|";"
expr_stmt|;
return|return
name|exec
return|;
block|}
comment|// Format a clustered by statement
specifier|private
name|String
name|makeClusteredBy
parameter_list|(
name|TableDesc
operator|.
name|ClusteredByDesc
name|desc
parameter_list|)
block|{
name|String
name|res
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s)"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|desc
operator|.
name|columnNames
argument_list|,
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|sortedBy
argument_list|)
condition|)
name|res
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" sorted by (%s)"
argument_list|,
name|makeClusterSortList
argument_list|(
name|desc
operator|.
name|sortedBy
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" into %s buckets"
argument_list|,
name|desc
operator|.
name|numberOfBuckets
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|// Format a sorted by statement
specifier|private
name|String
name|makeClusterSortList
parameter_list|(
name|List
argument_list|<
name|TableDesc
operator|.
name|ClusterSortOrderDesc
argument_list|>
name|descs
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableDesc
operator|.
name|ClusterSortOrderDesc
name|desc
range|:
name|descs
control|)
name|res
operator|.
name|add
argument_list|(
name|makeOneClusterSort
argument_list|(
name|desc
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|res
argument_list|,
literal|", "
argument_list|)
return|;
block|}
comment|// Format a single cluster sort statement
specifier|private
name|String
name|makeOneClusterSort
parameter_list|(
name|TableDesc
operator|.
name|ClusterSortOrderDesc
name|desc
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s %s"
argument_list|,
name|desc
operator|.
name|columnName
argument_list|,
name|desc
operator|.
name|order
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|// Format the storage format statements
specifier|private
name|String
name|makeStorageFormat
parameter_list|(
name|TableDesc
operator|.
name|StorageFormatDesc
name|desc
parameter_list|)
block|{
name|String
name|res
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|rowFormat
operator|!=
literal|null
condition|)
name|res
operator|+=
name|makeRowFormat
argument_list|(
name|desc
operator|.
name|rowFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|storedAs
argument_list|)
condition|)
name|res
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" stored as %s"
argument_list|,
name|desc
operator|.
name|storedAs
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|storedBy
operator|!=
literal|null
condition|)
name|res
operator|+=
literal|" "
operator|+
name|makeStoredBy
argument_list|(
name|desc
operator|.
name|storedBy
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|// Format the row format statement
specifier|private
name|String
name|makeRowFormat
parameter_list|(
name|TableDesc
operator|.
name|RowFormatDesc
name|desc
parameter_list|)
block|{
name|String
name|res
init|=
name|makeTermBy
argument_list|(
name|desc
operator|.
name|fieldsTerminatedBy
argument_list|,
literal|"fields"
argument_list|)
operator|+
name|makeTermBy
argument_list|(
name|desc
operator|.
name|collectionItemsTerminatedBy
argument_list|,
literal|"collection items"
argument_list|)
operator|+
name|makeTermBy
argument_list|(
name|desc
operator|.
name|mapKeysTerminatedBy
argument_list|,
literal|"map keys"
argument_list|)
operator|+
name|makeTermBy
argument_list|(
name|desc
operator|.
name|linesTerminatedBy
argument_list|,
literal|"lines"
argument_list|)
decl_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|res
argument_list|)
condition|)
return|return
literal|"row format delimited"
operator|+
name|res
return|;
elseif|else
if|if
condition|(
name|desc
operator|.
name|serde
operator|!=
literal|null
condition|)
return|return
name|makeSerdeFormat
argument_list|(
name|desc
operator|.
name|serde
argument_list|)
return|;
else|else
return|return
literal|""
return|;
block|}
comment|// A row format terminated by clause
specifier|private
name|String
name|makeTermBy
parameter_list|(
name|String
name|sep
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|sep
argument_list|)
condition|)
return|return
name|String
operator|.
name|format
argument_list|(
literal|" %s terminated by '%s'"
argument_list|,
name|fieldName
argument_list|,
name|sep
argument_list|)
return|;
else|else
return|return
literal|""
return|;
block|}
comment|// Format the serde statement
specifier|private
name|String
name|makeSerdeFormat
parameter_list|(
name|TableDesc
operator|.
name|SerdeDesc
name|desc
parameter_list|)
block|{
name|String
name|res
init|=
literal|"row format serde "
operator|+
name|desc
operator|.
name|name
decl_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|properties
argument_list|)
condition|)
name|res
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" with serdeproperties (%s)"
argument_list|,
name|makePropertiesStatement
argument_list|(
name|desc
operator|.
name|properties
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|// Format the properties statement
specifier|private
name|String
name|makePropertiesStatement
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
name|res
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"'%s'='%s'"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|res
argument_list|,
literal|", "
argument_list|)
return|;
block|}
comment|// Format the stored by statement
specifier|private
name|String
name|makeStoredBy
parameter_list|(
name|TableDesc
operator|.
name|StoredByDesc
name|desc
parameter_list|)
block|{
name|String
name|res
init|=
name|String
operator|.
name|format
argument_list|(
literal|"stored by '%s'"
argument_list|,
name|desc
operator|.
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|properties
argument_list|)
condition|)
name|res
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" with serdeproperties (%s)"
argument_list|,
name|makePropertiesStatement
argument_list|(
name|desc
operator|.
name|properties
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|// Pull out the first table from the "show extended" json.
specifier|private
name|String
name|singleTable
parameter_list|(
name|String
name|json
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
name|obj
init|=
name|JsonBuilder
operator|.
name|jsonToMap
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|JsonBuilder
operator|.
name|isError
argument_list|(
name|obj
argument_list|)
condition|)
return|return
name|json
return|;
name|List
name|tables
init|=
operator|(
name|List
operator|)
name|obj
operator|.
name|get
argument_list|(
literal|"tables"
argument_list|)
decl_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|tables
argument_list|)
condition|)
return|return
name|JsonBuilder
operator|.
name|mapToJson
argument_list|(
name|tables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
else|else
block|{
return|return
name|JsonBuilder
operator|.
name|createError
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|format
argument_list|(
name|table
argument_list|)
argument_list|,
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getErrorCode
argument_list|()
argument_list|)
operator|.
name|buildJson
argument_list|()
return|;
block|}
block|}
comment|/**    * Drop a table.    */
specifier|public
name|Response
name|dropTable
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|permissions
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; drop table"
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifExists
condition|)
name|exec
operator|+=
literal|" if exists"
expr_stmt|;
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" %s;"
argument_list|,
name|table
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to drop table: "
operator|+
name|table
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Rename a table.    */
specifier|public
name|Response
name|renameTable
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|oldTable
parameter_list|,
name|String
name|newTable
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|permissions
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; alter table %s rename to %s;"
argument_list|,
name|db
argument_list|,
name|oldTable
argument_list|,
name|newTable
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|newTable
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to rename table: "
operator|+
name|oldTable
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Describe one table property.    */
specifier|public
name|Response
name|descTableProperty
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|property
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|Response
name|res
init|=
name|descTable
argument_list|(
name|user
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|getStatus
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|OK_200
condition|)
return|return
name|res
return|;
name|Map
name|props
init|=
name|tableProperties
argument_list|(
name|res
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|found
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|found
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|found
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|JsonBuilder
operator|.
name|create
argument_list|()
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"property"
argument_list|,
name|found
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * List the table properties.    */
specifier|public
name|Response
name|listTableProperties
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|Response
name|res
init|=
name|descTable
argument_list|(
name|user
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|getStatus
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|OK_200
condition|)
return|return
name|res
return|;
name|Map
name|props
init|=
name|tableProperties
argument_list|(
name|res
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|()
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"properties"
argument_list|,
name|props
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Add one table property.    */
specifier|public
name|Response
name|addOneTableProperty
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|TablePropertyDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; alter table %s set tblproperties ('%s'='%s');"
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|desc
operator|.
name|name
argument_list|,
name|desc
operator|.
name|value
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|desc
operator|.
name|group
argument_list|,
name|desc
operator|.
name|permissions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"property"
argument_list|,
name|desc
operator|.
name|name
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to add table property: "
operator|+
name|table
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Map
name|tableProperties
parameter_list|(
name|Object
name|extendedTable
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|extendedTable
operator|instanceof
name|Map
operator|)
condition|)
return|return
literal|null
return|;
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|extendedTable
decl_stmt|;
name|Map
name|tableInfo
init|=
operator|(
name|Map
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"tableInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Map
operator|)
name|tableInfo
operator|.
name|get
argument_list|(
literal|"parameters"
argument_list|)
return|;
block|}
comment|/**    * Return a json description of the partitions.    */
specifier|public
name|Response
name|listPartitions
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
literal|"use "
operator|+
name|db
operator|+
literal|"; "
decl_stmt|;
name|exec
operator|+=
literal|"show partitions "
operator|+
name|table
operator|+
literal|"; "
expr_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to show partitions for table: "
operator|+
name|table
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return a json description of one partition.    */
specifier|public
name|Response
name|descOnePartition
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|partition
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
literal|"use "
operator|+
name|db
operator|+
literal|"; "
decl_stmt|;
name|exec
operator|+=
literal|"show table extended like "
operator|+
name|table
operator|+
literal|" partition ("
operator|+
name|partition
operator|+
literal|"); "
expr_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|singleTable
argument_list|(
name|res
argument_list|,
name|table
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|(
literal|"tableName"
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"partition"
argument_list|,
name|partition
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|execBean
operator|.
name|stderr
operator|.
name|contains
argument_list|(
literal|"SemanticException"
argument_list|)
operator|&&
name|e
operator|.
name|execBean
operator|.
name|stderr
operator|.
name|contains
argument_list|(
literal|"Partition not found"
argument_list|)
condition|)
block|{
name|String
name|emsg
init|=
literal|"Partition "
operator|+
name|partition
operator|+
literal|" for table "
operator|+
name|table
operator|+
literal|" does not exist"
operator|+
name|db
operator|+
literal|"."
operator|+
name|table
operator|+
literal|" does not exist"
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|()
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|emsg
argument_list|)
comment|//this error should really be produced by Hive (DDLTask)
operator|.
name|put
argument_list|(
literal|"errorCode"
argument_list|,
name|ErrorMsg
operator|.
name|INVALID_PARTITION
operator|.
name|getErrorCode
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"partition"
argument_list|,
name|partition
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to show partition: "
operator|+
name|table
operator|+
literal|" "
operator|+
name|partition
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add one partition.    */
specifier|public
name|Response
name|addOnePartition
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|PartitionDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; alter table %s add"
argument_list|,
name|db
argument_list|,
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|ifNotExists
condition|)
name|exec
operator|+=
literal|" if not exists"
expr_stmt|;
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" partition (%s)"
argument_list|,
name|desc
operator|.
name|partition
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|location
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" location '%s'"
argument_list|,
name|desc
operator|.
name|location
argument_list|)
expr_stmt|;
name|exec
operator|+=
literal|";"
expr_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|desc
operator|.
name|group
argument_list|,
name|desc
operator|.
name|permissions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|indexOf
argument_list|(
literal|"AlreadyExistsException"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
name|JsonBuilder
operator|.
name|create
argument_list|()
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
literal|"Partition already exists"
argument_list|)
comment|//This error code should really be produced by Hive
operator|.
name|put
argument_list|(
literal|"errorCode"
argument_list|,
name|ErrorMsg
operator|.
name|PARTITION_EXISTS
operator|.
name|getErrorCode
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"partition"
argument_list|,
name|desc
operator|.
name|partition
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"partition"
argument_list|,
name|desc
operator|.
name|partition
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to add partition: "
operator|+
name|desc
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Drop a partition.    */
specifier|public
name|Response
name|dropPartition
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|partition
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|permissions
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; alter table %s drop"
argument_list|,
name|db
argument_list|,
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifExists
condition|)
name|exec
operator|+=
literal|" if exists"
expr_stmt|;
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" partition (%s);"
argument_list|,
name|partition
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"partition"
argument_list|,
name|partition
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to drop partition: "
operator|+
name|partition
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return a json description of the columns.  Same as    * describeTable.    */
specifier|public
name|Response
name|listColumns
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|descTable
argument_list|(
name|user
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to show columns for table: "
operator|+
name|table
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|e
operator|.
name|statement
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return a json description of one column.    */
specifier|public
name|Response
name|descOneColumn
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SimpleWebException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|Response
name|res
init|=
name|listColumns
argument_list|(
name|user
argument_list|,
name|db
argument_list|,
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|getStatus
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|OK_200
condition|)
return|return
name|res
return|;
name|Object
name|o
init|=
name|res
operator|.
name|getEntity
argument_list|()
decl_stmt|;
specifier|final
name|Map
name|fields
init|=
operator|(
name|o
operator|!=
literal|null
operator|&&
operator|(
name|o
operator|instanceof
name|Map
operator|)
operator|)
condition|?
operator|(
name|Map
operator|)
name|o
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SimpleWebException
argument_list|(
name|HttpStatus
operator|.
name|NOT_FOUND_404
argument_list|,
literal|"Internal error, unable to find column "
operator|+
name|column
argument_list|)
throw|;
name|List
argument_list|<
name|Map
argument_list|>
name|cols
init|=
operator|(
name|List
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|"columns"
argument_list|)
decl_stmt|;
name|Map
name|found
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cols
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
name|column
operator|.
name|equals
argument_list|(
name|col
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
name|col
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SimpleWebException
argument_list|(
name|HttpStatus
operator|.
name|NOT_FOUND_404
argument_list|,
literal|"unable to find column "
operator|+
name|column
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"description"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
throw|;
name|fields
operator|.
name|remove
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"column"
argument_list|,
name|found
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|fromResponse
argument_list|(
name|res
argument_list|)
operator|.
name|entity
argument_list|(
name|fields
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Add one column.    */
specifier|public
name|Response
name|addOneColumn
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|ColumnDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|String
name|exec
init|=
name|String
operator|.
name|format
argument_list|(
literal|"use %s; alter table %s add columns (%s %s"
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|desc
operator|.
name|name
argument_list|,
name|desc
operator|.
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|desc
operator|.
name|comment
argument_list|)
condition|)
name|exec
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|" comment '%s'"
argument_list|,
name|desc
operator|.
name|comment
argument_list|)
expr_stmt|;
name|exec
operator|+=
literal|");"
expr_stmt|;
try|try
block|{
name|String
name|res
init|=
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|desc
operator|.
name|group
argument_list|,
name|desc
operator|.
name|permissions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|JsonBuilder
operator|.
name|create
argument_list|(
name|res
argument_list|)
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|db
argument_list|)
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
operator|.
name|put
argument_list|(
literal|"column"
argument_list|,
name|desc
operator|.
name|name
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HcatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"unable to add column: "
operator|+
name|desc
argument_list|,
name|e
operator|.
name|execBean
argument_list|,
name|exec
argument_list|)
throw|;
block|}
block|}
comment|// Check that the hcat result is valid and or has a valid json
comment|// error
specifier|private
name|boolean
name|isValid
parameter_list|(
name|ExecBean
name|eb
parameter_list|,
name|boolean
name|requireEmptyOutput
parameter_list|)
block|{
if|if
condition|(
name|eb
operator|==
literal|null
condition|)
return|return
literal|false
return|;
try|try
block|{
name|Map
name|m
init|=
name|JsonBuilder
operator|.
name|jsonToMap
argument_list|(
name|eb
operator|.
name|stdout
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
literal|"error"
argument_list|)
condition|)
comment|// This is a valid error message.
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|eb
operator|.
name|exitcode
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|requireEmptyOutput
condition|)
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|eb
operator|.
name|stdout
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
comment|// Run an hcat expression and return just the json outout.
specifier|private
name|String
name|jsonRun
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|exec
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|permissions
parameter_list|,
name|boolean
name|requireEmptyOutput
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|ExecBean
name|res
init|=
name|run
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
literal|true
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isValid
argument_list|(
name|res
argument_list|,
name|requireEmptyOutput
argument_list|)
condition|)
throw|throw
operator|new
name|HcatException
argument_list|(
literal|"Failure calling hcat: "
operator|+
name|exec
argument_list|,
name|res
argument_list|,
name|exec
argument_list|)
throw|;
return|return
name|res
operator|.
name|stdout
return|;
block|}
comment|// Run an hcat expression and return just the json outout.  No
comment|// permissions set.
specifier|private
name|String
name|jsonRun
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|exec
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
return|return
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|// Run an hcat expression and return just the json outout.
specifier|private
name|String
name|jsonRun
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|exec
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|permissions
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
return|return
name|jsonRun
argument_list|(
name|user
argument_list|,
name|exec
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

