begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|WebHCatJTShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
operator|.
name|JobState
import|;
end_import

begin_comment
comment|/**  * Fetch the status of a given job id in the queue. There are three sources of the info  * 1. Query result from JobTracker  * 2. JobState saved by TempletonControllerJob when monitoring the TempletonControllerJob  * 3. TempletonControllerJob put a JobState for every job it launches, so child job can  *    retrieve its parent job by its JobState  *   * Currently there is no permission restriction, any user can query any job  */
end_comment

begin_class
specifier|public
class|class
name|StatusDelegator
extends|extends
name|TempletonDelegator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StatusDelegator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|JOB_STATUS_EXECUTE_THREAD_PREFIX
init|=
literal|"JobStatusExecute"
decl_stmt|;
comment|/**    * Current thread id used to set in execution threads.    */
specifier|private
specifier|final
name|String
name|statusThreadId
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/*    * Job status request executor to get status of a job.    */
specifier|private
specifier|static
name|JobRequestExecutor
argument_list|<
name|QueueStatusBean
argument_list|>
name|jobRequest
init|=
operator|new
name|JobRequestExecutor
argument_list|<
name|QueueStatusBean
argument_list|>
argument_list|(
name|JobRequestExecutor
operator|.
name|JobRequestType
operator|.
name|Status
argument_list|,
name|AppConfig
operator|.
name|JOB_STATUS_MAX_THREADS
argument_list|,
name|AppConfig
operator|.
name|JOB_STATUS_TIMEOUT
argument_list|)
decl_stmt|;
specifier|public
name|StatusDelegator
parameter_list|(
name|AppConfig
name|appConf
parameter_list|)
block|{
name|super
argument_list|(
name|appConf
argument_list|)
expr_stmt|;
block|}
comment|/*    * Gets status of job form job id. If maximum concurrent job status requests are configured    * then status request will be executed on a thread from thread pool. If job status request    * time out is configured then request execution thread will be interrupted if thread    * times out and does no action.    */
specifier|public
name|QueueStatusBean
name|run
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
name|boolean
name|enableThreadPool
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|BusyException
throws|,
name|TimeoutException
throws|,
name|ExecutionException
throws|,
name|TooManyRequestsException
block|{
if|if
condition|(
name|jobRequest
operator|.
name|isThreadPoolEnabled
argument_list|()
operator|&&
name|enableThreadPool
condition|)
block|{
return|return
name|jobRequest
operator|.
name|execute
argument_list|(
name|getJobStatusCallableTask
argument_list|(
name|user
argument_list|,
name|id
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getJobStatus
argument_list|(
name|user
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
comment|/*    * Job callable task for job status operation. Overrides behavior of execute() to get    * status of a job. No need to override behavior of cleanup() as there is nothing to be    * done if job sttaus operation is timed out or interrupted.    */
specifier|private
name|JobCallable
argument_list|<
name|QueueStatusBean
argument_list|>
name|getJobStatusCallableTask
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|JobCallable
argument_list|<
name|QueueStatusBean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QueueStatusBean
name|execute
parameter_list|()
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|BusyException
block|{
comment|/*         * Change the current thread name to include parent thread Id if it is executed         * in thread pool. Useful to extract logs specific to a job request and helpful         * to debug job issues.         */
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s-%s-%s"
argument_list|,
name|JOB_STATUS_EXECUTE_THREAD_PREFIX
argument_list|,
name|statusThreadId
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getJobStatus
argument_list|(
name|user
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|QueueStatusBean
name|run
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|BusyException
throws|,
name|TimeoutException
throws|,
name|ExecutionException
throws|,
name|TooManyRequestsException
block|{
return|return
name|run
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|QueueStatusBean
name|getJobStatus
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|WebHCatJTShim
name|tracker
init|=
literal|null
decl_stmt|;
name|JobState
name|state
init|=
literal|null
decl_stmt|;
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|UgiFactory
operator|.
name|getUgi
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|tracker
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getWebHCatShim
argument_list|(
name|appConf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|JobID
name|jobid
init|=
name|StatusDelegator
operator|.
name|StringToJobID
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobid
operator|==
literal|null
condition|)
throw|throw
operator|new
name|BadParam
argument_list|(
literal|"Invalid jobid: "
operator|+
name|id
argument_list|)
throw|;
name|state
operator|=
operator|new
name|JobState
argument_list|(
name|id
argument_list|,
name|Main
operator|.
name|getAppConfigInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|StatusDelegator
operator|.
name|makeStatus
argument_list|(
name|tracker
argument_list|,
name|jobid
argument_list|,
name|state
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadParam
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|tracker
operator|!=
literal|null
condition|)
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
name|state
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|QueueStatusBean
name|makeStatus
parameter_list|(
name|WebHCatJTShim
name|tracker
parameter_list|,
name|JobID
name|jobid
parameter_list|,
name|JobState
name|state
parameter_list|)
throws|throws
name|BadParam
throws|,
name|IOException
block|{
name|JobStatus
name|status
init|=
name|tracker
operator|.
name|getJobStatus
argument_list|(
name|jobid
argument_list|)
decl_stmt|;
name|JobProfile
name|profile
init|=
name|tracker
operator|.
name|getJobProfile
argument_list|(
name|jobid
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
operator|||
name|profile
operator|==
literal|null
condition|)
comment|// No such job.
throw|throw
operator|new
name|BadParam
argument_list|(
literal|"Could not find job "
operator|+
name|jobid
argument_list|)
throw|;
return|return
operator|new
name|QueueStatusBean
argument_list|(
name|state
argument_list|,
name|status
argument_list|,
name|profile
argument_list|)
return|;
block|}
comment|/**    * A version of JobID.forName with our app specific error handling.    */
specifier|public
specifier|static
name|JobID
name|StringToJobID
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|BadParam
block|{
try|try
block|{
return|return
name|JobID
operator|.
name|forName
argument_list|(
name|id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadParam
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

