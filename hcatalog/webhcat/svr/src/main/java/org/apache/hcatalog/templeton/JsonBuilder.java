begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
operator|.
name|TempletonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_comment
comment|/**  * Helper class to build new json objects with new top level  * properties.  Only add non-null entries.  */
end_comment

begin_class
specifier|public
class|class
name|JsonBuilder
block|{
specifier|static
specifier|final
name|int
name|OK
init|=
literal|200
decl_stmt|;
specifier|static
specifier|final
name|int
name|MISSING
init|=
literal|404
decl_stmt|;
specifier|static
specifier|final
name|int
name|SERVER_ERROR
init|=
literal|500
decl_stmt|;
comment|// The map we're building.
specifier|private
name|Map
name|map
decl_stmt|;
comment|// Parse the json map.
specifier|private
name|JsonBuilder
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|map
operator|=
name|jsonToMap
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new map object from the existing json.      */
specifier|public
specifier|static
name|JsonBuilder
name|create
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JsonBuilder
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Create a new map object.      */
specifier|public
specifier|static
name|JsonBuilder
name|create
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|JsonBuilder
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Create a new map error object.      */
specifier|public
specifier|static
name|JsonBuilder
name|createError
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JsonBuilder
argument_list|(
literal|null
argument_list|)
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|msg
argument_list|)
operator|.
name|put
argument_list|(
literal|"errorCode"
argument_list|,
name|code
argument_list|)
return|;
block|}
comment|/**      * Add a non-null value to the map.      */
specifier|public
name|JsonBuilder
name|put
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Remove a value from the map.      */
specifier|public
name|JsonBuilder
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Get the underlying map.      */
specifier|public
name|Map
name|getMap
parameter_list|()
block|{
return|return
name|map
return|;
block|}
comment|/**      * Turn the map back to response object.      */
specifier|public
name|Response
name|build
parameter_list|()
block|{
return|return
name|buildResponse
argument_list|()
return|;
block|}
comment|/**      * Turn the map back to json.      */
specifier|public
name|String
name|buildJson
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|mapToJson
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Turn the map back to response object.      */
specifier|public
name|Response
name|buildResponse
parameter_list|()
block|{
name|int
name|status
init|=
name|OK
decl_stmt|;
comment|// Server ok.
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"error"
argument_list|)
condition|)
name|status
operator|=
name|SERVER_ERROR
expr_stmt|;
comment|// Generic http server error.
name|Object
name|o
init|=
name|map
operator|.
name|get
argument_list|(
literal|"errorCode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|status
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Number
condition|)
name|status
operator|=
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|buildResponse
argument_list|(
name|status
argument_list|)
return|;
block|}
comment|/**      * Turn the map back to response object.      */
specifier|public
name|Response
name|buildResponse
parameter_list|(
name|int
name|status
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|status
argument_list|)
operator|.
name|entity
argument_list|(
name|map
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Is the object non-empty?      */
specifier|public
name|boolean
name|isset
parameter_list|()
block|{
return|return
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Check if this is an error doc.      */
specifier|public
specifier|static
name|boolean
name|isError
parameter_list|(
name|Map
name|obj
parameter_list|)
block|{
return|return
operator|(
name|obj
operator|!=
literal|null
operator|)
operator|&&
name|obj
operator|.
name|containsKey
argument_list|(
literal|"error"
argument_list|)
return|;
block|}
comment|/**      * Convert a json string to a Map.      */
specifier|public
specifier|static
name|Map
name|jsonToMap
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|json
argument_list|)
condition|)
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
return|;
else|else
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|Map
operator|.
name|class
argument_list|)
return|;
block|}
block|}
comment|/**      * Convert a map to a json string.      */
specifier|public
specifier|static
name|String
name|mapToJson
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|writeValue
argument_list|(
name|out
argument_list|,
name|obj
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

