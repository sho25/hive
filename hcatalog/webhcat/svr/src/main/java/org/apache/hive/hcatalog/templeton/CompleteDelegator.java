begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
operator|.
name|DelegationTokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
operator|.
name|TempletonUtils
import|;
end_import

begin_comment
comment|/**  * Complete a job.  This will run the callback if  *  * - the job is done  * - there is a callback  * - the callback has not yet been called  *  * There is a small chance for a race condition if two callers run  * this at the same time.  That should never happen.  *  * We use a Hadoop config var to notify this class on the completion  * of a job.  Hadoop will call us multiple times in the event of  * failure.  Even if the failure is that the client callback failed.  *  * See LauncherDelegator for the HADOOP_END_RETRY* vars that are set.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CompleteDelegator
extends|extends
name|TempletonDelegator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CompleteDelegator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|CompleteDelegator
parameter_list|(
name|AppConfig
name|appConf
parameter_list|)
block|{
name|super
argument_list|(
name|appConf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompleteBean
name|run
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|jobStatus
parameter_list|)
throws|throws
name|CallbackFailedException
throws|,
name|IOException
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
name|acceptWithError
argument_list|(
literal|"No jobid given"
argument_list|)
expr_stmt|;
name|JobState
name|state
init|=
literal|null
decl_stmt|;
comment|/* we don't want to cancel the delegation token if we think the callback is going to      to be retried, for example, because the job is not complete yet */
name|boolean
name|cancelMetastoreToken
init|=
literal|false
decl_stmt|;
try|try
block|{
name|state
operator|=
operator|new
name|JobState
argument_list|(
name|id
argument_list|,
name|Main
operator|.
name|getAppConfigInstance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|getCompleteStatus
argument_list|()
operator|==
literal|null
condition|)
name|failed
argument_list|(
literal|"Job not yet complete. jobId="
operator|+
name|id
operator|+
literal|" Status from JobTracker="
operator|+
name|jobStatus
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Long
name|notified
init|=
name|state
operator|.
name|getNotifiedTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|notified
operator|!=
literal|null
condition|)
block|{
name|cancelMetastoreToken
operator|=
literal|true
expr_stmt|;
return|return
name|acceptWithError
argument_list|(
literal|"Callback already run for jobId="
operator|+
name|id
operator|+
literal|" at "
operator|+
operator|new
name|Date
argument_list|(
name|notified
argument_list|)
argument_list|)
return|;
block|}
name|String
name|callback
init|=
name|state
operator|.
name|getCallback
argument_list|()
decl_stmt|;
if|if
condition|(
name|callback
operator|==
literal|null
condition|)
block|{
name|cancelMetastoreToken
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|CompleteBean
argument_list|(
literal|"No callback registered"
argument_list|)
return|;
block|}
try|try
block|{
name|doCallback
argument_list|(
name|state
operator|.
name|getId
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|cancelMetastoreToken
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
argument_list|(
literal|"Callback failed "
operator|+
name|callback
operator|+
literal|" for "
operator|+
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|setNotifiedTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompleteBean
argument_list|(
literal|"Callback sent"
argument_list|)
return|;
block|}
finally|finally
block|{
name|state
operator|.
name|close
argument_list|()
expr_stmt|;
name|IMetaStoreClient
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cancelMetastoreToken
condition|)
block|{
name|String
name|metastoreTokenStrForm
init|=
name|DelegationTokenCache
operator|.
name|getStringFormTokenCache
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|metastoreTokenStrForm
operator|!=
literal|null
condition|)
block|{
name|client
operator|=
name|HCatUtil
operator|.
name|getHiveMetastoreClient
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|cancelDelegationToken
argument_list|(
name|metastoreTokenStrForm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cancelled token for jobId="
operator|+
name|id
operator|+
literal|" status from JT="
operator|+
name|jobStatus
argument_list|)
expr_stmt|;
name|DelegationTokenCache
operator|.
name|getStringFormTokenCache
argument_list|()
operator|.
name|removeDelegationToken
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cancel metastore delegation token for jobId="
operator|+
name|id
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HCatUtil
operator|.
name|closeHiveClientQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Call the callback url with the jobid to let them know it's    * finished.  If the url has the string $jobId in it, it will be    * replaced with the completed jobid.    */
specifier|public
specifier|static
name|void
name|doCallback
parameter_list|(
name|String
name|jobid
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|url
operator|.
name|contains
argument_list|(
literal|"$jobId"
argument_list|)
condition|)
name|url
operator|=
name|url
operator|.
name|replace
argument_list|(
literal|"$jobId"
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
name|TempletonUtils
operator|.
name|fetchUrl
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|failed
parameter_list|(
name|String
name|msg
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|CallbackFailedException
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
else|else
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CallbackFailedException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
specifier|private
name|CompleteBean
name|acceptWithError
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompleteBean
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
end_class

end_unit

