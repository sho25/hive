begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|WebHCatJTShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * List jobs owned by a user.  */
end_comment

begin_class
specifier|public
class|class
name|ListDelegator
extends|extends
name|TempletonDelegator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ListDelegator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|JOB_LIST_EXECUTE_THREAD_PREFIX
init|=
literal|"JobListExecute"
decl_stmt|;
comment|/**    * Current thread id used to set in execution threads.    */
specifier|private
specifier|final
name|String
name|listThreadId
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/*    * Job request executor to list job status requests.    */
specifier|private
specifier|static
name|JobRequestExecutor
argument_list|<
name|List
argument_list|<
name|JobItemBean
argument_list|>
argument_list|>
name|jobRequest
init|=
operator|new
name|JobRequestExecutor
argument_list|<
name|List
argument_list|<
name|JobItemBean
argument_list|>
argument_list|>
argument_list|(
name|JobRequestExecutor
operator|.
name|JobRequestType
operator|.
name|List
argument_list|,
name|AppConfig
operator|.
name|JOB_LIST_MAX_THREADS
argument_list|,
name|AppConfig
operator|.
name|JOB_LIST_TIMEOUT
argument_list|)
decl_stmt|;
specifier|public
name|ListDelegator
parameter_list|(
name|AppConfig
name|appConf
parameter_list|)
block|{
name|super
argument_list|(
name|appConf
argument_list|)
expr_stmt|;
block|}
comment|/*    * List status jobs request. If maximum concurrent job list requests are configured then    * list request will be executed on a thread from thread pool. If job list request time out    * is configured then request execution thread will be interrupted if thread times out and    * does no action.    */
specifier|public
name|List
argument_list|<
name|JobItemBean
argument_list|>
name|run
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|boolean
name|showall
parameter_list|,
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|int
name|numRecords
parameter_list|,
specifier|final
name|boolean
name|showDetails
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|BusyException
throws|,
name|TimeoutException
throws|,
name|ExecutionException
throws|,
name|TooManyRequestsException
block|{
if|if
condition|(
name|jobRequest
operator|.
name|isThreadPoolEnabled
argument_list|()
condition|)
block|{
return|return
name|jobRequest
operator|.
name|execute
argument_list|(
name|getJobListTask
argument_list|(
name|user
argument_list|,
name|showall
argument_list|,
name|jobId
argument_list|,
name|numRecords
argument_list|,
name|showDetails
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|listJobs
argument_list|(
name|user
argument_list|,
name|showall
argument_list|,
name|jobId
argument_list|,
name|numRecords
argument_list|,
name|showDetails
argument_list|)
return|;
block|}
block|}
comment|/*    * Job callable task for job list operation. Overrides behavior of execute() to list jobs.    * No need to override behavior of cleanup() as there is nothing to be done if list jobs    * operation is timed out or interrupted.    */
specifier|private
name|JobCallable
argument_list|<
name|List
argument_list|<
name|JobItemBean
argument_list|>
argument_list|>
name|getJobListTask
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|boolean
name|showall
parameter_list|,
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|int
name|numRecords
parameter_list|,
specifier|final
name|boolean
name|showDetails
parameter_list|)
block|{
return|return
operator|new
name|JobCallable
argument_list|<
name|List
argument_list|<
name|JobItemBean
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|JobItemBean
argument_list|>
name|execute
parameter_list|()
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|/*         * Change the current thread name to include parent thread Id if it is executed         * in thread pool. Useful to extract logs specific to a job request and helpful         * to debug job issues.         */
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s-%s-%s"
argument_list|,
name|JOB_LIST_EXECUTE_THREAD_PREFIX
argument_list|,
name|listThreadId
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|listJobs
argument_list|(
name|user
argument_list|,
name|showall
argument_list|,
name|jobId
argument_list|,
name|numRecords
argument_list|,
name|showDetails
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/*    * Gets list of job ids and calls getJobStatus to get status for each job id.    */
specifier|public
name|List
argument_list|<
name|JobItemBean
argument_list|>
name|listJobs
parameter_list|(
name|String
name|user
parameter_list|,
name|boolean
name|showall
parameter_list|,
name|String
name|jobId
parameter_list|,
name|int
name|numRecords
parameter_list|,
name|boolean
name|showDetails
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UgiFactory
operator|.
name|getUgi
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|WebHCatJTShim
name|tracker
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tracker
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getWebHCatShim
argument_list|(
name|appConf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|JobStatus
index|[]
name|jobs
init|=
name|tracker
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobStatus
name|job
range|:
name|jobs
control|)
block|{
name|String
name|id
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|showall
operator|||
name|user
operator|.
name|equals
argument_list|(
name|job
operator|.
name|getUsername
argument_list|()
argument_list|)
condition|)
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadParam
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|tracker
operator|!=
literal|null
condition|)
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|getJobStatus
argument_list|(
name|ids
argument_list|,
name|user
argument_list|,
name|showall
argument_list|,
name|jobId
argument_list|,
name|numRecords
argument_list|,
name|showDetails
argument_list|)
return|;
block|}
comment|/*    * Returns job status for list of input jobs as a list.    */
specifier|public
name|List
argument_list|<
name|JobItemBean
argument_list|>
name|getJobStatus
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|jobIds
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|showall
parameter_list|,
name|String
name|jobId
parameter_list|,
name|int
name|numRecords
parameter_list|,
name|boolean
name|showDetails
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|JobItemBean
argument_list|>
name|detailList
init|=
operator|new
name|ArrayList
argument_list|<
name|JobItemBean
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|currRecord
init|=
literal|0
decl_stmt|;
comment|// Sort the list as requested
name|boolean
name|isAscendingOrder
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|appConf
operator|.
name|getListJobsOrder
argument_list|()
condition|)
block|{
case|case
name|lexicographicaldesc
case|:
name|Collections
operator|.
name|sort
argument_list|(
name|jobIds
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
name|isAscendingOrder
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|lexicographicalasc
case|:
default|default:
name|Collections
operator|.
name|sort
argument_list|(
name|jobIds
argument_list|)
expr_stmt|;
break|break;
block|}
for|for
control|(
name|String
name|job
range|:
name|jobIds
control|)
block|{
comment|// If numRecords = -1, fetch all records.
comment|// Hence skip all the below checks when numRecords = -1.
if|if
condition|(
name|numRecords
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// If currRecord>= numRecords, we have already fetched the top #numRecords
if|if
condition|(
name|currRecord
operator|>=
name|numRecords
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|jobId
operator|==
literal|null
operator|||
name|jobId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|currRecord
operator|++
expr_stmt|;
block|}
comment|// If the current record needs to be returned based on the
comment|// filter conditions specified by the user, increment the counter
elseif|else
if|if
condition|(
name|isAscendingOrder
operator|&&
name|job
operator|.
name|compareTo
argument_list|(
name|jobId
argument_list|)
operator|>
literal|0
operator|||
operator|!
name|isAscendingOrder
operator|&&
name|job
operator|.
name|compareTo
argument_list|(
name|jobId
argument_list|)
operator|<
literal|0
condition|)
block|{
name|currRecord
operator|++
expr_stmt|;
block|}
comment|// The current record should not be included in the output detailList.
else|else
block|{
continue|continue;
block|}
block|}
name|JobItemBean
name|jobItem
init|=
operator|new
name|JobItemBean
argument_list|()
decl_stmt|;
name|jobItem
operator|.
name|id
operator|=
name|job
expr_stmt|;
if|if
condition|(
name|showDetails
condition|)
block|{
name|StatusDelegator
name|sd
init|=
operator|new
name|StatusDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
try|try
block|{
name|jobItem
operator|.
name|detail
operator|=
name|sd
operator|.
name|run
argument_list|(
name|user
argument_list|,
name|job
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|/*            * if we could not get status for some reason, log it, and send empty status back with            * just the ID so that caller knows to even look in the log file            */
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to get status detail for jobId='"
operator|+
name|job
operator|+
literal|"'"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|jobItem
operator|.
name|detail
operator|=
operator|new
name|QueueStatusBean
argument_list|(
name|job
argument_list|,
literal|"Failed to retrieve status; see WebHCat logs"
argument_list|)
expr_stmt|;
block|}
block|}
name|detailList
operator|.
name|add
argument_list|(
name|jobItem
argument_list|)
expr_stmt|;
block|}
return|return
name|detailList
return|;
block|}
block|}
end_class

end_unit

