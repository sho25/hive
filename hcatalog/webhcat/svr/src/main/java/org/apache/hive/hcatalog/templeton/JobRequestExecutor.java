begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JobRequestExecutor
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobRequestExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AppConfig
name|appConf
init|=
name|Main
operator|.
name|getAppConfigInstance
argument_list|()
decl_stmt|;
comment|/*    * Thread pool to execute job requests.    */
specifier|private
name|ThreadPoolExecutor
name|jobExecutePool
init|=
literal|null
decl_stmt|;
comment|/*    * Type of job request.    */
specifier|private
name|JobRequestType
name|requestType
decl_stmt|;
comment|/*    * Config name used to find the number of concurrent requests.    */
specifier|private
name|String
name|concurrentRequestsConfigName
decl_stmt|;
comment|/*    * Config name used to find the maximum time job request can be executed.    */
specifier|private
name|String
name|jobTimeoutConfigName
decl_stmt|;
comment|/*    * Job request execution time out in seconds. If it is 0 then request    * will not be timed out.    */
specifier|private
name|int
name|requestExecutionTimeoutInSec
init|=
literal|0
decl_stmt|;
comment|/*    * Amount of time a thread can be alive in thread pool before cleaning this up. Core threads    * will not be cleanup from thread pool.    */
specifier|private
name|int
name|threadKeepAliveTimeInHours
init|=
literal|1
decl_stmt|;
comment|/*    * Maximum number of times a cancel request is sent to job request execution    * thread. Future.cancel may not be able to interrupt the thread if it is    * blocked on network calls.    */
specifier|private
name|int
name|maxTaskCancelRetryCount
init|=
literal|10
decl_stmt|;
comment|/*    * Wait time in milliseconds before another cancel request is made.    */
specifier|private
name|int
name|maxTaskCancelRetryWaitTimeInMs
init|=
literal|1000
decl_stmt|;
comment|/*    * A flag to indicate whether to cancel the task when exception TimeoutException or    * InterruptedException or CancellationException raised. The default is cancel thread.    */
specifier|private
name|boolean
name|enableCancelTask
init|=
literal|true
decl_stmt|;
comment|/*    * Job Request type.    */
specifier|public
enum|enum
name|JobRequestType
block|{
name|Submit
block|,
name|Status
block|,
name|List
block|}
comment|/*    * Creates a job request object and sets up execution environment. Creates a thread pool    * to execute job requests.    *    * @param requestType    *          Job request type    *    * @param concurrentRequestsConfigName    *          Config name to be used to extract number of concurrent requests to be serviced.    *    * @param jobTimeoutConfigName    *          Config name to be used to extract maximum time a task can execute a request.    *    * @param enableCancelTask    *          A flag to indicate whether to cancel the task when exception TimeoutException    *          or InterruptedException or CancellationException raised.    *    */
specifier|public
name|JobRequestExecutor
parameter_list|(
name|JobRequestType
name|requestType
parameter_list|,
name|String
name|concurrentRequestsConfigName
parameter_list|,
name|String
name|jobTimeoutConfigName
parameter_list|,
name|boolean
name|enableCancelTask
parameter_list|)
block|{
name|this
operator|.
name|concurrentRequestsConfigName
operator|=
name|concurrentRequestsConfigName
expr_stmt|;
name|this
operator|.
name|jobTimeoutConfigName
operator|=
name|jobTimeoutConfigName
expr_stmt|;
name|this
operator|.
name|requestType
operator|=
name|requestType
expr_stmt|;
name|this
operator|.
name|enableCancelTask
operator|=
name|enableCancelTask
expr_stmt|;
comment|/*      * The default number of threads will be 0. That means thread pool is not used and      * operation is executed with the current thread.      */
name|int
name|threads
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|concurrentRequestsConfigName
argument_list|)
condition|?
name|appConf
operator|.
name|getInt
argument_list|(
name|concurrentRequestsConfigName
argument_list|,
literal|0
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|threads
operator|>
literal|0
condition|)
block|{
comment|/*        * Create a thread pool with no queue wait time to execute the operation. This will ensure        * that job requests are rejected if there are already maximum number of threads busy.        */
name|this
operator|.
name|jobExecutePool
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|threads
argument_list|,
name|threads
argument_list|,
name|threadKeepAliveTimeInHours
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobExecutePool
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|/*        * Get the job request time out value. If this configuration value is set to 0        * then job request will wait until it finishes.        */
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|jobTimeoutConfigName
argument_list|)
condition|)
block|{
name|this
operator|.
name|requestExecutionTimeoutInSec
operator|=
name|appConf
operator|.
name|getInt
argument_list|(
name|jobTimeoutConfigName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Configured "
operator|+
name|threads
operator|+
literal|" threads for job request type "
operator|+
name|this
operator|.
name|requestType
operator|+
literal|" with time out "
operator|+
name|this
operator|.
name|requestExecutionTimeoutInSec
operator|+
literal|" s."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*        * If threads are not configured then they will be executed in current thread itself.        */
name|LOG
operator|.
name|info
argument_list|(
literal|"No thread pool configured for job request type "
operator|+
name|this
operator|.
name|requestType
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Creates a job request object and sets up execution environment. Creates a thread pool    * to execute job requests.    *    * @param requestType    *          Job request type    *    * @param concurrentRequestsConfigName    *          Config name to be used to extract number of concurrent requests to be serviced.    *    * @param jobTimeoutConfigName    *          Config name to be used to extract maximum time a task can execute a request.    *    */
specifier|public
name|JobRequestExecutor
parameter_list|(
name|JobRequestType
name|requestType
parameter_list|,
name|String
name|concurrentRequestsConfigName
parameter_list|,
name|String
name|jobTimeoutConfigName
parameter_list|)
block|{
name|this
argument_list|(
name|requestType
argument_list|,
name|concurrentRequestsConfigName
argument_list|,
name|jobTimeoutConfigName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*    * Returns true of thread pool is created and can be used for executing a job request.    * Otherwise, returns false.    */
specifier|public
name|boolean
name|isThreadPoolEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|jobExecutePool
operator|!=
literal|null
return|;
block|}
comment|/*    * Executes job request operation. If thread pool is not created then job request is    * executed in current thread itself.    *    * @param jobExecuteCallable    *          Callable object to run the job request task.    *    */
specifier|public
name|T
name|execute
parameter_list|(
name|JobCallable
argument_list|<
name|T
argument_list|>
name|jobExecuteCallable
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|TooManyRequestsException
throws|,
name|ExecutionException
block|{
comment|/*      * The callable shouldn't be null to execute. The thread pool also should be configured      * to execute requests.      */
assert|assert
operator|(
name|jobExecuteCallable
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|this
operator|.
name|jobExecutePool
operator|!=
literal|null
operator|)
assert|;
name|String
name|type
init|=
name|this
operator|.
name|requestType
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|retryMessageForConcurrentRequests
init|=
literal|"Please wait for some time before retrying "
operator|+
literal|"the operation. Please refer to the config "
operator|+
name|concurrentRequestsConfigName
operator|+
literal|" to configure concurrent requests."
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting new "
operator|+
name|type
operator|+
literal|" job request with time out "
operator|+
name|this
operator|.
name|requestExecutionTimeoutInSec
operator|+
literal|"seconds."
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|T
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
try|try
block|{
name|future
operator|=
name|this
operator|.
name|jobExecutePool
operator|.
name|submit
argument_list|(
name|jobExecuteCallable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|rejectedException
parameter_list|)
block|{
comment|/*        * Not able to find thread to execute the job request. Raise Busy exception and client        * can retry the operation.        */
name|String
name|tooManyRequestsExceptionMessage
init|=
literal|"Unable to service the "
operator|+
name|type
operator|+
literal|" job request as "
operator|+
literal|"templeton service is busy with too many "
operator|+
name|type
operator|+
literal|" job requests. "
operator|+
name|retryMessageForConcurrentRequests
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|tooManyRequestsExceptionMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TooManyRequestsException
argument_list|(
name|tooManyRequestsExceptionMessage
argument_list|)
throw|;
block|}
name|T
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|this
operator|.
name|requestExecutionTimeoutInSec
operator|>
literal|0
condition|?
name|future
operator|.
name|get
argument_list|(
name|this
operator|.
name|requestExecutionTimeoutInSec
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
else|:
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
comment|/*        * See if the execution thread has just completed operation and result is available.        * If result is available then return the result. Otherwise, raise exception.        */
if|if
condition|(
operator|(
name|result
operator|=
name|tryGetJobResultOrSetJobStateFailed
argument_list|(
name|jobExecuteCallable
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
name|this
operator|.
name|requestType
operator|+
literal|" job request got timed out. Please wait for some time "
operator|+
literal|"before retrying the operation. Please refer to the config "
operator|+
name|jobTimeoutConfigName
operator|+
literal|" to configure job request time out."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|/*          * Throw TimeoutException to caller.          */
throw|throw
operator|new
name|TimeoutException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|/*        * See if the execution thread has just completed operation and result is available.        * If result is available then return the result. Otherwise, raise exception.        */
if|if
condition|(
operator|(
name|result
operator|=
name|tryGetJobResultOrSetJobStateFailed
argument_list|(
name|jobExecuteCallable
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
name|this
operator|.
name|requestType
operator|+
literal|" job request got interrupted. Please wait for some time "
operator|+
literal|"before retrying the operation."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|/*          * Throw TimeoutException to caller.          */
throw|throw
operator|new
name|InterruptedException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|/*        * See if the execution thread has just completed operation and result is available.        * If result is available then return the result. Otherwise, raise exception.        */
if|if
condition|(
operator|(
name|result
operator|=
name|tryGetJobResultOrSetJobStateFailed
argument_list|(
name|jobExecuteCallable
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
name|this
operator|.
name|requestType
operator|+
literal|" job request got cancelled and thread got interrupted. "
operator|+
literal|"Please wait for some time before retrying the operation."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
comment|/*        * If the thread is still active and needs to be cancelled then cancel it. This may        * happen in case task got interrupted, or timed out.        */
if|if
condition|(
name|enableCancelTask
condition|)
block|{
name|cancelExecutePoolThread
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed "
operator|+
name|type
operator|+
literal|" job request."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/*    * Initiate cancel request to cancel the thread execution and interrupt the thread.    * If thread interruption is not handled by jobExecuteCallable then thread may continue    * running to completion. The cancel call may fail for some scenarios. In that case,    * retry the cancel call until it returns true or max retry count is reached.    *    * @param future    *          Future object which has handle to cancel the thread.    *    */
specifier|private
name|void
name|cancelExecutePoolThread
parameter_list|(
name|Future
argument_list|<
name|T
argument_list|>
name|future
parameter_list|)
block|{
name|int
name|retryCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|retryCount
operator|<
name|this
operator|.
name|maxTaskCancelRetryCount
operator|&&
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task is still executing the job request. Cancelling it with retry count: "
operator|+
name|retryCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
condition|)
block|{
comment|/*          * Cancelled the job request and return to client.          */
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancel job request issued successfully."
argument_list|)
expr_stmt|;
return|return;
block|}
name|retryCount
operator|++
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|maxTaskCancelRetryWaitTimeInMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|/*          * Nothing to do. Just retry.          */
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cancel the job. isCancelled: "
operator|+
name|future
operator|.
name|isCancelled
argument_list|()
operator|+
literal|" Retry count: "
operator|+
name|retryCount
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tries to get the job result if job request is completed. Otherwise it sets job status    * to FAILED such that execute thread can do necessary clean up based on FAILED state.    */
specifier|private
name|T
name|tryGetJobResultOrSetJobStateFailed
parameter_list|(
name|JobCallable
argument_list|<
name|T
argument_list|>
name|jobExecuteCallable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|jobExecuteCallable
operator|.
name|setJobStateFailed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job is already COMPLETED. Returning the result."
argument_list|)
expr_stmt|;
return|return
name|jobExecuteCallable
operator|.
name|returnResult
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job status set to FAILED. Job clean up to be done by execute thread "
operator|+
literal|"after job request is executed."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

