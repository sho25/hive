begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/*  * This is the base class for the output parser.  * Output parser will parse the output of a Pig/  * Hive/Hadoop or other job and extract jobid.  * Note Hadoop jobid extract is rely on the API  * Hadoop application submitting the job. Different  * api will result in different console output. The  * jobid extraction logic is not always working in  * this case  */
end_comment

begin_class
specifier|abstract
class|class
name|JobIDParser
block|{
specifier|private
name|String
name|statusdir
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
name|JobIDParser
parameter_list|(
name|String
name|statusdir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|statusdir
operator|=
name|statusdir
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|private
name|BufferedReader
name|openStatusFile
parameter_list|(
name|String
name|fname
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|statusdir
argument_list|,
name|fname
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|in
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findJobID
parameter_list|(
name|BufferedReader
name|in
parameter_list|,
name|String
name|patternAsString
parameter_list|)
throws|throws
name|IOException
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|patternAsString
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
decl_stmt|;
name|String
name|line
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|jobs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|jobid
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|jobs
operator|.
name|add
argument_list|(
name|jobid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jobs
return|;
block|}
specifier|abstract
name|List
argument_list|<
name|String
argument_list|>
name|parseJobID
parameter_list|()
throws|throws
name|IOException
function_decl|;
name|List
argument_list|<
name|String
argument_list|>
name|parseJobID
parameter_list|(
name|String
name|fname
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|openStatusFile
argument_list|(
name|fname
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|jobs
init|=
name|findJobID
argument_list|(
name|in
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
return|return
name|jobs
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

