begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|AppConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|SecureProxySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|UgiFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_comment
comment|/**  * A Map Reduce job that will start another job.  *  * We have a single Mapper job that starts a child MR job.  The parent  * monitors the child child job and ends when the child job exits.  In  * addition, we  *  * - write out the parent job id so the caller can record it.  * - run a keep alive thread so the job doesn't end.  * - Optionally, store the stdout, stderr, and exit value of the child  *   in hdfs files.  *  * A note on security.  When jobs are submitted through WebHCat that use HCatalog, it means that  * metastore access is required.  Hive queries, of course, need metastore access.  This in turn  * requires delegation token to be obtained for metastore in a<em>secure cluster</em>.  Since we  * can't usually parse the job to find out if it is using metastore, we require 'usehcatalog'  * parameter supplied in the REST call.  WebHcat takes care of cancelling the token when the job  * is complete.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TempletonControllerJob
extends|extends
name|Configured
implements|implements
name|Tool
implements|,
name|JobSubmissionConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TempletonControllerJob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|secureMetastoreAccess
decl_stmt|;
specifier|private
specifier|final
name|AppConfig
name|appConf
decl_stmt|;
comment|/**    * @param secureMetastoreAccess - if true, a delegation token will be created    *                              and added to the job    */
specifier|public
name|TempletonControllerJob
parameter_list|(
name|boolean
name|secureMetastoreAccess
parameter_list|,
name|AppConfig
name|conf
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|secureMetastoreAccess
operator|=
name|secureMetastoreAccess
expr_stmt|;
name|this
operator|.
name|appConf
operator|=
name|conf
expr_stmt|;
block|}
specifier|private
name|Job
name|job
init|=
literal|null
decl_stmt|;
specifier|public
name|String
name|getSubmittedId
parameter_list|()
block|{
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JobID
name|submittedJobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
if|if
condition|(
name|submittedJobId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|submittedJobId
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Enqueue the job and print out the job id for later collection.    * @see org.apache.hive.hcatalog.templeton.CompleteDelegator    */
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
throws|,
name|TException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Preparing to submit job: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JAR_ARGS_NAME
argument_list|,
name|TempletonUtils
operator|.
name|encodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|memoryMb
init|=
name|appConf
operator|.
name|mapperMemoryMb
argument_list|()
decl_stmt|;
if|if
condition|(
name|memoryMb
operator|!=
literal|null
operator|&&
name|memoryMb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|AppConfig
operator|.
name|HADOOP_MAP_MEMORY_MB
argument_list|,
name|memoryMb
argument_list|)
expr_stmt|;
block|}
name|String
name|amMemoryMB
init|=
name|appConf
operator|.
name|amMemoryMb
argument_list|()
decl_stmt|;
if|if
condition|(
name|amMemoryMB
operator|!=
literal|null
operator|&&
operator|!
name|amMemoryMB
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|AppConfig
operator|.
name|HADOOP_MR_AM_MEMORY_MB
argument_list|,
name|amMemoryMB
argument_list|)
expr_stmt|;
block|}
name|String
name|amJavaOpts
init|=
name|appConf
operator|.
name|controllerAMChildOpts
argument_list|()
decl_stmt|;
if|if
condition|(
name|amJavaOpts
operator|!=
literal|null
operator|&&
operator|!
name|amJavaOpts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|AppConfig
operator|.
name|HADOOP_MR_AM_JAVA_OPTS
argument_list|,
name|amJavaOpts
argument_list|)
expr_stmt|;
block|}
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"user.name"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|LaunchMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
name|TempletonControllerJob
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|LaunchMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|SingleInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|NullOutputFormat
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
name|of
init|=
operator|new
name|NullOutputFormat
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
argument_list|()
decl_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|of
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
operator|new
name|JobConf
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|mrdt
init|=
name|jc
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"mr token"
argument_list|)
argument_list|)
decl_stmt|;
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"mr token"
argument_list|)
argument_list|,
name|mrdt
argument_list|)
expr_stmt|;
block|}
name|String
name|metastoreTokenStrForm
init|=
name|addHMSToken
argument_list|(
name|job
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|JobID
name|submittedJobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
if|if
condition|(
name|metastoreTokenStrForm
operator|!=
literal|null
condition|)
block|{
comment|//so that it can be cancelled later from CompleteDelegator
name|DelegationTokenCache
operator|.
name|getStringFormTokenCache
argument_list|()
operator|.
name|storeDelegationToken
argument_list|(
name|submittedJobId
operator|.
name|toString
argument_list|()
argument_list|,
name|metastoreTokenStrForm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added metastore delegation token for jobId="
operator|+
name|submittedJobId
operator|.
name|toString
argument_list|()
operator|+
literal|" user="
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|String
name|addHMSToken
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TException
block|{
if|if
condition|(
operator|!
name|secureMetastoreAccess
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Token
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|DelegationTokenIdentifier
argument_list|>
name|hiveToken
init|=
operator|new
name|Token
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|metastoreTokenStrForm
init|=
name|buildHcatDelegationToken
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|hiveToken
operator|.
name|decodeFromUrlString
argument_list|(
name|metastoreTokenStrForm
argument_list|)
expr_stmt|;
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|SecureProxySupport
operator|.
name|HCAT_SERVICE
argument_list|)
argument_list|,
name|hiveToken
argument_list|)
expr_stmt|;
return|return
name|metastoreTokenStrForm
return|;
block|}
specifier|private
name|String
name|buildHcatDelegationToken
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TException
block|{
specifier|final
name|HiveConf
name|c
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating hive metastore delegation token for user "
operator|+
name|user
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UgiFactory
operator|.
name|getUgi
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|real
init|=
name|ugi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
return|return
name|real
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|TException
throws|,
name|InterruptedException
block|{
specifier|final
name|IMetaStoreClient
name|client
init|=
name|HCatUtil
operator|.
name|getHiveMetastoreClient
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|TException
throws|,
name|InterruptedException
block|{
name|String
name|u
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
return|return
name|client
operator|.
name|getDelegationToken
argument_list|(
name|c
operator|.
name|getUser
argument_list|()
argument_list|,
name|u
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

