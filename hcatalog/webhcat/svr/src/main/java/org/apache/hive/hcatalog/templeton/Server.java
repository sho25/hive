begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|ExecuteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|PseudoAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
operator|.
name|TempletonUtils
import|;
end_import

begin_comment
comment|/**  * The Templeton Web API server.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/v1"
argument_list|)
specifier|public
class|class
name|Server
block|{
specifier|public
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"v1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DO_AS_PARAM
init|=
literal|"doAs"
decl_stmt|;
comment|/**    * The status message.  Always "ok"    */
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|STATUS_OK
init|=
name|createStatusMsg
argument_list|()
decl_stmt|;
comment|/**    * The list of supported api versions.    */
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|SUPPORTED_VERSIONS
init|=
name|createVersions
argument_list|()
decl_stmt|;
comment|/**    * The list of supported return formats.  Always json.    */
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|SUPPORTED_FORMATS
init|=
name|createFormats
argument_list|()
decl_stmt|;
comment|// Build the status message for the /status call.
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createStatusMsg
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|res
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|res
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
literal|"ok"
argument_list|)
expr_stmt|;
name|res
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|res
argument_list|)
return|;
block|}
comment|// Build the versions list.
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createVersions
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|versions
operator|.
name|add
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|res
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|res
operator|.
name|put
argument_list|(
literal|"supportedVersions"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|res
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|res
argument_list|)
return|;
block|}
comment|// Build the supported formats list
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createFormats
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|formats
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|formats
operator|.
name|add
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|res
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|res
operator|.
name|put
argument_list|(
literal|"responseTypes"
argument_list|,
name|formats
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|res
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|ExecService
name|execService
init|=
name|ExecServiceImpl
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|AppConfig
name|appConf
init|=
name|Main
operator|.
name|getAppConfigInstance
argument_list|()
decl_stmt|;
comment|// The SecurityContext set by AuthFilter
specifier|private
annotation|@
name|Context
name|SecurityContext
name|theSecurityContext
decl_stmt|;
comment|// The uri requested
specifier|private
annotation|@
name|Context
name|UriInfo
name|theUriInfo
decl_stmt|;
specifier|private
annotation|@
name|QueryParam
argument_list|(
name|DO_AS_PARAM
argument_list|)
name|String
name|doAs
decl_stmt|;
specifier|private
annotation|@
name|Context
name|HttpServletRequest
name|request
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Check the status of this server.  Always OK.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"status"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|status
parameter_list|()
block|{
return|return
name|STATUS_OK
return|;
block|}
comment|/**    * Check the supported request formats of this server.    */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestFormats
parameter_list|()
block|{
return|return
name|SUPPORTED_FORMATS
return|;
block|}
comment|/**    * Check the version(s) supported by this server.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"version"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|version
parameter_list|()
block|{
return|return
name|SUPPORTED_VERSIONS
return|;
block|}
comment|/**    * Execute an hcat ddl expression on the local box.  It is run    * as the authenticated user and rate limited.    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"ddl"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|ExecBean
name|ddl
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"exec"
argument_list|)
name|String
name|exec
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"group"
argument_list|)
name|String
name|group
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"permissions"
argument_list|)
name|String
name|permissions
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyParam
argument_list|(
name|exec
argument_list|,
literal|"exec"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|exec
argument_list|,
literal|false
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|/**    * List all the tables in an hcat database.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|listTables
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"like"
argument_list|)
name|String
name|tablePattern
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|tablePattern
argument_list|)
condition|)
name|tablePattern
operator|=
literal|"*"
expr_stmt|;
return|return
name|d
operator|.
name|listTables
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|tablePattern
argument_list|)
return|;
block|}
comment|/**    * Create a new table.    */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|createTable
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
name|TableDesc
name|desc
parameter_list|)
throws|throws
name|SimpleWebException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|createTable
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|desc
argument_list|)
return|;
block|}
comment|/**    * Create a new table like another table.    */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{existingTable}/like/{newTable}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|createTableLike
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"existingTable"
argument_list|)
name|String
name|existingTable
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"newTable"
argument_list|)
name|String
name|newTable
parameter_list|,
name|TableLikeDesc
name|desc
parameter_list|)
throws|throws
name|SimpleWebException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|existingTable
argument_list|,
literal|":existingTable"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|newTable
argument_list|,
literal|":newTable"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|existingTable
operator|=
name|existingTable
expr_stmt|;
name|desc
operator|.
name|newTable
operator|=
name|newTable
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|createTableLike
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|desc
argument_list|)
return|;
block|}
comment|/**    * Describe an hcat table.  This is normally a simple list of    * columns (using "desc table"), but the extended format will show    * more information (using "show table extended like").    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|descTable
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"format"
argument_list|)
name|String
name|format
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"extended"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
return|return
name|d
operator|.
name|descExtendedTable
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|)
return|;
else|else
return|return
name|d
operator|.
name|descTable
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Drop an hcat table.    */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|dropTable
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"ifExists"
argument_list|)
name|boolean
name|ifExists
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"group"
argument_list|)
name|String
name|group
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"permissions"
argument_list|)
name|String
name|permissions
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|dropTable
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|ifExists
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|/**    * Rename an hcat table.    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|renameTable
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|oldTable
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"rename"
argument_list|)
name|String
name|newTable
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"group"
argument_list|)
name|String
name|group
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"permissions"
argument_list|)
name|String
name|permissions
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|oldTable
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|newTable
argument_list|,
literal|"rename"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|renameTable
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|oldTable
argument_list|,
name|newTable
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|/**    * Describe a single property on an hcat table.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/property/{property}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|descOneTableProperty
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"property"
argument_list|)
name|String
name|property
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|property
argument_list|,
literal|":property"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|descTableProperty
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|property
argument_list|)
return|;
block|}
comment|/**    * List all the properties on an hcat table.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/property"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|listTableProperties
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|listTableProperties
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|)
return|;
block|}
comment|/**    * Add a single property on an hcat table.    */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/property/{property}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|addOneTableProperty
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"property"
argument_list|)
name|String
name|property
parameter_list|,
name|TablePropertyDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|property
argument_list|,
literal|":property"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|name
operator|=
name|property
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|addOneTableProperty
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|desc
argument_list|)
return|;
block|}
comment|/**    * List all the partitions in an hcat table.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/partition"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|listPartitions
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|listPartitions
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|)
return|;
block|}
comment|/**    * Describe a single partition in an hcat table.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/partition/{partition}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|descPartition
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"partition"
argument_list|)
name|String
name|partition
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|verifyParam
argument_list|(
name|partition
argument_list|,
literal|":partition"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|descOnePartition
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|partition
argument_list|)
return|;
block|}
comment|/**    * Create a partition in an hcat table.    */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/partition/{partition}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|addOnePartition
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"partition"
argument_list|)
name|String
name|partition
parameter_list|,
name|PartitionDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|verifyParam
argument_list|(
name|partition
argument_list|,
literal|":partition"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|addOnePartition
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|desc
argument_list|)
return|;
block|}
comment|/**    * Drop a partition in an hcat table.    */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/partition/{partition}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|dropPartition
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"partition"
argument_list|)
name|String
name|partition
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"ifExists"
argument_list|)
name|boolean
name|ifExists
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"group"
argument_list|)
name|String
name|group
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"permissions"
argument_list|)
name|String
name|permissions
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|verifyParam
argument_list|(
name|partition
argument_list|,
literal|":partition"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|dropPartition
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|partition
argument_list|,
name|ifExists
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|/**    * List all databases, or those that match a pattern.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|listDatabases
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"like"
argument_list|)
name|String
name|dbPattern
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|dbPattern
argument_list|)
condition|)
name|dbPattern
operator|=
literal|"*"
expr_stmt|;
return|return
name|d
operator|.
name|listDatabases
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|dbPattern
argument_list|)
return|;
block|}
comment|/**    * Describe a database    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|descDatabase
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"format"
argument_list|)
name|String
name|format
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|descDatabase
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
literal|"extended"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a database    */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|createDatabase
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
name|DatabaseDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|database
operator|=
name|db
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|createDatabase
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|desc
argument_list|)
return|;
block|}
comment|/**    * Drop a database    */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|dropDatabase
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"ifExists"
argument_list|)
name|boolean
name|ifExists
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"option"
argument_list|)
name|String
name|option
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"group"
argument_list|)
name|String
name|group
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"permissions"
argument_list|)
name|String
name|permissions
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
if|if
condition|(
name|TempletonUtils
operator|.
name|isset
argument_list|(
name|option
argument_list|)
condition|)
name|verifyDdlParam
argument_list|(
name|option
argument_list|,
literal|"option"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|dropDatabase
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|ifExists
argument_list|,
name|option
argument_list|,
name|group
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|/**    * List the columns in an hcat table.  Currently the same as    * describe table.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/column"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|listColumns
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|listColumns
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|)
return|;
block|}
comment|/**    * Describe a single column in an hcat table.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/column/{column}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|descColumn
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"column"
argument_list|)
name|String
name|column
parameter_list|)
throws|throws
name|SimpleWebException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|verifyParam
argument_list|(
name|column
argument_list|,
literal|":column"
argument_list|)
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|descOneColumn
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|column
argument_list|)
return|;
block|}
comment|/**    * Create a column in an hcat table.    */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"ddl/database/{db}/table/{table}/column/{column}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|addOneColumn
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"db"
argument_list|)
name|String
name|db
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"table"
argument_list|)
name|String
name|table
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"column"
argument_list|)
name|String
name|column
parameter_list|,
name|ColumnDesc
name|desc
parameter_list|)
throws|throws
name|HcatException
throws|,
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|ExecuteException
throws|,
name|IOException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|db
argument_list|,
literal|":db"
argument_list|)
expr_stmt|;
name|verifyDdlParam
argument_list|(
name|table
argument_list|,
literal|":table"
argument_list|)
expr_stmt|;
name|verifyParam
argument_list|(
name|column
argument_list|,
literal|":column"
argument_list|)
expr_stmt|;
name|verifyParam
argument_list|(
name|desc
operator|.
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|name
operator|=
name|column
expr_stmt|;
name|HcatDelegator
name|d
init|=
operator|new
name|HcatDelegator
argument_list|(
name|appConf
argument_list|,
name|execService
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|addOneColumn
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
name|desc
argument_list|)
return|;
block|}
comment|/**    * Run a MapReduce Streaming job.    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"mapreduce/streaming"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|EnqueueBean
name|mapReduceStreaming
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"input"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|inputs
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"output"
argument_list|)
name|String
name|output
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"mapper"
argument_list|)
name|String
name|mapper
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"reducer"
argument_list|)
name|String
name|reducer
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"file"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"define"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|defines
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"cmdenv"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|cmdenvs
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"arg"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"statusdir"
argument_list|)
name|String
name|statusdir
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"callback"
argument_list|)
name|String
name|callback
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|QueueException
throws|,
name|ExecuteException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyParam
argument_list|(
name|inputs
argument_list|,
literal|"input"
argument_list|)
expr_stmt|;
name|verifyParam
argument_list|(
name|mapper
argument_list|,
literal|"mapper"
argument_list|)
expr_stmt|;
name|verifyParam
argument_list|(
name|reducer
argument_list|,
literal|"reducer"
argument_list|)
expr_stmt|;
name|StreamingDelegator
name|d
init|=
operator|new
name|StreamingDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|output
argument_list|,
name|mapper
argument_list|,
name|reducer
argument_list|,
name|files
argument_list|,
name|defines
argument_list|,
name|cmdenvs
argument_list|,
name|args
argument_list|,
name|statusdir
argument_list|,
name|callback
argument_list|,
name|getCompletedUrl
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Run a MapReduce Jar job.    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"mapreduce/jar"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|EnqueueBean
name|mapReduceJar
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"jar"
argument_list|)
name|String
name|jar
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"class"
argument_list|)
name|String
name|mainClass
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"libjars"
argument_list|)
name|String
name|libjars
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"files"
argument_list|)
name|String
name|files
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"arg"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"define"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|defines
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"statusdir"
argument_list|)
name|String
name|statusdir
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"callback"
argument_list|)
name|String
name|callback
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|QueueException
throws|,
name|ExecuteException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyParam
argument_list|(
name|jar
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|verifyParam
argument_list|(
name|mainClass
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|JarDelegator
name|d
init|=
operator|new
name|JarDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|jar
argument_list|,
name|mainClass
argument_list|,
name|libjars
argument_list|,
name|files
argument_list|,
name|args
argument_list|,
name|defines
argument_list|,
name|statusdir
argument_list|,
name|callback
argument_list|,
name|getCompletedUrl
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Run a Pig job.    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"pig"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|EnqueueBean
name|pig
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"execute"
argument_list|)
name|String
name|execute
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"file"
argument_list|)
name|String
name|srcFile
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"arg"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|pigArgs
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"files"
argument_list|)
name|String
name|otherFiles
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"statusdir"
argument_list|)
name|String
name|statusdir
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"callback"
argument_list|)
name|String
name|callback
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|QueueException
throws|,
name|ExecuteException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
if|if
condition|(
name|execute
operator|==
literal|null
operator|&&
name|srcFile
operator|==
literal|null
condition|)
throw|throw
operator|new
name|BadParam
argument_list|(
literal|"Either execute or file parameter required"
argument_list|)
throw|;
name|PigDelegator
name|d
init|=
operator|new
name|PigDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|execute
argument_list|,
name|srcFile
argument_list|,
name|pigArgs
argument_list|,
name|otherFiles
argument_list|,
name|statusdir
argument_list|,
name|callback
argument_list|,
name|getCompletedUrl
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Run a Hive job.    * @param execute    SQL statement to run, equivalent to "-e" from hive command line    * @param srcFile    name of hive script file to run, equivalent to "-f" from hive    *                   command line    * @param hiveArgs   additional command line argument passed to the hive command line.     *                   Please check https://cwiki.apache.org/Hive/languagemanual-cli.html    *                   for detailed explanation of command line arguments    * @param otherFiles additional files to be shipped to the launcher, such as the jars    *                   used in "add jar" statement in hive script    * @param defines    shortcut for command line arguments "--define"    * @param statusdir  where the stderr/stdout of templeton controller job goes    * @param callback   callback url when the hive job finishes    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"hive"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|EnqueueBean
name|hive
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"execute"
argument_list|)
name|String
name|execute
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"file"
argument_list|)
name|String
name|srcFile
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"arg"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|hiveArgs
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"files"
argument_list|)
name|String
name|otherFiles
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"define"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|defines
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"statusdir"
argument_list|)
name|String
name|statusdir
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"callback"
argument_list|)
name|String
name|callback
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BusyException
throws|,
name|BadParam
throws|,
name|QueueException
throws|,
name|ExecuteException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
if|if
condition|(
name|execute
operator|==
literal|null
operator|&&
name|srcFile
operator|==
literal|null
condition|)
throw|throw
operator|new
name|BadParam
argument_list|(
literal|"Either execute or file parameter required"
argument_list|)
throw|;
name|HiveDelegator
name|d
init|=
operator|new
name|HiveDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|execute
argument_list|,
name|srcFile
argument_list|,
name|defines
argument_list|,
name|hiveArgs
argument_list|,
name|otherFiles
argument_list|,
name|statusdir
argument_list|,
name|callback
argument_list|,
name|getCompletedUrl
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return the status of the jobid.    * @deprecated use GET jobs/{jobid} instead.    */
annotation|@
name|Deprecated
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"queue/{jobid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|QueueStatusBean
name|showQueueId
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jobid
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|showJobId
argument_list|(
name|jobid
argument_list|)
return|;
block|}
comment|/**    * Kill a job in the queue.    * @deprecated use DELETE jobs/{jobid} instead.    */
annotation|@
name|Deprecated
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"queue/{jobid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|QueueStatusBean
name|deleteQueueId
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jobid
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|deleteJobId
argument_list|(
name|jobid
argument_list|)
return|;
block|}
comment|/**    * Return all the known job ids for this user.    * @deprecated use GET jobs instead.    */
annotation|@
name|Deprecated
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"queue"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|showQueueList
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"showall"
argument_list|)
name|boolean
name|showall
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|ListDelegator
name|d
init|=
operator|new
name|ListDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|showall
argument_list|)
return|;
block|}
comment|/**    * Return the status of the jobid.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"jobs/{jobid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|QueueStatusBean
name|showJobId
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jobid
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyParam
argument_list|(
name|jobid
argument_list|,
literal|":jobid"
argument_list|)
expr_stmt|;
name|StatusDelegator
name|d
init|=
operator|new
name|StatusDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|jobid
argument_list|)
return|;
block|}
comment|/**    * Kill a job in the queue.    */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"jobs/{jobid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|QueueStatusBean
name|deleteJobId
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jobid
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|verifyParam
argument_list|(
name|jobid
argument_list|,
literal|":jobid"
argument_list|)
expr_stmt|;
name|DeleteDelegator
name|d
init|=
operator|new
name|DeleteDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|jobid
argument_list|)
return|;
block|}
comment|/**    * Return all the known job ids for this user.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"jobs"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|JobItemBean
argument_list|>
name|showJobList
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"showall"
argument_list|)
name|boolean
name|showall
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|BadParam
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|verifyUser
argument_list|()
expr_stmt|;
name|boolean
name|showDetails
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
operator|!
name|fields
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadParam
argument_list|(
literal|"fields value other than * is not supported"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|showDetails
operator|=
literal|true
expr_stmt|;
block|}
name|ListDelegator
name|ld
init|=
operator|new
name|ListDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ld
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|showall
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JobItemBean
argument_list|>
name|detailList
init|=
operator|new
name|ArrayList
argument_list|<
name|JobItemBean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|job
range|:
name|list
control|)
block|{
name|JobItemBean
name|jobItem
init|=
operator|new
name|JobItemBean
argument_list|()
decl_stmt|;
name|jobItem
operator|.
name|id
operator|=
name|job
expr_stmt|;
if|if
condition|(
name|showDetails
condition|)
block|{
name|StatusDelegator
name|sd
init|=
operator|new
name|StatusDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
name|QueueStatusBean
name|statusBean
init|=
name|sd
operator|.
name|run
argument_list|(
name|getDoAsUser
argument_list|()
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|jobItem
operator|.
name|detail
operator|=
name|statusBean
expr_stmt|;
block|}
name|detailList
operator|.
name|add
argument_list|(
name|jobItem
argument_list|)
expr_stmt|;
block|}
return|return
name|detailList
return|;
block|}
comment|/**    * Notify on a completed job.  Called by JobTracker.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"internal/complete/{jobid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|CompleteBean
name|completeJob
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jobid
parameter_list|)
throws|throws
name|CallbackFailedException
throws|,
name|IOException
block|{
name|CompleteDelegator
name|d
init|=
operator|new
name|CompleteDelegator
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
return|return
name|d
operator|.
name|run
argument_list|(
name|jobid
argument_list|)
return|;
block|}
comment|/**    * Verify that we have a valid user.  Throw an exception if invalid.    */
specifier|public
name|void
name|verifyUser
parameter_list|()
throws|throws
name|NotAuthorizedException
block|{
name|String
name|requestingUser
init|=
name|getRequestingUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestingUser
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"No user found."
decl_stmt|;
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
name|msg
operator|+=
literal|"  Missing "
operator|+
name|PseudoAuthenticator
operator|.
name|USER_NAME
operator|+
literal|" parameter."
expr_stmt|;
throw|throw
operator|new
name|NotAuthorizedException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|doAs
operator|!=
literal|null
operator|&&
operator|!
name|doAs
operator|.
name|equals
argument_list|(
name|requestingUser
argument_list|)
condition|)
block|{
comment|/*if doAs user is different than logged in user, need to check that       that logged in user is authorized to run as 'doAs'*/
name|ProxyUserSupport
operator|.
name|validate
argument_list|(
name|requestingUser
argument_list|,
name|getRequestingHost
argument_list|(
name|requestingUser
argument_list|,
name|request
argument_list|)
argument_list|,
name|doAs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * All 'tasks' spawned by WebHCat should be run as this user.  W/o doAs query parameter    * this is just the user making the request (or     * {@link org.apache.hadoop.security.authentication.client.PseudoAuthenticator#USER_NAME}    * query param).    * @return value of doAs query parameter or {@link #getRequestingUser()}    */
specifier|private
name|String
name|getDoAsUser
parameter_list|()
block|{
return|return
name|doAs
operator|!=
literal|null
operator|&&
operator|!
name|doAs
operator|.
name|equals
argument_list|(
name|getRequestingUser
argument_list|()
argument_list|)
condition|?
name|doAs
else|:
name|getRequestingUser
argument_list|()
return|;
block|}
comment|/**    * Verify that the parameter exists.  Throw an exception if invalid.    */
specifier|public
name|void
name|verifyParam
parameter_list|(
name|String
name|param
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|BadParam
block|{
if|if
condition|(
name|param
operator|==
literal|null
condition|)
throw|throw
operator|new
name|BadParam
argument_list|(
literal|"Missing "
operator|+
name|name
operator|+
literal|" parameter"
argument_list|)
throw|;
block|}
comment|/**    * Verify that the parameter exists.  Throw an exception if invalid.    */
specifier|public
name|void
name|verifyParam
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|param
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|BadParam
block|{
if|if
condition|(
name|param
operator|==
literal|null
operator|||
name|param
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|BadParam
argument_list|(
literal|"Missing "
operator|+
name|name
operator|+
literal|" parameter"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
specifier|final
name|Pattern
name|DDL_ID
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[a-zA-Z]\\w*"
argument_list|)
decl_stmt|;
comment|/**    * Verify that the parameter exists and is a simple DDL identifier    * name.  Throw an exception if invalid.    *    * Bug: This needs to allow for quoted ddl identifiers.    */
specifier|public
name|void
name|verifyDdlParam
parameter_list|(
name|String
name|param
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|BadParam
block|{
name|verifyParam
argument_list|(
name|param
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Matcher
name|m
init|=
name|DDL_ID
operator|.
name|matcher
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
throw|throw
operator|new
name|BadParam
argument_list|(
literal|"Invalid DDL identifier "
operator|+
name|name
argument_list|)
throw|;
block|}
comment|/**    * Get the user name from the security context, i.e. the user making the HTTP request.    * With simple/pseudo security mode this should return the    * value of user.name query param, in kerberos mode it's the kinit'ed user.    */
specifier|private
name|String
name|getRequestingUser
parameter_list|()
block|{
if|if
condition|(
name|theSecurityContext
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|theSecurityContext
operator|.
name|getUserPrincipal
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|//map hue/foo.bar@something.com->hue since user group checks
comment|// and config files are in terms of short name
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|theSecurityContext
operator|.
name|getUserPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
comment|/**    * The callback url on this server when a task is completed.    */
specifier|public
name|String
name|getCompletedUrl
parameter_list|()
block|{
if|if
condition|(
name|theUriInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|theUriInfo
operator|.
name|getBaseUri
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|theUriInfo
operator|.
name|getBaseUri
argument_list|()
operator|+
name|VERSION
operator|+
literal|"/internal/complete/$jobId"
return|;
block|}
comment|/**    * Returns canonical host name from which the request is made; used for doAs validation      */
specifier|private
specifier|static
name|String
name|getRequestingHost
parameter_list|(
name|String
name|requestingUser
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
specifier|final
name|String
name|unkHost
init|=
literal|"???"
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"request is null; cannot determine hostname"
argument_list|)
expr_stmt|;
return|return
name|unkHost
return|;
block|}
try|try
block|{
name|String
name|address
init|=
name|request
operator|.
name|getRemoteAddr
argument_list|()
decl_stmt|;
comment|//returns IP addr
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Request remote address is NULL for user [{0}]"
argument_list|,
name|requestingUser
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|unkHost
return|;
block|}
comment|//Inet4Address/Inet6Address
name|String
name|hostName
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|address
argument_list|)
operator|.
name|getCanonicalHostName
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Resolved remote hostname: [{0}]"
argument_list|,
name|hostName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hostName
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Request remote address could not be resolved, {0}"
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|unkHost
return|;
block|}
block|}
block|}
end_class

end_unit

