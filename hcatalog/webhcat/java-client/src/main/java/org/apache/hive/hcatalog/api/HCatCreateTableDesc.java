begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|ColumnarSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Class HCatCreateTableDesc for defining attributes for a new table.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|HCatCreateTableDesc
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HCatCreateTableDesc
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|boolean
name|isExternal
decl_stmt|;
specifier|private
name|String
name|comment
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partCols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
decl_stmt|;
specifier|private
name|int
name|numBuckets
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
decl_stmt|;
specifier|private
name|boolean
name|ifNotExists
decl_stmt|;
specifier|private
name|String
name|fileFormat
decl_stmt|;
specifier|private
name|String
name|inputformat
decl_stmt|;
specifier|private
name|String
name|outputformat
decl_stmt|;
specifier|private
name|String
name|serde
decl_stmt|;
specifier|private
name|String
name|storageHandler
decl_stmt|;
specifier|private
name|HCatCreateTableDesc
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|cols
operator|=
name|columns
expr_stmt|;
block|}
comment|/**      * Creates a builder for defining attributes.      *      * @param dbName the db name      * @param tableName the table name      * @param columns the columns      * @return the builder      */
specifier|public
specifier|static
name|Builder
name|create
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columns
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columns
argument_list|)
return|;
block|}
name|Table
name|toHiveTable
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HCatException
block|{
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblProps
operator|!=
literal|null
condition|)
block|{
name|newTable
operator|.
name|setParameters
argument_list|(
name|tblProps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isExternal
condition|)
block|{
name|newTable
operator|.
name|putToParameters
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newTable
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|comment
operator|!=
literal|null
condition|)
block|{
name|newTable
operator|.
name|putToParameters
argument_list|(
literal|"comment"
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fileFormat
argument_list|)
condition|)
block|{
name|sd
operator|.
name|setInputFormat
argument_list|(
name|inputformat
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|outputformat
argument_list|)
expr_stmt|;
if|if
condition|(
name|serde
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|serde
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using LazySimpleSerDe for table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating instance of storage handler to get input/output, serder info."
argument_list|)
expr_stmt|;
name|HiveStorageHandler
name|sh
init|=
name|HiveUtils
operator|.
name|getStorageHandler
argument_list|(
name|conf
argument_list|,
name|storageHandler
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
name|sh
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|sh
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|sh
operator|.
name|getSerDeClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|putToParameters
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|,
name|storageHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Exception while creating instance of storage handler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|newTable
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|partCols
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|hivePtnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|fs
range|:
name|this
operator|.
name|partCols
control|)
block|{
name|hivePtnCols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getFieldSchema
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newTable
operator|.
name|setPartitionKeys
argument_list|(
name|hivePtnCols
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|cols
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|hiveTblCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|fs
range|:
name|this
operator|.
name|cols
control|)
block|{
name|hiveTblCols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getFieldSchema
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|hiveTblCols
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|bucketCols
operator|!=
literal|null
condition|)
block|{
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setNumBuckets
argument_list|(
name|numBuckets
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|sortCols
operator|!=
literal|null
condition|)
block|{
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setSortCols
argument_list|(
name|sortCols
argument_list|)
expr_stmt|;
block|}
name|newTable
operator|.
name|setCreateTime
argument_list|(
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setLastAccessTimeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|newTable
return|;
block|}
comment|/**      * Gets the if not exists.      *      * @return the if not exists      */
specifier|public
name|boolean
name|getIfNotExists
parameter_list|()
block|{
return|return
name|this
operator|.
name|ifNotExists
return|;
block|}
comment|/**      * Gets the table name.      *      * @return the table name      */
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
comment|/**      * Gets the cols.      *      * @return the cols      */
specifier|public
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|getCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|cols
return|;
block|}
comment|/**      * Gets the partition cols.      *      * @return the partition cols      */
specifier|public
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|getPartitionCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|partCols
return|;
block|}
comment|/**      * Gets the bucket cols.      *      * @return the bucket cols      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBucketCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|bucketCols
return|;
block|}
specifier|public
name|int
name|getNumBuckets
parameter_list|()
block|{
return|return
name|this
operator|.
name|numBuckets
return|;
block|}
comment|/**      * Gets the comments.      *      * @return the comments      */
specifier|public
name|String
name|getComments
parameter_list|()
block|{
return|return
name|this
operator|.
name|comment
return|;
block|}
comment|/**      * Gets the storage handler.      *      * @return the storage handler      */
specifier|public
name|String
name|getStorageHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|storageHandler
return|;
block|}
comment|/**      * Gets the location.      *      * @return the location      */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
comment|/**      * Gets the external.      *      * @return the external      */
specifier|public
name|boolean
name|getExternal
parameter_list|()
block|{
return|return
name|this
operator|.
name|isExternal
return|;
block|}
comment|/**      * Gets the sort cols.      *      * @return the sort cols      */
specifier|public
name|List
argument_list|<
name|Order
argument_list|>
name|getSortCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|sortCols
return|;
block|}
comment|/**      * Gets the tbl props.      *      * @return the tbl props      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTblProps
parameter_list|()
block|{
return|return
name|this
operator|.
name|tblProps
return|;
block|}
comment|/**      * Gets the file format.      *      * @return the file format      */
specifier|public
name|String
name|getFileFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileFormat
return|;
block|}
comment|/**      * Gets the database name.      *      * @return the database name      */
specifier|public
name|String
name|getDatabaseName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HCatCreateTableDesc ["
operator|+
operator|(
name|tableName
operator|!=
literal|null
condition|?
literal|"tableName="
operator|+
name|tableName
operator|+
literal|", "
else|:
literal|"tableName=null"
operator|)
operator|+
operator|(
name|dbName
operator|!=
literal|null
condition|?
literal|"dbName="
operator|+
name|dbName
operator|+
literal|", "
else|:
literal|"dbName=null"
operator|)
operator|+
literal|"isExternal="
operator|+
name|isExternal
operator|+
literal|", "
operator|+
operator|(
name|comment
operator|!=
literal|null
condition|?
literal|"comment="
operator|+
name|comment
operator|+
literal|", "
else|:
literal|"comment=null"
operator|)
operator|+
operator|(
name|location
operator|!=
literal|null
condition|?
literal|"location="
operator|+
name|location
operator|+
literal|", "
else|:
literal|"location=null"
operator|)
operator|+
operator|(
name|cols
operator|!=
literal|null
condition|?
literal|"cols="
operator|+
name|cols
operator|+
literal|", "
else|:
literal|"cols=null"
operator|)
operator|+
operator|(
name|partCols
operator|!=
literal|null
condition|?
literal|"partCols="
operator|+
name|partCols
operator|+
literal|", "
else|:
literal|"partCols=null"
operator|)
operator|+
operator|(
name|bucketCols
operator|!=
literal|null
condition|?
literal|"bucketCols="
operator|+
name|bucketCols
operator|+
literal|", "
else|:
literal|"bucketCols=null"
operator|)
operator|+
literal|"numBuckets="
operator|+
name|numBuckets
operator|+
literal|", "
operator|+
operator|(
name|sortCols
operator|!=
literal|null
condition|?
literal|"sortCols="
operator|+
name|sortCols
operator|+
literal|", "
else|:
literal|"sortCols=null"
operator|)
operator|+
operator|(
name|tblProps
operator|!=
literal|null
condition|?
literal|"tblProps="
operator|+
name|tblProps
operator|+
literal|", "
else|:
literal|"tblProps=null"
operator|)
operator|+
literal|"ifNotExists="
operator|+
name|ifNotExists
operator|+
literal|", "
operator|+
operator|(
name|fileFormat
operator|!=
literal|null
condition|?
literal|"fileFormat="
operator|+
name|fileFormat
operator|+
literal|", "
else|:
literal|"fileFormat=null"
operator|)
operator|+
operator|(
name|inputformat
operator|!=
literal|null
condition|?
literal|"inputformat="
operator|+
name|inputformat
operator|+
literal|", "
else|:
literal|"inputformat=null"
operator|)
operator|+
operator|(
name|outputformat
operator|!=
literal|null
condition|?
literal|"outputformat="
operator|+
name|outputformat
operator|+
literal|", "
else|:
literal|"outputformat=null"
operator|)
operator|+
operator|(
name|serde
operator|!=
literal|null
condition|?
literal|"serde="
operator|+
name|serde
operator|+
literal|", "
else|:
literal|"serde=null"
operator|)
operator|+
operator|(
name|storageHandler
operator|!=
literal|null
condition|?
literal|"storageHandler="
operator|+
name|storageHandler
else|:
literal|"storageHandler=null"
operator|)
operator|+
literal|"]"
return|;
block|}
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|boolean
name|isExternal
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partCols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
decl_stmt|;
specifier|private
name|int
name|numBuckets
decl_stmt|;
specifier|private
name|String
name|comment
decl_stmt|;
specifier|private
name|String
name|fileFormat
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
specifier|private
name|String
name|storageHandler
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
decl_stmt|;
specifier|private
name|boolean
name|ifNotExists
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|Builder
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|cols
operator|=
name|columns
expr_stmt|;
block|}
comment|/**          * If not exists.          *          * @param ifNotExists If set to true, hive will not throw exception, if a          * table with the same name already exists.          * @return the builder          */
specifier|public
name|Builder
name|ifNotExists
parameter_list|(
name|boolean
name|ifNotExists
parameter_list|)
block|{
name|this
operator|.
name|ifNotExists
operator|=
name|ifNotExists
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Partition cols.          *          * @param partCols the partition cols          * @return the builder          */
specifier|public
name|Builder
name|partCols
parameter_list|(
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partCols
parameter_list|)
block|{
name|this
operator|.
name|partCols
operator|=
name|partCols
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Bucket cols.          *          * @param bucketCols the bucket cols          * @return the builder          */
specifier|public
name|Builder
name|bucketCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|int
name|buckets
parameter_list|)
block|{
name|this
operator|.
name|bucketCols
operator|=
name|bucketCols
expr_stmt|;
name|this
operator|.
name|numBuckets
operator|=
name|buckets
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Storage handler.          *          * @param storageHandler the storage handler          * @return the builder          */
specifier|public
name|Builder
name|storageHandler
parameter_list|(
name|String
name|storageHandler
parameter_list|)
block|{
name|this
operator|.
name|storageHandler
operator|=
name|storageHandler
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Location.          *          * @param location the location          * @return the builder          */
specifier|public
name|Builder
name|location
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Comments.          *          * @param comment the comment          * @return the builder          */
specifier|public
name|Builder
name|comments
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Checks if is table external.          *          * @param isExternal the is external          * @return the builder          */
specifier|public
name|Builder
name|isTableExternal
parameter_list|(
name|boolean
name|isExternal
parameter_list|)
block|{
name|this
operator|.
name|isExternal
operator|=
name|isExternal
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sort cols.          *          * @param sortCols the sort cols          * @return the builder          */
specifier|public
name|Builder
name|sortCols
parameter_list|(
name|ArrayList
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|)
block|{
name|this
operator|.
name|sortCols
operator|=
name|sortCols
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Tbl props.          *          * @param tblProps the tbl props          * @return the builder          */
specifier|public
name|Builder
name|tblProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
parameter_list|)
block|{
name|this
operator|.
name|tblProps
operator|=
name|tblProps
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * File format.          *          * @param format the format          * @return the builder          */
specifier|public
name|Builder
name|fileFormat
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|fileFormat
operator|=
name|format
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Builds the HCatCreateTableDesc.          *          * @return HCatCreateTableDesc          * @throws HCatException          */
specifier|public
name|HCatCreateTableDesc
name|build
parameter_list|()
throws|throws
name|HCatException
block|{
if|if
condition|(
name|this
operator|.
name|dbName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Database name found null. Setting db to :"
operator|+
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
name|HCatCreateTableDesc
name|desc
init|=
operator|new
name|HCatCreateTableDesc
argument_list|(
name|this
operator|.
name|dbName
argument_list|,
name|this
operator|.
name|tableName
argument_list|,
name|this
operator|.
name|cols
argument_list|)
decl_stmt|;
name|desc
operator|.
name|ifNotExists
operator|=
name|this
operator|.
name|ifNotExists
expr_stmt|;
name|desc
operator|.
name|isExternal
operator|=
name|this
operator|.
name|isExternal
expr_stmt|;
name|desc
operator|.
name|comment
operator|=
name|this
operator|.
name|comment
expr_stmt|;
name|desc
operator|.
name|partCols
operator|=
name|this
operator|.
name|partCols
expr_stmt|;
name|desc
operator|.
name|bucketCols
operator|=
name|this
operator|.
name|bucketCols
expr_stmt|;
name|desc
operator|.
name|numBuckets
operator|=
name|this
operator|.
name|numBuckets
expr_stmt|;
name|desc
operator|.
name|location
operator|=
name|this
operator|.
name|location
expr_stmt|;
name|desc
operator|.
name|tblProps
operator|=
name|this
operator|.
name|tblProps
expr_stmt|;
name|desc
operator|.
name|sortCols
operator|=
name|this
operator|.
name|sortCols
expr_stmt|;
name|desc
operator|.
name|serde
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fileFormat
argument_list|)
condition|)
block|{
name|desc
operator|.
name|fileFormat
operator|=
name|fileFormat
expr_stmt|;
if|if
condition|(
literal|"SequenceFile"
operator|.
name|equalsIgnoreCase
argument_list|(
name|fileFormat
argument_list|)
condition|)
block|{
name|desc
operator|.
name|inputformat
operator|=
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|desc
operator|.
name|outputformat
operator|=
name|SequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RCFile"
operator|.
name|equalsIgnoreCase
argument_list|(
name|fileFormat
argument_list|)
condition|)
block|{
name|desc
operator|.
name|inputformat
operator|=
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|desc
operator|.
name|outputformat
operator|=
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|desc
operator|.
name|serde
operator|=
name|ColumnarSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|desc
operator|.
name|storageHandler
operator|=
name|StringUtils
operator|.
name|EMPTY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|storageHandler
argument_list|)
condition|)
block|{
name|desc
operator|.
name|storageHandler
operator|=
name|storageHandler
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|.
name|fileFormat
operator|=
literal|"TextFile"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using text file format for the table."
argument_list|)
expr_stmt|;
name|desc
operator|.
name|inputformat
operator|=
name|TextInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table input format:"
operator|+
name|desc
operator|.
name|inputformat
argument_list|)
expr_stmt|;
name|desc
operator|.
name|outputformat
operator|=
name|IgnoreKeyTextOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table output format:"
operator|+
name|desc
operator|.
name|outputformat
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
block|}
block|}
end_class

end_unit

