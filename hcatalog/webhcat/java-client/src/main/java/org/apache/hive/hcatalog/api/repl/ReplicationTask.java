begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatNotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|messaging
operator|.
name|MessageFactory
import|;
end_import

begin_comment
comment|/**  * ReplicationTask captures the concept of what it'd take to replicate changes from  * one warehouse to another given a notification event that captures what changed.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
specifier|abstract
class|class
name|ReplicationTask
block|{
specifier|protected
name|HCatNotificationEvent
name|event
decl_stmt|;
specifier|protected
name|StagingDirectoryProvider
name|srcStagingDirProvider
init|=
literal|null
decl_stmt|;
specifier|protected
name|StagingDirectoryProvider
name|dstStagingDirProvider
init|=
literal|null
decl_stmt|;
specifier|protected
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableNameMapping
init|=
literal|null
decl_stmt|;
specifier|protected
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbNameMapping
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|MessageFactory
name|messageFactory
init|=
name|MessageFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Factory
name|factoryInstance
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|factoryClassName
init|=
literal|null
decl_stmt|;
specifier|public
interface|interface
name|Factory
block|{
specifier|public
name|ReplicationTask
name|create
parameter_list|(
name|HCatClient
name|client
parameter_list|,
name|HCatNotificationEvent
name|event
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
name|Factory
name|getFactoryInstance
parameter_list|(
name|HCatClient
name|client
parameter_list|)
block|{
if|if
condition|(
name|factoryInstance
operator|==
literal|null
condition|)
block|{
name|createFactoryInstance
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
return|return
name|factoryInstance
return|;
block|}
comment|/**    * Create factory instance for instantiating ReplicationTasks.    *    * The order precedence is as follows:    *    * a) If a factory has already been instantiated, and is valid, use it.    * b) If a factoryClassName has been provided, through .resetFactory(), attempt to instantiate that.    * c) If a hive.repl.task.factory has been set in the default hive conf, use that.    * d) If none of the above methods work, instantiate an anoymous factory that will return an error    *    whenever called, till a user calls resetFactory.    */
specifier|private
specifier|synchronized
specifier|static
name|void
name|createFactoryInstance
parameter_list|(
name|HCatClient
name|client
parameter_list|)
block|{
if|if
condition|(
name|factoryInstance
operator|==
literal|null
condition|)
block|{
comment|// instantiate new factory instance only if current one is not valid.
if|if
condition|(
name|factoryClassName
operator|==
literal|null
condition|)
block|{
comment|// figure out which factory we're instantiating from HiveConf iff it's not been set on us directly.
name|factoryClassName
operator|=
name|client
operator|.
name|getConfVal
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_REPL_TASK_FACTORY
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Factory
argument_list|>
name|factoryClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Factory
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|factoryClassName
argument_list|)
decl_stmt|;
name|factoryInstance
operator|=
name|factoryClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|factoryInstance
operator|=
operator|new
name|Factory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ReplicationTask
name|create
parameter_list|(
name|HCatClient
name|client
parameter_list|,
name|HCatNotificationEvent
name|event
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error instantiating ReplicationTask.Factory "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_REPL_TASK_FACTORY
operator|.
name|varname
operator|+
literal|"="
operator|+
name|factoryClassName
operator|+
literal|". Call resetFactory() if you need to reset to a valid one."
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Package scoped method used for testing - allows resetting the ReplicationTaskFactory used    * @param factoryClass The new ReplicationTaskFactory to use.    */
specifier|public
specifier|static
name|void
name|resetFactory
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Factory
argument_list|>
name|factoryClass
parameter_list|)
block|{
if|if
condition|(
name|factoryClass
operator|!=
literal|null
condition|)
block|{
name|factoryClassName
operator|=
name|factoryClass
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|factoryClassName
operator|=
literal|null
expr_stmt|;
block|}
name|factoryInstance
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Factory method to return appropriate subtype of ReplicationTask for given event    * @param event HCatEventMessage returned by the notification subsystem    * @return corresponding ReplicationTask    */
specifier|public
specifier|static
name|ReplicationTask
name|create
parameter_list|(
name|HCatClient
name|client
parameter_list|,
name|HCatNotificationEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"event should not be null"
argument_list|)
throw|;
block|}
return|return
name|getFactoryInstance
argument_list|(
name|client
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|event
argument_list|)
return|;
block|}
comment|// Primary entry point is a factory method instead of ctor
comment|// to allow for future ctor mutabulity in design
specifier|protected
name|ReplicationTask
parameter_list|(
name|HCatNotificationEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
block|}
comment|/**    * Returns the event that this ReplicationTask is attempting to replicate    * @return underlying event    */
specifier|public
name|HCatNotificationEvent
name|getEvent
parameter_list|()
block|{
return|return
name|this
operator|.
name|event
return|;
block|}
comment|/**    * Returns true if the replication task in question needs to create staging    * directories to complete its operation. This will mean that you will need    * to copy these directories over to the destination warehouse for each    * source-destination warehouse pair.    * If this is true, you will need to call .withSrcStagingDirProvider(...)    * and .withDstStagingDirProvider(...) before this ReplicationTask is usable    */
specifier|public
specifier|abstract
name|boolean
name|needsStagingDirs
parameter_list|()
function_decl|;
comment|/**    * Returns true if this ReplicationTask is prepared with all info it needs, and is    * ready to be used    */
specifier|public
name|boolean
name|isActionable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|needsStagingDirs
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|(
name|srcStagingDirProvider
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dstStagingDirProvider
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * See {@link org.apache.hive.hcatalog.api.repl.StagingDirectoryProvider}    * @param srcStagingDirProvider Staging Directory Provider for the source warehouse    * @return this    */
specifier|public
name|ReplicationTask
name|withSrcStagingDirProvider
parameter_list|(
name|StagingDirectoryProvider
name|srcStagingDirProvider
parameter_list|)
block|{
name|this
operator|.
name|srcStagingDirProvider
operator|=
name|srcStagingDirProvider
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * See {@link org.apache.hive.hcatalog.api.repl.StagingDirectoryProvider}    * @param dstStagingDirProvider Staging Directory Provider for the destination warehouse    * @return this replication task    */
specifier|public
name|ReplicationTask
name|withDstStagingDirProvider
parameter_list|(
name|StagingDirectoryProvider
name|dstStagingDirProvider
parameter_list|)
block|{
name|this
operator|.
name|dstStagingDirProvider
operator|=
name|dstStagingDirProvider
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Allows a user to specify a table name mapping, where the the function provided maps the name of    * the table in the source warehouse to the name of the table in the dest warehouse. It is expected    * that if the mapping does not exist, it should return the same name sent in. Or, if the function    * throws an IllegalArgumentException as well, a ReplicationTask will use the same key sent in.    * That way, the default will then be that the destination db name is the same as the src db name    *    * If you want to use a Map&lt;String,String&gt; mapping instead of a Function&lt;String,String&gt;,    * simply call this function as .withTableNameMapping(ReplicationUtils.mapBasedFunction(tableMap))    * @param tableNameMapping    * @return this replication task    */
specifier|public
name|ReplicationTask
name|withTableNameMapping
parameter_list|(
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableNameMapping
parameter_list|)
block|{
name|this
operator|.
name|tableNameMapping
operator|=
name|tableNameMapping
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Allows a user to specify a db name mapping, where the the function provided maps the name of    * the db in the source warehouse to the name of the db in the dest warehouse. It is expected    * that if the mapping does not exist, it should return the same name sent in. Or, if the function    * throws an IllegalArgumentException as well, a ReplicationTask will use the same key sent in.    * That way, the default will then be that the destination db name is the same as the src db name    *    * If you want to use a Map&lt;String,String&gt; mapping instead of a Function&lt;String,String&gt;,    * simply call this function as .withDbNameMapping(ReplicationUtils.mapBasedFunction(dbMap))    * @param dbNameMapping    * @return this replication task    */
specifier|public
name|ReplicationTask
name|withDbNameMapping
parameter_list|(
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbNameMapping
parameter_list|)
block|{
name|this
operator|.
name|dbNameMapping
operator|=
name|dbNameMapping
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|protected
name|void
name|verifyActionable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isActionable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"actionable command on task called when ReplicationTask is still not actionable."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a Iterable&lt;Command&gt; to send to a hive driver on the source warehouse    *    * If you *need* a List&lt;Command&gt; instead, you can use guava's    * ImmutableList.copyOf(iterable) or Lists.newArrayList(iterable) to    * get the underlying list, but this defeats the purpose of making this    * interface an Iterable rather than a List, since it is very likely    * that the number of Commands returned here will cause your process    * to run OOM.    */
specifier|abstract
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Command
argument_list|>
name|getSrcWhCommands
parameter_list|()
function_decl|;
comment|/**    * Returns a Iterable&lt;Command&gt; to send to a hive driver on the source warehouse    *    * If you *need* a List&lt;Command&gt; instead, you can use guava's    * ImmutableList.copyOf(iterable) or Lists.newArrayList(iterable) to    * get the underlying list, but this defeats the purpose of making this    * interface an Iterable rather than a List, since it is very likely    * that the number of Commands returned here will cause your process    * to run OOM.    */
specifier|abstract
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Command
argument_list|>
name|getDstWhCommands
parameter_list|()
function_decl|;
specifier|protected
name|void
name|validateEventType
parameter_list|(
name|HCatNotificationEvent
name|event
parameter_list|,
name|String
name|allowedEventType
parameter_list|)
block|{
if|if
condition|(
name|event
operator|==
literal|null
operator|||
operator|!
name|allowedEventType
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" valid only for "
operator|+
name|allowedEventType
operator|+
literal|" events."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

