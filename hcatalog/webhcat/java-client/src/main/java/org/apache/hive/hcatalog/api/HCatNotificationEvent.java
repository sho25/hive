begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_comment
comment|/**  * A wrapper class for {@link org.apache.hadoop.hive.metastore.api.NotificationEvent},  * so that if that class changes we can still keep this one constant for backward compatibility  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|HCatNotificationEvent
block|{
specifier|private
name|long
name|eventId
decl_stmt|;
specifier|private
name|int
name|eventTime
decl_stmt|;
specifier|private
name|String
name|eventType
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|String
name|message
decl_stmt|;
specifier|public
enum|enum
name|Scope
block|{
name|DB
block|,
name|TABLE
block|,
name|UNKNOWN
block|}
empty_stmt|;
specifier|public
name|HCatNotificationEvent
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
block|{
name|eventId
operator|=
name|event
operator|.
name|getEventId
argument_list|()
expr_stmt|;
name|eventTime
operator|=
name|event
operator|.
name|getEventTime
argument_list|()
expr_stmt|;
name|eventType
operator|=
name|event
operator|.
name|getEventType
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|event
operator|.
name|getDbName
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|event
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|message
operator|=
name|event
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getEventId
parameter_list|()
block|{
return|return
name|eventId
return|;
block|}
specifier|public
name|Scope
name|getEventScope
parameter_list|()
block|{
comment|// Eventually, we want this to be a richer description of having
comment|// a DB, TABLE, ROLE, etc scope. For now, we have a trivial impl
comment|// of having only DB and TABLE scopes, as determined by whether
comment|// or not the tableName is null.
if|if
condition|(
name|dbName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
return|return
name|Scope
operator|.
name|TABLE
return|;
block|}
return|return
name|Scope
operator|.
name|DB
return|;
block|}
return|return
name|Scope
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|int
name|getEventTime
parameter_list|()
block|{
return|return
name|eventTime
return|;
block|}
specifier|public
name|String
name|getEventType
parameter_list|()
block|{
return|return
name|eventType
return|;
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|dbName
return|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"eventId:"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|eventId
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" eventTime:"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|eventTime
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" eventType:<"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|eventType
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"> dbName:<"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"> tableName:<"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"> message:<"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

