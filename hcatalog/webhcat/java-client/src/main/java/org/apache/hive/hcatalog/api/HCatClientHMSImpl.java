begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
operator|.
name|HCatReplicationTaskIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
operator|.
name|ReplicationTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * The HCatClientHMSImpl is the Hive Metastore client based implementation of  * HCatClient.  */
end_comment

begin_class
specifier|public
class|class
name|HCatClientHMSImpl
extends|extends
name|HCatClient
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HCatClientHMSImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|hmsClient
decl_stmt|;
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|private
name|HiveConf
name|hiveConfig
decl_stmt|;
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listDatabaseNamesByPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dbNames
operator|=
name|hmsClient
operator|.
name|getDatabases
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while listing db names. "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exp
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Transport Exception while listing db names. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|dbNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|HCatDatabase
name|getDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|HCatException
block|{
name|HCatDatabase
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Database
name|hiveDB
init|=
name|hmsClient
operator|.
name|getDatabase
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveDB
operator|!=
literal|null
condition|)
block|{
name|db
operator|=
operator|new
name|HCatDatabase
argument_list|(
name|hiveDB
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while fetching database"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while fetching database"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while fetching database"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
return|return
name|db
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createDatabase
parameter_list|(
name|HCatCreateDBDesc
name|dbInfo
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
name|hmsClient
operator|.
name|createDatabase
argument_list|(
name|dbInfo
operator|.
name|toHiveDb
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|exp
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dbInfo
operator|.
name|getIfNotExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"AlreadyExistsException while creating database"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidObjectException while creating database"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while creating database"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while creating database"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropDatabase
parameter_list|(
name|String
name|dbName
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|DropDBMode
name|mode
parameter_list|)
throws|throws
name|HCatException
block|{
name|boolean
name|isCascade
init|=
name|mode
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cascade"
argument_list|)
decl_stmt|;
try|try
block|{
name|hmsClient
operator|.
name|dropDatabase
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
literal|true
argument_list|,
name|ifExists
argument_list|,
name|isCascade
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ifExists
condition|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while dropping db."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidOperationException while dropping db."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while dropping db."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while dropping db."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByPattern
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableNames
operator|=
name|hmsClient
operator|.
name|getTables
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|tablePattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while fetching table names. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"UnknownDB "
operator|+
name|dbName
operator|+
literal|" while fetching table names."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Transport exception while fetching table names. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|HCatTable
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|HCatException
block|{
name|HCatTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Table
name|hiveTable
init|=
name|hmsClient
operator|.
name|getTable
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveTable
operator|!=
literal|null
condition|)
block|{
name|table
operator|=
operator|new
name|HCatTable
argument_list|(
name|hiveTable
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while fetching table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while fetching table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while fetching table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|HCatCreateTableDesc
name|createTableDesc
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
name|hmsClient
operator|.
name|createTable
argument_list|(
name|createTableDesc
operator|.
name|getHCatTable
argument_list|()
operator|.
name|toHiveTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|createTableDesc
operator|.
name|getIfNotExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"AlreadyExistsException while creating table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidObjectException while creating table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while creating table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while creating table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while creating table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"IOException while creating hive conf."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTableSchema
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columnSchema
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
name|Table
name|table
init|=
name|hmsClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|HCatSchemaUtils
operator|.
name|getFieldSchemas
argument_list|(
name|columnSchema
argument_list|)
argument_list|)
expr_stmt|;
name|hmsClient
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidOperationException while updating table schema."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while updating table schema."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while updating table schema."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while updating table schema."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTableSchema
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|HCatTable
name|newTableDefinition
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
name|hmsClient
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|newTableDefinition
operator|.
name|toHiveTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidOperationException while updating table schema."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while updating table schema."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while updating table schema."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while updating table schema."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTableLike
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|existingTblName
parameter_list|,
name|String
name|newTableName
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|boolean
name|isExternal
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|HCatException
block|{
name|Table
name|hiveTable
init|=
name|getHiveTableLike
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|existingTblName
argument_list|,
name|newTableName
argument_list|,
name|ifNotExists
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveTable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hmsClient
operator|.
name|createTable
argument_list|(
name|hiveTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ifNotExists
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"A table already exists with the name "
operator|+
name|newTableName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidObjectException in create table like command."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException in create table like command."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException in create table like command."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException in create table like command."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|ifExists
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
name|hmsClient
operator|.
name|dropTable
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
name|ifExists
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ifExists
condition|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while dropping table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while dropping table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while dropping table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|renameTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
throws|throws
name|HCatException
block|{
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|Table
name|oldtbl
init|=
name|hmsClient
operator|.
name|getTable
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldtbl
operator|!=
literal|null
condition|)
block|{
comment|// TODO : Should be moved out.
if|if
condition|(
name|oldtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Cannot use rename command on a non-native table"
argument_list|)
throw|;
block|}
name|tbl
operator|=
operator|new
name|Table
argument_list|(
name|oldtbl
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|hmsClient
operator|.
name|alter_table
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|oldName
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while renaming table"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while renaming table"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidOperationException while renaming table"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while renaming table"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|hcatPtns
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatPartition
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|HCatTable
name|hcatTable
init|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|hivePtns
init|=
name|hmsClient
operator|.
name|listPartitions
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|ptn
range|:
name|hivePtns
control|)
block|{
name|hcatPtns
operator|.
name|add
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|hcatTable
argument_list|,
name|ptn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while retrieving partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while retrieving partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while retrieving partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|hcatPtns
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|getFilterString
argument_list|(
name|partitionSpec
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Hive"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
name|HCatPartitionSpec
name|getPartitionSpecs
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|maxPartitions
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
return|return
operator|new
name|HCatPartitionSpec
argument_list|(
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|hmsClient
operator|.
name|listPartitionSpecs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|maxPartitions
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while retrieving partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while retrieving partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while retrieving partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HCatPartitionSpec
name|getPartitionSpecs
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSelector
parameter_list|,
name|int
name|maxPartitions
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
name|listPartitionSpecsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|getFilterString
argument_list|(
name|partitionSelector
argument_list|)
argument_list|,
name|maxPartitions
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getFilterString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|)
block|{
specifier|final
name|String
name|AND
init|=
literal|" AND "
decl_stmt|;
name|StringBuilder
name|filter
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|partitionSpec
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|filter
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|AND
argument_list|)
expr_stmt|;
block|}
name|int
name|length
init|=
name|filter
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
name|filter
operator|.
name|delete
argument_list|(
name|length
operator|-
name|AND
operator|.
name|length
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|filter
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HCatPartition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|)
throws|throws
name|HCatException
block|{
name|HCatPartition
name|partition
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HCatTable
name|hcatTable
init|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partitionColumns
init|=
name|hcatTable
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionColumns
operator|.
name|size
argument_list|()
operator|!=
name|partitionSpec
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Partition-spec doesn't have the right number of partition keys."
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ptnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|partitionColumn
range|:
name|partitionColumns
control|)
block|{
name|String
name|partKey
init|=
name|partitionColumn
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionSpec
operator|.
name|containsKey
argument_list|(
name|partKey
argument_list|)
condition|)
block|{
name|ptnValues
operator|.
name|add
argument_list|(
name|partitionSpec
operator|.
name|get
argument_list|(
name|partKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Partition-keys added in order.
block|}
else|else
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Invalid partition-key specified: "
operator|+
name|partKey
argument_list|)
throw|;
block|}
block|}
name|Partition
name|hivePartition
init|=
name|hmsClient
operator|.
name|getPartition
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|ptnValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|hivePartition
operator|!=
literal|null
condition|)
block|{
name|partition
operator|=
operator|new
name|HCatPartition
argument_list|(
name|hcatTable
argument_list|,
name|hivePartition
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while retrieving partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while retrieving partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while retrieving partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|partition
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPartition
parameter_list|(
name|HCatAddPartitionDesc
name|partInfo
parameter_list|)
throws|throws
name|HCatException
block|{
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|hmsClient
operator|.
name|getTable
argument_list|(
name|partInfo
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|partInfo
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Should be moved out.
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeysSize
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"The table "
operator|+
name|partInfo
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is not partitioned."
argument_list|)
throw|;
block|}
name|HCatTable
name|hcatTable
init|=
operator|new
name|HCatTable
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|HCatPartition
name|hcatPartition
init|=
name|partInfo
operator|.
name|getHCatPartition
argument_list|()
decl_stmt|;
comment|// TODO: Remove in Hive 0.16.
comment|// This is only required to support the deprecated methods in HCatAddPartitionDesc.Builder.
if|if
condition|(
name|hcatPartition
operator|==
literal|null
condition|)
block|{
name|hcatPartition
operator|=
name|partInfo
operator|.
name|getHCatPartition
argument_list|(
name|hcatTable
argument_list|)
expr_stmt|;
block|}
name|hmsClient
operator|.
name|add_partition
argument_list|(
name|hcatPartition
operator|.
name|toHivePartition
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidObjectException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"AlreadyExistsException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"The table "
operator|+
name|partInfo
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is could not be found."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Helper class to help build ExprDesc tree to represent the partitions to be dropped.    * Note: At present, the ExpressionBuilder only constructs partition predicates where    * partition-keys equal specific values, and logical-AND expressions. E.g.    *  ( dt = '20150310' AND region = 'US' )    * This only supports the partition-specs specified by the Map argument of:    * {@link org.apache.hive.hcatalog.api.HCatClient#dropPartitions(String, String, Map, boolean)}    */
specifier|private
specifier|static
class|class
name|ExpressionBuilder
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PrimitiveTypeInfo
argument_list|>
name|partColumnTypesMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpecs
decl_stmt|;
specifier|public
name|ExpressionBuilder
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpecs
parameter_list|)
block|{
name|this
operator|.
name|partSpecs
operator|=
name|partSpecs
expr_stmt|;
for|for
control|(
name|FieldSchema
name|partField
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|partColumnTypesMap
operator|.
name|put
argument_list|(
name|partField
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|partField
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PrimitiveTypeInfo
name|getTypeFor
parameter_list|(
name|String
name|partColumn
parameter_list|)
block|{
return|return
name|partColumnTypesMap
operator|.
name|get
argument_list|(
name|partColumn
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Object
name|getTypeAppropriateValueFor
parameter_list|(
name|PrimitiveTypeInfo
name|type
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|ObjectInspectorConverters
operator|.
name|Converter
name|converter
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|TypeInfoUtils
operator|.
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
argument_list|,
name|TypeInfoUtils
operator|.
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|converter
operator|.
name|convert
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
name|ExprNodeGenericFuncDesc
name|equalityPredicate
parameter_list|(
name|String
name|partColumn
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SemanticException
block|{
name|PrimitiveTypeInfo
name|partColumnType
init|=
name|getTypeFor
argument_list|(
name|partColumn
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|partColumnExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|partColumnType
argument_list|,
name|partColumn
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|valueExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|partColumnType
argument_list|,
name|getTypeAppropriateValueFor
argument_list|(
name|partColumnType
argument_list|,
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|binaryPredicate
argument_list|(
literal|"="
argument_list|,
name|partColumnExpr
argument_list|,
name|valueExpr
argument_list|)
return|;
block|}
specifier|public
name|ExprNodeGenericFuncDesc
name|binaryPredicate
parameter_list|(
name|String
name|function
parameter_list|,
name|ExprNodeDesc
name|lhs
parameter_list|,
name|ExprNodeDesc
name|rhs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|function
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ExprNodeGenericFuncDesc
name|build
parameter_list|()
throws|throws
name|SemanticException
block|{
name|ExprNodeGenericFuncDesc
name|resultExpr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
range|:
name|partSpecs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|column
init|=
name|partSpec
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|partSpec
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|partExpr
init|=
name|equalityPredicate
argument_list|(
name|column
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|resultExpr
operator|=
operator|(
name|resultExpr
operator|==
literal|null
condition|?
name|partExpr
else|:
name|binaryPredicate
argument_list|(
literal|"and"
argument_list|,
name|resultExpr
argument_list|,
name|partExpr
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|resultExpr
return|;
block|}
block|}
comment|// class ExpressionBuilder;
specifier|private
specifier|static
name|boolean
name|isExternal
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|table
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
operator|&&
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|dropPartitionsUsingExpressions
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|TException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HCatClient: Dropping partitions using partition-predicate Expressions."
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|partitionExpression
init|=
operator|new
name|ExpressionBuilder
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
name|serializedPartitionExpression
init|=
operator|new
name|ObjectPair
argument_list|<>
argument_list|(
name|partitionSpec
operator|.
name|size
argument_list|()
argument_list|,
name|SerializationUtilities
operator|.
name|serializeExpressionToKryo
argument_list|(
name|partitionExpression
argument_list|)
argument_list|)
decl_stmt|;
name|hmsClient
operator|.
name|dropPartitions
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|serializedPartitionExpression
argument_list|)
argument_list|,
name|deleteData
operator|&&
operator|!
name|isExternal
argument_list|(
name|table
argument_list|)
argument_list|,
comment|// Delete data?
name|ifExists
argument_list|,
comment|// Fail if table doesn't exist?
literal|false
argument_list|)
expr_stmt|;
comment|// Need results back?
block|}
specifier|private
name|void
name|dropPartitionsIteratively
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|HCatException
throws|,
name|TException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HCatClient: Dropping partitions iteratively."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|hmsClient
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|getFilterString
argument_list|(
name|partitionSpec
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|dropPartition
argument_list|(
name|partition
argument_list|,
name|ifExists
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|HCatException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HCatClient dropPartitions(db="
operator|+
name|dbName
operator|+
literal|",table="
operator|+
name|tableName
operator|+
literal|", partitionSpec: ["
operator|+
name|partitionSpec
operator|+
literal|"])."
argument_list|)
expr_stmt|;
try|try
block|{
name|dbName
operator|=
name|checkDB
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|hmsClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveConfig
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_CLIENT_DROP_PARTITIONS_WITH_EXPRESSIONS
argument_list|)
condition|)
block|{
try|try
block|{
name|dropPartitionsUsingExpressions
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|ifExists
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|parseFailure
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not push down partition-specification to back-end, for dropPartitions(). Resorting to iteration."
argument_list|,
name|parseFailure
argument_list|)
expr_stmt|;
name|dropPartitionsIteratively
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|ifExists
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Not using expressions.
name|dropPartitionsIteratively
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|ifExists
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while dropping partition. "
operator|+
literal|"Either db("
operator|+
name|dbName
operator|+
literal|") or table("
operator|+
name|tableName
operator|+
literal|") missing."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while dropping partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while dropping partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|boolean
name|ifExists
parameter_list|)
throws|throws
name|HCatException
block|{
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|ifExists
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dropPartition
parameter_list|(
name|Partition
name|partition
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|HCatException
throws|,
name|MetaException
throws|,
name|TException
block|{
try|try
block|{
name|hmsClient
operator|.
name|dropPartition
argument_list|(
name|partition
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partition
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ifExists
condition|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while dropping partition: "
operator|+
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|listPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|hcatPtns
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatPartition
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|HCatTable
name|table
init|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|hivePtns
init|=
name|hmsClient
operator|.
name|listPartitionsByFilter
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|filter
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|ptn
range|:
name|hivePtns
control|)
block|{
name|hcatPtns
operator|.
name|add
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|ptn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while fetching partitions."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while fetching partitions."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while fetching partitions."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|hcatPtns
return|;
block|}
annotation|@
name|Override
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Hive"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
name|HCatPartitionSpec
name|listPartitionSpecsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|maxPartitions
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
return|return
operator|new
name|HCatPartitionSpec
argument_list|(
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|,
name|hmsClient
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
name|maxPartitions
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while fetching partitions."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while fetching partitions."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while fetching partitions."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|markPartitionForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
name|hmsClient
operator|.
name|markPartitionForEvent
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|tblName
argument_list|,
name|partKVs
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while marking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while marking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"UnknownTableException while marking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"UnknownDBException while marking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while marking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|HCatException
block|{
name|boolean
name|isMarked
init|=
literal|false
decl_stmt|;
try|try
block|{
name|isMarked
operator|=
name|hmsClient
operator|.
name|isPartitionMarkedForEvent
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|tblName
argument_list|,
name|partKVs
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while checking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while checking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"UnknownTableException while checking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"UnknownDBException while checking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while checking partition for event."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|isMarked
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDelegationToken
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|renewerKerberosPrincipalName
parameter_list|)
throws|throws
name|HCatException
block|{
name|String
name|token
init|=
literal|null
decl_stmt|;
try|try
block|{
name|token
operator|=
name|hmsClient
operator|.
name|getDelegationToken
argument_list|(
name|owner
argument_list|,
name|renewerKerberosPrincipalName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while getting delegation token."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while getting delegation token."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|token
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|HCatException
block|{
name|long
name|time
init|=
literal|0
decl_stmt|;
try|try
block|{
name|time
operator|=
name|hmsClient
operator|.
name|renewDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while renewing delegation token."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while renewing delegation token."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|time
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
name|hmsClient
operator|.
name|cancelDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while canceling delegation token."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while canceling delegation token."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*    * @param conf /* @throws HCatException,ConnectionFailureException    *    * @see    * org.apache.hive.hcatalog.api.HCatClient#initialize(org.apache.hadoop.conf.    * Configuration)    */
annotation|@
name|Override
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|HCatException
block|{
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
try|try
block|{
name|hiveConfig
operator|=
name|HCatUtil
operator|.
name|getHiveConf
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|hmsClient
operator|=
name|HCatUtil
operator|.
name|getHiveMetastoreClient
argument_list|(
name|hiveConfig
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while creating HMS client"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"IOException while creating HMS client"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConfVal
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultVal
parameter_list|)
block|{
return|return
name|hiveConfig
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|defaultVal
argument_list|)
return|;
block|}
specifier|private
name|Table
name|getHiveTableLike
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|existingTblName
parameter_list|,
name|String
name|newTableName
parameter_list|,
name|boolean
name|isExternal
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|HCatException
block|{
name|Table
name|oldtbl
init|=
literal|null
decl_stmt|;
name|Table
name|newTable
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oldtbl
operator|=
name|hmsClient
operator|.
name|getTable
argument_list|(
name|checkDB
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|existingTblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while retrieving existing table."
argument_list|,
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"NoSuchObjectException while retrieving existing table."
argument_list|,
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while retrieving existing table."
argument_list|,
name|e1
argument_list|)
throw|;
block|}
if|if
condition|(
name|oldtbl
operator|!=
literal|null
condition|)
block|{
name|newTable
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
name|newTableName
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|oldtbl
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newTable
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setParameters
argument_list|(
name|oldtbl
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|oldtbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isExternal
condition|)
block|{
name|newTable
operator|.
name|putToParameters
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newTable
operator|.
name|getParameters
argument_list|()
operator|.
name|remove
argument_list|(
literal|"EXTERNAL"
argument_list|)
expr_stmt|;
block|}
comment|// set create time
name|newTable
operator|.
name|setCreateTime
argument_list|(
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setLastAccessTimeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|newTable
return|;
block|}
comment|/*    * @throws HCatException    *    * @see org.apache.hive.hcatalog.api.HCatClient#closeClient()    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|HCatException
block|{
name|hmsClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|checkDB
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
return|;
block|}
else|else
block|{
return|return
name|name
return|;
block|}
block|}
comment|/*    * @param partInfoList    *  @return The size of the list of partitions.    * @throws HCatException,ConnectionFailureException    * @see org.apache.hive.hcatalog.api.HCatClient#addPartitions(java.util.List)    */
annotation|@
name|Override
specifier|public
name|int
name|addPartitions
parameter_list|(
name|List
argument_list|<
name|HCatAddPartitionDesc
argument_list|>
name|partInfoList
parameter_list|)
throws|throws
name|HCatException
block|{
name|int
name|numPartitions
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|partInfoList
operator|==
literal|null
operator|)
operator|||
operator|(
name|partInfoList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"The partition list is null or empty."
argument_list|)
throw|;
block|}
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|hmsClient
operator|.
name|getTable
argument_list|(
name|partInfoList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|partInfoList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|hcatTable
init|=
operator|new
name|HCatTable
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Partition
argument_list|>
name|ptnList
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatAddPartitionDesc
name|desc
range|:
name|partInfoList
control|)
block|{
name|HCatPartition
name|hCatPartition
init|=
name|desc
operator|.
name|getHCatPartition
argument_list|()
decl_stmt|;
comment|// TODO: Remove in Hive 0.16.
comment|// This is required only to support the deprecated HCatAddPartitionDesc.Builder interfaces.
if|if
condition|(
name|hCatPartition
operator|==
literal|null
condition|)
block|{
name|hCatPartition
operator|=
name|desc
operator|.
name|getHCatPartition
argument_list|(
name|hcatTable
argument_list|)
expr_stmt|;
block|}
name|ptnList
operator|.
name|add
argument_list|(
name|hCatPartition
operator|.
name|toHivePartition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numPartitions
operator|=
name|hmsClient
operator|.
name|add_partitions
argument_list|(
name|ptnList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidObjectException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"AlreadyExistsException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"The table "
operator|+
name|partInfoList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is could not be found."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|numPartitions
return|;
block|}
annotation|@
name|Override
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Hive"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
name|int
name|addPartitionSpec
parameter_list|(
name|HCatPartitionSpec
name|partitionSpec
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
return|return
name|hmsClient
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpec
operator|.
name|toPartitionSpecProxy
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"InvalidObjectException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"AlreadyExistsException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
literal|"The table "
operator|+
literal|"could not be found."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while adding partition."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMessageBusTopicName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
return|return
name|hmsClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"MetaException while retrieving JMS Topic name."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Could not find DB:"
operator|+
name|dbName
operator|+
literal|" or Table:"
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while retrieving JMS Topic name."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ReplicationTask
argument_list|>
name|getReplicationTasks
parameter_list|(
name|long
name|lastEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
operator|new
name|HCatReplicationTaskIterator
argument_list|(
name|this
argument_list|,
name|lastEventId
argument_list|,
name|maxEvents
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HCatNotificationEvent
argument_list|>
name|getNextNotification
parameter_list|(
name|long
name|lastEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|,
name|IMetaStoreClient
operator|.
name|NotificationFilter
name|filter
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
name|NotificationEventResponse
name|rsp
init|=
name|hmsClient
operator|.
name|getNextNotification
argument_list|(
name|lastEventId
argument_list|,
name|maxEvents
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsp
operator|!=
literal|null
operator|&&
name|rsp
operator|.
name|getEvents
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|rsp
operator|.
name|getEvents
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|NotificationEvent
argument_list|,
name|HCatNotificationEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HCatNotificationEvent
name|apply
parameter_list|(
annotation|@
name|Nullable
name|NotificationEvent
name|notificationEvent
parameter_list|)
block|{
return|return
operator|new
name|HCatNotificationEvent
argument_list|(
name|notificationEvent
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|HCatNotificationEvent
argument_list|>
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while getting notifications"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCurrentNotificationEventId
parameter_list|()
throws|throws
name|HCatException
block|{
try|try
block|{
name|CurrentNotificationEventId
name|id
init|=
name|hmsClient
operator|.
name|getCurrentNotificationEventId
argument_list|()
decl_stmt|;
return|return
name|id
operator|.
name|getEventId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionFailureException
argument_list|(
literal|"TException while getting current notification event "
operator|+
literal|"id "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|serializeTable
parameter_list|(
name|HCatTable
name|hcatTable
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
name|MetadataSerializer
operator|.
name|get
argument_list|()
operator|.
name|serializeTable
argument_list|(
name|hcatTable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HCatTable
name|deserializeTable
parameter_list|(
name|String
name|hcatTableStringRep
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
name|MetadataSerializer
operator|.
name|get
argument_list|()
operator|.
name|deserializeTable
argument_list|(
name|hcatTableStringRep
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|serializePartition
parameter_list|(
name|HCatPartition
name|hcatPartition
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
name|MetadataSerializer
operator|.
name|get
argument_list|()
operator|.
name|serializePartition
argument_list|(
name|hcatPartition
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|serializePartitions
parameter_list|(
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|hcatPartitions
parameter_list|)
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partStrings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|hcatPartitions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|MetadataSerializer
name|serializer
init|=
name|MetadataSerializer
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatPartition
name|partition
range|:
name|hcatPartitions
control|)
block|{
name|partStrings
operator|.
name|add
argument_list|(
name|serializer
operator|.
name|serializePartition
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|partStrings
return|;
block|}
annotation|@
name|Override
specifier|public
name|HCatPartition
name|deserializePartition
parameter_list|(
name|String
name|hcatPartitionStringRep
parameter_list|)
throws|throws
name|HCatException
block|{
name|HCatPartition
name|hcatPartition
init|=
name|MetadataSerializer
operator|.
name|get
argument_list|()
operator|.
name|deserializePartition
argument_list|(
name|hcatPartitionStringRep
argument_list|)
decl_stmt|;
name|hcatPartition
operator|.
name|hcatTable
argument_list|(
name|getTable
argument_list|(
name|hcatPartition
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|hcatPartition
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|hcatPartition
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|deserializePartitions
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|hcatPartitionStringReps
parameter_list|)
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatPartition
argument_list|>
argument_list|(
name|hcatPartitionStringReps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|MetadataSerializer
name|deserializer
init|=
name|MetadataSerializer
operator|.
name|get
argument_list|()
decl_stmt|;
name|HCatTable
name|table
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|partString
range|:
name|hcatPartitionStringReps
control|)
block|{
name|HCatPartition
name|partition
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|partition
operator|=
name|deserializePartition
argument_list|(
name|partString
argument_list|)
expr_stmt|;
name|table
operator|=
name|partition
operator|.
name|hcatTable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|partition
operator|=
name|deserializer
operator|.
name|deserializePartition
argument_list|(
name|partString
argument_list|)
expr_stmt|;
if|if
condition|(
name|partition
operator|.
name|getDatabaseName
argument_list|()
operator|.
name|equals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|&&
name|partition
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|partition
operator|.
name|hcatTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"All partitions are not of the same table: "
operator|+
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|serializePartitionSpec
parameter_list|(
name|HCatPartitionSpec
name|partitionSpec
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
name|MetadataSerializer
operator|.
name|get
argument_list|()
operator|.
name|serializePartitionSpec
argument_list|(
name|partitionSpec
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HCatPartitionSpec
name|deserializePartitionSpec
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|hcatPartitionSpecStrings
parameter_list|)
throws|throws
name|HCatException
block|{
name|HCatPartitionSpec
name|hcatPartitionSpec
init|=
name|MetadataSerializer
operator|.
name|get
argument_list|()
operator|.
name|deserializePartitionSpec
argument_list|(
name|hcatPartitionSpecStrings
argument_list|)
decl_stmt|;
name|hcatPartitionSpec
operator|.
name|hcatTable
argument_list|(
name|getTable
argument_list|(
name|hcatPartitionSpec
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hcatPartitionSpec
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|hcatPartitionSpec
return|;
block|}
block|}
end_class

end_unit

