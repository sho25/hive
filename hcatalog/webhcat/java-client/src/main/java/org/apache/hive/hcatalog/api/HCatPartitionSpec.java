begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_comment
comment|/**  * Generalized representation of a set of HCatPartitions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Hive"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|HCatPartitionSpec
block|{
specifier|protected
name|HCatTable
name|hcatTable
decl_stmt|;
specifier|protected
name|PartitionSpecProxy
name|partitionSpecProxy
decl_stmt|;
specifier|protected
name|HCatPartitionSpec
parameter_list|(
name|HCatTable
name|hcatTable
parameter_list|,
name|PartitionSpecProxy
name|partitionSpecProxy
parameter_list|)
throws|throws
name|HCatException
block|{
name|this
operator|.
name|hcatTable
operator|=
name|hcatTable
expr_stmt|;
name|this
operator|.
name|partitionSpecProxy
operator|=
name|partitionSpecProxy
expr_stmt|;
name|assert_invariant
argument_list|()
expr_stmt|;
block|}
comment|/**    * Getter for DBName of this HCatPartitionSpec.    * @return The name of the DB.    */
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|partitionSpecProxy
operator|.
name|getDbName
argument_list|()
return|;
block|}
comment|/**    * Getter for TableName of this HCatPartitionSpec.    * @return The name of the TableName.    */
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|partitionSpecProxy
operator|.
name|getTableName
argument_list|()
return|;
block|}
comment|/**    * Setter for HCatTable. Required for deserialization.    */
name|void
name|hcatTable
parameter_list|(
name|HCatTable
name|hcatTable
parameter_list|)
throws|throws
name|HCatException
block|{
assert|assert
name|this
operator|.
name|hcatTable
operator|==
literal|null
operator|:
literal|"Expected hcatTable to be null at this point."
assert|;
name|this
operator|.
name|hcatTable
operator|=
name|hcatTable
expr_stmt|;
name|assert_invariant
argument_list|()
expr_stmt|;
block|}
comment|/**    * Conversion to a Hive Metastore API PartitionSpecProxy instance.    */
name|PartitionSpecProxy
name|toPartitionSpecProxy
parameter_list|()
block|{
return|return
name|partitionSpecProxy
return|;
block|}
comment|/**    * Getter for the number of HCatPartitions represented by this HCatPartitionSpec instance.    * @return The number of HCatPartitions.    * @throws HCatException On failure.    */
specifier|public
name|int
name|size
parameter_list|()
throws|throws
name|HCatException
block|{
return|return
name|partitionSpecProxy
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Setter for the "root" location of the HCatPartitionSpec.    * @param location The new "root" location of the HCatPartitionSpec.    * @throws HCatException On failure to set a new location.    */
specifier|public
name|void
name|setRootLocation
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|HCatException
block|{
try|try
block|{
name|partitionSpecProxy
operator|.
name|setRootLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|metaException
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Unable to set root-path!"
argument_list|,
name|metaException
argument_list|)
throw|;
block|}
block|}
comment|/**    * Getter for an Iterator to the first HCatPartition in the HCatPartitionSpec.    * @return HCatPartitionIterator to the first HCatPartition.    */
specifier|public
name|HCatPartitionIterator
name|getPartitionIterator
parameter_list|()
block|{
return|return
operator|new
name|HCatPartitionIterator
argument_list|(
name|hcatTable
argument_list|,
name|partitionSpecProxy
operator|.
name|getPartitionIterator
argument_list|()
argument_list|)
return|;
block|}
comment|// Assert class invariant.
specifier|private
name|void
name|assert_invariant
parameter_list|()
throws|throws
name|HCatException
block|{
if|if
condition|(
name|hcatTable
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|hcatTable
operator|.
name|getDbName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|partitionSpecProxy
operator|.
name|getDbName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"Invalid HCatPartitionSpec instance: Table's DBName ("
operator|+
name|hcatTable
operator|.
name|getDbName
argument_list|()
operator|+
literal|") "
operator|+
literal|"doesn't match PartitionSpec ("
operator|+
name|partitionSpecProxy
operator|.
name|getDbName
argument_list|()
operator|+
literal|")"
decl_stmt|;
assert|assert
literal|false
operator|:
name|errorMessage
assert|;
throw|throw
operator|new
name|HCatException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|hcatTable
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|partitionSpecProxy
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"Invalid HCatPartitionSpec instance: Table's TableName ("
operator|+
name|hcatTable
operator|.
name|getTableName
argument_list|()
operator|+
literal|") "
operator|+
literal|"doesn't match PartitionSpec ("
operator|+
name|partitionSpecProxy
operator|.
name|getTableName
argument_list|()
operator|+
literal|")"
decl_stmt|;
assert|assert
literal|false
operator|:
name|errorMessage
assert|;
throw|throw
operator|new
name|HCatException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Iterator over HCatPartitions in the HCatPartitionSpec.    */
specifier|public
specifier|static
class|class
name|HCatPartitionIterator
block|{
comment|// implements java.util.Iterator<HCatPartition> {
specifier|private
name|HCatTable
name|hcatTable
decl_stmt|;
specifier|private
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|iterator
decl_stmt|;
name|HCatPartitionIterator
parameter_list|(
name|HCatTable
name|hcatTable
parameter_list|,
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|iterator
parameter_list|)
block|{
name|this
operator|.
name|hcatTable
operator|=
name|hcatTable
expr_stmt|;
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|HCatPartition
name|next
parameter_list|()
throws|throws
name|HCatException
block|{
return|return
operator|new
name|HCatPartition
argument_list|(
name|hcatTable
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// class HCatPartitionIterator;
block|}
end_class

begin_comment
comment|// class HCatPartitionSpec;
end_comment

end_unit

