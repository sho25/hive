begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatNotificationEvent
import|;
end_import

begin_comment
comment|/**  * ErroredReplicationTask is a special kind of NoopReplicationTask in that it  * is not actionable, and wraps an error that might have occurred during Task  * instantiation time. This is used to protect "future" events that we know  * nothing about from breaking the system by throwing IllegalStateExceptions.  *  * Whether or not the user intends to do something with these tasks and act  * upon the exceptions is left to the user to determine how they can best use them.  *  */
end_comment

begin_class
specifier|public
class|class
name|ErroredReplicationTask
extends|extends
name|NoopReplicationTask
block|{
name|RuntimeException
name|errorCause
init|=
literal|null
decl_stmt|;
specifier|public
name|ErroredReplicationTask
parameter_list|(
name|HCatNotificationEvent
name|event
parameter_list|,
name|RuntimeException
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCause
operator|=
name|e
expr_stmt|;
block|}
specifier|public
name|RuntimeException
name|getCause
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorCause
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isActionable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

