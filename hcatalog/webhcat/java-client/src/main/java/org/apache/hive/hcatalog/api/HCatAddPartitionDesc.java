begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Class HCatAddPartitionDesc helps users in defining partition attributes.  */
end_comment

begin_class
specifier|public
class|class
name|HCatAddPartitionDesc
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
decl_stmt|;
specifier|private
name|HCatAddPartitionDesc
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tbl
parameter_list|,
name|String
name|loc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|spec
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tbl
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|loc
expr_stmt|;
name|this
operator|.
name|partSpec
operator|=
name|spec
expr_stmt|;
block|}
comment|/**      * Gets the location.      *      * @return the location      */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
comment|/**      * Gets the partition spec.      *      * @return the partition spec      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionSpec
parameter_list|()
block|{
return|return
name|this
operator|.
name|partSpec
return|;
block|}
comment|/**      * Gets the table name.      *      * @return the table name      */
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
comment|/**      * Gets the database name.      *      * @return the database name      */
specifier|public
name|String
name|getDatabaseName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HCatAddPartitionDesc ["
operator|+
operator|(
name|tableName
operator|!=
literal|null
condition|?
literal|"tableName="
operator|+
name|tableName
operator|+
literal|", "
else|:
literal|"tableName=null"
operator|)
operator|+
operator|(
name|dbName
operator|!=
literal|null
condition|?
literal|"dbName="
operator|+
name|dbName
operator|+
literal|", "
else|:
literal|"dbName=null"
operator|)
operator|+
operator|(
name|location
operator|!=
literal|null
condition|?
literal|"location="
operator|+
name|location
operator|+
literal|", "
else|:
literal|"location=null"
operator|)
operator|+
operator|(
name|partSpec
operator|!=
literal|null
condition|?
literal|"partSpec="
operator|+
name|partSpec
else|:
literal|"partSpec=null"
operator|)
operator|+
literal|"]"
return|;
block|}
comment|/**      * Creates the builder for specifying attributes.      *      * @param dbName the db name      * @param tableName the table name      * @param location the location      * @param partSpec the part spec      * @return the builder      * @throws HCatException      */
specifier|public
specifier|static
name|Builder
name|create
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
operator|new
name|Builder
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|location
argument_list|,
name|partSpec
argument_list|)
return|;
block|}
name|Partition
name|toHivePartition
parameter_list|(
name|Table
name|hiveTable
parameter_list|)
throws|throws
name|HCatException
block|{
name|Partition
name|hivePtn
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|hivePtn
operator|.
name|setDbName
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
name|hivePtn
operator|.
name|setTableName
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pvals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|hiveTable
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|val
init|=
name|partSpec
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
operator|||
name|val
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"create partition: Value for key "
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|" is null or empty"
argument_list|)
throw|;
block|}
name|pvals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|hivePtn
operator|.
name|setValues
argument_list|(
name|pvals
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|hiveTable
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|hivePtn
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|hivePtn
operator|.
name|setParameters
argument_list|(
name|hiveTable
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|location
operator|!=
literal|null
condition|)
block|{
name|hivePtn
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|this
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|partName
decl_stmt|;
try|try
block|{
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|hiveTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|pvals
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting partition location to :"
operator|+
name|partName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Exception while creating partition name."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|hiveTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|hivePtn
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|partPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hivePtn
operator|.
name|setCreateTime
argument_list|(
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|hivePtn
operator|.
name|setLastAccessTimeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|hivePtn
return|;
block|}
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|Builder
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
comment|/**          * Builds the HCatAddPartitionDesc.          *          * @return the h cat add partition desc          * @throws HCatException          */
specifier|public
name|HCatAddPartitionDesc
name|build
parameter_list|()
throws|throws
name|HCatException
block|{
if|if
condition|(
name|this
operator|.
name|dbName
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
name|HCatAddPartitionDesc
name|desc
init|=
operator|new
name|HCatAddPartitionDesc
argument_list|(
name|this
operator|.
name|dbName
argument_list|,
name|this
operator|.
name|tableName
argument_list|,
name|this
operator|.
name|location
argument_list|,
name|this
operator|.
name|values
argument_list|)
decl_stmt|;
return|return
name|desc
return|;
block|}
block|}
block|}
end_class

end_unit

