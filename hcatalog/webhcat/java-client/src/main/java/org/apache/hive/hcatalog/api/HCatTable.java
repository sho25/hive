begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveSequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcSerde
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|LazyBinaryColumnarSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The HCatTable is a wrapper around org.apache.hadoop.hive.metastore.api.Table.  */
end_comment

begin_class
specifier|public
class|class
name|HCatTable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HCatTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Type
block|{
name|MANAGED_TABLE
block|,
name|EXTERNAL_TABLE
block|,
name|VIRTUAL_VIEW
block|,
name|INDEX_TABLE
block|}
comment|/**    * Attributes that can be compared between HCatTables.    */
specifier|public
specifier|static
enum|enum
name|TableAttribute
block|{
name|COLUMNS
block|,
name|PARTITION_COLUMNS
block|,
name|INPUT_FORMAT
block|,
name|OUTPUT_FORMAT
block|,
name|SERDE
block|,
name|SERDE_PROPERTIES
block|,
name|STORAGE_HANDLER
block|,
name|LOCATION
block|,
name|TABLE_PROPERTIES
block|,
name|STATS
comment|// TODO: Handle replication of changes to Table-STATS.
block|}
comment|/**    * The default set of attributes that can be diffed between HCatTables.    */
specifier|public
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|TableAttribute
argument_list|>
name|DEFAULT_COMPARISON_ATTRIBUTES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|TableAttribute
operator|.
name|COLUMNS
argument_list|,
name|TableAttribute
operator|.
name|INPUT_FORMAT
argument_list|,
name|TableAttribute
operator|.
name|OUTPUT_FORMAT
argument_list|,
name|TableAttribute
operator|.
name|SERDE
argument_list|,
name|TableAttribute
operator|.
name|SERDE_PROPERTIES
argument_list|,
name|TableAttribute
operator|.
name|STORAGE_HANDLER
argument_list|,
name|TableAttribute
operator|.
name|TABLE_PROPERTIES
argument_list|)
decl_stmt|;
comment|/**    * 2 HCatTables are considered equivalent if {@code lhs.diff(rhs).equals(NO_DIFF) == true; }    */
specifier|public
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|TableAttribute
argument_list|>
name|NO_DIFF
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|TableAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SERDE_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_INPUT_FORMAT_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_OUTPUT_FORMAT_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|String
name|dbName
init|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|String
name|tableType
decl_stmt|;
specifier|private
name|boolean
name|isExternal
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|StorageDescriptor
name|sd
decl_stmt|;
specifier|private
name|String
name|fileFormat
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|comment
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|owner
decl_stmt|;
specifier|public
name|HCatTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|dbName
argument_list|)
condition|?
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
else|:
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|sd
operator|=
operator|new
name|StorageDescriptor
argument_list|()
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|setInputFormat
argument_list|(
name|DEFAULT_INPUT_FORMAT_CLASS
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|DEFAULT_OUTPUT_FORMAT_CLASS
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|DEFAULT_SERDE_CLASS
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// Default serialization format.
block|}
name|HCatTable
parameter_list|(
name|Table
name|hiveTable
parameter_list|)
throws|throws
name|HCatException
block|{
name|tableName
operator|=
name|hiveTable
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|hiveTable
operator|.
name|getDbName
argument_list|()
expr_stmt|;
name|tableType
operator|=
name|hiveTable
operator|.
name|getTableType
argument_list|()
expr_stmt|;
name|isExternal
operator|=
name|hiveTable
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|=
name|hiveTable
operator|.
name|getSd
argument_list|()
expr_stmt|;
for|for
control|(
name|FieldSchema
name|colFS
range|:
name|sd
operator|.
name|getCols
argument_list|()
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|colFS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|partCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|FieldSchema
name|colFS
range|:
name|hiveTable
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|partCols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|colFS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiveTable
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblProps
operator|.
name|putAll
argument_list|(
name|hiveTable
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|tblProps
operator|.
name|get
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
condition|)
block|{
name|comment
operator|=
name|tblProps
operator|.
name|get
argument_list|(
literal|"comment"
argument_list|)
expr_stmt|;
block|}
name|owner
operator|=
name|hiveTable
operator|.
name|getOwner
argument_list|()
expr_stmt|;
block|}
name|Table
name|toHiveTable
parameter_list|()
throws|throws
name|HCatException
block|{
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblProps
operator|!=
literal|null
condition|)
block|{
name|newTable
operator|.
name|setParameters
argument_list|(
name|tblProps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isExternal
condition|)
block|{
name|newTable
operator|.
name|putToParameters
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newTable
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|comment
operator|!=
literal|null
condition|)
block|{
name|newTable
operator|.
name|putToParameters
argument_list|(
literal|"comment"
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
name|newTable
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
if|if
condition|(
name|partCols
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|hivePtnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|fs
range|:
name|partCols
control|)
block|{
name|hivePtnCols
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getFieldSchema
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newTable
operator|.
name|setPartitionKeys
argument_list|(
name|hivePtnCols
argument_list|)
expr_stmt|;
block|}
name|newTable
operator|.
name|setCreateTime
argument_list|(
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setLastAccessTimeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// TODO: Verify that this works for systems using UGI.doAs() (e.g. Oozie).
name|newTable
operator|.
name|setOwner
argument_list|(
name|owner
operator|==
literal|null
condition|?
name|getConf
argument_list|()
operator|.
name|getUser
argument_list|()
else|:
name|owner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Unable to determine owner of table ("
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|") from HiveConf."
argument_list|)
throw|;
block|}
return|return
name|newTable
return|;
block|}
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|instanceof
name|HiveConf
condition|)
block|{
name|this
operator|.
name|conf
operator|=
operator|(
name|HiveConf
operator|)
name|conf
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|HiveConf
name|getConf
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Conf hasn't been set yet. Using defaults."
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
name|StorageDescriptor
name|getSd
parameter_list|()
block|{
return|return
name|sd
return|;
block|}
comment|/**    * Gets the table name.    *    * @return the table name    */
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**    * Setter for TableName.    */
specifier|public
name|HCatTable
name|tableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Gets the db name.    *    * @return the db name    */
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|dbName
return|;
block|}
comment|/**    * Setter for db-name.    */
specifier|public
name|HCatTable
name|dbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Gets the columns.    *    * @return the columns    */
specifier|public
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|getCols
parameter_list|()
block|{
return|return
name|cols
return|;
block|}
comment|/**    * Setter for Column schemas.    */
specifier|public
name|HCatTable
name|cols
parameter_list|(
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|cols
operator|.
name|equals
argument_list|(
name|cols
argument_list|)
condition|)
block|{
name|this
operator|.
name|cols
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|cols
operator|.
name|addAll
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|setCols
argument_list|(
name|HCatSchemaUtils
operator|.
name|getFieldSchemas
argument_list|(
name|cols
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Gets the part columns.    *    * @return the part columns    */
specifier|public
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|getPartCols
parameter_list|()
block|{
return|return
name|partCols
return|;
block|}
comment|/**    * Setter for list of partition columns.    */
specifier|public
name|HCatTable
name|partCols
parameter_list|(
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partCols
parameter_list|)
block|{
name|this
operator|.
name|partCols
operator|=
name|partCols
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Setter for individual partition columns.    */
specifier|public
name|HCatTable
name|partCol
parameter_list|(
name|HCatFieldSchema
name|partCol
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|partCols
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|partCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|partCols
operator|.
name|add
argument_list|(
name|partCol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Gets the bucket columns.    *    * @return the bucket columns    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBucketCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|sd
operator|.
name|getBucketCols
argument_list|()
return|;
block|}
comment|/**    * Setter for list of bucket columns.    */
specifier|public
name|HCatTable
name|bucketCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Gets the sort columns.    *    * @return the sort columns    */
specifier|public
name|List
argument_list|<
name|Order
argument_list|>
name|getSortCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|sd
operator|.
name|getSortCols
argument_list|()
return|;
block|}
comment|/**    * Setter for Sort-cols.    */
specifier|public
name|HCatTable
name|sortCols
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|.
name|setSortCols
argument_list|(
name|sortCols
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Gets the number of buckets.    *    * @return the number of buckets    */
specifier|public
name|int
name|getNumBuckets
parameter_list|()
block|{
return|return
name|this
operator|.
name|sd
operator|.
name|getNumBuckets
argument_list|()
return|;
block|}
comment|/**    * Setter for number of buckets.    */
specifier|public
name|HCatTable
name|numBuckets
parameter_list|(
name|int
name|numBuckets
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|.
name|setNumBuckets
argument_list|(
name|numBuckets
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Gets the storage handler.    *    * @return the storage handler    */
specifier|public
name|String
name|getStorageHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|tblProps
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
return|;
block|}
comment|/**    * Setter for StorageHandler class.    */
specifier|public
name|HCatTable
name|storageHandler
parameter_list|(
name|String
name|storageHandler
parameter_list|)
throws|throws
name|HCatException
block|{
name|this
operator|.
name|tblProps
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|,
name|storageHandler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"HiveStorageHandlers can't be reliably instantiated on the client-side. "
operator|+
literal|"Attempting to derive Input/OutputFormat settings from StorageHandler, on best effort: "
argument_list|)
expr_stmt|;
try|try
block|{
name|HiveStorageHandler
name|sh
init|=
name|HiveUtils
operator|.
name|getStorageHandler
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|storageHandler
argument_list|)
decl_stmt|;
name|this
operator|.
name|sd
operator|.
name|setInputFormat
argument_list|(
name|sh
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|sh
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|sh
operator|.
name|getSerDeClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not derive Input/OutputFormat and SerDe settings from storageHandler. "
operator|+
literal|"These values need to be set explicitly."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Gets the table props.    *    * @return the table props    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTblProps
parameter_list|()
block|{
return|return
name|tblProps
return|;
block|}
comment|/**    * Setter for TableProperty map.    */
specifier|public
name|HCatTable
name|tblProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|tblProps
operator|.
name|equals
argument_list|(
name|tblProps
argument_list|)
condition|)
block|{
name|this
operator|.
name|tblProps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|tblProps
operator|.
name|putAll
argument_list|(
name|tblProps
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Gets the tableType.    *    * @return the tableType    */
specifier|public
name|String
name|getTabletype
parameter_list|()
block|{
return|return
name|tableType
return|;
block|}
comment|/**    * Setter for table-type.    */
specifier|public
name|HCatTable
name|tableType
parameter_list|(
name|Type
name|tableType
parameter_list|)
block|{
name|this
operator|.
name|tableType
operator|=
name|tableType
operator|.
name|name
argument_list|()
expr_stmt|;
name|this
operator|.
name|isExternal
operator|=
name|tableType
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|SerDeInfo
name|getSerDeInfo
parameter_list|()
block|{
if|if
condition|(
operator|!
name|sd
operator|.
name|isSetSerdeInfo
argument_list|()
condition|)
block|{
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sd
operator|.
name|getSerdeInfo
argument_list|()
return|;
block|}
specifier|public
name|HCatTable
name|fileFormat
parameter_list|(
name|String
name|fileFormat
parameter_list|)
block|{
name|this
operator|.
name|fileFormat
operator|=
name|fileFormat
expr_stmt|;
if|if
condition|(
name|fileFormat
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"sequencefile"
argument_list|)
condition|)
block|{
name|inputFileFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|outputFileFormat
argument_list|(
name|HiveSequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serdeLib
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fileFormat
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"rcfile"
argument_list|)
condition|)
block|{
name|inputFileFormat
argument_list|(
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|outputFileFormat
argument_list|(
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serdeLib
argument_list|(
name|LazyBinaryColumnarSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fileFormat
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"orcfile"
argument_list|)
condition|)
block|{
name|inputFileFormat
argument_list|(
name|OrcInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|outputFileFormat
argument_list|(
name|OrcOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serdeLib
argument_list|(
name|OrcSerde
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|String
name|fileFormat
parameter_list|()
block|{
return|return
name|fileFormat
return|;
block|}
comment|/**    * Gets the input file format.    *    * @return the input file format    */
specifier|public
name|String
name|getInputFileFormat
parameter_list|()
block|{
return|return
name|sd
operator|.
name|getInputFormat
argument_list|()
return|;
block|}
comment|/**    * Setter for InputFormat class.    */
specifier|public
name|HCatTable
name|inputFileFormat
parameter_list|(
name|String
name|inputFileFormat
parameter_list|)
block|{
name|sd
operator|.
name|setInputFormat
argument_list|(
name|inputFileFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Gets the output file format.    *    * @return the output file format    */
specifier|public
name|String
name|getOutputFileFormat
parameter_list|()
block|{
return|return
name|sd
operator|.
name|getOutputFormat
argument_list|()
return|;
block|}
comment|/**    * Setter for OutputFormat class.    */
specifier|public
name|HCatTable
name|outputFileFormat
parameter_list|(
name|String
name|outputFileFormat
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|outputFileFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Gets the serde lib.    *    * @return the serde lib    */
specifier|public
name|String
name|getSerdeLib
parameter_list|()
block|{
return|return
name|getSerDeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
return|;
block|}
comment|/**    * Setter for SerDe class name.    */
specifier|public
name|HCatTable
name|serdeLib
parameter_list|(
name|String
name|serde
parameter_list|)
block|{
name|getSerDeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|serde
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|HCatTable
name|serdeParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
parameter_list|)
block|{
name|getSerDeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
name|serdeParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|HCatTable
name|serdeParam
parameter_list|(
name|String
name|paramName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|SerDeInfo
name|serdeInfo
init|=
name|getSerDeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|serdeInfo
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
condition|)
block|{
name|serdeInfo
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serdeInfo
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Returns parameters such as field delimiter,etc.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSerdeParams
parameter_list|()
block|{
return|return
name|getSerDeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
return|;
block|}
comment|/**    * Gets the location.    *    * @return the location    */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|sd
operator|.
name|getLocation
argument_list|()
return|;
block|}
comment|/**    * Setter for location.    */
specifier|public
name|HCatTable
name|location
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Getter for table-owner.    */
specifier|public
name|String
name|owner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
comment|/**    * Setter for table-owner.    */
specifier|public
name|HCatTable
name|owner
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|comment
parameter_list|()
block|{
return|return
name|this
operator|.
name|comment
return|;
block|}
comment|/**    * Setter for table-level comment.    */
specifier|public
name|HCatTable
name|comment
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * See<i>row_format</i> element of CREATE_TABLE DDL for Hive.    */
specifier|public
name|HCatTable
name|fieldsTerminatedBy
parameter_list|(
name|char
name|delimiter
parameter_list|)
block|{
return|return
name|serdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|delimiter
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * See<i>row_format</i> element of CREATE_TABLE DDL for Hive.    */
specifier|public
name|HCatTable
name|escapeChar
parameter_list|(
name|char
name|escapeChar
parameter_list|)
block|{
return|return
name|serdeParam
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|escapeChar
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * See<i>row_format</i> element of CREATE_TABLE DDL for Hive.    */
specifier|public
name|HCatTable
name|collectionItemsTerminatedBy
parameter_list|(
name|char
name|delimiter
parameter_list|)
block|{
return|return
name|serdeParam
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|delimiter
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * See<i>row_format</i> element of CREATE_TABLE DDL for Hive.    */
specifier|public
name|HCatTable
name|mapKeysTerminatedBy
parameter_list|(
name|char
name|delimiter
parameter_list|)
block|{
return|return
name|serdeParam
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|delimiter
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * See<i>row_format</i> element of CREATE_TABLE DDL for Hive.    */
specifier|public
name|HCatTable
name|linesTerminatedBy
parameter_list|(
name|char
name|delimiter
parameter_list|)
block|{
return|return
name|serdeParam
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|delimiter
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * See<i>row_format</i> element of CREATE_TABLE DDL for Hive.    */
specifier|public
name|HCatTable
name|nullDefinedAs
parameter_list|(
name|char
name|nullChar
parameter_list|)
block|{
return|return
name|serdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|nullChar
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HCatTable [ "
operator|+
literal|"tableName="
operator|+
name|tableName
operator|+
literal|", "
operator|+
literal|"dbName="
operator|+
name|dbName
operator|+
literal|", "
operator|+
literal|"tableType="
operator|+
name|tableType
operator|+
literal|", "
operator|+
literal|"cols="
operator|+
name|cols
operator|+
literal|", "
operator|+
literal|"partCols="
operator|+
name|partCols
operator|+
literal|", "
operator|+
literal|"bucketCols="
operator|+
name|getBucketCols
argument_list|()
operator|+
literal|", "
operator|+
literal|"numBuckets="
operator|+
name|getNumBuckets
argument_list|()
operator|+
literal|", "
operator|+
literal|"sortCols="
operator|+
name|getSortCols
argument_list|()
operator|+
literal|", "
operator|+
literal|"inputFormat="
operator|+
name|getInputFileFormat
argument_list|()
operator|+
literal|", "
operator|+
literal|"outputFormat="
operator|+
name|getOutputFileFormat
argument_list|()
operator|+
literal|", "
operator|+
literal|"storageHandler="
operator|+
name|getStorageHandler
argument_list|()
operator|+
literal|", "
operator|+
literal|"serde="
operator|+
name|getSerdeLib
argument_list|()
operator|+
literal|", "
operator|+
literal|"tblProps="
operator|+
name|getTblProps
argument_list|()
operator|+
literal|", "
operator|+
literal|"location="
operator|+
name|getLocation
argument_list|()
operator|+
literal|", "
operator|+
literal|"owner="
operator|+
name|owner
argument_list|()
operator|+
literal|" ]"
return|;
block|}
comment|/**    * Method to compare the attributes of 2 HCatTable instances.    * @param rhs The other table being compared against. Can't be null.    * @param attributesToCheck The list of TableAttributes being compared.    * @return {@code EnumSet<TableAttribute>} containing all the attribute that differ between {@code this} and rhs.    * Subset of {@code attributesToCheck}.    */
specifier|public
name|EnumSet
argument_list|<
name|TableAttribute
argument_list|>
name|diff
parameter_list|(
name|HCatTable
name|rhs
parameter_list|,
name|EnumSet
argument_list|<
name|TableAttribute
argument_list|>
name|attributesToCheck
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|TableAttribute
argument_list|>
name|theDiff
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|TableAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|TableAttribute
name|attribute
range|:
name|attributesToCheck
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|COLUMNS
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|rhs
operator|.
name|getCols
argument_list|()
operator|.
name|containsAll
argument_list|(
name|getCols
argument_list|()
argument_list|)
operator|||
operator|!
name|getCols
argument_list|()
operator|.
name|containsAll
argument_list|(
name|rhs
operator|.
name|getCols
argument_list|()
argument_list|)
condition|)
block|{
name|theDiff
operator|.
name|add
argument_list|(
name|TableAttribute
operator|.
name|COLUMNS
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|INPUT_FORMAT
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|getInputFileFormat
argument_list|()
operator|==
literal|null
operator|&&
name|rhs
operator|.
name|getInputFileFormat
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|getInputFileFormat
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|rhs
operator|.
name|getInputFileFormat
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|rhs
operator|.
name|getInputFileFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|getInputFileFormat
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|theDiff
operator|.
name|add
argument_list|(
name|TableAttribute
operator|.
name|INPUT_FORMAT
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|OUTPUT_FORMAT
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|getOutputFileFormat
argument_list|()
operator|==
literal|null
operator|&&
name|rhs
operator|.
name|getOutputFileFormat
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|getOutputFileFormat
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|rhs
operator|.
name|getOutputFileFormat
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|rhs
operator|.
name|getOutputFileFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|getOutputFileFormat
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|theDiff
operator|.
name|add
argument_list|(
name|TableAttribute
operator|.
name|OUTPUT_FORMAT
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|STORAGE_HANDLER
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|getStorageHandler
argument_list|()
operator|==
literal|null
operator|&&
name|rhs
operator|.
name|getStorageHandler
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|getStorageHandler
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|rhs
operator|.
name|getStorageHandler
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|rhs
operator|.
name|getStorageHandler
argument_list|()
operator|.
name|equals
argument_list|(
name|getStorageHandler
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|theDiff
operator|.
name|add
argument_list|(
name|TableAttribute
operator|.
name|STORAGE_HANDLER
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|SERDE
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|getSerdeLib
argument_list|()
operator|==
literal|null
operator|&&
name|rhs
operator|.
name|getSerdeLib
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|getSerdeLib
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|rhs
operator|.
name|getSerdeLib
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|rhs
operator|.
name|getSerdeLib
argument_list|()
operator|.
name|equals
argument_list|(
name|getSerdeLib
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|theDiff
operator|.
name|add
argument_list|(
name|TableAttribute
operator|.
name|SERDE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|SERDE_PROPERTIES
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|equivalent
argument_list|(
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|rhs
operator|.
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
name|theDiff
operator|.
name|add
argument_list|(
name|TableAttribute
operator|.
name|SERDE_PROPERTIES
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|TABLE_PROPERTIES
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|equivalent
argument_list|(
name|tblProps
argument_list|,
name|rhs
operator|.
name|tblProps
argument_list|)
condition|)
block|{
name|theDiff
operator|.
name|add
argument_list|(
name|TableAttribute
operator|.
name|TABLE_PROPERTIES
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|theDiff
return|;
block|}
comment|/**    * Helper method to compare 2 Map instances, for equivalence.    * @param lhs First map to be compared.    * @param rhs Second map to be compared.    * @return true, if the 2 Maps contain the same entries.    */
specifier|private
specifier|static
name|boolean
name|equivalent
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lhs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|size
argument_list|()
operator|==
name|rhs
operator|.
name|size
argument_list|()
operator|&&
name|Maps
operator|.
name|difference
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|.
name|areEqual
argument_list|()
return|;
block|}
comment|/**    * Method to compare the attributes of 2 HCatTable instances.    * Only the {@code DEFAULT_COMPARISON_ATTRIBUTES} are compared.    * @param rhs The other table being compared against. Can't be null.    * @return {@code EnumSet<TableAttribute>} containing all the attribute that differ between {@code this} and rhs.    * Subset of {@code DEFAULT_COMPARISON_ATTRIBUTES}.    */
specifier|public
name|EnumSet
argument_list|<
name|TableAttribute
argument_list|>
name|diff
parameter_list|(
name|HCatTable
name|rhs
parameter_list|)
block|{
return|return
name|diff
argument_list|(
name|rhs
argument_list|,
name|DEFAULT_COMPARISON_ATTRIBUTES
argument_list|)
return|;
block|}
comment|/**    * Method to "adopt" the specified attributes from rhs into this HCatTable object.    * @param rhs The "source" table from which attributes are to be copied from.    * @param attributes The set of attributes to be copied from rhs. Usually the result of {@code this.diff(rhs)}.    * @return This HCatTable    * @throws HCatException    */
specifier|public
name|HCatTable
name|resolve
parameter_list|(
name|HCatTable
name|rhs
parameter_list|,
name|EnumSet
argument_list|<
name|TableAttribute
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|HCatException
block|{
if|if
condition|(
name|rhs
operator|==
name|this
condition|)
return|return
name|this
return|;
for|for
control|(
name|TableAttribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|COLUMNS
argument_list|)
condition|)
block|{
name|cols
argument_list|(
name|rhs
operator|.
name|cols
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|INPUT_FORMAT
argument_list|)
condition|)
block|{
name|inputFileFormat
argument_list|(
name|rhs
operator|.
name|getInputFileFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|OUTPUT_FORMAT
argument_list|)
condition|)
block|{
name|outputFileFormat
argument_list|(
name|rhs
operator|.
name|getOutputFileFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|SERDE
argument_list|)
condition|)
block|{
name|serdeLib
argument_list|(
name|rhs
operator|.
name|getSerdeLib
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|SERDE_PROPERTIES
argument_list|)
condition|)
block|{
name|serdeParams
argument_list|(
name|rhs
operator|.
name|getSerdeParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|STORAGE_HANDLER
argument_list|)
condition|)
block|{
name|storageHandler
argument_list|(
name|rhs
operator|.
name|getStorageHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|equals
argument_list|(
name|TableAttribute
operator|.
name|TABLE_PROPERTIES
argument_list|)
condition|)
block|{
name|tblProps
argument_list|(
name|rhs
operator|.
name|tblProps
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

