begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|HcatTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatAddPartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatCreateDBDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatCreateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|HCatTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|ObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|TestHCatClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
operator|.
name|CommandTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
operator|.
name|ReplicationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestCommands
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommandTestUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|hconf
decl_stmt|;
specifier|private
specifier|static
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|static
name|HCatClient
name|client
decl_stmt|;
specifier|private
specifier|static
name|String
name|TEST_PATH
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHCatClient
operator|.
name|startMetaStoreServer
argument_list|()
expr_stmt|;
name|hconf
operator|=
name|TestHCatClient
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|TEST_PATH
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TestCommands
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|testPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|hconf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hconf
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
name|HCatClient
operator|.
name|create
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHCatClient
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseCommand
parameter_list|()
throws|throws
name|HCatException
throws|,
name|CommandNeedRetryException
block|{
name|String
name|dbName
init|=
literal|"cmd_testdb"
decl_stmt|;
name|int
name|evid
init|=
literal|999
decl_stmt|;
name|Command
name|testCmd
init|=
operator|new
name|DropDatabaseCommand
argument_list|(
name|dbName
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|evid
argument_list|,
name|testCmd
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testCmd
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|testCmd
operator|.
name|isRetriable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|testCmd
operator|.
name|isUndoable
argument_list|()
argument_list|)
expr_stmt|;
name|CommandTestUtils
operator|.
name|testCommandSerialization
argument_list|(
name|testCmd
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|ifNotExists
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatDatabase
name|db
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|testCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|testCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|onfe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HCatDatabase
name|db_del
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onfe
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|onfe
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|onfe
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableCommand
parameter_list|()
throws|throws
name|HCatException
throws|,
name|CommandNeedRetryException
block|{
name|String
name|dbName
init|=
literal|"cmd_testdb"
decl_stmt|;
name|String
name|tableName
init|=
literal|"cmd_testtable"
decl_stmt|;
name|int
name|evid
init|=
literal|789
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
literal|"a:int,b:string"
argument_list|)
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|Command
name|testReplicatedDropCmd
init|=
operator|new
name|DropTableCommand
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|evid
argument_list|,
name|testReplicatedDropCmd
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testReplicatedDropCmd
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|testReplicatedDropCmd
operator|.
name|isRetriable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|testReplicatedDropCmd
operator|.
name|isUndoable
argument_list|()
argument_list|)
expr_stmt|;
name|CommandTestUtils
operator|.
name|testCommandSerialization
argument_list|(
name|testReplicatedDropCmd
argument_list|)
expr_stmt|;
name|Command
name|testNormalDropCmd
init|=
operator|new
name|DropTableCommand
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|evid
argument_list|,
name|testNormalDropCmd
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testNormalDropCmd
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|testNormalDropCmd
operator|.
name|isRetriable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|testNormalDropCmd
operator|.
name|isUndoable
argument_list|()
argument_list|)
expr_stmt|;
name|CommandTestUtils
operator|.
name|testCommandSerialization
argument_list|(
name|testNormalDropCmd
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|ifNotExists
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tprops
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tprops
operator|.
name|put
argument_list|(
name|ReplicationUtils
operator|.
name|REPL_STATE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|evid
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|HCatTable
name|tableToCreate
init|=
operator|(
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|)
operator|.
name|tblProps
argument_list|(
name|tprops
argument_list|)
operator|.
name|cols
argument_list|(
name|cols
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|tableToCreate
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|t1
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|t1
argument_list|)
expr_stmt|;
comment|// Test replicated drop, should not drop, because evid< repl.state.id
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|testReplicatedDropCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|testReplicatedDropCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|HCatTable
name|t2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|t2
argument_list|)
expr_stmt|;
comment|// Test normal drop, should drop unconditionally.
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|testNormalDropCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|testNormalDropCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|onfe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HCatTable
name|t_del
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onfe
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|onfe
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|onfe
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tprops2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tprops2
operator|.
name|put
argument_list|(
name|ReplicationUtils
operator|.
name|REPL_STATE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|evid
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|HCatTable
name|tableToCreate2
init|=
operator|(
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|)
operator|.
name|tblProps
argument_list|(
name|tprops2
argument_list|)
operator|.
name|cols
argument_list|(
name|cols
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|tableToCreate2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|t3
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|t3
argument_list|)
expr_stmt|;
comment|// Test replicated drop, should drop this time, since repl.state.id< evid.
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|testReplicatedDropCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|testReplicatedDropCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|onfe2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HCatTable
name|t_del
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onfe2
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|onfe2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|onfe2
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionCommand
parameter_list|()
throws|throws
name|HCatException
throws|,
name|CommandNeedRetryException
throws|,
name|MetaException
block|{
name|String
name|dbName
init|=
literal|"cmd_testdb"
decl_stmt|;
name|String
name|tableName
init|=
literal|"cmd_testtable"
decl_stmt|;
name|int
name|evid
init|=
literal|789
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|pcols
init|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
literal|"b:string"
argument_list|)
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
literal|"a:int"
argument_list|)
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ptnDesc
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ptnDesc
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Command
name|testReplicatedDropPtnCmd
init|=
operator|new
name|DropPartitionCommand
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc
argument_list|,
literal|true
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|evid
argument_list|,
name|testReplicatedDropPtnCmd
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testReplicatedDropPtnCmd
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|testReplicatedDropPtnCmd
operator|.
name|isRetriable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|testReplicatedDropPtnCmd
operator|.
name|isUndoable
argument_list|()
argument_list|)
expr_stmt|;
name|CommandTestUtils
operator|.
name|testCommandSerialization
argument_list|(
name|testReplicatedDropPtnCmd
argument_list|)
expr_stmt|;
name|Command
name|testNormalDropPtnCmd
init|=
operator|new
name|DropPartitionCommand
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc
argument_list|,
literal|false
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|evid
argument_list|,
name|testNormalDropPtnCmd
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testNormalDropPtnCmd
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|testNormalDropPtnCmd
operator|.
name|isRetriable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|testNormalDropPtnCmd
operator|.
name|isUndoable
argument_list|()
argument_list|)
expr_stmt|;
name|CommandTestUtils
operator|.
name|testCommandSerialization
argument_list|(
name|testNormalDropPtnCmd
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|ifNotExists
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ReplicationUtils
operator|.
name|REPL_STATE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|evid
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|HCatTable
name|table
init|=
operator|(
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|)
operator|.
name|tblProps
argument_list|(
name|props
argument_list|)
operator|.
name|cols
argument_list|(
name|cols
argument_list|)
operator|.
name|partCols
argument_list|(
name|pcols
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|table
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|tableCreated
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tableCreated
argument_list|)
expr_stmt|;
name|HCatPartition
name|ptnToAdd
init|=
operator|(
operator|new
name|HCatPartition
argument_list|(
name|tableCreated
argument_list|,
name|ptnDesc
argument_list|,
name|TestHCatClient
operator|.
name|makePartLocation
argument_list|(
name|tableCreated
argument_list|,
name|ptnDesc
argument_list|)
argument_list|)
operator|)
operator|.
name|parameters
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|ptnToAdd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatPartition
name|p1
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p1
argument_list|)
expr_stmt|;
comment|// Test replicated drop, should not drop, because evid< repl.state.id
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|testReplicatedDropPtnCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|testReplicatedDropPtnCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|HCatPartition
name|p2
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p2
argument_list|)
expr_stmt|;
comment|// Test normal drop, should drop unconditionally.
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|testNormalDropPtnCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|testNormalDropPtnCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|onfe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HCatPartition
name|p_del
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onfe
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|onfe
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|onfe
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props2
operator|.
name|put
argument_list|(
name|ReplicationUtils
operator|.
name|REPL_STATE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|evid
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|HCatPartition
name|ptnToAdd2
init|=
operator|(
operator|new
name|HCatPartition
argument_list|(
name|tableCreated
argument_list|,
name|ptnDesc
argument_list|,
name|TestHCatClient
operator|.
name|makePartLocation
argument_list|(
name|tableCreated
argument_list|,
name|ptnDesc
argument_list|)
argument_list|)
operator|)
operator|.
name|parameters
argument_list|(
name|props2
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|ptnToAdd2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatPartition
name|p3
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p3
argument_list|)
expr_stmt|;
comment|// Test replicated drop, should drop this time, since repl.state.id< evid.
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|testReplicatedDropPtnCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|testReplicatedDropPtnCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|onfe2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HCatPartition
name|p_del
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onfe2
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|onfe2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|onfe2
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableCommand2
parameter_list|()
throws|throws
name|HCatException
throws|,
name|CommandNeedRetryException
throws|,
name|MetaException
block|{
comment|// Secondary DropTableCommand test for testing repl-drop-tables' effect on partitions inside a partitioned table
comment|// when there exist partitions inside the table which are older than the drop event.
comment|// Our goal is this : Create a table t, with repl.last.id=157, say.
comment|// Create 2 partitions inside it, with repl.last.id=150 and 160, say.
comment|// Now, process a drop table command with eventid=155.
comment|// It should result in the table and the partition with repl.last.id=160 continuing to exist,
comment|// but dropping the partition with repl.last.id=150.
name|String
name|dbName
init|=
literal|"cmd_testdb"
decl_stmt|;
name|String
name|tableName
init|=
literal|"cmd_testtable"
decl_stmt|;
name|int
name|evid
init|=
literal|157
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|pcols
init|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
literal|"b:string"
argument_list|)
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
literal|"a:int"
argument_list|)
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|Command
name|testReplicatedDropCmd
init|=
operator|new
name|DropTableCommand
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|ifNotExists
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tprops
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tprops
operator|.
name|put
argument_list|(
name|ReplicationUtils
operator|.
name|REPL_STATE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|evid
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|HCatTable
name|table
init|=
operator|(
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|)
operator|.
name|tblProps
argument_list|(
name|tprops
argument_list|)
operator|.
name|cols
argument_list|(
name|cols
argument_list|)
operator|.
name|partCols
argument_list|(
name|pcols
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|table
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|tableCreated
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tableCreated
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ptnDesc1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ptnDesc1
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"test-older"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props1
operator|.
name|put
argument_list|(
name|ReplicationUtils
operator|.
name|REPL_STATE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|evid
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|HCatPartition
name|ptnToAdd1
init|=
operator|(
operator|new
name|HCatPartition
argument_list|(
name|tableCreated
argument_list|,
name|ptnDesc1
argument_list|,
name|TestHCatClient
operator|.
name|makePartLocation
argument_list|(
name|tableCreated
argument_list|,
name|ptnDesc1
argument_list|)
argument_list|)
operator|)
operator|.
name|parameters
argument_list|(
name|props1
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|ptnToAdd1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ptnDesc2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ptnDesc2
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"test-newer"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props2
operator|.
name|put
argument_list|(
name|ReplicationUtils
operator|.
name|REPL_STATE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|evid
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|HCatPartition
name|ptnToAdd2
init|=
operator|(
operator|new
name|HCatPartition
argument_list|(
name|tableCreated
argument_list|,
name|ptnDesc2
argument_list|,
name|TestHCatClient
operator|.
name|makePartLocation
argument_list|(
name|tableCreated
argument_list|,
name|ptnDesc2
argument_list|)
argument_list|)
operator|)
operator|.
name|parameters
argument_list|(
name|props2
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|ptnToAdd2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatPartition
name|p1
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|HCatPartition
name|p2
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|testReplicatedDropCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|testReplicatedDropCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|HCatTable
name|t_stillExists
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|t_stillExists
argument_list|)
expr_stmt|;
name|HCatPartition
name|p2_stillExists
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc2
argument_list|)
decl_stmt|;
name|Exception
name|onfe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HCatPartition
name|p1_del
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|ptnDesc1
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onfe
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|onfe
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|onfe
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicReplEximCommands
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
comment|// repl export, has repl.last.id and repl.scope=all in it
comment|// import repl dump, table has repl.last.id on it (will likely be 0)
name|int
name|evid
init|=
literal|111
decl_stmt|;
name|String
name|exportLocation
init|=
name|TEST_PATH
operator|+
name|File
operator|.
name|separator
operator|+
literal|"testBasicReplExim"
decl_stmt|;
name|Path
name|tempPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
literal|"testBasicReplEximTmp"
argument_list|)
decl_stmt|;
name|String
name|tempLocation
init|=
name|tempPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
literal|"exim"
decl_stmt|;
name|String
name|tableName
init|=
literal|"basicSrc"
decl_stmt|;
name|String
name|importedTableName
init|=
literal|"basicDst"
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
literal|"b:string"
argument_list|)
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|ifNotExists
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|table
init|=
operator|(
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|)
operator|.
name|cols
argument_list|(
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"textfile"
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|table
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|String
index|[]
name|data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|tempLocation
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|tempLocation
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|ret
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ret
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|selectRet
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|selectRet
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|selectRet
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|selectRet
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ExportCommand
name|exportCmd
init|=
operator|new
name|ExportCommand
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|exportLocation
argument_list|,
literal|false
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|exportCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret2
init|=
name|driver
operator|.
name|run
argument_list|(
name|exportCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret2
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|ret2
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ret2
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exportPaths
init|=
name|exportCmd
operator|.
name|cleanupLocationsAfterEvent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exportPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|metadata
init|=
name|getMetadataContents
argument_list|(
name|exportPaths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Export returned the following _metadata contents:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata
operator|+
literal|"did not match \"repl.scope\"=\"all\""
argument_list|,
name|metadata
operator|.
name|matches
argument_list|(
literal|".*\"repl.scope\":\"all\".*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata
operator|+
literal|"has \"repl.last.id\""
argument_list|,
name|metadata
operator|.
name|matches
argument_list|(
literal|".*\"repl.last.id\":.*"
argument_list|)
argument_list|)
expr_stmt|;
name|ImportCommand
name|importCmd
init|=
operator|new
name|ImportCommand
argument_list|(
name|dbName
argument_list|,
name|importedTableName
argument_list|,
literal|null
argument_list|,
name|exportLocation
argument_list|,
literal|false
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|importCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret3
init|=
name|driver
operator|.
name|run
argument_list|(
name|importCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret3
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|ret3
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ret3
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|selectRet2
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|importedTableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|selectRet2
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|selectRet2
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|selectRet2
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|values2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|values2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|values2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|HCatTable
name|importedTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|importedTableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|importedTable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importedTable
operator|.
name|getTblProps
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"repl.last.id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataReplEximCommands
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
comment|// repl metadata export, has repl.last.id and repl.scope=metadata
comment|// import repl metadata dump, table metadata changed, allows override, has repl.last.id
name|int
name|evid
init|=
literal|222
decl_stmt|;
name|String
name|exportLocation
init|=
name|TEST_PATH
operator|+
name|File
operator|.
name|separator
operator|+
literal|"testMetadataReplExim"
decl_stmt|;
name|Path
name|tempPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
literal|"testMetadataReplEximTmp"
argument_list|)
decl_stmt|;
name|String
name|tempLocation
init|=
name|tempPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
literal|"exim"
decl_stmt|;
name|String
name|tableName
init|=
literal|"basicSrc"
decl_stmt|;
name|String
name|importedTableName
init|=
literal|"basicDst"
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
literal|"b:string"
argument_list|)
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|ifNotExists
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|table
init|=
operator|(
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|)
operator|.
name|cols
argument_list|(
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"textfile"
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|table
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|String
index|[]
name|data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|HcatTestUtils
operator|.
name|createTestDataFile
argument_list|(
name|tempLocation
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|tempLocation
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|ret
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ret
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|selectRet
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|selectRet
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|selectRet
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|selectRet
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ExportCommand
name|exportMdCmd
init|=
operator|new
name|ExportCommand
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|exportLocation
argument_list|,
literal|true
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|exportMdCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret2
init|=
name|driver
operator|.
name|run
argument_list|(
name|exportMdCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret2
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|ret2
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ret2
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exportPaths
init|=
name|exportMdCmd
operator|.
name|cleanupLocationsAfterEvent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exportPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|metadata
init|=
name|getMetadataContents
argument_list|(
name|exportPaths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Export returned the following _metadata contents:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata
operator|+
literal|"did not match \"repl.scope\"=\"metadata\""
argument_list|,
name|metadata
operator|.
name|matches
argument_list|(
literal|".*\"repl.scope\":\"metadata\".*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata
operator|+
literal|"has \"repl.last.id\""
argument_list|,
name|metadata
operator|.
name|matches
argument_list|(
literal|".*\"repl.last.id\":.*"
argument_list|)
argument_list|)
expr_stmt|;
name|ImportCommand
name|importMdCmd
init|=
operator|new
name|ImportCommand
argument_list|(
name|dbName
argument_list|,
name|importedTableName
argument_list|,
literal|null
argument_list|,
name|exportLocation
argument_list|,
literal|true
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|importMdCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret3
init|=
name|driver
operator|.
name|run
argument_list|(
name|importMdCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret3
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|ret3
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ret3
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|selectRet2
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|importedTableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|selectRet2
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|selectRet2
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|selectRet2
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|values2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|values2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|importedTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|importedTableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|importedTable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importedTable
operator|.
name|getTblProps
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"repl.last.id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoopReplEximCommands
parameter_list|()
throws|throws
name|CommandNeedRetryException
throws|,
name|IOException
block|{
comment|// repl noop export on non-existant table, has repl.noop, does not error
comment|// import repl noop dump, no error
name|int
name|evid
init|=
literal|333
decl_stmt|;
name|String
name|exportLocation
init|=
name|TEST_PATH
operator|+
name|File
operator|.
name|separator
operator|+
literal|"testNoopReplExim"
decl_stmt|;
name|String
name|dbName
init|=
literal|"doesNotExist"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
literal|"nope"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ExportCommand
name|noopExportCmd
init|=
operator|new
name|ExportCommand
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|exportLocation
argument_list|,
literal|false
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|noopExportCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
name|noopExportCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|ret
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ret
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exportPaths
init|=
name|noopExportCmd
operator|.
name|cleanupLocationsAfterEvent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exportPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|metadata
init|=
name|getMetadataContents
argument_list|(
name|exportPaths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Export returned the following _metadata contents:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata
operator|+
literal|"did not match \"repl.noop\"=\"true\""
argument_list|,
name|metadata
operator|.
name|matches
argument_list|(
literal|".*\"repl.noop\":\"true\".*"
argument_list|)
argument_list|)
expr_stmt|;
name|ImportCommand
name|noopImportCmd
init|=
operator|new
name|ImportCommand
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|exportLocation
argument_list|,
literal|false
argument_list|,
name|evid
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to run :"
operator|+
name|noopImportCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret2
init|=
name|driver
operator|.
name|run
argument_list|(
name|noopImportCmd
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret2
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|":"
operator|+
name|ret2
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ret2
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|onfe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HCatDatabase
name|d_doesNotExist
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onfe
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|onfe
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|onfe
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getMetadataContents
parameter_list|(
name|String
name|exportPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|mdFilePath
init|=
operator|new
name|Path
argument_list|(
name|exportPath
argument_list|,
literal|"_metadata"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|mdFilePath
operator|.
name|toUri
argument_list|()
argument_list|,
name|hconf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mdFilePath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"does not exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|mdFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|mdFilePath
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

