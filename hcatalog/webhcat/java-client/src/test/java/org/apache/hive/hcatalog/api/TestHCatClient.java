begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|WindowsPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcSerde
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|LazyBinaryColumnarSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|SemanticAnalysis
operator|.
name|HCatSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|NoExitSecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_class
specifier|public
class|class
name|TestHCatClient
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHCatClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|msPort
init|=
literal|"20101"
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|hcatConf
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|isReplicationTargetHCatRunning
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|replicationTargetHCatPort
init|=
literal|"20102"
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|replicationTargetHCatConf
decl_stmt|;
specifier|private
specifier|static
name|SecurityManager
name|securityManager
decl_stmt|;
specifier|private
specifier|static
class|class
name|RunMS
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|String
name|msPort
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RunMS
parameter_list|(
name|String
name|msPort
parameter_list|)
block|{
name|this
operator|.
name|msPort
operator|=
name|msPort
expr_stmt|;
name|this
operator|.
name|args
operator|.
name|add
argument_list|(
literal|"-v"
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|.
name|add
argument_list|(
name|this
operator|.
name|msPort
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RunMS
name|arg
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|this
operator|.
name|args
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|HiveMetaStore
operator|.
name|main
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exiting. Got exception from metastore: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// class RunMS;
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down metastore."
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startMetaStoreServer
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestHCatClient
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|WindowsPathUtil
operator|.
name|convertPathsFromWindowsToHdfs
argument_list|(
name|hcatConf
argument_list|)
expr_stmt|;
block|}
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RunMS
argument_list|(
name|msPort
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|securityManager
operator|=
name|System
operator|.
name|getSecurityManager
argument_list|()
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|NoExitSecurityManager
argument_list|()
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|msPort
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
name|HCatSemanticAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|fixPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
return|return
name|path
return|;
block|}
name|String
name|expectedDir
init|=
name|path
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedDir
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|expectedDir
operator|=
literal|"/"
operator|+
name|expectedDir
expr_stmt|;
block|}
return|return
name|expectedDir
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicDDLCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|db
init|=
literal|"testdb"
decl_stmt|;
name|String
name|tableOne
init|=
literal|"testTable1"
decl_stmt|;
name|String
name|tableTwo
init|=
literal|"testTable2"
decl_stmt|;
name|String
name|tableThree
init|=
literal|"testTable3"
decl_stmt|;
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|db
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|HCatCreateDBDesc
name|dbDesc
init|=
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|db
argument_list|)
operator|.
name|ifNotExists
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|dbDesc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
name|client
operator|.
name|listDatabaseNamesByPattern
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dbNames
operator|.
name|contains
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbNames
operator|.
name|contains
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|HCatDatabase
name|testDb
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testDb
operator|.
name|getComment
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDb
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|String
name|warehouseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|,
literal|"/user/hive/warehouse"
argument_list|)
decl_stmt|;
name|String
name|expectedDir
init|=
name|warehouseDir
operator|.
name|replaceFirst
argument_list|(
literal|"pfile:///"
argument_list|,
literal|"pfile:/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedDir
operator|+
literal|"/"
operator|+
name|db
operator|+
literal|".db"
argument_list|,
name|testDb
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"id"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|"id comment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"value"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"value comment"
argument_list|)
argument_list|)
expr_stmt|;
name|HCatCreateTableDesc
name|tableDesc
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|tableOne
argument_list|,
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"rcfile"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
name|HCatTable
name|table1
init|=
name|client
operator|.
name|getTable
argument_list|(
name|db
argument_list|,
name|tableOne
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|table1
operator|.
name|getInputFileFormat
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table1
operator|.
name|getOutputFileFormat
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table1
operator|.
name|getSerdeLib
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|LazyBinaryColumnarSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table1
operator|.
name|getCols
argument_list|()
operator|.
name|equals
argument_list|(
name|cols
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since "ifexists" was not set to true, trying to create the same table
comment|// again
comment|// will result in an exception.
try|try
block|{
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"AlreadyExistsException while creating table."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropTable
argument_list|(
name|db
argument_list|,
name|tableOne
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HCatCreateTableDesc
name|tableDesc2
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|tableTwo
argument_list|,
name|cols
argument_list|)
operator|.
name|fieldsTerminatedBy
argument_list|(
literal|'\001'
argument_list|)
operator|.
name|escapeChar
argument_list|(
literal|'\002'
argument_list|)
operator|.
name|linesTerminatedBy
argument_list|(
literal|'\003'
argument_list|)
operator|.
name|mapKeysTerminatedBy
argument_list|(
literal|'\004'
argument_list|)
operator|.
name|collectionItemsTerminatedBy
argument_list|(
literal|'\005'
argument_list|)
operator|.
name|nullDefinedAs
argument_list|(
literal|'\006'
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc2
argument_list|)
expr_stmt|;
name|HCatTable
name|table2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|db
argument_list|,
name|tableTwo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected TextInputFormat, but got: "
operator|+
name|table2
operator|.
name|getInputFileFormat
argument_list|()
argument_list|,
name|table2
operator|.
name|getInputFileFormat
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|TextInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table2
operator|.
name|getOutputFileFormat
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"SerdeParams not found"
argument_list|,
name|table2
operator|.
name|getSerdeParams
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking "
operator|+
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
literal|'\001'
argument_list|)
argument_list|,
name|table2
operator|.
name|getSerdeParams
argument_list|()
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking "
operator|+
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
literal|'\002'
argument_list|)
argument_list|,
name|table2
operator|.
name|getSerdeParams
argument_list|()
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking "
operator|+
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
literal|'\003'
argument_list|)
argument_list|,
name|table2
operator|.
name|getSerdeParams
argument_list|()
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking "
operator|+
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
literal|'\004'
argument_list|)
argument_list|,
name|table2
operator|.
name|getSerdeParams
argument_list|()
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking "
operator|+
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
literal|'\005'
argument_list|)
argument_list|,
name|table2
operator|.
name|getSerdeParams
argument_list|()
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking "
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
literal|'\006'
argument_list|)
argument_list|,
name|table2
operator|.
name|getSerdeParams
argument_list|()
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|expectedDir
operator|+
literal|"/"
operator|+
name|db
operator|+
literal|".db/"
operator|+
name|tableTwo
operator|)
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|table2
operator|.
name|getLocation
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|HCatCreateTableDesc
name|tableDesc3
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|tableThree
argument_list|,
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"orcfile"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc3
argument_list|)
expr_stmt|;
name|HCatTable
name|table3
init|=
name|client
operator|.
name|getTable
argument_list|(
name|db
argument_list|,
name|tableThree
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|table3
operator|.
name|getInputFileFormat
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|OrcInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table3
operator|.
name|getOutputFileFormat
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|OrcOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table3
operator|.
name|getSerdeLib
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|OrcSerde
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table1
operator|.
name|getCols
argument_list|()
operator|.
name|equals
argument_list|(
name|cols
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test tests that a plain table instantiation matches what hive says an    * empty table create should look like.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testEmptyTableInstantiation
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"testEmptyCreate"
decl_stmt|;
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"id"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|"id comment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"value"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"value comment"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create a minimalistic table
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|.
name|cols
argument_list|(
name|cols
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|tCreated
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|emptyTable
init|=
name|Table
operator|.
name|getEmptyTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createdProps
init|=
name|tCreated
operator|.
name|getTblProps
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|emptyProps
init|=
name|emptyTable
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|mapEqualsContainedIn
argument_list|(
name|emptyProps
argument_list|,
name|createdProps
argument_list|)
expr_stmt|;
comment|// Test sd params - we check that all the parameters in an empty table
comment|// are retained as-is. We may add beyond it, but not change values for
comment|// any parameters that hive defines for an empty table.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createdSdParams
init|=
name|tCreated
operator|.
name|getSerdeParams
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|emptySdParams
init|=
name|emptyTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|mapEqualsContainedIn
argument_list|(
name|emptySdParams
argument_list|,
name|createdSdParams
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies that an inner map is present inside an outer map, with    * all values being equal.    */
specifier|private
name|void
name|mapEqualsContainedIn
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inner
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|outer
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|outer
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|inner
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|outer
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outer
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionsHCatClientImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
literal|"ptnDB"
decl_stmt|;
name|String
name|tableName
init|=
literal|"pageView"
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|HCatCreateDBDesc
name|dbDesc
init|=
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|ifNotExists
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|dbDesc
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"userid"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|"id columns"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"viewtime"
argument_list|,
name|Type
operator|.
name|BIGINT
argument_list|,
literal|"view time columns"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"pageurl"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"ip"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"IP Address of the User"
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|ptnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|ptnCols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"dt"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"date column"
argument_list|)
argument_list|)
expr_stmt|;
name|ptnCols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"country"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"country column"
argument_list|)
argument_list|)
expr_stmt|;
name|HCatTable
name|table
init|=
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|cols
argument_list|(
name|cols
argument_list|)
operator|.
name|partCols
argument_list|(
name|ptnCols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"sequenceFile"
argument_list|)
decl_stmt|;
name|HCatCreateTableDesc
name|tableDesc
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
comment|// Verify that the table is created successfully.
name|table
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|firstPtn
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|firstPtn
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"04/30/2012"
argument_list|)
expr_stmt|;
name|firstPtn
operator|.
name|put
argument_list|(
literal|"country"
argument_list|,
literal|"usa"
argument_list|)
expr_stmt|;
comment|// Test new HCatAddPartitionsDesc API.
name|HCatAddPartitionDesc
name|addPtn
init|=
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|firstPtn
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|addPtn
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|secondPtn
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|secondPtn
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"04/12/2012"
argument_list|)
expr_stmt|;
name|secondPtn
operator|.
name|put
argument_list|(
literal|"country"
argument_list|,
literal|"brazil"
argument_list|)
expr_stmt|;
comment|// Test deprecated HCatAddPartitionsDesc API.
name|HCatAddPartitionDesc
name|addPtn2
init|=
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|secondPtn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|addPtn2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|thirdPtn
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|thirdPtn
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"04/13/2012"
argument_list|)
expr_stmt|;
name|thirdPtn
operator|.
name|put
argument_list|(
literal|"country"
argument_list|,
literal|"argentina"
argument_list|)
expr_stmt|;
comment|// Test deprecated HCatAddPartitionsDesc API.
name|HCatAddPartitionDesc
name|addPtn3
init|=
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|thirdPtn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|addPtn3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|ptnList
init|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ptnList
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|HCatPartition
name|ptn
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|firstPtn
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ptn
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|firstPtn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ptnList
operator|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ptnList
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|ptnListTwo
init|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"country = \"argentina\""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ptnListTwo
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|client
operator|.
name|markPartitionForEvent
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|thirdPtn
argument_list|,
name|PartitionEventType
operator|.
name|LOAD_DONE
argument_list|)
expr_stmt|;
name|boolean
name|isMarked
init|=
name|client
operator|.
name|isPartitionMarkedForEvent
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|thirdPtn
argument_list|,
name|PartitionEventType
operator|.
name|LOAD_DONE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isMarked
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
literal|"locationDB"
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|HCatCreateDBDesc
name|dbDesc
init|=
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|ifNotExists
argument_list|(
literal|true
argument_list|)
operator|.
name|location
argument_list|(
literal|"/tmp/"
operator|+
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|dbDesc
argument_list|)
expr_stmt|;
name|HCatDatabase
name|newDB
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newDB
operator|.
name|getLocation
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"file:/tmp/"
operator|+
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableLike
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"tableone"
decl_stmt|;
name|String
name|cloneTable
init|=
literal|"tabletwo"
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|cloneTable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"id"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|"id columns"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"value"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"id columns"
argument_list|)
argument_list|)
expr_stmt|;
name|HCatCreateTableDesc
name|tableDesc
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"rcfile"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
comment|// create a new table similar to previous one.
name|client
operator|.
name|createTableLike
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
name|cloneTable
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|client
operator|.
name|listTableNamesByPattern
argument_list|(
literal|null
argument_list|,
literal|"table*"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tables
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTable
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"temptable"
decl_stmt|;
name|String
name|newName
init|=
literal|"mytable"
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|newName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"id"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|"id columns"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"value"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"id columns"
argument_list|)
argument_list|)
expr_stmt|;
name|HCatCreateTableDesc
name|tableDesc
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"rcfile"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
name|client
operator|.
name|renameTable
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getTable
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|exp
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception message: "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exp
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"NoSuchObjectException while fetching table"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HCatTable
name|newTable
init|=
name|client
operator|.
name|getTable
argument_list|(
literal|null
argument_list|,
name|newName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newTable
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransportFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isExceptionCaught
init|=
literal|false
decl_stmt|;
comment|// Table creation with a long table name causes ConnectionFailureException
specifier|final
name|String
name|tableName
init|=
literal|"Temptable"
operator|+
operator|new
name|BigInteger
argument_list|(
literal|200
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"id"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|"id columns"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"value"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"id columns"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|HCatCreateTableDesc
name|tableDesc
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"rcfile"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|isExceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected exception type."
argument_list|,
name|HCatException
operator|.
name|class
argument_list|,
name|exp
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// The connection was closed, so create a new one.
name|client
operator|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|newName
init|=
literal|"goodTable"
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|newName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HCatCreateTableDesc
name|tableDesc2
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|newName
argument_list|,
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"rcfile"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc2
argument_list|)
expr_stmt|;
name|HCatTable
name|newTable
init|=
name|client
operator|.
name|getTable
argument_list|(
literal|null
argument_list|,
name|newName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newTable
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The expected exception was never thrown."
argument_list|,
name|isExceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOtherFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"Temptable"
decl_stmt|;
name|boolean
name|isExceptionCaught
init|=
literal|false
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"id"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|"id columns"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"value"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"id columns"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|HCatCreateTableDesc
name|tableDesc
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"rcfile"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
comment|// The DB foo is non-existent.
name|client
operator|.
name|getTable
argument_list|(
literal|"foo"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|isExceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|HCatException
argument_list|)
expr_stmt|;
name|String
name|newName
init|=
literal|"goodTable"
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|newName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HCatCreateTableDesc
name|tableDesc2
init|=
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|newName
argument_list|,
name|cols
argument_list|)
operator|.
name|fileFormat
argument_list|(
literal|"rcfile"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tableDesc2
argument_list|)
expr_stmt|;
name|HCatTable
name|newTable
init|=
name|client
operator|.
name|getTable
argument_list|(
literal|null
argument_list|,
name|newName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newTable
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The expected exception was never thrown."
argument_list|,
name|isExceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableException
parameter_list|()
throws|throws
name|Exception
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"tableToBeDropped"
decl_stmt|;
name|boolean
name|isExceptionCaught
init|=
literal|false
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|isExceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|HCatException
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Drop Table Exception: "
operator|+
name|exp
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The expected exception was never thrown."
argument_list|,
name|isExceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateTableSchema
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"testUpdateTableSchema_DBName"
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"testUpdateTableSchema_TableName"
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|oldSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|oldSchema
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|newSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"completely"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"new"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"fields"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|updateTableSchema
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|newSchema
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|newSchema
operator|.
name|toArray
argument_list|()
argument_list|,
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getCols
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|false
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception."
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectNotFoundException
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
literal|"testObjectNotFoundException_DBName"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testObjectNotFoundException_TableName"
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Test that fetching a non-existent db-name yields ObjectNotFound.
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ObjectNotFoundException."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ObjectNotFoundException. Got:"
operator|+
name|exception
operator|.
name|getClass
argument_list|()
argument_list|,
name|exception
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Test that fetching a non-existent table-name yields ObjectNotFound.
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ObjectNotFoundException."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ObjectNotFoundException. Got:"
operator|+
name|exception
operator|.
name|getClass
argument_list|()
argument_list|,
name|exception
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
block|}
name|String
name|partitionColumn
init|=
literal|"part"
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"col"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partitionColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
name|partitionColumn
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HCatTable
name|table
init|=
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|cols
argument_list|(
name|columns
argument_list|)
operator|.
name|partCols
argument_list|(
name|partitionColumns
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
name|partitionColumn
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Test that fetching a non-existent partition yields ObjectNotFound.
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ObjectNotFoundException."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ObjectNotFoundException. Got:"
operator|+
name|exception
operator|.
name|getClass
argument_list|()
argument_list|,
name|exception
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that listPartitionsByFilter() returns an empty-set, if the filter selects no partitions.
name|assertEquals
argument_list|(
literal|"Expected empty set of partitions."
argument_list|,
literal|0
argument_list|,
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionColumn
operator|+
literal|"< 'foobar'"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Test that listPartitionsByFilter() throws HCatException if the partition-key is incorrect.
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"NonExistentKey"
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected HCatException."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected HCatException. Got:"
operator|+
name|exception
operator|.
name|getClass
argument_list|()
argument_list|,
name|exception
operator|instanceof
name|HCatException
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Did not expect ObjectNotFoundException."
argument_list|,
name|exception
operator|instanceof
name|ObjectNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception!"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception! "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMessageBusTopicName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
literal|"testGetMessageBusTopicName_DBName"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testGetMessageBusTopicName_TableName"
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|messageBusTopicName
init|=
literal|"MY.topic.name"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|tableProperties
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
argument_list|,
name|messageBusTopicName
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
operator|.
name|tblProps
argument_list|(
name|tableProperties
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MessageBus topic-name doesn't match!"
argument_list|,
name|messageBusTopicName
argument_list|,
name|client
operator|.
name|getMessageBusTopicName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception."
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionSchema
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"myDb"
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"myTable"
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columnSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partitionSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"dt"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"grid"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnSchema
argument_list|)
operator|.
name|partCols
argument_list|(
name|partitionSchema
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partitionColumns
init|=
name|table
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Didn't get expected partition-schema back from the HCatTable."
argument_list|,
name|partitionSchema
operator|.
name|toArray
argument_list|()
argument_list|,
name|partitionColumns
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|false
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpected
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception!"
argument_list|,
name|unexpected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception! "
operator|+
name|unexpected
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionsWithPartialSpec
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"myDb"
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"myTable"
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columnSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partitionSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"dt"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"grid"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|HCatTable
name|table
init|=
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|cols
argument_list|(
name|columnSchema
argument_list|)
operator|.
name|partCols
argument_list|(
name|partitionSchema
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the table was created successfully.
name|table
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"The created just now can't be null."
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"AB"
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2011_12_31"
argument_list|)
expr_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"AB"
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"OB"
argument_list|)
expr_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"XB"
argument_list|)
expr_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partialPartitionSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partialPartitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partialPartitionSpec
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of partitions."
argument_list|,
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Mismatched partition."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2012_01_01"
block|,
literal|"AB"
block|}
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Mismatched partition."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2012_01_01"
block|,
literal|"OB"
block|}
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Mismatched partition."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2012_01_01"
block|,
literal|"XB"
block|}
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|false
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpected
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception!"
argument_list|,
name|unexpected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception! "
operator|+
name|unexpected
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionsWithPartialSpec
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|HCatClient
name|client
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"myDb"
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"myTable"
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columnSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partitionSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"dt"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"grid"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|HCatTable
name|table
init|=
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|cols
argument_list|(
name|columnSchema
argument_list|)
operator|.
name|partCols
argument_list|(
name|partitionSchema
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the table was created successfully.
name|table
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Table couldn't be queried for. "
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"AB"
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2011_12_31"
argument_list|)
expr_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"AB"
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"OB"
argument_list|)
expr_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"XB"
argument_list|)
expr_stmt|;
name|client
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
operator|new
name|HCatPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partialPartitionSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partialPartitionSpec
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partialPartitionSpec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of partitions."
argument_list|,
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Mismatched partition."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2011_12_31"
block|,
literal|"AB"
block|}
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partColumns
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartColumns
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partColumns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dt"
argument_list|,
name|partColumns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"grid"
argument_list|,
name|partColumns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|false
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpected
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception!"
argument_list|,
name|unexpected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception! "
operator|+
name|unexpected
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startReplicationTargetMetaStoreIfRequired
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isReplicationTargetHCatRunning
condition|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RunMS
argument_list|(
name|replicationTargetHCatPort
argument_list|)
operator|.
name|arg
argument_list|(
literal|"--hiveconf"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"javax.jdo.option.ConnectionURL"
argument_list|)
comment|// Reset, to use a different Derby instance.
operator|.
name|arg
argument_list|(
name|hcatConf
operator|.
name|get
argument_list|(
literal|"javax.jdo.option.ConnectionURL"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"metastore"
argument_list|,
literal|"target_metastore"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|replicationTargetHCatConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|hcatConf
argument_list|)
expr_stmt|;
name|replicationTargetHCatConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|replicationTargetHCatPort
argument_list|)
expr_stmt|;
name|isReplicationTargetHCatRunning
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Test for detecting schema-changes for an HCatalog table, across 2 different HCat instances.    * A table is created with the same schema on 2 HCat instances. The table-schema is modified on the source HCat    * instance (columns, I/O formats, SerDe definitions, etc.). The table metadata is compared between source    * and target, the changes are detected and propagated to target.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testTableSchemaPropagation
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|startReplicationTargetMetaStoreIfRequired
argument_list|()
expr_stmt|;
name|HCatClient
name|sourceMetaStore
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"myDb"
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"myTable"
decl_stmt|;
name|sourceMetaStore
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|sourceMetaStore
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columnSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partitionSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"dt"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"grid"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|HCatTable
name|sourceTable
init|=
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|cols
argument_list|(
name|columnSchema
argument_list|)
operator|.
name|partCols
argument_list|(
name|partitionSchema
argument_list|)
decl_stmt|;
name|sourceMetaStore
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|sourceTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the sourceTable was created successfully.
name|sourceTable
operator|=
name|sourceMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Table couldn't be queried for. "
argument_list|,
name|sourceTable
argument_list|)
expr_stmt|;
comment|// Serialize Table definition. Deserialize using the target HCatClient instance.
name|String
name|tableStringRep
init|=
name|sourceMetaStore
operator|.
name|serializeTable
argument_list|(
name|sourceTable
argument_list|)
decl_stmt|;
name|HCatClient
name|targetMetaStore
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|replicationTargetHCatConf
argument_list|)
argument_list|)
decl_stmt|;
name|targetMetaStore
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|targetMetaStore
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HCatTable
name|targetTable
init|=
name|targetMetaStore
operator|.
name|deserializeTable
argument_list|(
name|tableStringRep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Table after deserialization should have been identical to sourceTable."
argument_list|,
name|sourceTable
operator|.
name|diff
argument_list|(
name|targetTable
argument_list|)
argument_list|,
name|HCatTable
operator|.
name|NO_DIFF
argument_list|)
expr_stmt|;
comment|// Create table on Target.
name|targetMetaStore
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|targetTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the created table is identical to sourceTable.
name|targetTable
operator|=
name|targetMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table after deserialization should have been identical to sourceTable."
argument_list|,
name|sourceTable
operator|.
name|diff
argument_list|(
name|targetTable
argument_list|)
argument_list|,
name|HCatTable
operator|.
name|NO_DIFF
argument_list|)
expr_stmt|;
comment|// Modify sourceTable.
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|newColumnSchema
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|(
name|columnSchema
argument_list|)
decl_stmt|;
name|newColumnSchema
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"goo_new"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"orc.compress"
argument_list|,
literal|"ZLIB"
argument_list|)
expr_stmt|;
name|sourceTable
operator|.
name|cols
argument_list|(
name|newColumnSchema
argument_list|)
comment|// Add a column.
operator|.
name|fileFormat
argument_list|(
literal|"orcfile"
argument_list|)
comment|// Change SerDe, File I/O formats.
operator|.
name|tblProps
argument_list|(
name|tableParams
argument_list|)
operator|.
name|serdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
literal|'\001'
argument_list|)
argument_list|)
expr_stmt|;
name|sourceMetaStore
operator|.
name|updateTableSchema
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|sourceTable
argument_list|)
expr_stmt|;
name|sourceTable
operator|=
name|sourceMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// Diff against table on target.
name|EnumSet
argument_list|<
name|HCatTable
operator|.
name|TableAttribute
argument_list|>
name|diff
init|=
name|targetTable
operator|.
name|diff
argument_list|(
name|sourceTable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't find change in column-schema."
argument_list|,
name|diff
operator|.
name|contains
argument_list|(
name|HCatTable
operator|.
name|TableAttribute
operator|.
name|COLUMNS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't find change in InputFormat."
argument_list|,
name|diff
operator|.
name|contains
argument_list|(
name|HCatTable
operator|.
name|TableAttribute
operator|.
name|INPUT_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't find change in OutputFormat."
argument_list|,
name|diff
operator|.
name|contains
argument_list|(
name|HCatTable
operator|.
name|TableAttribute
operator|.
name|OUTPUT_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't find change in SerDe."
argument_list|,
name|diff
operator|.
name|contains
argument_list|(
name|HCatTable
operator|.
name|TableAttribute
operator|.
name|SERDE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't find change in SerDe parameters."
argument_list|,
name|diff
operator|.
name|contains
argument_list|(
name|HCatTable
operator|.
name|TableAttribute
operator|.
name|SERDE_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't find change in Table parameters."
argument_list|,
name|diff
operator|.
name|contains
argument_list|(
name|HCatTable
operator|.
name|TableAttribute
operator|.
name|TABLE_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replicate the changes to the replicated-table.
name|targetMetaStore
operator|.
name|updateTableSchema
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|targetTable
operator|.
name|resolve
argument_list|(
name|sourceTable
argument_list|,
name|diff
argument_list|)
argument_list|)
expr_stmt|;
name|targetTable
operator|=
name|targetMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After propagating schema changes, source and target tables should have been equivalent."
argument_list|,
name|targetTable
operator|.
name|diff
argument_list|(
name|sourceTable
argument_list|)
argument_list|,
name|HCatTable
operator|.
name|NO_DIFF
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpected
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception!"
argument_list|,
name|unexpected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception! "
operator|+
name|unexpected
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that partition-definitions can be replicated between HCat-instances,    * independently of table-metadata replication.    * 2 identical tables are created on 2 different HCat instances ("source" and "target").    * On the source instance,    * 1. One partition is added with the old format ("TEXTFILE").    * 2. The table is updated with an additional column and the data-format changed to ORC.    * 3. Another partition is added with the new format.    * 4. The partitions' metadata is copied to the target HCat instance, without updating the target table definition.    * 5. The partitions' metadata is tested to be an exact replica of that on the source.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPartitionRegistrationWithCustomSchema
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|startReplicationTargetMetaStoreIfRequired
argument_list|()
expr_stmt|;
name|HCatClient
name|sourceMetaStore
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"myDb"
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"myTable"
decl_stmt|;
name|sourceMetaStore
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|sourceMetaStore
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columnSchema
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partitionSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"dt"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"grid"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|HCatTable
name|sourceTable
init|=
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|cols
argument_list|(
name|columnSchema
argument_list|)
operator|.
name|partCols
argument_list|(
name|partitionSchema
argument_list|)
operator|.
name|comment
argument_list|(
literal|"Source table."
argument_list|)
decl_stmt|;
name|sourceMetaStore
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|sourceTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the sourceTable was created successfully.
name|sourceTable
operator|=
name|sourceMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Table couldn't be queried for. "
argument_list|,
name|sourceTable
argument_list|)
expr_stmt|;
comment|// Partitions added now should inherit table-schema, properties, etc.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec_1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionSpec_1
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"AB"
argument_list|)
expr_stmt|;
name|partitionSpec_1
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2011_12_31"
argument_list|)
expr_stmt|;
name|HCatPartition
name|sourcePartition_1
init|=
operator|new
name|HCatPartition
argument_list|(
name|sourceTable
argument_list|,
name|partitionSpec_1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|sourceMetaStore
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|sourcePartition_1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of partitions. "
argument_list|,
name|sourceMetaStore
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Verify that partition_1 was added correctly, and properties were inherited from the HCatTable.
name|HCatPartition
name|addedPartition_1
init|=
name|sourceMetaStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionSpec_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Column schema doesn't match."
argument_list|,
name|addedPartition_1
operator|.
name|getColumns
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"InputFormat doesn't match."
argument_list|,
name|addedPartition_1
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getInputFileFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OutputFormat doesn't match."
argument_list|,
name|addedPartition_1
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getOutputFileFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerDe doesn't match."
argument_list|,
name|addedPartition_1
operator|.
name|getSerDe
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getSerdeLib
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerDe params don't match."
argument_list|,
name|addedPartition_1
operator|.
name|getSerdeParams
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getSerdeParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replicate table definition.
name|HCatClient
name|targetMetaStore
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|replicationTargetHCatConf
argument_list|)
argument_list|)
decl_stmt|;
name|targetMetaStore
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|targetMetaStore
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make a copy of the source-table, as would be done across class-loaders.
name|HCatTable
name|targetTable
init|=
name|targetMetaStore
operator|.
name|deserializeTable
argument_list|(
name|sourceMetaStore
operator|.
name|serializeTable
argument_list|(
name|sourceTable
argument_list|)
argument_list|)
decl_stmt|;
name|targetMetaStore
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|targetTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|targetTable
operator|=
name|targetMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Created table doesn't match the source."
argument_list|,
name|targetTable
operator|.
name|diff
argument_list|(
name|sourceTable
argument_list|)
argument_list|,
name|HCatTable
operator|.
name|NO_DIFF
argument_list|)
expr_stmt|;
comment|// Modify Table schema at the source.
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|newColumnSchema
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|(
name|columnSchema
argument_list|)
decl_stmt|;
name|newColumnSchema
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"goo_new"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"orc.compress"
argument_list|,
literal|"ZLIB"
argument_list|)
expr_stmt|;
name|sourceTable
operator|.
name|cols
argument_list|(
name|newColumnSchema
argument_list|)
comment|// Add a column.
operator|.
name|fileFormat
argument_list|(
literal|"orcfile"
argument_list|)
comment|// Change SerDe, File I/O formats.
operator|.
name|tblProps
argument_list|(
name|tableParams
argument_list|)
operator|.
name|serdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
literal|'\001'
argument_list|)
argument_list|)
expr_stmt|;
name|sourceMetaStore
operator|.
name|updateTableSchema
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|sourceTable
argument_list|)
expr_stmt|;
name|sourceTable
operator|=
name|sourceMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// Add another partition to the source.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec_2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionSpec_2
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"AB"
argument_list|)
expr_stmt|;
name|partitionSpec_2
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|HCatPartition
name|sourcePartition_2
init|=
operator|new
name|HCatPartition
argument_list|(
name|sourceTable
argument_list|,
name|partitionSpec_2
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|sourceMetaStore
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|sourcePartition_2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// The source table now has 2 partitions, one in TEXTFILE, the other in ORC.
comment|// Test adding these partitions to the target-table *without* replicating the table-change.
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|sourcePartitions
init|=
name|sourceMetaStore
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of source partitions."
argument_list|,
literal|2
argument_list|,
name|sourcePartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatAddPartitionDesc
argument_list|>
name|addPartitionDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatAddPartitionDesc
argument_list|>
argument_list|(
name|sourcePartitions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HCatPartition
name|partition
range|:
name|sourcePartitions
control|)
block|{
name|addPartitionDescs
operator|.
name|add
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|partition
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|targetMetaStore
operator|.
name|addPartitions
argument_list|(
name|addPartitionDescs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatPartition
argument_list|>
name|targetPartitions
init|=
name|targetMetaStore
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the same number of partitions. "
argument_list|,
name|targetPartitions
operator|.
name|size
argument_list|()
argument_list|,
name|sourcePartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetPartitions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|HCatPartition
name|sourcePartition
init|=
name|sourcePartitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|,
name|targetPartition
init|=
name|targetPartitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Column schema doesn't match."
argument_list|,
name|sourcePartition
operator|.
name|getColumns
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getColumns
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"InputFormat doesn't match."
argument_list|,
name|sourcePartition
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OutputFormat doesn't match."
argument_list|,
name|sourcePartition
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerDe doesn't match."
argument_list|,
name|sourcePartition
operator|.
name|getSerDe
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getSerDe
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerDe params don't match."
argument_list|,
name|sourcePartition
operator|.
name|getSerdeParams
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getSerdeParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpected
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception! "
argument_list|,
name|unexpected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception! "
operator|+
name|unexpected
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that partition-definitions can be replicated between HCat-instances,    * independently of table-metadata replication, using PartitionSpec interfaces.    * (This is essentially the same test as testPartitionRegistrationWithCustomSchema(),    * transliterated to use the PartitionSpec APIs.)    * 2 identical tables are created on 2 different HCat instances ("source" and "target").    * On the source instance,    * 1. One partition is added with the old format ("TEXTFILE").    * 2. The table is updated with an additional column and the data-format changed to ORC.    * 3. Another partition is added with the new format.    * 4. The partitions' metadata is copied to the target HCat instance, without updating the target table definition.    * 5. The partitions' metadata is tested to be an exact replica of that on the source.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPartitionSpecRegistrationWithCustomSchema
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|startReplicationTargetMetaStoreIfRequired
argument_list|()
expr_stmt|;
name|HCatClient
name|sourceMetaStore
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"myDb"
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"myTable"
decl_stmt|;
name|sourceMetaStore
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|sourceMetaStore
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|columnSchema
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|partitionSchema
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"dt"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|HCatFieldSchema
argument_list|(
literal|"grid"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|HCatTable
name|sourceTable
init|=
operator|new
name|HCatTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|cols
argument_list|(
name|columnSchema
argument_list|)
operator|.
name|partCols
argument_list|(
name|partitionSchema
argument_list|)
operator|.
name|comment
argument_list|(
literal|"Source table."
argument_list|)
decl_stmt|;
name|sourceMetaStore
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|sourceTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the sourceTable was created successfully.
name|sourceTable
operator|=
name|sourceMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Table couldn't be queried for. "
argument_list|,
name|sourceTable
argument_list|)
expr_stmt|;
comment|// Partitions added now should inherit table-schema, properties, etc.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec_1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionSpec_1
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"AB"
argument_list|)
expr_stmt|;
name|partitionSpec_1
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2011_12_31"
argument_list|)
expr_stmt|;
name|HCatPartition
name|sourcePartition_1
init|=
operator|new
name|HCatPartition
argument_list|(
name|sourceTable
argument_list|,
name|partitionSpec_1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|sourceMetaStore
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|sourcePartition_1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of partitions. "
argument_list|,
name|sourceMetaStore
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Verify that partition_1 was added correctly, and properties were inherited from the HCatTable.
name|HCatPartition
name|addedPartition_1
init|=
name|sourceMetaStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionSpec_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Column schema doesn't match."
argument_list|,
name|addedPartition_1
operator|.
name|getColumns
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"InputFormat doesn't match."
argument_list|,
name|addedPartition_1
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getInputFileFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OutputFormat doesn't match."
argument_list|,
name|addedPartition_1
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getOutputFileFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerDe doesn't match."
argument_list|,
name|addedPartition_1
operator|.
name|getSerDe
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getSerdeLib
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerDe params don't match."
argument_list|,
name|addedPartition_1
operator|.
name|getSerdeParams
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getSerdeParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replicate table definition.
name|HCatClient
name|targetMetaStore
init|=
name|HCatClient
operator|.
name|create
argument_list|(
operator|new
name|Configuration
argument_list|(
name|replicationTargetHCatConf
argument_list|)
argument_list|)
decl_stmt|;
name|targetMetaStore
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
name|HCatClient
operator|.
name|DropDBMode
operator|.
name|CASCADE
argument_list|)
expr_stmt|;
name|targetMetaStore
operator|.
name|createDatabase
argument_list|(
name|HCatCreateDBDesc
operator|.
name|create
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make a copy of the source-table, as would be done across class-loaders.
name|HCatTable
name|targetTable
init|=
name|targetMetaStore
operator|.
name|deserializeTable
argument_list|(
name|sourceMetaStore
operator|.
name|serializeTable
argument_list|(
name|sourceTable
argument_list|)
argument_list|)
decl_stmt|;
name|targetMetaStore
operator|.
name|createTable
argument_list|(
name|HCatCreateTableDesc
operator|.
name|create
argument_list|(
name|targetTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|targetTable
operator|=
name|targetMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Created table doesn't match the source."
argument_list|,
name|targetTable
operator|.
name|diff
argument_list|(
name|sourceTable
argument_list|)
argument_list|,
name|HCatTable
operator|.
name|NO_DIFF
argument_list|)
expr_stmt|;
comment|// Modify Table schema at the source.
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|newColumnSchema
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|(
name|columnSchema
argument_list|)
decl_stmt|;
name|newColumnSchema
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"goo_new"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"orc.compress"
argument_list|,
literal|"ZLIB"
argument_list|)
expr_stmt|;
name|sourceTable
operator|.
name|cols
argument_list|(
name|newColumnSchema
argument_list|)
comment|// Add a column.
operator|.
name|fileFormat
argument_list|(
literal|"orcfile"
argument_list|)
comment|// Change SerDe, File I/O formats.
operator|.
name|tblProps
argument_list|(
name|tableParams
argument_list|)
operator|.
name|serdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
literal|'\001'
argument_list|)
argument_list|)
expr_stmt|;
name|sourceMetaStore
operator|.
name|updateTableSchema
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|sourceTable
argument_list|)
expr_stmt|;
name|sourceTable
operator|=
name|sourceMetaStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// Add another partition to the source.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec_2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionSpec_2
operator|.
name|put
argument_list|(
literal|"grid"
argument_list|,
literal|"AB"
argument_list|)
expr_stmt|;
name|partitionSpec_2
operator|.
name|put
argument_list|(
literal|"dt"
argument_list|,
literal|"2012_01_01"
argument_list|)
expr_stmt|;
name|HCatPartition
name|sourcePartition_2
init|=
operator|new
name|HCatPartition
argument_list|(
name|sourceTable
argument_list|,
name|partitionSpec_2
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|sourceMetaStore
operator|.
name|addPartition
argument_list|(
name|HCatAddPartitionDesc
operator|.
name|create
argument_list|(
name|sourcePartition_2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// The source table now has 2 partitions, one in TEXTFILE, the other in ORC.
comment|// Test adding these partitions to the target-table *without* replicating the table-change.
name|HCatPartitionSpec
name|sourcePartitionSpec
init|=
name|sourceMetaStore
operator|.
name|getPartitionSpecs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of source partitions."
argument_list|,
literal|2
argument_list|,
name|sourcePartitionSpec
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Serialize the hcatPartitionSpec.
name|List
argument_list|<
name|String
argument_list|>
name|partitionSpecString
init|=
name|sourceMetaStore
operator|.
name|serializePartitionSpec
argument_list|(
name|sourcePartitionSpec
argument_list|)
decl_stmt|;
comment|// Deserialize the HCatPartitionSpec using the target HCatClient instance.
name|HCatPartitionSpec
name|targetPartitionSpec
init|=
name|targetMetaStore
operator|.
name|deserializePartitionSpec
argument_list|(
name|partitionSpecString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Could not add the expected number of partitions."
argument_list|,
name|sourcePartitionSpec
operator|.
name|size
argument_list|()
argument_list|,
name|targetMetaStore
operator|.
name|addPartitionSpec
argument_list|(
name|targetPartitionSpec
argument_list|)
argument_list|)
expr_stmt|;
comment|// Retrieve partitions.
name|targetPartitionSpec
operator|=
name|targetMetaStore
operator|.
name|getPartitionSpecs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not retrieve the expected number of partitions."
argument_list|,
name|sourcePartitionSpec
operator|.
name|size
argument_list|()
argument_list|,
name|targetPartitionSpec
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the source and target partitions are equivalent.
name|HCatPartitionSpec
operator|.
name|HCatPartitionIterator
name|sourceIterator
init|=
name|sourcePartitionSpec
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
name|HCatPartitionSpec
operator|.
name|HCatPartitionIterator
name|targetIterator
init|=
name|targetPartitionSpec
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|targetIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Fewer target partitions than source."
argument_list|,
name|sourceIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|HCatPartition
name|sourcePartition
init|=
name|sourceIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|HCatPartition
name|targetPartition
init|=
name|targetIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Column schema doesn't match."
argument_list|,
name|sourcePartition
operator|.
name|getColumns
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getColumns
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"InputFormat doesn't match."
argument_list|,
name|sourcePartition
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OutputFormat doesn't match."
argument_list|,
name|sourcePartition
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerDe doesn't match."
argument_list|,
name|sourcePartition
operator|.
name|getSerDe
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getSerDe
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerDe params don't match."
argument_list|,
name|sourcePartition
operator|.
name|getSerdeParams
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getSerdeParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpected
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception! "
argument_list|,
name|unexpected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception! "
operator|+
name|unexpected
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

