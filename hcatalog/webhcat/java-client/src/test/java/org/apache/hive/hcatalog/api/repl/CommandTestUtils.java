begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Class which provides several useful methods to test commands, but is itself not a test.  */
end_comment

begin_class
specifier|public
class|class
name|CommandTestUtils
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CommandTestUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|compareCommands
parameter_list|(
name|Command
name|expected
parameter_list|,
name|Command
name|actual
parameter_list|,
name|boolean
name|ignoreSortOrder
parameter_list|)
block|{
comment|// The reason we use compare-command, rather than simply getting the serialized output and comparing
comment|// for partition-based commands is that the partition specification order can be different in different
comment|// serializations, but still be effectively the same. (a="42",b="abc") should be the same as (b="abc",a="42")
name|assertEquals
argument_list|(
name|expected
operator|.
name|getClass
argument_list|()
argument_list|,
name|actual
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getEventId
argument_list|()
argument_list|,
name|actual
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isUndoable
argument_list|()
argument_list|,
name|actual
operator|.
name|isUndoable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isRetriable
argument_list|()
argument_list|,
name|actual
operator|.
name|isRetriable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|actualIter
init|=
name|actual
operator|.
name|get
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|expected
operator|.
name|get
argument_list|()
control|)
block|{
if|if
condition|(
name|ignoreSortOrder
condition|)
block|{
comment|// compare sorted strings, rather than comparing exact strings.
name|assertSortedEquals
argument_list|(
name|s
argument_list|,
name|actualIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|s
argument_list|,
name|actualIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expected
operator|.
name|isUndoable
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|actualUndoIter
init|=
name|actual
operator|.
name|getUndo
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|expected
operator|.
name|getUndo
argument_list|()
control|)
block|{
if|if
condition|(
name|ignoreSortOrder
condition|)
block|{
name|assertSortedEquals
argument_list|(
name|s
argument_list|,
name|actualUndoIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|s
argument_list|,
name|actualIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|assertSortedEquals
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
name|char
index|[]
name|expectedChars
init|=
name|expected
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|expectedChars
argument_list|)
expr_stmt|;
name|char
index|[]
name|actualChars
init|=
name|actual
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|actualChars
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|expectedChars
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|actualChars
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|testCommandSerialization
parameter_list|(
name|Command
name|cmd
parameter_list|)
block|{
name|String
name|serializedCmd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|serializedCmd
operator|=
name|ReplicationUtils
operator|.
name|serializeCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Serialization error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// error out.
block|}
name|Command
name|cmd2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cmd2
operator|=
name|ReplicationUtils
operator|.
name|deserializeCommand
argument_list|(
name|serializedCmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Serialization error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// error out.
block|}
name|assertEquals
argument_list|(
name|cmd
operator|.
name|getClass
argument_list|()
argument_list|,
name|cmd2
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cmd
operator|.
name|getEventId
argument_list|()
argument_list|,
name|cmd2
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cmd
operator|.
name|get
argument_list|()
argument_list|,
name|cmd2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cmd
operator|.
name|isUndoable
argument_list|()
argument_list|,
name|cmd2
operator|.
name|isUndoable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|isUndoable
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|cmd
operator|.
name|getUndo
argument_list|()
argument_list|,
name|cmd2
operator|.
name|getUndo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|cmd
operator|.
name|isRetriable
argument_list|()
argument_list|,
name|cmd2
operator|.
name|isRetriable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

