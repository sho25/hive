begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
specifier|public
class|class
name|Util
block|{
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|typeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|typeMap
operator|.
name|put
argument_list|(
literal|"tinyint"
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"smallint"
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"bigint"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"struct<num:int,str:string,dbl:double>"
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"map<string,string>"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
literal|"array<map<string,string>>"
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|die
parameter_list|(
name|String
name|expectedType
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected "
operator|+
name|expectedType
operator|+
literal|", got "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|String
name|check
parameter_list|(
name|String
name|type
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
if|if
condition|(
name|check
argument_list|(
name|typeMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|,
name|o
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"map<string,string>"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|o
decl_stmt|;
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"array<map<string,string>>"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|listOfMaps
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|o
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
range|:
name|listOfMaps
control|)
block|{
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"struct<num:int,str:string,dbl:double>"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|l
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|check
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|check
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|check
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
block|{
name|die
argument_list|(
literal|"struct<num:int,str:string,dbl:double>"
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|die
argument_list|(
name|typeMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @param m    * @throws IOException    */
specifier|public
specifier|static
name|void
name|check
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// just access key and value to ensure they are correct
if|if
condition|(
operator|!
name|check
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|die
argument_list|(
literal|"String"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|check
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|die
argument_list|(
literal|"String"
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|boolean
name|check
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|expected
parameter_list|,
name|Object
name|actual
parameter_list|)
block|{
if|if
condition|(
name|actual
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|expected
operator|.
name|isAssignableFrom
argument_list|(
name|actual
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

