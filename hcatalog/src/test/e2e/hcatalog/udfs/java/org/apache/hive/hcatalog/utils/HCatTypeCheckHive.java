begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
import|;
end_import

begin_comment
comment|/**  * A hive udf to check types of the fields read from hcat. A sample hive query which can use this is:  *  * create temporary function typecheck as 'org.apache.hive.hcatalog.utils.HCatTypeCheckHive';  * select typecheck('map<string,string>+struct<num:int,str:string,dbl:double>+array<map<string,string>>+int',   * mymap, mytuple, bagofmap, rownum) from complex;  *  *  * The first argument to the UDF is a string representing the schema of the columns in the table.   * The columns in the tables are the remaining args to it.  * The schema specification consists of the types as given by "describe<table>"  * with each column's type separated from the next column's type by a '+'  *  * The UDF will throw an exception (and cause the query to fail) if it does not  * encounter the correct types.  *  * The output is a string representation of the data , type and hive category.  * It is not advisable to use this against large dataset since the output would also  * be large.   *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HCatTypeCheckHive
extends|extends
name|GenericUDF
block|{
name|ObjectInspector
index|[]
name|argOIs
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|args
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|typesStr
init|=
operator|(
name|String
operator|)
name|getJavaObject
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|argOIs
index|[
literal|0
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Category
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|types
init|=
name|typesStr
operator|.
name|split
argument_list|(
literal|"\\+"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|types
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ObjectInspector
name|oi
init|=
name|argOIs
index|[
name|i
index|]
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
operator|.
name|Category
argument_list|>
name|categories
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
operator|.
name|Category
argument_list|>
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|getJavaObject
argument_list|(
name|args
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|oi
argument_list|,
name|categories
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|Util
operator|.
name|check
argument_list|(
name|types
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|row
operator|.
name|add
argument_list|(
name|o
operator|==
literal|null
condition|?
literal|"null"
else|:
name|o
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|":"
operator|+
operator|(
name|o
operator|==
literal|null
condition|?
literal|"null"
else|:
name|o
operator|.
name|getClass
argument_list|()
operator|)
operator|+
literal|":"
operator|+
name|categories
argument_list|)
expr_stmt|;
block|}
return|return
name|row
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Object
name|getJavaObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|,
name|List
argument_list|<
name|Category
argument_list|>
name|categories
parameter_list|)
block|{
if|if
condition|(
name|categories
operator|!=
literal|null
condition|)
block|{
name|categories
operator|.
name|add
argument_list|(
name|oi
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|l
init|=
operator|(
operator|(
name|ListObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getList
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectInspector
name|elemOI
init|=
operator|(
operator|(
name|ListObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|lo
range|:
name|l
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getJavaObject
argument_list|(
name|lo
argument_list|,
name|elemOI
argument_list|,
name|categories
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|MAP
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMap
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectInspector
name|koi
init|=
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|voi
init|=
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|getJavaObject
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|koi
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|getJavaObject
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|voi
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|s
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|sf
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getJavaObject
argument_list|(
name|s
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|sf
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|categories
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
return|return
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected error!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|arg0
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|argOIs
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|this
operator|.
name|argOIs
operator|=
name|argOIs
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
return|;
block|}
block|}
end_class

end_unit

