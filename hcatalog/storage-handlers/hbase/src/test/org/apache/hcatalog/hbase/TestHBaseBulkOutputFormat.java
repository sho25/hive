begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RunningJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|HCatDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|SemanticAnalysis
operator|.
name|HCatSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|DefaultHCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|HBaseBulkOutputFormat
operator|.
name|HBaseBulkOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|TestHBaseDirectOutputFormat
operator|.
name|MapReadAbortedTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|TestHBaseDirectOutputFormat
operator|.
name|MapWriteAbortTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|FamilyRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|TableSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests components of HBaseHCatStorageHandler using ManyMiniCluster.  * Including ImprtSequenceFile and HBaseBulkOutputFormat  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseBulkOutputFormat
extends|extends
name|SkeletonHBaseTest
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHBaseBulkOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|allConf
decl_stmt|;
specifier|private
specifier|final
name|HCatDriver
name|hcatDriver
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|setupSkeletonHBaseTest
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TestHBaseBulkOutputFormat
parameter_list|()
block|{
name|allConf
operator|=
name|getHiveConf
argument_list|()
expr_stmt|;
name|allConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
name|HCatSemanticAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPFS
operator|.
name|varname
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|allConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"warehouse"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add hbase properties
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|el
range|:
name|getHbaseConf
argument_list|()
control|)
name|allConf
operator|.
name|set
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|,
name|el
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|el
range|:
name|getJobConf
argument_list|()
control|)
name|allConf
operator|.
name|set
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|,
name|el
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|allConf
argument_list|,
name|RevisionManagerConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|allConf
argument_list|)
argument_list|)
expr_stmt|;
name|hcatDriver
operator|=
operator|new
name|HCatDriver
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MapWriteOldMapper
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|ImmutableBytesWritable
argument_list|,
name|Put
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Put
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|vals
index|[]
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pair
index|[]
init|=
name|vals
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|collect
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MapWrite
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|ImmutableBytesWritable
argument_list|,
name|Put
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|vals
index|[]
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pair
index|[]
init|=
name|vals
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|write
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MapHCatWrite
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|BytesWritable
argument_list|,
name|HCatRecord
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|OutputJobInfo
name|jobInfo
init|=
operator|(
name|OutputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
argument_list|)
decl_stmt|;
name|HCatRecord
name|record
init|=
operator|new
name|DefaultHCatRecord
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|HCatSchema
name|schema
init|=
name|jobInfo
operator|.
name|getOutputSchema
argument_list|()
decl_stmt|;
name|String
name|vals
index|[]
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|record
operator|.
name|setInteger
argument_list|(
literal|"key"
argument_list|,
name|schema
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pair
index|[]
init|=
name|vals
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|record
operator|.
name|set
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|,
name|schema
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|hbaseBulkOutputFormatTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
name|String
name|testName
init|=
literal|"hbaseBulkOutputFormatTest"
decl_stmt|;
name|Path
name|methodTestDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
name|testName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting: "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
name|testName
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|familyName
init|=
literal|"my_family"
decl_stmt|;
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
comment|//include hbase config in conf file
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|allConf
argument_list|)
decl_stmt|;
comment|//create table
name|conf
operator|.
name|set
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_OUTPUT_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.queues"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.default.capacity"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|String
index|[]
block|{
name|familyName
block|}
argument_list|)
expr_stmt|;
name|String
name|data
index|[]
init|=
block|{
literal|"1,english:one,spanish:uno"
block|,
literal|"2,english:two,spanish:dos"
block|,
literal|"3,english:three,spanish:tres"
block|}
decl_stmt|;
comment|// input/output settings
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_input"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"inputFile.txt"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|data
control|)
name|os
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|interPath
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"inter"
argument_list|)
decl_stmt|;
comment|//create job
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_work"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapWriteOldMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormat
argument_list|(
name|HBaseBulkOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|interPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputCommitter
argument_list|(
name|HBaseBulkOutputCommitter
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//manually create transaction
name|RevisionManager
name|rm
init|=
name|HBaseRevisionManagerUtil
operator|.
name|getOpenedRevisionManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputJobInfo
name|outputJobInfo
init|=
name|OutputJobInfo
operator|.
name|create
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Transaction
name|txn
init|=
name|rm
operator|.
name|beginWriteTransaction
argument_list|(
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|familyName
argument_list|)
argument_list|)
decl_stmt|;
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_WRITE_TXN_KEY
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|txn
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|outputJobInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|RunningJob
name|runJob
init|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|runJob
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|runJob
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|familyNameBytes
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|String
name|vals
index|[]
init|=
name|data
index|[
name|index
index|]
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pair
index|[]
init|=
name|vals
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|familyNameBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pair
index|[
literal|1
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|familyNameBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//test if load count is the same
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|index
argument_list|)
expr_stmt|;
comment|//test if scratch directory was erased
name|assertFalse
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|job
argument_list|)
operator|.
name|exists
argument_list|(
name|interPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|importSequenceFileTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
name|String
name|testName
init|=
literal|"importSequenceFileTest"
decl_stmt|;
name|Path
name|methodTestDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
name|testName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting: "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
name|testName
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|familyName
init|=
literal|"my_family"
decl_stmt|;
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
comment|//include hbase config in conf file
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|allConf
argument_list|)
decl_stmt|;
comment|//create table
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|String
index|[]
block|{
name|familyName
block|}
argument_list|)
expr_stmt|;
name|String
name|data
index|[]
init|=
block|{
literal|"1,english:one,spanish:uno"
block|,
literal|"2,english:two,spanish:dos"
block|,
literal|"3,english:three,spanish:tres"
block|}
decl_stmt|;
comment|// input/output settings
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_input"
argument_list|)
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|inputPath
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|os
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"inputFile.txt"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|data
control|)
name|os
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|interPath
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"inter"
argument_list|)
decl_stmt|;
name|Path
name|scratchPath
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"scratch"
argument_list|)
decl_stmt|;
comment|//create job
name|HBaseHCatStorageHandler
operator|.
name|setHBaseSerializers
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
name|testName
argument_list|)
decl_stmt|;
name|job
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_work"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapWrite
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|SequenceFileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|interPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Put
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Put
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|Job
argument_list|(
operator|new
name|Configuration
argument_list|(
name|allConf
argument_list|)
argument_list|,
name|testName
operator|+
literal|"_importer"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ImportSequenceFile
operator|.
name|runJob
argument_list|(
name|job
argument_list|,
name|tableName
argument_list|,
name|interPath
argument_list|,
name|scratchPath
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|familyNameBytes
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|String
name|vals
index|[]
init|=
name|data
index|[
name|index
index|]
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pair
index|[]
init|=
name|vals
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|familyNameBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pair
index|[
literal|1
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|familyNameBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//test if load count is the same
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|index
argument_list|)
expr_stmt|;
comment|//test if scratch directory was erased
name|assertFalse
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|(
name|scratchPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bulkModeHCatOutputFormatTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testName
init|=
literal|"bulkModeHCatOutputFormatTest"
decl_stmt|;
name|Path
name|methodTestDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
name|testName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting: "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|databaseName
init|=
name|testName
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|dbDir
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"DB_"
operator|+
name|testName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
name|testName
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|familyName
init|=
literal|"my_family"
decl_stmt|;
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
comment|//include hbase config in conf file
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|allConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|allConf
operator|.
name|getAllProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dbquery
init|=
literal|"CREATE DATABASE IF NOT EXISTS "
operator|+
name|databaseName
operator|+
literal|" LOCATION '"
operator|+
name|dbDir
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableQuery
init|=
literal|"CREATE TABLE "
operator|+
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"(key int, english string, spanish string) STORED BY "
operator|+
literal|"'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"
operator|+
literal|"TBLPROPERTIES ('"
operator|+
name|HBaseConstants
operator|.
name|PROPERTY_BULK_OUTPUT_MODE_KEY
operator|+
literal|"'='true',"
operator|+
literal|"'hbase.columns.mapping'=':key,"
operator|+
name|familyName
operator|+
literal|":english,"
operator|+
name|familyName
operator|+
literal|":spanish')"
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
name|dbquery
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
name|tableQuery
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|data
index|[]
init|=
block|{
literal|"1,english:ONE,spanish:UNO"
block|,
literal|"2,english:TWO,spanish:DOS"
block|,
literal|"3,english:THREE,spanish:TRES"
block|}
decl_stmt|;
comment|// input/output settings
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_input"
argument_list|)
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|inputPath
argument_list|)
expr_stmt|;
comment|//create multiple files so we can test with multiple mappers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FSDataOutputStream
name|os
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"inputFile"
operator|+
name|i
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|data
index|[
name|i
index|]
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//create job
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
name|testName
argument_list|)
decl_stmt|;
name|job
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_work"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapHCatWrite
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|HCatOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|OutputJobInfo
name|outputJobInfo
init|=
name|OutputJobInfo
operator|.
name|create
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HCatOutputFormat
operator|.
name|setOutput
argument_list|(
name|job
argument_list|,
name|outputJobInfo
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|RevisionManager
name|rm
init|=
name|HBaseRevisionManagerUtil
operator|.
name|getOpenedRevisionManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|TableSnapshot
name|snapshot
init|=
name|rm
operator|.
name|createSnapshot
argument_list|(
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|el
range|:
name|snapshot
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snapshot
operator|.
name|getRevision
argument_list|(
name|el
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//verify
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|familyNameBytes
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|String
name|vals
index|[]
init|=
name|data
index|[
name|index
index|]
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pair
index|[]
init|=
name|vals
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|familyNameBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pair
index|[
literal|1
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|familyNameBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|result
operator|.
name|getColumn
argument_list|(
name|familyNameBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//test if load count is the same
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bulkModeHCatOutputFormatTestWithDefaultDB
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testName
init|=
literal|"bulkModeHCatOutputFormatTestWithDefaultDB"
decl_stmt|;
name|Path
name|methodTestDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
name|testName
argument_list|)
decl_stmt|;
name|String
name|databaseName
init|=
literal|"default"
decl_stmt|;
name|String
name|dbDir
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"DB_"
operator|+
name|testName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
name|testName
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|familyName
init|=
literal|"my_family"
decl_stmt|;
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
comment|//include hbase config in conf file
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|allConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|allConf
operator|.
name|getAllProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dbquery
init|=
literal|"CREATE DATABASE IF NOT EXISTS "
operator|+
name|databaseName
operator|+
literal|" LOCATION '"
operator|+
name|dbDir
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableQuery
init|=
literal|"CREATE TABLE "
operator|+
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"(key int, english string, spanish string) STORED BY "
operator|+
literal|"'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"
operator|+
literal|"TBLPROPERTIES ('"
operator|+
name|HBaseConstants
operator|.
name|PROPERTY_BULK_OUTPUT_MODE_KEY
operator|+
literal|"'='true',"
operator|+
literal|"'hbase.columns.mapping'=':key,"
operator|+
name|familyName
operator|+
literal|":english,"
operator|+
name|familyName
operator|+
literal|":spanish')"
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
name|dbquery
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
name|tableQuery
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|data
index|[]
init|=
block|{
literal|"1,english:ONE,spanish:UNO"
block|,
literal|"2,english:TWO,spanish:DOS"
block|,
literal|"3,english:THREE,spanish:TRES"
block|}
decl_stmt|;
comment|// input/output settings
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_input"
argument_list|)
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|inputPath
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|os
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"inputFile.txt"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|data
control|)
name|os
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//create job
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
name|testName
argument_list|)
decl_stmt|;
name|job
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_work"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapHCatWrite
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|HCatOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|OutputJobInfo
name|outputJobInfo
init|=
name|OutputJobInfo
operator|.
name|create
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HCatOutputFormat
operator|.
name|setOutput
argument_list|(
name|job
argument_list|,
name|outputJobInfo
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|familyNameBytes
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|String
name|vals
index|[]
init|=
name|data
index|[
name|index
index|]
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pair
index|[]
init|=
name|vals
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|familyNameBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pair
index|[
literal|1
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|familyNameBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//test if load count is the same
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bulkModeAbortTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testName
init|=
literal|"bulkModeAbortTest"
decl_stmt|;
name|Path
name|methodTestDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
name|testName
argument_list|)
decl_stmt|;
name|String
name|databaseName
init|=
name|testName
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|dbDir
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"DB_"
operator|+
name|testName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
name|testName
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|familyName
init|=
literal|"my_family"
decl_stmt|;
comment|// include hbase config in conf file
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|allConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|allConf
operator|.
name|getAllProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dbquery
init|=
literal|"CREATE DATABASE IF NOT EXISTS "
operator|+
name|databaseName
operator|+
literal|" LOCATION '"
operator|+
name|dbDir
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableQuery
init|=
literal|"CREATE TABLE "
operator|+
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"(key int, english string, spanish string) STORED BY "
operator|+
literal|"'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"
operator|+
literal|"TBLPROPERTIES ('"
operator|+
name|HBaseConstants
operator|.
name|PROPERTY_BULK_OUTPUT_MODE_KEY
operator|+
literal|"'='true',"
operator|+
literal|"'hbase.columns.mapping'=':key,"
operator|+
name|familyName
operator|+
literal|":english,"
operator|+
name|familyName
operator|+
literal|":spanish')"
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
name|dbquery
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcatDriver
operator|.
name|run
argument_list|(
name|tableQuery
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|data
index|[]
init|=
block|{
literal|"1,english:ONE,spanish:UNO"
block|,
literal|"2,english:TWO,spanish:DOS"
block|,
literal|"3,english:THREE,spanish:TRES"
block|}
decl_stmt|;
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_input"
argument_list|)
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|inputPath
argument_list|)
expr_stmt|;
comment|// create multiple files so we can test with multiple mappers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FSDataOutputStream
name|os
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"inputFile"
operator|+
name|i
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|data
index|[
name|i
index|]
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Path
name|workingDir
init|=
operator|new
name|Path
argument_list|(
name|methodTestDir
argument_list|,
literal|"mr_abort"
argument_list|)
decl_stmt|;
name|OutputJobInfo
name|outputJobInfo
init|=
name|OutputJobInfo
operator|.
name|create
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|configureJob
argument_list|(
name|testName
argument_list|,
name|conf
argument_list|,
name|workingDir
argument_list|,
name|MapWriteAbortTransaction
operator|.
name|class
argument_list|,
name|outputJobInfo
argument_list|,
name|inputPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that revision manager has it as aborted transaction
name|RevisionManager
name|rm
init|=
name|HBaseRevisionManagerUtil
operator|.
name|getOpenedRevisionManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|TableSnapshot
name|snapshot
init|=
name|rm
operator|.
name|createSnapshot
argument_list|(
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|family
range|:
name|snapshot
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snapshot
operator|.
name|getRevision
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|abortedWriteTransactions
init|=
name|rm
operator|.
name|getAbortedWriteTransactions
argument_list|(
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|abortedWriteTransactions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|abortedWriteTransactions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//verify that hbase does not have any of the records.
comment|//Since records are only written during commitJob,
comment|//hbase should not have any records.
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the storage handler input format returns empty results.
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"mapred/testHBaseTableBulkIgnoreAbortedTransactions"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|job
operator|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
literal|"hbase-bulk-aborted-transaction"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapReadAbortedTransaction
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|HCatInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|HCatInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|databaseName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Job
name|configureJob
parameter_list|(
name|String
name|jobName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|workingDir
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|mapperClass
parameter_list|,
name|OutputJobInfo
name|outputJobInfo
parameter_list|,
name|Path
name|inputPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
name|jobName
argument_list|)
decl_stmt|;
name|job
operator|.
name|setWorkingDirectory
argument_list|(
name|workingDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|mapperClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|HCatOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|HCatOutputFormat
operator|.
name|setOutput
argument_list|(
name|job
argument_list|,
name|outputJobInfo
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|HCatRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
block|}
end_class

end_unit

