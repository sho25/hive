begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * test for znodenames. This class is taken as-is from zookeeper lock recipe test.  * The package name has been changed.  */
end_comment

begin_class
specifier|public
class|class
name|ZNodeNameTest
extends|extends
name|TestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testOrderWithSamePrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|names
init|=
block|{
literal|"x-3"
block|,
literal|"x-5"
block|,
literal|"x-11"
block|,
literal|"x-1"
block|}
decl_stmt|;
name|String
index|[]
name|expected
init|=
block|{
literal|"x-1"
block|,
literal|"x-3"
block|,
literal|"x-5"
block|,
literal|"x-11"
block|}
decl_stmt|;
name|assertOrderedNodeNames
argument_list|(
name|names
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderWithDifferentPrefixes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|names
init|=
block|{
literal|"r-3"
block|,
literal|"r-2"
block|,
literal|"r-1"
block|,
literal|"w-2"
block|,
literal|"w-1"
block|}
decl_stmt|;
name|String
index|[]
name|expected
init|=
block|{
literal|"r-1"
block|,
literal|"r-2"
block|,
literal|"r-3"
block|,
literal|"w-1"
block|,
literal|"w-2"
block|}
decl_stmt|;
name|assertOrderedNodeNames
argument_list|(
name|names
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertOrderedNodeNames
parameter_list|(
name|String
index|[]
name|names
parameter_list|,
name|String
index|[]
name|expected
parameter_list|)
block|{
name|int
name|size
init|=
name|names
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The two arrays should be the same size!"
argument_list|,
name|names
operator|.
name|length
argument_list|,
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|ZNodeName
argument_list|>
name|nodeNames
init|=
operator|new
name|TreeSet
argument_list|<
name|ZNodeName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|nodeNames
operator|.
name|add
argument_list|(
operator|new
name|ZNodeName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ZNodeName
name|nodeName
range|:
name|nodeNames
control|)
block|{
name|String
name|name
init|=
name|nodeName
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Node "
operator|+
name|index
argument_list|,
name|expected
index|[
name|index
operator|++
index|]
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

