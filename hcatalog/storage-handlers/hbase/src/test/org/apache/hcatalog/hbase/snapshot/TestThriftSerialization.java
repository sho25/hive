begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|transaction
operator|.
name|thrift
operator|.
name|StoreFamilyRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|transaction
operator|.
name|thrift
operator|.
name|StoreFamilyRevisionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestThriftSerialization
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLightWeightTransaction
parameter_list|()
block|{
name|StoreFamilyRevision
name|trxn
init|=
operator|new
name|StoreFamilyRevision
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|serialize
argument_list|(
name|trxn
argument_list|)
decl_stmt|;
name|StoreFamilyRevision
name|newWtx
init|=
operator|new
name|StoreFamilyRevision
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|deserialize
argument_list|(
name|newWtx
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newWtx
operator|.
name|getRevision
argument_list|()
operator|==
name|trxn
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newWtx
operator|.
name|getTimestamp
argument_list|()
operator|==
name|trxn
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteTransactionList
parameter_list|()
block|{
name|List
argument_list|<
name|StoreFamilyRevision
argument_list|>
name|txnList
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFamilyRevision
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|version
decl_stmt|;
name|long
name|timestamp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|version
operator|=
name|i
expr_stmt|;
name|timestamp
operator|=
literal|1000
operator|+
name|i
expr_stmt|;
name|StoreFamilyRevision
name|wtx
init|=
operator|new
name|StoreFamilyRevision
argument_list|(
name|version
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|txnList
operator|.
name|add
argument_list|(
name|wtx
argument_list|)
expr_stmt|;
block|}
name|StoreFamilyRevisionList
name|wList
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|(
name|txnList
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|serialize
argument_list|(
name|wList
argument_list|)
decl_stmt|;
name|StoreFamilyRevisionList
name|newList
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|deserialize
argument_list|(
name|newList
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newList
operator|.
name|getRevisionListSize
argument_list|()
operator|==
name|wList
operator|.
name|getRevisionListSize
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|StoreFamilyRevision
argument_list|>
name|itr
init|=
name|newList
operator|.
name|getRevisionListIterator
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StoreFamilyRevision
name|txn
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|txn
operator|.
name|getRevision
argument_list|()
operator|==
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|txn
operator|.
name|getTimestamp
argument_list|()
operator|==
operator|(
name|i
operator|+
literal|1000
operator|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

