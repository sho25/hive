begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|TableSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatTableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|InputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|StorerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Class HBaseRevisionManagerUtil has utility methods to interact with Revision Manager  *  */
end_comment

begin_class
class|class
name|HBaseRevisionManagerUtil
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HBaseRevisionManagerUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HBaseRevisionManagerUtil
parameter_list|()
block|{     }
comment|/**      * Creates the latest snapshot of the table.      *      * @param jobConf The job configuration.      * @param hbaseTableName The fully qualified name of the HBase table.      * @param tableInfo HCat table information      * @return An instance of HCatTableSnapshot      * @throws IOException Signals that an I/O exception has occurred.      */
specifier|static
name|HCatTableSnapshot
name|createSnapshot
parameter_list|(
name|Configuration
name|jobConf
parameter_list|,
name|String
name|hbaseTableName
parameter_list|,
name|HCatTableInfo
name|tableInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|RevisionManager
name|rm
init|=
literal|null
decl_stmt|;
name|TableSnapshot
name|snpt
decl_stmt|;
try|try
block|{
name|rm
operator|=
name|getOpenedRevisionManager
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|snpt
operator|=
name|rm
operator|.
name|createSnapshot
argument_list|(
name|hbaseTableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeRevisionManagerQuietly
argument_list|(
name|rm
argument_list|)
expr_stmt|;
block|}
name|HCatTableSnapshot
name|hcatSnapshot
init|=
name|HBaseRevisionManagerUtil
operator|.
name|convertSnapshot
argument_list|(
name|snpt
argument_list|,
name|tableInfo
argument_list|)
decl_stmt|;
return|return
name|hcatSnapshot
return|;
block|}
comment|/**      * Creates the snapshot using the revision specified by the user.      *      * @param jobConf The job configuration.      * @param tableName The fully qualified name of the table whose snapshot is being taken.      * @param revision The revision number to use for the snapshot.      * @return An instance of HCatTableSnapshot.      * @throws IOException Signals that an I/O exception has occurred.      */
specifier|static
name|HCatTableSnapshot
name|createSnapshot
parameter_list|(
name|Configuration
name|jobConf
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|IOException
block|{
name|TableSnapshot
name|snpt
decl_stmt|;
name|RevisionManager
name|rm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm
operator|=
name|getOpenedRevisionManager
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|snpt
operator|=
name|rm
operator|.
name|createSnapshot
argument_list|(
name|tableName
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeRevisionManagerQuietly
argument_list|(
name|rm
argument_list|)
expr_stmt|;
block|}
name|String
name|inputJobString
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_JOB_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputJobString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"InputJobInfo information not found in JobContext. "
operator|+
literal|"HCatInputFormat.setInput() not called?"
argument_list|)
throw|;
block|}
name|InputJobInfo
name|inputInfo
init|=
operator|(
name|InputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|inputJobString
argument_list|)
decl_stmt|;
name|HCatTableSnapshot
name|hcatSnapshot
init|=
name|HBaseRevisionManagerUtil
operator|.
name|convertSnapshot
argument_list|(
name|snpt
argument_list|,
name|inputInfo
operator|.
name|getTableInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|hcatSnapshot
return|;
block|}
comment|/**      * Gets an instance of revision manager which is opened.      *      * @param jobConf The job configuration.      * @return RevisionManager An instance of revision manager.      * @throws IOException      */
specifier|static
name|RevisionManager
name|getOpenedRevisionManager
parameter_list|(
name|Configuration
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RevisionManagerFactory
operator|.
name|getOpenedRevisionManager
argument_list|(
name|jobConf
argument_list|)
return|;
block|}
specifier|static
name|void
name|closeRevisionManagerQuietly
parameter_list|(
name|RevisionManager
name|rm
parameter_list|)
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while trying to close revision manager"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|HCatTableSnapshot
name|convertSnapshot
parameter_list|(
name|TableSnapshot
name|hbaseSnapshot
parameter_list|,
name|HCatTableInfo
name|hcatTableInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HCatSchema
name|hcatTableSchema
init|=
name|hcatTableInfo
operator|.
name|getDataColumns
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hcatHbaseColMap
init|=
name|getHCatHBaseColumnMapping
argument_list|(
name|hcatTableInfo
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|revisionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|fSchema
range|:
name|hcatTableSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|hcatHbaseColMap
operator|.
name|containsKey
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|colFamily
init|=
name|hcatHbaseColMap
operator|.
name|get
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|revisionID
init|=
name|hbaseSnapshot
operator|.
name|getRevision
argument_list|(
name|colFamily
argument_list|)
decl_stmt|;
name|revisionMap
operator|.
name|put
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|,
name|revisionID
argument_list|)
expr_stmt|;
block|}
block|}
name|HCatTableSnapshot
name|hcatSnapshot
init|=
operator|new
name|HCatTableSnapshot
argument_list|(
name|hcatTableInfo
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|hcatTableInfo
operator|.
name|getTableName
argument_list|()
argument_list|,
name|revisionMap
argument_list|,
name|hbaseSnapshot
operator|.
name|getLatestRevision
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|hcatSnapshot
return|;
block|}
specifier|static
name|TableSnapshot
name|convertSnapshot
parameter_list|(
name|HCatTableSnapshot
name|hcatSnapshot
parameter_list|,
name|HCatTableInfo
name|hcatTableInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HCatSchema
name|hcatTableSchema
init|=
name|hcatTableInfo
operator|.
name|getDataColumns
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|revisionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hcatHbaseColMap
init|=
name|getHCatHBaseColumnMapping
argument_list|(
name|hcatTableInfo
argument_list|)
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|fSchema
range|:
name|hcatTableSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
name|String
name|colFamily
init|=
name|hcatHbaseColMap
operator|.
name|get
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hcatSnapshot
operator|.
name|containsColumn
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|revision
init|=
name|hcatSnapshot
operator|.
name|getRevision
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|revisionMap
operator|.
name|put
argument_list|(
name|colFamily
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|fullyQualifiedName
init|=
name|hcatSnapshot
operator|.
name|getDatabaseName
argument_list|()
operator|+
literal|"."
operator|+
name|hcatSnapshot
operator|.
name|getTableName
argument_list|()
decl_stmt|;
return|return
operator|new
name|TableSnapshot
argument_list|(
name|fullyQualifiedName
argument_list|,
name|revisionMap
argument_list|,
name|hcatSnapshot
operator|.
name|getLatestRevision
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Begins a transaction in the revision manager for the given table.      * @param qualifiedTableName Name of the table      * @param tableInfo HCat Table information      * @param jobConf Job Configuration      * @return The new transaction in revision manager      * @throws IOException      */
specifier|static
name|Transaction
name|beginWriteTransaction
parameter_list|(
name|String
name|qualifiedTableName
parameter_list|,
name|HCatTableInfo
name|tableInfo
parameter_list|,
name|Configuration
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|Transaction
name|txn
decl_stmt|;
name|RevisionManager
name|rm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm
operator|=
name|HBaseRevisionManagerUtil
operator|.
name|getOpenedRevisionManager
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|String
name|hBaseColumns
init|=
name|tableInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|)
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|hBaseColumns
operator|.
name|split
argument_list|(
literal|"[,:]"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|families
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
operator|!
name|splits
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|families
operator|.
name|add
argument_list|(
name|splits
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|txn
operator|=
name|rm
operator|.
name|beginWriteTransaction
argument_list|(
name|qualifiedTableName
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|families
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HBaseRevisionManagerUtil
operator|.
name|closeRevisionManagerQuietly
argument_list|(
name|rm
argument_list|)
expr_stmt|;
block|}
return|return
name|txn
return|;
block|}
specifier|static
name|Transaction
name|getWriteTransaction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputJobInfo
name|outputJobInfo
init|=
operator|(
name|OutputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Transaction
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_WRITE_TXN_KEY
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|void
name|setWriteTransaction
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Transaction
name|txn
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputJobInfo
name|outputJobInfo
init|=
operator|(
name|OutputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
argument_list|)
decl_stmt|;
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_WRITE_TXN_KEY
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|txn
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|outputJobInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the Revision number that will be assigned to this job's output data      * @param conf configuration of the job      * @return the revision number used      * @throws IOException      */
specifier|static
name|long
name|getOutputRevision
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getWriteTransaction
argument_list|(
name|conf
argument_list|)
operator|.
name|getRevisionNumber
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHCatHBaseColumnMapping
parameter_list|(
name|HCatTableInfo
name|hcatTableInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HCatSchema
name|hcatTableSchema
init|=
name|hcatTableInfo
operator|.
name|getDataColumns
argument_list|()
decl_stmt|;
name|StorerInfo
name|storeInfo
init|=
name|hcatTableInfo
operator|.
name|getStorerInfo
argument_list|()
decl_stmt|;
name|String
name|hbaseColumnMapping
init|=
name|storeInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hcatHbaseColMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnQualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HBaseUtil
operator|.
name|parseColumnMapping
argument_list|(
name|hbaseColumnMapping
argument_list|,
name|columnFamilies
argument_list|,
literal|null
argument_list|,
name|columnQualifiers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|HCatFieldSchema
name|column
range|:
name|hcatTableSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
name|int
name|fieldPos
init|=
name|hcatTableSchema
operator|.
name|getPosition
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colFamily
init|=
name|columnFamilies
operator|.
name|get
argument_list|(
name|fieldPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|colFamily
operator|.
name|equals
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_KEY_COL
argument_list|)
operator|==
literal|false
condition|)
block|{
name|hcatHbaseColMap
operator|.
name|put
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|colFamily
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hcatHbaseColMap
return|;
block|}
block|}
end_class

end_unit

