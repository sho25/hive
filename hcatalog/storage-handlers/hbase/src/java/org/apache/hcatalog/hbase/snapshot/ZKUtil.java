begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|transaction
operator|.
name|thrift
operator|.
name|StoreFamilyRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|transaction
operator|.
name|thrift
operator|.
name|StoreFamilyRevisionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
operator|.
name|States
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|ZKUtil
block|{
specifier|private
name|int
name|DEFAULT_SESSION_TIMEOUT
init|=
literal|1000000
decl_stmt|;
specifier|private
name|ZooKeeper
name|zkSession
decl_stmt|;
specifier|private
name|String
name|baseDir
decl_stmt|;
specifier|private
name|String
name|connectString
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZKUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
enum|enum
name|UpdateMode
block|{
name|APPEND
block|,
name|REMOVE
block|,
name|KEEP_ALIVE
block|}
empty_stmt|;
name|ZKUtil
parameter_list|(
name|String
name|connection
parameter_list|,
name|String
name|baseDir
parameter_list|)
block|{
name|this
operator|.
name|connectString
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|baseDir
operator|=
name|baseDir
expr_stmt|;
block|}
comment|/**      * This method creates znodes related to table.      *      * @param table The name of the table.      * @param families The list of column families of the table.      * @throws IOException      */
name|void
name|setUpZnodesForTable
parameter_list|(
name|String
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|transactionDataTablePath
init|=
name|PathUtil
operator|.
name|getTxnDataPath
argument_list|(
name|baseDir
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|ensurePathExists
argument_list|(
name|transactionDataTablePath
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|cf
range|:
name|families
control|)
block|{
name|String
name|runningDataPath
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
name|this
operator|.
name|baseDir
argument_list|,
name|table
argument_list|,
name|cf
argument_list|)
decl_stmt|;
name|ensurePathExists
argument_list|(
name|runningDataPath
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|String
name|abortDataPath
init|=
name|PathUtil
operator|.
name|getAbortInformationPath
argument_list|(
name|this
operator|.
name|baseDir
argument_list|,
name|table
argument_list|,
name|cf
argument_list|)
decl_stmt|;
name|ensurePathExists
argument_list|(
name|abortDataPath
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method ensures that a given path exists in zookeeper. If the path      * does not exists, it creates one.      *      * @param path The path of znode that is required to exist.      * @param data The data to be associated with the znode.      * @param acl The ACLs required.      * @param flags The CreateMode for the znode.      * @throws IOException      */
name|void
name|ensurePathExists
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
name|CreateMode
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|dirs
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|parentPath
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|subDir
range|:
name|dirs
control|)
block|{
if|if
condition|(
name|subDir
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|==
literal|false
condition|)
block|{
name|parentPath
operator|=
name|parentPath
operator|+
literal|"/"
operator|+
name|subDir
expr_stmt|;
try|try
block|{
name|Stat
name|stat
init|=
name|getSession
argument_list|()
operator|.
name|exists
argument_list|(
name|parentPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
name|getSession
argument_list|()
operator|.
name|create
argument_list|(
name|parentPath
argument_list|,
name|data
argument_list|,
name|acl
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while creating path "
operator|+
name|parentPath
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * This method returns a list of columns of a table which were used in any      * of the transactions.      *      * @param tableName The name of table.      * @return List<String> The list of column families in table.      * @throws IOException      */
name|List
argument_list|<
name|String
argument_list|>
name|getColumnFamiliesOfTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getTxnDataPath
argument_list|(
name|baseDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnFamlies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|children
operator|=
name|getSession
argument_list|()
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining columns of table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining columns of table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|(
name|child
operator|.
name|contains
argument_list|(
literal|"idgen"
argument_list|)
operator|==
literal|false
operator|)
operator|&&
operator|(
name|child
operator|.
name|contains
argument_list|(
literal|"_locknode_"
argument_list|)
operator|==
literal|false
operator|)
condition|)
block|{
name|columnFamlies
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|columnFamlies
return|;
block|}
comment|/**      * This method returns a time stamp for use by the transactions.      *      * @return long The current timestamp in zookeeper.      * @throws IOException      */
name|long
name|getTimeStamp
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|timeStamp
decl_stmt|;
name|Stat
name|stat
decl_stmt|;
name|String
name|clockPath
init|=
name|PathUtil
operator|.
name|getClockPath
argument_list|(
name|this
operator|.
name|baseDir
argument_list|)
decl_stmt|;
name|ensurePathExists
argument_list|(
name|clockPath
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
try|try
block|{
name|getSession
argument_list|()
operator|.
name|exists
argument_list|(
name|clockPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stat
operator|=
name|getSession
argument_list|()
operator|.
name|setData
argument_list|(
name|clockPath
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining timestamp "
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining timestamp "
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|timeStamp
operator|=
name|stat
operator|.
name|getMtime
argument_list|()
expr_stmt|;
return|return
name|timeStamp
return|;
block|}
comment|/**      * This method returns the next revision number to be used for any      * transaction purposes.      *      * @param tableName The name of the table.      * @return revision number The revision number last used by any transaction.      * @throws IOException      */
name|long
name|nextId
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|idNode
init|=
name|PathUtil
operator|.
name|getRevisionIDNode
argument_list|(
name|this
operator|.
name|baseDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|ensurePathExists
argument_list|(
name|idNode
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|String
name|lockNode
init|=
name|PathUtil
operator|.
name|getLockManagementNode
argument_list|(
name|idNode
argument_list|)
decl_stmt|;
name|ensurePathExists
argument_list|(
name|lockNode
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|IDGenerator
name|idf
init|=
operator|new
name|IDGenerator
argument_list|(
name|getSession
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|idNode
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|idf
operator|.
name|obtainID
argument_list|()
decl_stmt|;
return|return
name|id
return|;
block|}
comment|/**      * The latest used revision id of the table.      *      * @param tableName The name of the table.      * @return the long The revision number to use by any transaction.      * @throws IOException Signals that an I/O exception has occurred.      */
name|long
name|currentID
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|idNode
init|=
name|PathUtil
operator|.
name|getRevisionIDNode
argument_list|(
name|this
operator|.
name|baseDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|ensurePathExists
argument_list|(
name|idNode
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|String
name|lockNode
init|=
name|PathUtil
operator|.
name|getLockManagementNode
argument_list|(
name|idNode
argument_list|)
decl_stmt|;
name|ensurePathExists
argument_list|(
name|lockNode
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|IDGenerator
name|idf
init|=
operator|new
name|IDGenerator
argument_list|(
name|getSession
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|idNode
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|idf
operator|.
name|readID
argument_list|()
decl_stmt|;
return|return
name|id
return|;
block|}
comment|/**      * This methods retrieves the list of transaction information associated      * with each column/column family of a table.      *      * @param path The znode path      * @return List of FamilyRevision The list of transactions in the given path.      * @throws IOException      */
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|getTransactionList
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|getRawData
argument_list|(
name|path
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|FamilyRevision
argument_list|>
name|wtxnList
init|=
operator|new
name|ArrayList
argument_list|<
name|FamilyRevision
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
name|wtxnList
return|;
block|}
name|StoreFamilyRevisionList
name|txnList
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|()
decl_stmt|;
name|deserialize
argument_list|(
name|txnList
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|StoreFamilyRevision
argument_list|>
name|itr
init|=
name|txnList
operator|.
name|getRevisionListIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StoreFamilyRevision
name|wtxn
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|wtxnList
operator|.
name|add
argument_list|(
operator|new
name|FamilyRevision
argument_list|(
name|wtxn
operator|.
name|getRevision
argument_list|()
argument_list|,
name|wtxn
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|wtxnList
return|;
block|}
comment|/**      * This method returns the data associated with the path in zookeeper.      *      * @param path The znode path      * @param stat Zookeeper stat      * @return byte array The data stored in the znode.      * @throws IOException      */
name|byte
index|[]
name|getRawData
parameter_list|(
name|String
name|path
parameter_list|,
name|Stat
name|stat
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|getSession
argument_list|()
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining raw data from zookeeper path "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|data
return|;
block|}
comment|/**      * This method created the basic znodes in zookeeper for revision      * management.      *      * @throws IOException      */
name|void
name|createRootZNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|txnBaseNode
init|=
name|PathUtil
operator|.
name|getTransactionBasePath
argument_list|(
name|this
operator|.
name|baseDir
argument_list|)
decl_stmt|;
name|String
name|clockNode
init|=
name|PathUtil
operator|.
name|getClockPath
argument_list|(
name|this
operator|.
name|baseDir
argument_list|)
decl_stmt|;
name|ensurePathExists
argument_list|(
name|txnBaseNode
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|ensurePathExists
argument_list|(
name|clockNode
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method closes the zookeeper session.      */
name|void
name|closeZKConnection
parameter_list|()
block|{
if|if
condition|(
name|zkSession
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|zkSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Close failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|zkSession
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disconnected to ZooKeeper"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method returns a zookeeper session. If the current session is closed,      * then a new session is created.      *      * @return ZooKeeper An instance of zookeeper client.      * @throws IOException      */
name|ZooKeeper
name|getSession
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|zkSession
operator|==
literal|null
operator|||
name|zkSession
operator|.
name|getState
argument_list|()
operator|==
name|States
operator|.
name|CLOSED
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|zkSession
operator|==
literal|null
operator|||
name|zkSession
operator|.
name|getState
argument_list|()
operator|==
name|States
operator|.
name|CLOSED
condition|)
block|{
name|zkSession
operator|=
operator|new
name|ZooKeeper
argument_list|(
name|this
operator|.
name|connectString
argument_list|,
name|this
operator|.
name|DEFAULT_SESSION_TIMEOUT
argument_list|,
operator|new
name|ZKWatcher
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|zkSession
operator|.
name|getState
argument_list|()
operator|==
name|States
operator|.
name|CONNECTING
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                         }
block|}
block|}
block|}
block|}
return|return
name|zkSession
return|;
block|}
comment|/**      * This method updates the transaction data related to a znode.      *      * @param path The path to the transaction data.      * @param updateTx The FamilyRevision to be updated.      * @param mode The mode to update like append, update, remove.      * @throws IOException      */
name|void
name|updateData
parameter_list|(
name|String
name|path
parameter_list|,
name|FamilyRevision
name|updateTx
parameter_list|,
name|UpdateMode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|updateTx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The transaction to be updated found to be null."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|currentData
init|=
name|getTransactionList
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|newData
init|=
operator|new
name|ArrayList
argument_list|<
name|FamilyRevision
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|dataFound
init|=
literal|false
decl_stmt|;
name|long
name|updateVersion
init|=
name|updateTx
operator|.
name|getRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|FamilyRevision
name|tranx
range|:
name|currentData
control|)
block|{
if|if
condition|(
name|tranx
operator|.
name|getRevision
argument_list|()
operator|!=
name|updateVersion
condition|)
block|{
name|newData
operator|.
name|add
argument_list|(
name|tranx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|REMOVE
case|:
if|if
condition|(
name|dataFound
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The transaction to be removed not found in the data."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed trasaction : "
operator|+
name|updateTx
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEEP_ALIVE
case|:
if|if
condition|(
name|dataFound
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The transaction to be kept alove not found in the data. It might have been expired."
argument_list|)
throw|;
block|}
name|newData
operator|.
name|add
argument_list|(
name|updateTx
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"keep alive of transaction : "
operator|+
name|updateTx
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPEND
case|:
if|if
condition|(
name|dataFound
operator|==
literal|true
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The data to be appended already exists."
argument_list|)
throw|;
block|}
name|newData
operator|.
name|add
argument_list|(
name|updateTx
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added transaction : "
operator|+
name|updateTx
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// For serialization purposes.
name|List
argument_list|<
name|StoreFamilyRevision
argument_list|>
name|newTxnList
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFamilyRevision
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FamilyRevision
name|wtxn
range|:
name|newData
control|)
block|{
name|StoreFamilyRevision
name|newTxn
init|=
operator|new
name|StoreFamilyRevision
argument_list|(
name|wtxn
operator|.
name|getRevision
argument_list|()
argument_list|,
name|wtxn
operator|.
name|getExpireTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|newTxnList
operator|.
name|add
argument_list|(
name|newTxn
argument_list|)
expr_stmt|;
block|}
name|StoreFamilyRevisionList
name|wtxnList
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|(
name|newTxnList
argument_list|)
decl_stmt|;
name|byte
index|[]
name|newByteData
init|=
name|serialize
argument_list|(
name|wtxnList
argument_list|)
decl_stmt|;
name|Stat
name|stat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|zkSession
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|newByteData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while updating trasactional data. "
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while updating trasactional data. "
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Transaction list stored at "
operator|+
name|path
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Refresh transactions on a given transaction data path.      *      * @param path The path to the transaction data.      * @throws IOException Signals that an I/O exception has occurred.      */
name|void
name|refreshTransactions
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|currentData
init|=
name|getTransactionList
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|newData
init|=
operator|new
name|ArrayList
argument_list|<
name|FamilyRevision
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FamilyRevision
name|tranx
range|:
name|currentData
control|)
block|{
if|if
condition|(
name|tranx
operator|.
name|getExpireTimestamp
argument_list|()
operator|>
name|getTimeStamp
argument_list|()
condition|)
block|{
name|newData
operator|.
name|add
argument_list|(
name|tranx
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newData
operator|.
name|equals
argument_list|(
name|currentData
argument_list|)
operator|==
literal|false
condition|)
block|{
name|List
argument_list|<
name|StoreFamilyRevision
argument_list|>
name|newTxnList
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFamilyRevision
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FamilyRevision
name|wtxn
range|:
name|newData
control|)
block|{
name|StoreFamilyRevision
name|newTxn
init|=
operator|new
name|StoreFamilyRevision
argument_list|(
name|wtxn
operator|.
name|getRevision
argument_list|()
argument_list|,
name|wtxn
operator|.
name|getExpireTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|newTxnList
operator|.
name|add
argument_list|(
name|newTxn
argument_list|)
expr_stmt|;
block|}
name|StoreFamilyRevisionList
name|wtxnList
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|(
name|newTxnList
argument_list|)
decl_stmt|;
name|byte
index|[]
name|newByteData
init|=
name|serialize
argument_list|(
name|wtxnList
argument_list|)
decl_stmt|;
try|try
block|{
name|zkSession
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|newByteData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while updating trasactional data. "
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while updating trasactional data. "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Delete table znodes.      *      * @param tableName the hbase table name      * @throws IOException Signals that an I/O exception has occurred.      */
name|void
name|deleteZNodes
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|transactionDataTablePath
init|=
name|PathUtil
operator|.
name|getTxnDataPath
argument_list|(
name|baseDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteRecursively
argument_list|(
name|transactionDataTablePath
argument_list|)
expr_stmt|;
block|}
name|void
name|deleteRecursively
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|getSession
argument_list|()
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|deleteRecursively
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|getSession
argument_list|()
operator|.
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while deleting path "
operator|+
name|path
operator|+
literal|"."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while deleting path "
operator|+
name|path
operator|+
literal|"."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * This method serializes a given instance of TBase object.      *      * @param obj An instance of TBase      * @return byte array The serialized data.      * @throws IOException      */
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|TBase
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
try|try
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|serializer
operator|.
name|serialize
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
name|bytes
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Serialization error: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * This method deserializes the given byte array into the TBase object.      *      * @param obj An instance of TBase      * @param data Output of deserialization.      * @throws IOException      */
specifier|static
name|void
name|deserialize
parameter_list|(
name|TBase
name|obj
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|==
literal|0
condition|)
return|return;
try|try
block|{
name|TDeserializer
name|deserializer
init|=
operator|new
name|TDeserializer
argument_list|(
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
name|deserializer
operator|.
name|deserialize
argument_list|(
name|obj
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Deserialization error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|ZKWatcher
implements|implements
name|Watcher
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|Expired
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"The client session has expired. Try opening a new "
operator|+
literal|"session and connecting again."
argument_list|)
expr_stmt|;
name|zkSession
operator|=
literal|null
expr_stmt|;
break|break;
default|default:
block|}
block|}
block|}
block|}
end_class

end_unit

