begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|BlockingRpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|AbortWriteTransactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|AbortWriteTransactionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|BeginWriteTransactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|BeginWriteTransactionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CommitWriteTransactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CommitWriteTransactionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CreateSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CreateSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CreateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|DropTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|DropTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|GetAbortedWriteTransactionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|GetAbortedWriteTransactionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|KeepAliveTransactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|KeepAliveTransactionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|RevisionManagerEndpointService
import|;
end_import

begin_comment
comment|/**  * This class is nothing but a delegate for the enclosed proxy,  * which is created upon setting the configuration.  */
end_comment

begin_class
specifier|public
class|class
name|RevisionManagerEndpointClient
implements|implements
name|RevisionManager
implements|,
name|Configurable
block|{
specifier|private
specifier|final
name|RPCConverter
name|rpcConverter
init|=
operator|new
name|RPCConverter
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|HTable
name|htable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
comment|// clone to adjust RPC settings unique to proxy
name|Configuration
name|clonedConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clonedConf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// do not retry RPC
name|htable
operator|=
operator|new
name|HTable
argument_list|(
name|clonedConf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|htable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
specifier|final
name|String
name|table
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOException
block|{
name|call
argument_list|(
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|RevisionManagerEndpointService
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|(
name|RevisionManagerEndpointService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|CreateTableResponse
argument_list|>
name|done
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|CreateTableResponse
argument_list|>
argument_list|()
decl_stmt|;
name|CreateTableRequest
name|request
init|=
name|CreateTableRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|table
argument_list|)
operator|.
name|addAllColumnFamilies
argument_list|(
name|columnFamilies
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|service
operator|.
name|createTable
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|done
argument_list|)
expr_stmt|;
name|blockOnResponse
argument_list|(
name|done
argument_list|,
name|controller
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropTable
parameter_list|(
specifier|final
name|String
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|call
argument_list|(
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|RevisionManagerEndpointService
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|(
name|RevisionManagerEndpointService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|DropTableResponse
argument_list|>
name|done
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|DropTableResponse
argument_list|>
argument_list|()
decl_stmt|;
name|DropTableRequest
name|request
init|=
name|DropTableRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|table
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|service
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|done
argument_list|)
expr_stmt|;
name|blockOnResponse
argument_list|(
name|done
argument_list|,
name|controller
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Transaction
name|beginWriteTransaction
parameter_list|(
specifier|final
name|String
name|table
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|beginWriteTransaction
argument_list|(
name|table
argument_list|,
name|families
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Transaction
name|beginWriteTransaction
parameter_list|(
specifier|final
name|String
name|table
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|families
parameter_list|,
specifier|final
name|Long
name|keepAlive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|call
argument_list|(
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|RevisionManagerEndpointService
argument_list|,
name|Transaction
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Transaction
name|call
parameter_list|(
name|RevisionManagerEndpointService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|BeginWriteTransactionResponse
argument_list|>
name|done
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|BeginWriteTransactionResponse
argument_list|>
argument_list|()
decl_stmt|;
name|BeginWriteTransactionRequest
operator|.
name|Builder
name|builder
init|=
name|BeginWriteTransactionRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|table
argument_list|)
operator|.
name|addAllColumnFamilies
argument_list|(
name|families
argument_list|)
decl_stmt|;
if|if
condition|(
name|keepAlive
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setKeepAlive
argument_list|(
name|keepAlive
argument_list|)
expr_stmt|;
block|}
name|service
operator|.
name|beginWriteTransaction
argument_list|(
name|controller
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|done
argument_list|)
expr_stmt|;
return|return
name|rpcConverter
operator|.
name|convertTransaction
argument_list|(
name|blockOnResponse
argument_list|(
name|done
argument_list|,
name|controller
argument_list|)
operator|.
name|getTransaction
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitWriteTransaction
parameter_list|(
specifier|final
name|Transaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
name|call
argument_list|(
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|RevisionManagerEndpointService
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|(
name|RevisionManagerEndpointService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|CommitWriteTransactionResponse
argument_list|>
name|done
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|CommitWriteTransactionResponse
argument_list|>
argument_list|()
decl_stmt|;
name|CommitWriteTransactionRequest
name|request
init|=
name|CommitWriteTransactionRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTransaction
argument_list|(
name|rpcConverter
operator|.
name|convertTransaction
argument_list|(
name|transaction
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|service
operator|.
name|commitWriteTransaction
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|done
argument_list|)
expr_stmt|;
name|blockOnResponse
argument_list|(
name|done
argument_list|,
name|controller
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortWriteTransaction
parameter_list|(
specifier|final
name|Transaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
name|call
argument_list|(
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|RevisionManagerEndpointService
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|(
name|RevisionManagerEndpointService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|AbortWriteTransactionResponse
argument_list|>
name|done
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|AbortWriteTransactionResponse
argument_list|>
argument_list|()
decl_stmt|;
name|AbortWriteTransactionRequest
name|request
init|=
name|AbortWriteTransactionRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTransaction
argument_list|(
name|rpcConverter
operator|.
name|convertTransaction
argument_list|(
name|transaction
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|service
operator|.
name|abortWriteTransaction
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|done
argument_list|)
expr_stmt|;
name|blockOnResponse
argument_list|(
name|done
argument_list|,
name|controller
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|getAbortedWriteTransactions
parameter_list|(
specifier|final
name|String
name|table
parameter_list|,
specifier|final
name|String
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|call
argument_list|(
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|RevisionManagerEndpointService
argument_list|,
name|List
argument_list|<
name|FamilyRevision
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|call
parameter_list|(
name|RevisionManagerEndpointService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|GetAbortedWriteTransactionsResponse
argument_list|>
name|done
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|GetAbortedWriteTransactionsResponse
argument_list|>
argument_list|()
decl_stmt|;
name|GetAbortedWriteTransactionsRequest
name|request
init|=
name|GetAbortedWriteTransactionsRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|table
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|columnFamily
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|service
operator|.
name|getAbortedWriteTransactions
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|done
argument_list|)
expr_stmt|;
return|return
name|rpcConverter
operator|.
name|convertFamilyRevisions
argument_list|(
name|blockOnResponse
argument_list|(
name|done
argument_list|,
name|controller
argument_list|)
operator|.
name|getFamilyRevisionsList
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableSnapshot
name|createSnapshot
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSnapshot
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableSnapshot
name|createSnapshot
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|Long
name|revision
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|call
argument_list|(
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|RevisionManagerEndpointService
argument_list|,
name|TableSnapshot
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TableSnapshot
name|call
parameter_list|(
name|RevisionManagerEndpointService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|CreateSnapshotResponse
argument_list|>
name|done
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|CreateSnapshotResponse
argument_list|>
argument_list|()
decl_stmt|;
name|CreateSnapshotRequest
operator|.
name|Builder
name|builder
init|=
name|CreateSnapshotRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setRevision
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
name|service
operator|.
name|createSnapshot
argument_list|(
name|controller
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|done
argument_list|)
expr_stmt|;
return|return
name|rpcConverter
operator|.
name|convertTableSnapshot
argument_list|(
name|blockOnResponse
argument_list|(
name|done
argument_list|,
name|controller
argument_list|)
operator|.
name|getTableSnapshot
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|keepAlive
parameter_list|(
specifier|final
name|Transaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
name|call
argument_list|(
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|RevisionManagerEndpointService
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|(
name|RevisionManagerEndpointService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|KeepAliveTransactionResponse
argument_list|>
name|done
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|KeepAliveTransactionResponse
argument_list|>
argument_list|()
decl_stmt|;
name|KeepAliveTransactionRequest
name|request
init|=
name|KeepAliveTransactionRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTransaction
argument_list|(
name|rpcConverter
operator|.
name|convertTransaction
argument_list|(
name|transaction
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|service
operator|.
name|keepAliveTransaction
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|done
argument_list|)
expr_stmt|;
name|blockOnResponse
argument_list|(
name|done
argument_list|,
name|controller
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|R
parameter_list|>
name|R
name|blockOnResponse
parameter_list|(
name|BlockingRpcCallback
argument_list|<
name|R
argument_list|>
name|done
parameter_list|,
name|ServerRpcController
name|controller
parameter_list|)
throws|throws
name|IOException
block|{
name|R
name|response
init|=
name|done
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|controller
operator|.
name|failedOnException
argument_list|()
condition|)
block|{
throw|throw
name|controller
operator|.
name|getFailedOn
argument_list|()
throw|;
block|}
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|String
name|error
init|=
name|controller
operator|.
name|errorText
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|error
operator|=
literal|"Server indicated failure but error text was empty"
expr_stmt|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|error
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
specifier|private
parameter_list|<
name|R
parameter_list|>
name|R
name|call
parameter_list|(
name|Batch
operator|.
name|Call
argument_list|<
name|RevisionManagerEndpointService
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|result
init|=
name|htable
operator|.
name|coprocessorService
argument_list|(
name|RevisionManagerEndpointService
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|callable
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|result
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

