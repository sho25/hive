begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * A<a href="package.html">protocol to implement an exclusive  *  write lock or to elect a leader</a>.<p/> You invoke {@link #lock()} to  *  start the process of grabbing the lock; you may get the lock then or it may be  *  some time later.<p/> You can register a listener so that you are invoked  *  when you get the lock; otherwise you can ask if you have the lock  *  by calling {@link #isOwner()}  *  This class has been used as-is from the zookeeper 3.4.0 recipes. The only change  *  made is a TODO for sorting using suffixes and the package name.  */
end_comment

begin_class
specifier|public
class|class
name|WriteLock
extends|extends
name|ProtocolSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WriteLock
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|dir
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|ZNodeName
name|idName
decl_stmt|;
specifier|private
name|String
name|ownerId
decl_stmt|;
specifier|private
name|String
name|lastChildId
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
init|=
block|{
literal|0x12
block|,
literal|0x34
block|}
decl_stmt|;
specifier|private
name|LockListener
name|callback
decl_stmt|;
specifier|private
name|LockZooKeeperOperation
name|zop
decl_stmt|;
comment|/**    * zookeeper contructor for writelock    * @param zookeeper zookeeper client instance    * @param dir the parent path you want to use for locking    * @param acl the acls that you want to use for all the paths,    * if null world read/write is used.    */
specifier|public
name|WriteLock
parameter_list|(
name|ZooKeeper
name|zookeeper
parameter_list|,
name|String
name|dir
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|)
block|{
name|super
argument_list|(
name|zookeeper
argument_list|)
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
block|{
name|setAcl
argument_list|(
name|acl
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|zop
operator|=
operator|new
name|LockZooKeeperOperation
argument_list|()
expr_stmt|;
block|}
comment|/**    * zookeeper contructor for writelock with callback    * @param zookeeper the zookeeper client instance    * @param dir the parent path you want to use for locking    * @param acl the acls that you want to use for all the paths    * @param callback the call back instance    */
specifier|public
name|WriteLock
parameter_list|(
name|ZooKeeper
name|zookeeper
parameter_list|,
name|String
name|dir
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
name|LockListener
name|callback
parameter_list|)
block|{
name|this
argument_list|(
name|zookeeper
argument_list|,
name|dir
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
comment|/**    * return the current locklistener    * @return the locklistener    */
specifier|public
name|LockListener
name|getLockListener
parameter_list|()
block|{
return|return
name|this
operator|.
name|callback
return|;
block|}
comment|/**    * register a different call back listener    * @param callback the call back instance    */
specifier|public
name|void
name|setLockListener
parameter_list|(
name|LockListener
name|callback
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
comment|/**    * Removes the lock or associated znode if    * you no longer require the lock. this also    * removes your request in the queue for locking    * in case you do not already hold the lock.    * @throws RuntimeException throws a runtime exception    * if it cannot connect to zookeeper.    */
specifier|public
specifier|synchronized
name|void
name|unlock
parameter_list|()
throws|throws
name|RuntimeException
block|{
if|if
condition|(
operator|!
name|isClosed
argument_list|()
operator|&&
name|id
operator|!=
literal|null
condition|)
block|{
comment|// we don't need to retry this operation in the case of failure
comment|// as ZK will remove ephemeral files and we don't wanna hang
comment|// this process when closing if we cannot reconnect to ZK
try|try
block|{
name|ZooKeeperOperation
name|zopdel
init|=
operator|new
name|ZooKeeperOperation
argument_list|()
block|{
specifier|public
name|boolean
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zookeeper
operator|.
name|delete
argument_list|(
name|id
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
decl_stmt|;
name|zopdel
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//set that we have been interrupted.
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|RuntimeException
operator|)
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|lockReleased
argument_list|()
expr_stmt|;
block|}
name|id
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * the watcher called on    * getting watch while watching    * my predecessor    */
specifier|private
class|class
name|LockWatcher
implements|implements
name|Watcher
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
comment|// lets either become the leader or watch the new/updated node
name|LOG
operator|.
name|debug
argument_list|(
literal|"Watcher fired on path: "
operator|+
name|event
operator|.
name|getPath
argument_list|()
operator|+
literal|" state: "
operator|+
name|event
operator|.
name|getState
argument_list|()
operator|+
literal|" type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * a zoookeeper operation that is mainly responsible    * for all the magic required for locking.    */
specifier|private
class|class
name|LockZooKeeperOperation
implements|implements
name|ZooKeeperOperation
block|{
comment|/** find if we have been created earler if not create our node      *      * @param prefix the prefix node      * @param zookeeper teh zookeeper client      * @param dir the dir paretn      * @throws KeeperException      * @throws InterruptedException      */
specifier|private
name|void
name|findPrefixInChildren
parameter_list|(
name|String
name|prefix
parameter_list|,
name|ZooKeeper
name|zookeeper
parameter_list|,
name|String
name|dir
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|zookeeper
operator|.
name|getChildren
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|id
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found id created last time: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|zookeeper
operator|.
name|create
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|prefix
argument_list|,
name|data
argument_list|,
name|getAcl
argument_list|()
argument_list|,
name|EPHEMERAL_SEQUENTIAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created id: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * the command that is run and retried for actually      * obtaining the lock      * @return if the command was successful or not      */
specifier|public
name|boolean
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
do|do
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|long
name|sessionId
init|=
name|zookeeper
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|"x-"
operator|+
name|sessionId
operator|+
literal|"-"
decl_stmt|;
comment|// lets try look up the current ID if we failed
comment|// in the middle of creating the znode
name|findPrefixInChildren
argument_list|(
name|prefix
argument_list|,
name|zookeeper
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|idName
operator|=
operator|new
name|ZNodeName
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|zookeeper
operator|.
name|getChildren
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No children in: "
operator|+
name|dir
operator|+
literal|" when we've just "
operator|+
literal|"created one! Lets recreate it..."
argument_list|)
expr_stmt|;
comment|// lets force the recreation of the id
name|id
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// lets sort them explicitly (though they do seem to come back in order ususally :)
name|SortedSet
argument_list|<
name|ZNodeName
argument_list|>
name|sortedNames
init|=
operator|new
name|TreeSet
argument_list|<
name|ZNodeName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
comment|//TODO: Just use the suffix to sort.
name|sortedNames
operator|.
name|add
argument_list|(
operator|new
name|ZNodeName
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ownerId
operator|=
name|sortedNames
operator|.
name|first
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|SortedSet
argument_list|<
name|ZNodeName
argument_list|>
name|lessThanMe
init|=
name|sortedNames
operator|.
name|headSet
argument_list|(
name|idName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lessThanMe
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ZNodeName
name|lastChildName
init|=
name|lessThanMe
operator|.
name|last
argument_list|()
decl_stmt|;
name|lastChildId
operator|=
name|lastChildName
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"watching less than me node: "
operator|+
name|lastChildId
argument_list|)
expr_stmt|;
block|}
name|Stat
name|stat
init|=
name|zookeeper
operator|.
name|exists
argument_list|(
name|lastChildId
argument_list|,
operator|new
name|LockWatcher
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find the"
operator|+
literal|" stats for less than me: "
operator|+
name|lastChildName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isOwner
argument_list|()
condition|)
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|lockAcquired
argument_list|()
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
block|}
block|}
block|}
do|while
condition|(
name|id
operator|==
literal|null
condition|)
do|;
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
empty_stmt|;
comment|/**    * Attempts to acquire the exclusive write lock returning whether or not it was    * acquired. Note that the exclusive lock may be acquired some time later after    * this method has been invoked due to the current lock owner going away.    */
specifier|public
specifier|synchronized
name|boolean
name|lock
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ensurePathExists
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|retryOperation
argument_list|(
name|zop
argument_list|)
return|;
block|}
comment|/**    * return the parent dir for lock    * @return the parent dir used for locks.    */
specifier|public
name|String
name|getDir
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
comment|/**    * Returns true if this node is the owner of the    *  lock (or the leader)    */
specifier|public
name|boolean
name|isOwner
parameter_list|()
block|{
return|return
name|id
operator|!=
literal|null
operator|&&
name|ownerId
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|ownerId
argument_list|)
return|;
block|}
comment|/**    * return the id for this lock    * @return the id for this lock    */
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
block|}
end_class

end_unit

