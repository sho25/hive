begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * The class HCatTableSnapshot represents a snapshot of a hcatalog table.  * This class is intended to be opaque. This class would used only by the  * record readers to obtain knowledge about the revisions of a  * column to be filtered.  */
end_comment

begin_class
specifier|public
class|class
name|HCatTableSnapshot
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|String
name|databaseName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|columnMap
decl_stmt|;
specifier|private
name|long
name|latestRevision
decl_stmt|;
name|HCatTableSnapshot
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|columnMap
parameter_list|,
name|long
name|latestRevision
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|databaseName
operator|=
name|databaseName
expr_stmt|;
name|this
operator|.
name|columnMap
operator|=
name|columnMap
expr_stmt|;
name|this
operator|.
name|latestRevision
operator|=
name|latestRevision
expr_stmt|;
block|}
comment|/**      * @return The name of the table in the snapshot.      */
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
comment|/**      * @return The name of the database to which the table snapshot belongs.      */
specifier|public
name|String
name|getDatabaseName
parameter_list|()
block|{
return|return
name|this
operator|.
name|databaseName
return|;
block|}
comment|/**      * @return The revision number of a column in a snapshot.      */
name|long
name|getRevision
parameter_list|(
name|String
name|column
parameter_list|)
block|{
if|if
condition|(
name|columnMap
operator|.
name|containsKey
argument_list|(
name|column
argument_list|)
condition|)
return|return
name|this
operator|.
name|columnMap
operator|.
name|get
argument_list|(
name|column
argument_list|)
return|;
return|return
name|latestRevision
return|;
block|}
comment|/**      * The method checks if the snapshot contains information about a data column.      *      * @param column The data column of the table      * @return true, if successful      */
name|boolean
name|containsColumn
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
name|this
operator|.
name|columnMap
operator|.
name|containsKey
argument_list|(
name|column
argument_list|)
return|;
block|}
comment|/**      * @return latest committed revision when snapshot was taken      */
name|long
name|getLatestRevision
parameter_list|()
block|{
return|return
name|latestRevision
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|snapshot
init|=
literal|" Database Name: "
operator|+
name|this
operator|.
name|databaseName
operator|+
literal|" Table Name : "
operator|+
name|tableName
operator|+
literal|"Latest Revision: "
operator|+
name|latestRevision
operator|+
literal|" Column revision : "
operator|+
name|columnMap
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|snapshot
return|;
block|}
block|}
end_class

end_unit

