begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|AbortWriteTransactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|AbortWriteTransactionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|BeginWriteTransactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|BeginWriteTransactionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CommitWriteTransactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CommitWriteTransactionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CreateSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CreateSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|CreateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|DropTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|DropTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|GetAbortedWriteTransactionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|GetAbortedWriteTransactionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|KeepAliveTransactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|KeepAliveTransactionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerEndpointProtos
operator|.
name|RevisionManagerEndpointService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  * Implementation of RevisionManager as HBase RPC endpoint. This class will control the lifecycle of  * and delegate to the actual RevisionManager implementation and make it available as a service  * hosted in the HBase region server (instead of running it in the client (storage handler).  * In the case of {@link ZKBasedRevisionManager} now only the region servers need write access to  * manage revision data.  */
end_comment

begin_class
specifier|public
class|class
name|RevisionManagerEndpoint
extends|extends
name|RevisionManagerEndpointService
implements|implements
name|Coprocessor
implements|,
name|CoprocessorService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RevisionManagerEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RPCConverter
name|rpcConverter
init|=
operator|new
name|RPCConverter
argument_list|()
decl_stmt|;
specifier|private
name|RevisionManager
name|rmImpl
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
block|{
try|try
block|{
name|Configuration
name|conf
init|=
name|RevisionManagerConfiguration
operator|.
name|create
argument_list|(
name|env
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
name|RMConstants
operator|.
name|REVISION_MGR_ENDPOINT_IMPL_CLASS
argument_list|,
name|ZKBasedRevisionManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Using Revision Manager implementation: {}"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|rmImpl
operator|=
name|RevisionManagerFactory
operator|.
name|getOpenedRevisionManager
argument_list|(
name|className
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Failed to initialize revision manager"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|rmImpl
operator|!=
literal|null
condition|)
block|{
name|rmImpl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error closing revision manager."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CreateTableRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|CreateTableResponse
argument_list|>
name|done
parameter_list|)
block|{
if|if
condition|(
name|rmImpl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmImpl
operator|.
name|createTable
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|,
name|request
operator|.
name|getColumnFamiliesList
argument_list|()
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|CreateTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DropTableRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|DropTableResponse
argument_list|>
name|done
parameter_list|)
block|{
if|if
condition|(
name|rmImpl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmImpl
operator|.
name|dropTable
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|DropTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginWriteTransaction
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|BeginWriteTransactionRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|BeginWriteTransactionResponse
argument_list|>
name|done
parameter_list|)
block|{
if|if
condition|(
name|rmImpl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Transaction
name|transaction
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasKeepAlive
argument_list|()
condition|)
block|{
name|transaction
operator|=
name|rmImpl
operator|.
name|beginWriteTransaction
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|,
name|request
operator|.
name|getColumnFamiliesList
argument_list|()
argument_list|,
name|request
operator|.
name|getKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transaction
operator|=
name|rmImpl
operator|.
name|beginWriteTransaction
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|,
name|request
operator|.
name|getColumnFamiliesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|BeginWriteTransactionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTransaction
argument_list|(
name|rpcConverter
operator|.
name|convertTransaction
argument_list|(
name|transaction
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitWriteTransaction
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CommitWriteTransactionRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|CommitWriteTransactionResponse
argument_list|>
name|done
parameter_list|)
block|{
if|if
condition|(
name|rmImpl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmImpl
operator|.
name|commitWriteTransaction
argument_list|(
name|rpcConverter
operator|.
name|convertTransaction
argument_list|(
name|request
operator|.
name|getTransaction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|CommitWriteTransactionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortWriteTransaction
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AbortWriteTransactionRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AbortWriteTransactionResponse
argument_list|>
name|done
parameter_list|)
block|{
if|if
condition|(
name|rmImpl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmImpl
operator|.
name|abortWriteTransaction
argument_list|(
name|rpcConverter
operator|.
name|convertTransaction
argument_list|(
name|request
operator|.
name|getTransaction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|AbortWriteTransactionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|getAbortedWriteTransactions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetAbortedWriteTransactionsRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|GetAbortedWriteTransactionsResponse
argument_list|>
name|done
parameter_list|)
block|{
if|if
condition|(
name|rmImpl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmImpl
operator|.
name|getAbortedWriteTransactions
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|,
name|request
operator|.
name|getColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|GetAbortedWriteTransactionsResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createSnapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CreateSnapshotRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|CreateSnapshotResponse
argument_list|>
name|done
parameter_list|)
block|{
if|if
condition|(
name|rmImpl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|TableSnapshot
name|snapshot
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasRevision
argument_list|()
condition|)
block|{
name|snapshot
operator|=
name|rmImpl
operator|.
name|createSnapshot
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|,
name|request
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|snapshot
operator|=
name|rmImpl
operator|.
name|createSnapshot
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|CreateSnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableSnapshot
argument_list|(
name|rpcConverter
operator|.
name|convertTableSnapshot
argument_list|(
name|snapshot
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|keepAliveTransaction
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|KeepAliveTransactionRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|KeepAliveTransactionResponse
argument_list|>
name|done
parameter_list|)
block|{
if|if
condition|(
name|rmImpl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmImpl
operator|.
name|keepAlive
argument_list|(
name|rpcConverter
operator|.
name|convertTransaction
argument_list|(
name|request
operator|.
name|getTransaction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|KeepAliveTransactionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

