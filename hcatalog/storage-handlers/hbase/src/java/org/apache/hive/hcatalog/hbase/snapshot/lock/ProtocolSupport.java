begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A base class for protocol implementations which provides a number of higher  * level helper methods for working with ZooKeeper along with retrying synchronous  *  operations if the connection to ZooKeeper closes such as  *  {@link #retryOperation(ZooKeeperOperation)}  *  This class has been used as-is from the zookeeper 3.4.0 recipes with  *  changes in the retry delay, retry count values and package name.  */
end_comment

begin_class
class|class
name|ProtocolSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProtocolSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|ZooKeeper
name|zookeeper
decl_stmt|;
specifier|private
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|long
name|retryDelay
init|=
literal|500L
decl_stmt|;
specifier|private
name|int
name|retryCount
init|=
literal|3
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
init|=
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
decl_stmt|;
specifier|public
name|ProtocolSupport
parameter_list|(
name|ZooKeeper
name|zookeeper
parameter_list|)
block|{
name|this
operator|.
name|zookeeper
operator|=
name|zookeeper
expr_stmt|;
block|}
comment|/**      * Closes this strategy and releases any ZooKeeper resources; but keeps the      *  ZooKeeper instance open      */
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * return zookeeper client instance      * @return zookeeper client instance      */
specifier|public
name|ZooKeeper
name|getZookeeper
parameter_list|()
block|{
return|return
name|zookeeper
return|;
block|}
comment|/**      * return the acl its using      * @return the acl.      */
specifier|public
name|List
argument_list|<
name|ACL
argument_list|>
name|getAcl
parameter_list|()
block|{
return|return
name|acl
return|;
block|}
comment|/**      * set the acl      * @param acl the acl to set to      */
specifier|public
name|void
name|setAcl
parameter_list|(
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|)
block|{
name|this
operator|.
name|acl
operator|=
name|acl
expr_stmt|;
block|}
comment|/**      * get the retry delay in milliseconds      * @return the retry delay      */
specifier|public
name|long
name|getRetryDelay
parameter_list|()
block|{
return|return
name|retryDelay
return|;
block|}
comment|/**      * Sets the time waited between retry delays      * @param retryDelay the retry delay      */
specifier|public
name|void
name|setRetryDelay
parameter_list|(
name|long
name|retryDelay
parameter_list|)
block|{
name|this
operator|.
name|retryDelay
operator|=
name|retryDelay
expr_stmt|;
block|}
comment|/**      * Allow derived classes to perform      * some custom closing operations to release resources      */
specifier|protected
name|void
name|doClose
parameter_list|()
block|{     }
comment|/**      * Perform the given operation, retrying if the connection fails      * @return object. it needs to be cast to the callee's expected      * return type.      */
specifier|protected
name|Object
name|retryOperation
parameter_list|(
name|ZooKeeperOperation
name|operation
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|KeeperException
name|exception
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retryCount
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
return|return
name|operation
operator|.
name|execute
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|SessionExpiredException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Session expired for: "
operator|+
name|zookeeper
operator|+
literal|" so reconnecting due to: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|ConnectionLossException
name|e
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempt "
operator|+
name|i
operator|+
literal|" failed with connection loss so "
operator|+
literal|"attempting to reconnect: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|retryDelay
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|exception
throw|;
block|}
comment|/**      * Ensures that the given path exists with no data, the current      * ACL and no flags      * @param path      */
specifier|protected
name|void
name|ensurePathExists
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|ensureExists
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|acl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Ensures that the given path exists with the given data, ACL and flags      * @param path      * @param acl      * @param flags      */
specifier|protected
name|void
name|ensureExists
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
specifier|final
name|CreateMode
name|flags
parameter_list|)
block|{
try|try
block|{
name|retryOperation
argument_list|(
operator|new
name|ZooKeeperOperation
argument_list|()
block|{
specifier|public
name|boolean
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Stat
name|stat
init|=
name|zookeeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|zookeeper
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|acl
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns true if this protocol has been closed      * @return true if this protocol is closed      */
specifier|protected
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Performs a retry delay if this is not the first attempt      * @param attemptCount the number of the attempts performed so far      */
specifier|protected
name|void
name|retryDelay
parameter_list|(
name|int
name|attemptCount
parameter_list|)
block|{
if|if
condition|(
name|attemptCount
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|attemptCount
operator|*
name|retryDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to sleep: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

