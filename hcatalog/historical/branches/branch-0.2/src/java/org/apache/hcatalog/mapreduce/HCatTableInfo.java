begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_comment
comment|/**  *  * HCatTableInfo - class to communicate table information to {@link HCatInputFormat}  * and {@link HCatOutputFormat}  *  */
end_comment

begin_class
specifier|public
class|class
name|HCatTableInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
enum|enum
name|TableInfoType
block|{
name|INPUT_INFO
block|,
name|OUTPUT_INFO
block|}
empty_stmt|;
specifier|private
specifier|final
name|TableInfoType
name|tableInfoType
decl_stmt|;
comment|/** The Metadata server uri */
specifier|private
specifier|final
name|String
name|serverUri
decl_stmt|;
comment|/** If the hcat server is configured to work with hadoop security, this    * variable will hold the principal name of the server - this will be used    * in the authentication to the hcat server using kerberos    */
specifier|private
specifier|final
name|String
name|serverKerberosPrincipal
decl_stmt|;
comment|/** The db and table names */
specifier|private
specifier|final
name|String
name|dbName
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
decl_stmt|;
comment|/** The partition filter */
specifier|private
name|String
name|filter
decl_stmt|;
comment|/** The partition predicates to filter on, an arbitrary AND/OR filter, if used to input from*/
specifier|private
specifier|final
name|String
name|partitionPredicates
decl_stmt|;
comment|/** The information about the partitions matching the specified query */
specifier|private
name|JobInfo
name|jobInfo
decl_stmt|;
comment|/** The partition values to publish to, if used for output*/
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
decl_stmt|;
comment|/** List of keys for which values were not specified at write setup time, to be infered at write time */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|dynamicPartitioningKeys
decl_stmt|;
comment|/**    * Initializes a new HCatTableInfo instance to be used with {@link HCatInputFormat}    * for reading data from a table.    * @param serverUri the Metadata server uri    * @param serverKerberosPrincipal If the hcat server is configured to    * work with hadoop security, the kerberos principal name of the server - else null    * The principal name should be of the form:    *<servicename>/_HOST@<realm> like "hcat/_HOST@myrealm.com"    * The special string _HOST will be replaced automatically with the correct host name    * @param dbName the db name    * @param tableName the table name    */
specifier|public
specifier|static
name|HCatTableInfo
name|getInputTableInfo
parameter_list|(
name|String
name|serverUri
parameter_list|,
name|String
name|serverKerberosPrincipal
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|HCatTableInfo
argument_list|(
name|serverUri
argument_list|,
name|serverKerberosPrincipal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**    * Initializes a new HCatTableInfo instance to be used with {@link HCatInputFormat}    * for reading data from a table.    * @param serverUri the Metadata server uri    * @param serverKerberosPrincipal If the hcat server is configured to    * work with hadoop security, the kerberos principal name of the server - else null    * The principal name should be of the form:    *<servicename>/_HOST@<realm> like "hcat/_HOST@myrealm.com"    * The special string _HOST will be replaced automatically with the correct host name    * @param dbName the db name    * @param tableName the table name    * @param filter the partition filter    */
specifier|public
specifier|static
name|HCatTableInfo
name|getInputTableInfo
parameter_list|(
name|String
name|serverUri
parameter_list|,
name|String
name|serverKerberosPrincipal
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
operator|new
name|HCatTableInfo
argument_list|(
name|serverUri
argument_list|,
name|serverKerberosPrincipal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|private
name|HCatTableInfo
parameter_list|(
name|String
name|serverUri
parameter_list|,
name|String
name|serverKerberosPrincipal
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|serverUri
operator|=
name|serverUri
expr_stmt|;
name|this
operator|.
name|serverKerberosPrincipal
operator|=
name|serverKerberosPrincipal
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
operator|(
name|dbName
operator|==
literal|null
operator|)
condition|?
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
else|:
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|partitionPredicates
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|partitionValues
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tableInfoType
operator|=
name|TableInfoType
operator|.
name|INPUT_INFO
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
comment|/**    * Initializes a new HCatTableInfo instance to be used with {@link HCatOutputFormat}    * for writing data from a table.    * @param serverUri the Metadata server uri    * @param serverKerberosPrincipal If the hcat server is configured to    * work with hadoop security, the kerberos principal name of the server - else null    * The principal name should be of the form:    *<servicename>/_HOST@<realm> like "hcat/_HOST@myrealm.com"    * The special string _HOST will be replaced automatically with the correct host name    * @param dbName the db name    * @param tableName the table name    * @param partitionValues The partition values to publish to, can be null or empty Map to    * indicate write to a unpartitioned table. For partitioned tables, this map should    * contain keys for all partition columns with corresponding values.    */
specifier|public
specifier|static
name|HCatTableInfo
name|getOutputTableInfo
parameter_list|(
name|String
name|serverUri
parameter_list|,
name|String
name|serverKerberosPrincipal
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|)
block|{
return|return
operator|new
name|HCatTableInfo
argument_list|(
name|serverUri
argument_list|,
name|serverKerberosPrincipal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionValues
argument_list|)
return|;
block|}
specifier|private
name|HCatTableInfo
parameter_list|(
name|String
name|serverUri
parameter_list|,
name|String
name|serverKerberosPrincipal
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|)
block|{
name|this
operator|.
name|serverUri
operator|=
name|serverUri
expr_stmt|;
name|this
operator|.
name|serverKerberosPrincipal
operator|=
name|serverKerberosPrincipal
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
operator|(
name|dbName
operator|==
literal|null
operator|)
condition|?
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
else|:
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|partitionPredicates
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|partitionValues
operator|=
name|partitionValues
expr_stmt|;
name|this
operator|.
name|tableInfoType
operator|=
name|TableInfoType
operator|.
name|OUTPUT_INFO
expr_stmt|;
block|}
comment|/**    * Gets the value of serverUri    * @return the serverUri    */
specifier|public
name|String
name|getServerUri
parameter_list|()
block|{
return|return
name|serverUri
return|;
block|}
comment|/**    * Gets the value of dbName    * @return the dbName    */
specifier|public
name|String
name|getDatabaseName
parameter_list|()
block|{
return|return
name|dbName
return|;
block|}
comment|/**    * Gets the value of tableName    * @return the tableName    */
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**    * Gets the value of partitionPredicates    * @return the partitionPredicates    */
specifier|public
name|String
name|getPartitionPredicates
parameter_list|()
block|{
return|return
name|partitionPredicates
return|;
block|}
comment|/**    * Gets the value of partitionValues    * @return the partitionValues    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionValues
parameter_list|()
block|{
return|return
name|partitionValues
return|;
block|}
comment|/**    * Gets the value of job info    * @return the job info    */
specifier|public
name|JobInfo
name|getJobInfo
parameter_list|()
block|{
return|return
name|jobInfo
return|;
block|}
comment|/**    * Sets the value of jobInfo    * @param jobInfo the jobInfo to set    */
specifier|public
name|void
name|setJobInfo
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|)
block|{
name|this
operator|.
name|jobInfo
operator|=
name|jobInfo
expr_stmt|;
block|}
specifier|public
name|TableInfoType
name|getTableType
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableInfoType
return|;
block|}
comment|/**    * Sets the value of partitionValues    * @param partitionValues the partition values to set    */
name|void
name|setPartitionValues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|)
block|{
name|this
operator|.
name|partitionValues
operator|=
name|partitionValues
expr_stmt|;
block|}
comment|/**    * Gets the value of partition filter    * @return the filter string    */
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
comment|/**    * @return the serverKerberosPrincipal    */
specifier|public
name|String
name|getServerKerberosPrincipal
parameter_list|()
block|{
return|return
name|serverKerberosPrincipal
return|;
block|}
comment|/**    * Returns whether or not Dynamic Partitioning is used    * @return whether or not dynamic partitioning is currently enabled and used    */
specifier|public
name|boolean
name|isDynamicPartitioningUsed
parameter_list|()
block|{
return|return
operator|!
operator|(
operator|(
name|dynamicPartitioningKeys
operator|==
literal|null
operator|)
operator|||
operator|(
name|dynamicPartitioningKeys
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
return|;
block|}
comment|/**    * Sets the list of dynamic partitioning keys used for outputting without specifying all the keys    * @param dynamicPartitioningKeys    */
specifier|public
name|void
name|setDynamicPartitioningKeys
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dynamicPartitioningKeys
parameter_list|)
block|{
name|this
operator|.
name|dynamicPartitioningKeys
operator|=
name|dynamicPartitioningKeys
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDynamicPartitioningKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|dynamicPartitioningKeys
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
literal|17
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|serverUri
operator|==
literal|null
condition|?
literal|0
else|:
name|serverUri
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|serverKerberosPrincipal
operator|==
literal|null
condition|?
literal|0
else|:
name|serverKerberosPrincipal
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|dbName
operator|==
literal|null
condition|?
literal|0
else|:
name|dbName
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|tableName
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|filter
operator|==
literal|null
condition|?
literal|0
else|:
name|filter
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|partitionPredicates
operator|==
literal|null
condition|?
literal|0
else|:
name|partitionPredicates
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|tableInfoType
operator|.
name|ordinal
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|partitionValues
operator|==
literal|null
condition|?
literal|0
else|:
name|partitionValues
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|dynamicPartitioningKeys
operator|==
literal|null
condition|?
literal|0
else|:
name|dynamicPartitioningKeys
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

