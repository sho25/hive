begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|DefaultHCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|LazyHCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** The HCat wrapper for the underlying RecordReader,  * this ensures that the initialize on  * the underlying record reader is done with the underlying split,  * not with HCatSplit.  */
end_comment

begin_class
class|class
name|HCatRecordReader
extends|extends
name|RecordReader
argument_list|<
name|WritableComparable
argument_list|,
name|HCatRecord
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HCatRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|WritableComparable
name|currentKey
decl_stmt|;
name|Writable
name|currentValue
decl_stmt|;
comment|/** The underlying record reader to delegate to. */
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|baseRecordReader
decl_stmt|;
comment|/** The storage handler used */
specifier|private
specifier|final
name|HCatStorageHandler
name|storageHandler
decl_stmt|;
specifier|private
name|SerDe
name|serde
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valuesNotInDataCols
decl_stmt|;
specifier|private
name|HCatSchema
name|outputSchema
init|=
literal|null
decl_stmt|;
specifier|private
name|HCatSchema
name|dataSchema
init|=
literal|null
decl_stmt|;
comment|/**      * Instantiates a new hcat record reader.      */
specifier|public
name|HCatRecordReader
parameter_list|(
name|HCatStorageHandler
name|storageHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valuesNotInDataCols
parameter_list|)
block|{
name|this
operator|.
name|storageHandler
operator|=
name|storageHandler
expr_stmt|;
name|this
operator|.
name|valuesNotInDataCols
operator|=
name|valuesNotInDataCols
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#initialize(      * org.apache.hadoop.mapreduce.InputSplit,      * org.apache.hadoop.mapreduce.TaskAttemptContext)      */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HCatSplit
name|hcatSplit
init|=
name|InternalUtil
operator|.
name|castToHCatSplit
argument_list|(
name|split
argument_list|)
decl_stmt|;
name|baseRecordReader
operator|=
name|createBaseRecordReader
argument_list|(
name|hcatSplit
argument_list|,
name|storageHandler
argument_list|,
name|taskContext
argument_list|)
expr_stmt|;
name|serde
operator|=
name|createSerDe
argument_list|(
name|hcatSplit
argument_list|,
name|storageHandler
argument_list|,
name|taskContext
argument_list|)
expr_stmt|;
comment|// Pull the output schema out of the TaskAttemptContext
name|outputSchema
operator|=
operator|(
name|HCatSchema
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|taskContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_SCHEMA
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputSchema
operator|==
literal|null
condition|)
block|{
name|outputSchema
operator|=
name|hcatSplit
operator|.
name|getTableSchema
argument_list|()
expr_stmt|;
block|}
comment|// Pull the table schema out of the Split info
comment|// TODO This should be passed in the TaskAttemptContext instead
name|dataSchema
operator|=
name|hcatSplit
operator|.
name|getDataSchema
argument_list|()
expr_stmt|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
name|createBaseRecordReader
parameter_list|(
name|HCatSplit
name|hcatSplit
parameter_list|,
name|HCatStorageHandler
name|storageHandler
parameter_list|,
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
name|HCatUtil
operator|.
name|getJobConfFromContext
argument_list|(
name|taskContext
argument_list|)
decl_stmt|;
name|HCatUtil
operator|.
name|copyJobPropertiesToJobConf
argument_list|(
name|hcatSplit
operator|.
name|getPartitionInfo
argument_list|()
operator|.
name|getJobProperties
argument_list|()
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
name|inputFormat
init|=
name|HCatInputFormat
operator|.
name|getMapRedInputFormat
argument_list|(
name|jobConf
argument_list|,
name|storageHandler
operator|.
name|getInputFormatClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|hcatSplit
operator|.
name|getBaseSplit
argument_list|()
argument_list|,
name|jobConf
argument_list|,
name|InternalUtil
operator|.
name|createReporter
argument_list|(
name|taskContext
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|SerDe
name|createSerDe
parameter_list|(
name|HCatSplit
name|hcatSplit
parameter_list|,
name|HCatStorageHandler
name|storageHandler
parameter_list|,
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|SerDe
name|serde
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|storageHandler
operator|.
name|getSerDeClass
argument_list|()
argument_list|,
name|taskContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|InternalUtil
operator|.
name|initializeInputSerDe
argument_list|(
name|serde
argument_list|,
name|storageHandler
operator|.
name|getConf
argument_list|()
argument_list|,
name|hcatSplit
operator|.
name|getPartitionInfo
argument_list|()
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|hcatSplit
operator|.
name|getPartitionInfo
argument_list|()
operator|.
name|getPartitionSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed initializing SerDe "
operator|+
name|storageHandler
operator|.
name|getSerDeClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|serde
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#getCurrentKey()      */
annotation|@
name|Override
specifier|public
name|WritableComparable
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|currentKey
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#getCurrentValue()      */
annotation|@
name|Override
specifier|public
name|HCatRecord
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HCatRecord
name|r
decl_stmt|;
try|try
block|{
name|r
operator|=
operator|new
name|LazyHCatRecord
argument_list|(
name|serde
operator|.
name|deserialize
argument_list|(
name|currentValue
argument_list|)
argument_list|,
name|serde
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultHCatRecord
name|dr
init|=
operator|new
name|DefaultHCatRecord
argument_list|(
name|outputSchema
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|outputSchema
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|Integer
name|dataPosn
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|dataPosn
operator|=
name|dataSchema
operator|.
name|getPosition
argument_list|(
name|fieldName
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|dr
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|r
operator|.
name|get
argument_list|(
name|fieldName
argument_list|,
name|dataSchema
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dr
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|valuesNotInDataCols
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
name|dr
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create HCatRecord "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#getProgress()      */
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
try|try
block|{
return|return
name|baseRecordReader
operator|.
name|getProgress
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in HCatRecord reader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|0.0f
return|;
comment|// errored
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#nextKeyValue()      */
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|currentKey
operator|==
literal|null
condition|)
block|{
name|currentKey
operator|=
name|baseRecordReader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|currentValue
operator|=
name|baseRecordReader
operator|.
name|createValue
argument_list|()
expr_stmt|;
block|}
return|return
name|baseRecordReader
operator|.
name|next
argument_list|(
name|currentKey
argument_list|,
name|currentValue
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#close()      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|baseRecordReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

