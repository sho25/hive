begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|listener
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
operator|.
name|HMSHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|ListenerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|LoadPartitionDoneEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link org.apache.hadoop.hive.metastore.MetaStoreEventListener}  * It sends message on two type of topics. One has name of form dbName.tblName  * On this topic, two kind of messages are sent: add/drop partition and   * finalize_partition message.  * Second topic has name "HCAT" and messages sent on it are: add/drop database  * and add/drop table.  * All messages also has a property named "HCAT_EVENT" set on them whose value  * can be used to configure message selector on subscriber side.    */
end_comment

begin_class
specifier|public
class|class
name|NotificationListener
extends|extends
name|MetaStoreEventListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NotificationListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Session
name|session
decl_stmt|;
specifier|protected
name|Connection
name|conn
decl_stmt|;
comment|/** 	 * Create message bus connection and session in constructor. 	 */
specifier|public
name|NotificationListener
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createConnection
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getTopicName
parameter_list|(
name|Partition
name|partition
parameter_list|,
name|ListenerEvent
name|partitionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|partitionEvent
operator|.
name|getHandler
argument_list|()
operator|.
name|get_table
argument_list|(
name|partition
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partition
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAddPartition
parameter_list|(
name|AddPartitionEvent
name|partitionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification of newly add partition in a
comment|// particular table by listening on a topic named "dbName.tableName"
comment|// and message selector string as "HCAT_EVENT = HCAT_ADD_PARTITION"
if|if
condition|(
name|partitionEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|Partition
name|partition
init|=
name|partitionEvent
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|String
name|topicName
init|=
name|getTopicName
argument_list|(
name|partition
argument_list|,
name|partitionEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|topicName
operator|!=
literal|null
operator|&&
operator|!
name|topicName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|send
argument_list|(
name|partition
argument_list|,
name|topicName
argument_list|,
name|HCatConstants
operator|.
name|HCAT_ADD_PARTITION_EVENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Topic name not found in metastore. Suppressing HCatalog notification for "
operator|+
name|partition
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|partition
operator|.
name|getTableName
argument_list|()
operator|+
literal|" To enable notifications for this table, please do alter table set properties ("
operator|+
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
operator|+
literal|"=<dbname>.<tablename>) or whatever you want topic name to be."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropPartition
parameter_list|(
name|DropPartitionEvent
name|partitionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification of dropped partition in a
comment|// particular table by listening on a topic named "dbName.tableName"
comment|// and message  selector string as "HCAT_EVENT = HCAT_DROP_PARTITION"
comment|// Datanucleus throws NPE when we try to serialize a partition object
comment|// retrieved from metastore. To workaround that we reset following objects
if|if
condition|(
name|partitionEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|Partition
name|partition
init|=
name|partitionEvent
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
name|partition
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|topicName
init|=
name|getTopicName
argument_list|(
name|partition
argument_list|,
name|partitionEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|topicName
operator|!=
literal|null
operator|&&
operator|!
name|topicName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|send
argument_list|(
name|partition
argument_list|,
name|topicName
argument_list|,
name|HCatConstants
operator|.
name|HCAT_DROP_PARTITION_EVENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Topic name not found in metastore. Suppressing HCatalog notification for "
operator|+
name|partition
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|partition
operator|.
name|getTableName
argument_list|()
operator|+
literal|" To enable notifications for this table, please do alter table set properties ("
operator|+
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
operator|+
literal|"=<dbname>.<tablename>) or whatever you want topic name to be."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateDatabase
parameter_list|(
name|CreateDatabaseEvent
name|dbEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification about addition of a database in HCAT
comment|// by listening on a topic named "HCAT" and message selector string
comment|// as "HCAT_EVENT = HCAT_ADD_DATABASE"
if|if
condition|(
name|dbEvent
operator|.
name|getStatus
argument_list|()
condition|)
name|send
argument_list|(
name|dbEvent
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|getTopicPrefix
argument_list|(
name|dbEvent
operator|.
name|getHandler
argument_list|()
operator|.
name|getHiveConf
argument_list|()
argument_list|)
argument_list|,
name|HCatConstants
operator|.
name|HCAT_ADD_DATABASE_EVENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropDatabase
parameter_list|(
name|DropDatabaseEvent
name|dbEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification about drop of a database in HCAT
comment|// by listening on a topic named "HCAT" and message selector string
comment|// as "HCAT_EVENT = HCAT_DROP_DATABASE"
if|if
condition|(
name|dbEvent
operator|.
name|getStatus
argument_list|()
condition|)
name|send
argument_list|(
name|dbEvent
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|getTopicPrefix
argument_list|(
name|dbEvent
operator|.
name|getHandler
argument_list|()
operator|.
name|getHiveConf
argument_list|()
argument_list|)
argument_list|,
name|HCatConstants
operator|.
name|HCAT_DROP_DATABASE_EVENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateTable
parameter_list|(
name|CreateTableEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification about addition of  a table in HCAT
comment|// by listening on a topic named "HCAT" and message selector string
comment|// as "HCAT_EVENT = HCAT_ADD_TABLE"
if|if
condition|(
name|tableEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|Table
name|tbl
init|=
name|tableEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|HMSHandler
name|handler
init|=
name|tableEvent
operator|.
name|getHandler
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
name|handler
operator|.
name|getHiveConf
argument_list|()
decl_stmt|;
name|Table
name|newTbl
decl_stmt|;
try|try
block|{
name|newTbl
operator|=
name|handler
operator|.
name|get_table
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
name|newTbl
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
argument_list|,
name|getTopicPrefix
argument_list|(
name|conf
argument_list|)
operator|+
literal|"."
operator|+
name|newTbl
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"."
operator|+
name|newTbl
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|alter_table
argument_list|(
name|newTbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
name|send
argument_list|(
name|newTbl
argument_list|,
name|getTopicPrefix
argument_list|(
name|conf
argument_list|)
operator|+
literal|"."
operator|+
name|newTbl
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|HCatConstants
operator|.
name|HCAT_ADD_TABLE_EVENT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getTopicPrefix
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_PREFIX
argument_list|,
name|HCatConstants
operator|.
name|HCAT_DEFAULT_TOPIC_PREFIX
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropTable
parameter_list|(
name|DropTableEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Subscriber can get notification about drop of a  table in HCAT
comment|// by listening on a topic named "HCAT" and message selector string
comment|// as "HCAT_EVENT = HCAT_DROP_TABLE"
comment|// Datanucleus throws NPE when we try to serialize a table object
comment|// retrieved from metastore. To workaround that we reset following objects
if|if
condition|(
name|tableEvent
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|Table
name|table
init|=
name|tableEvent
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
name|table
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|table
argument_list|,
name|getTopicPrefix
argument_list|(
name|tableEvent
operator|.
name|getHandler
argument_list|()
operator|.
name|getHiveConf
argument_list|()
argument_list|)
operator|+
literal|"."
operator|+
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|HCatConstants
operator|.
name|HCAT_DROP_TABLE_EVENT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * @param msgBody is the metastore object. It is sent in full such that 	 * if subscriber is really interested in details, it can reconstruct it fully. 	 * In case of finalize_partition message this will be string specification of  	 * the partition. 	 * @param topicName is the name on message broker on which message is sent. 	 * @param event is the value of HCAT_EVENT property in message. It can be  	 * used to select messages in client side.  	 */
specifier|protected
name|void
name|send
parameter_list|(
name|Object
name|msgBody
parameter_list|,
name|String
name|topicName
parameter_list|,
name|String
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|session
condition|)
block|{
comment|// this will happen, if we never able to establish a connection.
name|createConnection
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|session
condition|)
block|{
comment|// Still not successful, return from here.
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid session. Failed to send message on topic: "
operator|+
name|topicName
operator|+
literal|" event: "
operator|+
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Destination
name|topic
init|=
literal|null
decl_stmt|;
name|topic
operator|=
name|getTopic
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|topic
condition|)
block|{
comment|// Still not successful, return from here.
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid session. Failed to send message on topic: "
operator|+
name|topicName
operator|+
literal|" event: "
operator|+
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|Message
name|msg
decl_stmt|;
if|if
condition|(
name|msgBody
operator|instanceof
name|Map
condition|)
block|{
name|MapMessage
name|mapMsg
init|=
name|session
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|incomingMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|msgBody
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partCol
range|:
name|incomingMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mapMsg
operator|.
name|setString
argument_list|(
name|partCol
operator|.
name|getKey
argument_list|()
argument_list|,
name|partCol
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msg
operator|=
name|mapMsg
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|msgBody
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|setStringProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_EVENT
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// Message must be transacted before we return.
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Gobble up the exception. Message delivery is best effort.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to send message on topic: "
operator|+
name|topicName
operator|+
literal|" event: "
operator|+
name|event
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the topic object for the topicName, it also tries to reconnect      * if the connection appears to be broken.      * @param topicName      * @return      * @throws JMSException      */
specifier|protected
name|Topic
name|getTopic
parameter_list|(
specifier|final
name|String
name|topicName
parameter_list|)
throws|throws
name|JMSException
block|{
name|Topic
name|topic
decl_stmt|;
try|try
block|{
comment|// Topics are created on demand. If it doesn't exist on broker it will
comment|// be created when broker receives this message.
name|topic
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// this will happen if we were able to establish connection once, but its no longer valid,
comment|// ise is thrown, catch it and retry.
name|LOG
operator|.
name|error
argument_list|(
literal|"Seems like connection is lost. Retrying"
argument_list|,
name|ise
argument_list|)
expr_stmt|;
name|createConnection
argument_list|()
expr_stmt|;
name|topic
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
block|}
return|return
name|topic
return|;
block|}
specifier|protected
name|void
name|createConnection
parameter_list|()
block|{
name|Context
name|jndiCntxt
decl_stmt|;
try|try
block|{
name|jndiCntxt
operator|=
operator|new
name|InitialContext
argument_list|()
expr_stmt|;
name|ConnectionFactory
name|connFac
init|=
operator|(
name|ConnectionFactory
operator|)
name|jndiCntxt
operator|.
name|lookup
argument_list|(
literal|"ConnectionFactory"
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|connFac
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|ExceptionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|jmse
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|jmse
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// We want message to be sent when session commits, thus we run in
comment|// transacted mode.
name|session
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JNDI error while setting up Message Bus connection. "
operator|+
literal|"Please make sure file named 'jndi.properties' is in "
operator|+
literal|"classpath and contains appropriate key-value pairs."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to initialize connection to message bus"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to connect to JMS provider"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Close the connection before dying.
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|session
condition|)
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to close message bus connection."
argument_list|,
name|ignore
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onLoadPartitionDone
parameter_list|(
name|LoadPartitionDoneEvent
name|lpde
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|lpde
operator|.
name|getStatus
argument_list|()
condition|)
name|send
argument_list|(
name|lpde
operator|.
name|getPartitionName
argument_list|()
argument_list|,
name|lpde
operator|.
name|getTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_MSGBUS_TOPIC_NAME
argument_list|)
argument_list|,
name|HCatConstants
operator|.
name|HCAT_PARTITION_DONE_EVENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterPartition
parameter_list|(
name|AlterPartitionEvent
name|ape
parameter_list|)
throws|throws
name|MetaException
block|{
comment|//no-op
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterTable
parameter_list|(
name|AlterTableEvent
name|ate
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// no-op
block|}
block|}
end_class

end_unit

