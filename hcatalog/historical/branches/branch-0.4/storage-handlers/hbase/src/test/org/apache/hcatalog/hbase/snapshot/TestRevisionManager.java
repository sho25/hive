begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|SkeletonHBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|transaction
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestRevisionManager
extends|extends
name|SkeletonHBaseTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testBasicZNodeCreation
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|int
name|port
init|=
name|getHbaseConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
literal|2181
argument_list|)
decl_stmt|;
name|String
name|servers
init|=
name|getHbaseConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|)
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|servers
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|ZKUtil
name|zkutil
init|=
operator|new
name|ZKUtil
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/rm_base"
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"testTable"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cf001"
argument_list|,
literal|"cf002"
argument_list|,
literal|"cf003"
argument_list|)
decl_stmt|;
name|zkutil
operator|.
name|createRootZNodes
argument_list|()
expr_stmt|;
name|ZooKeeper
name|zk
init|=
name|zkutil
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Stat
name|tempTwo
init|=
name|zk
operator|.
name|exists
argument_list|(
literal|"/rm_base"
operator|+
name|PathUtil
operator|.
name|DATA_DIR
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tempTwo
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Stat
name|tempThree
init|=
name|zk
operator|.
name|exists
argument_list|(
literal|"/rm_base"
operator|+
name|PathUtil
operator|.
name|CLOCK_NODE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tempThree
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|zkutil
operator|.
name|setUpZnodesForTable
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|)
expr_stmt|;
name|String
name|transactionDataTablePath
init|=
literal|"/rm_base"
operator|+
name|PathUtil
operator|.
name|DATA_DIR
operator|+
literal|"/"
operator|+
name|tableName
decl_stmt|;
name|Stat
name|result
init|=
name|zk
operator|.
name|exists
argument_list|(
name|transactionDataTablePath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|colFamiliy
range|:
name|columnFamilies
control|)
block|{
name|String
name|cfPath
init|=
name|transactionDataTablePath
operator|+
literal|"/"
operator|+
name|colFamiliy
decl_stmt|;
name|Stat
name|resultTwo
init|=
name|zk
operator|.
name|exists
argument_list|(
name|cfPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resultTwo
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitTransaction
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|port
init|=
name|getHbaseConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
literal|2181
argument_list|)
decl_stmt|;
name|String
name|servers
init|=
name|getHbaseConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|)
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|servers
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|RevisionManagerConfiguration
operator|.
name|create
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RMConstants
operator|.
name|ZOOKEEPER_DATADIR
argument_list|,
literal|"/rm_base"
argument_list|)
expr_stmt|;
name|ZKBasedRevisionManager
name|manager
init|=
operator|new
name|ZKBasedRevisionManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|manager
operator|.
name|open
argument_list|()
expr_stmt|;
name|ZKUtil
name|zkutil
init|=
operator|new
name|ZKUtil
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/rm_base"
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"testTable"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cf1"
argument_list|,
literal|"cf2"
argument_list|,
literal|"cf3"
argument_list|)
decl_stmt|;
name|Transaction
name|txn
init|=
name|manager
operator|.
name|beginWriteTransaction
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cfs
init|=
name|zkutil
operator|.
name|getColumnFamiliesOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cfs
operator|.
name|size
argument_list|()
operator|==
name|columnFamilies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|cf
range|:
name|cfs
control|)
block|{
name|assertTrue
argument_list|(
name|columnFamilies
operator|.
name|contains
argument_list|(
name|cf
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|colFamily
range|:
name|columnFamilies
control|)
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
literal|"/rm_base"
argument_list|,
name|tableName
argument_list|,
name|colFamily
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zkutil
operator|.
name|getRawData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StoreFamilyRevisionList
name|list
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|deserialize
argument_list|(
name|list
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|getRevisionListSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|StoreFamilyRevision
name|lightTxn
init|=
name|list
operator|.
name|getRevisionList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lightTxn
operator|.
name|timestamp
argument_list|,
name|txn
operator|.
name|getTransactionExpireTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lightTxn
operator|.
name|revision
argument_list|,
name|txn
operator|.
name|getRevisionNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|commitWriteTransaction
argument_list|(
name|txn
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|colFamiliy
range|:
name|columnFamilies
control|)
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
literal|"/rm_base"
argument_list|,
name|tableName
argument_list|,
name|colFamiliy
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zkutil
operator|.
name|getRawData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StoreFamilyRevisionList
name|list
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|deserialize
argument_list|(
name|list
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|getRevisionListSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbortTransaction
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|port
init|=
name|getHbaseConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
literal|2181
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|getHbaseConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|RevisionManagerConfiguration
operator|.
name|create
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RMConstants
operator|.
name|ZOOKEEPER_DATADIR
argument_list|,
literal|"/rm_base"
argument_list|)
expr_stmt|;
name|ZKBasedRevisionManager
name|manager
init|=
operator|new
name|ZKBasedRevisionManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|manager
operator|.
name|open
argument_list|()
expr_stmt|;
name|ZKUtil
name|zkutil
init|=
operator|new
name|ZKUtil
argument_list|(
name|host
operator|+
literal|':'
operator|+
name|port
argument_list|,
literal|"/rm_base"
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"testTable"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cf1"
argument_list|,
literal|"cf2"
argument_list|,
literal|"cf3"
argument_list|)
decl_stmt|;
name|Transaction
name|txn
init|=
name|manager
operator|.
name|beginWriteTransaction
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cfs
init|=
name|zkutil
operator|.
name|getColumnFamiliesOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cfs
operator|.
name|size
argument_list|()
operator|==
name|columnFamilies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|cf
range|:
name|cfs
control|)
block|{
name|assertTrue
argument_list|(
name|columnFamilies
operator|.
name|contains
argument_list|(
name|cf
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|colFamiliy
range|:
name|columnFamilies
control|)
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
literal|"/rm_base"
argument_list|,
name|tableName
argument_list|,
name|colFamiliy
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zkutil
operator|.
name|getRawData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StoreFamilyRevisionList
name|list
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|deserialize
argument_list|(
name|list
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|getRevisionListSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|StoreFamilyRevision
name|lightTxn
init|=
name|list
operator|.
name|getRevisionList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lightTxn
operator|.
name|timestamp
argument_list|,
name|txn
operator|.
name|getTransactionExpireTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lightTxn
operator|.
name|revision
argument_list|,
name|txn
operator|.
name|getRevisionNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|abortWriteTransaction
argument_list|(
name|txn
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|colFamiliy
range|:
name|columnFamilies
control|)
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
literal|"/rm_base"
argument_list|,
name|tableName
argument_list|,
name|colFamiliy
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zkutil
operator|.
name|getRawData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StoreFamilyRevisionList
name|list
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|deserialize
argument_list|(
name|list
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|getRevisionListSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|colFamiliy
range|:
name|columnFamilies
control|)
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getAbortInformationPath
argument_list|(
literal|"/rm_base"
argument_list|,
name|tableName
argument_list|,
name|colFamiliy
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zkutil
operator|.
name|getRawData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StoreFamilyRevisionList
name|list
init|=
operator|new
name|StoreFamilyRevisionList
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|deserialize
argument_list|(
name|list
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|getRevisionListSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|StoreFamilyRevision
name|abortedTxn
init|=
name|list
operator|.
name|getRevisionList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|abortedTxn
operator|.
name|getRevision
argument_list|()
argument_list|,
name|txn
operator|.
name|getRevisionNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeepAliveTransaction
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|int
name|port
init|=
name|getHbaseConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
literal|2181
argument_list|)
decl_stmt|;
name|String
name|servers
init|=
name|getHbaseConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|)
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|servers
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|RevisionManagerConfiguration
operator|.
name|create
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RMConstants
operator|.
name|ZOOKEEPER_DATADIR
argument_list|,
literal|"/rm_base"
argument_list|)
expr_stmt|;
name|ZKBasedRevisionManager
name|manager
init|=
operator|new
name|ZKBasedRevisionManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|manager
operator|.
name|open
argument_list|()
expr_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"testTable"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cf1"
argument_list|,
literal|"cf2"
argument_list|)
decl_stmt|;
name|Transaction
name|txn
init|=
name|manager
operator|.
name|beginWriteTransaction
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|,
literal|40
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|commitWriteTransaction
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"The transaction to be removed not found in the data."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|port
init|=
name|getHbaseConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
literal|2181
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|getHbaseConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|RevisionManagerConfiguration
operator|.
name|create
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RMConstants
operator|.
name|ZOOKEEPER_DATADIR
argument_list|,
literal|"/rm_base"
argument_list|)
expr_stmt|;
name|ZKBasedRevisionManager
name|manager
init|=
operator|new
name|ZKBasedRevisionManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|manager
operator|.
name|open
argument_list|()
expr_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"testTable"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cfOne
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cf1"
argument_list|,
literal|"cf2"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cfTwo
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cf2"
argument_list|,
literal|"cf3"
argument_list|)
decl_stmt|;
name|Transaction
name|tsx1
init|=
name|manager
operator|.
name|beginWriteTransaction
argument_list|(
name|tableName
argument_list|,
name|cfOne
argument_list|)
decl_stmt|;
name|Transaction
name|tsx2
init|=
name|manager
operator|.
name|beginWriteTransaction
argument_list|(
name|tableName
argument_list|,
name|cfTwo
argument_list|)
decl_stmt|;
name|TableSnapshot
name|snapshotOne
init|=
name|manager
operator|.
name|createSnapshot
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|snapshotOne
operator|.
name|getRevision
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotOne
operator|.
name|getRevision
argument_list|(
literal|"cf2"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotOne
operator|.
name|getRevision
argument_list|(
literal|"cf3"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cfThree
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cf1"
argument_list|,
literal|"cf3"
argument_list|)
decl_stmt|;
name|Transaction
name|tsx3
init|=
name|manager
operator|.
name|beginWriteTransaction
argument_list|(
name|tableName
argument_list|,
name|cfThree
argument_list|)
decl_stmt|;
name|manager
operator|.
name|commitWriteTransaction
argument_list|(
name|tsx1
argument_list|)
expr_stmt|;
name|TableSnapshot
name|snapshotTwo
init|=
name|manager
operator|.
name|createSnapshot
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|snapshotTwo
operator|.
name|getRevision
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotTwo
operator|.
name|getRevision
argument_list|(
literal|"cf2"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotTwo
operator|.
name|getRevision
argument_list|(
literal|"cf3"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|manager
operator|.
name|commitWriteTransaction
argument_list|(
name|tsx2
argument_list|)
expr_stmt|;
name|TableSnapshot
name|snapshotThree
init|=
name|manager
operator|.
name|createSnapshot
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|snapshotThree
operator|.
name|getRevision
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotThree
operator|.
name|getRevision
argument_list|(
literal|"cf2"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotThree
operator|.
name|getRevision
argument_list|(
literal|"cf3"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|manager
operator|.
name|commitWriteTransaction
argument_list|(
name|tsx3
argument_list|)
expr_stmt|;
name|TableSnapshot
name|snapshotFour
init|=
name|manager
operator|.
name|createSnapshot
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|snapshotFour
operator|.
name|getRevision
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotFour
operator|.
name|getRevision
argument_list|(
literal|"cf2"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotFour
operator|.
name|getRevision
argument_list|(
literal|"cf3"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

