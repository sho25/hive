begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Represents an ephemeral znode name which has an ordered sequence number  * and can be sorted in order  *  This class has been used as-is from the zookeeper 3.4.0 recipes with a  *  change in package name.  */
end_comment

begin_class
specifier|public
class|class
name|ZNodeName
implements|implements
name|Comparable
argument_list|<
name|ZNodeName
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|private
name|int
name|sequence
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZNodeName
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ZNodeName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"id cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|name
expr_stmt|;
name|int
name|idx
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|prefix
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|sequence
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// If an exception occurred we misdetected a sequence suffix,
comment|// so return -1.
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Number format exception for "
operator|+
name|idx
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Array out of bounds for "
operator|+
name|idx
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ZNodeName
name|sequence
init|=
operator|(
name|ZNodeName
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|sequence
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
operator|+
literal|37
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ZNodeName
name|that
parameter_list|)
block|{
name|int
name|answer
init|=
name|this
operator|.
name|prefix
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|0
condition|)
block|{
name|int
name|s1
init|=
name|this
operator|.
name|sequence
decl_stmt|;
name|int
name|s2
init|=
name|that
operator|.
name|sequence
decl_stmt|;
if|if
condition|(
name|s1
operator|==
operator|-
literal|1
operator|&&
name|s2
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|this
operator|.
name|name
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|name
argument_list|)
return|;
block|}
name|answer
operator|=
name|s1
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|s2
operator|==
operator|-
literal|1
condition|?
operator|-
literal|1
else|:
name|s1
operator|-
name|s2
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Returns the name of the znode      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Returns the sequence number      */
specifier|public
name|int
name|getZNodeName
parameter_list|()
block|{
return|return
name|sequence
return|;
block|}
comment|/**      * Returns the text prefix before the sequence number      */
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
block|}
end_class

end_unit

