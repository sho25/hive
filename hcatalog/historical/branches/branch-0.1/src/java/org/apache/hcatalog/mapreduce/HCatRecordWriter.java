begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_class
specifier|public
class|class
name|HCatRecordWriter
extends|extends
name|RecordWriter
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|HCatRecord
argument_list|>
block|{
specifier|private
specifier|final
name|HCatOutputStorageDriver
name|storageDriver
decl_stmt|;
comment|/**      * @return the storageDriver      */
specifier|public
name|HCatOutputStorageDriver
name|getStorageDriver
parameter_list|()
block|{
return|return
name|storageDriver
return|;
block|}
specifier|private
specifier|final
name|RecordWriter
argument_list|<
name|?
super|super
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
super|super
name|Writable
argument_list|>
name|baseWriter
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|partColsToDel
decl_stmt|;
specifier|public
name|HCatRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|OutputJobInfo
name|jobInfo
init|=
name|HCatOutputFormat
operator|.
name|getJobInfo
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|// If partition columns occur in data, we want to remove them.
name|partColsToDel
operator|=
name|jobInfo
operator|.
name|getPosOfPartCols
argument_list|()
expr_stmt|;
if|if
condition|(
name|partColsToDel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"It seems that setSchema() is not called on "
operator|+
literal|"HowlOutputFormat. Please make sure that method is called."
argument_list|)
throw|;
block|}
name|this
operator|.
name|storageDriver
operator|=
name|HCatOutputFormat
operator|.
name|getOutputDriverInstance
argument_list|(
name|context
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseWriter
operator|=
name|storageDriver
operator|.
name|getOutputFormat
argument_list|()
operator|.
name|getRecordWriter
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|baseWriter
operator|.
name|close
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|key
parameter_list|,
name|HCatRecord
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|Integer
name|colToDel
range|:
name|partColsToDel
control|)
block|{
name|value
operator|.
name|remove
argument_list|(
name|colToDel
argument_list|)
expr_stmt|;
block|}
comment|//The key given by user is ignored
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|generatedKey
init|=
name|storageDriver
operator|.
name|generateKey
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Writable
name|convertedValue
init|=
name|storageDriver
operator|.
name|convertValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|baseWriter
operator|.
name|write
argument_list|(
name|generatedKey
argument_list|,
name|convertedValue
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

