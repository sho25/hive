begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
operator|.
name|drivers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|LoadCaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|LoadFunc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ResourceSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ResourceSchema
operator|.
name|ResourceFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|builtin
operator|.
name|PigStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|DataByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_comment
comment|/**  * based on {@link PigStorage}  */
end_comment

begin_class
specifier|public
class|class
name|LoadFuncBasedInputFormat
extends|extends
name|InputFormat
argument_list|<
name|BytesWritable
argument_list|,
name|Tuple
argument_list|>
block|{
specifier|private
specifier|final
name|LoadFunc
name|loadFunc
decl_stmt|;
specifier|private
specifier|static
name|ResourceFieldSchema
index|[]
name|fields
decl_stmt|;
specifier|public
name|LoadFuncBasedInputFormat
parameter_list|(
name|LoadFunc
name|loadFunc
parameter_list|,
name|ResourceSchema
name|dataSchema
parameter_list|)
block|{
name|this
operator|.
name|loadFunc
operator|=
name|loadFunc
expr_stmt|;
name|fields
operator|=
name|dataSchema
operator|.
name|getFields
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|BytesWritable
argument_list|,
name|Tuple
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|RecordReader
argument_list|<
name|BytesWritable
argument_list|,
name|Tuple
argument_list|>
name|reader
init|=
name|loadFunc
operator|.
name|getInputFormat
argument_list|()
operator|.
name|createRecordReader
argument_list|(
name|split
argument_list|,
name|taskContext
argument_list|)
decl_stmt|;
return|return
operator|new
name|LoadFuncBasedRecordReader
argument_list|(
name|reader
argument_list|,
name|loadFunc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|InputFormat
argument_list|<
name|BytesWritable
argument_list|,
name|Tuple
argument_list|>
name|inpFormat
init|=
name|loadFunc
operator|.
name|getInputFormat
argument_list|()
decl_stmt|;
return|return
name|inpFormat
operator|.
name|getSplits
argument_list|(
name|jobContext
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
class|class
name|LoadFuncBasedRecordReader
extends|extends
name|RecordReader
argument_list|<
name|BytesWritable
argument_list|,
name|Tuple
argument_list|>
block|{
specifier|private
name|Tuple
name|tupleFromDisk
decl_stmt|;
specifier|private
specifier|final
name|RecordReader
argument_list|<
name|BytesWritable
argument_list|,
name|Tuple
argument_list|>
name|reader
decl_stmt|;
specifier|private
specifier|final
name|LoadFunc
name|loadFunc
decl_stmt|;
specifier|private
specifier|final
name|LoadCaster
name|caster
decl_stmt|;
comment|/**       * @param reader       * @param loadFunc       * @throws IOException       */
specifier|public
name|LoadFuncBasedRecordReader
parameter_list|(
name|RecordReader
argument_list|<
name|BytesWritable
argument_list|,
name|Tuple
argument_list|>
name|reader
parameter_list|,
name|LoadFunc
name|loadFunc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|loadFunc
operator|=
name|loadFunc
expr_stmt|;
name|this
operator|.
name|caster
operator|=
name|loadFunc
operator|.
name|getLoadCaster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BytesWritable
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tuple
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tupleFromDisk
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DataByteArray
name|dba
init|=
operator|(
name|DataByteArray
operator|)
name|tupleFromDisk
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|dba
operator|==
literal|null
condition|)
block|{
comment|// PigStorage will insert nulls for empty fields.
name|tupleFromDisk
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DataType
operator|.
name|CHARARRAY
case|:
name|tupleFromDisk
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|caster
operator|.
name|bytesToCharArray
argument_list|(
name|dba
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataType
operator|.
name|INTEGER
case|:
name|tupleFromDisk
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|caster
operator|.
name|bytesToInteger
argument_list|(
name|dba
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataType
operator|.
name|FLOAT
case|:
name|tupleFromDisk
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|caster
operator|.
name|bytesToFloat
argument_list|(
name|dba
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataType
operator|.
name|LONG
case|:
name|tupleFromDisk
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|caster
operator|.
name|bytesToLong
argument_list|(
name|dba
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataType
operator|.
name|DOUBLE
case|:
name|tupleFromDisk
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|caster
operator|.
name|bytesToDouble
argument_list|(
name|dba
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataType
operator|.
name|MAP
case|:
name|tupleFromDisk
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|caster
operator|.
name|bytesToMap
argument_list|(
name|dba
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataType
operator|.
name|BAG
case|:
name|tupleFromDisk
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|caster
operator|.
name|bytesToBag
argument_list|(
name|dba
operator|.
name|get
argument_list|()
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataType
operator|.
name|TUPLE
case|:
name|tupleFromDisk
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|caster
operator|.
name|bytesToTuple
argument_list|(
name|dba
operator|.
name|get
argument_list|()
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown Pig type in data: "
operator|+
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|tupleFromDisk
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|reader
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|loadFunc
operator|.
name|prepareToRead
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// even if we don't need any data from disk, we will need to call
comment|// getNext() on pigStorage() so we know how many rows to emit in our
comment|// final output - getNext() will eventually return null when it has
comment|// read all disk data and we will know to stop emitting final output
name|tupleFromDisk
operator|=
name|loadFunc
operator|.
name|getNext
argument_list|()
expr_stmt|;
return|return
name|tupleFromDisk
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

