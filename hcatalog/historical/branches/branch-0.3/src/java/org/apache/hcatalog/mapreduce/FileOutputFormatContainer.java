begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|ErrorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * File-based storage (ie RCFile, Text, etc) implementation of OutputFormatContainer.  * This implementation supports the following HCatalog features: partitioning, dynamic partitioning, Hadoop Archiving, etc.  */
end_comment

begin_class
class|class
name|FileOutputFormatContainer
extends|extends
name|OutputFormatContainer
block|{
specifier|private
name|OutputFormat
argument_list|<
name|?
super|super
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
super|super
name|Writable
argument_list|>
name|of
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PathFilter
name|hiddenFileFilter
init|=
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**      * @param of base OutputFormat to contain      */
specifier|public
name|FileOutputFormatContainer
parameter_list|(
name|OutputFormat
argument_list|<
name|?
super|super
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
super|super
name|Writable
argument_list|>
name|of
parameter_list|)
block|{
name|super
argument_list|(
name|of
argument_list|)
expr_stmt|;
name|this
operator|.
name|of
operator|=
name|of
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordWriter
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|HCatRecord
argument_list|>
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// When Dynamic partitioning is used, the RecordWriter instance initialized here isn't used. Can use null.
comment|// (That's because records can't be written until the values of the dynamic partitions are deduced.
comment|// By that time, a new local instance of RecordWriter, with the correct output-path, will be constructed.)
return|return
operator|new
name|FileRecordWriterContainer
argument_list|(
name|HCatOutputFormat
operator|.
name|getJobInfo
argument_list|(
name|context
argument_list|)
operator|.
name|isDynamicPartitioningUsed
argument_list|()
condition|?
literal|null
else|:
name|of
operator|.
name|getRecordWriter
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|OutputJobInfo
name|jobInfo
init|=
name|HCatOutputFormat
operator|.
name|getJobInfo
argument_list|(
name|context
argument_list|)
decl_stmt|;
try|try
block|{
name|handleDuplicatePublish
argument_list|(
name|context
argument_list|,
name|jobInfo
argument_list|,
name|HCatOutputFormat
operator|.
name|createHiveClient
argument_list|(
name|jobInfo
operator|.
name|getServerUri
argument_list|()
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|jobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|of
operator|.
name|checkOutputSpecs
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OutputCommitter
name|getOutputCommitter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|FileOutputCommitterContainer
argument_list|(
name|context
argument_list|,
name|of
operator|.
name|getOutputCommitter
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Handles duplicate publish of partition. Fails if partition already exists.      * For non partitioned tables, fails if files are present in table directory.      * For dynamic partitioned publish, does nothing - check would need to be done at recordwriter time      * @param context the job      * @param outputInfo the output info      * @param client the metastore client      * @param table the table being written to      * @throws IOException      * @throws org.apache.hadoop.hive.metastore.api.MetaException      * @throws org.apache.thrift.TException      */
specifier|private
specifier|static
name|void
name|handleDuplicatePublish
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|OutputJobInfo
name|outputInfo
parameter_list|,
name|HiveMetaStoreClient
name|client
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|TException
block|{
comment|/*         * For fully specified ptn, follow strict checks for existence of partitions in metadata         * For unpartitioned tables, follow filechecks         * For partially specified tables:         *    This would then need filechecks at the start of a ptn write,         *    Doing metadata checks can get potentially very expensive (fat conf) if         *    there are a large number of partitions that match the partial specifications         */
if|if
condition|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|outputInfo
operator|.
name|isDynamicPartitioningUsed
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|getPartitionValueList
argument_list|(
name|table
argument_list|,
name|outputInfo
operator|.
name|getPartitionValues
argument_list|()
argument_list|)
decl_stmt|;
comment|// fully-specified partition
name|List
argument_list|<
name|String
argument_list|>
name|currentParts
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|outputInfo
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|outputInfo
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_DUPLICATE_PARTITION
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|getPartitionValueList
argument_list|(
name|table
argument_list|,
name|outputInfo
operator|.
name|getPartitionValues
argument_list|()
argument_list|)
decl_stmt|;
comment|// non-partitioned table
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tablePath
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tablePath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"*"
argument_list|)
argument_list|,
name|hiddenFileFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_NON_EMPTY_TABLE
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Convert the partition value map to a value list in the partition key order.      * @param table the table being written to      * @param valueMap the partition value map      * @return the partition value list      * @throws java.io.IOException      */
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionValueList
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valueMap
operator|.
name|size
argument_list|()
operator|!=
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_INVALID_PARTITION_VALUES
argument_list|,
literal|"Table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" has "
operator|+
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" partition keys, got "
operator|+
name|valueMap
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|schema
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|valueMap
operator|.
name|get
argument_list|(
name|schema
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_MISSING_PARTITION_KEY
argument_list|,
literal|"Key "
operator|+
name|schema
operator|.
name|getName
argument_list|()
operator|+
literal|" of table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
block|}
end_class

end_unit

