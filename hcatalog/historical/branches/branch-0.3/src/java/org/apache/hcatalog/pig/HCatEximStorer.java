begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatEximOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatEximOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ResourceSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|FrontendException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|ObjectSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|UDFContext
import|;
end_import

begin_comment
comment|/**  * HCatEximStorer.  *  */
end_comment

begin_class
specifier|public
class|class
name|HCatEximStorer
extends|extends
name|HCatBaseStorer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HCatEximStorer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|outputLocation
decl_stmt|;
specifier|public
name|HCatEximStorer
parameter_list|(
name|String
name|outputLocation
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|outputLocation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HCatEximStorer
parameter_list|(
name|String
name|outputLocation
parameter_list|,
name|String
name|partitionSpec
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|outputLocation
argument_list|,
name|partitionSpec
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HCatEximStorer
parameter_list|(
name|String
name|outputLocation
parameter_list|,
name|String
name|partitionSpec
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|partitionSpec
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputLocation
operator|=
name|outputLocation
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HCatEximStorer called"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OutputFormat
name|getOutputFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getOutputFormat called"
argument_list|)
expr_stmt|;
return|return
operator|new
name|HCatEximOutputFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStoreLocation
parameter_list|(
name|String
name|location
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"setStoreLocation called with :"
operator|+
name|location
argument_list|)
expr_stmt|;
name|String
index|[]
name|userStr
init|=
name|location
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|dbname
init|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
decl_stmt|;
name|String
name|tablename
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userStr
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|dbname
operator|=
name|userStr
index|[
literal|0
index|]
expr_stmt|;
name|tablename
operator|=
name|userStr
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|tablename
operator|=
name|userStr
index|[
literal|0
index|]
expr_stmt|;
block|}
name|Properties
name|p
init|=
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|getUDFProperties
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|sign
block|}
argument_list|)
decl_stmt|;
name|Configuration
name|config
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|HCatUtil
operator|.
name|checkJobContextIfRunningFromBackend
argument_list|(
name|job
argument_list|)
condition|)
block|{
name|Schema
name|schema
init|=
operator|(
name|Schema
operator|)
name|ObjectSerializer
operator|.
name|deserialize
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
name|PIG_SCHEMA
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|pigSchema
operator|=
name|schema
expr_stmt|;
block|}
if|if
condition|(
name|pigSchema
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
literal|"Schema for data cannot be determined."
argument_list|,
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|)
throw|;
block|}
name|HCatSchema
name|hcatTblSchema
init|=
operator|new
name|HCatSchema
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|doSchemaValidations
argument_list|(
name|pigSchema
argument_list|,
name|hcatTblSchema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
name|he
operator|.
name|getMessage
argument_list|()
argument_list|,
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|,
name|he
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|hcatFields
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|partitionKeys
control|)
block|{
name|hcatFields
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
name|key
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HCatSchema
name|outputSchema
init|=
name|convertPigSchemaToHCatSchema
argument_list|(
name|pigSchema
argument_list|,
name|hcatTblSchema
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pig Schema '"
operator|+
name|pigSchema
operator|.
name|toString
argument_list|()
operator|+
literal|"' was converted to HCatSchema '"
operator|+
name|outputSchema
argument_list|)
expr_stmt|;
name|HCatEximOutputFormat
operator|.
name|setOutput
argument_list|(
name|job
argument_list|,
name|dbname
argument_list|,
name|tablename
argument_list|,
name|outputLocation
argument_list|,
operator|new
name|HCatSchema
argument_list|(
name|hcatFields
argument_list|)
argument_list|,
name|partVals
argument_list|,
name|outputSchema
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|COMPUTED_OUTPUT_SCHEMA
argument_list|,
name|ObjectSerializer
operator|.
name|serialize
argument_list|(
name|outputSchema
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|,
name|config
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|config
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|config
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeSchema
parameter_list|(
name|ResourceSchema
name|schema
parameter_list|,
name|String
name|arg1
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|""
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"local"
argument_list|)
condition|)
block|{
comment|//In local mode, mapreduce will not call OutputCommitter.cleanupJob.
comment|//Calling it from here so that the partition publish happens.
comment|//This call needs to be removed after MAPREDUCE-1447 is fixed.
operator|new
name|HCatEximOutputCommitter
argument_list|(
name|job
argument_list|,
literal|null
argument_list|)
operator|.
name|cleanupJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

