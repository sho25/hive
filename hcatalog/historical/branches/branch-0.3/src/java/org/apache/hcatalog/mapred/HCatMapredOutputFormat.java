begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
operator|.
name|CollectionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|InitializeInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|InputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|shims
operator|.
name|HCatHadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|storagehandler
operator|.
name|HCatStorageHandlerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_class
specifier|public
class|class
name|HCatMapredOutputFormat
implements|implements
name|OutputFormat
implements|,
name|HiveOutputFormat
block|{
name|HCatOutputFormat
name|hco
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HCatMapredOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|HCatMapredOutputFormat
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HCatMapredOutputFormat init"
argument_list|)
expr_stmt|;
name|hco
operator|=
operator|new
name|HCatOutputFormat
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|arg0
parameter_list|,
name|JobConf
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HCatMapredOutputFormat checkOutputSpecs"
argument_list|)
expr_stmt|;
name|JobContext
name|context
init|=
name|HCatHadoopShims
operator|.
name|Instance
operator|.
name|get
argument_list|()
operator|.
name|createJobContext
argument_list|(
name|arg1
argument_list|,
operator|new
name|JobID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|hco
operator|.
name|checkOutputSpecs
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|HCatUtil
operator|.
name|logStackTrace
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RecordWriter
name|getRecordWriter
parameter_list|(
name|FileSystem
name|arg0
parameter_list|,
name|JobConf
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|,
name|Progressable
name|arg3
parameter_list|)
throws|throws
name|IOException
block|{
comment|// this is never really called from hive, but it's part of the IF interface
name|LOG
operator|.
name|debug
argument_list|(
literal|"HCatMapredOutputFormat getRecordWriter"
argument_list|)
expr_stmt|;
return|return
name|getRW
argument_list|(
name|arg1
argument_list|)
return|;
block|}
specifier|public
name|HCatMapredRecordWriter
name|getRW
parameter_list|(
name|Configuration
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|JobContext
name|jc
init|=
name|HCatHadoopShims
operator|.
name|Instance
operator|.
name|get
argument_list|()
operator|.
name|createJobContext
argument_list|(
name|arg1
argument_list|,
operator|new
name|JobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|taContext
init|=
name|HCatHadoopShims
operator|.
name|Instance
operator|.
name|get
argument_list|()
operator|.
name|createTaskAttemptContext
argument_list|(
name|arg1
argument_list|,
operator|new
name|TaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HCatMapredOutputFormat
operator|.
name|HCatMapredRecordWriter
argument_list|(
name|hco
argument_list|,
name|jc
argument_list|,
name|taContext
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
name|getHiveRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|Path
name|finalOutPath
parameter_list|,
name|Class
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HCatMapredOutputFormat getHiveRecordWriter"
argument_list|)
expr_stmt|;
specifier|final
name|HCatMapredRecordWriter
name|rw
init|=
name|getRW
argument_list|(
name|jc
argument_list|)
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|rw
operator|.
name|write
argument_list|(
literal|null
argument_list|,
operator|(
name|HCatRecord
operator|)
name|r
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
name|rw
operator|.
name|setAbortStatus
argument_list|(
name|abort
argument_list|)
expr_stmt|;
name|rw
operator|.
name|close
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|void
name|setTableDesc
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|setTableDesc
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setPartitionDesc
parameter_list|(
name|PartitionDesc
name|ptnDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|setTableDesc
argument_list|(
name|ptnDesc
operator|.
name|getTableDesc
argument_list|()
argument_list|,
name|jobProperties
argument_list|,
name|ptnDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setTableDesc
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ptnValues
parameter_list|)
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbAndTableName
init|=
name|HCatUtil
operator|.
name|getDbAndTableName
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|OutputJobInfo
name|outputJobInfo
init|=
name|OutputJobInfo
operator|.
name|create
argument_list|(
name|dbAndTableName
operator|.
name|first
argument_list|,
name|dbAndTableName
operator|.
name|second
argument_list|,
name|ptnValues
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO : verify with thw if this needs to be shim-ed. There exists no current Shim
comment|// for instantiating a Job, and we use it only temporarily.
name|HCatOutputFormat
operator|.
name|setOutput
argument_list|(
name|job
argument_list|,
name|outputJobInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HCatOutputFormat.setOutput() done"
argument_list|)
expr_stmt|;
comment|// Now we need to set the schema we intend to write
name|Properties
name|tprops
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|columnNameProperty
init|=
name|tprops
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
name|String
name|columnTypeProperty
init|=
name|tprops
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
comment|// all table column names
if|if
condition|(
name|columnNameProperty
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
decl_stmt|;
comment|// all column types
if|if
condition|(
name|columnTypeProperty
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnTypes
operator|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnTypes
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
expr_stmt|;
block|}
name|StructTypeInfo
name|rowTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
decl_stmt|;
name|HCatSchema
name|hsch
init|=
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
name|rowTypeInfo
argument_list|)
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStructSubSchema
argument_list|()
decl_stmt|;
comment|// getting inner schema, because it's the difference between struct<i:int,j:int> and i:int,j:int.
comment|// and that's what we need to provide to HCatOutputFormat
name|LOG
operator|.
name|debug
argument_list|(
literal|"schema "
operator|+
name|hsch
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HCatOutputFormat
operator|.
name|setSchema
argument_list|(
name|job
argument_list|,
name|hsch
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confToSave
range|:
name|HCatConstants
operator|.
name|OUTPUT_CONFS_TO_SAVE
control|)
block|{
name|String
name|confVal
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|confToSave
argument_list|)
decl_stmt|;
if|if
condition|(
name|confVal
operator|!=
literal|null
condition|)
block|{
name|jobProperties
operator|.
name|put
argument_list|(
name|confToSave
argument_list|,
name|confVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|HCatMapredRecordWriter
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|HCatRecord
argument_list|>
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
name|writer
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
name|outputCommitter
decl_stmt|;
name|TaskAttemptContext
name|taContext
decl_stmt|;
name|JobContext
name|jc
decl_stmt|;
name|boolean
name|jobIsSetup
init|=
literal|false
decl_stmt|;
name|boolean
name|wroteData
init|=
literal|false
decl_stmt|;
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
specifier|public
name|HCatMapredRecordWriter
parameter_list|(
name|HCatOutputFormat
name|hco
parameter_list|,
name|JobContext
name|jc
parameter_list|,
name|TaskAttemptContext
name|taContext
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|taContext
operator|=
name|taContext
expr_stmt|;
try|try
block|{
name|this
operator|.
name|outputCommitter
operator|=
name|hco
operator|.
name|getOutputCommitter
argument_list|(
name|taContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|hco
operator|.
name|getRecordWriter
argument_list|(
name|taContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|wroteData
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|aborted
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|setAbortStatus
parameter_list|(
name|boolean
name|abort
parameter_list|)
block|{
name|this
operator|.
name|aborted
operator|=
name|abort
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|Reporter
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|writer
operator|.
name|close
argument_list|(
name|taContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputCommitter
operator|.
name|needsTaskCommit
argument_list|(
name|taContext
argument_list|)
condition|)
block|{
name|outputCommitter
operator|.
name|commitTask
argument_list|(
name|taContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|wroteData
operator|&&
name|this
operator|.
name|jobIsSetup
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|aborted
condition|)
block|{
name|outputCommitter
operator|.
name|commitJob
argument_list|(
name|taContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputCommitter
operator|.
name|cleanupJob
argument_list|(
name|taContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|WritableComparable
name|arg0
parameter_list|,
name|HCatRecord
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|jobIsSetup
condition|)
block|{
name|this
operator|.
name|outputCommitter
operator|.
name|setupJob
argument_list|(
name|taContext
argument_list|)
expr_stmt|;
name|jobIsSetup
operator|=
literal|true
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
name|this
operator|.
name|wroteData
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

