begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|DefaultHCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_comment
comment|/** The HCat wrapper for the underlying RecordReader, this ensures that the initialize on  * the underlying record reader is done with the underlying split, not with HCatSplit.  */
end_comment

begin_class
class|class
name|HCatRecordReader
extends|extends
name|RecordReader
argument_list|<
name|WritableComparable
argument_list|,
name|HCatRecord
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
block|{
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HCatRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|lineCount
init|=
literal|0
decl_stmt|;
comment|/** The underlying record reader to delegate to. */
specifier|private
specifier|final
name|RecordReader
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|baseRecordReader
decl_stmt|;
comment|/** The storage driver used */
specifier|private
specifier|final
name|HCatInputStorageDriver
name|storageDriver
decl_stmt|;
comment|/**      * Instantiates a new hcat record reader.      * @param baseRecordReader the base record reader      */
specifier|public
name|HCatRecordReader
parameter_list|(
name|HCatInputStorageDriver
name|storageDriver
parameter_list|,
name|RecordReader
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|baseRecordReader
parameter_list|)
block|{
name|this
operator|.
name|baseRecordReader
operator|=
name|baseRecordReader
expr_stmt|;
name|this
operator|.
name|storageDriver
operator|=
name|storageDriver
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#initialize(org.apache.hadoop.mapreduce.InputSplit, org.apache.hadoop.mapreduce.TaskAttemptContext)      */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|InputSplit
name|baseSplit
init|=
name|split
decl_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|HCatSplit
condition|)
block|{
name|baseSplit
operator|=
operator|(
operator|(
name|HCatSplit
operator|)
name|split
operator|)
operator|.
name|getBaseSplit
argument_list|()
expr_stmt|;
block|}
name|baseRecordReader
operator|.
name|initialize
argument_list|(
name|baseSplit
argument_list|,
name|taskContext
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#getCurrentKey()      */
annotation|@
name|Override
specifier|public
name|WritableComparable
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|baseRecordReader
operator|.
name|getCurrentKey
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#getCurrentValue()      */
annotation|@
name|Override
specifier|public
name|HCatRecord
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HCatRecord
name|r
init|=
name|storageDriver
operator|.
name|convertToHCatRecord
argument_list|(
name|baseRecordReader
operator|.
name|getCurrentKey
argument_list|()
argument_list|,
name|baseRecordReader
operator|.
name|getCurrentValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|r
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#getProgress()      */
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
try|try
block|{
return|return
name|baseRecordReader
operator|.
name|getProgress
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0.0f
return|;
comment|// errored
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#nextKeyValue()      */
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|lineCount
operator|++
expr_stmt|;
return|return
name|baseRecordReader
operator|.
name|nextKeyValue
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.mapreduce.RecordReader#close()      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|baseRecordReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|createKey
parameter_list|()
block|{
name|WritableComparable
name|o
init|=
literal|null
decl_stmt|;
try|try
block|{
name|o
operator|=
name|getCurrentKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|DefaultHCatRecord
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|lineCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|nextKeyValue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
operator|(
operator|(
name|HCatRecord
operator|)
name|value
operator|)
operator|.
name|copy
argument_list|(
name|getCurrentValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

