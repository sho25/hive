begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Base class for File-based OutputStorageDrivers to extend. Provides subclasses  * the convenience of not having to rewrite mechanisms such as, dynamic  * partitioning, partition registration, success file, etc.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FileOutputStorageDriver
extends|extends
name|HCatOutputStorageDriver
block|{
comment|/** The directory under which data is initially written for a partitioned table */
specifier|protected
specifier|static
specifier|final
name|String
name|DYNTEMP_DIR_NAME
init|=
literal|"_DYN"
decl_stmt|;
comment|/** The directory under which data is initially written for a non partitioned table */
specifier|protected
specifier|static
specifier|final
name|String
name|TEMP_DIR_NAME
init|=
literal|"_TEMP"
decl_stmt|;
specifier|private
name|OutputFormat
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
super|super
name|Writable
argument_list|>
name|outputFormat
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|Properties
name|hcatProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|jobContext
argument_list|,
name|hcatProperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getOutputLocation
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|String
name|tableLocation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|,
name|String
name|dynHash
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|parentPath
init|=
name|tableLocation
decl_stmt|;
comment|// For dynamic partitioned writes without all keyvalues specified,
comment|// we create a temp dir for the associated write job
if|if
condition|(
name|dynHash
operator|!=
literal|null
condition|)
block|{
name|parentPath
operator|=
operator|new
name|Path
argument_list|(
name|tableLocation
argument_list|,
name|DYNTEMP_DIR_NAME
operator|+
name|dynHash
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// For non-partitioned tables, we send them to the temp dir
if|if
condition|(
operator|(
name|dynHash
operator|==
literal|null
operator|)
operator|&&
operator|(
name|partitionValues
operator|==
literal|null
operator|||
name|partitionValues
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|tableLocation
argument_list|,
name|TEMP_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partitionCol
range|:
name|partitionCols
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|partitionValues
operator|.
name|get
argument_list|(
name|partitionCol
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|partitionLocation
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|partitionCols
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|parentPath
argument_list|,
name|partitionLocation
argument_list|)
decl_stmt|;
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Path
name|getWorkFilePath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|,
name|String
name|outputLoc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|FileOutputCommitter
argument_list|(
operator|new
name|Path
argument_list|(
name|outputLoc
argument_list|)
argument_list|,
name|context
argument_list|)
operator|.
name|getWorkPath
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
operator|.
name|getUniqueFile
argument_list|(
name|context
argument_list|,
literal|"part"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Any initialization of file paths, set permissions and group on freshly created files    * This is called at RecordWriter instantiation time which can be at write-time for    * a dynamic partitioning usecase      * @param context      * @throws IOException      */
specifier|static
name|void
name|prepareOutputLocation
parameter_list|(
name|HCatOutputStorageDriver
name|osd
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputJobInfo
name|info
init|=
name|HCatBaseOutputFormat
operator|.
name|getJobInfo
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|//      Path workFile = osd.getWorkFilePath(context,info.getLocation());
name|Path
name|workFile
init|=
name|osd
operator|.
name|getWorkFilePath
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"mapred.output.dir"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tblPath
init|=
operator|new
name|Path
argument_list|(
name|info
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tblPath
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|tblPathStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|tblPath
argument_list|)
decl_stmt|;
comment|//      LOG.info("Attempting to set permission ["+tblPathStat.getPermission()+"] on ["+
comment|//          workFile+"], location=["+info.getLocation()+"] , mapred.locn =["+
comment|//          context.getConfiguration().get("mapred.output.dir")+"]");
comment|//
comment|//      FileStatus wFileStatus = fs.getFileStatus(workFile);
comment|//      LOG.info("Table : "+tblPathStat.getPath());
comment|//      LOG.info("Working File : "+wFileStatus.getPath());
name|fs
operator|.
name|setPermission
argument_list|(
name|workFile
argument_list|,
name|tblPathStat
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|workFile
argument_list|,
literal|null
argument_list|,
name|tblPathStat
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
comment|// log the messages before ignoring. Currently, logging is not built in HCat.
block|}
block|}
annotation|@
name|Override
name|OutputFormatContainer
name|getOutputFormatContainer
parameter_list|(
name|OutputFormat
name|outputFormat
parameter_list|)
block|{
return|return
operator|new
name|FileOutputFormatContainer
argument_list|(
name|outputFormat
argument_list|)
return|;
block|}
block|}
end_class

end_unit

