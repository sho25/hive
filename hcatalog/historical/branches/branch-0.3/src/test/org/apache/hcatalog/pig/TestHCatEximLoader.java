begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|MiniCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ExecType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|backend
operator|.
name|executionengine
operator|.
name|ExecException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|UDFContext
import|;
end_import

begin_comment
comment|/**  *  * TestHCatEximLoader. Assumes Exim storer is working well  *  */
end_comment

begin_class
specifier|public
class|class
name|TestHCatEximLoader
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NONPART_TABLE
init|=
literal|"junit_unparted"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARTITIONED_TABLE
init|=
literal|"junit_parted"
decl_stmt|;
specifier|private
specifier|static
name|MiniCluster
name|cluster
init|=
name|MiniCluster
operator|.
name|buildCluster
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|dataLocation
init|=
literal|"/tmp/data"
decl_stmt|;
specifier|private
specifier|static
name|String
name|fqdataLocation
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|exportLocation
init|=
literal|"/tmp/export"
decl_stmt|;
specifier|private
specifier|static
name|String
name|fqexportLocation
decl_stmt|;
specifier|private
specifier|static
name|Properties
name|props
decl_stmt|;
specifier|private
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|dataLocation
argument_list|)
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|exportLocation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"fs.default.name"
argument_list|,
name|cluster
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Filesystem class : "
operator|+
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", fs.default.name : "
operator|+
name|props
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
argument_list|)
expr_stmt|;
name|fqdataLocation
operator|=
name|cluster
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
operator|+
name|dataLocation
expr_stmt|;
name|fqexportLocation
operator|=
name|cluster
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
operator|+
name|exportLocation
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FQ Data Location :"
operator|+
name|fqdataLocation
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FQ Export Location :"
operator|+
name|fqexportLocation
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|populateDataFile
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|dataLocation
argument_list|)
expr_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[]
block|{
literal|"237,Krishna,01/01/1990,M,IN,TN"
block|,
literal|"238,Kalpana,01/01/2000,F,IN,KA"
block|,
literal|"239,Satya,01/01/2001,M,US,TN"
block|,
literal|"240,Kavya,01/01/2002,F,US,KA"
block|}
decl_stmt|;
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|dataLocation
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|EmpDetail
block|{
name|String
name|name
decl_stmt|;
name|String
name|dob
decl_stmt|;
name|String
name|mf
decl_stmt|;
name|String
name|country
decl_stmt|;
name|String
name|state
decl_stmt|;
block|}
specifier|private
name|void
name|assertEmpDetail
parameter_list|(
name|Tuple
name|t
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|EmpDetail
argument_list|>
name|eds
parameter_list|)
throws|throws
name|ExecException
block|{
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EmpDetail
name|ed
init|=
name|eds
operator|.
name|remove
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ed
operator|.
name|name
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ed
operator|.
name|dob
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ed
operator|.
name|mf
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ed
operator|.
name|country
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ed
operator|.
name|state
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addEmpDetail
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|EmpDetail
argument_list|>
name|empDetails
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|dob
parameter_list|,
name|String
name|mf
parameter_list|,
name|String
name|country
parameter_list|,
name|String
name|state
parameter_list|)
block|{
name|EmpDetail
name|ed
init|=
operator|new
name|EmpDetail
argument_list|()
decl_stmt|;
name|ed
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|ed
operator|.
name|dob
operator|=
name|dob
expr_stmt|;
name|ed
operator|.
name|mf
operator|=
name|mf
expr_stmt|;
name|ed
operator|.
name|country
operator|=
name|country
expr_stmt|;
name|ed
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|empDetails
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|ed
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmpDetail
parameter_list|(
name|Tuple
name|t
parameter_list|,
name|Integer
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|dob
parameter_list|,
name|String
name|mf
parameter_list|)
throws|throws
name|ExecException
block|{
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dob
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mf
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmpDetail
parameter_list|(
name|Tuple
name|t
parameter_list|,
name|String
name|mf
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|ExecException
block|{
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mf
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLoadNonPartTable
parameter_list|()
throws|throws
name|Exception
block|{
name|populateDataFile
argument_list|()
expr_stmt|;
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fqdataLocation
operator|+
literal|"' using PigStorage(',') as (emp_id:int, emp_name:chararray, emp_dob:chararray, emp_sex:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into '"
operator|+
name|NONPART_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fqexportLocation
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximLoader();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|XIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|t
init|=
name|XIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
literal|237
argument_list|,
literal|"Krishna"
argument_list|,
literal|"01/01/1990"
argument_list|,
literal|"M"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|XIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
literal|238
argument_list|,
literal|"Kalpana"
argument_list|,
literal|"01/01/2000"
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|XIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
literal|239
argument_list|,
literal|"Satya"
argument_list|,
literal|"01/01/2001"
argument_list|,
literal|"M"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|XIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
literal|240
argument_list|,
literal|"Kavya"
argument_list|,
literal|"01/01/2002"
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLoadNonPartProjection
parameter_list|()
throws|throws
name|Exception
block|{
name|populateDataFile
argument_list|()
expr_stmt|;
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fqdataLocation
operator|+
literal|"' using PigStorage(',') as (emp_id:int, emp_name:chararray, emp_dob:chararray, emp_sex:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into '"
operator|+
name|NONPART_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fqexportLocation
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximLoader();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = foreach A generate emp_sex, emp_name;"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|XIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|t
init|=
name|XIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
literal|"M"
argument_list|,
literal|"Krishna"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|XIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
literal|"F"
argument_list|,
literal|"Kalpana"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|XIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
literal|"M"
argument_list|,
literal|"Satya"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|XIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
literal|"F"
argument_list|,
literal|"Kavya"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLoadMultiPartTable
parameter_list|()
throws|throws
name|Exception
block|{
block|{
name|populateDataFile
argument_list|()
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fqdataLocation
operator|+
literal|"' using PigStorage(',') as (emp_id:int, emp_name:chararray, emp_dob:chararray, emp_sex:chararray, emp_country:chararray, emp_state:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"INTN = FILTER A BY emp_country == 'IN' AND emp_state == 'TN';"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"INKA = FILTER A BY emp_country == 'IN' AND emp_state == 'KA';"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"USTN = FILTER A BY emp_country == 'US' AND emp_state == 'TN';"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"USKA = FILTER A BY emp_country == 'US' AND emp_state == 'KA';"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store INTN into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"', 'emp_country=in,emp_state=tn');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store INKA into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"', 'emp_country=in,emp_state=ka');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store USTN into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"', 'emp_country=us,emp_state=tn');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store USKA into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"', 'emp_country=us,emp_state=ka');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fqexportLocation
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximLoader() "
comment|//+ "as (emp_id:int, emp_name:chararray, emp_dob:chararray, emp_sex:chararray, emp_country:chararray, emp_state:chararray);");
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|XIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|EmpDetail
argument_list|>
name|empDetails
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|EmpDetail
argument_list|>
argument_list|()
decl_stmt|;
name|addEmpDetail
argument_list|(
name|empDetails
argument_list|,
literal|237
argument_list|,
literal|"Krishna"
argument_list|,
literal|"01/01/1990"
argument_list|,
literal|"M"
argument_list|,
literal|"in"
argument_list|,
literal|"tn"
argument_list|)
expr_stmt|;
name|addEmpDetail
argument_list|(
name|empDetails
argument_list|,
literal|238
argument_list|,
literal|"Kalpana"
argument_list|,
literal|"01/01/2000"
argument_list|,
literal|"F"
argument_list|,
literal|"in"
argument_list|,
literal|"ka"
argument_list|)
expr_stmt|;
name|addEmpDetail
argument_list|(
name|empDetails
argument_list|,
literal|239
argument_list|,
literal|"Satya"
argument_list|,
literal|"01/01/2001"
argument_list|,
literal|"M"
argument_list|,
literal|"us"
argument_list|,
literal|"tn"
argument_list|)
expr_stmt|;
name|addEmpDetail
argument_list|(
name|empDetails
argument_list|,
literal|240
argument_list|,
literal|"Kavya"
argument_list|,
literal|"01/01/2002"
argument_list|,
literal|"F"
argument_list|,
literal|"us"
argument_list|,
literal|"ka"
argument_list|)
expr_stmt|;
while|while
condition|(
name|XIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|XIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|empDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
name|empDetails
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|empDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLoadMultiPartFilter
parameter_list|()
throws|throws
name|Exception
block|{
block|{
name|populateDataFile
argument_list|()
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fqdataLocation
operator|+
literal|"' using PigStorage(',') as (emp_id:int, emp_name:chararray, emp_dob:chararray, emp_sex:chararray, emp_country:chararray, emp_state:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"INTN = FILTER A BY emp_country == 'IN' AND emp_state == 'TN';"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"INKA = FILTER A BY emp_country == 'IN' AND emp_state == 'KA';"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"USTN = FILTER A BY emp_country == 'US' AND emp_state == 'TN';"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"USKA = FILTER A BY emp_country == 'US' AND emp_state == 'KA';"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store INTN into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"', 'emp_country=in,emp_state=tn');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store INKA into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"', 'emp_country=in,emp_state=ka');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store USTN into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"', 'emp_country=us,emp_state=tn');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store USKA into '"
operator|+
name|PARTITIONED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximStorer('"
operator|+
name|fqexportLocation
operator|+
literal|"', 'emp_country=us,emp_state=ka');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|{
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fqexportLocation
operator|+
literal|"' using org.apache.hcatalog.pig.HCatEximLoader() "
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = filter A by emp_state == 'ka';"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|XIter
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|EmpDetail
argument_list|>
name|empDetails
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|EmpDetail
argument_list|>
argument_list|()
decl_stmt|;
name|addEmpDetail
argument_list|(
name|empDetails
argument_list|,
literal|238
argument_list|,
literal|"Kalpana"
argument_list|,
literal|"01/01/2000"
argument_list|,
literal|"F"
argument_list|,
literal|"in"
argument_list|,
literal|"ka"
argument_list|)
expr_stmt|;
name|addEmpDetail
argument_list|(
name|empDetails
argument_list|,
literal|240
argument_list|,
literal|"Kavya"
argument_list|,
literal|"01/01/2002"
argument_list|,
literal|"F"
argument_list|,
literal|"us"
argument_list|,
literal|"ka"
argument_list|)
expr_stmt|;
while|while
condition|(
name|XIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|XIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|empDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmpDetail
argument_list|(
name|t
argument_list|,
name|empDetails
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|empDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

