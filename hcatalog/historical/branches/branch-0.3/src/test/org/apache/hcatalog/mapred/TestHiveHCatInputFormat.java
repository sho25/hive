begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|MiniCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatDataCheckUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapred
operator|.
name|HCatMapredInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|storagehandler
operator|.
name|HCatStorageHandlerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ExecType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|UDFContext
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveHCatInputFormat
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|MiniCluster
name|cluster
init|=
name|MiniCluster
operator|.
name|buildCluster
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Driver
name|driver
decl_stmt|;
name|String
name|PTNED_TABLE
init|=
literal|"junit_testhiveinputintegration_ptni"
decl_stmt|;
name|String
name|UNPTNED_TABLE
init|=
literal|"junit_testhiveinputintegration_noptn"
decl_stmt|;
name|String
name|basicFile
init|=
literal|"/tmp/"
operator|+
name|PTNED_TABLE
operator|+
literal|".file"
decl_stmt|;
specifier|public
name|void
name|testFromHive
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|driver
operator|==
literal|null
condition|)
block|{
name|driver
operator|=
name|HCatDataCheckUtil
operator|.
name|instantiateDriver
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"fs.default.name"
argument_list|,
name|cluster
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|basicFileFullName
init|=
name|cluster
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
operator|+
name|basicFile
decl_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
comment|// create source data file
name|HCatDataCheckUtil
operator|.
name|generateDataFile
argument_list|(
name|cluster
argument_list|,
name|basicFile
argument_list|)
expr_stmt|;
name|String
name|createPtnedTable
init|=
literal|"(j int, s string) partitioned by (i int) "
operator|+
literal|"stored by '"
operator|+
name|HCatStorageHandlerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"' tblproperties"
operator|+
literal|"('hcat.isd'='org.apache.hcatalog.rcfile.RCFileInputDriver',"
operator|+
literal|"'hcat.osd'='org.apache.hcatalog.rcfile.RCFileOutputDriver') "
decl_stmt|;
name|HCatDataCheckUtil
operator|.
name|createTable
argument_list|(
name|driver
argument_list|,
name|PTNED_TABLE
argument_list|,
name|createPtnedTable
argument_list|)
expr_stmt|;
name|String
name|createUnptnedTable
init|=
literal|"(i int, j int, s string) "
operator|+
literal|"stored by '"
operator|+
name|HCatStorageHandlerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"' tblproperties"
operator|+
literal|"('hcat.isd'='org.apache.hcatalog.rcfile.RCFileInputDriver',"
operator|+
literal|"'hcat.osd'='org.apache.hcatalog.rcfile.RCFileOutputDriver') "
decl_stmt|;
name|HCatDataCheckUtil
operator|.
name|createTable
argument_list|(
name|driver
argument_list|,
name|UNPTNED_TABLE
argument_list|,
name|createUnptnedTable
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"describe extended "
operator|+
name|UNPTNED_TABLE
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|des_values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|des_values
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|des_values
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"du:"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|driver
operator|.
name|run
argument_list|(
literal|"describe extended "
operator|+
name|PTNED_TABLE
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|des2_values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|des2_values
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|des2_values
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"dp:"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
comment|// use pig to read from source file and put into this table
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|basicFileFullName
operator|+
literal|"' as (i:int, j:int, s:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into '"
operator|+
name|UNPTNED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatStorer();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|basicFileFullName
operator|+
literal|"' as (i:int, j:int, s:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into '"
operator|+
name|PTNED_TABLE
operator|+
literal|"' using org.apache.hcatalog.pig.HCatStorer();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
comment|// partitioned by i
comment|//  select * from tbl;
comment|//  select j,s,i from tbl;
comment|//  select * from tbl where i = 3;
comment|//  select j,s,i from tbl where i = 3;
comment|//  select * from tbl where j = 3;
comment|//  select j,s,i from tbl where j = 3;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|p_select_star_nofilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"p_select_star_nofilter"
argument_list|,
literal|"select * from "
operator|+
name|PTNED_TABLE
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|p_select_named_nofilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"p_select_named_nofilter"
argument_list|,
literal|"select j,s,i from "
operator|+
name|PTNED_TABLE
argument_list|)
decl_stmt|;
name|assertDataIdentical
argument_list|(
name|p_select_star_nofilter
argument_list|,
name|p_select_named_nofilter
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|p_select_star_ptnfilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"p_select_star_ptnfilter"
argument_list|,
literal|"select * from "
operator|+
name|PTNED_TABLE
operator|+
literal|" where i = 3"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|p_select_named_ptnfilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"p_select_named_ptnfilter"
argument_list|,
literal|"select j,s,i from "
operator|+
name|PTNED_TABLE
operator|+
literal|" where i = 3"
argument_list|)
decl_stmt|;
name|assertDataIdentical
argument_list|(
name|p_select_star_ptnfilter
argument_list|,
name|p_select_named_ptnfilter
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|select_star_nonptnfilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"select_star_nonptnfilter"
argument_list|,
literal|"select * from "
operator|+
name|PTNED_TABLE
operator|+
literal|" where j = 28"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|select_named_nonptnfilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"select_named_nonptnfilter"
argument_list|,
literal|"select j,s,i from "
operator|+
name|PTNED_TABLE
operator|+
literal|" where j = 28"
argument_list|)
decl_stmt|;
name|assertDataIdentical
argument_list|(
name|select_star_nonptnfilter
argument_list|,
name|select_named_nonptnfilter
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// non-partitioned
comment|//  select * from tbl;
comment|//  select i,j,s from tbl;
comment|//  select * from tbl where i = 3;
comment|//  select i,j,s from tbl where i = 3;
comment|//  select j,s,i from tbl;
comment|//  select j,s,i from tbl where i = 3;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|select_star_nofilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"select_star_nofilter"
argument_list|,
literal|"select * from "
operator|+
name|UNPTNED_TABLE
argument_list|)
decl_stmt|;
comment|//i,j,s select * order is diff for unptn
name|ArrayList
argument_list|<
name|String
argument_list|>
name|select_ijs_nofilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"select_ijs_nofilter"
argument_list|,
literal|"select i,j,s from "
operator|+
name|UNPTNED_TABLE
argument_list|)
decl_stmt|;
name|assertDataIdentical
argument_list|(
name|select_star_nofilter
argument_list|,
name|select_ijs_nofilter
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|select_star_ptnfilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"select_star_ptnfilter"
argument_list|,
literal|"select * from "
operator|+
name|UNPTNED_TABLE
operator|+
literal|" where i = 3"
argument_list|)
decl_stmt|;
comment|//i,j,s
name|ArrayList
argument_list|<
name|String
argument_list|>
name|select_ijs_ptnfilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"select_ijs_ptnfilter"
argument_list|,
literal|"select i,j,s from "
operator|+
name|UNPTNED_TABLE
operator|+
literal|" where i = 3"
argument_list|)
decl_stmt|;
name|assertDataIdentical
argument_list|(
name|select_star_ptnfilter
argument_list|,
name|select_ijs_ptnfilter
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|select_jsi_nofilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"select_jsi_nofilter"
argument_list|,
literal|"select j,s,i from "
operator|+
name|UNPTNED_TABLE
argument_list|)
decl_stmt|;
name|assertDataIdentical
argument_list|(
name|p_select_named_nofilter
argument_list|,
name|select_jsi_nofilter
argument_list|,
literal|50
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|select_jsi_ptnfilter
init|=
name|HCatDataCheckUtil
operator|.
name|formattedRun
argument_list|(
name|driver
argument_list|,
literal|"select_jsi_ptnfilter"
argument_list|,
literal|"select j,s,i from "
operator|+
name|UNPTNED_TABLE
operator|+
literal|" where i = 3"
argument_list|)
decl_stmt|;
name|assertDataIdentical
argument_list|(
name|p_select_named_ptnfilter
argument_list|,
name|select_jsi_ptnfilter
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDataIdentical
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result1
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result2
parameter_list|,
name|int
name|numRecords
parameter_list|)
block|{
name|assertDataIdentical
argument_list|(
name|result1
argument_list|,
name|result2
argument_list|,
name|numRecords
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDataIdentical
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result1
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result2
parameter_list|,
name|int
name|numRecords
parameter_list|,
name|boolean
name|doSort
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|numRecords
argument_list|,
name|result1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numRecords
argument_list|,
name|result2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result1
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRecords
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|result1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|result2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|basicFile
argument_list|)
expr_stmt|;
name|HCatDataCheckUtil
operator|.
name|dropTable
argument_list|(
name|driver
argument_list|,
name|PTNED_TABLE
argument_list|)
expr_stmt|;
name|HCatDataCheckUtil
operator|.
name|dropTable
argument_list|(
name|driver
argument_list|,
name|UNPTNED_TABLE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

