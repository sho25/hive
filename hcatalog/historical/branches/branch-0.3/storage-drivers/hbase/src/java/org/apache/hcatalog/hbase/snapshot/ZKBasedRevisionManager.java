begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|lock
operator|.
name|LockListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|lock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_comment
comment|/**  * The service for providing revision management to Hbase tables.  */
end_comment

begin_class
specifier|public
class|class
name|ZKBasedRevisionManager
implements|implements
name|RevisionManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HOSTLIST
init|=
literal|"revision.manager.zk.HostList"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATADIR
init|=
literal|"revision.manager.zk.DataDir"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DATADIR
init|=
literal|"/revision-management"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_HOSTLIST
init|=
literal|"localhost:2181"
decl_stmt|;
specifier|private
specifier|static
name|int
name|DEFAULT_WRITE_TRANSACTION_TIMEOUT
init|=
literal|14400000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKBasedRevisionManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|zkHostList
decl_stmt|;
specifier|private
name|String
name|baseDir
decl_stmt|;
specifier|private
name|ZKUtil
name|zkUtil
decl_stmt|;
comment|/*      * @see org.apache.hcatalog.hbase.snapshot.RevisionManager#initialize()      */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|zkHostList
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
name|ZKBasedRevisionManager
operator|.
name|HOSTLIST
argument_list|,
name|ZKBasedRevisionManager
operator|.
name|DEFAULT_HOSTLIST
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseDir
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
name|ZKBasedRevisionManager
operator|.
name|DATADIR
argument_list|,
name|ZKBasedRevisionManager
operator|.
name|DEFAULT_DATADIR
argument_list|)
expr_stmt|;
block|}
comment|/**      * Open a ZooKeeper connection      * @throws java.io.IOException      */
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|zkUtil
operator|=
operator|new
name|ZKUtil
argument_list|(
name|zkHostList
argument_list|,
name|this
operator|.
name|baseDir
argument_list|)
expr_stmt|;
name|zkUtil
operator|.
name|createRootZNodes
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created root znodes for revision manager."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Close Zookeeper connection      */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|zkUtil
operator|.
name|closeZKConnection
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkInputParams
parameter_list|(
name|String
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|families
parameter_list|)
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The table name must be specified for reading."
argument_list|)
throw|;
block|}
if|if
condition|(
name|families
operator|==
literal|null
operator|||
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one column family should be specified for reading."
argument_list|)
throw|;
block|}
block|}
comment|/* @param table     /* @param families     /* @param keepAlive     /* @return     /* @throws IOException      * @see org.apache.hcatalog.hbase.snapshot.RevisionManager#beginWriteTransaction(java.lang.String, java.util.List, long)      */
specifier|public
name|Transaction
name|beginWriteTransaction
parameter_list|(
name|String
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|families
parameter_list|,
name|long
name|keepAlive
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInputParams
argument_list|(
name|table
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|zkUtil
operator|.
name|setUpZnodesForTable
argument_list|(
name|table
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|long
name|nextId
init|=
name|zkUtil
operator|.
name|nextId
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|long
name|expireTimestamp
init|=
name|zkUtil
operator|.
name|getTimeStamp
argument_list|()
decl_stmt|;
name|Transaction
name|transaction
init|=
operator|new
name|Transaction
argument_list|(
name|table
argument_list|,
name|families
argument_list|,
name|nextId
argument_list|,
name|expireTimestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|keepAlive
operator|!=
operator|-
literal|1
condition|)
block|{
name|transaction
operator|.
name|setKeepAlive
argument_list|(
name|keepAlive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transaction
operator|.
name|setKeepAlive
argument_list|(
name|DEFAULT_WRITE_TRANSACTION_TIMEOUT
argument_list|)
expr_stmt|;
block|}
name|refreshTransactionList
argument_list|(
name|transaction
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|lockPath
init|=
name|prepareLockNode
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|WriteLock
name|wLock
init|=
operator|new
name|WriteLock
argument_list|(
name|zkUtil
operator|.
name|getSession
argument_list|()
argument_list|,
name|lockPath
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
decl_stmt|;
name|RMLockListener
name|myLockListener
init|=
operator|new
name|RMLockListener
argument_list|()
decl_stmt|;
name|wLock
operator|.
name|setLockListener
argument_list|(
name|myLockListener
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|lockGrabbed
init|=
name|wLock
operator|.
name|lock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockGrabbed
operator|==
literal|false
condition|)
block|{
comment|//TO DO : Let this request queue up and try obtaining lock.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to obtain lock while beginning transaction. "
operator|+
name|transaction
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colFamilies
init|=
name|transaction
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|FamilyRevision
name|revisionData
init|=
name|transaction
operator|.
name|getFamilyRevisionInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cfamily
range|:
name|colFamilies
control|)
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
name|baseDir
argument_list|,
name|table
argument_list|,
name|cfamily
argument_list|)
decl_stmt|;
name|zkUtil
operator|.
name|updateData
argument_list|(
name|path
argument_list|,
name|revisionData
argument_list|,
name|ZKUtil
operator|.
name|UpdateMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|wLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|transaction
return|;
block|}
comment|/* @param table The table name.     /* @param families The column families involved in the transaction.     /* @return transaction The transaction which was started.     /* @throws IOException      * @see org.apache.hcatalog.hbase.snapshot.RevisionManager#beginWriteTransaction(java.lang.String, java.util.List)      */
specifier|public
name|Transaction
name|beginWriteTransaction
parameter_list|(
name|String
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|beginWriteTransaction
argument_list|(
name|table
argument_list|,
name|families
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * This method commits a write transaction.      * @param transaction The revision information associated with transaction.      * @throws java.io.IOException      */
specifier|public
name|void
name|commitWriteTransaction
parameter_list|(
name|Transaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
name|refreshTransactionList
argument_list|(
name|transaction
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|lockPath
init|=
name|prepareLockNode
argument_list|(
name|transaction
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|WriteLock
name|wLock
init|=
operator|new
name|WriteLock
argument_list|(
name|zkUtil
operator|.
name|getSession
argument_list|()
argument_list|,
name|lockPath
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
decl_stmt|;
name|RMLockListener
name|myLockListener
init|=
operator|new
name|RMLockListener
argument_list|()
decl_stmt|;
name|wLock
operator|.
name|setLockListener
argument_list|(
name|myLockListener
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|lockGrabbed
init|=
name|wLock
operator|.
name|lock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockGrabbed
operator|==
literal|false
condition|)
block|{
comment|//TO DO : Let this request queue up and try obtaining lock.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to obtain lock while commiting transaction. "
operator|+
name|transaction
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|tableName
init|=
name|transaction
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colFamilies
init|=
name|transaction
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|FamilyRevision
name|revisionData
init|=
name|transaction
operator|.
name|getFamilyRevisionInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cfamily
range|:
name|colFamilies
control|)
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
name|baseDir
argument_list|,
name|tableName
argument_list|,
name|cfamily
argument_list|)
decl_stmt|;
name|zkUtil
operator|.
name|updateData
argument_list|(
name|path
argument_list|,
name|revisionData
argument_list|,
name|ZKUtil
operator|.
name|UpdateMode
operator|.
name|REMOVE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|wLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Write Transaction committed: "
operator|+
name|transaction
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method aborts a write transaction.      * @param state the state associated with the Transaction      * @throws java.io.IOException      */
specifier|public
name|void
name|abortWriteTransaction
parameter_list|(
name|Transaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
name|refreshTransactionList
argument_list|(
name|transaction
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|lockPath
init|=
name|prepareLockNode
argument_list|(
name|transaction
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|WriteLock
name|wLock
init|=
operator|new
name|WriteLock
argument_list|(
name|zkUtil
operator|.
name|getSession
argument_list|()
argument_list|,
name|lockPath
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
decl_stmt|;
name|RMLockListener
name|myLockListener
init|=
operator|new
name|RMLockListener
argument_list|()
decl_stmt|;
name|wLock
operator|.
name|setLockListener
argument_list|(
name|myLockListener
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|lockGrabbed
init|=
name|wLock
operator|.
name|lock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockGrabbed
operator|==
literal|false
condition|)
block|{
comment|//TO DO : Let this request queue up and try obtaining lock.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to obtain lock while aborting transaction. "
operator|+
name|transaction
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|tableName
init|=
name|transaction
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colFamilies
init|=
name|transaction
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|FamilyRevision
name|revisionData
init|=
name|transaction
operator|.
name|getFamilyRevisionInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cfamily
range|:
name|colFamilies
control|)
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
name|baseDir
argument_list|,
name|tableName
argument_list|,
name|cfamily
argument_list|)
decl_stmt|;
name|zkUtil
operator|.
name|updateData
argument_list|(
name|path
argument_list|,
name|revisionData
argument_list|,
name|ZKUtil
operator|.
name|UpdateMode
operator|.
name|REMOVE
argument_list|)
expr_stmt|;
name|path
operator|=
name|PathUtil
operator|.
name|getAbortInformationPath
argument_list|(
name|baseDir
argument_list|,
name|tableName
argument_list|,
name|cfamily
argument_list|)
expr_stmt|;
name|zkUtil
operator|.
name|updateData
argument_list|(
name|path
argument_list|,
name|revisionData
argument_list|,
name|ZKUtil
operator|.
name|UpdateMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|wLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Write Transaction aborted: "
operator|+
name|transaction
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* @param transaction      /* @throws IOException       * @see org.apache.hcatalog.hbase.snapshot.RevsionManager#keepAlive(org.apache.hcatalog.hbase.snapshot.Transaction)       */
specifier|public
name|void
name|keepAlive
parameter_list|(
name|Transaction
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
name|refreshTransactionList
argument_list|(
name|transaction
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|keepAliveTransaction
argument_list|()
expr_stmt|;
name|String
name|lockPath
init|=
name|prepareLockNode
argument_list|(
name|transaction
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|WriteLock
name|wLock
init|=
operator|new
name|WriteLock
argument_list|(
name|zkUtil
operator|.
name|getSession
argument_list|()
argument_list|,
name|lockPath
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
decl_stmt|;
name|RMLockListener
name|myLockListener
init|=
operator|new
name|RMLockListener
argument_list|()
decl_stmt|;
name|wLock
operator|.
name|setLockListener
argument_list|(
name|myLockListener
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|lockGrabbed
init|=
name|wLock
operator|.
name|lock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockGrabbed
operator|==
literal|false
condition|)
block|{
comment|//TO DO : Let this request queue up and try obtaining lock.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to obtain lock for keep alive of transaction. "
operator|+
name|transaction
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|tableName
init|=
name|transaction
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colFamilies
init|=
name|transaction
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|FamilyRevision
name|revisionData
init|=
name|transaction
operator|.
name|getFamilyRevisionInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cfamily
range|:
name|colFamilies
control|)
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
name|baseDir
argument_list|,
name|tableName
argument_list|,
name|cfamily
argument_list|)
decl_stmt|;
name|zkUtil
operator|.
name|updateData
argument_list|(
name|path
argument_list|,
name|revisionData
argument_list|,
name|ZKUtil
operator|.
name|UpdateMode
operator|.
name|KEEP_ALIVE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|wLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* This method allows the user to create latest snapshot of a     /* table.     /* @param tableName The table whose snapshot is being created.     /* @return TableSnapshot An instance of TableSnaphot     /* @throws IOException      * @see org.apache.hcatalog.hbase.snapshot.RevsionManager#createSnapshot(java.lang.String)      */
specifier|public
name|TableSnapshot
name|createSnapshot
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|refreshTransactionList
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|long
name|latestID
init|=
name|zkUtil
operator|.
name|currentID
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|cfMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilyNames
init|=
name|zkUtil
operator|.
name|getColumnFamiliesOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|cfName
range|:
name|columnFamilyNames
control|)
block|{
name|String
name|cfPath
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
name|baseDir
argument_list|,
name|tableName
argument_list|,
name|cfName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|tranxList
init|=
name|zkUtil
operator|.
name|getTransactionList
argument_list|(
name|cfPath
argument_list|)
decl_stmt|;
name|long
name|version
decl_stmt|;
if|if
condition|(
operator|!
name|tranxList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tranxList
argument_list|)
expr_stmt|;
comment|// get the smallest running Transaction ID
name|long
name|runningVersion
init|=
name|tranxList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|version
operator|=
name|runningVersion
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|version
operator|=
name|latestID
expr_stmt|;
block|}
name|cfMap
operator|.
name|put
argument_list|(
name|cfName
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
name|TableSnapshot
name|snapshot
init|=
operator|new
name|TableSnapshot
argument_list|(
name|tableName
argument_list|,
name|cfMap
argument_list|,
name|latestID
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created snapshot For table: "
operator|+
name|tableName
operator|+
literal|" snapshot: "
operator|+
name|snapshot
argument_list|)
expr_stmt|;
return|return
name|snapshot
return|;
block|}
comment|/* This method allows the user to create snapshot of a     /* table with a given revision number.     /* @param tableName     /* @param revision     /* @return TableSnapshot     /* @throws IOException      * @see org.apache.hcatalog.hbase.snapshot.RevsionManager#createSnapshot(java.lang.String, long)      */
specifier|public
name|TableSnapshot
name|createSnapshot
parameter_list|(
name|String
name|tableName
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|currentID
init|=
name|zkUtil
operator|.
name|currentID
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|>
name|currentID
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The revision specified in the snapshot is higher than the current revision of the table."
argument_list|)
throw|;
block|}
name|refreshTransactionList
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|cfMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
name|zkUtil
operator|.
name|getColumnFamiliesOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|cf
range|:
name|columnFamilies
control|)
block|{
name|cfMap
operator|.
name|put
argument_list|(
name|cf
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TableSnapshot
argument_list|(
name|tableName
argument_list|,
name|cfMap
argument_list|,
name|revision
argument_list|)
return|;
block|}
comment|/**      * Get the list of in-progress Transactions for a column family      * @param table the table name      * @param columnFamily the column family name      * @return a list of in-progress WriteTransactions      * @throws java.io.IOException      */
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|getRunningTransactions
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
name|baseDir
argument_list|,
name|table
argument_list|,
name|columnFamily
argument_list|)
decl_stmt|;
return|return
name|zkUtil
operator|.
name|getTransactionList
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**      * Get the list of aborted Transactions for a column family      * @param table the table name      * @param columnFamily the column family name      * @return a list of aborted WriteTransactions      * @throws java.io.IOException      */
name|List
argument_list|<
name|FamilyRevision
argument_list|>
name|getAbortedWriteTransactions
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|PathUtil
operator|.
name|getAbortInformationPath
argument_list|(
name|baseDir
argument_list|,
name|table
argument_list|,
name|columnFamily
argument_list|)
decl_stmt|;
return|return
name|zkUtil
operator|.
name|getTransactionList
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
name|void
name|refreshTransactionList
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|lockPath
init|=
name|prepareLockNode
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|WriteLock
name|wLock
init|=
operator|new
name|WriteLock
argument_list|(
name|zkUtil
operator|.
name|getSession
argument_list|()
argument_list|,
name|lockPath
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
decl_stmt|;
name|RMLockListener
name|myLockListener
init|=
operator|new
name|RMLockListener
argument_list|()
decl_stmt|;
name|wLock
operator|.
name|setLockListener
argument_list|(
name|myLockListener
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|lockGrabbed
init|=
name|wLock
operator|.
name|lock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockGrabbed
operator|==
literal|false
condition|)
block|{
comment|//TO DO : Let this request queue up and try obtaining lock.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to obtain lock while refreshing transactions of table "
operator|+
name|tableName
operator|+
literal|"."
argument_list|)
throw|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cfPaths
init|=
name|zkUtil
operator|.
name|getColumnFamiliesOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|cf
range|:
name|cfPaths
control|)
block|{
name|String
name|runningDataPath
init|=
name|PathUtil
operator|.
name|getRunningTxnInfoPath
argument_list|(
name|baseDir
argument_list|,
name|tableName
argument_list|,
name|cf
argument_list|)
decl_stmt|;
name|zkUtil
operator|.
name|refreshTransactions
argument_list|(
name|runningDataPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while obtaining lock."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|wLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|prepareLockNode
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|txnDataPath
init|=
name|PathUtil
operator|.
name|getTxnDataPath
argument_list|(
name|this
operator|.
name|baseDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|String
name|lockPath
init|=
name|PathUtil
operator|.
name|getLockManagementNode
argument_list|(
name|txnDataPath
argument_list|)
decl_stmt|;
name|zkUtil
operator|.
name|ensurePathExists
argument_list|(
name|lockPath
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
return|return
name|lockPath
return|;
block|}
comment|/*      * This class is a listener class for the locks used in revision management.      * TBD: Use the following class to signal that that the lock is actually      * been granted.      */
class|class
name|RMLockListener
implements|implements
name|LockListener
block|{
comment|/*          * @see org.apache.hcatalog.hbase.snapshot.lock.LockListener#lockAcquired()          */
annotation|@
name|Override
specifier|public
name|void
name|lockAcquired
parameter_list|()
block|{          }
comment|/*          * @see org.apache.hcatalog.hbase.snapshot.lock.LockListener#lockReleased()          */
annotation|@
name|Override
specifier|public
name|void
name|lockReleased
parameter_list|()
block|{          }
block|}
block|}
end_class

end_unit

