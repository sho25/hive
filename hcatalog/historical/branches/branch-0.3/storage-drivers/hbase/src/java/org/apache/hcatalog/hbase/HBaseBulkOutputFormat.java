begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Class which imports data into HBase via it's "bulk load" feature. Wherein regions  * are created by the MR job using HFileOutputFormat and then later "moved" into  * the appropriate region server.  */
end_comment

begin_class
class|class
name|HBaseBulkOutputFormat
extends|extends
name|OutputFormat
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Put
argument_list|>
block|{
specifier|private
specifier|final
specifier|static
name|ImmutableBytesWritable
name|EMPTY_LIST
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|private
name|SequenceFileOutputFormat
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Put
argument_list|>
name|baseOutputFormat
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseBulkOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|HBaseBulkOutputFormat
parameter_list|()
block|{
name|baseOutputFormat
operator|=
operator|new
name|SequenceFileOutputFormat
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Put
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|baseOutputFormat
operator|.
name|checkOutputSpecs
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|//Get jobTracker delegation token if security is enabled
comment|//we need to launch the ImportSequenceFile job
if|if
condition|(
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hadoop.security.authorization"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
operator|new
name|JobConf
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|getCredentials
argument_list|()
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"my mr token"
argument_list|)
argument_list|,
name|jobClient
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RecordWriter
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Put
argument_list|>
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|//TODO use a constant/static setter when available
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
literal|"mapred.output.key.class"
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
literal|"mapred.output.value.class"
argument_list|,
name|Put
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
operator|new
name|HBaseBulkRecordWriter
argument_list|(
name|baseOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OutputCommitter
name|getOutputCommitter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HBaseBulkOutputCommitter
argument_list|(
name|baseOutputFormat
operator|.
name|getOutputCommitter
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|HBaseBulkRecordWriter
extends|extends
name|RecordWriter
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Put
argument_list|>
block|{
specifier|private
name|RecordWriter
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Put
argument_list|>
name|baseWriter
decl_stmt|;
specifier|public
name|HBaseBulkRecordWriter
parameter_list|(
name|RecordWriter
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Put
argument_list|>
name|baseWriter
parameter_list|)
block|{
name|this
operator|.
name|baseWriter
operator|=
name|baseWriter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|key
parameter_list|,
name|Put
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|//we ignore the key
name|baseWriter
operator|.
name|write
argument_list|(
name|EMPTY_LIST
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|baseWriter
operator|.
name|close
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|HBaseBulkOutputCommitter
extends|extends
name|OutputCommitter
block|{
specifier|private
name|OutputCommitter
name|baseOutputCommitter
decl_stmt|;
specifier|public
name|HBaseBulkOutputCommitter
parameter_list|(
name|OutputCommitter
name|baseOutputCommitter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|baseOutputCommitter
operator|=
name|baseOutputCommitter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|baseOutputCommitter
operator|.
name|abortTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|baseOutputCommitter
operator|.
name|commitTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|baseOutputCommitter
operator|.
name|needsTaskCommit
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|baseOutputCommitter
operator|.
name|setupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|baseOutputCommitter
operator|.
name|setupTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|JobStatus
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|RevisionManager
name|rm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|baseOutputCommitter
operator|.
name|abortJob
argument_list|(
name|jobContext
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|rm
operator|=
name|HBaseHCatStorageHandler
operator|.
name|getOpenedRevisionManager
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|abortWriteTransaction
argument_list|(
name|HBaseHCatStorageHandler
operator|.
name|getWriteTransaction
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanIntermediate
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|RevisionManager
name|rm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|baseOutputCommitter
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|srcPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|jobContext
argument_list|)
decl_stmt|;
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|srcPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|srcPath
operator|.
name|getName
argument_list|()
operator|+
literal|"_hfiles"
argument_list|)
decl_stmt|;
name|ImportSequenceFile
operator|.
name|runJob
argument_list|(
name|jobContext
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_OUTPUT_TABLE_NAME_KEY
argument_list|)
argument_list|,
name|srcPath
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|rm
operator|=
name|HBaseHCatStorageHandler
operator|.
name|getOpenedRevisionManager
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|commitWriteTransaction
argument_list|(
name|HBaseHCatStorageHandler
operator|.
name|getWriteTransaction
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cleanIntermediate
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|cleanIntermediate
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|jobContext
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

