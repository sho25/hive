begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|InputJobInfo
import|;
end_import

begin_comment
comment|/**  * This class HBaseInputFormat is a wrapper class of TableInputFormat in HBase.  */
end_comment

begin_class
class|class
name|HBaseInputFormat
extends|extends
name|InputFormat
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
implements|implements
name|Configurable
block|{
specifier|private
specifier|final
name|TableInputFormat
name|inputFormat
decl_stmt|;
specifier|private
specifier|final
name|InputJobInfo
name|jobInfo
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|HBaseInputFormat
parameter_list|(
name|InputJobInfo
name|jobInfo
parameter_list|)
block|{
name|inputFormat
operator|=
operator|new
name|TableInputFormat
argument_list|()
expr_stmt|;
name|this
operator|.
name|jobInfo
operator|=
name|jobInfo
expr_stmt|;
block|}
comment|/*      * @param instance of InputSplit      *      * @param instance of TaskAttemptContext      *      * @return RecordReader      *      * @throws IOException      *      * @throws InterruptedException      *      * @see      * org.apache.hadoop.mapreduce.InputFormat#createRecordReader(org.apache      * .hadoop.mapreduce.InputSplit,      * org.apache.hadoop.mapreduce.TaskAttemptContext)      */
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|tac
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|tableName
init|=
name|inputFormat
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|TableInputFormat
operator|.
name|INPUT_TABLE
argument_list|)
decl_stmt|;
name|TableSplit
name|tSplit
init|=
operator|(
name|TableSplit
operator|)
name|split
decl_stmt|;
name|HbaseSnapshotRecordReader
name|recordReader
init|=
operator|new
name|HbaseSnapshotRecordReader
argument_list|(
name|jobInfo
argument_list|)
decl_stmt|;
name|Scan
name|sc
init|=
operator|new
name|Scan
argument_list|(
name|inputFormat
operator|.
name|getScan
argument_list|()
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setStartRow
argument_list|(
name|tSplit
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setStopRow
argument_list|(
name|tSplit
operator|.
name|getEndRow
argument_list|()
argument_list|)
expr_stmt|;
name|recordReader
operator|.
name|setScan
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|recordReader
operator|.
name|setHTable
argument_list|(
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|recordReader
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|recordReader
return|;
block|}
comment|/*      * @param jobContext      *      * @return List of InputSplit      *      * @throws IOException      *      * @throws InterruptedException      *      * @see      * org.apache.hadoop.mapreduce.InputFormat#getSplits(org.apache.hadoop.mapreduce      * .JobContext)      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|tableName
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|TableInputFormat
operator|.
name|INPUT_TABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The input table is not set. The input splits cannot be created."
argument_list|)
throw|;
block|}
return|return
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|jobContext
argument_list|)
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|inputFormat
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Scan
name|getScan
parameter_list|()
block|{
return|return
name|inputFormat
operator|.
name|getScan
argument_list|()
return|;
block|}
specifier|public
name|void
name|setScan
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
name|inputFormat
operator|.
name|setScan
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
comment|/* @return      * @see org.apache.hadoop.conf.Configurable#getConf()      */
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
block|}
end_class

end_unit

