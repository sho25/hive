begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|tools
operator|.
name|generate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|BytesRefArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|BytesRefWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_comment
comment|/**  * Generate RCFile test data  *  */
end_comment

begin_class
specifier|public
class|class
name|RCFileGenerator
block|{
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Path
name|basedir
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|Properties
name|tbl
decl_stmt|;
specifier|private
specifier|static
name|Random
name|rand
decl_stmt|;
specifier|private
specifier|static
name|Path
name|getFile
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|filename
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|firstName
init|=
block|{
literal|"alice"
block|,
literal|"bob"
block|,
literal|"calvin"
block|,
literal|"david"
block|,
literal|"ethan"
block|,
literal|"fred"
block|,
literal|"gabriella"
block|,
literal|"holly"
block|,
literal|"irene"
block|,
literal|"jessica"
block|,
literal|"katie"
block|,
literal|"luke"
block|,
literal|"mike"
block|,
literal|"nick"
block|,
literal|"oscar"
block|,
literal|"priscilla"
block|,
literal|"quinn"
block|,
literal|"rachel"
block|,
literal|"sarah"
block|,
literal|"tom"
block|,
literal|"ulysses"
block|,
literal|"victor"
block|,
literal|"wendy"
block|,
literal|"xavier"
block|,
literal|"yuri"
block|,
literal|"zach"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|lastName
init|=
block|{
literal|"allen"
block|,
literal|"brown"
block|,
literal|"carson"
block|,
literal|"davidson"
block|,
literal|"ellison"
block|,
literal|"falkner"
block|,
literal|"garcia"
block|,
literal|"hernandez"
block|,
literal|"ichabod"
block|,
literal|"johnson"
block|,
literal|"king"
block|,
literal|"laertes"
block|,
literal|"miller"
block|,
literal|"nixon"
block|,
literal|"ovid"
block|,
literal|"polk"
block|,
literal|"quirinius"
block|,
literal|"robinson"
block|,
literal|"steinbeck"
block|,
literal|"thompson"
block|,
literal|"underhill"
block|,
literal|"van buren"
block|,
literal|"white"
block|,
literal|"xylophone"
block|,
literal|"young"
block|,
literal|"zipper"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
name|randomName
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|firstName
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|firstName
operator|.
name|length
argument_list|)
index|]
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|lastName
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|lastName
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|int
name|randomAge
parameter_list|()
block|{
return|return
name|rand
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
operator|+
literal|18
return|;
block|}
specifier|private
specifier|static
name|double
name|randomGpa
parameter_list|()
block|{
return|return
literal|4
operator|*
name|rand
operator|.
name|nextFloat
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|registration
init|=
block|{
literal|"democrat"
block|,
literal|"green"
block|,
literal|"independent"
block|,
literal|"libertarian"
block|,
literal|"republican"
block|,
literal|"socialist"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
name|randomRegistration
parameter_list|()
block|{
return|return
name|registration
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|registration
operator|.
name|length
argument_list|)
index|]
return|;
block|}
specifier|private
specifier|static
name|double
name|randomContribution
parameter_list|()
block|{
return|return
name|rand
operator|.
name|nextFloat
argument_list|()
operator|*
literal|1000
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|randomMap
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|len
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|'\u0002'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|firstName
index|[
name|rand
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
index|]
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\u0003'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|lastName
index|[
name|rand
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|randomArray
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|len
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|'\u0002'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|randomAge
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\u0003'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|randomName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: rcfilegen format number_of_rows "
operator|+
literal|"output_file plain_output_file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  format one of:  student voter alltypes"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|4
condition|)
name|usage
argument_list|()
expr_stmt|;
name|String
name|format
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|int
name|numRows
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRows
operator|<
literal|1
condition|)
name|usage
argument_list|()
expr_stmt|;
name|String
name|output
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
name|String
name|plainOutput
init|=
name|args
index|[
literal|3
index|]
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|basedir
operator|=
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|genData
argument_list|(
name|format
argument_list|,
name|numRows
argument_list|,
name|output
argument_list|,
name|plainOutput
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|genData
parameter_list|(
name|String
name|format
parameter_list|,
name|int
name|numRows
parameter_list|,
name|String
name|output
parameter_list|,
name|String
name|plainOutput
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numFields
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|equals
argument_list|(
literal|"student"
argument_list|)
condition|)
block|{
name|rand
operator|=
operator|new
name|Random
argument_list|(
name|numRows
argument_list|)
expr_stmt|;
name|numFields
operator|=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|.
name|equals
argument_list|(
literal|"voter"
argument_list|)
condition|)
block|{
name|rand
operator|=
operator|new
name|Random
argument_list|(
literal|1000000000
operator|+
name|numRows
argument_list|)
expr_stmt|;
name|numFields
operator|=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|.
name|equals
argument_list|(
literal|"alltypes"
argument_list|)
condition|)
block|{
name|rand
operator|=
operator|new
name|Random
argument_list|(
literal|2000000000L
operator|+
name|numRows
argument_list|)
expr_stmt|;
name|numFields
operator|=
literal|10
expr_stmt|;
block|}
name|RCFileOutputFormat
operator|.
name|setColumnNumber
argument_list|(
name|conf
argument_list|,
name|numFields
argument_list|)
expr_stmt|;
name|RCFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|RCFile
operator|.
name|Writer
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|getFile
argument_list|(
name|output
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|DefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|plainOutput
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numRows
condition|;
name|j
operator|++
control|)
block|{
name|BytesRefArrayWritable
name|row
init|=
operator|new
name|BytesRefArrayWritable
argument_list|(
name|numFields
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|fields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|equals
argument_list|(
literal|"student"
argument_list|)
condition|)
block|{
name|byte
index|[]
index|[]
name|f
init|=
block|{
name|randomName
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|randomAge
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|Double
operator|.
name|valueOf
argument_list|(
name|randomGpa
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|}
decl_stmt|;
name|fields
operator|=
name|f
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|.
name|equals
argument_list|(
literal|"voter"
argument_list|)
condition|)
block|{
name|byte
index|[]
index|[]
name|f
init|=
block|{
name|randomName
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|randomAge
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|randomRegistration
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|Double
operator|.
name|valueOf
argument_list|(
name|randomContribution
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|}
decl_stmt|;
name|fields
operator|=
name|f
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|.
name|equals
argument_list|(
literal|"alltypes"
argument_list|)
condition|)
block|{
name|byte
index|[]
index|[]
name|f
init|=
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|Long
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|Float
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextFloat
argument_list|()
operator|*
literal|1000
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|Double
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextDouble
argument_list|()
operator|*
literal|1000000
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|randomName
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
name|randomMap
argument_list|()
block|,
name|randomArray
argument_list|()
block|}
decl_stmt|;
name|fields
operator|=
name|f
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesRefWritable
name|field
init|=
operator|new
name|BytesRefWritable
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
name|row
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
operator|new
name|String
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|fields
operator|.
name|length
operator|-
literal|1
condition|)
name|pw
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
else|else
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

