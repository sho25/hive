begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|templeton
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Execute a local program.  This is a singleton service that will  * execute a programs on the local box.  */
end_comment

begin_class
specifier|public
class|class
name|TrivialExecService
block|{
specifier|private
specifier|static
specifier|volatile
name|TrivialExecService
name|theSingleton
decl_stmt|;
comment|/**      * Retrieve the singleton.      */
specifier|public
specifier|static
specifier|synchronized
name|TrivialExecService
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|theSingleton
operator|==
literal|null
condition|)
name|theSingleton
operator|=
operator|new
name|TrivialExecService
argument_list|()
expr_stmt|;
return|return
name|theSingleton
return|;
block|}
specifier|public
name|Process
name|run
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cmd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|removeEnv
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environmentVariables
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"templeton: starting "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"With environment variables: "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyVal
range|:
name|environmentVariables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|keyVal
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|keyVal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|removeEnv
control|)
name|pb
operator|.
name|environment
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|pb
operator|.
name|environment
argument_list|()
operator|.
name|putAll
argument_list|(
name|environmentVariables
argument_list|)
expr_stmt|;
return|return
name|pb
operator|.
name|start
argument_list|()
return|;
block|}
block|}
end_class

end_unit

