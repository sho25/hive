begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_comment
comment|/**  * Simple exception that will return a json error payload if thrown  * from a JAX web server.  We skip using WebApplicationException and  * instead map our own so that Jersey doesn't log our exceptions as  * error in the output log.  See SimpleExceptionMapper.  */
end_comment

begin_class
specifier|public
class|class
name|SimpleWebException
extends|extends
name|Throwable
block|{
specifier|public
name|int
name|httpCode
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
specifier|public
name|SimpleWebException
parameter_list|(
name|int
name|httpCode
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpCode
operator|=
name|httpCode
expr_stmt|;
block|}
specifier|public
name|SimpleWebException
parameter_list|(
name|int
name|httpCode
parameter_list|,
name|String
name|msg
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpCode
operator|=
name|httpCode
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
specifier|public
name|Response
name|getResponse
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|httpCode
argument_list|,
name|params
argument_list|,
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Response
name|buildMessage
parameter_list|(
name|int
name|httpCode
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|err
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|err
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
name|err
operator|.
name|putAll
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|json
init|=
literal|"\"error\""
decl_stmt|;
try|try
block|{
name|json
operator|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
return|return
name|Response
operator|.
name|status
argument_list|(
name|httpCode
argument_list|)
operator|.
name|entity
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

