begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|templeton
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_comment
comment|/**  * A description of the column to create.  */
end_comment

begin_class
annotation|@
name|XmlRootElement
specifier|public
class|class
name|ColumnDesc
extends|extends
name|GroupPermissionsDesc
block|{
specifier|public
name|String
name|name
decl_stmt|;
specifier|public
name|String
name|type
decl_stmt|;
specifier|public
name|String
name|comment
decl_stmt|;
specifier|public
name|ColumnDesc
parameter_list|()
block|{}
comment|/**      * Create a new ColumnDesc      */
specifier|public
name|ColumnDesc
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|comment
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"ColumnDesc(name=%s, type=%s, comment=%s)"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|comment
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ColumnDesc
operator|)
condition|)
return|return
literal|false
return|;
name|ColumnDesc
name|that
init|=
operator|(
name|ColumnDesc
operator|)
name|o
decl_stmt|;
return|return
name|xequals
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|that
operator|.
name|name
argument_list|)
operator|&&
name|xequals
argument_list|(
name|this
operator|.
name|type
argument_list|,
name|that
operator|.
name|type
argument_list|)
operator|&&
name|xequals
argument_list|(
name|this
operator|.
name|comment
argument_list|,
name|that
operator|.
name|comment
argument_list|)
operator|&&
name|super
operator|.
name|equals
argument_list|(
name|that
argument_list|)
return|;
block|}
block|}
end_class

end_unit

