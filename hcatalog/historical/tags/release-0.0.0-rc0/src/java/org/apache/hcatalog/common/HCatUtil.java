begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_class
specifier|public
class|class
name|HCatUtil
block|{
specifier|public
specifier|static
name|boolean
name|checkJobContextIfRunningFromBackend
parameter_list|(
name|JobContext
name|j
parameter_list|)
block|{
if|if
condition|(
name|j
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"mapred.task.id"
argument_list|,
literal|""
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|String
name|serialize
parameter_list|(
name|Serializable
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
try|try
block|{
name|ByteArrayOutputStream
name|serialObj
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|objStream
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|serialObj
argument_list|)
decl_stmt|;
name|objStream
operator|.
name|writeObject
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|objStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|encodeBytes
argument_list|(
name|serialObj
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Serialization error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|deserialize
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|ByteArrayInputStream
name|serialObj
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|decodeBytes
argument_list|(
name|str
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInputStream
name|objStream
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|serialObj
argument_list|)
decl_stmt|;
return|return
name|objStream
operator|.
name|readObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Deserialization error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|encodeBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|StringBuffer
name|strBuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|strBuf
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|bytes
index|[
name|i
index|]
operator|>>
literal|4
operator|)
operator|&
literal|0xF
operator|)
operator|+
operator|(
literal|'a'
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|strBuf
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|bytes
index|[
name|i
index|]
operator|)
operator|&
literal|0xF
operator|)
operator|+
operator|(
literal|'a'
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|strBuf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decodeBytes
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|str
operator|.
name|length
argument_list|()
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|char
name|c
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bytes
index|[
name|i
operator|/
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|c
operator|-
literal|'a'
operator|)
operator|<<
literal|4
argument_list|)
expr_stmt|;
name|c
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|bytes
index|[
name|i
operator|/
literal|2
index|]
operator|+=
operator|(
name|c
operator|-
literal|'a'
operator|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|getHCatFieldSchemaList
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
parameter_list|)
throws|throws
name|HCatException
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|f
range|:
name|fields
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|public
specifier|static
name|HCatSchema
name|extractSchemaFromStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
throws|throws
name|HCatException
block|{
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
literal|"Cannot construct partition info from an empty storage descriptor."
argument_list|)
throw|;
block|}
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
name|HCatUtil
operator|.
name|getHCatFieldSchemaList
argument_list|(
name|sd
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|schema
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldSchemaList
parameter_list|(
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|howlFields
parameter_list|)
block|{
if|if
condition|(
name|howlFields
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|f
range|:
name|howlFields
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getFieldSchema
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|public
specifier|static
name|Table
name|getTable
parameter_list|(
name|HiveMetaStoreClient
name|client
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HCatSchema
name|getTableSchemaWithPtnCols
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|HCatSchema
name|tableSchema
init|=
name|extractSchemaFromStorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// add partition keys to table schema
comment|// NOTE : this assumes that we do not ever have ptn keys as columns inside the table schema as well!
for|for
control|(
name|FieldSchema
name|fs
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|tableSchema
operator|.
name|append
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatFieldSchema
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableSchema
return|;
block|}
comment|/**    * Validate partition schema, checks if the column types match between the partition    * and the existing table schema. Returns the list of columns present in the partition    * but not in the table.    * @param table the table    * @param partitionSchema the partition schema    * @return the list of newly added fields    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|validatePartitionSchema
parameter_list|(
name|Table
name|table
parameter_list|,
name|HCatSchema
name|partitionSchema
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FieldSchema
argument_list|>
name|partitionKeyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|partitionKeyMap
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|tableCols
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newFields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionSchema
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldSchema
name|field
init|=
name|HCatSchemaUtils
operator|.
name|getFieldSchema
argument_list|(
name|partitionSchema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|FieldSchema
name|tableField
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|tableCols
operator|.
name|size
argument_list|()
condition|)
block|{
name|tableField
operator|=
name|tableCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tableField
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_SCHEMA_COLUMN_MISMATCH
argument_list|,
literal|"Expected column<"
operator|+
name|tableField
operator|.
name|getName
argument_list|()
operator|+
literal|"> at position "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|", found column<"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|">"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|tableField
operator|=
name|partitionKeyMap
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableField
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_SCHEMA_PARTITION_KEY
argument_list|,
literal|"Key<"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|">"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|tableField
operator|==
literal|null
condition|)
block|{
comment|//field present in partition but not in table
name|newFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//field present in both. validate type has not changed
name|TypeInfo
name|partitionType
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|TypeInfo
name|tableType
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|tableField
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|partitionType
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_SCHEMA_TYPE_MISMATCH
argument_list|,
literal|"Column<"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|">, expected<"
operator|+
name|tableType
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">, got<"
operator|+
name|partitionType
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|newFields
return|;
block|}
comment|/**    * Test if the first FsAction is more permissive than the second. This is useful in cases where    * we want to ensure that a file owner has more permissions than the group they belong to, for eg.    * More completely(but potentially more cryptically)    *  owner-r>= group-r>= world-r : bitwise and-masked with 0444 => 444>= 440>= 400>= 000    *  owner-w>= group-w>= world-w : bitwise and-masked with&0222 => 222>= 220>= 200>= 000    *  owner-x>= group-x>= world-x : bitwise and-masked with&0111 => 111>= 110>= 100>= 000    * @return true if first FsAction is more permissive than the second, false if not.    */
specifier|public
specifier|static
name|boolean
name|validateMorePermissive
parameter_list|(
name|FsAction
name|first
parameter_list|,
name|FsAction
name|second
parameter_list|)
block|{
if|if
condition|(
operator|(
name|first
operator|==
name|FsAction
operator|.
name|ALL
operator|)
operator|||
operator|(
name|second
operator|==
name|FsAction
operator|.
name|NONE
operator|)
operator|||
operator|(
name|first
operator|==
name|second
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
switch|switch
condition|(
name|first
condition|)
block|{
case|case
name|READ_EXECUTE
case|:
return|return
operator|(
operator|(
name|second
operator|==
name|FsAction
operator|.
name|READ
operator|)
operator|||
operator|(
name|second
operator|==
name|FsAction
operator|.
name|EXECUTE
operator|)
operator|)
return|;
case|case
name|READ_WRITE
case|:
return|return
operator|(
operator|(
name|second
operator|==
name|FsAction
operator|.
name|READ
operator|)
operator|||
operator|(
name|second
operator|==
name|FsAction
operator|.
name|WRITE
operator|)
operator|)
return|;
case|case
name|WRITE_EXECUTE
case|:
return|return
operator|(
operator|(
name|second
operator|==
name|FsAction
operator|.
name|WRITE
operator|)
operator|||
operator|(
name|second
operator|==
name|FsAction
operator|.
name|EXECUTE
operator|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Ensure that read or write permissions are not granted without also granting execute permissions.    * Essentially, r-- , rw- and -w- are invalid,    * r-x, -wx, rwx, ---, --x are valid    *    * @param perms The FsAction to verify    * @return true if the presence of read or write permission is accompanied by execute permissions    */
specifier|public
specifier|static
name|boolean
name|validateExecuteBitPresentIfReadOrWrite
parameter_list|(
name|FsAction
name|perms
parameter_list|)
block|{
if|if
condition|(
operator|(
name|perms
operator|==
name|FsAction
operator|.
name|READ
operator|)
operator|||
operator|(
name|perms
operator|==
name|FsAction
operator|.
name|WRITE
operator|)
operator|||
operator|(
name|perms
operator|==
name|FsAction
operator|.
name|READ_WRITE
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

