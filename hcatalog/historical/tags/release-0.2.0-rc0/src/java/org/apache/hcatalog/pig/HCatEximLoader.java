begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatBaseInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatEximInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|LoadFunc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ResourceSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|UDFContext
import|;
end_import

begin_comment
comment|/**  * Pig {@link LoadFunc} to read data/metadata from hcatalog exported location  */
end_comment

begin_class
specifier|public
class|class
name|HCatEximLoader
extends|extends
name|HCatBaseLoader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HCatEximLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HCatSchema
name|tableSchema
decl_stmt|;
specifier|private
name|HCatSchema
name|partitionSchema
decl_stmt|;
specifier|private
name|HCatEximInputFormat
name|inputFormat
decl_stmt|;
specifier|public
name|HCatEximLoader
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HCatEximLoader ctored"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceSchema
name|getSchema
parameter_list|(
name|String
name|location
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getSchema with location :"
operator|+
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableSchema
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|HCatSchema
argument_list|>
name|rv
init|=
name|HCatEximInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|location
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tableSchema
operator|=
name|rv
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partitionSchema
operator|=
name|rv
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getSchema got schema :"
operator|+
name|tableSchema
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|colsPlusPartKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|colsPlusPartKeys
operator|.
name|addAll
argument_list|(
name|tableSchema
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|colsPlusPartKeys
operator|.
name|addAll
argument_list|(
name|partitionSchema
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|outputSchema
operator|=
operator|new
name|HCatSchema
argument_list|(
name|colsPlusPartKeys
argument_list|)
expr_stmt|;
return|return
name|PigHCatUtil
operator|.
name|getResourceSchema
argument_list|(
name|outputSchema
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getPartitionKeys
parameter_list|(
name|String
name|location
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"getPartitionKeys with location :"
operator|+
name|location
argument_list|)
expr_stmt|;
comment|/*     if (tableSchema == null) {       List<HCatSchema> rv = HCatEximInputFormat.setInput(job, location, null);       tableSchema = rv.get(0);       partitionSchema = rv.get(1);     }     return partitionSchema.getFieldNames().toArray(new String[0]);     */
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPartitionFilter
parameter_list|(
name|Expression
name|partitionFilter
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"setPartitionFilter with filter :"
operator|+
name|partitionFilter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"setLocation with location :"
operator|+
name|location
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatSchema
argument_list|>
name|rv
init|=
name|HCatEximInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|location
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tableSchema
operator|=
name|rv
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partitionSchema
operator|=
name|rv
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|colsPlusPartKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|colsPlusPartKeys
operator|.
name|addAll
argument_list|(
name|tableSchema
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|colsPlusPartKeys
operator|.
name|addAll
argument_list|(
name|partitionSchema
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|outputSchema
operator|=
operator|new
name|HCatSchema
argument_list|(
name|colsPlusPartKeys
argument_list|)
expr_stmt|;
name|UDFContext
name|udfContext
init|=
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|udfContext
operator|.
name|getUDFProperties
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|signature
block|}
argument_list|)
decl_stmt|;
name|RequiredFieldList
name|requiredFieldsInfo
init|=
operator|(
name|RequiredFieldList
operator|)
name|props
operator|.
name|get
argument_list|(
name|PRUNE_PROJECTION_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredFieldsInfo
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
name|fcols
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RequiredField
name|rf
range|:
name|requiredFieldsInfo
operator|.
name|getFields
argument_list|()
control|)
block|{
name|fcols
operator|.
name|add
argument_list|(
name|tableSchema
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
name|rf
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outputSchema
operator|=
operator|new
name|HCatSchema
argument_list|(
name|fcols
argument_list|)
expr_stmt|;
try|try
block|{
name|HCatBaseInputFormat
operator|.
name|setOutputSchema
argument_list|(
name|job
argument_list|,
name|outputSchema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputFormat
name|getInputFormat
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputFormat
operator|==
literal|null
condition|)
block|{
name|inputFormat
operator|=
operator|new
name|HCatEximInputFormat
argument_list|()
expr_stmt|;
block|}
return|return
name|inputFormat
return|;
block|}
block|}
end_class

end_unit

