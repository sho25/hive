begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
operator|.
name|Type
import|;
end_import

begin_class
specifier|public
class|class
name|HCatSchemaUtils
block|{
specifier|private
specifier|static
name|HCatSchemaUtils
name|ref
init|=
operator|new
name|HCatSchemaUtils
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|CollectionBuilder
name|getStructSchemaBuilder
parameter_list|()
block|{
return|return
name|ref
operator|.
expr|new
name|CollectionBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|CollectionBuilder
name|getListSchemaBuilder
parameter_list|()
block|{
return|return
name|ref
operator|.
expr|new
name|CollectionBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|MapBuilder
name|getMapSchemaBuilder
parameter_list|()
block|{
return|return
name|ref
operator|.
expr|new
name|MapBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|abstract
class|class
name|HCatSchemaBuilder
block|{
specifier|public
specifier|abstract
name|HCatSchema
name|build
parameter_list|()
throws|throws
name|HCatException
function_decl|;
block|}
specifier|public
class|class
name|CollectionBuilder
extends|extends
name|HCatSchemaBuilder
block|{
comment|// for STRUCTS(multiple-add-calls) and LISTS(single-add-call)
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|fieldSchemas
init|=
literal|null
decl_stmt|;
name|CollectionBuilder
parameter_list|()
block|{
name|fieldSchemas
operator|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|CollectionBuilder
name|addField
parameter_list|(
name|FieldSchema
name|fieldSchema
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
name|this
operator|.
name|addField
argument_list|(
name|getHCatFieldSchema
argument_list|(
name|fieldSchema
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|CollectionBuilder
name|addField
parameter_list|(
name|HCatFieldSchema
name|fieldColumnSchema
parameter_list|)
block|{
name|fieldSchemas
operator|.
name|add
argument_list|(
name|fieldColumnSchema
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|HCatSchema
name|build
parameter_list|()
throws|throws
name|HCatException
block|{
return|return
operator|new
name|HCatSchema
argument_list|(
name|fieldSchemas
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|MapBuilder
extends|extends
name|HCatSchemaBuilder
block|{
name|Type
name|keyType
init|=
literal|null
decl_stmt|;
name|HCatSchema
name|valueSchema
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|HCatSchema
name|build
parameter_list|()
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|fslist
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|fslist
operator|.
name|add
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|null
argument_list|,
name|Type
operator|.
name|MAP
argument_list|,
name|keyType
argument_list|,
name|valueSchema
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|HCatSchema
argument_list|(
name|fslist
argument_list|)
return|;
block|}
specifier|public
name|MapBuilder
name|withValueSchema
parameter_list|(
name|HCatSchema
name|valueSchema
parameter_list|)
block|{
name|this
operator|.
name|valueSchema
operator|=
name|valueSchema
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MapBuilder
name|withKeyType
parameter_list|(
name|Type
name|keyType
parameter_list|)
block|{
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Convert a HCatFieldSchema to a FieldSchema      * @param fs FieldSchema to convert      * @return HCatFieldSchema representation of FieldSchema      * @throws HCatException      */
specifier|public
specifier|static
name|HCatFieldSchema
name|getHCatFieldSchema
parameter_list|(
name|FieldSchema
name|fs
parameter_list|)
throws|throws
name|HCatException
block|{
name|String
name|fieldName
init|=
name|fs
operator|.
name|getName
argument_list|()
decl_stmt|;
name|TypeInfo
name|baseTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|fs
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getHCatFieldSchema
argument_list|(
name|fieldName
argument_list|,
name|baseTypeInfo
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HCatFieldSchema
name|getHCatFieldSchema
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TypeInfo
name|fieldTypeInfo
parameter_list|)
throws|throws
name|HCatException
block|{
name|Category
name|typeCategory
init|=
name|fieldTypeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|Category
operator|.
name|PRIMITIVE
operator|==
name|typeCategory
condition|)
block|{
return|return
operator|new
name|HCatFieldSchema
argument_list|(
name|fieldName
argument_list|,
name|getPrimitiveHType
argument_list|(
name|fieldTypeInfo
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Category
operator|.
name|STRUCT
operator|==
name|typeCategory
condition|)
block|{
name|HCatSchema
name|subSchema
init|=
name|constructHCatSchema
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|fieldTypeInfo
argument_list|)
decl_stmt|;
return|return
operator|new
name|HCatFieldSchema
argument_list|(
name|fieldName
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRUCT
argument_list|,
name|subSchema
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Category
operator|.
name|LIST
operator|==
name|typeCategory
condition|)
block|{
name|HCatSchema
name|subSchema
init|=
name|getHCatSchema
argument_list|(
operator|(
operator|(
name|ListTypeInfo
operator|)
name|fieldTypeInfo
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HCatFieldSchema
argument_list|(
name|fieldName
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|ARRAY
argument_list|,
name|subSchema
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Category
operator|.
name|MAP
operator|==
name|typeCategory
condition|)
block|{
name|HCatFieldSchema
operator|.
name|Type
name|mapKeyType
init|=
name|getPrimitiveHType
argument_list|(
operator|(
operator|(
name|MapTypeInfo
operator|)
name|fieldTypeInfo
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|HCatSchema
name|subSchema
init|=
name|getHCatSchema
argument_list|(
operator|(
operator|(
name|MapTypeInfo
operator|)
name|fieldTypeInfo
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HCatFieldSchema
argument_list|(
name|fieldName
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|MAP
argument_list|,
name|mapKeyType
argument_list|,
name|subSchema
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|TypeNotPresentException
argument_list|(
name|fieldTypeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Type
name|getPrimitiveHType
parameter_list|(
name|TypeInfo
name|basePrimitiveTypeInfo
parameter_list|)
block|{
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|basePrimitiveTypeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|Type
operator|.
name|BOOLEAN
return|;
case|case
name|BYTE
case|:
return|return
name|Type
operator|.
name|TINYINT
return|;
case|case
name|DOUBLE
case|:
return|return
name|Type
operator|.
name|DOUBLE
return|;
case|case
name|FLOAT
case|:
return|return
name|Type
operator|.
name|FLOAT
return|;
case|case
name|INT
case|:
return|return
name|Type
operator|.
name|INT
return|;
case|case
name|LONG
case|:
return|return
name|Type
operator|.
name|BIGINT
return|;
case|case
name|SHORT
case|:
return|return
name|Type
operator|.
name|SMALLINT
return|;
case|case
name|STRING
case|:
return|return
name|Type
operator|.
name|STRING
return|;
case|case
name|BINARY
case|:
return|return
name|Type
operator|.
name|BINARY
return|;
default|default:
throw|throw
operator|new
name|TypeNotPresentException
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|basePrimitiveTypeInfo
operator|)
operator|.
name|getTypeName
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|HCatSchema
name|getHCatSchema
parameter_list|(
name|Schema
name|schema
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
name|getHCatSchema
argument_list|(
name|schema
operator|.
name|getFieldSchemas
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HCatSchema
name|getHCatSchema
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|FieldSchema
argument_list|>
name|fslist
parameter_list|)
throws|throws
name|HCatException
block|{
name|CollectionBuilder
name|builder
init|=
name|getStructSchemaBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fieldSchema
range|:
name|fslist
control|)
block|{
name|builder
operator|.
name|addField
argument_list|(
name|fieldSchema
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|HCatSchema
name|constructHCatSchema
parameter_list|(
name|StructTypeInfo
name|stypeInfo
parameter_list|)
throws|throws
name|HCatException
block|{
name|CollectionBuilder
name|builder
init|=
name|getStructSchemaBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
operator|(
operator|(
name|StructTypeInfo
operator|)
name|stypeInfo
operator|)
operator|.
name|getAllStructFieldNames
argument_list|()
control|)
block|{
name|builder
operator|.
name|addField
argument_list|(
name|getHCatFieldSchema
argument_list|(
name|fieldName
argument_list|,
operator|(
operator|(
name|StructTypeInfo
operator|)
name|stypeInfo
operator|)
operator|.
name|getStructFieldTypeInfo
argument_list|(
name|fieldName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|HCatSchema
name|getHCatSchema
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
throws|throws
name|HCatException
block|{
name|Category
name|typeCategory
init|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|Category
operator|.
name|PRIMITIVE
operator|==
name|typeCategory
condition|)
block|{
return|return
name|getStructSchemaBuilder
argument_list|()
operator|.
name|addField
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|null
argument_list|,
name|getPrimitiveHType
argument_list|(
name|typeInfo
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Category
operator|.
name|STRUCT
operator|==
name|typeCategory
condition|)
block|{
name|HCatSchema
name|subSchema
init|=
name|constructHCatSchema
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
argument_list|)
decl_stmt|;
return|return
name|getStructSchemaBuilder
argument_list|()
operator|.
name|addField
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|null
argument_list|,
name|Type
operator|.
name|STRUCT
argument_list|,
name|subSchema
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Category
operator|.
name|LIST
operator|==
name|typeCategory
condition|)
block|{
name|CollectionBuilder
name|builder
init|=
name|getStructSchemaBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addField
argument_list|(
name|getHCatFieldSchema
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Category
operator|.
name|MAP
operator|==
name|typeCategory
condition|)
block|{
name|HCatFieldSchema
operator|.
name|Type
name|mapKeyType
init|=
name|getPrimitiveHType
argument_list|(
operator|(
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|HCatSchema
name|subSchema
init|=
name|getHCatSchema
argument_list|(
operator|(
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|MapBuilder
name|builder
init|=
name|getMapSchemaBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|withKeyType
argument_list|(
name|mapKeyType
argument_list|)
operator|.
name|withValueSchema
argument_list|(
name|subSchema
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|TypeNotPresentException
argument_list|(
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|HCatSchema
name|getHCatSchemaFromTypeString
parameter_list|(
name|String
name|typeString
parameter_list|)
throws|throws
name|HCatException
block|{
return|return
name|getHCatSchema
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeString
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HCatSchema
name|getHCatSchema
parameter_list|(
name|String
name|schemaString
parameter_list|)
throws|throws
name|HCatException
block|{
if|if
condition|(
operator|(
name|schemaString
operator|==
literal|null
operator|)
operator|||
operator|(
name|schemaString
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
operator|new
name|HCatSchema
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
argument_list|)
return|;
comment|// empty HSchema construct
block|}
name|HCatSchema
name|outerSchema
init|=
name|getHCatSchemaFromTypeString
argument_list|(
literal|"struct<"
operator|+
name|schemaString
operator|+
literal|">"
argument_list|)
decl_stmt|;
return|return
name|outerSchema
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStructSubSchema
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|FieldSchema
name|getFieldSchema
parameter_list|(
name|HCatFieldSchema
name|hcatFieldSchema
parameter_list|)
block|{
return|return
operator|new
name|FieldSchema
argument_list|(
name|hcatFieldSchema
operator|.
name|getName
argument_list|()
argument_list|,
name|hcatFieldSchema
operator|.
name|getTypeString
argument_list|()
argument_list|,
name|hcatFieldSchema
operator|.
name|getComment
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldSchemas
parameter_list|(
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|hcatFieldSchemas
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|lfs
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|hfs
range|:
name|hcatFieldSchemas
control|)
block|{
name|lfs
operator|.
name|add
argument_list|(
name|getFieldSchema
argument_list|(
name|hfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|lfs
return|;
block|}
block|}
end_class

end_unit

