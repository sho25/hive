begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|rcfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|BytesRefArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|BytesRefWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|ErrorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatInputStorageDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputStorageDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|rcfile
operator|.
name|RCFileInputDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|rcfile
operator|.
name|RCFileOutputDriver
import|;
end_import

begin_class
specifier|public
class|class
name|TestRCFileOutputStorageDriver
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testConversion
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobContext
name|jc
init|=
operator|new
name|JobContext
argument_list|(
name|conf
argument_list|,
operator|new
name|JobID
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|jobString
init|=
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|OutputJobInfo
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|jc
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|,
name|jobString
argument_list|)
expr_stmt|;
name|HCatSchema
name|schema
init|=
name|buildHiveSchema
argument_list|()
decl_stmt|;
name|HCatInputStorageDriver
name|isd
init|=
operator|new
name|RCFileInputDriver
argument_list|()
decl_stmt|;
name|isd
operator|.
name|setOriginalSchema
argument_list|(
name|jc
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|isd
operator|.
name|setOutputSchema
argument_list|(
name|jc
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|isd
operator|.
name|initialize
argument_list|(
name|jc
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|byteArray
init|=
name|buildBytesArray
argument_list|()
decl_stmt|;
name|BytesRefArrayWritable
name|bytesWritable
init|=
operator|new
name|BytesRefArrayWritable
argument_list|(
name|byteArray
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|byteArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesRefWritable
name|cu
init|=
operator|new
name|BytesRefWritable
argument_list|(
name|byteArray
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|byteArray
index|[
name|i
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
name|bytesWritable
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|cu
argument_list|)
expr_stmt|;
block|}
comment|//Convert byte array to HCatRecord using isd, convert hcatrecord back to byte array
comment|//using osd, compare the two arrays
name|HCatRecord
name|record
init|=
name|isd
operator|.
name|convertToHCatRecord
argument_list|(
literal|null
argument_list|,
name|bytesWritable
argument_list|)
decl_stmt|;
name|HCatOutputStorageDriver
name|osd
init|=
operator|new
name|RCFileOutputDriver
argument_list|()
decl_stmt|;
name|osd
operator|.
name|setSchema
argument_list|(
name|jc
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|osd
operator|.
name|initialize
argument_list|(
name|jc
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRefArrayWritable
name|bytesWritableOutput
init|=
operator|(
name|BytesRefArrayWritable
operator|)
name|osd
operator|.
name|convertValue
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bytesWritableOutput
operator|.
name|compareTo
argument_list|(
name|bytesWritable
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|buildBytesArray
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|byte
index|[]
index|[]
name|bytes
init|=
block|{
literal|"123"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
literal|"456"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
literal|"789"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
literal|"1000"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
literal|"5.3"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
literal|"hcat and hadoop"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|,
operator|new
name|byte
index|[
literal|0
index|]
block|,
literal|"\\N"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
block|}
decl_stmt|;
return|return
name|bytes
return|;
block|}
specifier|private
name|HCatSchema
name|buildHiveSchema
parameter_list|()
throws|throws
name|HCatException
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"atinyint"
argument_list|,
literal|"tinyint"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"asmallint"
argument_list|,
literal|"smallint"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"aint"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"along"
argument_list|,
literal|"bigint"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"adouble"
argument_list|,
literal|"double"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"astring"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"anullint"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"anullstring"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|HCatSchema
argument_list|(
name|HCatUtil
operator|.
name|getHCatFieldSchemaList
argument_list|(
name|fields
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

