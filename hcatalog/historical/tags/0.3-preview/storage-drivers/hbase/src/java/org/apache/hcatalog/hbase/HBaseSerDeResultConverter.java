begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|LazyHBaseRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|DefaultHCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Implementation of ResultConverter using HBaseSerDe  * mapping between HBase schema and HCatRecord schema is defined by  * {@link HBaseConstants.PROPERTY_COLUMN_MAPPING_KEY}  */
end_comment

begin_class
class|class
name|HBaseSerDeResultConverter
implements|implements
name|ResultConverter
block|{
specifier|private
name|HBaseSerDe
name|serDe
decl_stmt|;
specifier|private
name|HCatSchema
name|schema
decl_stmt|;
specifier|private
name|HCatSchema
name|outputSchema
decl_stmt|;
specifier|private
name|StructObjectInspector
name|hCatRecordOI
decl_stmt|;
specifier|private
name|StructObjectInspector
name|lazyHBaseRowOI
decl_stmt|;
specifier|private
name|String
name|hbaseColumnMapping
decl_stmt|;
specifier|private
specifier|final
name|Long
name|outputVersion
decl_stmt|;
comment|/**      * @param schema table schema      * @param outputSchema schema of projected output      * @param hcatProperties table properties      * @throws IOException thrown if hive's HBaseSerDe couldn't be initialized      */
name|HBaseSerDeResultConverter
parameter_list|(
name|HCatSchema
name|schema
parameter_list|,
name|HCatSchema
name|outputSchema
parameter_list|,
name|Properties
name|hcatProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|hbaseColumnMapping
operator|=
name|hcatProperties
operator|.
name|getProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_COLUMN_MAPPING_KEY
argument_list|)
expr_stmt|;
name|hcatProperties
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
name|hbaseColumnMapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|hcatProperties
operator|.
name|containsKey
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_OUTPUT_VERSION_KEY
argument_list|)
condition|)
name|outputVersion
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|hcatProperties
operator|.
name|getProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_OUTPUT_VERSION_KEY
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|outputVersion
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
if|if
condition|(
name|outputSchema
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|outputSchema
operator|=
name|schema
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|outputSchema
operator|=
name|outputSchema
expr_stmt|;
block|}
name|hCatRecordOI
operator|=
name|createStructObjectInspector
argument_list|()
expr_stmt|;
try|try
block|{
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|hcatProperties
argument_list|)
expr_stmt|;
name|lazyHBaseRowOI
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"SerDe initialization failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Put
name|convert
parameter_list|(
name|HCatRecord
name|record
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|//small hack to explicitly specify timestamp/version number to use
comment|//since HBaseSerDe does not support specifying it
comment|//will have to decide whether we will write our own or contribute code
comment|//for the SerDe
name|Put
name|put
init|=
operator|(
name|Put
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|record
operator|.
name|getAll
argument_list|()
argument_list|,
name|hCatRecordOI
argument_list|)
decl_stmt|;
name|Put
name|res
decl_stmt|;
if|if
condition|(
name|outputVersion
operator|==
literal|null
condition|)
block|{
name|res
operator|=
name|put
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|new
name|Put
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|,
name|outputVersion
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|row
range|:
name|put
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|KeyValue
name|el
range|:
name|row
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|el
operator|.
name|getFamily
argument_list|()
argument_list|,
name|el
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|el
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|res
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"serialization failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HCatRecord
name|convert
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Deserialize bytesRefArray into struct and then convert that struct to
comment|// HCatRecord.
name|LazyHBaseRow
name|struct
decl_stmt|;
try|try
block|{
name|struct
operator|=
operator|(
name|LazyHBaseRow
operator|)
name|serDe
operator|.
name|deserialize
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|outList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|outputSchema
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colName
decl_stmt|;
name|Integer
name|index
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|col
range|:
name|outputSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
name|colName
operator|=
name|col
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|index
operator|=
name|outputSchema
operator|.
name|getPosition
argument_list|(
name|colName
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|StructField
name|field
init|=
name|lazyHBaseRowOI
operator|.
name|getStructFieldRef
argument_list|(
name|colName
argument_list|)
decl_stmt|;
name|outList
operator|.
name|add
argument_list|(
name|getTypedObj
argument_list|(
name|lazyHBaseRowOI
operator|.
name|getStructFieldData
argument_list|(
name|struct
argument_list|,
name|field
argument_list|)
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DefaultHCatRecord
argument_list|(
name|outList
argument_list|)
return|;
block|}
specifier|private
name|Object
name|getTypedObj
parameter_list|(
name|Object
name|data
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The real work-horse method. We are gobbling up all the laziness benefits
comment|// of Hive-LazyHBaseRow by deserializing everything and creating crisp  HCatRecord
comment|// with crisp Java objects inside it. We have to do it because higher layer
comment|// may not know how to do it.
comment|//TODO leverage laziness of SerDe
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|data
argument_list|)
return|;
case|case
name|MAP
case|:
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyMap
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|ObjectInspector
name|keyOI
init|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valOI
init|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|typedMap
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|lazyMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
range|:
name|lazyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|typedMap
operator|.
name|put
argument_list|(
name|getTypedObj
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyOI
argument_list|)
argument_list|,
name|getTypedObj
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|valOI
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|typedMap
return|;
case|case
name|LIST
case|:
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|lazyList
init|=
name|loi
operator|.
name|getList
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|ObjectInspector
name|elemOI
init|=
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|typedList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|lazyList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|itr
init|=
name|lazyList
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|typedList
operator|.
name|add
argument_list|(
name|getTypedObj
argument_list|(
name|itr
operator|.
name|next
argument_list|()
argument_list|,
name|elemOI
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|typedList
return|;
case|case
name|STRUCT
case|:
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|typedStruct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|typedStruct
operator|.
name|add
argument_list|(
name|getTypedObj
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|data
argument_list|,
name|field
argument_list|)
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|typedStruct
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Don't know how to deserialize: "
operator|+
name|oi
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|StructObjectInspector
name|createStructObjectInspector
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|outputSchema
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid output schema specified"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|hcatFieldSchema
range|:
name|outputSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
name|TypeInfo
name|type
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|hcatFieldSchema
operator|.
name|getTypeString
argument_list|()
argument_list|)
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
name|hcatFieldSchema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldInspectors
operator|.
name|add
argument_list|(
name|getObjectInspector
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|structInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldInspectors
argument_list|)
decl_stmt|;
return|return
name|structInspector
return|;
block|}
specifier|private
name|ObjectInspector
name|getObjectInspector
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|PrimitiveTypeInfo
name|primitiveType
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|type
decl_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|primitiveType
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
return|;
case|case
name|MAP
case|:
name|MapTypeInfo
name|mapType
init|=
operator|(
name|MapTypeInfo
operator|)
name|type
decl_stmt|;
name|MapObjectInspector
name|mapInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|getObjectInspector
argument_list|(
name|mapType
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
argument_list|,
name|getObjectInspector
argument_list|(
name|mapType
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|mapInspector
return|;
case|case
name|LIST
case|:
name|ListTypeInfo
name|listType
init|=
operator|(
name|ListTypeInfo
operator|)
name|type
decl_stmt|;
name|ListObjectInspector
name|listInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|getObjectInspector
argument_list|(
name|listType
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|listInspector
return|;
case|case
name|STRUCT
case|:
name|StructTypeInfo
name|structType
init|=
operator|(
name|StructTypeInfo
operator|)
name|type
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypes
init|=
name|structType
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeInfo
name|fieldType
range|:
name|fieldTypes
control|)
block|{
name|fieldInspectors
operator|.
name|add
argument_list|(
name|getObjectInspector
argument_list|(
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|structInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|structType
operator|.
name|getAllStructFieldNames
argument_list|()
argument_list|,
name|fieldInspectors
argument_list|)
decl_stmt|;
return|return
name|structInspector
return|;
default|default :
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown field schema type"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getHBaseScanColumns
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|hbaseColumnMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HBase column mapping found to be null."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|outputFieldNames
init|=
name|this
operator|.
name|outputSchema
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|outputColumnMapping
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|outputFieldNames
control|)
block|{
name|int
name|position
init|=
name|schema
operator|.
name|getPosition
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|outputColumnMapping
operator|.
name|add
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnQualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HBaseSerDe
operator|.
name|parseColumnMapping
argument_list|(
name|hbaseColumnMapping
argument_list|,
name|columnFamilies
argument_list|,
literal|null
argument_list|,
name|columnQualifiers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputColumnMapping
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cfIndex
init|=
name|outputColumnMapping
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|cf
init|=
name|columnFamilies
operator|.
name|get
argument_list|(
name|cfIndex
argument_list|)
decl_stmt|;
comment|// We skip the key column.
if|if
condition|(
name|cf
operator|.
name|equals
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_KEY_COL
argument_list|)
operator|==
literal|false
condition|)
block|{
name|String
name|qualifier
init|=
name|columnQualifiers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

