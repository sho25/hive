begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Storage driver which works with {@link HBaseBulkOutputFormat} and makes use  * of HBase's "bulk load" feature to get data into HBase. This should be  * efficient for large batch writes in comparison to HBaseDirectOutputStorageDriver.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseBulkOutputStorageDriver
extends|extends
name|HBaseBaseOutputStorageDriver
block|{
specifier|private
name|String
name|PROPERTY_TABLE_LOCATION
init|=
literal|"hcat.hbase.mapreduce.table.location"
decl_stmt|;
specifier|private
name|String
name|PROPERTY_INT_OUTPUT_LOCATION
init|=
literal|"hcat.hbase.mapreduce.intermediateOutputLocation"
decl_stmt|;
specifier|private
name|OutputFormat
name|outputFormat
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ImmutableBytesWritable
name|EMPTY_KEY
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|Properties
name|hcatProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|context
argument_list|,
name|hcatProperties
argument_list|)
expr_stmt|;
comment|//initialize() gets called multiple time in the lifecycle of an MR job, client, mapper, reducer, etc
comment|//depending on the case we have to make sure for some context variables we set here that they don't get set again
if|if
condition|(
operator|!
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|PROPERTY_INT_OUTPUT_LOCATION
argument_list|)
condition|)
block|{
name|String
name|tableLocation
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_TABLE_LOCATION
argument_list|)
decl_stmt|;
name|String
name|location
init|=
operator|new
name|Path
argument_list|(
name|tableLocation
argument_list|,
literal|"REVISION_"
operator|+
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_OUTPUT_VERSION_KEY
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|PROPERTY_INT_OUTPUT_LOCATION
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|//We are writing out an intermediate sequenceFile hence location is not passed in OutputJobInfo.getLocation()
comment|//TODO replace this with a mapreduce constant when available
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"mapred.output.dir"
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|//Temporary fix until support for secure hbase is available
comment|//We need the intermediate directory to be world readable
comment|//so that the hbase user can import the generated hfiles
if|if
condition|(
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hadoop.security.authorization"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|tableLocation
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"drwx--x--x"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Table's parent directories must at least have global execute permissions."
argument_list|)
throw|;
block|}
block|}
block|}
name|outputFormat
operator|=
operator|new
name|HBaseBulkOutputFormat
argument_list|()
expr_stmt|;
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|outputJobInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OutputFormat
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|getOutputFormat
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|outputFormat
return|;
block|}
annotation|@
name|Override
specifier|public
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|generateKey
parameter_list|(
name|HCatRecord
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|EMPTY_KEY
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOutputLocation
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|String
name|tableLocation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|,
name|String
name|dynHash
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO have HCatalog common objects expose more information
comment|//this is the only way to pickup table location for storageDrivers
name|jobContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|PROPERTY_TABLE_LOCATION
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

