begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|DefaultHCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test HBaseSerdeResultConverter by manually creating records to convert to and from HBase objects  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseSerDeResultConverter
block|{
specifier|private
name|Properties
name|createProperties
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,aint,astring,amap"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string:int:string:map<string,int>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_DEFAULT_TOPIC_PREFIX
operator|+
literal|"."
operator|+
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,my_family:my_qualifier1,my_family:my_qualifier2,my_family2:"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
literal|"NULL"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_OUTPUT_VERSION_KEY
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|HCatSchema
name|createHCatSchema
parameter_list|()
throws|throws
name|HCatException
block|{
name|HCatSchema
name|subSchema
init|=
operator|new
name|HCatSchema
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|subSchema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|null
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"key"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"aint"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"astring"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"amap"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|MAP
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|subSchema
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeserialize
parameter_list|()
throws|throws
name|IOException
block|{
name|HBaseSerDeResultConverter
name|converter
init|=
operator|new
name|HBaseSerDeResultConverter
argument_list|(
name|createHCatSchema
argument_list|()
argument_list|,
literal|null
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
comment|//test integer
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
operator|new
name|KeyValue
index|[]
block|{
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_qualifier1"
argument_list|)
argument_list|,
literal|0
argument_list|,
comment|//This is how Hive's SerDe serializes numbers
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
block|,
comment|//test string
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_qualifier2"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"onetwothree"
argument_list|)
argument_list|)
block|,
comment|//test family map
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"one"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"two"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|HCatRecord
name|record
init|=
name|converter
operator|.
name|convert
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|record
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_qualifier1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|record
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_qualifier2"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|record
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|recordMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|record
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|familyMap
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|familyMap
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"one"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|recordMap
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|familyMap
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"two"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|recordMap
operator|.
name|get
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerialize
parameter_list|()
throws|throws
name|IOException
block|{
name|HCatSchema
name|schema
init|=
name|createHCatSchema
argument_list|()
decl_stmt|;
name|HBaseSerDeResultConverter
name|converter
init|=
operator|new
name|HBaseSerDeResultConverter
argument_list|(
name|schema
argument_list|,
literal|null
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|HCatRecord
name|in
init|=
operator|new
name|DefaultHCatRecord
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|//row key
name|in
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
comment|//test integer
name|in
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|123
argument_list|)
expr_stmt|;
comment|//test string
name|in
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|"onetwothree"
argument_list|)
expr_stmt|;
comment|//test map
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|in
operator|.
name|set
argument_list|(
literal|3
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
name|converter
operator|.
name|convert
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|in
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|in
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|put
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_qualifier1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|put
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_qualifier1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|in
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|put
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_qualifier2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|put
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_qualifier2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|put
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"one"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|put
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"one"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"two"
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|put
operator|.
name|get
argument_list|(
literal|"my_family2"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"two"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|put
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my_family2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"two"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanColumns
parameter_list|()
throws|throws
name|IOException
block|{
name|HCatSchema
name|schema
init|=
name|createHCatSchema
argument_list|()
decl_stmt|;
name|HBaseSerDeResultConverter
name|converter
init|=
operator|new
name|HBaseSerDeResultConverter
argument_list|(
name|schema
argument_list|,
literal|null
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|converter
operator|.
name|getHBaseScanColumns
argument_list|()
decl_stmt|;
name|String
name|scanColumns
init|=
literal|"my_family:my_qualifier1 my_family:my_qualifier2 my_family2: "
decl_stmt|;
name|assertTrue
argument_list|(
name|scanColumns
operator|.
name|equals
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

