begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_class
specifier|public
class|class
name|TestHCatUtil
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testFsPermissionOperation
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|permsCode
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|8
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|8
condition|;
name|k
operator|++
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|Integer
name|code
init|=
operator|(
operator|(
operator|(
name|i
operator|*
literal|8
operator|)
operator|+
name|j
operator|)
operator|*
literal|8
operator|)
operator|+
name|k
decl_stmt|;
name|String
name|perms
init|=
operator|(
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|decode
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|permsCode
operator|.
name|containsKey
argument_list|(
name|perms
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"permissions("
operator|+
name|perms
operator|+
literal|") mapped to multiple codes"
argument_list|,
name|code
argument_list|,
name|permsCode
operator|.
name|get
argument_list|(
name|perms
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|permsCode
operator|.
name|put
argument_list|(
name|perms
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|assertFsPermissionTransformationIsGood
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|assertFsPermissionTransformationIsGood
parameter_list|(
name|String
name|perms
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|perms
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-"
operator|+
name|perms
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testValidateMorePermissive
parameter_list|()
block|{
name|assertConsistentFsPermissionBehaviour
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertConsistentFsPermissionBehaviour
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertConsistentFsPermissionBehaviour
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertConsistentFsPermissionBehaviour
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertConsistentFsPermissionBehaviour
argument_list|(
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertConsistentFsPermissionBehaviour
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertConsistentFsPermissionBehaviour
argument_list|(
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertConsistentFsPermissionBehaviour
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertConsistentFsPermissionBehaviour
parameter_list|(
name|FsAction
name|base
parameter_list|,
name|boolean
name|versusAll
parameter_list|,
name|boolean
name|versusNone
parameter_list|,
name|boolean
name|versusX
parameter_list|,
name|boolean
name|versusR
parameter_list|,
name|boolean
name|versusW
parameter_list|,
name|boolean
name|versusRX
parameter_list|,
name|boolean
name|versusRW
parameter_list|,
name|boolean
name|versusWX
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|versusAll
operator|==
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|base
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versusX
operator|==
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|base
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versusNone
operator|==
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|base
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versusR
operator|==
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|base
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versusRX
operator|==
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|base
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versusRW
operator|==
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|base
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versusW
operator|==
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|base
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versusWX
operator|==
name|HCatUtil
operator|.
name|validateMorePermissive
argument_list|(
name|base
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExecutePermissionsCheck
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HCatUtil
operator|.
name|validateExecuteBitPresentIfReadOrWrite
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

