begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|MiniCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
operator|.
name|HCatLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ExecType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|UDFContext
import|;
end_import

begin_class
specifier|public
class|class
name|TestHCatHiveCompatibility
extends|extends
name|TestCase
block|{
name|MiniCluster
name|cluster
init|=
name|MiniCluster
operator|.
name|buildCluster
argument_list|()
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
name|Properties
name|props
decl_stmt|;
specifier|private
name|HiveMetaStoreClient
name|client
decl_stmt|;
name|String
name|fileName
init|=
literal|"/tmp/input.data"
decl_stmt|;
name|String
name|fullFileName
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"fs.default.name"
argument_list|,
name|cluster
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
argument_list|)
expr_stmt|;
name|fullFileName
operator|=
name|cluster
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
operator|+
name|fileName
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|11
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|input
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|"\t1"
expr_stmt|;
block|}
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnpartedReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted_noisd"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted_noisd(a int) stored as RCFILE"
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
comment|// assert that the table created has no hcat instrumentation, and that we're still able to read it.
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"junit_unparted_noisd"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|HCatConstants
operator|.
name|HIVE_RCFILE_IF_CLASS
argument_list|)
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted_noisd' using org.apache.hcatalog.pig.HCatStorer();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = load 'default.junit_unparted_noisd' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|itr
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// assert that the table created still has no hcat instrumentation
name|Table
name|table2
init|=
name|client
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"junit_unparted_noisd"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|table2
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|HCatConstants
operator|.
name|HIVE_RCFILE_IF_CLASS
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted_noisd"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPartedRead
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_parted_noisd"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_parted_noisd(a int) partitioned by (b string) stored as RCFILE"
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
comment|// assert that the table created has no hcat instrumentation, and that we're still able to read it.
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"junit_parted_noisd"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|HCatConstants
operator|.
name|HIVE_RCFILE_IF_CLASS
argument_list|)
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_parted_noisd' using org.apache.hcatalog.pig.HCatStorer('b=42');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = load 'default.junit_parted_noisd' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|itr
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// assert that the table created still has no hcat instrumentation
name|Table
name|table2
init|=
name|client
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"junit_parted_noisd"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|table2
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|HCatConstants
operator|.
name|HIVE_RCFILE_IF_CLASS
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert that there is one partition present, and it had hcat instrumentation inserted when it was created.
name|Partition
name|ptn
init|=
name|client
operator|.
name|getPartition
argument_list|(
literal|"default"
argument_list|,
literal|"junit_parted_noisd"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ptn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ptn
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|HCatConstants
operator|.
name|HIVE_RCFILE_IF_CLASS
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted_noisd"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

