begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
operator|.
name|drivers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|ErrorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|FileOutputStorageDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputStorageDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
operator|.
name|HCatLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
operator|.
name|HCatStorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
operator|.
name|PigHCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|LoadFunc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|StoreFunc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|StoreFuncInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|backend
operator|.
name|hadoop
operator|.
name|datastorage
operator|.
name|ConfigurationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|DefaultTupleFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|TupleFactory
import|;
end_import

begin_class
specifier|public
class|class
name|StoreFuncBasedOutputDriver
extends|extends
name|FileOutputStorageDriver
block|{
specifier|protected
name|StoreFuncInterface
name|sf
decl_stmt|;
specifier|private
name|TupleFactory
name|factory
init|=
name|TupleFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|HCatSchema
name|schema
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|Properties
name|hcatProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|storerString
init|=
name|hcatProperties
operator|.
name|getProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_PIG_STORER
argument_list|)
decl_stmt|;
if|if
condition|(
name|storerString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_INIT_STORER
argument_list|,
literal|"Don't know how to instantiate storer, "
operator|+
name|HCatConstants
operator|.
name|HCAT_PIG_STORER
operator|+
literal|" property is not defined for table "
argument_list|)
throw|;
block|}
name|String
name|storerArgs
init|=
name|hcatProperties
operator|.
name|getProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_PIG_STORER_ARGS
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
decl_stmt|;
if|if
condition|(
name|storerArgs
operator|!=
literal|null
condition|)
block|{
name|String
name|delimit
init|=
name|hcatProperties
operator|.
name|getProperty
argument_list|(
name|HCatConstants
operator|.
name|HCAT_PIG_ARGS_DELIMIT
argument_list|)
decl_stmt|;
if|if
condition|(
name|delimit
operator|==
literal|null
condition|)
block|{
name|delimit
operator|=
name|HCatConstants
operator|.
name|HCAT_PIG_ARGS_DELIMIT_DEFAULT
expr_stmt|;
block|}
name|args
operator|=
name|storerArgs
operator|.
name|split
argument_list|(
name|delimit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
try|try
block|{
name|Class
name|storerClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|storerString
argument_list|)
decl_stmt|;
name|Constructor
index|[]
name|constructors
init|=
name|storerClass
operator|.
name|getConstructors
argument_list|()
decl_stmt|;
for|for
control|(
name|Constructor
name|constructor
range|:
name|constructors
control|)
block|{
if|if
condition|(
name|constructor
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|sf
operator|=
operator|(
name|StoreFuncInterface
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_INIT_STORER
argument_list|,
literal|"Cannot instantiate "
operator|+
name|storerString
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_INIT_STORER
argument_list|,
literal|"Cannot instantiate "
operator|+
name|storerString
operator|+
literal|" with construct args "
operator|+
name|storerArgs
argument_list|)
throw|;
block|}
name|super
operator|.
name|initialize
argument_list|(
name|jobContext
argument_list|,
name|hcatProperties
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|innerSignature
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HCatStorer
operator|.
name|INNER_SIGNATURE
argument_list|)
decl_stmt|;
comment|// Set signature before invoking StoreFunc methods, see comment in
comment|// see comments in LoadFuncBasedInputDriver.initialize
name|sf
operator|.
name|setStoreFuncUDFContextSignature
argument_list|(
name|innerSignature
argument_list|)
expr_stmt|;
name|sf
operator|.
name|checkSchema
argument_list|(
name|PigHCatUtil
operator|.
name|getResourceSchema
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setStoreLocation
argument_list|(
name|location
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|ConfigurationUtil
operator|.
name|mergeConf
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OutputFormat
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|getOutputFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|StoreFuncBasedOutputFormat
name|outputFormat
init|=
operator|new
name|StoreFuncBasedOutputFormat
argument_list|(
name|sf
argument_list|)
decl_stmt|;
return|return
name|outputFormat
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOutputPath
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSchema
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|HCatSchema
name|schema
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPartitionValues
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Doing nothing, partition keys are not stored along with the data, so ignore it
block|}
annotation|@
name|Override
specifier|public
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|generateKey
parameter_list|(
name|HCatRecord
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|convertValue
parameter_list|(
name|HCatRecord
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Tuple
name|t
init|=
name|factory
operator|.
name|newTupleNoCopy
argument_list|(
name|value
operator|.
name|getAll
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
block|}
end_class

end_unit

