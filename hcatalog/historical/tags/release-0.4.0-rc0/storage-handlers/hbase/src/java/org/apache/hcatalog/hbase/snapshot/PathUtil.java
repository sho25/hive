begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_comment
comment|/**  * The PathUtil class is a utility class to provide information about various  * znode paths. The following is the znode structure used for storing information.  * baseDir/ClockNode  * baseDir/TrasactionBasePath  * baseDir/TrasactionBasePath/TableA/revisionID  * baseDir/TrasactionBasePath/TableA/columnFamily-1  * baseDir/TrasactionBasePath/TableA/columnFamily-1/runnningTxns  * baseDir/TrasactionBasePath/TableA/columnFamily-1/abortedTxns  * baseDir/TrasactionBasePath/TableB/revisionID  * baseDir/TrasactionBasePath/TableB/columnFamily-1  * baseDir/TrasactionBasePath/TableB/columnFamily-1/runnningTxns  * baseDir/TrasactionBasePath/TableB/columnFamily-1/abortedTxns   */
end_comment

begin_class
specifier|public
class|class
name|PathUtil
block|{
specifier|static
specifier|final
name|String
name|DATA_DIR
init|=
literal|"/data"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CLOCK_NODE
init|=
literal|"/clock"
decl_stmt|;
comment|/**      * This method returns the data path associated with the currently      * running transactions of a given table and column/column family.      * @param baseDir      * @param tableName      * @param columnFamily      * @return The path of the running transactions data.      */
specifier|static
name|String
name|getRunningTxnInfoPath
parameter_list|(
name|String
name|baseDir
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnFamily
parameter_list|)
block|{
name|String
name|txnBasePath
init|=
name|getTransactionBasePath
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|txnBasePath
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/"
operator|+
name|columnFamily
operator|+
literal|"/runningTxns"
decl_stmt|;
return|return
name|path
return|;
block|}
comment|/**      * This method returns the data path associated with the aborted      * transactions of a given table and column/column family.      * @param baseDir The base directory for revision management.      * @param tableName The name of the table.      * @param columnFamily      * @return The path of the aborted transactions data.      */
specifier|static
name|String
name|getAbortInformationPath
parameter_list|(
name|String
name|baseDir
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnFamily
parameter_list|)
block|{
name|String
name|txnBasePath
init|=
name|getTransactionBasePath
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|txnBasePath
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/"
operator|+
name|columnFamily
operator|+
literal|"/abortData"
decl_stmt|;
return|return
name|path
return|;
block|}
comment|/**      * Gets the revision id node for a given table.      *      * @param baseDir the base dir for revision management.      * @param tableName the table name      * @return the revision id node path.      */
specifier|static
name|String
name|getRevisionIDNode
parameter_list|(
name|String
name|baseDir
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|String
name|rmBasePath
init|=
name|getTransactionBasePath
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
name|String
name|revisionIDNode
init|=
name|rmBasePath
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/idgen"
decl_stmt|;
return|return
name|revisionIDNode
return|;
block|}
comment|/**     * Gets the lock management node for any znode that needs to be locked.     *     * @param path the path of the znode.     * @return the lock management node path.     */
specifier|static
name|String
name|getLockManagementNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|lockNode
init|=
name|path
operator|+
literal|"_locknode_"
decl_stmt|;
return|return
name|lockNode
return|;
block|}
comment|/**      * This method returns the base path for the transaction data.      *      * @param baseDir The base dir for revision management.      * @return The base path for the transaction data.      */
specifier|static
name|String
name|getTransactionBasePath
parameter_list|(
name|String
name|baseDir
parameter_list|)
block|{
name|String
name|txnBaseNode
init|=
name|baseDir
operator|+
name|DATA_DIR
decl_stmt|;
return|return
name|txnBaseNode
return|;
block|}
comment|/**      * Gets the txn data path for a given table.      *      * @param baseDir the base dir for revision management.      * @param tableName the table name      * @return the txn data path for the table.      */
specifier|static
name|String
name|getTxnDataPath
parameter_list|(
name|String
name|baseDir
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|String
name|txnBasePath
init|=
name|getTransactionBasePath
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|txnBasePath
operator|+
literal|"/"
operator|+
name|tableName
decl_stmt|;
return|return
name|path
return|;
block|}
comment|/**      * This method returns the data path for clock node.      *      * @param baseDir      * @return The data path for clock.      */
specifier|static
name|String
name|getClockPath
parameter_list|(
name|String
name|baseDir
parameter_list|)
block|{
name|String
name|clockNode
init|=
name|baseDir
operator|+
name|CLOCK_NODE
decl_stmt|;
return|return
name|clockNode
return|;
block|}
block|}
end_class

end_unit

