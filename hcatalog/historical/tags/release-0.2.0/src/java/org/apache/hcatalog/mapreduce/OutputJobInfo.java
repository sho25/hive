begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_comment
comment|/** The class used to serialize and store the output related information  */
end_comment

begin_class
class|class
name|OutputJobInfo
implements|implements
name|Serializable
block|{
comment|/** The serialization version. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/** The table info provided by user. */
specifier|private
specifier|final
name|HCatTableInfo
name|tableInfo
decl_stmt|;
comment|/** The output schema. This is given to us by user.  This wont contain any      * partition columns ,even if user has specified them.      * */
specifier|private
name|HCatSchema
name|outputSchema
decl_stmt|;
comment|/** This is table schema, retrieved from metastore. */
specifier|private
specifier|final
name|HCatSchema
name|tableSchema
decl_stmt|;
comment|/** The storer info */
specifier|private
specifier|final
name|StorerInfo
name|storerInfo
decl_stmt|;
comment|/** The location of the partition being written */
specifier|private
specifier|final
name|String
name|location
decl_stmt|;
comment|/** The table being written to */
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
comment|/** This is a list of partition columns which will be deleted from data, if      * data contains partition columns.*/
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|posOfPartCols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|posOfDynPartCols
decl_stmt|;
specifier|private
name|int
name|maxDynamicPartitions
decl_stmt|;
specifier|private
name|boolean
name|harRequested
decl_stmt|;
comment|/**      * @return the posOfPartCols      */
specifier|protected
name|List
argument_list|<
name|Integer
argument_list|>
name|getPosOfPartCols
parameter_list|()
block|{
return|return
name|posOfPartCols
return|;
block|}
comment|/**      * @return the posOfDynPartCols      */
specifier|protected
name|List
argument_list|<
name|Integer
argument_list|>
name|getPosOfDynPartCols
parameter_list|()
block|{
return|return
name|posOfDynPartCols
return|;
block|}
comment|/**      * @param posOfPartCols the posOfPartCols to set      */
specifier|protected
name|void
name|setPosOfPartCols
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|posOfPartCols
parameter_list|)
block|{
comment|// sorting the list in the descending order so that deletes happen back-to-front
name|Collections
operator|.
name|sort
argument_list|(
name|posOfPartCols
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|earlier
parameter_list|,
name|Integer
name|later
parameter_list|)
block|{
return|return
operator|(
name|earlier
operator|>
name|later
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|earlier
operator|==
name|later
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|posOfPartCols
operator|=
name|posOfPartCols
expr_stmt|;
block|}
comment|/**      * @param posOfDynPartCols the posOfDynPartCols to set      */
specifier|protected
name|void
name|setPosOfDynPartCols
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|posOfDynPartCols
parameter_list|)
block|{
comment|// Important - no sorting here! We retain order, it's used to match with values at runtime
name|this
operator|.
name|posOfDynPartCols
operator|=
name|posOfDynPartCols
expr_stmt|;
block|}
specifier|public
name|OutputJobInfo
parameter_list|(
name|HCatTableInfo
name|tableInfo
parameter_list|,
name|HCatSchema
name|outputSchema
parameter_list|,
name|HCatSchema
name|tableSchema
parameter_list|,
name|StorerInfo
name|storerInfo
parameter_list|,
name|String
name|location
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableInfo
operator|=
name|tableInfo
expr_stmt|;
name|this
operator|.
name|outputSchema
operator|=
name|outputSchema
expr_stmt|;
name|this
operator|.
name|tableSchema
operator|=
name|tableSchema
expr_stmt|;
name|this
operator|.
name|storerInfo
operator|=
name|storerInfo
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
comment|/**      * @return the tableInfo      */
specifier|public
name|HCatTableInfo
name|getTableInfo
parameter_list|()
block|{
return|return
name|tableInfo
return|;
block|}
comment|/**      * @return the outputSchema      */
specifier|public
name|HCatSchema
name|getOutputSchema
parameter_list|()
block|{
return|return
name|outputSchema
return|;
block|}
comment|/**      * @param schema the outputSchema to set      */
specifier|public
name|void
name|setOutputSchema
parameter_list|(
name|HCatSchema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|outputSchema
operator|=
name|schema
expr_stmt|;
block|}
comment|/**      * @return the tableSchema      */
specifier|public
name|HCatSchema
name|getTableSchema
parameter_list|()
block|{
return|return
name|tableSchema
return|;
block|}
comment|/**      * @return the storerInfo      */
specifier|public
name|StorerInfo
name|getStorerInfo
parameter_list|()
block|{
return|return
name|storerInfo
return|;
block|}
comment|/**      * @return the location      */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
comment|/**      * Gets the value of table      * @return the table      */
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
comment|/**      * Set maximum number of allowable dynamic partitions      * @param maxDynamicPartitions      */
specifier|public
name|void
name|setMaximumDynamicPartitions
parameter_list|(
name|int
name|maxDynamicPartitions
parameter_list|)
block|{
name|this
operator|.
name|maxDynamicPartitions
operator|=
name|maxDynamicPartitions
expr_stmt|;
block|}
comment|/**      * Returns maximum number of allowable dynamic partitions      * @return maximum number of allowable dynamic partitions      */
specifier|public
name|int
name|getMaxDynamicPartitions
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxDynamicPartitions
return|;
block|}
comment|/**      * Sets whether or not hadoop archiving has been requested for this job      * @param harRequested      */
specifier|public
name|void
name|setHarRequested
parameter_list|(
name|boolean
name|harRequested
parameter_list|)
block|{
name|this
operator|.
name|harRequested
operator|=
name|harRequested
expr_stmt|;
block|}
comment|/**      * Returns whether or not hadoop archiving has been requested for this job      * @return whether or not hadoop archiving has been requested for this job      */
specifier|public
name|boolean
name|getHarRequested
parameter_list|()
block|{
return|return
name|this
operator|.
name|harRequested
return|;
block|}
block|}
end_class

end_unit

