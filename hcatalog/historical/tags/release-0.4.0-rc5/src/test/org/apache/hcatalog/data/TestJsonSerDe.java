begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestJsonSerDe
extends|extends
name|TestCase
block|{
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|Properties
argument_list|,
name|HCatRecord
argument_list|>
argument_list|>
name|getData
parameter_list|()
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|Properties
argument_list|,
name|HCatRecord
argument_list|>
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Properties
argument_list|,
name|HCatRecord
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|rlist
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|13
argument_list|)
decl_stmt|;
name|rlist
operator|.
name|add
argument_list|(
operator|new
name|Byte
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
operator|new
name|Short
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|789
argument_list|)
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
literal|1000L
argument_list|)
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
operator|new
name|Double
argument_list|(
literal|5.3D
argument_list|)
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
operator|new
name|Float
argument_list|(
literal|2.39F
argument_list|)
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
literal|"hcat and hadoop"
argument_list|)
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|innerStruct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|innerStruct
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|innerStruct
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
name|innerStruct
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|innerList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|innerList
operator|.
name|add
argument_list|(
literal|314
argument_list|)
expr_stmt|;
name|innerList
operator|.
name|add
argument_list|(
literal|007
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
name|innerList
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Short
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Short
argument_list|,
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|Short
argument_list|(
literal|"2"
argument_list|)
argument_list|,
literal|"hcat is cool"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|Short
argument_list|(
literal|"3"
argument_list|)
argument_list|,
literal|"is it?"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|Short
argument_list|(
literal|"4"
argument_list|)
argument_list|,
literal|"or is it not?"
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|c1
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|c1_1
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|c1_1
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|i2
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ii1
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|ii1
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|ii1
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|i2
operator|.
name|add
argument_list|(
name|ii1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|ii2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|iii1
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|iii1
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|ii2
operator|.
name|put
argument_list|(
literal|"phew"
argument_list|,
name|iii1
argument_list|)
expr_stmt|;
name|i2
operator|.
name|add
argument_list|(
name|ii2
argument_list|)
expr_stmt|;
name|c1_1
operator|.
name|add
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|c1
operator|.
name|add
argument_list|(
name|c1_1
argument_list|)
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|nlist
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|13
argument_list|)
decl_stmt|;
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// tinyint
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// smallint
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// int
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// bigint
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// double
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// float
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// string
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// string
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// struct
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// array
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// map
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// bool
name|nlist
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// complex
name|String
name|typeString
init|=
literal|"tinyint,smallint,int,bigint,double,float,string,string,"
operator|+
literal|"struct<a:string,b:string>,array<int>,map<smallint,string>,boolean,"
operator|+
literal|"array<struct<i1:int,i2:struct<ii1:array<int>,ii2:map<string,struct<iii1:int>>>>>"
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"ti,si,i,bi,d,f,s,n,r,l,m,b,c1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|typeString
argument_list|)
expr_stmt|;
comment|//    props.put(Constants.SERIALIZATION_NULL_FORMAT, "\\N");
comment|//    props.put(Constants.SERIALIZATION_FORMAT, "1");
name|data
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
name|props
argument_list|,
operator|new
name|DefaultHCatRecord
argument_list|(
name|rlist
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
name|props
argument_list|,
operator|new
name|DefaultHCatRecord
argument_list|(
name|nlist
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
name|void
name|testRW
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Properties
argument_list|,
name|HCatRecord
argument_list|>
name|e
range|:
name|getData
argument_list|()
control|)
block|{
name|Properties
name|tblProps
init|=
name|e
operator|.
name|first
decl_stmt|;
name|HCatRecord
name|r
init|=
name|e
operator|.
name|second
decl_stmt|;
name|HCatRecordSerDe
name|hrsd
init|=
operator|new
name|HCatRecordSerDe
argument_list|()
decl_stmt|;
name|hrsd
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tblProps
argument_list|)
expr_stmt|;
name|JsonSerDe
name|jsde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|jsde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tblProps
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ORIG:"
operator|+
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Writable
name|s
init|=
name|hrsd
operator|.
name|serialize
argument_list|(
name|r
argument_list|,
name|hrsd
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ONE:"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o1
init|=
name|hrsd
operator|.
name|deserialize
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|HCatDataCheckUtil
operator|.
name|recordsEqual
argument_list|(
name|r
argument_list|,
operator|(
name|HCatRecord
operator|)
name|o1
argument_list|)
argument_list|)
expr_stmt|;
name|Writable
name|s2
init|=
name|jsde
operator|.
name|serialize
argument_list|(
name|o1
argument_list|,
name|hrsd
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TWO:"
operator|+
name|s2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o2
init|=
name|jsde
operator|.
name|deserialize
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"deserialized TWO : "
operator|+
name|o2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HCatDataCheckUtil
operator|.
name|recordsEqual
argument_list|(
name|r
argument_list|,
operator|(
name|HCatRecord
operator|)
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

