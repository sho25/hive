begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|ErrorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_class
specifier|public
class|class
name|HCatOutputCommitter
extends|extends
name|OutputCommitter
block|{
comment|/** The underlying output committer */
specifier|private
specifier|final
name|OutputCommitter
name|baseCommitter
decl_stmt|;
specifier|public
name|HCatOutputCommitter
parameter_list|(
name|OutputCommitter
name|baseCommitter
parameter_list|)
block|{
name|this
operator|.
name|baseCommitter
operator|=
name|baseCommitter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|baseCommitter
operator|.
name|abortTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|baseCommitter
operator|.
name|commitTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|baseCommitter
operator|.
name|needsTaskCommit
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|baseCommitter
operator|!=
literal|null
condition|)
block|{
name|baseCommitter
operator|.
name|setupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|baseCommitter
operator|.
name|setupTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|baseCommitter
operator|!=
literal|null
condition|)
block|{
name|baseCommitter
operator|.
name|abortJob
argument_list|(
name|jobContext
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|OutputJobInfo
name|jobInfo
init|=
name|HCatOutputFormat
operator|.
name|getJobInfo
argument_list|(
name|jobContext
argument_list|)
decl_stmt|;
try|try
block|{
name|HiveMetaStoreClient
name|client
init|=
name|HCatOutputFormat
operator|.
name|createHiveClient
argument_list|(
name|jobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getServerUri
argument_list|()
argument_list|,
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// cancel the deleg. tokens that were acquired for this job now that
comment|// we are done - we should cancel if the tokens were acquired by
comment|// HCatOutputFormat and not if they were supplied by Oozie. In the latter
comment|// case the HCAT_KEY_TOKEN_SIGNATURE property in the conf will not be set
name|String
name|tokenStrForm
init|=
name|client
operator|.
name|getTokenStrForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenStrForm
operator|!=
literal|null
operator|&&
name|jobContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_TOKEN_SIGNATURE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|cancelDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|HCatException
condition|)
block|{
throw|throw
operator|(
name|HCatException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_PUBLISHING_PARTITION
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|jobInfo
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|src
operator|.
name|getFileSystem
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|String
name|SUCCEEDED_FILE_NAME
init|=
literal|"_SUCCESS"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SUCCESSFUL_JOB_OUTPUT_DIR_MARKER
init|=
literal|"mapreduce.fileoutputcommitter.marksuccessfuljobs"
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|getOutputDirMarking
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|SUCCESSFUL_JOB_OUTPUT_DIR_MARKER
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|baseCommitter
operator|!=
literal|null
condition|)
block|{
name|baseCommitter
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
block|}
comment|// create _SUCCESS FILE if so requested.
name|OutputJobInfo
name|jobInfo
init|=
name|HCatOutputFormat
operator|.
name|getJobInfo
argument_list|(
name|jobContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|getOutputDirMarking
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
name|jobInfo
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputPath
operator|!=
literal|null
condition|)
block|{
name|FileSystem
name|fileSys
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// create a file in the folder to mark it
if|if
condition|(
name|fileSys
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|SUCCEEDED_FILE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
comment|// may have been created by baseCommitter.commitJob()
name|fileSys
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|cleanupJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputJobInfo
name|jobInfo
init|=
name|HCatOutputFormat
operator|.
name|getJobInfo
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|jobInfo
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|tblSD
init|=
name|table
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Path
name|tblPath
init|=
operator|new
name|Path
argument_list|(
name|tblSD
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tblPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//non partitioned table
if|if
condition|(
name|baseCommitter
operator|!=
literal|null
condition|)
block|{
name|baseCommitter
operator|.
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|//Move data from temp directory the actual table directory
comment|//No metastore operation required.
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|jobInfo
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|moveTaskOutputs
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
name|src
argument_list|,
name|tblPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|HiveMetaStoreClient
name|client
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
name|boolean
name|partitionAdded
init|=
literal|false
decl_stmt|;
name|HCatTableInfo
name|tableInfo
init|=
name|jobInfo
operator|.
name|getTableInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|client
operator|=
name|HCatOutputFormat
operator|.
name|createHiveClient
argument_list|(
name|tableInfo
operator|.
name|getServerUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|StorerInfo
name|storer
init|=
name|InitializeInput
operator|.
name|extractStorerInfo
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|,
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|partition
operator|.
name|setDbName
argument_list|(
name|tableInfo
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setTableName
argument_list|(
name|tableInfo
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setSd
argument_list|(
operator|new
name|StorageDescriptor
argument_list|(
name|tblSD
argument_list|)
argument_list|)
expr_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|jobInfo
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|updateTableSchema
argument_list|(
name|client
argument_list|,
name|table
argument_list|,
name|jobInfo
operator|.
name|getOutputSchema
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|fieldSchema
range|:
name|jobInfo
operator|.
name|getOutputSchema
argument_list|()
operator|.
name|getFields
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getFieldSchema
argument_list|(
name|fieldSchema
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
init|=
name|tableInfo
operator|.
name|getPartitionValues
argument_list|()
decl_stmt|;
comment|//Get partition value list
name|partition
operator|.
name|setValues
argument_list|(
name|getPartitionValueList
argument_list|(
name|table
argument_list|,
name|partKVs
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
argument_list|,
name|storer
operator|.
name|getInputSDClass
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
argument_list|,
name|storer
operator|.
name|getOutputSDClass
argument_list|()
argument_list|)
expr_stmt|;
comment|//Copy table level hcat.* keys to the partition
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|storer
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|params
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|partition
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|// Sets permissions and group name on partition dirs.
name|FileStatus
name|tblStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|tblPath
argument_list|)
decl_stmt|;
name|String
name|grpName
init|=
name|tblStat
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|FsPermission
name|perms
init|=
name|tblStat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|Path
name|partPath
init|=
name|tblPath
decl_stmt|;
for|for
control|(
name|FieldSchema
name|partKey
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|partPath
operator|=
name|constructPartialPartPath
argument_list|(
name|partPath
argument_list|,
name|partKey
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|partKVs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|partPath
argument_list|,
name|perms
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|partPath
argument_list|,
literal|null
argument_list|,
name|grpName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
comment|// log the messages before ignoring. Currently, logging is not built in Hcatalog.
block|}
block|}
comment|//Publish the new partition
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|partitionAdded
operator|=
literal|true
expr_stmt|;
comment|//publish to metastore done
if|if
condition|(
name|baseCommitter
operator|!=
literal|null
condition|)
block|{
name|baseCommitter
operator|.
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|// cancel the deleg. tokens that were acquired for this job now that
comment|// we are done - we should cancel if the tokens were acquired by
comment|// HCatOutputFormat and not if they were supplied by Oozie. In the latter
comment|// case the HCAT_KEY_TOKEN_SIGNATURE property in the conf will not be set
name|String
name|tokenStrForm
init|=
name|client
operator|.
name|getTokenStrForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenStrForm
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_TOKEN_SIGNATURE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|cancelDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|partitionAdded
condition|)
block|{
try|try
block|{
comment|//baseCommitter.cleanupJob failed, try to clean up the metastore
name|client
operator|.
name|dropPartition
argument_list|(
name|tableInfo
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|tableInfo
operator|.
name|getTableName
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|te
parameter_list|)
block|{
comment|//Keep cause as the original exception
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_PUBLISHING_PARTITION
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|e
operator|instanceof
name|HCatException
condition|)
block|{
throw|throw
operator|(
name|HCatException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_PUBLISHING_PARTITION
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Path
name|constructPartialPartPath
parameter_list|(
name|Path
name|partialPath
parameter_list|,
name|String
name|partKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|FileUtils
operator|.
name|escapePathName
argument_list|(
name|partKey
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FileUtils
operator|.
name|escapePathName
argument_list|(
name|partKVs
operator|.
name|get
argument_list|(
name|partKey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|partialPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Update table schema, adding new columns as added for the partition.      * @param client the client      * @param table the table      * @param partitionSchema the schema of the partition      * @throws IOException Signals that an I/O exception has occurred.      * @throws InvalidOperationException the invalid operation exception      * @throws MetaException the meta exception      * @throws TException the t exception      */
specifier|private
name|void
name|updateTableSchema
parameter_list|(
name|HiveMetaStoreClient
name|client
parameter_list|,
name|Table
name|table
parameter_list|,
name|HCatSchema
name|partitionSchema
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newColumns
init|=
name|HCatUtil
operator|.
name|validatePartitionSchema
argument_list|(
name|table
argument_list|,
name|partitionSchema
argument_list|)
decl_stmt|;
if|if
condition|(
name|newColumns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|tableColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
name|tableColumns
operator|.
name|addAll
argument_list|(
name|newColumns
argument_list|)
expr_stmt|;
comment|//Update table schema to add the newly added columns
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|tableColumns
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert the partition value map to a value list in the partition key order.      * @param table the table being written to      * @param valueMap the partition value map      * @return the partition value list      * @throws IOException      */
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionValueList
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valueMap
operator|.
name|size
argument_list|()
operator|!=
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_INVALID_PARTITION_VALUES
argument_list|,
literal|"Table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" has "
operator|+
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" partition keys, got "
operator|+
name|valueMap
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|schema
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|valueMap
operator|.
name|get
argument_list|(
name|schema
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_MISSING_PARTITION_KEY
argument_list|,
literal|"Key "
operator|+
name|schema
operator|.
name|getName
argument_list|()
operator|+
literal|" of table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**      * Move all of the files from the temp directory to the final location      * @param fs the output file system      * @param file the file to move      * @param src the source directory      * @param dest the target directory      * @throws IOException      */
specifier|private
name|void
name|moveTaskOutputs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|isFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|Path
name|finalOutputPath
init|=
name|getFinalPath
argument_list|(
name|file
argument_list|,
name|src
argument_list|,
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|file
argument_list|,
name|finalOutputPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|finalOutputPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_MOVE_FAILED
argument_list|,
literal|"Failed to delete existing path "
operator|+
name|finalOutputPath
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|file
argument_list|,
name|finalOutputPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_MOVE_FAILED
argument_list|,
literal|"Failed to move output to "
operator|+
name|dest
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|paths
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Path
name|finalOutputPath
init|=
name|getFinalPath
argument_list|(
name|file
argument_list|,
name|src
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|finalOutputPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|path
range|:
name|paths
control|)
block|{
name|moveTaskOutputs
argument_list|(
name|fs
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|,
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Find the final name of a given output file, given the output directory      * and the work directory.      * @param file the file to move      * @param src the source directory      * @param dest the target directory      * @return the final path for the specific output file      * @throws IOException      */
specifier|private
name|Path
name|getFinalPath
parameter_list|(
name|Path
name|file
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|taskOutputUri
init|=
name|file
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|relativePath
init|=
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|relativize
argument_list|(
name|taskOutputUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskOutputUri
operator|==
name|relativePath
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_MOVE_FAILED
argument_list|,
literal|"Can not get the relative path: base = "
operator|+
name|src
operator|+
literal|" child = "
operator|+
name|file
argument_list|)
throw|;
block|}
if|if
condition|(
name|relativePath
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|dest
argument_list|,
name|relativePath
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|dest
return|;
block|}
block|}
block|}
end_class

end_unit

