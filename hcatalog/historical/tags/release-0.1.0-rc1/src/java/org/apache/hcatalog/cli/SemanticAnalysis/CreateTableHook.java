begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|SemanticAnalysis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DDLTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|AbstractSemanticAnalyzerHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|AuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|rcfile
operator|.
name|RCFileInputDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|rcfile
operator|.
name|RCFileOutputDriver
import|;
end_import

begin_class
specifier|final
class|class
name|CreateTableHook
extends|extends
name|AbstractSemanticAnalyzerHook
block|{
specifier|private
name|String
name|inStorageDriver
decl_stmt|,
name|outStorageDriver
decl_stmt|,
name|tableName
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ASTNode
name|preAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Hive
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|context
operator|.
name|getHive
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Couldn't get Hive DB instance in semantic analysis phase."
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Analyze and create tbl properties object
name|int
name|numCh
init|=
name|ast
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
name|String
name|inputFormat
init|=
literal|null
decl_stmt|,
name|outputFormat
init|=
literal|null
decl_stmt|;
name|tableName
operator|=
name|BaseSemanticAnalyzer
operator|.
name|getUnescapedName
argument_list|(
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|num
init|=
literal|1
init|;
name|num
operator|<
name|numCh
condition|;
name|num
operator|++
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
name|num
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_QUERY
case|:
comment|// CTAS
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Operation not supported. Create table as Select is not a valid operation."
argument_list|)
throw|;
case|case
name|HiveParser
operator|.
name|TOK_TABLEBUCKETS
case|:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Operation not supported. HCatalog doesn't allow Clustered By in create table."
argument_list|)
throw|;
case|case
name|HiveParser
operator|.
name|TOK_TBLSEQUENCEFILE
case|:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Operation not supported. HCatalog doesn't support Sequence File by default yet. "
operator|+
literal|"You may specify it through INPUT/OUTPUT storage drivers."
argument_list|)
throw|;
case|case
name|HiveParser
operator|.
name|TOK_TBLTEXTFILE
case|:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Operation not supported. HCatalog doesn't support Text File by default yet. "
operator|+
literal|"You may specify it through INPUT/OUTPUT storage drivers."
argument_list|)
throw|;
case|case
name|HiveParser
operator|.
name|TOK_LIKETABLE
case|:
name|String
name|likeTableName
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|likeTableName
operator|=
name|BaseSemanticAnalyzer
operator|.
name|getUnescapedName
argument_list|(
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Operation not supported. CREATE TABLE LIKE is not supported."
argument_list|)
throw|;
comment|//          Map<String, String> tblProps;
comment|//          try {
comment|//            tblProps = db.getTable(MetaStoreUtils.DEFAULT_DATABASE_NAME, likeTableName).getParameters();
comment|//          } catch (HiveException he) {
comment|//            throw new SemanticException(he);
comment|//          }
comment|//          if(!(tblProps.containsKey(InitializeInput.HOWL_ISD_CLASS)&& tblProps.containsKey(InitializeInput.HOWL_OSD_CLASS))){
comment|//            throw new SemanticException("Operation not supported. Table "+likeTableName+" should have been created through Howl. Seems like its not.");
comment|//          }
comment|//          return ast;
block|}
break|break;
case|case
name|HiveParser
operator|.
name|TOK_IFNOTEXISTS
case|:
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|db
operator|.
name|getTablesByPattern
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|!=
literal|null
operator|&&
name|tables
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// table exists
return|return
name|ast
return|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
case|case
name|HiveParser
operator|.
name|TOK_TABLEPARTCOLS
case|:
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|BaseSemanticAnalyzer
operator|.
name|getColumns
argument_list|(
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|partCols
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|getType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Operation not supported. HCatalog only supports partition columns of type string. "
operator|+
literal|"For column: "
operator|+
name|fs
operator|.
name|getName
argument_list|()
operator|+
literal|" Found type: "
operator|+
name|fs
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|HiveParser
operator|.
name|TOK_TABLEFILEFORMAT
case|:
if|if
condition|(
name|child
operator|.
name|getChildCount
argument_list|()
operator|<
literal|4
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Incomplete specification of File Format. You must provide InputFormat, OutputFormat, InputDriver, OutputDriver."
argument_list|)
throw|;
block|}
name|inputFormat
operator|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|outputFormat
operator|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|inStorageDriver
operator|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|outStorageDriver
operator|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|3
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_TBLRCFILE
case|:
name|inputFormat
operator|=
name|RCFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|outputFormat
operator|=
name|RCFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|inStorageDriver
operator|=
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|outStorageDriver
operator|=
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|inputFormat
operator|==
literal|null
operator|||
name|outputFormat
operator|==
literal|null
operator|||
name|inStorageDriver
operator|==
literal|null
operator|||
name|outStorageDriver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"STORED AS specification is either incomplete or incorrect."
argument_list|)
throw|;
block|}
return|return
name|ast
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|rootTasks
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// There will be no DDL task created in case if its CREATE TABLE IF NOT EXISTS
return|return;
block|}
name|CreateTableDesc
name|desc
init|=
operator|(
operator|(
name|DDLTask
operator|)
name|rootTasks
operator|.
name|get
argument_list|(
name|rootTasks
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|getWork
argument_list|()
operator|.
name|getCreateTblDesc
argument_list|()
decl_stmt|;
comment|// first check if we will allow the user to create table.
name|authorize
argument_list|(
name|context
argument_list|,
name|desc
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
block|{
comment|// Desc will be null if its CREATE TABLE LIKE. Desc will be contained
comment|// in CreateTableLikeDesc. Currently, Howl disallows CTLT in pre-hook.
comment|// So, desc can never be null.
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
init|=
name|desc
operator|.
name|getTblProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|tblProps
operator|==
literal|null
condition|)
block|{
comment|// tblProps will be null if user didnt use tblprops in his CREATE TABLE cmd.
name|tblProps
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|tblProps
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
argument_list|,
name|inStorageDriver
argument_list|)
expr_stmt|;
name|tblProps
operator|.
name|put
argument_list|(
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
argument_list|,
name|outStorageDriver
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTblProps
argument_list|(
name|tblProps
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_CREATE_TBL_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|authorize
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|String
name|loc
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Path
name|tblDir
decl_stmt|;
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConf
argument_list|()
decl_stmt|;
try|try
block|{
name|Warehouse
name|wh
init|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
operator|||
name|loc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tblDir
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
name|wh
operator|.
name|getDefaultTablePath
argument_list|(
name|context
operator|.
name|getHive
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tableName
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tblDir
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|loc
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|AuthUtils
operator|.
name|authorize
argument_list|(
name|tblDir
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HCatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

