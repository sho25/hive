begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|test
operator|.
name|ClientBase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * test for writelock  * This class is taken from the zookeeper 3.4.0 as-is to test the zookeeper lock  * Recipe with a change in the package name.  */
end_comment

begin_class
specifier|public
class|class
name|WriteLockTest
extends|extends
name|ClientBase
block|{
specifier|protected
name|int
name|sessionTimeout
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
specifier|protected
name|String
name|dir
init|=
literal|"/"
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|protected
name|WriteLock
index|[]
name|nodes
decl_stmt|;
specifier|protected
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|restartServer
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|workAroundClosingLastZNodeFails
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|killLeader
init|=
literal|true
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testRun
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
class|class
name|LockCallback
implements|implements
name|LockListener
block|{
specifier|public
name|void
name|lockAcquired
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|lockReleased
parameter_list|()
block|{          }
block|}
specifier|protected
name|void
name|runTest
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|nodes
operator|=
operator|new
name|WriteLock
index|[
name|count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|ZooKeeper
name|keeper
init|=
name|createClient
argument_list|()
decl_stmt|;
name|WriteLock
name|leader
init|=
operator|new
name|WriteLock
argument_list|(
name|keeper
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|leader
operator|.
name|setLockListener
argument_list|(
operator|new
name|LockCallback
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
index|[
name|i
index|]
operator|=
name|leader
expr_stmt|;
name|leader
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|// lets wait for any previous leaders to die and one of our new
comment|// nodes to become the new leader
name|latch
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|WriteLock
name|first
init|=
name|nodes
index|[
literal|0
index|]
decl_stmt|;
name|dumpNodes
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// lets assert that the first election is the leader
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The first znode should be the leader "
operator|+
name|first
operator|.
name|getId
argument_list|()
argument_list|,
name|first
operator|.
name|isOwner
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|WriteLock
name|node
init|=
name|nodes
index|[
name|i
index|]
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node should not be the leader "
operator|+
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|node
operator|.
name|isOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|killLeader
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Now killing the leader"
argument_list|)
expr_stmt|;
comment|// now lets kill the leader
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|first
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|//Thread.sleep(10000);
name|WriteLock
name|second
init|=
name|nodes
index|[
literal|1
index|]
decl_stmt|;
name|dumpNodes
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// lets assert that the first election is the leader
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The second znode should be the leader "
operator|+
name|second
operator|.
name|getId
argument_list|()
argument_list|,
name|second
operator|.
name|isOwner
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|WriteLock
name|node
init|=
name|nodes
index|[
name|i
index|]
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node should not be the leader "
operator|+
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|node
operator|.
name|isOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|restartServer
condition|)
block|{
comment|// now lets stop the server
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Now stopping the server"
argument_list|)
expr_stmt|;
name|stopServer
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|// TODO lets assert that we are no longer the leader
name|dumpNodes
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting the server"
argument_list|)
expr_stmt|;
name|startServer
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Calling acquire for node: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|nodes
index|[
name|i
index|]
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
name|dumpNodes
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Now closing down..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|dumpNodes
parameter_list|(
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|WriteLock
name|node
init|=
name|nodes
index|[
name|i
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"node: "
operator|+
name|i
operator|+
literal|" id: "
operator|+
name|node
operator|.
name|getId
argument_list|()
operator|+
literal|" is leader: "
operator|+
name|node
operator|.
name|isOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|WriteLock
name|node
init|=
name|nodes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Closing node: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|workAroundClosingLastZNodeFails
operator|&&
name|i
operator|==
name|nodes
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Not closing zookeeper: "
operator|+
name|i
operator|+
literal|" due to bug!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Closing zookeeper: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|node
operator|.
name|getZookeeper
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Closed zookeeper: "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Now lets stop the server"
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

