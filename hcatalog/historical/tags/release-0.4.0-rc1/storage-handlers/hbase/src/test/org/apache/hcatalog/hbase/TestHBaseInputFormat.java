begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RunningJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|HCatDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|cli
operator|.
name|SemanticAnalysis
operator|.
name|HCatSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|InputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|PartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestHBaseInputFormat
extends|extends
name|SkeletonHBaseTest
block|{
specifier|private
specifier|static
name|HiveConf
name|hcatConf
decl_stmt|;
specifier|private
specifier|static
name|HCatDriver
name|hcatDriver
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|QUALIFIER1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier2"
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Put
argument_list|>
name|generatePuts
parameter_list|(
name|int
name|num
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
name|RevisionManager
name|rm
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|myPuts
decl_stmt|;
try|try
block|{
name|rm
operator|=
name|HBaseRevisionManagerUtil
operator|.
name|getOpenedRevisionManager
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|open
argument_list|()
expr_stmt|;
name|myPuts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|num
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER1
argument_list|,
name|i
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"textValue-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|i
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"textValue-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|myPuts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Transaction
name|tsx
init|=
name|rm
operator|.
name|beginWriteTransaction
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|)
decl_stmt|;
name|rm
operator|.
name|commitWriteTransaction
argument_list|(
name|tsx
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|myPuts
return|;
block|}
specifier|private
name|void
name|Initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|hcatConf
operator|=
name|getHiveConf
argument_list|()
expr_stmt|;
name|hcatConf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
name|HCatSemanticAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|fsuri
init|=
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|Path
name|whPath
init|=
operator|new
name|Path
argument_list|(
name|fsuri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fsuri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|getTestDir
argument_list|()
argument_list|)
decl_stmt|;
name|hcatConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPFS
operator|.
name|varname
argument_list|,
name|fsuri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hcatConf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|whPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add hbase properties
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|el
range|:
name|getHbaseConf
argument_list|()
control|)
block|{
if|if
condition|(
name|el
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"hbase."
argument_list|)
condition|)
block|{
name|hcatConf
operator|.
name|set
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|,
name|el
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hcatConf
argument_list|)
argument_list|)
expr_stmt|;
name|hcatDriver
operator|=
operator|new
name|HCatDriver
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|populateHBaseTable
parameter_list|(
name|String
name|tName
parameter_list|,
name|int
name|revisions
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|myPuts
init|=
name|generatePuts
argument_list|(
name|revisions
argument_list|,
name|tName
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tName
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|myPuts
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|populateHBaseTableQualifier1
parameter_list|(
name|String
name|tName
parameter_list|,
name|int
name|value
parameter_list|,
name|Boolean
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
name|RevisionManager
name|rm
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|myPuts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|revision
decl_stmt|;
try|try
block|{
name|rm
operator|=
name|HBaseRevisionManagerUtil
operator|.
name|getOpenedRevisionManager
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|open
argument_list|()
expr_stmt|;
name|Transaction
name|tsx
init|=
name|rm
operator|.
name|beginWriteTransaction
argument_list|(
name|tName
argument_list|,
name|columnFamilies
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
argument_list|)
decl_stmt|;
name|revision
operator|=
name|tsx
operator|.
name|getRevisionNumber
argument_list|()
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER1
argument_list|,
name|revision
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"textValue-"
operator|+
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|myPuts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// If commit is null it is left as a running transaction
if|if
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|commit
condition|)
block|{
name|rm
operator|.
name|commitWriteTransaction
argument_list|(
name|tsx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rm
operator|.
name|abortWriteTransaction
argument_list|(
name|tsx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tName
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|myPuts
argument_list|)
expr_stmt|;
return|return
name|revision
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TestHBaseTableReadMR
parameter_list|()
throws|throws
name|Exception
block|{
name|Initialize
argument_list|()
expr_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"mytable"
argument_list|)
decl_stmt|;
name|String
name|databaseName
init|=
name|newTableName
argument_list|(
literal|"mydatabase"
argument_list|)
decl_stmt|;
name|String
name|db_dir
init|=
name|getTestDir
argument_list|()
operator|+
literal|"/hbasedb"
decl_stmt|;
name|String
name|dbquery
init|=
literal|"CREATE DATABASE IF NOT EXISTS "
operator|+
name|databaseName
operator|+
literal|" LOCATION '"
operator|+
name|db_dir
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableQuery
init|=
literal|"CREATE TABLE "
operator|+
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"(key string, testqualifier1 string, testqualifier2 string) STORED BY "
operator|+
literal|"'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"
operator|+
literal|"TBLPROPERTIES ('hbase.columns.mapping'=':key,testFamily:testQualifier1,testFamily:testQualifier2')"
decl_stmt|;
name|CommandProcessorResponse
name|responseOne
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|dbquery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseOne
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|responseTwo
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|tableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseTwo
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|hAdmin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|hbaseTableName
init|=
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
decl_stmt|;
name|boolean
name|doesTableExist
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|hbaseTableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|doesTableExist
argument_list|)
expr_stmt|;
name|populateHBaseTable
argument_list|(
name|hbaseTableName
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|getHiveConf
argument_list|()
operator|.
name|getAllProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// output settings
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"mapred/testHbaseTableMRRead"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// create job
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
literal|"hbase-mr-read-test"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapReadHTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|MapReadHTable
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|HCatInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|InputJobInfo
name|inputJobInfo
init|=
name|InputJobInfo
operator|.
name|create
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HCatInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|inputJobInfo
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Note: These asserts only works in case of LocalJobRunner as they run in same jvm.
comment|// If using MiniMRCluster, the tests will have to be modified.
name|assertFalse
argument_list|(
name|MapReadHTable
operator|.
name|error
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MapReadHTable
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|dropTableQuery
init|=
literal|"DROP TABLE "
operator|+
name|hbaseTableName
decl_stmt|;
name|CommandProcessorResponse
name|responseThree
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|dropTableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseThree
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isHbaseTableThere
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|hbaseTableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isHbaseTableThere
argument_list|)
expr_stmt|;
name|String
name|dropDB
init|=
literal|"DROP DATABASE "
operator|+
name|databaseName
decl_stmt|;
name|CommandProcessorResponse
name|responseFour
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|dropDB
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseFour
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TestHBaseTableProjectionReadMR
parameter_list|()
throws|throws
name|Exception
block|{
name|Initialize
argument_list|()
expr_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"mytable"
argument_list|)
decl_stmt|;
name|String
name|tableQuery
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"(key string, testqualifier1 string, testqualifier2 string) STORED BY "
operator|+
literal|"'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"
operator|+
literal|"TBLPROPERTIES ('hbase.columns.mapping'=':key,"
operator|+
literal|"testFamily:testQualifier1,testFamily:testQualifier2')"
decl_stmt|;
name|CommandProcessorResponse
name|responseTwo
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|tableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseTwo
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|hAdmin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|doesTableExist
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|doesTableExist
argument_list|)
expr_stmt|;
name|populateHBaseTable
argument_list|(
name|tableName
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|getHiveConf
argument_list|()
operator|.
name|getAllProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// output settings
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"mapred/testHBaseTableProjectionReadMR"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// create job
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
literal|"hbase-column-projection"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapReadProjHTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|HCatInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|InputJobInfo
name|inputJobInfo
init|=
name|InputJobInfo
operator|.
name|create
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HCatInputFormat
operator|.
name|setOutputSchema
argument_list|(
name|job
argument_list|,
name|getProjectionSchema
argument_list|()
argument_list|)
expr_stmt|;
name|HCatInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|inputJobInfo
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MapReadProjHTable
operator|.
name|error
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MapReadProjHTable
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|dropTableQuery
init|=
literal|"DROP TABLE "
operator|+
name|tableName
decl_stmt|;
name|CommandProcessorResponse
name|responseThree
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|dropTableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseThree
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isHbaseTableThere
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isHbaseTableThere
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TestHBaseInputFormatProjectionReadMR
parameter_list|()
throws|throws
name|Exception
block|{
name|Initialize
argument_list|()
expr_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"mytable"
argument_list|)
decl_stmt|;
name|String
name|tableQuery
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"(key string, testqualifier1 string, testqualifier2 string) STORED BY "
operator|+
literal|"'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"
operator|+
literal|"TBLPROPERTIES ('hbase.columns.mapping'=':key,"
operator|+
literal|"testFamily:testQualifier1,testFamily:testQualifier2')"
decl_stmt|;
name|CommandProcessorResponse
name|responseTwo
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|tableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseTwo
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|hAdmin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|doesTableExist
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|doesTableExist
argument_list|)
expr_stmt|;
name|populateHBaseTable
argument_list|(
name|tableName
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|getHiveConf
argument_list|()
operator|.
name|getAllProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// output settings
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"mapred/testHBaseTableProjectionReadMR"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// create job
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"hbase-scan-column"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapReadProjectionHTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|HBaseInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|InputJobInfo
name|inputJobInfo
init|=
name|InputJobInfo
operator|.
name|create
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//Configure projection schema
name|job
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_SCHEMA
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|getProjectionSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Job
name|newJob
init|=
operator|new
name|Job
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|HCatInputFormat
operator|.
name|setInput
argument_list|(
name|newJob
argument_list|,
name|inputJobInfo
argument_list|)
expr_stmt|;
name|String
name|inputJobString
init|=
name|newJob
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_JOB_INFO
argument_list|)
decl_stmt|;
name|InputJobInfo
name|info
init|=
operator|(
name|InputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|inputJobString
argument_list|)
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_JOB_INFO
argument_list|,
name|inputJobString
argument_list|)
expr_stmt|;
for|for
control|(
name|PartInfo
name|partinfo
range|:
name|info
operator|.
name|getPartitions
argument_list|()
control|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|partinfo
operator|.
name|getJobProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
name|job
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"testFamily:testQualifier1"
argument_list|,
name|job
operator|.
name|get
argument_list|(
name|TableInputFormat
operator|.
name|SCAN_COLUMNS
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormat
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|RunningJob
name|runJob
init|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|runJob
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|runJob
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MapReadProjHTable
operator|.
name|error
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MapReadProjHTable
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|dropTableQuery
init|=
literal|"DROP TABLE "
operator|+
name|tableName
decl_stmt|;
name|CommandProcessorResponse
name|responseThree
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|dropTableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseThree
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isHbaseTableThere
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isHbaseTableThere
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TestHBaseTableIgnoreAbortedTransactions
parameter_list|()
throws|throws
name|Exception
block|{
name|Initialize
argument_list|()
expr_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"mytable"
argument_list|)
decl_stmt|;
name|String
name|tableQuery
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"(key string, testqualifier1 string, testqualifier2 string) STORED BY "
operator|+
literal|"'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"
operator|+
literal|"TBLPROPERTIES ('hbase.columns.mapping'=':key,"
operator|+
literal|"testFamily:testQualifier1,testFamily:testQualifier2')"
decl_stmt|;
name|CommandProcessorResponse
name|responseTwo
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|tableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseTwo
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|hAdmin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|doesTableExist
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|doesTableExist
argument_list|)
expr_stmt|;
name|populateHBaseTable
argument_list|(
name|tableName
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|populateHBaseTableQualifier1
argument_list|(
name|tableName
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|populateHBaseTableQualifier1
argument_list|(
name|tableName
argument_list|,
literal|7
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|getHiveConf
argument_list|()
operator|.
name|getAllProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"mapred/testHBaseTableIgnoreAbortedTransactions"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
literal|"hbase-aborted-transaction"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapReadHTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|MapReadHTable
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|HCatInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|InputJobInfo
name|inputJobInfo
init|=
name|InputJobInfo
operator|.
name|create
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HCatInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|inputJobInfo
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the records do not contain aborted transaction
comment|// revisions 6 and 7 for testFamily:testQualifier1 and
comment|// fetches revision 5 for both testQualifier1 and testQualifier2
name|assertFalse
argument_list|(
name|MapReadHTable
operator|.
name|error
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MapReadHTable
operator|.
name|count
argument_list|)
expr_stmt|;
name|String
name|dropTableQuery
init|=
literal|"DROP TABLE "
operator|+
name|tableName
decl_stmt|;
name|CommandProcessorResponse
name|responseThree
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|dropTableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseThree
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isHbaseTableThere
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isHbaseTableThere
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TestHBaseTableIgnoreAbortedAndRunningTransactions
parameter_list|()
throws|throws
name|Exception
block|{
name|Initialize
argument_list|()
expr_stmt|;
name|String
name|tableName
init|=
name|newTableName
argument_list|(
literal|"mytable"
argument_list|)
decl_stmt|;
name|String
name|tableQuery
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"(key string, testqualifier1 string, testqualifier2 string) STORED BY "
operator|+
literal|"'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"
operator|+
literal|"TBLPROPERTIES ('hbase.columns.mapping'=':key,"
operator|+
literal|"testFamily:testQualifier1,testFamily:testQualifier2')"
decl_stmt|;
name|CommandProcessorResponse
name|responseTwo
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|tableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseTwo
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|hAdmin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|getHbaseConf
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|doesTableExist
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|doesTableExist
argument_list|)
expr_stmt|;
name|populateHBaseTable
argument_list|(
name|tableName
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|populateHBaseTableQualifier1
argument_list|(
name|tableName
argument_list|,
literal|3
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|//Committed transaction
name|populateHBaseTableQualifier1
argument_list|(
name|tableName
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Running transaction
name|populateHBaseTableQualifier1
argument_list|(
name|tableName
argument_list|,
literal|5
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|//Aborted transaction
name|populateHBaseTableQualifier1
argument_list|(
name|tableName
argument_list|,
literal|6
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|//Committed transaction
name|populateHBaseTableQualifier1
argument_list|(
name|tableName
argument_list|,
literal|7
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Running Transaction
name|populateHBaseTableQualifier1
argument_list|(
name|tableName
argument_list|,
literal|8
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|//Aborted Transaction
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|hcatConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_HIVE_CONF
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|getHiveConf
argument_list|()
operator|.
name|getAllProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"mapred/testHBaseTableIgnoreAbortedTransactions"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
literal|"hbase-running-aborted-transaction"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MapReadHTableRunningAbort
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|HCatInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|InputJobInfo
name|inputJobInfo
init|=
name|InputJobInfo
operator|.
name|create
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HCatInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|inputJobInfo
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the records do not contain running and aborted transaction
comment|// and it fetches revision 2 for testQualifier1 and testQualifier2
name|assertFalse
argument_list|(
name|MapReadHTableRunningAbort
operator|.
name|error
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MapReadHTableRunningAbort
operator|.
name|count
argument_list|)
expr_stmt|;
name|String
name|dropTableQuery
init|=
literal|"DROP TABLE "
operator|+
name|tableName
decl_stmt|;
name|CommandProcessorResponse
name|responseThree
init|=
name|hcatDriver
operator|.
name|run
argument_list|(
name|dropTableQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseThree
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isHbaseTableThere
init|=
name|hAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isHbaseTableThere
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|MapReadHTable
extends|extends
name|Mapper
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|HCatRecord
argument_list|,
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Text
argument_list|>
block|{
specifier|static
name|boolean
name|error
init|=
literal|false
decl_stmt|;
specifier|static
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|HCatRecord
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HCat record value"
operator|+
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|correctValues
init|=
operator|(
name|value
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
operator|&&
operator|(
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"testRow"
argument_list|)
operator|&&
operator|(
name|value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"textValue-5"
argument_list|)
operator|&&
operator|(
name|value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"textValue-5"
argument_list|)
decl_stmt|;
if|if
condition|(
name|correctValues
operator|==
literal|false
condition|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|resetCounters
parameter_list|()
block|{
name|error
operator|=
literal|false
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MapReadProjHTable
extends|extends
name|Mapper
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|HCatRecord
argument_list|,
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Text
argument_list|>
block|{
specifier|static
name|boolean
name|error
init|=
literal|false
decl_stmt|;
specifier|static
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|HCatRecord
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HCat record value"
operator|+
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|correctValues
init|=
operator|(
name|value
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
operator|&&
operator|(
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"testRow"
argument_list|)
operator|&&
operator|(
name|value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"textValue-5"
argument_list|)
decl_stmt|;
if|if
condition|(
name|correctValues
operator|==
literal|false
condition|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MapReadProjectionHTable
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|,
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Text
argument_list|>
block|{
specifier|static
name|boolean
name|error
init|=
literal|false
decl_stmt|;
specifier|static
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Result
name|result
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Result "
operator|+
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|list
init|=
name|result
operator|.
name|list
argument_list|()
decl_stmt|;
name|boolean
name|correctValues
init|=
operator|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|Bytes
operator|.
name|toString
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"testRow"
argument_list|)
operator|&&
operator|(
name|Bytes
operator|.
name|toString
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"textValue-5"
argument_list|)
operator|&&
operator|(
name|Bytes
operator|.
name|toString
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"testFamily"
argument_list|)
operator|&&
operator|(
name|Bytes
operator|.
name|toString
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"testQualifier1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|correctValues
operator|==
literal|false
condition|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MapReadHTableRunningAbort
extends|extends
name|Mapper
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|HCatRecord
argument_list|,
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Text
argument_list|>
block|{
specifier|static
name|boolean
name|error
init|=
literal|false
decl_stmt|;
specifier|static
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|HCatRecord
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HCat record value"
operator|+
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|correctValues
init|=
operator|(
name|value
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
operator|&&
operator|(
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"testRow"
argument_list|)
operator|&&
operator|(
name|value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"textValue-3"
argument_list|)
operator|&&
operator|(
name|value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"textValue-2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|correctValues
operator|==
literal|false
condition|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|HCatSchema
name|getProjectionSchema
parameter_list|()
throws|throws
name|HCatException
block|{
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|HCatFieldSchema
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"key"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|append
argument_list|(
operator|new
name|HCatFieldSchema
argument_list|(
literal|"testqualifier1"
argument_list|,
name|HCatFieldSchema
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
block|}
end_class

end_unit

