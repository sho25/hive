begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|rcfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|BytesRefArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|ColumnarSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|ColumnarStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|DefaultHCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatInputStorageDriver
import|;
end_import

begin_class
specifier|public
class|class
name|RCFileInputDriver
extends|extends
name|HCatInputStorageDriver
block|{
specifier|private
name|SerDe
name|serde
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RCFileInputDriver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|colsInData
decl_stmt|;
specifier|private
name|StructObjectInspector
name|oi
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partValues
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HCatFieldSchema
argument_list|>
name|outCols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|namePosMapping
decl_stmt|;
annotation|@
name|Override
specifier|public
name|InputFormat
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|getInputFormat
parameter_list|(
name|Properties
name|hcatProperties
parameter_list|)
block|{
return|return
operator|new
name|RCFileMapReduceInputFormat
argument_list|<
name|LongWritable
argument_list|,
name|BytesRefArrayWritable
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setInputPath
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setInputPath
argument_list|(
name|jobContext
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOriginalSchema
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|HCatSchema
name|dataSchema
parameter_list|)
throws|throws
name|IOException
block|{
name|colsInData
operator|=
name|dataSchema
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|namePosMapping
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|colsInData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|field
range|:
name|dataSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
name|namePosMapping
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|index
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOutputSchema
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|HCatSchema
name|desiredSchema
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Finds out which column ids needs to be projected and set them up for RCFile.
name|outCols
operator|=
name|desiredSchema
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|prjColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|prjCol
range|:
name|outCols
control|)
block|{
name|Integer
name|pos
init|=
name|namePosMapping
operator|.
name|get
argument_list|(
name|prjCol
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
literal|null
condition|)
block|{
name|prjColumns
operator|.
name|add
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|prjColumns
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|setReadColumnIDs
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|prjColumns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPartitionValues
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|)
throws|throws
name|IOException
block|{
name|partValues
operator|=
name|partitionValues
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HCatRecord
name|convertToHCatRecord
parameter_list|(
name|WritableComparable
name|ignored
parameter_list|,
name|Writable
name|bytesRefArray
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Deserialize bytesRefArray into struct and then convert that struct to
comment|// HCatRecord.
name|ColumnarStruct
name|struct
decl_stmt|;
try|try
block|{
name|struct
operator|=
operator|(
name|ColumnarStruct
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|bytesRefArray
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|outList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|outCols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colName
decl_stmt|;
name|Integer
name|index
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|col
range|:
name|outCols
control|)
block|{
name|colName
operator|=
name|col
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|index
operator|=
name|namePosMapping
operator|.
name|get
argument_list|(
name|colName
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|StructField
name|field
init|=
name|structFields
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|outList
operator|.
name|add
argument_list|(
name|getTypedObj
argument_list|(
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|struct
argument_list|,
name|field
argument_list|)
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outList
operator|.
name|add
argument_list|(
name|partValues
operator|.
name|get
argument_list|(
name|colName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DefaultHCatRecord
argument_list|(
name|outList
argument_list|)
return|;
block|}
specifier|private
name|Object
name|getTypedObj
parameter_list|(
name|Object
name|data
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The real work-horse method. We are gobbling up all the laziness benefits
comment|// of Hive-RCFile by deserializing everything and creating crisp  HCatRecord
comment|// with crisp Java objects inside it. We have to do it because higher layer
comment|// may not know how to do it.
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|data
argument_list|)
return|;
case|case
name|MAP
case|:
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyMap
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|ObjectInspector
name|keyOI
init|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valOI
init|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|typedMap
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|lazyMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
range|:
name|lazyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|typedMap
operator|.
name|put
argument_list|(
name|getTypedObj
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyOI
argument_list|)
argument_list|,
name|getTypedObj
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|valOI
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|typedMap
return|;
case|case
name|LIST
case|:
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|lazyList
init|=
name|loi
operator|.
name|getList
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|ObjectInspector
name|elemOI
init|=
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|typedList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|lazyList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|itr
init|=
name|lazyList
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|typedList
operator|.
name|add
argument_list|(
name|getTypedObj
argument_list|(
name|itr
operator|.
name|next
argument_list|()
argument_list|,
name|elemOI
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|typedList
return|;
case|case
name|STRUCT
case|:
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|typedStruct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|typedStruct
operator|.
name|add
argument_list|(
name|getTypedObj
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|data
argument_list|,
name|field
argument_list|)
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|typedStruct
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Don't know how to deserialize: "
operator|+
name|oi
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|Properties
name|hcatProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|context
argument_list|,
name|hcatProperties
argument_list|)
expr_stmt|;
comment|// Columnar Serde needs to know names and types of columns it needs to read.
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|HCatUtil
operator|.
name|getFieldSchemaList
argument_list|(
name|colsInData
argument_list|)
decl_stmt|;
name|hcatProperties
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMNS
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|hcatProperties
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
comment|// It seems RCFIle reads and writes nulls differently as compared to default hive.
comment|// setting these props to match LazySimpleSerde
name|hcatProperties
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
literal|"\\N"
argument_list|)
expr_stmt|;
name|hcatProperties
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
try|try
block|{
name|serde
operator|=
operator|new
name|ColumnarSerDe
argument_list|()
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|hcatProperties
argument_list|)
expr_stmt|;
name|oi
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|structFields
operator|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

