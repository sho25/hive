begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|ErrorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|HCatBaseOutputFormat
extends|extends
name|OutputFormat
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|HCatRecord
argument_list|>
block|{
comment|//  static final private Log LOG = LogFactory.getLog(HCatBaseOutputFormat.class);
comment|/**    * Gets the table schema for the table specified in the HCatOutputFormat.setOutput call    * on the specified job context.    * @param context the context    * @return the table schema    * @throws IOException if HCatOutputFromat.setOutput has not been called for the passed context    */
specifier|public
specifier|static
name|HCatSchema
name|getTableSchema
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputJobInfo
name|jobInfo
init|=
name|getJobInfo
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|jobInfo
operator|.
name|getTableSchema
argument_list|()
return|;
block|}
comment|/**    * Check for validity of the output-specification for the job.    * @param context information about the job    * @throws IOException when output should not be attempted    */
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|OutputFormat
argument_list|<
name|?
super|super
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
super|super
name|Writable
argument_list|>
name|outputFormat
init|=
name|getOutputFormat
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|outputFormat
operator|.
name|checkOutputSpecs
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the output format instance.    * @param context the job context    * @return the output format instance    * @throws IOException    */
specifier|protected
name|OutputFormat
argument_list|<
name|?
super|super
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
super|super
name|Writable
argument_list|>
name|getOutputFormat
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputJobInfo
name|jobInfo
init|=
name|getJobInfo
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|HCatOutputStorageDriver
name|driver
init|=
name|getOutputDriverInstance
argument_list|(
name|context
argument_list|,
name|jobInfo
argument_list|)
decl_stmt|;
name|OutputFormat
argument_list|<
name|?
super|super
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|?
super|super
name|Writable
argument_list|>
name|outputFormat
init|=
name|driver
operator|.
name|getOutputFormat
argument_list|()
decl_stmt|;
return|return
name|outputFormat
return|;
block|}
comment|/**    * Gets the HCatOuputJobInfo object by reading the Configuration and deserializing    * the string. If JobInfo is not present in the configuration, throws an    * exception since that means HCatOutputFormat.setOutput has not been called.    * @param jobContext the job context    * @return the OutputJobInfo object    * @throws IOException the IO exception    */
specifier|public
specifier|static
name|OutputJobInfo
name|getJobInfo
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobString
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_NOT_INITIALIZED
argument_list|)
throw|;
block|}
return|return
operator|(
name|OutputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|jobString
argument_list|)
return|;
block|}
comment|/**    * Gets the output storage driver instance.    * @param jobContext the job context    * @param jobInfo the output job info    * @return the output driver instance    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
name|HCatOutputStorageDriver
name|getOutputDriverInstance
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|OutputJobInfo
name|jobInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getOutputDriverInstance
argument_list|(
name|jobContext
argument_list|,
name|jobInfo
argument_list|,
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**    * Gets the output storage driver instance, with allowing specification of missing dynamic partvals    * @param jobContext the job context    * @param jobInfo the output job info    * @return the output driver instance    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
name|HCatOutputStorageDriver
name|getOutputDriverInstance
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|OutputJobInfo
name|jobInfo
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dynamicPartVals
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|HCatOutputStorageDriver
argument_list|>
name|driverClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HCatOutputStorageDriver
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|jobInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getOutputSDClass
argument_list|()
argument_list|)
decl_stmt|;
name|HCatOutputStorageDriver
name|driver
init|=
name|driverClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
init|=
name|jobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getPartitionValues
argument_list|()
decl_stmt|;
name|String
name|location
init|=
name|jobInfo
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|dynamicPartVals
operator|!=
literal|null
condition|)
block|{
comment|// dynamic part vals specified
name|List
argument_list|<
name|String
argument_list|>
name|dynamicPartKeys
init|=
name|jobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getDynamicPartitioningKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|dynamicPartVals
operator|.
name|size
argument_list|()
operator|!=
name|dynamicPartKeys
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_INVALID_PARTITION_VALUES
argument_list|,
literal|"Unable to instantiate dynamic partitioning storage driver, mismatch between"
operator|+
literal|" number of partition values obtained["
operator|+
name|dynamicPartVals
operator|.
name|size
argument_list|()
operator|+
literal|"] and number of partition values required["
operator|+
name|dynamicPartKeys
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dynamicPartKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|partitionValues
operator|.
name|put
argument_list|(
name|dynamicPartKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|dynamicPartVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// re-home location, now that we know the rest of the partvals
name|Table
name|table
init|=
name|jobInfo
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|schema
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|partitionCols
operator|.
name|add
argument_list|(
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|location
operator|=
name|driver
operator|.
name|getOutputLocation
argument_list|(
name|jobContext
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|partitionCols
argument_list|,
name|partitionValues
argument_list|,
name|jobContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_DYNAMIC_PTN_JOBID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Initialize the storage driver
name|driver
operator|.
name|setSchema
argument_list|(
name|jobContext
argument_list|,
name|jobInfo
operator|.
name|getOutputSchema
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|setPartitionValues
argument_list|(
name|jobContext
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
name|driver
operator|.
name|setOutputPath
argument_list|(
name|jobContext
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|//          HCatUtil.logMap(LOG,"Setting outputPath ["+location+"] for ",partitionValues);
name|driver
operator|.
name|initialize
argument_list|(
name|jobContext
argument_list|,
name|jobInfo
operator|.
name|getStorerInfo
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|driver
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|HCatException
condition|)
block|{
throw|throw
operator|(
name|HCatException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|HCatException
argument_list|(
name|ErrorType
operator|.
name|ERROR_INIT_STORAGE_DRIVER
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Gets the output storage driver instance, with allowing specification     * of partvals from which it picks the dynamic partvals    * @param jobContext the job context    * @param jobInfo the output job info    * @return the output driver instance    * @throws IOException    */
specifier|protected
specifier|static
name|HCatOutputStorageDriver
name|getOutputDriverInstance
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|OutputJobInfo
name|jobInfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fullPartSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dynamicPartKeys
init|=
name|jobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getDynamicPartitioningKeys
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|dynamicPartKeys
operator|==
literal|null
operator|)
operator|||
operator|(
name|dynamicPartKeys
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
name|getOutputDriverInstance
argument_list|(
name|context
argument_list|,
name|jobInfo
argument_list|,
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dynKeyVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dynamicPartKey
range|:
name|dynamicPartKeys
control|)
block|{
name|dynKeyVals
operator|.
name|add
argument_list|(
name|fullPartSpec
operator|.
name|get
argument_list|(
name|dynamicPartKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|getOutputDriverInstance
argument_list|(
name|context
argument_list|,
name|jobInfo
argument_list|,
name|dynKeyVals
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|setPartDetails
parameter_list|(
name|OutputJobInfo
name|jobInfo
parameter_list|,
specifier|final
name|HCatSchema
name|schema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partMap
parameter_list|)
throws|throws
name|HCatException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|posOfPartCols
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|posOfDynPartCols
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// If partition columns occur in data, we want to remove them.
comment|// So, find out positions of partition columns in schema provided by user.
comment|// We also need to update the output Schema with these deletions.
comment|// Note that, output storage drivers never sees partition columns in data
comment|// or schema.
name|HCatSchema
name|schemaWithoutParts
init|=
operator|new
name|HCatSchema
argument_list|(
name|schema
operator|.
name|getFields
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partKey
range|:
name|partMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Integer
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|schema
operator|.
name|getPosition
argument_list|(
name|partKey
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|posOfPartCols
operator|.
name|add
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|schemaWithoutParts
operator|.
name|remove
argument_list|(
name|schema
operator|.
name|get
argument_list|(
name|partKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Also, if dynamic partitioning is being used, we want to
comment|// set appropriate list of columns for the columns to be dynamically specified.
comment|// These would be partition keys too, so would also need to be removed from
comment|// output schema and partcols
if|if
condition|(
name|jobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|isDynamicPartitioningUsed
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|partKey
range|:
name|jobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getDynamicPartitioningKeys
argument_list|()
control|)
block|{
name|Integer
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|schema
operator|.
name|getPosition
argument_list|(
name|partKey
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|posOfPartCols
operator|.
name|add
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|posOfDynPartCols
operator|.
name|add
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|schemaWithoutParts
operator|.
name|remove
argument_list|(
name|schema
operator|.
name|get
argument_list|(
name|partKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|HCatUtil
operator|.
name|validatePartitionSchema
argument_list|(
name|jobInfo
operator|.
name|getTable
argument_list|()
argument_list|,
name|schemaWithoutParts
argument_list|)
expr_stmt|;
name|jobInfo
operator|.
name|setPosOfPartCols
argument_list|(
name|posOfPartCols
argument_list|)
expr_stmt|;
name|jobInfo
operator|.
name|setPosOfDynPartCols
argument_list|(
name|posOfDynPartCols
argument_list|)
expr_stmt|;
name|jobInfo
operator|.
name|setOutputSchema
argument_list|(
name|schemaWithoutParts
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

