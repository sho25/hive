begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|EximUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchemaUtils
import|;
end_import

begin_comment
comment|/** The InputFormat to use to read data from HCat */
end_comment

begin_class
specifier|public
class|class
name|HCatEximInputFormat
extends|extends
name|HCatBaseInputFormat
block|{
comment|/**    * Set the input to use for the Job. This queries the metadata file with    * the specified partition predicates, gets the matching partitions, puts    * the information in the conf object. The inputInfo object is updated with    * information needed in the client context    *    * @param job the job object    * @return two hcat schemas, for the table columns and the partition keys    * @throws IOException    *           the exception in communicating with the metadata server    */
specifier|public
specifier|static
name|List
argument_list|<
name|HCatSchema
argument_list|>
name|setInput
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionFilter
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|location
argument_list|)
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|fromPath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|Path
name|metadataPath
init|=
operator|new
name|Path
argument_list|(
name|fromPath
argument_list|,
literal|"_metadata"
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|,
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|tp
init|=
name|EximUtil
operator|.
name|readMetaData
argument_list|(
name|fs
argument_list|,
name|metadataPath
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|tp
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|HCatTableInfo
name|inputInfo
init|=
name|HCatTableInfo
operator|.
name|getInputTableInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PartInfo
argument_list|>
name|partInfoList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|partCols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fsc
range|:
name|partCols
control|)
block|{
name|partColNames
operator|.
name|add
argument_list|(
name|fsc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|tp
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|partInfoList
operator|=
name|filterPartitions
argument_list|(
name|partitionFilter
argument_list|,
name|partitions
argument_list|,
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partInfoList
operator|=
operator|new
name|ArrayList
argument_list|<
name|PartInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|HCatSchema
name|schema
init|=
operator|new
name|HCatSchema
argument_list|(
name|HCatUtil
operator|.
name|getHCatFieldSchemaList
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|String
name|inputStorageDriverClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
argument_list|)
condition|)
block|{
name|inputStorageDriverClass
operator|=
name|parameters
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No input storage driver classname found, cannot read partition"
argument_list|)
throw|;
block|}
name|Properties
name|hcatProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|parameters
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|InitializeInput
operator|.
name|HCAT_KEY_PREFIX
argument_list|)
condition|)
block|{
name|hcatProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|PartInfo
name|partInfo
init|=
operator|new
name|PartInfo
argument_list|(
name|schema
argument_list|,
name|inputStorageDriverClass
argument_list|,
name|location
operator|+
literal|"/data"
argument_list|,
name|hcatProperties
argument_list|)
decl_stmt|;
name|partInfoList
operator|.
name|add
argument_list|(
name|partInfo
argument_list|)
expr_stmt|;
block|}
name|JobInfo
name|hcatJobInfo
init|=
operator|new
name|JobInfo
argument_list|(
name|inputInfo
argument_list|,
name|HCatUtil
operator|.
name|getTableSchemaWithPtnCols
argument_list|(
name|table
argument_list|)
argument_list|,
name|partInfoList
argument_list|)
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_JOB_INFO
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|hcatJobInfo
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HCatSchema
argument_list|>
name|rv
init|=
operator|new
name|ArrayList
argument_list|<
name|HCatSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|rv
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rv
operator|.
name|add
argument_list|(
name|HCatSchemaUtils
operator|.
name|getHCatSchema
argument_list|(
name|partCols
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rv
return|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|PartInfo
argument_list|>
name|filterPartitions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionFilter
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|PartInfo
argument_list|>
name|partInfos
init|=
operator|new
name|LinkedList
argument_list|<
name|PartInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|boolean
name|matches
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|partition
operator|.
name|getValues
argument_list|()
decl_stmt|;
assert|assert
name|partCols
operator|.
name|size
argument_list|()
operator|==
name|partVals
operator|.
name|size
argument_list|()
assert|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|EximUtil
operator|.
name|makePartSpec
argument_list|(
name|partCols
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionFilter
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|constraint
range|:
name|partitionFilter
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|partVal
init|=
name|partSpec
operator|.
name|get
argument_list|(
name|constraint
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|partVal
operator|==
literal|null
operator|)
operator|||
operator|!
name|partVal
operator|.
name|equals
argument_list|(
name|constraint
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|matches
condition|)
block|{
name|PartInfo
name|partInfo
init|=
name|InitializeInput
operator|.
name|extractPartInfo
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|,
name|partition
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|partInfo
operator|.
name|setPartitionValues
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
name|partInfos
operator|.
name|add
argument_list|(
name|partInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partInfos
return|;
block|}
block|}
end_class

end_unit

