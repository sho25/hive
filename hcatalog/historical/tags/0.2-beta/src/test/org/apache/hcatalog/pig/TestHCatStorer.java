begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|MiniCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|rcfile
operator|.
name|RCFileInputDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|rcfile
operator|.
name|RCFileOutputDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|ExecType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|FrontendException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|UDFContext
import|;
end_import

begin_class
specifier|public
class|class
name|TestHCatStorer
extends|extends
name|TestCase
block|{
name|MiniCluster
name|cluster
init|=
name|MiniCluster
operator|.
name|buildCluster
argument_list|()
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
name|Properties
name|props
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"fs.default.name"
argument_list|,
name|cluster
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
argument_list|)
expr_stmt|;
name|fullFileName
operator|=
name|cluster
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"fs.default.name"
argument_list|)
operator|+
name|fileName
expr_stmt|;
block|}
name|String
name|fileName
init|=
literal|"/tmp/input.data"
decl_stmt|;
name|String
name|fullFileName
decl_stmt|;
comment|//  public void testStoreFuncMap() throws IOException{
comment|//
comment|//    driver.run("drop table junit_unparted");
comment|//    String createTable = "create table junit_unparted(b string,arr_of_maps array<map<string,string>>) stored as RCFILE " +
comment|//        "tblproperties('hcat.isd'='org.apache.hadoop.hive.hCatalog.rcfile.RCFileInputStorageDriver'," +
comment|//        "'hcat.osd'='org.apache.hadoop.hive.hCatalog.rcfile.RCFileOutputStorageDriver') ";
comment|//    int retCode = driver.run(createTable).getResponseCode();
comment|//    if(retCode != 0) {
comment|//      throw new IOException("Failed to create table.");
comment|//    }
comment|//
comment|//    MiniCluster.deleteFile(cluster, fileName);
comment|//    MiniCluster.createInputFile(cluster, fileName, new String[]{"test\t{([a#haddop,b#pig])}","data\t{([b#hive,a#hcat])}"});
comment|//
comment|//    PigServer server = new PigServer(ExecType.LOCAL, props);
comment|//    UDFContext.getUDFContext().setClientSystemProps();
comment|//    server.setBatchOn();
comment|//    server.registerQuery("A = load '"+ fullFileName +"' as (b:chararray,arr_of_maps:bag{mytup:tuple ( mymap:map[ ])});");
comment|//    server.registerQuery("store A into 'default.junit_unparted' using org.apache.hadoop.hive.hCatalog.pig.HCatStorer('','b:chararray,arr_of_maps:bag{mytup:tuple ( mymap:map[ ])}');");
comment|//    server.executeBatch();
comment|//
comment|//
comment|//
comment|//    MiniCluster.deleteFile(cluster, fileName);
comment|//
comment|//    driver.run("select * from junit_unparted");
comment|//    ArrayList<String> res = new ArrayList<String>();
comment|//    driver.getResults(res);
comment|//    driver.run("drop table junit_unparted");
comment|//    Iterator<String> itr = res.iterator();
comment|//    System.out.println(itr.next());
comment|//    System.out.println(itr.next());
comment|//   assertFalse(itr.hasNext());
comment|//
comment|//  }
specifier|public
name|void
name|testPartColsInData
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted(a int) partitioned by (b string) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|11
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|input
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|"\t1"
expr_stmt|;
block|}
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('b=1');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = load 'default.junit_unparted' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|itr
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultiPartColsInData
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table employee"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"CREATE TABLE employee (emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING ) "
operator|+
literal|" PARTITIONED BY (emp_country STRING , emp_state STRING ) STORED AS RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputData
init|=
block|{
literal|"111237\tKrishna\t01/01/1990\tM\tIN\tTN"
block|,
literal|"111238\tKalpana\t01/01/2000\tF\tIN\tKA"
block|,
literal|"111239\tSatya\t01/01/2001\tM\tIN\tKL"
block|,
literal|"111240\tKavya\t01/01/2002\tF\tIN\tAP"
block|}
decl_stmt|;
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|pig
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|pig
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"A = LOAD '"
operator|+
name|fullFileName
operator|+
literal|"' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"
operator|+
literal|"emp_gender:chararray,emp_country:chararray,emp_state:chararray);"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"TN = FILTER A BY emp_state == 'TN';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"KA = FILTER A BY emp_state == 'KA';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"KL = FILTER A BY emp_state == 'KL';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"AP = FILTER A BY emp_state == 'AP';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE TN INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN,emp_state=TN');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE KA INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN,emp_state=KA');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE KL INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN,emp_state=KL');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE AP INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN,emp_state=AP');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from employee"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table employee"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStoreInPartiitonedTbl
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted(a int) partitioned by (b string) stored as RCFILE "
operator|+
literal|"tblproperties('hcat.isd'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='org.apache.hcatalog.rcfile.RCFileOutputDriver') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|11
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|input
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|""
expr_stmt|;
block|}
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('b=1');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = load 'default.junit_unparted' using "
operator|+
name|HCatLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|itr
init|=
name|server
operator|.
name|openIterator
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNoAlias
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_parted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_parted(a int, b string) partitioned by (ds string) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|boolean
name|errCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = foreach A generate a+10, b;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B into 'junit_parted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('ds=20100101');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PigException
name|fe
parameter_list|)
block|{
name|PigException
name|pe
init|=
name|LogUtils
operator|.
name|getPigException
argument_list|(
name|fe
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pe
operator|instanceof
name|FrontendException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|,
name|pe
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Column name for a field is not specified. Please provide the full schema as an argument to HCatStorer."
argument_list|)
argument_list|)
expr_stmt|;
name|errCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|errCaught
argument_list|)
expr_stmt|;
name|errCaught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int, B:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = foreach A generate a, B;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B into 'junit_parted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('ds=20100101');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PigException
name|fe
parameter_list|)
block|{
name|PigException
name|pe
init|=
name|LogUtils
operator|.
name|getPigException
argument_list|(
name|fe
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pe
operator|instanceof
name|FrontendException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PigHCatUtil
operator|.
name|PIG_EXCEPTION_CODE
argument_list|,
name|pe
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Column names should all be in lowercase. Invalid name found: B"
argument_list|)
argument_list|)
expr_stmt|;
name|errCaught
operator|=
literal|true
expr_stmt|;
block|}
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_parted"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errCaught
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStoreMultiTables
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted(a int, b string) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'hcat.osd'='org.apache.hcatalog.rcfile.RCFileOutputDriver') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted2"
argument_list|)
expr_stmt|;
name|createTable
operator|=
literal|"create table junit_unparted2(a int, b string) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
expr_stmt|;
name|retCode
operator|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|input
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = filter A by a< 2;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B into 'junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"C = filter A by a>= 2;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store C into 'junit_unparted2' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted2"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res2
argument_list|)
expr_stmt|;
name|res
operator|.
name|addAll
argument_list|(
name|res2
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted2"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStoreWithNoSchema
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted(a int, b string) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|input
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStoreWithNoCtorArgs
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted(a int, b string) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|input
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEmptyStore
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted(a int, b string) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|input
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"B = filter A by a> 100;"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store B into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('','a:int,b:chararray');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBagNStruct
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted(b string,a struct<a1:int>,  arr_of_struct array<string>, "
operator|+
literal|"arr_of_struct2 array<struct<s1:string,s2:string>>,  arr_of_struct3 array<struct<s3:string>>) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"zookeeper\t(2)\t{(pig)}\t{(pnuts,hdfs)}\t{(hadoop),(hcat)}"
block|,
literal|"chubby\t(2)\t{(sawzall)}\t{(bigtable,gfs)}\t{(mapreduce),(hcat)}"
block|}
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (b:chararray, a:tuple(a1:int), arr_of_struct:bag{mytup:tuple(s1:chararray)}, arr_of_struct2:bag{mytup:tuple(s1:chararray,s2:chararray)}, arr_of_struct3:bag{t3:tuple(s3:chararray)});"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('','b:chararray, a:tuple(a1:int),"
operator|+
literal|" arr_of_struct:bag{mytup:tuple(s1:chararray)}, arr_of_struct2:bag{mytup:tuple(s1:chararray,s2:chararray)}, arr_of_struct3:bag{t3:tuple(s3:chararray)}');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"zookeeper\t{\"a1\":2}\t[\"pig\"]\t[{\"s1\":\"pnuts\",\"s2\":\"hdfs\"}]\t[{\"s3\":\"hadoop\"},{\"s3\":\"hcat\"}]"
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"chubby\t{\"a1\":2}\t[\"sawzall\"]\t[{\"s1\":\"bigtable\",\"s2\":\"gfs\"}]\t[{\"s3\":\"mapreduce\"},{\"s3\":\"hcat\"}]"
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStoreFuncAllSimpleTypes
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted(a int, b float, c double, d bigint, e string) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|input
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|"\t"
operator|+
name|i
operator|*
literal|2.1f
operator|+
literal|"\t"
operator|+
name|i
operator|*
literal|1.1d
operator|+
literal|"\t"
operator|+
name|i
operator|*
literal|2L
operator|+
literal|"\t"
operator|+
literal|"lets hcat"
expr_stmt|;
block|}
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int, b:float, c:double, d:long, e:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('','a:int, b:float, c:double, d:long, e:chararray');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStoreFuncSimple
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"create table junit_unparted(a int, b string) stored as RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|input
index|[
name|k
operator|++
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|j
expr_stmt|;
block|}
block|}
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|PigServer
name|server
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|server
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"A = load '"
operator|+
name|fullFileName
operator|+
literal|"' as (a:int, b:chararray);"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerQuery
argument_list|(
literal|"store A into 'default.junit_unparted' using "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('','a:int,b:chararray');"
argument_list|)
expr_stmt|;
name|server
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from junit_unparted"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table junit_unparted"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|res
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|si
operator|+
literal|"\t"
operator|+
name|j
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDynamicPartitioningMultiPartColsInDataPartialSpec
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists employee"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"CREATE TABLE employee (emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING ) "
operator|+
literal|" PARTITIONED BY (emp_country STRING , emp_state STRING ) STORED AS RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputData
init|=
block|{
literal|"111237\tKrishna\t01/01/1990\tM\tIN\tTN"
block|,
literal|"111238\tKalpana\t01/01/2000\tF\tIN\tKA"
block|,
literal|"111239\tSatya\t01/01/2001\tM\tIN\tKL"
block|,
literal|"111240\tKavya\t01/01/2002\tF\tIN\tAP"
block|}
decl_stmt|;
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|pig
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|pig
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"A = LOAD '"
operator|+
name|fullFileName
operator|+
literal|"' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"
operator|+
literal|"emp_gender:chararray,emp_country:chararray,emp_state:chararray);"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"IN = FILTER A BY emp_country == 'IN';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE IN INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"('emp_country=IN');"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from employee"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table employee"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDynamicPartitioningMultiPartColsInDataNoSpec
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists employee"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"CREATE TABLE employee (emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING ) "
operator|+
literal|" PARTITIONED BY (emp_country STRING , emp_state STRING ) STORED AS RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputData
init|=
block|{
literal|"111237\tKrishna\t01/01/1990\tM\tIN\tTN"
block|,
literal|"111238\tKalpana\t01/01/2000\tF\tIN\tKA"
block|,
literal|"111239\tSatya\t01/01/2001\tM\tIN\tKL"
block|,
literal|"111240\tKavya\t01/01/2002\tF\tIN\tAP"
block|}
decl_stmt|;
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|pig
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|pig
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"A = LOAD '"
operator|+
name|fullFileName
operator|+
literal|"' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"
operator|+
literal|"emp_gender:chararray,emp_country:chararray,emp_state:chararray);"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"IN = FILTER A BY emp_country == 'IN';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE IN INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from employee"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputData
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table employee"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDynamicPartitioningMultiPartColsNoDataInDataNoSpec
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists employee"
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
literal|"CREATE TABLE employee (emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING ) "
operator|+
literal|" PARTITIONED BY (emp_country STRING , emp_state STRING ) STORED AS RCFILE "
operator|+
literal|"tblproperties('"
operator|+
name|HCatConstants
operator|.
name|HCAT_ISD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileInputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"',"
operator|+
literal|"'"
operator|+
name|HCatConstants
operator|.
name|HCAT_OSD_CLASS
operator|+
literal|"'='"
operator|+
name|RCFileOutputDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"') "
decl_stmt|;
name|int
name|retCode
init|=
name|driver
operator|.
name|run
argument_list|(
name|createTable
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create table."
argument_list|)
throw|;
block|}
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputData
init|=
block|{}
decl_stmt|;
name|MiniCluster
operator|.
name|createInputFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|PigServer
name|pig
init|=
operator|new
name|PigServer
argument_list|(
name|ExecType
operator|.
name|LOCAL
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|UDFContext
operator|.
name|getUDFContext
argument_list|()
operator|.
name|setClientSystemProps
argument_list|()
expr_stmt|;
name|pig
operator|.
name|setBatchOn
argument_list|()
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"A = LOAD '"
operator|+
name|fullFileName
operator|+
literal|"' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"
operator|+
literal|"emp_gender:chararray,emp_country:chararray,emp_state:chararray);"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"IN = FILTER A BY emp_country == 'IN';"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|registerQuery
argument_list|(
literal|"STORE IN INTO 'employee' USING "
operator|+
name|HCatStorer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|pig
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select * from employee"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MiniCluster
operator|.
name|deleteFile
argument_list|(
name|cluster
argument_list|,
name|fullFileName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table employee"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

