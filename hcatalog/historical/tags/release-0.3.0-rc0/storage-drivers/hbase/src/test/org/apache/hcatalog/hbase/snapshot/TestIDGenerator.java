begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|SkeletonHBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestIDGenerator
extends|extends
name|SkeletonHBaseTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testIDGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|getHbaseConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
literal|2181
argument_list|)
decl_stmt|;
name|String
name|servers
init|=
name|getHbaseConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|)
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|servers
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|ZKUtil
name|zkutil
init|=
operator|new
name|ZKUtil
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/rm_base"
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"myTable"
decl_stmt|;
name|long
name|initId
init|=
name|zkutil
operator|.
name|nextId
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|long
name|id
init|=
name|zkutil
operator|.
name|nextId
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initId
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleClients
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|port
init|=
name|getHbaseConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
literal|2181
argument_list|)
decl_stmt|;
name|String
name|servers
init|=
name|getHbaseConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|)
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|servers
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|IDGenClient
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<
name|IDGenClient
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|IDGenClient
name|idClient
init|=
operator|new
name|IDGenClient
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/rm_base"
argument_list|,
literal|10
argument_list|,
literal|"testTable"
argument_list|)
decl_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|idClient
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|IDGenClient
name|idClient
range|:
name|clients
control|)
block|{
name|idClient
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|IDGenClient
name|idClient
range|:
name|clients
control|)
block|{
name|idClient
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|idMap
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IDGenClient
name|idClient
range|:
name|clients
control|)
block|{
name|idMap
operator|.
name|putAll
argument_list|(
name|idClient
operator|.
name|getIdMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|idMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|int
name|startId
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Long
name|key
range|:
name|keys
control|)
block|{
name|Long
name|id
init|=
name|idMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Key: "
operator|+
name|key
operator|+
literal|" Value "
operator|+
name|id
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|id
operator|==
name|startId
argument_list|)
expr_stmt|;
name|startId
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

