begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputStorageDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatTableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Base class share by both {@link HBaseBulkOutputStorageDriver} and {@link HBaseDirectOutputStorageDriver}  */
end_comment

begin_class
specifier|abstract
class|class
name|HBaseBaseOutputStorageDriver
extends|extends
name|HCatOutputStorageDriver
block|{
specifier|protected
name|HCatTableInfo
name|tableInfo
decl_stmt|;
specifier|protected
name|ResultConverter
name|converter
decl_stmt|;
specifier|protected
name|OutputJobInfo
name|outputJobInfo
decl_stmt|;
specifier|protected
name|HCatSchema
name|schema
decl_stmt|;
specifier|protected
name|HCatSchema
name|outputSchema
decl_stmt|;
comment|/**      *  Subclasses are required to serialize OutputJobInfo back into jobContext.      *  Since initialize() sets some properties in OutputJobInfo, requiring      *  an update of the instance stored in jobContext.      * @param context the job context object      * @param hcatProperties the properties for the storage driver      * @throws IOException      */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|Properties
name|hcatProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|hcatProperties
operator|=
operator|(
name|Properties
operator|)
name|hcatProperties
operator|.
name|clone
argument_list|()
expr_stmt|;
name|super
operator|.
name|initialize
argument_list|(
name|context
argument_list|,
name|hcatProperties
argument_list|)
expr_stmt|;
name|String
name|jobString
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"OutputJobInfo information not found in JobContext. HCatInputFormat.setOutput() not called?"
argument_list|)
throw|;
block|}
name|outputJobInfo
operator|=
operator|(
name|OutputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|jobString
argument_list|)
expr_stmt|;
comment|//override table properties with user defined ones
comment|//TODO in the future we should be more selective on what to override
name|hcatProperties
operator|.
name|putAll
argument_list|(
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|hcatProperties
argument_list|)
expr_stmt|;
name|hcatProperties
operator|=
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|tableInfo
operator|=
name|outputJobInfo
operator|.
name|getTableInfo
argument_list|()
expr_stmt|;
name|schema
operator|=
name|tableInfo
operator|.
name|getDataColumns
argument_list|()
expr_stmt|;
name|String
name|qualifiedTableName
init|=
name|HBaseHCatStorageHandler
operator|.
name|getFullyQualifiedName
argument_list|(
name|tableInfo
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|HCatUtil
operator|.
name|getFieldSchemaList
argument_list|(
name|outputSchema
operator|.
name|getFields
argument_list|()
argument_list|)
decl_stmt|;
name|hcatProperties
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMNS
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|hcatProperties
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_OUTPUT_TABLE_NAME_KEY
argument_list|,
name|qualifiedTableName
argument_list|)
expr_stmt|;
name|String
name|txnString
init|=
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_WRITE_TXN_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnString
operator|==
literal|null
condition|)
block|{
comment|//outputSchema should be set by HCatOutputFormat calling setSchema, prior to initialize being called
comment|//TODO reconcile output_revision passing to HBaseSerDeResultConverter
comment|//on the first call to this method hcatProperties will not contain an OUTPUT_VERSION but that doesn't
comment|//matter since we won't use any facilities that require that property set during that run
name|converter
operator|=
operator|new
name|HBaseSerDeResultConverter
argument_list|(
name|schema
argument_list|,
name|outputSchema
argument_list|,
name|hcatProperties
argument_list|)
expr_stmt|;
name|RevisionManager
name|rm
init|=
name|HBaseHCatStorageHandler
operator|.
name|getOpenedRevisionManager
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Transaction
name|txn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|txn
operator|=
name|rm
operator|.
name|beginWriteTransaction
argument_list|(
name|qualifiedTableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|converter
operator|.
name|getHBaseScanColumns
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_WRITE_TXN_KEY
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|txn
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Transaction
name|txn
init|=
operator|(
name|Transaction
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|txnString
argument_list|)
decl_stmt|;
name|converter
operator|=
operator|new
name|HBaseSerDeResultConverter
argument_list|(
name|schema
argument_list|,
name|outputSchema
argument_list|,
name|hcatProperties
argument_list|,
name|txn
operator|.
name|getRevisionNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSchema
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|HCatSchema
name|schema
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|outputSchema
operator|=
name|schema
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|generateKey
parameter_list|(
name|HCatRecord
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|//HBase doesn't use KEY as part of output
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|convertValue
parameter_list|(
name|HCatRecord
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|converter
operator|.
name|convert
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPartitionValues
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|)
throws|throws
name|IOException
block|{
comment|//no partitions for this driver
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getWorkFilePath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|,
name|String
name|outputLoc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOutputPath
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
comment|//no output path
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOutputLocation
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|String
name|tableLocation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|,
name|String
name|dynHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

