begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RevisionManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|TableSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|ZKBasedRevisionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatInputStorageDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatOutputStorageDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatTableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|InputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|OutputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|storagehandler
operator|.
name|HCatStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookBase
import|;
end_import

begin_comment
comment|/**  * This class HBaseHCatStorageHandler provides functionality to create HBase  * tables through HCatalog. The implementation is very similar to the  * HiveHBaseStorageHandler, with more details to suit HCatalog.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseHCatStorageHandler
extends|extends
name|HCatStorageHandler
block|{
specifier|final
specifier|static
specifier|public
name|String
name|DEFAULT_PREFIX
init|=
literal|"default."
decl_stmt|;
specifier|private
name|Configuration
name|hbaseConf
decl_stmt|;
specifier|private
name|HBaseAdmin
name|admin
decl_stmt|;
comment|/*      * @return subclass of HCatInputStorageDriver      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler      * #getInputStorageDriver()      */
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|HCatInputStorageDriver
argument_list|>
name|getInputStorageDriver
parameter_list|()
block|{
return|return
name|HBaseInputStorageDriver
operator|.
name|class
return|;
block|}
comment|/*      * @return subclass of HCatOutputStorageDriver      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler      * #getOutputStorageDriver()      */
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|HCatOutputStorageDriver
argument_list|>
name|getOutputStorageDriver
parameter_list|()
block|{
return|return
name|HBaseOutputStorageDriver
operator|.
name|class
return|;
block|}
comment|/*      * @return instance of HiveAuthorizationProvider      *      * @throws HiveException      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler#      * getAuthorizationProvider()      */
annotation|@
name|Override
specifier|public
name|HiveAuthorizationProvider
name|getAuthorizationProvider
parameter_list|()
throws|throws
name|HiveException
block|{
name|HBaseAuthorizationProvider
name|hbaseAuth
init|=
operator|new
name|HBaseAuthorizationProvider
argument_list|()
decl_stmt|;
name|hbaseAuth
operator|.
name|init
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|hbaseAuth
return|;
block|}
comment|/*      * @param table      *      * @throws MetaException      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler      * #commitCreateTable(org.apache.hadoop.hive.metastore.api.Table)      */
annotation|@
name|Override
specifier|public
name|void
name|commitCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{     }
comment|/*      * @param instance of table      *      * @param deleteData      *      * @throws MetaException      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler      * #commitDropTable(org.apache.hadoop.hive.metastore.api.Table, boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|commitDropTable
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
block|{
name|checkDeleteTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
comment|/*      * @param instance of table      *      * @throws MetaException      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler      * #preCreateTable(org.apache.hadoop.hive.metastore.api.Table)      */
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|isExternal
init|=
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|hbaseConf
operator|=
name|getConf
argument_list|()
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"LOCATION may not be specified for HBase."
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|tableName
init|=
name|getHBaseTableName
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|String
name|hbaseColumnsMapping
init|=
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|putToParameters
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_COLUMN_MAPPING_KEY
argument_list|,
name|hbaseColumnsMapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|hbaseColumnsMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"No hbase.columns.mapping defined in table"
operator|+
literal|" properties."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|hbaseColumnFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hbaseColumnQualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|hbaseColumnFamiliesBytes
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|hbaseColumnQualifiersBytes
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|iKey
init|=
name|HBaseSerDe
operator|.
name|parseColumnMapping
argument_list|(
name|hbaseColumnsMapping
argument_list|,
name|hbaseColumnFamilies
argument_list|,
name|hbaseColumnFamiliesBytes
argument_list|,
name|hbaseColumnQualifiers
argument_list|,
name|hbaseColumnQualifiersBytes
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDesc
decl_stmt|;
if|if
condition|(
operator|!
name|getHBaseAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
comment|// if it is not an external table then create one
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
comment|// Create the column descriptors
name|tableDesc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|uniqueColumnFamilies
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|hbaseColumnFamilies
argument_list|)
decl_stmt|;
name|uniqueColumnFamilies
operator|.
name|remove
argument_list|(
name|hbaseColumnFamilies
operator|.
name|get
argument_list|(
name|iKey
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|columnFamily
range|:
name|uniqueColumnFamilies
control|)
block|{
name|HColumnDescriptor
name|familyDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|columnFamily
argument_list|)
argument_list|)
decl_stmt|;
name|familyDesc
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|tableDesc
operator|.
name|addFamily
argument_list|(
name|familyDesc
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// an external table
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"HBase table "
operator|+
name|tableName
operator|+
literal|" doesn't exist while the table is "
operator|+
literal|"declared as an external table."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" already exists within HBase."
operator|+
literal|" Use CREATE EXTERNAL TABLE instead to"
operator|+
literal|" register it in HCatalog."
argument_list|)
throw|;
block|}
comment|// make sure the schema mapping is right
name|tableDesc
operator|=
name|getHBaseAdmin
argument_list|()
operator|.
name|getTableDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hbaseColumnFamilies
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|iKey
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|tableDesc
operator|.
name|hasFamily
argument_list|(
name|hbaseColumnFamiliesBytes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Column Family "
operator|+
name|hbaseColumnFamilies
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" is not defined in hbase table "
operator|+
name|tableName
argument_list|)
throw|;
block|}
block|}
block|}
comment|// ensure the table is online
operator|new
name|HTable
argument_list|(
name|hbaseConf
argument_list|,
name|tableDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|mnre
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|mnre
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|se
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/*      * @param table      *      * @throws MetaException      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler      * #preDropTable(org.apache.hadoop.hive.metastore.api.Table)      */
annotation|@
name|Override
specifier|public
name|void
name|preDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{     }
comment|/*      * @param table      *      * @throws MetaException      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler      * #rollbackCreateTable(org.apache.hadoop.hive.metastore.api.Table)      */
annotation|@
name|Override
specifier|public
name|void
name|rollbackCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
name|checkDeleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
comment|/*      * @param table      *      * @throws MetaException      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler      * #rollbackDropTable(org.apache.hadoop.hive.metastore.api.Table)      */
annotation|@
name|Override
specifier|public
name|void
name|rollbackDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{     }
comment|/*      * @return instance of HiveMetaHook      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler#getMetaHook()      */
annotation|@
name|Override
specifier|public
name|HiveMetaHook
name|getMetaHook
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/*      * @param tableDesc      *      * @param jobProperties      *      * @see org.apache.hcatalog.storagehandler.HCatStorageHandler      * #configureTableJobProperties(org.apache.hadoop.hive.ql.plan.TableDesc,      * java.util.Map)      */
annotation|@
name|Override
specifier|public
name|void
name|configureTableJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{
name|Properties
name|tableProperties
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|jobProperties
operator|.
name|put
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
name|tableName
operator|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableName
operator|.
name|startsWith
argument_list|(
name|DEFAULT_PREFIX
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|substring
argument_list|(
name|DEFAULT_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|jobProperties
operator|.
name|put
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HBaseAdmin
name|getHBaseAdmin
parameter_list|()
throws|throws
name|MetaException
block|{
try|try
block|{
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|this
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|admin
return|;
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|mnre
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|mnre
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ZooKeeperConnectionException
name|zkce
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|zkce
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getHBaseTableName
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
name|String
name|tableName
init|=
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
name|tableName
operator|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|tbl
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|tbl
operator|.
name|getTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tableName
operator|=
name|tbl
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tableName
return|;
block|}
comment|/*      * @return subclass of SerDe      *      * @throws UnsupportedOperationException      *      * @see      * org.apache.hcatalog.storagehandler.HCatStorageHandler#getSerDeClass()      */
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|SerDe
argument_list|>
name|getSerDeClass
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
return|return
name|HBaseSerDe
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
if|if
condition|(
name|hbaseConf
operator|==
literal|null
condition|)
block|{
name|hbaseConf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
return|return
name|hbaseConf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|hbaseConf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDeleteTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|isExternal
init|=
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|getHBaseTableName
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isExternal
operator|&&
name|getHBaseAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
comment|// we have created an HBase table, so we delete it to roll back;
if|if
condition|(
name|getHBaseAdmin
argument_list|()
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|static
name|String
name|getFullyQualifiedName
parameter_list|(
name|HCatTableInfo
name|tableInfo
parameter_list|)
block|{
name|String
name|qualifiedName
decl_stmt|;
name|String
name|databaseName
init|=
name|tableInfo
operator|.
name|getDatabaseName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|tableInfo
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|databaseName
operator|==
literal|null
operator|)
operator|||
operator|(
name|databaseName
operator|.
name|equals
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
operator|)
condition|)
block|{
name|qualifiedName
operator|=
name|tableName
expr_stmt|;
block|}
else|else
block|{
name|qualifiedName
operator|=
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
expr_stmt|;
block|}
return|return
name|qualifiedName
return|;
block|}
comment|/**      * Helper method for users to add the required depedency jars to distributed cache.      * @param conf      * @throws IOException      */
specifier|public
specifier|static
name|void
name|addDependencyJars
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO provide a facility/interface for loading/specifying dependencies
comment|//Ideally this method shouldn't be exposed to the user
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|conf
argument_list|,
comment|//hadoop-core
name|Writable
operator|.
name|class
argument_list|,
comment|//ZK
name|ZooKeeper
operator|.
name|class
argument_list|,
comment|//HBase
name|HTable
operator|.
name|class
argument_list|,
comment|//Hive
name|HiveException
operator|.
name|class
argument_list|,
comment|//HCatalog jar
name|HCatOutputFormat
operator|.
name|class
argument_list|,
comment|//hive hbase storage handler jar
name|HBaseSerDe
operator|.
name|class
argument_list|,
comment|//hcat hbase storage driver jar
name|HBaseOutputStorageDriver
operator|.
name|class
argument_list|,
comment|//hive jar
name|Table
operator|.
name|class
argument_list|,
comment|//libthrift jar
name|TBase
operator|.
name|class
argument_list|,
comment|//hbase jar
name|Bytes
operator|.
name|class
argument_list|,
comment|//thrift-fb303 .jar
name|FacebookBase
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the latest snapshot of the table.      *      * @param jobConf The job configuration.      * @param hbaseTableName The fully qualified name of the HBase table.      * @return An instance of HCatTableSnapshot      * @throws IOException Signals that an I/O exception has occurred.      */
specifier|public
specifier|static
name|HCatTableSnapshot
name|createSnapshot
parameter_list|(
name|Configuration
name|jobConf
parameter_list|,
name|String
name|hbaseTableName
parameter_list|)
throws|throws
name|IOException
block|{
name|RevisionManager
name|rm
init|=
literal|null
decl_stmt|;
name|TableSnapshot
name|snpt
decl_stmt|;
try|try
block|{
name|rm
operator|=
name|getOpenedRevisionManager
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|snpt
operator|=
name|rm
operator|.
name|createSnapshot
argument_list|(
name|hbaseTableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|inputJobString
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_JOB_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputJobString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"InputJobInfo information not found in JobContext. "
operator|+
literal|"HCatInputFormat.setInput() not called?"
argument_list|)
throw|;
block|}
name|InputJobInfo
name|inputInfo
init|=
operator|(
name|InputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|inputJobString
argument_list|)
decl_stmt|;
name|HCatTableSnapshot
name|hcatSnapshot
init|=
name|HBaseInputStorageDriver
operator|.
name|convertSnapshot
argument_list|(
name|snpt
argument_list|,
name|inputInfo
operator|.
name|getTableInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|hcatSnapshot
return|;
block|}
comment|/**      * Creates the snapshot using the revision specified by the user.      *      * @param jobConf The job configuration.      * @param tableName The fully qualified name of the table whose snapshot is being taken.      * @param revision The revision number to use for the snapshot.      * @return An instance of HCatTableSnapshot.      * @throws IOException Signals that an I/O exception has occurred.      */
specifier|public
specifier|static
name|HCatTableSnapshot
name|createSnapshot
parameter_list|(
name|Configuration
name|jobConf
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|IOException
block|{
name|TableSnapshot
name|snpt
decl_stmt|;
name|RevisionManager
name|rm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm
operator|=
name|getOpenedRevisionManager
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|snpt
operator|=
name|rm
operator|.
name|createSnapshot
argument_list|(
name|tableName
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|inputJobString
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_JOB_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputJobString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"InputJobInfo information not found in JobContext. "
operator|+
literal|"HCatInputFormat.setInput() not called?"
argument_list|)
throw|;
block|}
name|InputJobInfo
name|inputInfo
init|=
operator|(
name|InputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|inputJobString
argument_list|)
decl_stmt|;
name|HCatTableSnapshot
name|hcatSnapshot
init|=
name|HBaseInputStorageDriver
operator|.
name|convertSnapshot
argument_list|(
name|snpt
argument_list|,
name|inputInfo
operator|.
name|getTableInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|hcatSnapshot
return|;
block|}
comment|/**      * Gets an instance of revision manager which is opened.      *      * @param jobConf The job configuration.      * @return RevisionManager An instance of revision manager.      * @throws IOException      */
specifier|static
name|RevisionManager
name|getOpenedRevisionManager
parameter_list|(
name|Configuration
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|zkHostList
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|jobConf
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEPER_CLIENT_PORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkHostList
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|splits
init|=
name|zkHostList
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|ZKBasedRevisionManager
operator|.
name|HOSTLIST
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|dataDir
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|ZKBasedRevisionManager
operator|.
name|DATADIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDir
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|ZKBasedRevisionManager
operator|.
name|DATADIR
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
block|}
name|String
name|rmClassName
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|RevisionManager
operator|.
name|REVISION_MGR_IMPL_CLASS
argument_list|,
name|ZKBasedRevisionManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|RevisionManager
operator|.
name|REVISION_MGR_IMPL_CLASS
argument_list|,
name|rmClassName
argument_list|)
expr_stmt|;
name|RevisionManager
name|revisionManger
init|=
name|RevisionManagerFactory
operator|.
name|getRevisionManager
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|revisionManger
operator|.
name|open
argument_list|()
expr_stmt|;
return|return
name|revisionManger
return|;
block|}
comment|/**      * Set snapshot as a property.      *      * @param snapshot The HCatTableSnapshot to be passed to the job.      * @param inpJobInfo The InputJobInfo for the job.      * @throws IOException      */
specifier|public
name|void
name|setSnapshot
parameter_list|(
name|HCatTableSnapshot
name|snapshot
parameter_list|,
name|InputJobInfo
name|inpJobInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|serializedSnp
init|=
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
name|inpJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_TABLE_SNAPSHOT_KEY
argument_list|,
name|serializedSnp
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Transaction
name|getWriteTransaction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputJobInfo
name|outputJobInfo
init|=
operator|(
name|OutputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Transaction
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_WRITE_TXN_KEY
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|void
name|setWriteTransaction
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Transaction
name|txn
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputJobInfo
name|outputJobInfo
init|=
operator|(
name|OutputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|)
argument_list|)
decl_stmt|;
name|outputJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_WRITE_TXN_KEY
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|txn
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_OUTPUT_INFO
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|outputJobInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the Revision number that will be assigned to this job's output data      * @param conf configuration of the job      * @return the revision number used      * @throws IOException      */
specifier|public
specifier|static
name|long
name|getOutputRevision
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getWriteTransaction
argument_list|(
name|conf
argument_list|)
operator|.
name|getRevisionNumber
argument_list|()
return|;
block|}
block|}
end_class

end_unit

