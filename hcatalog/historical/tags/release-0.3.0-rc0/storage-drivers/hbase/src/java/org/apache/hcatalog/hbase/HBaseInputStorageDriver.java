begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|TableSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatInputStorageDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|HCatTableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|InputJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
operator|.
name|StorerInfo
import|;
end_import

begin_comment
comment|/**  * The Class HBaseInputStorageDriver enables reading of HBase tables through  * HCatalog.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseInputStorageDriver
extends|extends
name|HCatInputStorageDriver
block|{
specifier|private
name|InputJobInfo
name|inpJobInfo
decl_stmt|;
specifier|private
name|ResultConverter
name|converter
decl_stmt|;
specifier|private
name|HCatSchema
name|outputColSchema
decl_stmt|;
specifier|private
name|HCatSchema
name|dataSchema
decl_stmt|;
specifier|private
name|Configuration
name|jobConf
decl_stmt|;
specifier|private
name|String
name|scanColumns
decl_stmt|;
specifier|private
name|HCatTableSnapshot
name|snapshot
decl_stmt|;
comment|/*      * @param JobContext      *      * @param hcatProperties      *      * @see org.apache.hcatalog.mapreduce.HCatInputStorageDriver      * #initialize(org.apache.hadoop.mapreduce.JobContext, java.util.Properties)      */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|Properties
name|hcatProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|jobConf
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|String
name|jobString
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_JOB_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"InputJobInfo information not found in JobContext. "
operator|+
literal|"HCatInputFormat.setInput() not called?"
argument_list|)
throw|;
block|}
name|inpJobInfo
operator|=
operator|(
name|InputJobInfo
operator|)
name|HCatUtil
operator|.
name|deserialize
argument_list|(
name|jobString
argument_list|)
expr_stmt|;
name|dataSchema
operator|=
name|inpJobInfo
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getDataColumns
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|HCatUtil
operator|.
name|getFieldSchemaList
argument_list|(
name|dataSchema
operator|.
name|getFields
argument_list|()
argument_list|)
decl_stmt|;
name|hcatProperties
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMNS
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|hcatProperties
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|converter
operator|=
operator|new
name|HBaseSerDeResultConverter
argument_list|(
name|dataSchema
argument_list|,
name|outputColSchema
argument_list|,
name|hcatProperties
argument_list|)
expr_stmt|;
name|scanColumns
operator|=
name|converter
operator|.
name|getHBaseScanColumns
argument_list|()
expr_stmt|;
name|String
name|hbaseTableName
init|=
name|HBaseHCatStorageHandler
operator|.
name|getFullyQualifiedName
argument_list|(
name|inpJobInfo
operator|.
name|getTableInfo
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|serSnapshot
init|=
operator|(
name|String
operator|)
name|inpJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_TABLE_SNAPSHOT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|serSnapshot
operator|==
literal|null
condition|)
block|{
name|snapshot
operator|=
name|HBaseHCatStorageHandler
operator|.
name|createSnapshot
argument_list|(
name|jobConf
argument_list|,
name|hbaseTableName
argument_list|)
expr_stmt|;
name|inpJobInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_TABLE_SNAPSHOT_KEY
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HCatConstants
operator|.
name|HCAT_KEY_JOB_INFO
argument_list|,
name|HCatUtil
operator|.
name|serialize
argument_list|(
name|inpJobInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * @param hcatProperties      *      * @return InputFormat      *      * @see org.apache.hcatalog.mapreduce.HCatInputStorageDriver      * #getInputFormat(java.util.Properties)      */
annotation|@
name|Override
specifier|public
name|InputFormat
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
name|getInputFormat
parameter_list|(
name|Properties
name|hcatProperties
parameter_list|)
block|{
name|String
name|hbaseTableName
init|=
name|HBaseHCatStorageHandler
operator|.
name|getFullyQualifiedName
argument_list|(
name|inpJobInfo
operator|.
name|getTableInfo
argument_list|()
argument_list|)
decl_stmt|;
name|HBaseInputFormat
name|tableInputFormat
init|=
operator|new
name|HBaseInputFormat
argument_list|(
name|inpJobInfo
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|INPUT_TABLE
argument_list|,
name|hbaseTableName
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|SCAN_COLUMNS
argument_list|,
name|scanColumns
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|TableInputFormat
operator|.
name|SCAN_MAXVERSIONS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tableInputFormat
operator|.
name|setConf
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
comment|// TODO: Make the caching configurable by the user
name|tableInputFormat
operator|.
name|getScan
argument_list|()
operator|.
name|setCaching
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|tableInputFormat
operator|.
name|getScan
argument_list|()
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|tableInputFormat
return|;
block|}
comment|/*      * @param baseKey The key produced by the MR job.      *      * @param baseValue The value produced by the MR job.      *      * @return HCatRecord An instance of HCatRecord produced by the key, value.      *      * @throws IOException      *      * @see      * org.apache.hcatalog.mapreduce.HCatInputStorageDriver#convertToHCatRecord      * (org.apache.hadoop.io.WritableComparable, org.apache.hadoop.io.Writable)      */
annotation|@
name|Override
specifier|public
name|HCatRecord
name|convertToHCatRecord
parameter_list|(
name|WritableComparable
name|baseKey
parameter_list|,
name|Writable
name|baseValue
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|converter
operator|.
name|convert
argument_list|(
operator|(
name|Result
operator|)
name|baseValue
argument_list|)
return|;
block|}
comment|/*      * @param jobContext The jobcontext of MR job      *      * @param howlSchema The output schema of the hcat record.      *      * @throws IOException      *      * @see org.apache.hcatalog.mapreduce.HCatInputStorageDriver#      * setOutputSchema(org.apache.hadoop.mapreduce.JobContext,      * org.apache.hcatalog.data.schema.HCatSchema)      */
annotation|@
name|Override
specifier|public
name|void
name|setOutputSchema
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|HCatSchema
name|howlSchema
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|outputColSchema
operator|=
name|howlSchema
expr_stmt|;
block|}
comment|/*      * @param jobContext      *      * @param partitionValues      *      * @throws IOException      *      * @see org.apache.hcatalog.mapreduce.HCatInputStorageDriver      * #setPartitionValues(org.apache.hadoop.mapreduce.JobContext,      * java.util.Map)      */
annotation|@
name|Override
specifier|public
name|void
name|setPartitionValues
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|)
throws|throws
name|IOException
block|{     }
comment|/*      * @param jobContext The jobcontext of MR job.      *      * @param hcatSchema The schema of the hcat record.      *      * @throws IOException      *      * @see org.apache.hcatalog.mapreduce.HCatInputStorageDriver      * #setOriginalSchema(org.apache.hadoop.mapreduce.JobContext,      * org.apache.hcatalog.data.schema.HCatSchema)      */
annotation|@
name|Override
specifier|public
name|void
name|setOriginalSchema
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|HCatSchema
name|hcatSchema
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dataSchema
operator|=
name|hcatSchema
expr_stmt|;
block|}
specifier|static
name|HCatTableSnapshot
name|convertSnapshot
parameter_list|(
name|TableSnapshot
name|hbaseSnapshot
parameter_list|,
name|HCatTableInfo
name|hcatTableInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HCatSchema
name|hcatTableSchema
init|=
name|hcatTableInfo
operator|.
name|getDataColumns
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hcatHbaseColMap
init|=
name|getHCatHBaseColumnMapping
argument_list|(
name|hcatTableInfo
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|revisionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|fSchema
range|:
name|hcatTableSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|hcatHbaseColMap
operator|.
name|containsKey
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|colFamily
init|=
name|hcatHbaseColMap
operator|.
name|get
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|revisionID
init|=
name|hbaseSnapshot
operator|.
name|getRevision
argument_list|(
name|colFamily
argument_list|)
decl_stmt|;
name|revisionMap
operator|.
name|put
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|,
name|revisionID
argument_list|)
expr_stmt|;
block|}
block|}
name|HCatTableSnapshot
name|hcatSnapshot
init|=
operator|new
name|HCatTableSnapshot
argument_list|(
name|hcatTableInfo
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|hcatTableInfo
operator|.
name|getTableName
argument_list|()
argument_list|,
name|revisionMap
argument_list|)
decl_stmt|;
return|return
name|hcatSnapshot
return|;
block|}
specifier|static
name|TableSnapshot
name|convertSnapshot
parameter_list|(
name|HCatTableSnapshot
name|hcatSnapshot
parameter_list|,
name|HCatTableInfo
name|hcatTableInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HCatSchema
name|hcatTableSchema
init|=
name|hcatTableInfo
operator|.
name|getDataColumns
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|revisionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hcatHbaseColMap
init|=
name|getHCatHBaseColumnMapping
argument_list|(
name|hcatTableInfo
argument_list|)
decl_stmt|;
for|for
control|(
name|HCatFieldSchema
name|fSchema
range|:
name|hcatTableSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
name|String
name|colFamily
init|=
name|hcatHbaseColMap
operator|.
name|get
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hcatSnapshot
operator|.
name|containsColumn
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|revision
init|=
name|hcatSnapshot
operator|.
name|getRevision
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|revisionMap
operator|.
name|put
argument_list|(
name|colFamily
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|fullyQualifiedName
init|=
name|hcatSnapshot
operator|.
name|getDatabaseName
argument_list|()
operator|+
literal|"."
operator|+
name|hcatSnapshot
operator|.
name|getTableName
argument_list|()
decl_stmt|;
return|return
operator|new
name|TableSnapshot
argument_list|(
name|fullyQualifiedName
argument_list|,
name|revisionMap
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHCatHBaseColumnMapping
parameter_list|(
name|HCatTableInfo
name|hcatTableInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HCatSchema
name|hcatTableSchema
init|=
name|hcatTableInfo
operator|.
name|getDataColumns
argument_list|()
decl_stmt|;
name|StorerInfo
name|storeInfo
init|=
name|hcatTableInfo
operator|.
name|getStorerInfo
argument_list|()
decl_stmt|;
name|String
name|hbaseColumnMapping
init|=
name|storeInfo
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|HBaseConstants
operator|.
name|PROPERTY_COLUMN_MAPPING_KEY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hcatHbaseColMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnQualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|HBaseSerDe
operator|.
name|parseColumnMapping
argument_list|(
name|hbaseColumnMapping
argument_list|,
name|columnFamilies
argument_list|,
literal|null
argument_list|,
name|columnQualifiers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while converting snapshots."
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|HCatFieldSchema
name|column
range|:
name|hcatTableSchema
operator|.
name|getFields
argument_list|()
control|)
block|{
name|int
name|fieldPos
init|=
name|hcatTableSchema
operator|.
name|getPosition
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colFamily
init|=
name|columnFamilies
operator|.
name|get
argument_list|(
name|fieldPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|colFamily
operator|.
name|equals
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_KEY_COL
argument_list|)
operator|==
literal|false
condition|)
block|{
name|hcatHbaseColMap
operator|.
name|put
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|colFamily
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hcatHbaseColMap
return|;
block|}
block|}
end_class

end_unit

