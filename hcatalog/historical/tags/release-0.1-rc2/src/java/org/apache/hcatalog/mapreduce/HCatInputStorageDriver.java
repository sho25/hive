begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|HCatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|data
operator|.
name|schema
operator|.
name|HCatSchema
import|;
end_import

begin_comment
comment|/** The abstract class to be implemented by underlying storage drivers to enable data access from Howl through  *  HowlInputFormat.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HCatInputStorageDriver
block|{
specifier|public
name|void
name|initialize
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|Properties
name|storageDriverArgs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// trivial do nothing
block|}
comment|/**    * Returns the InputFormat to use with this Storage Driver.    * @param howlProperties the properties containing parameters required for initialization of InputFormat    * @return the InputFormat instance    */
specifier|public
specifier|abstract
name|InputFormat
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|getInputFormat
parameter_list|(
name|Properties
name|howlProperties
parameter_list|)
function_decl|;
comment|/**    * Converts to HowlRecord format usable by HowlInputFormat to convert to required valuetype.    * Implementers of StorageDriver should look to overwriting this function so as to convert their    * value type to HowlRecord. Default implementation is provided for StorageDriver implementations    * on top of an underlying InputFormat that already uses HowlRecord as a tuple    * @param baseKey    * @param baseValue the underlying value to convert to HowlRecord    */
specifier|public
specifier|abstract
name|HCatRecord
name|convertToHCatRecord
parameter_list|(
name|WritableComparable
name|baseKey
parameter_list|,
name|Writable
name|baseValue
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Set the data location for the input.    * @param jobContext the job context object    * @param location the data location    * @throws IOException Signals that an I/O exception has occurred.    *    * Default implementation for FileInputFormat based Input Formats. Override    * this for other input formats.    */
specifier|public
name|void
name|setInputPath
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ideally we should just call FileInputFormat.setInputPaths() here - but
comment|// that won't work since FileInputFormat.setInputPaths() needs
comment|// a Job object instead of a JobContext which we are handed here
name|int
name|length
init|=
name|location
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|curlyOpen
init|=
literal|0
decl_stmt|;
name|int
name|pathStart
init|=
literal|0
decl_stmt|;
name|boolean
name|globPattern
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pathStrings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|location
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'{'
case|:
block|{
name|curlyOpen
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|globPattern
condition|)
block|{
name|globPattern
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'}'
case|:
block|{
name|curlyOpen
operator|--
expr_stmt|;
if|if
condition|(
name|curlyOpen
operator|==
literal|0
operator|&&
name|globPattern
condition|)
block|{
name|globPattern
operator|=
literal|false
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|','
case|:
block|{
if|if
condition|(
operator|!
name|globPattern
condition|)
block|{
name|pathStrings
operator|.
name|add
argument_list|(
name|location
operator|.
name|substring
argument_list|(
name|pathStart
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|pathStart
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
name|pathStrings
operator|.
name|add
argument_list|(
name|location
operator|.
name|substring
argument_list|(
name|pathStart
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|paths
init|=
name|StringUtils
operator|.
name|stringToPath
argument_list|(
name|pathStrings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|paths
index|[
literal|0
index|]
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|(
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|str
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA_STR
argument_list|)
expr_stmt|;
name|path
operator|=
name|paths
index|[
name|i
index|]
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|str
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the schema of the data as originally published in Howl. The storage driver might validate that this matches with    * the schema it has (like Zebra) or it will use this to create a HowlRecord matching the output schema.    * @param jobContext the job context object    * @param howlSchema the schema published in Howl for this data    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
specifier|abstract
name|void
name|setOriginalSchema
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|HCatSchema
name|howlSchema
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Set the consolidated schema for the HowlRecord data returned by the storage driver. All tuples returned by the RecordReader should    * have this schema. Nulls should be inserted for columns not present in the data.    * @param jobContext the job context object    * @param howlSchema the schema to use as the consolidated schema    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
specifier|abstract
name|void
name|setOutputSchema
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|HCatSchema
name|howlSchema
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Sets the partition key values for the current partition. The storage driver is passed this so that the storage    * driver can add the partition key values to the output HowlRecord if the partition key values are not present on disk.    * @param jobContext the job context object    * @param partitionValues the partition values having a map with partition key name as key and the HowlKeyValue as value    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
specifier|abstract
name|void
name|setPartitionValues
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionValues
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

