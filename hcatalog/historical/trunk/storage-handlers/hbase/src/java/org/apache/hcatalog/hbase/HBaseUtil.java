begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hcatalog
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_class
class|class
name|HBaseUtil
block|{
specifier|private
name|HBaseUtil
parameter_list|()
block|{     }
comment|/**      * Parses the HBase columns mapping to identify the column families, qualifiers      * and also caches the byte arrays corresponding to them. One of the HCat table      * columns maps to the HBase row key, by default the first column.      *      * @param columnMapping - the column mapping specification to be parsed      * @param colFamilies - the list of HBase column family names      * @param colFamiliesBytes - the corresponding byte array      * @param colQualifiers - the list of HBase column qualifier names      * @param colQualifiersBytes - the corresponding byte array      * @return the row key index in the column names list      * @throws IOException      */
specifier|static
name|int
name|parseColumnMapping
parameter_list|(
name|String
name|columnMapping
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colFamilies
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|colFamiliesBytes
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colQualifiers
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|colQualifiersBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|rowKeyIndex
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|colFamilies
operator|==
literal|null
operator|||
name|colQualifiers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: caller must pass in lists for the column families "
operator|+
literal|"and qualifiers."
argument_list|)
throw|;
block|}
name|colFamilies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|colQualifiers
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|columnMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: hbase.columns.mapping missing for this HBase table."
argument_list|)
throw|;
block|}
if|if
condition|(
name|columnMapping
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|columnMapping
operator|.
name|equals
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_KEY_COL
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: hbase.columns.mapping specifies only the HBase table"
operator|+
literal|" row key. A valid Hive-HBase table must specify at least one additional column."
argument_list|)
throw|;
block|}
name|String
index|[]
name|mapping
init|=
name|columnMapping
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapping
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|elem
init|=
name|mapping
index|[
name|i
index|]
decl_stmt|;
name|int
name|idxFirst
init|=
name|elem
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
name|idxLast
init|=
name|elem
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxFirst
operator|<
literal|0
operator|||
operator|!
operator|(
name|idxFirst
operator|==
name|idxLast
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: the HBase columns mapping contains a badly formed "
operator|+
literal|"column family, column qualifier specification."
argument_list|)
throw|;
block|}
if|if
condition|(
name|elem
operator|.
name|equals
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_KEY_COL
argument_list|)
condition|)
block|{
name|rowKeyIndex
operator|=
name|i
expr_stmt|;
name|colFamilies
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|colQualifiers
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|parts
init|=
name|elem
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|parts
operator|.
name|length
operator|>
literal|0
operator|&&
name|parts
operator|.
name|length
operator|<=
literal|2
operator|)
assert|;
name|colFamilies
operator|.
name|add
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|colQualifiers
operator|.
name|add
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colQualifiers
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|rowKeyIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|colFamilies
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|HBaseSerDe
operator|.
name|HBASE_KEY_COL
argument_list|)
expr_stmt|;
name|colQualifiers
operator|.
name|add
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rowKeyIndex
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|colFamilies
operator|.
name|size
argument_list|()
operator|!=
name|colQualifiers
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in parsing the hbase columns mapping."
argument_list|)
throw|;
block|}
comment|// populate the corresponding byte [] if the client has passed in a non-null list
if|if
condition|(
name|colFamiliesBytes
operator|!=
literal|null
condition|)
block|{
name|colFamiliesBytes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|fam
range|:
name|colFamilies
control|)
block|{
name|colFamiliesBytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fam
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|colQualifiersBytes
operator|!=
literal|null
condition|)
block|{
name|colQualifiersBytes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|qual
range|:
name|colQualifiers
control|)
block|{
if|if
condition|(
name|qual
operator|==
literal|null
condition|)
block|{
name|colQualifiersBytes
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colQualifiersBytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|colFamiliesBytes
operator|!=
literal|null
operator|&&
name|colQualifiersBytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|colFamiliesBytes
operator|.
name|size
argument_list|()
operator|!=
name|colQualifiersBytes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in caching the bytes for the hbase column families "
operator|+
literal|"and qualifiers."
argument_list|)
throw|;
block|}
block|}
return|return
name|rowKeyIndex
return|;
block|}
comment|/**      * Get delegation token from hbase and add it to JobConf      * @param job      * @throws IOException      */
specifier|static
name|void
name|addHBaseDelegationToken
parameter_list|(
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|job
argument_list|)
condition|)
block|{
try|try
block|{
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|obtainAuthTokenForJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while obtaining hbase delegation token"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

