PREHOOK: query: -- union case: all subqueries are a map-reduce jobs, 3 way union, same input for all sub-queries, followed by filesink

create table tmptable(key string, value int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tmptable
POSTHOOK: query: -- union case: all subqueries are a map-reduce jobs, 3 way union, same input for all sub-queries, followed by filesink

create table tmptable(key string, value int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tmptable
PREHOOK: query: explain 
insert overwrite table tmptable
  select unionsrc.key, unionsrc.value FROM (select 'tst1' as key, count(1) as value from src s1
                                        UNION  ALL  
                                            select 'tst2' as key, count(1) as value from src s2
                                        UNION ALL
                                            select 'tst3' as key, count(1) as value from src s3) unionsrc
PREHOOK: type: QUERY
POSTHOOK: query: explain 
insert overwrite table tmptable
  select unionsrc.key, unionsrc.value FROM (select 'tst1' as key, count(1) as value from src s1
                                        UNION  ALL  
                                            select 'tst2' as key, count(1) as value from src s2
                                        UNION ALL
                                            select 'tst3' as key, count(1) as value from src s3) unionsrc
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP)
        Reducer 5 <- Map 4 (GROUP)
        Reducer 7 <- Map 6 (GROUP)
        Union 3 <- Reducer 2 (NONE), Reducer 5 (NONE), Reducer 7 (NONE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: s1
                  Select Operator
                    Group By Operator
                      aggregations: count(1)
                      mode: hash
                      outputColumnNames: _col0
                      Reduce Output Operator
                        sort order: 
                        value expressions: _col0 (type: bigint)
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: s2
                  Select Operator
                    Group By Operator
                      aggregations: count(1)
                      mode: hash
                      outputColumnNames: _col0
                      Reduce Output Operator
                        sort order: 
                        value expressions: _col0 (type: bigint)
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: s3
                  Select Operator
                    Group By Operator
                      aggregations: count(1)
                      mode: hash
                      outputColumnNames: _col0
                      Reduce Output Operator
                        sort order: 
                        value expressions: _col0 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Select Operator
                  expressions: 'tst1' (type: string), _col0 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Select Operator
                    expressions: _col0 (type: string), UDFToInteger(_col1) (type: int)
                    outputColumnNames: _col0, _col1
                    File Output Operator
                      compressed: false
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.tmptable
        Reducer 5 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Select Operator
                  expressions: 'tst2' (type: string), _col0 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Select Operator
                    expressions: _col0 (type: string), UDFToInteger(_col1) (type: int)
                    outputColumnNames: _col0, _col1
                    File Output Operator
                      compressed: false
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.tmptable
        Reducer 7 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Select Operator
                  expressions: 'tst3' (type: string), _col0 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Select Operator
                    expressions: _col0 (type: string), UDFToInteger(_col1) (type: int)
                    outputColumnNames: _col0, _col1
                    File Output Operator
                      compressed: false
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.tmptable
        Union 3 
            Vertex: Union 3

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.tmptable

  Stage: Stage-3
    Stats-Aggr Operator

PREHOOK: query: insert overwrite table tmptable
  select unionsrc.key, unionsrc.value FROM (select 'tst1' as key, count(1) as value from src s1
                                        UNION  ALL  
                                            select 'tst2' as key, count(1) as value from src s2
                                        UNION ALL
                                            select 'tst3' as key, count(1) as value from src s3) unionsrc
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@tmptable
[Error 30017]: Skipping stats aggregation by error org.apache.hadoop.hive.ql.metadata.HiveException: [Error 30015]: Stats aggregator of type counter cannot be connected to
POSTHOOK: query: insert overwrite table tmptable
  select unionsrc.key, unionsrc.value FROM (select 'tst1' as key, count(1) as value from src s1
                                        UNION  ALL  
                                            select 'tst2' as key, count(1) as value from src s2
                                        UNION ALL
                                            select 'tst3' as key, count(1) as value from src s3) unionsrc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@tmptable
POSTHOOK: Lineage: tmptable.key EXPRESSION []
POSTHOOK: Lineage: tmptable.value EXPRESSION [(src)s1.null, (src)s2.null, (src)s3.null, ]
PREHOOK: query: select * from tmptable x sort by x.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tmptable
#### A masked pattern was here ####
POSTHOOK: query: select * from tmptable x sort by x.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tmptable
#### A masked pattern was here ####
tst1	500
tst2	500
tst3	500
