PREHOOK: query: DESCRIBE FUNCTION named_struct
PREHOOK: type: DESCFUNCTION
POSTHOOK: query: DESCRIBE FUNCTION named_struct
POSTHOOK: type: DESCFUNCTION
named_struct(name1, val1, name2, val2, ...) - Creates a struct with the given field names and values
PREHOOK: query: DESCRIBE FUNCTION EXTENDED named_struct
PREHOOK: type: DESCFUNCTION
POSTHOOK: query: DESCRIBE FUNCTION EXTENDED named_struct
POSTHOOK: type: DESCFUNCTION
named_struct(name1, val1, name2, val2, ...) - Creates a struct with the given field names and values
PREHOOK: query: EXPLAIN
SELECT named_struct("foo", 1, "bar", 2),
       named_struct("foo", 1, "bar", 2).foo FROM src tablesample (1 rows)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT named_struct("foo", 1, "bar", 2),
       named_struct("foo", 1, "bar", 2).foo FROM src tablesample (1 rows)
POSTHOOK: type: QUERY
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src) (TOK_TABLESPLITSAMPLE TOK_ROWCOUNT 1))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION named_struct "foo" 1 "bar" 2)) (TOK_SELEXPR (. (TOK_FUNCTION named_struct "foo" 1 "bar" 2) foo)))))

STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: src
          Row Limit Per Split: 1
          Select Operator
            expressions:
                  expr: named_struct('foo',1,'bar',2)
                  type: struct<foo:int,bar:int>
                  expr: named_struct('foo',1,'bar',2).foo
                  type: int
            outputColumnNames: _col0, _col1
            ListSink

PREHOOK: query: SELECT named_struct("foo", 1, "bar", 2),
       named_struct("foo", 1, "bar", 2).foo FROM src tablesample (1 rows)
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT named_struct("foo", 1, "bar", 2),
       named_struct("foo", 1, "bar", 2).foo FROM src tablesample (1 rows)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
{"foo":1,"bar":2}	1
