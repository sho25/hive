PREHOOK: query: explain
select   
         w_warehouse_name
 	 ,w_warehouse_sq_ft
 	 ,w_city
 	 ,w_county
 	 ,w_state
 	 ,w_country
        ,ship_carriers
        ,year
 	,sum(jan_sales) as jan_sales
 	,sum(feb_sales) as feb_sales
 	,sum(mar_sales) as mar_sales
 	,sum(apr_sales) as apr_sales
 	,sum(may_sales) as may_sales
 	,sum(jun_sales) as jun_sales
 	,sum(jul_sales) as jul_sales
 	,sum(aug_sales) as aug_sales
 	,sum(sep_sales) as sep_sales
 	,sum(oct_sales) as oct_sales
 	,sum(nov_sales) as nov_sales
 	,sum(dec_sales) as dec_sales
 	,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot
 	,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot
 	,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot
 	,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot
 	,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot
 	,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot
 	,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot
 	,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot
 	,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot
 	,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot
 	,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot
 	,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot
 	,sum(jan_net) as jan_net
 	,sum(feb_net) as feb_net
 	,sum(mar_net) as mar_net
 	,sum(apr_net) as apr_net
 	,sum(may_net) as may_net
 	,sum(jun_net) as jun_net
 	,sum(jul_net) as jul_net
 	,sum(aug_net) as aug_net
 	,sum(sep_net) as sep_net
 	,sum(oct_net) as oct_net
 	,sum(nov_net) as nov_net
 	,sum(dec_net) as dec_net
 from (
    select 
    w_warehouse_name
    ,w_warehouse_sq_ft
    ,w_city
    ,w_county
    ,w_state
    ,w_country
    ,concat('DIAMOND', ',', 'AIRBORNE') as ship_carriers
        ,d_year as year
 	,sum(case when d_moy = 1 
 		  then ws_sales_price* ws_quantity else 0 end) as jan_sales
 		  ,sum(case when d_moy = 2 
 		  	    then ws_sales_price* ws_quantity else 0 end) as feb_sales
 			    ,sum(case when d_moy = 3 
 			    	      then ws_sales_price* ws_quantity else 0 end) as mar_sales
 				      ,sum(case when d_moy = 4 
 				      		then ws_sales_price* ws_quantity else 0 end) as apr_sales
 						,sum(case when d_moy = 5 
 							  then ws_sales_price* ws_quantity else 0 end) as may_sales
 							  ,sum(case when d_moy = 6 
 							  	    then ws_sales_price* ws_quantity else 0 end) as jun_sales
 								    ,sum(case when d_moy = 7 
 								    	      then ws_sales_price* ws_quantity else 0 end) as jul_sales
 									      ,sum(case when d_moy = 8 
 									      		then ws_sales_price* ws_quantity else 0 end) as aug_sales
 											,sum(case when d_moy = 9 
 												  then ws_sales_price* ws_quantity else 0 end) as sep_sales
 												  ,sum(case when d_moy = 10 
 												  	    then ws_sales_price* ws_quantity else 0 end) as oct_sales
 													    ,sum(case when d_moy = 11
 													    	      then ws_sales_price* ws_quantity else 0 end) as nov_sales
 														      ,sum(case when d_moy = 12
 														      		then ws_sales_price* ws_quantity else 0 end) as dec_sales
 																,sum(case when d_moy = 1 
 																	  then ws_net_paid_inc_tax * ws_quantity else 0 end) as jan_net
 																	  ,sum(case when d_moy = 2
 																	  	    then ws_net_paid_inc_tax * ws_quantity else 0 end) as feb_net
 																		    ,sum(case when d_moy = 3 
 																		    	      then ws_net_paid_inc_tax * ws_quantity else 0 end) as mar_net
 																			      ,sum(case when d_moy = 4 
 																			      		then ws_net_paid_inc_tax * ws_quantity else 0 end) as apr_net
 																					,sum(case when d_moy = 5 
 																						  then ws_net_paid_inc_tax * ws_quantity else 0 end) as may_net
 																						  ,sum(case when d_moy = 6 
 																						  	    then ws_net_paid_inc_tax * ws_quantity else 0 end) as jun_net
 																							    ,sum(case when d_moy = 7 
 																							    	      then ws_net_paid_inc_tax * ws_quantity else 0 end) as jul_net
 																								      ,sum(case when d_moy = 8 
 																								      		then ws_net_paid_inc_tax * ws_quantity else 0 end) as aug_net
 																										,sum(case when d_moy = 9 
 																											  then ws_net_paid_inc_tax * ws_quantity else 0 end) as sep_net
 																											  ,sum(case when d_moy = 10 
 																											  	    then ws_net_paid_inc_tax * ws_quantity else 0 end) as oct_net
 																												    ,sum(case when d_moy = 11
 																												    	      then ws_net_paid_inc_tax * ws_quantity else 0 end) as nov_net
 																													      ,sum(case when d_moy = 12
 																													      		then ws_net_paid_inc_tax * ws_quantity else 0 end) as dec_net
     from
          web_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	   ,ship_mode
     where
            web_sales.ws_warehouse_sk =  warehouse.w_warehouse_sk
        and web_sales.ws_sold_date_sk = date_dim.d_date_sk
        and web_sales.ws_sold_time_sk = time_dim.t_time_sk
 	and web_sales.ws_ship_mode_sk = ship_mode.sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 49530 and 49530+28800 
 	and sm_carrier in ('DIAMOND','AIRBORNE')
     group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 union all
    select 
    w_warehouse_name
    ,w_warehouse_sq_ft
    ,w_city
    ,w_county
    ,w_state
    ,w_country
        ,concat('DIAMOND', ',', 'AIRBORNE') as ship_carriers
       ,d_year as year
       ,sum(case when d_moy = 1 
       		 then cs_ext_sales_price* cs_quantity else 0 end) as jan_sales
 		 ,sum(case when d_moy = 2 
 		 	   then cs_ext_sales_price* cs_quantity else 0 end) as feb_sales
 			   ,sum(case when d_moy = 3 
 			   	     then cs_ext_sales_price* cs_quantity else 0 end) as mar_sales
 				     ,sum(case when d_moy = 4 
 				     	       then cs_ext_sales_price* cs_quantity else 0 end) as apr_sales
 					       ,sum(case when d_moy = 5 
 					       		 then cs_ext_sales_price* cs_quantity else 0 end) as may_sales
 							 ,sum(case when d_moy = 6 
 							 	   then cs_ext_sales_price* cs_quantity else 0 end) as jun_sales
 								   ,sum(case when d_moy = 7 
 								   	     then cs_ext_sales_price* cs_quantity else 0 end) as jul_sales
 									     ,sum(case when d_moy = 8 
 									     	       then cs_ext_sales_price* cs_quantity else 0 end) as aug_sales
 										       ,sum(case when d_moy = 9 
 										       		 then cs_ext_sales_price* cs_quantity else 0 end) as sep_sales
 												 ,sum(case when d_moy = 10 
 												 	   then cs_ext_sales_price* cs_quantity else 0 end) as oct_sales
 													   ,sum(case when d_moy = 11
 													   	     then cs_ext_sales_price* cs_quantity else 0 end) as nov_sales
 														     ,sum(case when d_moy = 12
 														     	       then cs_ext_sales_price* cs_quantity else 0 end) as dec_sales
 															       ,sum(case when d_moy = 1 
 															       		 then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jan_net
 																	 ,sum(case when d_moy = 2 
 																	 	   then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as feb_net
 																		   ,sum(case when d_moy = 3 
 																		   	     then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as mar_net
 																			     ,sum(case when d_moy = 4 
 																			     	       then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as apr_net
 																				       ,sum(case when d_moy = 5 
 																				       		 then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as may_net
 																						 ,sum(case when d_moy = 6 
 																						 	   then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jun_net
 																							   ,sum(case when d_moy = 7 
 																							   	     then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jul_net
 																								     ,sum(case when d_moy = 8 
 																								     	       then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as aug_net
 																									       ,sum(case when d_moy = 9 
 																									       		 then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as sep_net
 																											 ,sum(case when d_moy = 10 
 																											 	   then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as oct_net
 																												   ,sum(case when d_moy = 11
 																												   	     then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as nov_net
 																													     ,sum(case when d_moy = 12
 																													     	       then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as dec_net
     from
          catalog_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	  ,ship_mode
     where
            catalog_sales.cs_warehouse_sk =  warehouse.w_warehouse_sk
        and catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
        and catalog_sales.cs_sold_time_sk = time_dim.t_time_sk
 	and catalog_sales.cs_ship_mode_sk = ship_mode.sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 49530 AND 49530+28800 
 	and sm_carrier in ('DIAMOND','AIRBORNE')
     group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 ) x
 group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,ship_carriers
       ,year
 order by w_warehouse_name
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select   
         w_warehouse_name
 	 ,w_warehouse_sq_ft
 	 ,w_city
 	 ,w_county
 	 ,w_state
 	 ,w_country
        ,ship_carriers
        ,year
 	,sum(jan_sales) as jan_sales
 	,sum(feb_sales) as feb_sales
 	,sum(mar_sales) as mar_sales
 	,sum(apr_sales) as apr_sales
 	,sum(may_sales) as may_sales
 	,sum(jun_sales) as jun_sales
 	,sum(jul_sales) as jul_sales
 	,sum(aug_sales) as aug_sales
 	,sum(sep_sales) as sep_sales
 	,sum(oct_sales) as oct_sales
 	,sum(nov_sales) as nov_sales
 	,sum(dec_sales) as dec_sales
 	,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot
 	,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot
 	,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot
 	,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot
 	,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot
 	,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot
 	,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot
 	,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot
 	,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot
 	,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot
 	,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot
 	,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot
 	,sum(jan_net) as jan_net
 	,sum(feb_net) as feb_net
 	,sum(mar_net) as mar_net
 	,sum(apr_net) as apr_net
 	,sum(may_net) as may_net
 	,sum(jun_net) as jun_net
 	,sum(jul_net) as jul_net
 	,sum(aug_net) as aug_net
 	,sum(sep_net) as sep_net
 	,sum(oct_net) as oct_net
 	,sum(nov_net) as nov_net
 	,sum(dec_net) as dec_net
 from (
    select 
    w_warehouse_name
    ,w_warehouse_sq_ft
    ,w_city
    ,w_county
    ,w_state
    ,w_country
    ,concat('DIAMOND', ',', 'AIRBORNE') as ship_carriers
        ,d_year as year
 	,sum(case when d_moy = 1 
 		  then ws_sales_price* ws_quantity else 0 end) as jan_sales
 		  ,sum(case when d_moy = 2 
 		  	    then ws_sales_price* ws_quantity else 0 end) as feb_sales
 			    ,sum(case when d_moy = 3 
 			    	      then ws_sales_price* ws_quantity else 0 end) as mar_sales
 				      ,sum(case when d_moy = 4 
 				      		then ws_sales_price* ws_quantity else 0 end) as apr_sales
 						,sum(case when d_moy = 5 
 							  then ws_sales_price* ws_quantity else 0 end) as may_sales
 							  ,sum(case when d_moy = 6 
 							  	    then ws_sales_price* ws_quantity else 0 end) as jun_sales
 								    ,sum(case when d_moy = 7 
 								    	      then ws_sales_price* ws_quantity else 0 end) as jul_sales
 									      ,sum(case when d_moy = 8 
 									      		then ws_sales_price* ws_quantity else 0 end) as aug_sales
 											,sum(case when d_moy = 9 
 												  then ws_sales_price* ws_quantity else 0 end) as sep_sales
 												  ,sum(case when d_moy = 10 
 												  	    then ws_sales_price* ws_quantity else 0 end) as oct_sales
 													    ,sum(case when d_moy = 11
 													    	      then ws_sales_price* ws_quantity else 0 end) as nov_sales
 														      ,sum(case when d_moy = 12
 														      		then ws_sales_price* ws_quantity else 0 end) as dec_sales
 																,sum(case when d_moy = 1 
 																	  then ws_net_paid_inc_tax * ws_quantity else 0 end) as jan_net
 																	  ,sum(case when d_moy = 2
 																	  	    then ws_net_paid_inc_tax * ws_quantity else 0 end) as feb_net
 																		    ,sum(case when d_moy = 3 
 																		    	      then ws_net_paid_inc_tax * ws_quantity else 0 end) as mar_net
 																			      ,sum(case when d_moy = 4 
 																			      		then ws_net_paid_inc_tax * ws_quantity else 0 end) as apr_net
 																					,sum(case when d_moy = 5 
 																						  then ws_net_paid_inc_tax * ws_quantity else 0 end) as may_net
 																						  ,sum(case when d_moy = 6 
 																						  	    then ws_net_paid_inc_tax * ws_quantity else 0 end) as jun_net
 																							    ,sum(case when d_moy = 7 
 																							    	      then ws_net_paid_inc_tax * ws_quantity else 0 end) as jul_net
 																								      ,sum(case when d_moy = 8 
 																								      		then ws_net_paid_inc_tax * ws_quantity else 0 end) as aug_net
 																										,sum(case when d_moy = 9 
 																											  then ws_net_paid_inc_tax * ws_quantity else 0 end) as sep_net
 																											  ,sum(case when d_moy = 10 
 																											  	    then ws_net_paid_inc_tax * ws_quantity else 0 end) as oct_net
 																												    ,sum(case when d_moy = 11
 																												    	      then ws_net_paid_inc_tax * ws_quantity else 0 end) as nov_net
 																													      ,sum(case when d_moy = 12
 																													      		then ws_net_paid_inc_tax * ws_quantity else 0 end) as dec_net
     from
          web_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	   ,ship_mode
     where
            web_sales.ws_warehouse_sk =  warehouse.w_warehouse_sk
        and web_sales.ws_sold_date_sk = date_dim.d_date_sk
        and web_sales.ws_sold_time_sk = time_dim.t_time_sk
 	and web_sales.ws_ship_mode_sk = ship_mode.sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 49530 and 49530+28800 
 	and sm_carrier in ('DIAMOND','AIRBORNE')
     group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 union all
    select 
    w_warehouse_name
    ,w_warehouse_sq_ft
    ,w_city
    ,w_county
    ,w_state
    ,w_country
        ,concat('DIAMOND', ',', 'AIRBORNE') as ship_carriers
       ,d_year as year
       ,sum(case when d_moy = 1 
       		 then cs_ext_sales_price* cs_quantity else 0 end) as jan_sales
 		 ,sum(case when d_moy = 2 
 		 	   then cs_ext_sales_price* cs_quantity else 0 end) as feb_sales
 			   ,sum(case when d_moy = 3 
 			   	     then cs_ext_sales_price* cs_quantity else 0 end) as mar_sales
 				     ,sum(case when d_moy = 4 
 				     	       then cs_ext_sales_price* cs_quantity else 0 end) as apr_sales
 					       ,sum(case when d_moy = 5 
 					       		 then cs_ext_sales_price* cs_quantity else 0 end) as may_sales
 							 ,sum(case when d_moy = 6 
 							 	   then cs_ext_sales_price* cs_quantity else 0 end) as jun_sales
 								   ,sum(case when d_moy = 7 
 								   	     then cs_ext_sales_price* cs_quantity else 0 end) as jul_sales
 									     ,sum(case when d_moy = 8 
 									     	       then cs_ext_sales_price* cs_quantity else 0 end) as aug_sales
 										       ,sum(case when d_moy = 9 
 										       		 then cs_ext_sales_price* cs_quantity else 0 end) as sep_sales
 												 ,sum(case when d_moy = 10 
 												 	   then cs_ext_sales_price* cs_quantity else 0 end) as oct_sales
 													   ,sum(case when d_moy = 11
 													   	     then cs_ext_sales_price* cs_quantity else 0 end) as nov_sales
 														     ,sum(case when d_moy = 12
 														     	       then cs_ext_sales_price* cs_quantity else 0 end) as dec_sales
 															       ,sum(case when d_moy = 1 
 															       		 then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jan_net
 																	 ,sum(case when d_moy = 2 
 																	 	   then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as feb_net
 																		   ,sum(case when d_moy = 3 
 																		   	     then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as mar_net
 																			     ,sum(case when d_moy = 4 
 																			     	       then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as apr_net
 																				       ,sum(case when d_moy = 5 
 																				       		 then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as may_net
 																						 ,sum(case when d_moy = 6 
 																						 	   then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jun_net
 																							   ,sum(case when d_moy = 7 
 																							   	     then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jul_net
 																								     ,sum(case when d_moy = 8 
 																								     	       then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as aug_net
 																									       ,sum(case when d_moy = 9 
 																									       		 then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as sep_net
 																											 ,sum(case when d_moy = 10 
 																											 	   then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as oct_net
 																												   ,sum(case when d_moy = 11
 																												   	     then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as nov_net
 																													     ,sum(case when d_moy = 12
 																													     	       then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as dec_net
     from
          catalog_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	  ,ship_mode
     where
            catalog_sales.cs_warehouse_sk =  warehouse.w_warehouse_sk
        and catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
        and catalog_sales.cs_sold_time_sk = time_dim.t_time_sk
 	and catalog_sales.cs_ship_mode_sk = ship_mode.sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 49530 AND 49530+28800 
 	and sm_carrier in ('DIAMOND','AIRBORNE')
     group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 ) x
 group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,ship_carriers
       ,year
 order by w_warehouse_name
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 15 <- Map 14 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 16 <- Map 21 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 22 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 23 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 3 <- Map 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 12 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 13 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
   Fetch Operator
      limit:100
      Stage-1
         Reducer 9
         File Output Operator [FS_76]
            compressed:false
            Statistics:Num rows: 100 Data size: 47100 Basic stats: COMPLETE Column stats: NONE
            table:{"input format:":"org.apache.hadoop.mapred.TextInputFormat","output format:":"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat","serde:":"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe"}
            Limit [LIM_75]
               Number of rows:100
               Statistics:Num rows: 100 Data size: 47100 Basic stats: COMPLETE Column stats: NONE
               Select Operator [SEL_74]
               |  outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31","_col32","_col33","_col34","_col35","_col36","_col37","_col38","_col39","_col40","_col41","_col42","_col43"]
               |  Statistics:Num rows: 26136 Data size: 12310056 Basic stats: COMPLETE Column stats: NONE
               |<-Reducer 8 [SIMPLE_EDGE]
                  Reduce Output Operator [RS_73]
                     key expressions:_col0 (type: string)
                     sort order:+
                     Statistics:Num rows: 26136 Data size: 12310056 Basic stats: COMPLETE Column stats: NONE
                     value expressions:_col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int), _col8 (type: decimal(38,2)), _col9 (type: decimal(38,2)), _col10 (type: decimal(38,2)), _col11 (type: decimal(38,2)), _col12 (type: decimal(38,2)), _col13 (type: decimal(38,2)), _col14 (type: decimal(38,2)), _col15 (type: decimal(38,2)), _col16 (type: decimal(38,2)), _col17 (type: decimal(38,2)), _col18 (type: decimal(38,2)), _col19 (type: decimal(38,2)), _col20 (type: decimal(38,12)), _col21 (type: decimal(38,12)), _col22 (type: decimal(38,12)), _col23 (type: decimal(38,12)), _col24 (type: decimal(38,12)), _col25 (type: decimal(38,12)), _col26 (type: decimal(38,12)), _col27 (type: decimal(38,12)), _col28 (type: decimal(38,12)), _col29 (type: decimal(38,12)), _col30 (type: decimal(38,12)), _col31 (type: decimal(38,12)), _col32 (type: decimal(38,2)), _col33 (type: decimal(38,2)), _col34 (type: decimal(38,2)), _col35 (type: decimal(38,2)), _col36 (type: decimal(38,2)), _col37 (type: decimal(38,2)), _col38 (type: decimal(38,2)), _col39 (type: decimal(38,2)), _col40 (type: decimal(38,2)), _col41 (type: decimal(38,2)), _col42 (type: decimal(38,2)), _col43 (type: decimal(38,2))
                     Group By Operator [GBY_71]
                     |  aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)","sum(VALUE._col7)","sum(VALUE._col8)","sum(VALUE._col9)","sum(VALUE._col10)","sum(VALUE._col11)","sum(VALUE._col12)","sum(VALUE._col13)","sum(VALUE._col14)","sum(VALUE._col15)","sum(VALUE._col16)","sum(VALUE._col17)","sum(VALUE._col18)","sum(VALUE._col19)","sum(VALUE._col20)","sum(VALUE._col21)","sum(VALUE._col22)","sum(VALUE._col23)","sum(VALUE._col24)","sum(VALUE._col25)","sum(VALUE._col26)","sum(VALUE._col27)","sum(VALUE._col28)","sum(VALUE._col29)","sum(VALUE._col30)","sum(VALUE._col31)","sum(VALUE._col32)","sum(VALUE._col33)","sum(VALUE._col34)","sum(VALUE._col35)"]
                     |  keys:KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: string), KEY._col3 (type: string), KEY._col4 (type: string), KEY._col5 (type: string), KEY._col6 (type: string), KEY._col7 (type: int)
                     |  outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31","_col32","_col33","_col34","_col35","_col36","_col37","_col38","_col39","_col40","_col41","_col42","_col43"]
                     |  Statistics:Num rows: 26136 Data size: 12310056 Basic stats: COMPLETE Column stats: NONE
                     |<-Union 7 [SIMPLE_EDGE]
                        |<-Reducer 19 [CONTAINS]
                        |  Reduce Output Operator [RS_70]
                        |     key expressions:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)
                        |     Map-reduce partition columns:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)
                        |     sort order:++++++++
                        |     Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                        |     value expressions:_col8 (type: decimal(38,2)), _col9 (type: decimal(38,2)), _col10 (type: decimal(38,2)), _col11 (type: decimal(38,2)), _col12 (type: decimal(38,2)), _col13 (type: decimal(38,2)), _col14 (type: decimal(38,2)), _col15 (type: decimal(38,2)), _col16 (type: decimal(38,2)), _col17 (type: decimal(38,2)), _col18 (type: decimal(38,2)), _col19 (type: decimal(38,2)), _col20 (type: decimal(38,12)), _col21 (type: decimal(38,12)), _col22 (type: decimal(38,12)), _col23 (type: decimal(38,12)), _col24 (type: decimal(38,12)), _col25 (type: decimal(38,12)), _col26 (type: decimal(38,12)), _col27 (type: decimal(38,12)), _col28 (type: decimal(38,12)), _col29 (type: decimal(38,12)), _col30 (type: decimal(38,12)), _col31 (type: decimal(38,12)), _col32 (type: decimal(38,2)), _col33 (type: decimal(38,2)), _col34 (type: decimal(38,2)), _col35 (type: decimal(38,2)), _col36 (type: decimal(38,2)), _col37 (type: decimal(38,2)), _col38 (type: decimal(38,2)), _col39 (type: decimal(38,2)), _col40 (type: decimal(38,2)), _col41 (type: decimal(38,2)), _col42 (type: decimal(38,2)), _col43 (type: decimal(38,2))
                        |     Group By Operator [GBY_69]
                        |        aggregations:["sum(_col8)","sum(_col9)","sum(_col10)","sum(_col11)","sum(_col12)","sum(_col13)","sum(_col14)","sum(_col15)","sum(_col16)","sum(_col17)","sum(_col18)","sum(_col19)","sum(_col20)","sum(_col21)","sum(_col22)","sum(_col23)","sum(_col24)","sum(_col25)","sum(_col26)","sum(_col27)","sum(_col28)","sum(_col29)","sum(_col30)","sum(_col31)","sum(_col32)","sum(_col33)","sum(_col34)","sum(_col35)","sum(_col36)","sum(_col37)","sum(_col38)","sum(_col39)","sum(_col40)","sum(_col41)","sum(_col42)","sum(_col43)"]
                        |        keys:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)
                        |        outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31","_col32","_col33","_col34","_col35","_col36","_col37","_col38","_col39","_col40","_col41","_col42","_col43"]
                        |        Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                        |        Select Operator [SEL_67]
                        |           outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31","_col32","_col33","_col34","_col35","_col36","_col37","_col38","_col39","_col40","_col41","_col42","_col43"]
                        |           Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                        |           Select Operator [SEL_65]
                        |              outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31"]
                        |              Statistics:Num rows: 26136 Data size: 12310056 Basic stats: COMPLETE Column stats: NONE
                        |              Group By Operator [GBY_64]
                        |              |  aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)","sum(VALUE._col7)","sum(VALUE._col8)","sum(VALUE._col9)","sum(VALUE._col10)","sum(VALUE._col11)","sum(VALUE._col12)","sum(VALUE._col13)","sum(VALUE._col14)","sum(VALUE._col15)","sum(VALUE._col16)","sum(VALUE._col17)","sum(VALUE._col18)","sum(VALUE._col19)","sum(VALUE._col20)","sum(VALUE._col21)","sum(VALUE._col22)","sum(VALUE._col23)"]
                        |              |  keys:KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: string), KEY._col3 (type: string), KEY._col4 (type: string), KEY._col5 (type: string), 2002 (type: int)
                        |              |  outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                        |              |  Statistics:Num rows: 26136 Data size: 12310056 Basic stats: COMPLETE Column stats: NONE
                        |              |<-Reducer 18 [SIMPLE_EDGE]
                        |                 Reduce Output Operator [RS_63]
                        |                    key expressions:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), 2002 (type: int)
                        |                    Map-reduce partition columns:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), 2002 (type: int)
                        |                    sort order:+++++++
                        |                    Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                        |                    value expressions:_col7 (type: decimal(28,2)), _col8 (type: decimal(28,2)), _col9 (type: decimal(28,2)), _col10 (type: decimal(28,2)), _col11 (type: decimal(28,2)), _col12 (type: decimal(28,2)), _col13 (type: decimal(28,2)), _col14 (type: decimal(28,2)), _col15 (type: decimal(28,2)), _col16 (type: decimal(28,2)), _col17 (type: decimal(28,2)), _col18 (type: decimal(28,2)), _col19 (type: decimal(28,2)), _col20 (type: decimal(28,2)), _col21 (type: decimal(28,2)), _col22 (type: decimal(28,2)), _col23 (type: decimal(28,2)), _col24 (type: decimal(28,2)), _col25 (type: decimal(28,2)), _col26 (type: decimal(28,2)), _col27 (type: decimal(28,2)), _col28 (type: decimal(28,2)), _col29 (type: decimal(28,2)), _col30 (type: decimal(28,2))
                        |                    Group By Operator [GBY_62]
                        |                       aggregations:["sum(_col7)","sum(_col8)","sum(_col9)","sum(_col10)","sum(_col11)","sum(_col12)","sum(_col13)","sum(_col14)","sum(_col15)","sum(_col16)","sum(_col17)","sum(_col18)","sum(_col19)","sum(_col20)","sum(_col21)","sum(_col22)","sum(_col23)","sum(_col24)","sum(_col25)","sum(_col26)","sum(_col27)","sum(_col28)","sum(_col29)","sum(_col30)"]
                        |                       keys:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), 2002 (type: int)
                        |                       outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                        |                       Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                        |                       Select Operator [SEL_60]
                        |                          outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                        |                          Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                        |                          Merge Join Operator [MERGEJOIN_122]
                        |                          |  condition map:[{"":"Inner Join 0 to 1"}]
                        |                          |  keys:{"0":"_col2 (type: int)","1":"_col0 (type: int)"}
                        |                          |  outputColumnNames:["_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13","_col16"]
                        |                          |  Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                        |                          |<-Map 23 [SIMPLE_EDGE]
                        |                          |  Reduce Output Operator [RS_58]
                        |                          |     key expressions:_col0 (type: int)
                        |                          |     Map-reduce partition columns:_col0 (type: int)
                        |                          |     sort order:+
                        |                          |     Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                        |                          |     Select Operator [SEL_47]
                        |                          |        outputColumnNames:["_col0"]
                        |                          |        Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                        |                          |        Filter Operator [FIL_114]
                        |                          |           predicate:((sm_carrier) IN ('DIAMOND', 'AIRBORNE') and sm_ship_mode_sk is not null) (type: boolean)
                        |                          |           Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                        |                          |           TableScan [TS_45]
                        |                          |              alias:ship_mode
                        |                          |              Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                        |                          |<-Reducer 17 [SIMPLE_EDGE]
                        |                             Reduce Output Operator [RS_57]
                        |                                key expressions:_col2 (type: int)
                        |                                Map-reduce partition columns:_col2 (type: int)
                        |                                sort order:+
                        |                                Statistics:Num rows: 47520 Data size: 22381920 Basic stats: COMPLETE Column stats: NONE
                        |                                value expressions:_col4 (type: int), _col5 (type: decimal(7,2)), _col6 (type: decimal(7,2)), _col8 (type: string), _col9 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string), _col16 (type: int)
                        |                                Merge Join Operator [MERGEJOIN_121]
                        |                                |  condition map:[{"":"Inner Join 0 to 1"}]
                        |                                |  keys:{"0":"_col1 (type: int)","1":"_col0 (type: int)"}
                        |                                |  outputColumnNames:["_col2","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13","_col16"]
                        |                                |  Statistics:Num rows: 47520 Data size: 22381920 Basic stats: COMPLETE Column stats: NONE
                        |                                |<-Map 22 [SIMPLE_EDGE]
                        |                                |  Reduce Output Operator [RS_55]
                        |                                |     key expressions:_col0 (type: int)
                        |                                |     Map-reduce partition columns:_col0 (type: int)
                        |                                |     sort order:+
                        |                                |     Statistics:Num rows: 43200 Data size: 20347200 Basic stats: COMPLETE Column stats: NONE
                        |                                |     Select Operator [SEL_44]
                        |                                |        outputColumnNames:["_col0"]
                        |                                |        Statistics:Num rows: 43200 Data size: 20347200 Basic stats: COMPLETE Column stats: NONE
                        |                                |        Filter Operator [FIL_113]
                        |                                |           predicate:(t_time BETWEEN 49530 AND 78330 and t_time_sk is not null) (type: boolean)
                        |                                |           Statistics:Num rows: 43200 Data size: 20347200 Basic stats: COMPLETE Column stats: NONE
                        |                                |           TableScan [TS_42]
                        |                                |              alias:time_dim
                        |                                |              Statistics:Num rows: 86400 Data size: 40694400 Basic stats: COMPLETE Column stats: NONE
                        |                                |<-Reducer 16 [SIMPLE_EDGE]
                        |                                   Reduce Output Operator [RS_54]
                        |                                      key expressions:_col1 (type: int)
                        |                                      Map-reduce partition columns:_col1 (type: int)
                        |                                      sort order:+
                        |                                      Statistics:Num rows: 40176 Data size: 44957392 Basic stats: COMPLETE Column stats: NONE
                        |                                      value expressions:_col2 (type: int), _col4 (type: int), _col5 (type: decimal(7,2)), _col6 (type: decimal(7,2)), _col8 (type: string), _col9 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string), _col16 (type: int)
                        |                                      Merge Join Operator [MERGEJOIN_120]
                        |                                      |  condition map:[{"":"Inner Join 0 to 1"}]
                        |                                      |  keys:{"0":"_col0 (type: int)","1":"_col0 (type: int)"}
                        |                                      |  outputColumnNames:["_col1","_col2","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13","_col16"]
                        |                                      |  Statistics:Num rows: 40176 Data size: 44957392 Basic stats: COMPLETE Column stats: NONE
                        |                                      |<-Map 21 [SIMPLE_EDGE]
                        |                                      |  Reduce Output Operator [RS_52]
                        |                                      |     key expressions:_col0 (type: int)
                        |                                      |     Map-reduce partition columns:_col0 (type: int)
                        |                                      |     sort order:+
                        |                                      |     Statistics:Num rows: 36524 Data size: 40870356 Basic stats: COMPLETE Column stats: NONE
                        |                                      |     value expressions:_col2 (type: int)
                        |                                      |     Select Operator [SEL_41]
                        |                                      |        outputColumnNames:["_col0","_col2"]
                        |                                      |        Statistics:Num rows: 36524 Data size: 40870356 Basic stats: COMPLETE Column stats: NONE
                        |                                      |        Filter Operator [FIL_112]
                        |                                      |           predicate:((d_year = 2002) and d_date_sk is not null) (type: boolean)
                        |                                      |           Statistics:Num rows: 36524 Data size: 40870356 Basic stats: COMPLETE Column stats: NONE
                        |                                      |           TableScan [TS_39]
                        |                                      |              alias:date_dim
                        |                                      |              Statistics:Num rows: 73049 Data size: 81741831 Basic stats: COMPLETE Column stats: NONE
                        |                                      |<-Reducer 15 [SIMPLE_EDGE]
                        |                                         Reduce Output Operator [RS_51]
                        |                                            key expressions:_col0 (type: int)
                        |                                            Map-reduce partition columns:_col0 (type: int)
                        |                                            sort order:+
                        |                                            Statistics:Num rows: 29 Data size: 30582 Basic stats: COMPLETE Column stats: NONE
                        |                                            value expressions:_col1 (type: int), _col2 (type: int), _col4 (type: int), _col5 (type: decimal(7,2)), _col6 (type: decimal(7,2)), _col8 (type: string), _col9 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string)
                        |                                            Merge Join Operator [MERGEJOIN_119]
                        |                                            |  condition map:[{"":"Inner Join 0 to 1"}]
                        |                                            |  keys:{"0":"_col3 (type: int)","1":"_col0 (type: int)"}
                        |                                            |  outputColumnNames:["_col0","_col1","_col2","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13"]
                        |                                            |  Statistics:Num rows: 29 Data size: 30582 Basic stats: COMPLETE Column stats: NONE
                        |                                            |<-Map 14 [SIMPLE_EDGE]
                        |                                            |  Reduce Output Operator [RS_48]
                        |                                            |     key expressions:_col3 (type: int)
                        |                                            |     Map-reduce partition columns:_col3 (type: int)
                        |                                            |     sort order:+
                        |                                            |     Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                        |                                            |     value expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int), _col4 (type: int), _col5 (type: decimal(7,2)), _col6 (type: decimal(7,2))
                        |                                            |     Select Operator [SEL_35]
                        |                                            |        outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                        |                                            |        Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                        |                                            |        Filter Operator [FIL_110]
                        |                                            |           predicate:(((cs_warehouse_sk is not null and cs_sold_date_sk is not null) and cs_sold_time_sk is not null) and cs_ship_mode_sk is not null) (type: boolean)
                        |                                            |           Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                        |                                            |           TableScan [TS_33]
                        |                                            |              alias:catalog_sales
                        |                                            |              Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                        |                                            |<-Map 20 [SIMPLE_EDGE]
                        |                                               Reduce Output Operator [RS_49]
                        |                                                  key expressions:_col0 (type: int)
                        |                                                  Map-reduce partition columns:_col0 (type: int)
                        |                                                  sort order:+
                        |                                                  Statistics:Num rows: 27 Data size: 27802 Basic stats: COMPLETE Column stats: NONE
                        |                                                  value expressions:_col1 (type: string), _col2 (type: int), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string)
                        |                                                  Select Operator [SEL_38]
                        |                                                     outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                        |                                                     Statistics:Num rows: 27 Data size: 27802 Basic stats: COMPLETE Column stats: NONE
                        |                                                     Filter Operator [FIL_111]
                        |                                                        predicate:w_warehouse_sk is not null (type: boolean)
                        |                                                        Statistics:Num rows: 27 Data size: 27802 Basic stats: COMPLETE Column stats: NONE
                        |                                                        TableScan [TS_36]
                        |                                                           alias:warehouse
                        |                                                           Statistics:Num rows: 27 Data size: 27802 Basic stats: COMPLETE Column stats: NONE
                        |<-Reducer 6 [CONTAINS]
                           Reduce Output Operator [RS_70]
                              key expressions:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)
                              Map-reduce partition columns:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)
                              sort order:++++++++
                              Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                              value expressions:_col8 (type: decimal(38,2)), _col9 (type: decimal(38,2)), _col10 (type: decimal(38,2)), _col11 (type: decimal(38,2)), _col12 (type: decimal(38,2)), _col13 (type: decimal(38,2)), _col14 (type: decimal(38,2)), _col15 (type: decimal(38,2)), _col16 (type: decimal(38,2)), _col17 (type: decimal(38,2)), _col18 (type: decimal(38,2)), _col19 (type: decimal(38,2)), _col20 (type: decimal(38,12)), _col21 (type: decimal(38,12)), _col22 (type: decimal(38,12)), _col23 (type: decimal(38,12)), _col24 (type: decimal(38,12)), _col25 (type: decimal(38,12)), _col26 (type: decimal(38,12)), _col27 (type: decimal(38,12)), _col28 (type: decimal(38,12)), _col29 (type: decimal(38,12)), _col30 (type: decimal(38,12)), _col31 (type: decimal(38,12)), _col32 (type: decimal(38,2)), _col33 (type: decimal(38,2)), _col34 (type: decimal(38,2)), _col35 (type: decimal(38,2)), _col36 (type: decimal(38,2)), _col37 (type: decimal(38,2)), _col38 (type: decimal(38,2)), _col39 (type: decimal(38,2)), _col40 (type: decimal(38,2)), _col41 (type: decimal(38,2)), _col42 (type: decimal(38,2)), _col43 (type: decimal(38,2))
                              Group By Operator [GBY_69]
                                 aggregations:["sum(_col8)","sum(_col9)","sum(_col10)","sum(_col11)","sum(_col12)","sum(_col13)","sum(_col14)","sum(_col15)","sum(_col16)","sum(_col17)","sum(_col18)","sum(_col19)","sum(_col20)","sum(_col21)","sum(_col22)","sum(_col23)","sum(_col24)","sum(_col25)","sum(_col26)","sum(_col27)","sum(_col28)","sum(_col29)","sum(_col30)","sum(_col31)","sum(_col32)","sum(_col33)","sum(_col34)","sum(_col35)","sum(_col36)","sum(_col37)","sum(_col38)","sum(_col39)","sum(_col40)","sum(_col41)","sum(_col42)","sum(_col43)"]
                                 keys:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)
                                 outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31","_col32","_col33","_col34","_col35","_col36","_col37","_col38","_col39","_col40","_col41","_col42","_col43"]
                                 Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                                 Select Operator [SEL_67]
                                    outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31","_col32","_col33","_col34","_col35","_col36","_col37","_col38","_col39","_col40","_col41","_col42","_col43"]
                                    Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                                    Select Operator [SEL_32]
                                       outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31"]
                                       Statistics:Num rows: 26136 Data size: 12310056 Basic stats: COMPLETE Column stats: NONE
                                       Group By Operator [GBY_31]
                                       |  aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)","sum(VALUE._col7)","sum(VALUE._col8)","sum(VALUE._col9)","sum(VALUE._col10)","sum(VALUE._col11)","sum(VALUE._col12)","sum(VALUE._col13)","sum(VALUE._col14)","sum(VALUE._col15)","sum(VALUE._col16)","sum(VALUE._col17)","sum(VALUE._col18)","sum(VALUE._col19)","sum(VALUE._col20)","sum(VALUE._col21)","sum(VALUE._col22)","sum(VALUE._col23)"]
                                       |  keys:KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: string), KEY._col3 (type: string), KEY._col4 (type: string), KEY._col5 (type: string), 2002 (type: int)
                                       |  outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                       |  Statistics:Num rows: 26136 Data size: 12310056 Basic stats: COMPLETE Column stats: NONE
                                       |<-Reducer 5 [SIMPLE_EDGE]
                                          Reduce Output Operator [RS_30]
                                             key expressions:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), 2002 (type: int)
                                             Map-reduce partition columns:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), 2002 (type: int)
                                             sort order:+++++++
                                             Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                                             value expressions:_col7 (type: decimal(28,2)), _col8 (type: decimal(28,2)), _col9 (type: decimal(28,2)), _col10 (type: decimal(28,2)), _col11 (type: decimal(28,2)), _col12 (type: decimal(28,2)), _col13 (type: decimal(28,2)), _col14 (type: decimal(28,2)), _col15 (type: decimal(28,2)), _col16 (type: decimal(28,2)), _col17 (type: decimal(28,2)), _col18 (type: decimal(28,2)), _col19 (type: decimal(28,2)), _col20 (type: decimal(28,2)), _col21 (type: decimal(28,2)), _col22 (type: decimal(28,2)), _col23 (type: decimal(28,2)), _col24 (type: decimal(28,2)), _col25 (type: decimal(28,2)), _col26 (type: decimal(28,2)), _col27 (type: decimal(28,2)), _col28 (type: decimal(28,2)), _col29 (type: decimal(28,2)), _col30 (type: decimal(28,2))
                                             Group By Operator [GBY_29]
                                                aggregations:["sum(_col7)","sum(_col8)","sum(_col9)","sum(_col10)","sum(_col11)","sum(_col12)","sum(_col13)","sum(_col14)","sum(_col15)","sum(_col16)","sum(_col17)","sum(_col18)","sum(_col19)","sum(_col20)","sum(_col21)","sum(_col22)","sum(_col23)","sum(_col24)","sum(_col25)","sum(_col26)","sum(_col27)","sum(_col28)","sum(_col29)","sum(_col30)"]
                                                keys:_col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), 2002 (type: int)
                                                outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                                Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                                                Select Operator [SEL_27]
                                                   outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                                   Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                                                   Merge Join Operator [MERGEJOIN_118]
                                                   |  condition map:[{"":"Inner Join 0 to 1"}]
                                                   |  keys:{"0":"_col2 (type: int)","1":"_col0 (type: int)"}
                                                   |  outputColumnNames:["_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13","_col16"]
                                                   |  Statistics:Num rows: 52272 Data size: 24620112 Basic stats: COMPLETE Column stats: NONE
                                                   |<-Map 13 [SIMPLE_EDGE]
                                                   |  Reduce Output Operator [RS_25]
                                                   |     key expressions:_col0 (type: int)
                                                   |     Map-reduce partition columns:_col0 (type: int)
                                                   |     sort order:+
                                                   |     Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                                                   |     Select Operator [SEL_14]
                                                   |        outputColumnNames:["_col0"]
                                                   |        Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                                                   |        Filter Operator [FIL_109]
                                                   |           predicate:((sm_carrier) IN ('DIAMOND', 'AIRBORNE') and sm_ship_mode_sk is not null) (type: boolean)
                                                   |           Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                                                   |           TableScan [TS_12]
                                                   |              alias:ship_mode
                                                   |              Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                                                   |<-Reducer 4 [SIMPLE_EDGE]
                                                      Reduce Output Operator [RS_24]
                                                         key expressions:_col2 (type: int)
                                                         Map-reduce partition columns:_col2 (type: int)
                                                         sort order:+
                                                         Statistics:Num rows: 47520 Data size: 22381920 Basic stats: COMPLETE Column stats: NONE
                                                         value expressions:_col4 (type: int), _col5 (type: decimal(7,2)), _col6 (type: decimal(7,2)), _col8 (type: string), _col9 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string), _col16 (type: int)
                                                         Merge Join Operator [MERGEJOIN_117]
                                                         |  condition map:[{"":"Inner Join 0 to 1"}]
                                                         |  keys:{"0":"_col1 (type: int)","1":"_col0 (type: int)"}
                                                         |  outputColumnNames:["_col2","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13","_col16"]
                                                         |  Statistics:Num rows: 47520 Data size: 22381920 Basic stats: COMPLETE Column stats: NONE
                                                         |<-Map 12 [SIMPLE_EDGE]
                                                         |  Reduce Output Operator [RS_22]
                                                         |     key expressions:_col0 (type: int)
                                                         |     Map-reduce partition columns:_col0 (type: int)
                                                         |     sort order:+
                                                         |     Statistics:Num rows: 43200 Data size: 20347200 Basic stats: COMPLETE Column stats: NONE
                                                         |     Select Operator [SEL_11]
                                                         |        outputColumnNames:["_col0"]
                                                         |        Statistics:Num rows: 43200 Data size: 20347200 Basic stats: COMPLETE Column stats: NONE
                                                         |        Filter Operator [FIL_108]
                                                         |           predicate:(t_time BETWEEN 49530 AND 78330 and t_time_sk is not null) (type: boolean)
                                                         |           Statistics:Num rows: 43200 Data size: 20347200 Basic stats: COMPLETE Column stats: NONE
                                                         |           TableScan [TS_9]
                                                         |              alias:time_dim
                                                         |              Statistics:Num rows: 86400 Data size: 40694400 Basic stats: COMPLETE Column stats: NONE
                                                         |<-Reducer 3 [SIMPLE_EDGE]
                                                            Reduce Output Operator [RS_21]
                                                               key expressions:_col1 (type: int)
                                                               Map-reduce partition columns:_col1 (type: int)
                                                               sort order:+
                                                               Statistics:Num rows: 40176 Data size: 44957392 Basic stats: COMPLETE Column stats: NONE
                                                               value expressions:_col2 (type: int), _col4 (type: int), _col5 (type: decimal(7,2)), _col6 (type: decimal(7,2)), _col8 (type: string), _col9 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string), _col16 (type: int)
                                                               Merge Join Operator [MERGEJOIN_116]
                                                               |  condition map:[{"":"Inner Join 0 to 1"}]
                                                               |  keys:{"0":"_col0 (type: int)","1":"_col0 (type: int)"}
                                                               |  outputColumnNames:["_col1","_col2","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13","_col16"]
                                                               |  Statistics:Num rows: 40176 Data size: 44957392 Basic stats: COMPLETE Column stats: NONE
                                                               |<-Map 11 [SIMPLE_EDGE]
                                                               |  Reduce Output Operator [RS_19]
                                                               |     key expressions:_col0 (type: int)
                                                               |     Map-reduce partition columns:_col0 (type: int)
                                                               |     sort order:+
                                                               |     Statistics:Num rows: 36524 Data size: 40870356 Basic stats: COMPLETE Column stats: NONE
                                                               |     value expressions:_col2 (type: int)
                                                               |     Select Operator [SEL_8]
                                                               |        outputColumnNames:["_col0","_col2"]
                                                               |        Statistics:Num rows: 36524 Data size: 40870356 Basic stats: COMPLETE Column stats: NONE
                                                               |        Filter Operator [FIL_107]
                                                               |           predicate:((d_year = 2002) and d_date_sk is not null) (type: boolean)
                                                               |           Statistics:Num rows: 36524 Data size: 40870356 Basic stats: COMPLETE Column stats: NONE
                                                               |           TableScan [TS_6]
                                                               |              alias:date_dim
                                                               |              Statistics:Num rows: 73049 Data size: 81741831 Basic stats: COMPLETE Column stats: NONE
                                                               |<-Reducer 2 [SIMPLE_EDGE]
                                                                  Reduce Output Operator [RS_18]
                                                                     key expressions:_col0 (type: int)
                                                                     Map-reduce partition columns:_col0 (type: int)
                                                                     sort order:+
                                                                     Statistics:Num rows: 29 Data size: 30582 Basic stats: COMPLETE Column stats: NONE
                                                                     value expressions:_col1 (type: int), _col2 (type: int), _col4 (type: int), _col5 (type: decimal(7,2)), _col6 (type: decimal(7,2)), _col8 (type: string), _col9 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string)
                                                                     Merge Join Operator [MERGEJOIN_115]
                                                                     |  condition map:[{"":"Inner Join 0 to 1"}]
                                                                     |  keys:{"0":"_col3 (type: int)","1":"_col0 (type: int)"}
                                                                     |  outputColumnNames:["_col0","_col1","_col2","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                     |  Statistics:Num rows: 29 Data size: 30582 Basic stats: COMPLETE Column stats: NONE
                                                                     |<-Map 1 [SIMPLE_EDGE]
                                                                     |  Reduce Output Operator [RS_15]
                                                                     |     key expressions:_col3 (type: int)
                                                                     |     Map-reduce partition columns:_col3 (type: int)
                                                                     |     sort order:+
                                                                     |     Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                                                                     |     value expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int), _col4 (type: int), _col5 (type: decimal(7,2)), _col6 (type: decimal(7,2))
                                                                     |     Select Operator [SEL_2]
                                                                     |        outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                                     |        Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                                                                     |        Filter Operator [FIL_105]
                                                                     |           predicate:(((ws_warehouse_sk is not null and ws_sold_date_sk is not null) and ws_sold_time_sk is not null) and ws_ship_mode_sk is not null) (type: boolean)
                                                                     |           Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                                                                     |           TableScan [TS_0]
                                                                     |              alias:web_sales
                                                                     |              Statistics:Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                                                                     |<-Map 10 [SIMPLE_EDGE]
                                                                        Reduce Output Operator [RS_16]
                                                                           key expressions:_col0 (type: int)
                                                                           Map-reduce partition columns:_col0 (type: int)
                                                                           sort order:+
                                                                           Statistics:Num rows: 27 Data size: 27802 Basic stats: COMPLETE Column stats: NONE
                                                                           value expressions:_col1 (type: string), _col2 (type: int), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string)
                                                                           Select Operator [SEL_5]
                                                                              outputColumnNames:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                                              Statistics:Num rows: 27 Data size: 27802 Basic stats: COMPLETE Column stats: NONE
                                                                              Filter Operator [FIL_106]
                                                                                 predicate:w_warehouse_sk is not null (type: boolean)
                                                                                 Statistics:Num rows: 27 Data size: 27802 Basic stats: COMPLETE Column stats: NONE
                                                                                 TableScan [TS_3]
                                                                                    alias:warehouse
                                                                                    Statistics:Num rows: 27 Data size: 27802 Basic stats: COMPLETE Column stats: NONE

