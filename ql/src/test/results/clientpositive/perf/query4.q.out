PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 12 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 13 <- Map 65 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Union 15 (CONTAINS)
Reducer 16 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 17 <- Map 65 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 20 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 21 <- Map 65 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 24 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 25 <- Map 65 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 29 <- Map 28 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE)
Reducer 3 <- Map 65 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 65 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Reducer 30 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 32 <- Map 28 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE)
Reducer 33 <- Map 65 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 33 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 35 <- Map 28 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE)
Reducer 36 <- Map 65 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 37 <- Reducer 36 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 38 <- Map 28 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE)
Reducer 39 <- Map 65 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 41 <- Map 28 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE)
Reducer 42 <- Map 65 (SIMPLE_EDGE), Reducer 41 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE), Union 15 (CONTAINS)
Reducer 44 <- Map 28 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE)
Reducer 45 <- Map 65 (SIMPLE_EDGE), Reducer 44 (SIMPLE_EDGE)
Reducer 46 <- Reducer 45 (SIMPLE_EDGE), Union 15 (CONTAINS)
Reducer 47 <- Map 28 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE)
Reducer 48 <- Map 65 (SIMPLE_EDGE), Reducer 47 (SIMPLE_EDGE)
Reducer 49 <- Reducer 48 (SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 50 <- Map 28 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE)
Reducer 51 <- Map 65 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE)
Reducer 52 <- Reducer 51 (SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 53 <- Map 28 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE)
Reducer 54 <- Map 65 (SIMPLE_EDGE), Reducer 53 (SIMPLE_EDGE)
Reducer 55 <- Reducer 54 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 56 <- Map 28 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE)
Reducer 57 <- Map 65 (SIMPLE_EDGE), Reducer 56 (SIMPLE_EDGE)
Reducer 58 <- Reducer 57 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 59 <- Map 28 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE)
Reducer 6 <- Union 11 (SIMPLE_EDGE), Union 15 (SIMPLE_EDGE), Union 19 (SIMPLE_EDGE), Union 23 (SIMPLE_EDGE), Union 27 (SIMPLE_EDGE), Union 5 (SIMPLE_EDGE)
Reducer 60 <- Map 65 (SIMPLE_EDGE), Reducer 59 (SIMPLE_EDGE)
Reducer 61 <- Reducer 60 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 62 <- Map 28 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE)
Reducer 63 <- Map 65 (SIMPLE_EDGE), Reducer 62 (SIMPLE_EDGE)
Reducer 64 <- Reducer 63 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 9 <- Map 65 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7
      File Output Operator [FS_412]
        Limit [LIM_411] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_410] (rows=479156402 width=88)
            Output:["_col0"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_409]
              Select Operator [SEL_408] (rows=479156402 width=88)
                Output:["_col0"]
                Filter Operator [FIL_406] (rows=479156402 width=88)
                  predicate:(CASE WHEN ((_col1 > 0)) THEN (CASE WHEN ((_col3 > 0)) THEN (((_col9 / _col3) > (_col12 / _col1))) ELSE ((null > (_col12 / _col1))) END) ELSE (CASE WHEN ((_col3 > 0)) THEN (((_col9 / _col3) > null)) ELSE (null) END) END and CASE WHEN ((_col5 > 0)) THEN (CASE WHEN ((_col3 > 0)) THEN (((_col9 / _col3) > (_col7 / _col5))) ELSE ((null > (_col7 / _col5))) END) ELSE (CASE WHEN ((_col3 > 0)) THEN (((_col9 / _col3) > null)) ELSE (null) END) END)
                  Merge Join Operator [MERGEJOIN_866] (rows=1916625609 width=88)
                    Conds:Union 5._col0=Union 11._col0(Inner),Union 5._col0=Union 15._col0(Inner),Union 5._col0=Union 19._col0(Inner),Union 5._col0=Union 23._col0(Inner),Union 5._col0=Union 27._col0(Inner),Output:["_col1","_col3","_col5","_col7","_col9","_col11","_col12"]
                  <-Union 11 [SIMPLE_EDGE]
                    <-Reducer 10 [CONTAINS]
                      Reduce Output Operator [RS_400]
                        PartitionCols:_col0
                        Select Operator [SEL_87] (rows=1 width=105)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_86] (rows=1 width=105)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 9 [SIMPLE_EDGE]
                            SHUFFLE [RS_85]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_84] (rows=1 width=105)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_82] (rows=1 width=105)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_837] (rows=1 width=105)
                                    Conds:RS_79._col1=RS_80._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_80]
                                      PartitionCols:_col0
                                      Select Operator [SEL_75] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_784] (rows=1 width=860)
                                          predicate:false
                                          TableScan [TS_6] (rows=80000000 width=860)
                                            default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                  <-Reducer 8 [SIMPLE_EDGE]
                                    SHUFFLE [RS_79]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_836] (rows=1 width=96)
                                        Conds:RS_76._col0=RS_77._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_77]
                                          PartitionCols:_col0
                                          Select Operator [SEL_72] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_783] (rows=1 width=1119)
                                              predicate:false
                                              TableScan [TS_3] (rows=73049 width=1119)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                      <-Map 1 [SIMPLE_EDGE]
                                        SHUFFLE [RS_76]
                                          PartitionCols:_col0
                                          Select Operator [SEL_69] (rows=1 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_782] (rows=1 width=88)
                                              predicate:false
                                              TableScan [TS_0] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                    <-Reducer 37 [CONTAINS]
                      Reduce Output Operator [RS_400]
                        PartitionCols:_col0
                        Select Operator [SEL_109] (rows=58077952 width=135)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_108] (rows=58077952 width=135)
                            predicate:(_col7 > 0)
                            Select Operator [SEL_827] (rows=174233858 width=135)
                              Output:["_col0","_col7"]
                              Group By Operator [GBY_107] (rows=174233858 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                              <-Reducer 36 [SIMPLE_EDGE]
                                SHUFFLE [RS_106]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Group By Operator [GBY_105] (rows=348467716 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Select Operator [SEL_103] (rows=348467716 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Merge Join Operator [MERGEJOIN_839] (rows=348467716 width=135)
                                        Conds:RS_100._col1=RS_101._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                      <-Map 65 [SIMPLE_EDGE]
                                        SHUFFLE [RS_101]
                                          PartitionCols:_col0
                                          Select Operator [SEL_96] (rows=80000000 width=860)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Filter Operator [FIL_787] (rows=80000000 width=860)
                                              predicate:(c_customer_sk is not null and c_customer_id is not null)
                                               Please refer to the previous TableScan [TS_6]
                                      <-Reducer 35 [SIMPLE_EDGE]
                                        SHUFFLE [RS_100]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_838] (rows=316788826 width=135)
                                            Conds:RS_97._col0=RS_98._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                          <-Map 28 [SIMPLE_EDGE]
                                            SHUFFLE [RS_98]
                                              PartitionCols:_col0
                                              Select Operator [SEL_93] (rows=36524 width=1119)
                                                Output:["_col0"]
                                                Filter Operator [FIL_786] (rows=36524 width=1119)
                                                  predicate:((d_year = 2001) and d_date_sk is not null)
                                                   Please refer to the previous TableScan [TS_3]
                                          <-Map 66 [SIMPLE_EDGE]
                                            SHUFFLE [RS_97]
                                              PartitionCols:_col0
                                              Select Operator [SEL_90] (rows=287989836 width=135)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                Filter Operator [FIL_785] (rows=287989836 width=135)
                                                  predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                  TableScan [TS_22] (rows=287989836 width=135)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                    <-Reducer 40 [CONTAINS]
                      Reduce Output Operator [RS_400]
                        PartitionCols:_col0
                        Select Operator [SEL_132] (rows=1 width=162)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_131] (rows=1 width=162)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 39 [SIMPLE_EDGE]
                            SHUFFLE [RS_130]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_129] (rows=1 width=162)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_127] (rows=1 width=162)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_841] (rows=1 width=162)
                                    Conds:RS_124._col1=RS_125._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_125]
                                      PartitionCols:_col0
                                      Select Operator [SEL_120] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_790] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 38 [SIMPLE_EDGE]
                                    SHUFFLE [RS_124]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_840] (rows=1 width=148)
                                        Conds:RS_121._col0=RS_122._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_122]
                                          PartitionCols:_col0
                                          Select Operator [SEL_117] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_789] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 67 [SIMPLE_EDGE]
                                        SHUFFLE [RS_121]
                                          PartitionCols:_col0
                                          Select Operator [SEL_114] (rows=1 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_788] (rows=1 width=135)
                                              predicate:false
                                              TableScan [TS_45] (rows=144002668 width=135)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                  <-Union 15 [SIMPLE_EDGE]
                    <-Reducer 14 [CONTAINS]
                      Reduce Output Operator [RS_401]
                        PartitionCols:_col0
                        Select Operator [SEL_154] (rows=1 width=105)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_153] (rows=1 width=105)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 13 [SIMPLE_EDGE]
                            SHUFFLE [RS_152]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_151] (rows=1 width=105)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_149] (rows=1 width=105)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_843] (rows=1 width=105)
                                    Conds:RS_146._col1=RS_147._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_147]
                                      PartitionCols:_col0
                                      Select Operator [SEL_142] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_793] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 12 [SIMPLE_EDGE]
                                    SHUFFLE [RS_146]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_842] (rows=1 width=96)
                                        Conds:RS_143._col0=RS_144._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_144]
                                          PartitionCols:_col0
                                          Select Operator [SEL_139] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_792] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 1 [SIMPLE_EDGE]
                                        SHUFFLE [RS_143]
                                          PartitionCols:_col0
                                          Select Operator [SEL_136] (rows=1 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_791] (rows=1 width=88)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_0]
                    <-Reducer 43 [CONTAINS]
                      Reduce Output Operator [RS_401]
                        PartitionCols:_col0
                        Select Operator [SEL_175] (rows=1 width=162)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_174] (rows=1 width=162)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 42 [SIMPLE_EDGE]
                            SHUFFLE [RS_173]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_172] (rows=1 width=162)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_170] (rows=1 width=162)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_845] (rows=1 width=162)
                                    Conds:RS_167._col1=RS_168._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_168]
                                      PartitionCols:_col0
                                      Select Operator [SEL_163] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_796] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 41 [SIMPLE_EDGE]
                                    SHUFFLE [RS_167]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_844] (rows=1 width=148)
                                        Conds:RS_164._col0=RS_165._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_165]
                                          PartitionCols:_col0
                                          Select Operator [SEL_160] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_795] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 66 [SIMPLE_EDGE]
                                        SHUFFLE [RS_164]
                                          PartitionCols:_col0
                                          Select Operator [SEL_157] (rows=1 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_794] (rows=1 width=135)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_22]
                    <-Reducer 46 [CONTAINS]
                      Reduce Output Operator [RS_401]
                        PartitionCols:_col0
                        Select Operator [SEL_199] (rows=29040539 width=135)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_198] (rows=29040539 width=135)
                            predicate:(_col7 > 0)
                            Select Operator [SEL_828] (rows=87121617 width=135)
                              Output:["_col0","_col7"]
                              Group By Operator [GBY_197] (rows=87121617 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                              <-Reducer 45 [SIMPLE_EDGE]
                                SHUFFLE [RS_196]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Group By Operator [GBY_195] (rows=174243235 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Select Operator [SEL_193] (rows=174243235 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Merge Join Operator [MERGEJOIN_847] (rows=174243235 width=135)
                                        Conds:RS_190._col1=RS_191._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                      <-Map 65 [SIMPLE_EDGE]
                                        SHUFFLE [RS_191]
                                          PartitionCols:_col0
                                          Select Operator [SEL_186] (rows=80000000 width=860)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Filter Operator [FIL_799] (rows=80000000 width=860)
                                              predicate:(c_customer_sk is not null and c_customer_id is not null)
                                               Please refer to the previous TableScan [TS_6]
                                      <-Reducer 44 [SIMPLE_EDGE]
                                        SHUFFLE [RS_190]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_846] (rows=158402938 width=135)
                                            Conds:RS_187._col0=RS_188._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                          <-Map 28 [SIMPLE_EDGE]
                                            SHUFFLE [RS_188]
                                              PartitionCols:_col0
                                              Select Operator [SEL_183] (rows=36524 width=1119)
                                                Output:["_col0"]
                                                Filter Operator [FIL_798] (rows=36524 width=1119)
                                                  predicate:((d_year = 2001) and d_date_sk is not null)
                                                   Please refer to the previous TableScan [TS_3]
                                          <-Map 67 [SIMPLE_EDGE]
                                            SHUFFLE [RS_187]
                                              PartitionCols:_col0
                                              Select Operator [SEL_180] (rows=144002668 width=135)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                Filter Operator [FIL_797] (rows=144002668 width=135)
                                                  predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                   Please refer to the previous TableScan [TS_45]
                  <-Union 19 [SIMPLE_EDGE]
                    <-Reducer 18 [CONTAINS]
                      Reduce Output Operator [RS_402]
                        PartitionCols:_col0
                        Select Operator [SEL_221] (rows=1 width=105)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_220] (rows=1 width=105)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 17 [SIMPLE_EDGE]
                            SHUFFLE [RS_219]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_218] (rows=1 width=105)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_216] (rows=1 width=105)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_849] (rows=1 width=105)
                                    Conds:RS_213._col1=RS_214._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_214]
                                      PartitionCols:_col0
                                      Select Operator [SEL_209] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_802] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 16 [SIMPLE_EDGE]
                                    SHUFFLE [RS_213]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_848] (rows=1 width=96)
                                        Conds:RS_210._col0=RS_211._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_211]
                                          PartitionCols:_col0
                                          Select Operator [SEL_206] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_801] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 1 [SIMPLE_EDGE]
                                        SHUFFLE [RS_210]
                                          PartitionCols:_col0
                                          Select Operator [SEL_203] (rows=1 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_800] (rows=1 width=88)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_0]
                    <-Reducer 49 [CONTAINS]
                      Reduce Output Operator [RS_402]
                        PartitionCols:_col0
                        Select Operator [SEL_242] (rows=1 width=162)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_241] (rows=1 width=162)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 48 [SIMPLE_EDGE]
                            SHUFFLE [RS_240]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_239] (rows=1 width=162)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_237] (rows=1 width=162)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_851] (rows=1 width=162)
                                    Conds:RS_234._col1=RS_235._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_235]
                                      PartitionCols:_col0
                                      Select Operator [SEL_230] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_805] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 47 [SIMPLE_EDGE]
                                    SHUFFLE [RS_234]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_850] (rows=1 width=148)
                                        Conds:RS_231._col0=RS_232._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_232]
                                          PartitionCols:_col0
                                          Select Operator [SEL_227] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_804] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 66 [SIMPLE_EDGE]
                                        SHUFFLE [RS_231]
                                          PartitionCols:_col0
                                          Select Operator [SEL_224] (rows=1 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_803] (rows=1 width=135)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_22]
                    <-Reducer 52 [CONTAINS]
                      Reduce Output Operator [RS_402]
                        PartitionCols:_col0
                        Select Operator [SEL_265] (rows=87121617 width=135)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_264] (rows=87121617 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                          <-Reducer 51 [SIMPLE_EDGE]
                            SHUFFLE [RS_263]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Group By Operator [GBY_262] (rows=174243235 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Select Operator [SEL_260] (rows=174243235 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                  Merge Join Operator [MERGEJOIN_853] (rows=174243235 width=135)
                                    Conds:RS_257._col1=RS_258._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_258]
                                      PartitionCols:_col0
                                      Select Operator [SEL_253] (rows=80000000 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_808] (rows=80000000 width=860)
                                          predicate:(c_customer_sk is not null and c_customer_id is not null)
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 50 [SIMPLE_EDGE]
                                    SHUFFLE [RS_257]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_852] (rows=158402938 width=135)
                                        Conds:RS_254._col0=RS_255._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_255]
                                          PartitionCols:_col0
                                          Select Operator [SEL_250] (rows=36524 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_807] (rows=36524 width=1119)
                                              predicate:((d_year = 2002) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 67 [SIMPLE_EDGE]
                                        SHUFFLE [RS_254]
                                          PartitionCols:_col0
                                          Select Operator [SEL_247] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_806] (rows=144002668 width=135)
                                              predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                               Please refer to the previous TableScan [TS_45]
                  <-Union 23 [SIMPLE_EDGE]
                    <-Reducer 22 [CONTAINS]
                      Reduce Output Operator [RS_403]
                        PartitionCols:_col0
                        Select Operator [SEL_287] (rows=1 width=105)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_286] (rows=1 width=105)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 21 [SIMPLE_EDGE]
                            SHUFFLE [RS_285]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_284] (rows=1 width=105)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_282] (rows=1 width=105)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_855] (rows=1 width=105)
                                    Conds:RS_279._col1=RS_280._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_280]
                                      PartitionCols:_col0
                                      Select Operator [SEL_275] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_811] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_279]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_854] (rows=1 width=96)
                                        Conds:RS_276._col0=RS_277._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_277]
                                          PartitionCols:_col0
                                          Select Operator [SEL_272] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_810] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 1 [SIMPLE_EDGE]
                                        SHUFFLE [RS_276]
                                          PartitionCols:_col0
                                          Select Operator [SEL_269] (rows=1 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_809] (rows=1 width=88)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_0]
                    <-Reducer 55 [CONTAINS]
                      Reduce Output Operator [RS_403]
                        PartitionCols:_col0
                        Select Operator [SEL_308] (rows=174233858 width=135)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_307] (rows=174233858 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                          <-Reducer 54 [SIMPLE_EDGE]
                            SHUFFLE [RS_306]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Group By Operator [GBY_305] (rows=348467716 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Select Operator [SEL_303] (rows=348467716 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                  Merge Join Operator [MERGEJOIN_857] (rows=348467716 width=135)
                                    Conds:RS_300._col1=RS_301._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_301]
                                      PartitionCols:_col0
                                      Select Operator [SEL_296] (rows=80000000 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_814] (rows=80000000 width=860)
                                          predicate:(c_customer_sk is not null and c_customer_id is not null)
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 53 [SIMPLE_EDGE]
                                    SHUFFLE [RS_300]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_856] (rows=316788826 width=135)
                                        Conds:RS_297._col0=RS_298._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_298]
                                          PartitionCols:_col0
                                          Select Operator [SEL_293] (rows=36524 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_813] (rows=36524 width=1119)
                                              predicate:((d_year = 2002) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 66 [SIMPLE_EDGE]
                                        SHUFFLE [RS_297]
                                          PartitionCols:_col0
                                          Select Operator [SEL_290] (rows=287989836 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_812] (rows=287989836 width=135)
                                              predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                               Please refer to the previous TableScan [TS_22]
                    <-Reducer 58 [CONTAINS]
                      Reduce Output Operator [RS_403]
                        PartitionCols:_col0
                        Select Operator [SEL_331] (rows=1 width=162)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_330] (rows=1 width=162)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 57 [SIMPLE_EDGE]
                            SHUFFLE [RS_329]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_328] (rows=1 width=162)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_326] (rows=1 width=162)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_859] (rows=1 width=162)
                                    Conds:RS_323._col1=RS_324._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_324]
                                      PartitionCols:_col0
                                      Select Operator [SEL_319] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_817] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 56 [SIMPLE_EDGE]
                                    SHUFFLE [RS_323]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_858] (rows=1 width=148)
                                        Conds:RS_320._col0=RS_321._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_321]
                                          PartitionCols:_col0
                                          Select Operator [SEL_316] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_816] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 67 [SIMPLE_EDGE]
                                        SHUFFLE [RS_320]
                                          PartitionCols:_col0
                                          Select Operator [SEL_313] (rows=1 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_815] (rows=1 width=135)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_45]
                  <-Union 27 [SIMPLE_EDGE]
                    <-Reducer 26 [CONTAINS]
                      Reduce Output Operator [RS_404]
                        PartitionCols:_col0
                        Select Operator [SEL_353] (rows=348477374 width=88)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_352] (rows=348477374 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                          <-Reducer 25 [SIMPLE_EDGE]
                            SHUFFLE [RS_351]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Group By Operator [GBY_350] (rows=696954748 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Select Operator [SEL_348] (rows=696954748 width=88)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                  Merge Join Operator [MERGEJOIN_861] (rows=696954748 width=88)
                                    Conds:RS_345._col1=RS_346._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_346]
                                      PartitionCols:_col0
                                      Select Operator [SEL_341] (rows=80000000 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_820] (rows=80000000 width=860)
                                          predicate:(c_customer_sk is not null and c_customer_id is not null)
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 24 [SIMPLE_EDGE]
                                    SHUFFLE [RS_345]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_860] (rows=633595212 width=88)
                                        Conds:RS_342._col0=RS_343._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_343]
                                          PartitionCols:_col0
                                          Select Operator [SEL_338] (rows=36524 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_819] (rows=36524 width=1119)
                                              predicate:((d_year = 2002) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 1 [SIMPLE_EDGE]
                                        SHUFFLE [RS_342]
                                          PartitionCols:_col0
                                          Select Operator [SEL_335] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_818] (rows=575995635 width=88)
                                              predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                               Please refer to the previous TableScan [TS_0]
                    <-Reducer 61 [CONTAINS]
                      Reduce Output Operator [RS_404]
                        PartitionCols:_col0
                        Select Operator [SEL_374] (rows=1 width=162)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_373] (rows=1 width=162)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 60 [SIMPLE_EDGE]
                            SHUFFLE [RS_372]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_371] (rows=1 width=162)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_369] (rows=1 width=162)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_863] (rows=1 width=162)
                                    Conds:RS_366._col1=RS_367._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_367]
                                      PartitionCols:_col0
                                      Select Operator [SEL_362] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_823] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 59 [SIMPLE_EDGE]
                                    SHUFFLE [RS_366]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_862] (rows=1 width=148)
                                        Conds:RS_363._col0=RS_364._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_364]
                                          PartitionCols:_col0
                                          Select Operator [SEL_359] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_822] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 66 [SIMPLE_EDGE]
                                        SHUFFLE [RS_363]
                                          PartitionCols:_col0
                                          Select Operator [SEL_356] (rows=1 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_821] (rows=1 width=135)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_22]
                    <-Reducer 64 [CONTAINS]
                      Reduce Output Operator [RS_404]
                        PartitionCols:_col0
                        Select Operator [SEL_397] (rows=1 width=162)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_396] (rows=1 width=162)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 63 [SIMPLE_EDGE]
                            SHUFFLE [RS_395]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_394] (rows=1 width=162)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_392] (rows=1 width=162)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_865] (rows=1 width=162)
                                    Conds:RS_389._col1=RS_390._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_390]
                                      PartitionCols:_col0
                                      Select Operator [SEL_385] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_826] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 62 [SIMPLE_EDGE]
                                    SHUFFLE [RS_389]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_864] (rows=1 width=148)
                                        Conds:RS_386._col0=RS_387._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_387]
                                          PartitionCols:_col0
                                          Select Operator [SEL_382] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_825] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 67 [SIMPLE_EDGE]
                                        SHUFFLE [RS_386]
                                          PartitionCols:_col0
                                          Select Operator [SEL_379] (rows=1 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_824] (rows=1 width=135)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_45]
                  <-Union 5 [SIMPLE_EDGE]
                    <-Reducer 31 [CONTAINS]
                      Reduce Output Operator [RS_399]
                        PartitionCols:_col0
                        Select Operator [SEL_42] (rows=1 width=162)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_41] (rows=1 width=162)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 30 [SIMPLE_EDGE]
                            SHUFFLE [RS_40]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_39] (rows=1 width=162)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_37] (rows=1 width=162)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_833] (rows=1 width=162)
                                    Conds:RS_34._col1=RS_35._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_35]
                                      PartitionCols:_col0
                                      Select Operator [SEL_30] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_778] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 29 [SIMPLE_EDGE]
                                    SHUFFLE [RS_34]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_832] (rows=1 width=148)
                                        Conds:RS_31._col0=RS_32._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_32]
                                          PartitionCols:_col0
                                          Select Operator [SEL_27] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_777] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 66 [SIMPLE_EDGE]
                                        SHUFFLE [RS_31]
                                          PartitionCols:_col0
                                          Select Operator [SEL_24] (rows=1 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_776] (rows=1 width=135)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_22]
                    <-Reducer 34 [CONTAINS]
                      Reduce Output Operator [RS_399]
                        PartitionCols:_col0
                        Select Operator [SEL_65] (rows=1 width=162)
                          Output:["_col0","_col1"]
                          Group By Operator [GBY_64] (rows=1 width=162)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                          <-Reducer 33 [SIMPLE_EDGE]
                            SHUFFLE [RS_63]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                              Group By Operator [GBY_62] (rows=1 width=162)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col8)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Select Operator [SEL_60] (rows=1 width=162)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                  Merge Join Operator [MERGEJOIN_835] (rows=1 width=162)
                                    Conds:RS_57._col1=RS_58._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 65 [SIMPLE_EDGE]
                                    SHUFFLE [RS_58]
                                      PartitionCols:_col0
                                      Select Operator [SEL_53] (rows=1 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_781] (rows=1 width=860)
                                          predicate:false
                                           Please refer to the previous TableScan [TS_6]
                                  <-Reducer 32 [SIMPLE_EDGE]
                                    SHUFFLE [RS_57]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_834] (rows=1 width=148)
                                        Conds:RS_54._col0=RS_55._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_55]
                                          PartitionCols:_col0
                                          Select Operator [SEL_50] (rows=1 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_780] (rows=1 width=1119)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 67 [SIMPLE_EDGE]
                                        SHUFFLE [RS_54]
                                          PartitionCols:_col0
                                          Select Operator [SEL_47] (rows=1 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_779] (rows=1 width=135)
                                              predicate:false
                                               Please refer to the previous TableScan [TS_45]
                    <-Reducer 4 [CONTAINS]
                      Reduce Output Operator [RS_399]
                        PartitionCols:_col0
                        Select Operator [SEL_21] (rows=116159124 width=88)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_20] (rows=116159124 width=88)
                            predicate:(_col7 > 0)
                            Select Operator [SEL_829] (rows=348477374 width=88)
                              Output:["_col0","_col7"]
                              Group By Operator [GBY_19] (rows=348477374 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                              <-Reducer 3 [SIMPLE_EDGE]
                                SHUFFLE [RS_18]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Group By Operator [GBY_17] (rows=696954748 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Select Operator [SEL_15] (rows=696954748 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Merge Join Operator [MERGEJOIN_831] (rows=696954748 width=88)
                                        Conds:RS_12._col1=RS_13._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                      <-Map 65 [SIMPLE_EDGE]
                                        SHUFFLE [RS_13]
                                          PartitionCols:_col0
                                          Select Operator [SEL_8] (rows=80000000 width=860)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Filter Operator [FIL_775] (rows=80000000 width=860)
                                              predicate:(c_customer_sk is not null and c_customer_id is not null)
                                               Please refer to the previous TableScan [TS_6]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_12]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_830] (rows=633595212 width=88)
                                            Conds:RS_9._col0=RS_10._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                          <-Map 28 [SIMPLE_EDGE]
                                            SHUFFLE [RS_10]
                                              PartitionCols:_col0
                                              Select Operator [SEL_5] (rows=36524 width=1119)
                                                Output:["_col0"]
                                                Filter Operator [FIL_774] (rows=36524 width=1119)
                                                  predicate:((d_year = 2001) and d_date_sk is not null)
                                                   Please refer to the previous TableScan [TS_3]
                                          <-Map 1 [SIMPLE_EDGE]
                                            SHUFFLE [RS_9]
                                              PartitionCols:_col0
                                              Select Operator [SEL_2] (rows=575995635 width=88)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                Filter Operator [FIL_773] (rows=575995635 width=88)
                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                   Please refer to the previous TableScan [TS_0]

