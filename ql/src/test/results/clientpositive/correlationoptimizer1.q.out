PREHOOK: query: -- the query is from auto_join26.q

CREATE TABLE dest_co1(key INT, cnt INT)
PREHOOK: type: CREATETABLE
POSTHOOK: query: -- the query is from auto_join26.q

CREATE TABLE dest_co1(key INT, cnt INT)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@dest_co1
PREHOOK: query: CREATE TABLE dest_co2(key INT, cnt INT)
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE dest_co2(key INT, cnt INT)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@dest_co2
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE dest_co1
SELECT x.key, count(1) FROM src1 x JOIN src y ON (x.key = y.key) group by x.key
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE dest_co1
SELECT x.key, count(1) FROM src1 x JOIN src y ON (x.key = y.key) group by x.key
POSTHOOK: type: QUERY
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME src1) x) (TOK_TABREF (TOK_TABNAME src) y) (= (. (TOK_TABLE_OR_COL x) key) (. (TOK_TABLE_OR_COL y) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME dest_co1))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL x) key)) (TOK_SELEXPR (TOK_FUNCTION count 1))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL x) key))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        x 
          TableScan
            alias: x
            Reduce Output Operator
              key expressions:
                    expr: key
                    type: string
              sort order: +
              Map-reduce partition columns:
                    expr: key
                    type: string
              tag: 0
              value expressions:
                    expr: key
                    type: string
        y 
          TableScan
            alias: y
            Reduce Output Operator
              key expressions:
                    expr: key
                    type: string
              sort order: +
              Map-reduce partition columns:
                    expr: key
                    type: string
              tag: 1
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col0}
            1 
          handleSkewJoin: false
          outputColumnNames: _col0
          Select Operator
            expressions:
                  expr: _col0
                  type: string
            outputColumnNames: _col0
            Group By Operator
              aggregations:
                    expr: count(1)
              bucketGroup: false
              keys:
                    expr: _col0
                    type: string
              mode: hash
              outputColumnNames: _col0, _col1
              File Output Operator
                compressed: false
                GlobalTableId: 0
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat

  Stage: Stage-2
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            Reduce Output Operator
              key expressions:
                    expr: _col0
                    type: string
              sort order: +
              Map-reduce partition columns:
                    expr: _col0
                    type: string
              tag: -1
              value expressions:
                    expr: _col1
                    type: bigint
      Reduce Operator Tree:
        Group By Operator
          aggregations:
                expr: count(VALUE._col0)
          bucketGroup: false
          keys:
                expr: KEY._col0
                type: string
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Select Operator
            expressions:
                  expr: _col0
                  type: string
                  expr: _col1
                  type: bigint
            outputColumnNames: _col0, _col1
            Select Operator
              expressions:
                    expr: UDFToInteger(_col0)
                    type: int
                    expr: UDFToInteger(_col1)
                    type: int
              outputColumnNames: _col0, _col1
              File Output Operator
                compressed: false
                GlobalTableId: 1
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.dest_co1

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest_co1

  Stage: Stage-3
    Stats-Aggr Operator


PREHOOK: query: INSERT OVERWRITE TABLE dest_co1
SELECT  x.key, count(1) FROM src1 x JOIN src y ON (x.key = y.key) group by x.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: default@dest_co1
POSTHOOK: query: INSERT OVERWRITE TABLE dest_co1
SELECT  x.key, count(1) FROM src1 x JOIN src y ON (x.key = y.key) group by x.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@dest_co1
POSTHOOK: Lineage: dest_co1.cnt EXPRESSION [(src1)x.null, (src)y.null, ]
POSTHOOK: Lineage: dest_co1.key EXPRESSION [(src1)x.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE dest_co2
SELECT x.key, count(1) FROM src1 x JOIN src y ON (x.key = y.key) group by x.key
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE dest_co2
SELECT x.key, count(1) FROM src1 x JOIN src y ON (x.key = y.key) group by x.key
POSTHOOK: type: QUERY
POSTHOOK: Lineage: dest_co1.cnt EXPRESSION [(src1)x.null, (src)y.null, ]
POSTHOOK: Lineage: dest_co1.key EXPRESSION [(src1)x.FieldSchema(name:key, type:string, comment:default), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME src1) x) (TOK_TABREF (TOK_TABNAME src) y) (= (. (TOK_TABLE_OR_COL x) key) (. (TOK_TABLE_OR_COL y) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME dest_co2))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL x) key)) (TOK_SELEXPR (TOK_FUNCTION count 1))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL x) key))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1
  Stage-2 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        x 
          TableScan
            alias: x
            Select Operator
              expressions:
                    expr: key
                    type: string
              outputColumnNames: key
              Forward
                Correlation Composite Operator
                  Reduce Output Operator
                    key expressions:
                          expr: key
                          type: string
                    sort order: +
                    Map-reduce partition columns:
                          expr: key
                          type: string
                    tag: 0
                    value expressions:
                          expr: key
                          type: string
        y 
          TableScan
            alias: y
            Select Operator
              expressions:
                    expr: key
                    type: string
              outputColumnNames: key
              Forward
                Correlation Composite Operator
                  Reduce Output Operator
                    key expressions:
                          expr: key
                          type: string
                    sort order: +
                    Map-reduce partition columns:
                          expr: key
                          type: string
                    tag: 1
      Reduce Operator Tree:
        Correlation Dispatch Operator
          Join Operator
            condition map:
                 Inner Join 0 to 1
            condition expressions:
              0 {VALUE._col0}
              1 
            handleSkewJoin: false
            outputColumnNames: _col0
            Select Operator
              expressions:
                    expr: _col0
                    type: string
              outputColumnNames: _col0
              Correlation Local Simulative Reduce Output Operator
                key expressions:
                      expr: _col0
                      type: string
                sort order: +
                Map-reduce partition columns:
                      expr: _col0
                      type: string
                tag: -1
                value expressions:
                      expr: 1
                      type: int
                Group By Operator
                  aggregations:
                        expr: count(VALUE._col0)
                  bucketGroup: false
                  keys:
                        expr: KEY._col0
                        type: string
                  mode: complete
                  outputColumnNames: _col0, _col1
                  Select Operator
                    expressions:
                          expr: _col0
                          type: string
                          expr: _col1
                          type: bigint
                    outputColumnNames: _col0, _col1
                    Select Operator
                      expressions:
                            expr: UDFToInteger(_col0)
                            type: int
                            expr: UDFToInteger(_col1)
                            type: int
                      outputColumnNames: _col0, _col1
                      File Output Operator
                        compressed: false
                        GlobalTableId: 1
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.dest_co2

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest_co2

  Stage: Stage-2
    Stats-Aggr Operator


PREHOOK: query: INSERT OVERWRITE TABLE dest_co2
SELECT  x.key, count(1) FROM src1 x JOIN src y ON (x.key = y.key) group by x.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: default@dest_co2
POSTHOOK: query: INSERT OVERWRITE TABLE dest_co2
SELECT  x.key, count(1) FROM src1 x JOIN src y ON (x.key = y.key) group by x.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@dest_co2
POSTHOOK: Lineage: dest_co1.cnt EXPRESSION [(src1)x.null, (src)y.null, ]
POSTHOOK: Lineage: dest_co1.key EXPRESSION [(src1)x.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_co2.cnt EXPRESSION [(src1)x.null, (src)y.null, ]
POSTHOOK: Lineage: dest_co2.key EXPRESSION [(src1)x.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: -- dest_co1 and dest_co2 should be same
SELECT * FROM dest_co1 x ORDER BY x.key
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_co1
#### A masked pattern was here ####
POSTHOOK: query: -- dest_co1 and dest_co2 should be same
SELECT * FROM dest_co1 x ORDER BY x.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_co1
#### A masked pattern was here ####
POSTHOOK: Lineage: dest_co1.cnt EXPRESSION [(src1)x.null, (src)y.null, ]
POSTHOOK: Lineage: dest_co1.key EXPRESSION [(src1)x.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_co2.cnt EXPRESSION [(src1)x.null, (src)y.null, ]
POSTHOOK: Lineage: dest_co2.key EXPRESSION [(src1)x.FieldSchema(name:key, type:string, comment:default), ]
66	1
98	2
128	3
146	2
150	1
213	2
224	2
238	2
255	2
273	3
278	2
311	3
369	3
401	5
406	4
PREHOOK: query: SELECT * FROM dest_co2 x ORDER BY x.key
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_co2
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM dest_co2 x ORDER BY x.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_co2
#### A masked pattern was here ####
POSTHOOK: Lineage: dest_co1.cnt EXPRESSION [(src1)x.null, (src)y.null, ]
POSTHOOK: Lineage: dest_co1.key EXPRESSION [(src1)x.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_co2.cnt EXPRESSION [(src1)x.null, (src)y.null, ]
POSTHOOK: Lineage: dest_co2.key EXPRESSION [(src1)x.FieldSchema(name:key, type:string, comment:default), ]
66	1
98	2
128	3
146	2
150	1
213	2
224	2
238	2
255	2
273	3
278	2
311	3
369	3
401	5
406	4
