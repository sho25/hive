begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapBaseRecordReader
operator|.
name|ReaderEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|LlapOutputSocketInitMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|LlapProxy
import|;
end_import

begin_class
specifier|public
class|class
name|TestLlapOutputFormat
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLlapOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|LlapOutputFormatService
name|service
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting up output service"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Pick random avail port
name|HiveConf
operator|.
name|setIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_OUTPUT_SERVICE_PORT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_OUTPUT_FORMAT_ARROW
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LlapOutputFormatService
operator|.
name|initializeAndStart
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|service
operator|=
name|LlapOutputFormatService
operator|.
name|get
argument_list|()
expr_stmt|;
name|LlapProxy
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Output service up"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tearing down service"
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tearing down complete"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValues
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|5
condition|;
operator|++
name|k
control|)
block|{
name|String
name|id
init|=
literal|"foobar"
operator|+
name|k
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapOutputFormat
operator|.
name|LLAP_OF_ID_KEY
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|LlapOutputFormat
name|format
init|=
operator|new
name|LlapOutputFormat
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|service
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Socket connected"
argument_list|)
expr_stmt|;
name|OutputStream
name|socketStream
init|=
name|socket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|LlapOutputSocketInitMessage
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFragmentId
argument_list|(
name|id
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|socketStream
argument_list|)
expr_stmt|;
name|socketStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data written"
argument_list|)
expr_stmt|;
name|RecordWriter
argument_list|<
name|NullWritable
argument_list|,
name|Text
argument_list|>
name|writer
init|=
name|format
operator|.
name|getRecordWriter
argument_list|(
literal|null
argument_list|,
name|job
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Text
name|text
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Have record writer"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|text
operator|.
name|set
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|socket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|LlapBaseRecordReader
name|reader
init|=
operator|new
name|LlapBaseRecordReader
argument_list|(
name|in
argument_list|,
literal|null
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|job
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Have record reader"
argument_list|)
expr_stmt|;
comment|// Send done event, which LlapRecordReader is expecting upon end of input
name|reader
operator|.
name|handleEvent
argument_list|(
name|ReaderEvent
operator|.
name|doneEvent
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|text
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadClientMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|String
name|id
init|=
literal|"foobar"
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapOutputFormat
operator|.
name|LLAP_OF_ID_KEY
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|LlapOutputFormat
name|format
init|=
operator|new
name|LlapOutputFormat
argument_list|()
decl_stmt|;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|service
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Socket connected"
argument_list|)
expr_stmt|;
name|OutputStream
name|socketStream
init|=
name|socket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|LlapOutputSocketInitMessage
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFragmentId
argument_list|(
name|id
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|socketStream
argument_list|)
expr_stmt|;
name|LlapOutputSocketInitMessage
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFragmentId
argument_list|(
name|id
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|socketStream
argument_list|)
expr_stmt|;
name|socketStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data written"
argument_list|)
expr_stmt|;
try|try
block|{
name|format
operator|.
name|getRecordWriter
argument_list|(
literal|null
argument_list|,
name|job
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Didn't throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
block|}
end_class

end_unit

