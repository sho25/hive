begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|core
operator|.
name|classloader
operator|.
name|annotations
operator|.
name|PowerMockIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|core
operator|.
name|classloader
operator|.
name|annotations
operator|.
name|PrepareForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|modules
operator|.
name|junit4
operator|.
name|PowerMockRunner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyListOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|same
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|powermock
operator|.
name|api
operator|.
name|mockito
operator|.
name|PowerMockito
operator|.
name|mockStatic
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|powermock
operator|.
name|api
operator|.
name|mockito
operator|.
name|PowerMockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Unit Test class for CopyUtils class.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|PowerMockRunner
operator|.
name|class
argument_list|)
annotation|@
name|PrepareForTest
argument_list|(
block|{
name|CopyUtils
operator|.
name|class
block|,
name|FileUtils
operator|.
name|class
block|,
name|Utils
operator|.
name|class
block|,
name|UserGroupInformation
operator|.
name|class
block|}
argument_list|)
annotation|@
name|PowerMockIgnore
argument_list|(
block|{
literal|"javax.management.*"
block|}
argument_list|)
specifier|public
class|class
name|TestCopyUtils
block|{
comment|/*   Distcp currently does not copy a single file in a distributed manner hence we dont care about   the size of file, if there is only file, we dont want to launch distcp.    */
annotation|@
name|Test
specifier|public
name|void
name|distcpShouldNotBeCalledOnlyForOneFile
parameter_list|()
throws|throws
name|Exception
block|{
name|mockStatic
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|1L
argument_list|)
operator|.
name|when
argument_list|(
name|conf
argument_list|)
operator|.
name|getLong
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_COPYFILE_MAXSIZE
operator|.
name|varname
argument_list|,
literal|32L
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|CopyUtils
name|copyUtils
init|=
operator|new
name|CopyUtils
argument_list|(
literal|""
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|MB_128
init|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|assertFalse
argument_list|(
name|copyUtils
operator|.
name|limitReachedForLocalCopy
argument_list|(
name|MB_128
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|distcpShouldNotBeCalledForSmallerFileSize
parameter_list|()
throws|throws
name|Exception
block|{
name|mockStatic
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
decl_stmt|;
name|CopyUtils
name|copyUtils
init|=
operator|new
name|CopyUtils
argument_list|(
literal|""
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|MB_16
init|=
literal|16
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|assertFalse
argument_list|(
name|copyUtils
operator|.
name|limitReachedForLocalCopy
argument_list|(
name|MB_16
argument_list|,
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|shouldThrowExceptionOnDistcpFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|destination
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|source
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|srcPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|source
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|HiveConf
name|conf
init|=
name|mock
argument_list|(
name|HiveConf
operator|.
name|class
argument_list|)
decl_stmt|;
name|CopyUtils
name|copyUtils
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|CopyUtils
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|mockStatic
argument_list|(
name|FileUtils
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockStatic
argument_list|(
name|Utils
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|destination
operator|.
name|getFileSystem
argument_list|(
name|same
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|getFileSystem
argument_list|(
name|same
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|FileUtils
operator|.
name|distCp
argument_list|(
name|same
argument_list|(
name|fs
argument_list|)
argument_list|,
name|anyListOf
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|same
argument_list|(
name|destination
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|null
argument_list|)
argument_list|,
name|same
argument_list|(
name|conf
argument_list|)
argument_list|,
name|same
argument_list|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|Utils
operator|.
name|getUGI
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|copyUtils
argument_list|)
operator|.
name|regularCopy
argument_list|(
name|same
argument_list|(
name|fs
argument_list|)
argument_list|,
name|same
argument_list|(
name|fs
argument_list|)
argument_list|,
name|anyListOf
argument_list|(
name|ReplChangeManager
operator|.
name|FileInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|copyUtils
operator|.
name|doCopy
argument_list|(
name|destination
argument_list|,
name|srcPaths
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

