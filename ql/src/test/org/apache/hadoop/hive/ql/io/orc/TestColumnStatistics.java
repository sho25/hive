begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test ColumnStatisticsImpl for ORC.  */
end_comment

begin_class
specifier|public
class|class
name|TestColumnStatistics
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLongMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
decl_stmt|;
name|ColumnStatisticsImpl
name|stats1
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|ColumnStatisticsImpl
name|stats2
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|stats1
operator|.
name|updateInteger
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateInteger
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateInteger
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|IntegerColumnStatistics
name|typed
init|=
operator|(
name|IntegerColumnStatistics
operator|)
name|stats1
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stats1
operator|.
name|updateInteger
argument_list|(
operator|-
literal|10
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateInteger
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|10
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaDoubleObjectInspector
decl_stmt|;
name|ColumnStatisticsImpl
name|stats1
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|ColumnStatisticsImpl
name|stats2
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|stats1
operator|.
name|updateDouble
argument_list|(
literal|10.0
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateDouble
argument_list|(
literal|100.0
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateDouble
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateDouble
argument_list|(
literal|1000.0
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|DoubleColumnStatistics
name|typed
init|=
operator|(
name|DoubleColumnStatistics
operator|)
name|stats1
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000.0
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stats1
operator|.
name|updateDouble
argument_list|(
operator|-
literal|10
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateDouble
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|10
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
decl_stmt|;
name|ColumnStatisticsImpl
name|stats1
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|ColumnStatisticsImpl
name|stats2
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|stats1
operator|.
name|updateString
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateString
argument_list|(
operator|new
name|Text
argument_list|(
literal|"david"
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateString
argument_list|(
operator|new
name|Text
argument_list|(
literal|"charles"
argument_list|)
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateString
argument_list|(
operator|new
name|Text
argument_list|(
literal|"anne"
argument_list|)
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateString
argument_list|(
operator|new
name|Text
argument_list|(
literal|"erin"
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|StringColumnStatistics
name|typed
init|=
operator|(
name|StringColumnStatistics
operator|)
name|stats1
decl_stmt|;
name|assertEquals
argument_list|(
literal|"anne"
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"erin"
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stats1
operator|.
name|updateString
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateString
argument_list|(
operator|new
name|Text
argument_list|(
literal|"zzz"
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zzz"
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaDateObjectInspector
decl_stmt|;
name|ColumnStatisticsImpl
name|stats1
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|ColumnStatisticsImpl
name|stats2
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|stats1
operator|.
name|updateDate
argument_list|(
operator|new
name|DateWritable
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateDate
argument_list|(
operator|new
name|DateWritable
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateDate
argument_list|(
operator|new
name|DateWritable
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateDate
argument_list|(
operator|new
name|DateWritable
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|DateColumnStatistics
name|typed
init|=
operator|(
name|DateColumnStatistics
operator|)
name|stats1
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DateWritable
argument_list|(
literal|10
argument_list|)
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DateWritable
argument_list|(
literal|2000
argument_list|)
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stats1
operator|.
name|updateDate
argument_list|(
operator|new
name|DateWritable
argument_list|(
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateDate
argument_list|(
operator|new
name|DateWritable
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|10
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaTimestampObjectInspector
decl_stmt|;
name|ColumnStatisticsImpl
name|stats1
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|ColumnStatisticsImpl
name|stats2
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|stats1
operator|.
name|updateTimestamp
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateTimestamp
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateTimestamp
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateTimestamp
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|TimestampColumnStatistics
name|typed
init|=
operator|(
name|TimestampColumnStatistics
operator|)
name|stats1
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stats1
operator|.
name|updateTimestamp
argument_list|(
operator|new
name|Timestamp
argument_list|(
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateTimestamp
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|10
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaHiveDecimalObjectInspector
decl_stmt|;
name|ColumnStatisticsImpl
name|stats1
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|ColumnStatisticsImpl
name|stats2
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|stats1
operator|.
name|updateDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|stats2
operator|.
name|updateDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|DecimalColumnStatistics
name|typed
init|=
operator|(
name|DecimalColumnStatistics
operator|)
name|stats1
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stats1
operator|.
name|updateDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|updateDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|stats1
operator|.
name|merge
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|10
argument_list|,
name|typed
operator|.
name|getMinimum
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|typed
operator|.
name|getMaximum
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

