begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * TestHiveMetaStoreChecker.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestHiveMetaStoreChecker
block|{
specifier|private
name|Hive
name|hive
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|HiveMetaStoreChecker
name|checker
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbName
init|=
literal|"testhivemetastorechecker_db"
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
init|=
literal|"testhivemetastorechecker_table"
decl_stmt|;
specifier|private
specifier|final
name|String
name|partDateName
init|=
literal|"partdate"
decl_stmt|;
specifier|private
specifier|final
name|String
name|partCityName
init|=
literal|"partcity"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|parts
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hive
operator|=
name|Hive
operator|.
name|get
argument_list|()
expr_stmt|;
name|hive
operator|.
name|getConf
argument_list|()
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_FS_HANDLER_THREADS_COUNT
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|hive
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MSCK_PATH_VALIDATION
operator|.
name|varname
argument_list|,
literal|"throw"
argument_list|)
expr_stmt|;
name|checker
operator|=
operator|new
name|HiveMetaStoreChecker
argument_list|(
name|hive
argument_list|)
expr_stmt|;
name|partCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|partDateName
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|partCityName
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|parts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part1
operator|.
name|put
argument_list|(
name|partDateName
argument_list|,
literal|"2008-01-01"
argument_list|)
expr_stmt|;
name|part1
operator|.
name|put
argument_list|(
name|partCityName
argument_list|,
literal|"london"
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|part1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part2
operator|.
name|put
argument_list|(
name|partDateName
argument_list|,
literal|"2008-01-02"
argument_list|)
expr_stmt|;
name|part2
operator|.
name|put
argument_list|(
name|partCityName
argument_list|,
literal|"stockholm"
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|part2
argument_list|)
expr_stmt|;
comment|//cleanup just in case something is left over from previous run
name|dropDbTable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dropDbTable
parameter_list|()
block|{
comment|// cleanup
try|try
block|{
name|hive
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hive
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|dropDbTable
argument_list|()
expr_stmt|;
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableCheck
parameter_list|()
throws|throws
name|HiveException
throws|,
name|MetaException
throws|,
name|IOException
throws|,
name|TException
throws|,
name|AlreadyExistsException
block|{
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// we haven't added anything so should return an all ok
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// check table only, should not exist in ms
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|hive
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|table
operator|.
name|setOutputFormatClass
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|hive
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|isSetId
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|unsetId
argument_list|()
expr_stmt|;
comment|// now we've got a table, check that it works
comment|// first check all (1) tables
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// then let's check the one we know about
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove the table folder
name|fs
operator|=
name|table
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|hive
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// now this shouldn't find the path on the fs
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// put it back and one additional table
name|fs
operator|.
name|mkdirs
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|fakeTable
init|=
name|table
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|suffix
argument_list|(
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"faketable"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|fakeTable
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|fakeTable
argument_list|)
expr_stmt|;
comment|// find the extra table
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fakeTable
operator|.
name|getName
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a new external table
name|hive
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setProperty
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|hive
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// should return all ok
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests the case when tblPath/p1=a/p2=b/p3=c/file for a table with partition (p1, p2)    * does not throw HiveException    */
annotation|@
name|Test
specifier|public
name|void
name|testAdditionalPartitionDirs
parameter_list|()
throws|throws
name|HiveException
throws|,
name|AlreadyExistsException
throws|,
name|IOException
block|{
name|Table
name|table
init|=
name|createTestTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|hive
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a fake partition dir on fs
name|fs
operator|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDataLocation
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|hive
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|fakePart
init|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|partDateName
operator|+
literal|"=2017-01-01/"
operator|+
name|partCityName
operator|+
literal|"=paloalto/fakePartCol=fakepartValue"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|fakePart
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|fakePart
argument_list|)
expr_stmt|;
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
comment|//fakePart path partition is added since the defined partition keys are valid
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidPartitionKeyName
parameter_list|()
throws|throws
name|HiveException
throws|,
name|AlreadyExistsException
throws|,
name|IOException
block|{
name|Table
name|table
init|=
name|createTestTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|hive
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a fake partition dir on fs
name|fs
operator|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDataLocation
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|hive
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|fakePart
init|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"fakedate=2009-01-01/fakecity=sanjose"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|fakePart
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|fakePart
argument_list|)
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
operator|new
name|CheckResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * skip mode should not throw exception when a invalid partition directory    * is found. It should just ignore it    */
annotation|@
name|Test
specifier|public
name|void
name|testSkipInvalidPartitionKeyName
parameter_list|()
throws|throws
name|HiveException
throws|,
name|AlreadyExistsException
throws|,
name|IOException
block|{
name|hive
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MSCK_PATH_VALIDATION
operator|.
name|varname
argument_list|,
literal|"skip"
argument_list|)
expr_stmt|;
name|checker
operator|=
operator|new
name|HiveMetaStoreChecker
argument_list|(
name|hive
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|createTestTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|hive
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a fake partition dir on fs
name|fs
operator|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDataLocation
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|hive
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|fakePart
init|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"fakedate=2009-01-01/fakecity=sanjose"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|fakePart
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|fakePart
argument_list|)
expr_stmt|;
name|createPartitionsDirectoriesOnFS
argument_list|(
name|table
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
comment|// only 2 valid partitions should be added
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Table
name|createTestTable
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|HiveException
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|hive
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|table
operator|.
name|setOutputFormatClass
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|table
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
name|hive
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|=
name|hive
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|isSetId
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|unsetId
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
range|:
name|parts
control|)
block|{
name|hive
operator|.
name|createPartition
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionsCheck
parameter_list|()
throws|throws
name|HiveException
throws|,
name|MetaException
throws|,
name|IOException
throws|,
name|TException
throws|,
name|AlreadyExistsException
block|{
name|Table
name|table
init|=
name|createTestTable
argument_list|()
decl_stmt|;
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// all is well
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|hive
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|partToRemove
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// As this partition (partdate=2008-01-01/partcity=london) is the only
comment|// partition under (partdate=2008-01-01)
comment|// we also need to delete partdate=2008-01-01 to make it consistent.
name|Path
name|partToRemovePath
init|=
name|partToRemove
operator|.
name|getDataLocation
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|fs
operator|=
name|partToRemovePath
operator|.
name|getFileSystem
argument_list|(
name|hive
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|partToRemovePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// missing one partition on fs
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|partToRemove
operator|.
name|getName
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPartitionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|partToRemove
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|partsCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|partsCopy
operator|.
name|add
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSpec
argument_list|()
argument_list|)
expr_stmt|;
comment|// check only the partition that exists, all should be well
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partsCopy
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// old test is moved to msck_repair_2.q
comment|// cleanup
name|hive
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hive
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|)
expr_stmt|;
comment|//--0e
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Test completed - partition check"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataDeletion
parameter_list|()
throws|throws
name|HiveException
throws|,
name|MetaException
throws|,
name|IOException
throws|,
name|TException
throws|,
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|hive
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|table
operator|.
name|setOutputFormatClass
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|table
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
name|hive
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|=
name|hive
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Path
name|fakeTable
init|=
name|table
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|suffix
argument_list|(
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"faketable"
argument_list|)
decl_stmt|;
name|fs
operator|=
name|fakeTable
operator|.
name|getFileSystem
argument_list|(
name|hive
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|fakeTable
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|fakeTable
argument_list|)
expr_stmt|;
name|Path
name|fakePart
init|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"fakepartition=fakevalue"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|fakePart
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|fakePart
argument_list|)
expr_stmt|;
name|hive
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|fakePart
argument_list|)
argument_list|)
expr_stmt|;
name|hive
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|fakeTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test multi-threaded implementation of checker to find out missing partitions    */
annotation|@
name|Test
specifier|public
name|void
name|testPartitionsNotInMs
parameter_list|()
throws|throws
name|HiveException
throws|,
name|AlreadyExistsException
throws|,
name|IOException
block|{
name|Table
name|testTable
init|=
name|createPartitionedTestTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// add 10 partitions on the filesystem
name|createPartitionsDirectoriesOnFS
argument_list|(
name|testTable
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests single threaded implementation of checkMetastore    */
annotation|@
name|Test
specifier|public
name|void
name|testSingleThreadedCheckMetastore
parameter_list|()
throws|throws
name|HiveException
throws|,
name|AlreadyExistsException
throws|,
name|IOException
block|{
comment|// set num of threads to 0 so that single-threaded checkMetastore is called
name|hive
operator|.
name|getConf
argument_list|()
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_FS_HANDLER_THREADS_COUNT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Table
name|testTable
init|=
name|createPartitionedTestTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// add 10 partitions on the filesystem
name|createPartitionsDirectoriesOnFS
argument_list|(
name|testTable
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests single threaded implementation for deeply nested partitioned tables    *    * @throws HiveException    * @throws AlreadyExistsException    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testSingleThreadedDeeplyNestedTables
parameter_list|()
throws|throws
name|HiveException
throws|,
name|AlreadyExistsException
throws|,
name|IOException
block|{
comment|// set num of threads to 0 so that single-threaded checkMetastore is called
name|hive
operator|.
name|getConf
argument_list|()
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_FS_HANDLER_THREADS_COUNT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|poolSize
init|=
literal|2
decl_stmt|;
comment|// create a deeply nested table which has more partition keys than the pool size
name|Table
name|testTable
init|=
name|createPartitionedTestTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|poolSize
operator|+
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// add 10 partitions on the filesystem
name|createPartitionsDirectoriesOnFS
argument_list|(
name|testTable
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the case when the number of partition keys are more than the threadpool size.    *    * @throws HiveException    * @throws AlreadyExistsException    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testDeeplyNestedPartitionedTables
parameter_list|()
throws|throws
name|HiveException
throws|,
name|AlreadyExistsException
throws|,
name|IOException
block|{
name|hive
operator|.
name|getConf
argument_list|()
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_FS_HANDLER_THREADS_COUNT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|poolSize
init|=
literal|2
decl_stmt|;
comment|// create a deeply nested table which has more partition keys than the pool size
name|Table
name|testTable
init|=
name|createPartitionedTestTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|poolSize
operator|+
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// add 10 partitions on the filesystem
name|createPartitionsDirectoriesOnFS
argument_list|(
name|testTable
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if checker throws HiveException when the there is a dummy directory present in the nested level    * of sub-directories    * @throws AlreadyExistsException    * @throws IOException    * @throws HiveException    */
annotation|@
name|Test
specifier|public
name|void
name|testErrorForMissingPartitionColumn
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|IOException
throws|,
name|HiveException
block|{
name|Table
name|testTable
init|=
name|createPartitionedTestTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// add 10 partitions on the filesystem
name|createPartitionsDirectoriesOnFS
argument_list|(
name|testTable
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|//create a fake directory to throw exception
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|testTable
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dummyPart=error"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//check result now
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected HiveException"
argument_list|,
name|exception
operator|!=
literal|null
operator|&&
name|exception
operator|instanceof
name|HiveException
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|"dummyFile"
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected HiveException"
argument_list|,
name|exception
operator|!=
literal|null
operator|&&
name|exception
operator|instanceof
name|HiveException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if there exists a unknown partition directory on the FS with in-valid order of partition    * keys than what is specified in table specification.    *    * @throws AlreadyExistsException    * @throws HiveException    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidOrderForPartitionKeysOnFS
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|Table
name|testTable
init|=
name|createPartitionedTestTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// add 10 partitions on the filesystem
name|createInvalidPartitionDirsOnFS
argument_list|(
name|testTable
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/*    * In skip mode msck should ignore invalid partitions instead of    * throwing exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSkipInvalidOrderForPartitionKeysOnFS
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|hive
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MSCK_PATH_VALIDATION
operator|.
name|varname
argument_list|,
literal|"skip"
argument_list|)
expr_stmt|;
name|checker
operator|=
operator|new
name|HiveMetaStoreChecker
argument_list|(
name|hive
argument_list|)
expr_stmt|;
name|Table
name|testTable
init|=
name|createPartitionedTestTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// add 10 partitions on the filesystem
name|createInvalidPartitionDirsOnFS
argument_list|(
name|testTable
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// add 10 partitions on the filesystem
name|createPartitionsDirectoriesOnFS
argument_list|(
name|testTable
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|)
expr_stmt|;
comment|// only 2 valid partitions should be added
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test if single-threaded implementation checker throws HiveException when the there is a dummy    * directory present in the nested level    */
annotation|@
name|Test
specifier|public
name|void
name|testErrorForMissingPartitionsSingleThreaded
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|HiveException
throws|,
name|IOException
block|{
comment|// set num of threads to 0 so that single-threaded checkMetastore is called
name|hive
operator|.
name|getConf
argument_list|()
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_FS_HANDLER_THREADS_COUNT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Table
name|testTable
init|=
name|createPartitionedTestTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// add 10 partitions on the filesystem
name|createPartitionsDirectoriesOnFS
argument_list|(
name|testTable
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// create a fake directory to throw exception
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|testTable
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dummyPart=error"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check result now
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected HiveException"
argument_list|,
name|exception
operator|!=
literal|null
operator|&&
name|exception
operator|instanceof
name|HiveException
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|"dummyFile"
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|CheckResult
argument_list|()
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|checker
operator|.
name|checkMetastore
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected HiveException"
argument_list|,
name|exception
operator|!=
literal|null
operator|&&
name|exception
operator|instanceof
name|HiveException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a test partitioned table with the required level of nested partitions and number of    * partitions    *    * @param dbName - Database name    * @param tableName - Table name    * @param numOfPartKeys - Number of partition keys (nested levels of sub-directories in base table    *          path)    * @param valuesPerPartition - If greater than 0 creates valuesPerPartition dummy partitions    * @return    * @throws AlreadyExistsException    * @throws HiveException    */
specifier|private
name|Table
name|createPartitionedTestTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|numOfPartKeys
parameter_list|,
name|int
name|valuesPerPartition
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|HiveException
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|hive
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|table
operator|.
name|setOutputFormatClass
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// create partition key schema
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numOfPartKeys
condition|;
name|i
operator|++
control|)
block|{
name|String
name|partName
init|=
literal|"part"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|partKeys
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|partName
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setPartCols
argument_list|(
name|partKeys
argument_list|)
expr_stmt|;
comment|// create table
name|hive
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|=
name|hive
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|valuesPerPartition
operator|==
literal|0
condition|)
block|{
return|return
name|table
return|;
block|}
comment|// create partition specs
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|partitionSpecs
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|partKeyIndex
init|=
literal|0
init|;
name|partKeyIndex
operator|<
name|numOfPartKeys
condition|;
name|partKeyIndex
operator|++
control|)
block|{
name|String
name|partName
init|=
name|partKeys
operator|.
name|get
argument_list|(
name|partKeyIndex
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|val
init|=
literal|1
init|;
name|val
operator|<=
name|valuesPerPartition
condition|;
name|val
operator|++
control|)
block|{
name|partMap
operator|.
name|put
argument_list|(
name|partName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|partitionSpecs
operator|.
name|add
argument_list|(
name|partMap
argument_list|)
expr_stmt|;
block|}
comment|// create partitions
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
range|:
name|partitionSpecs
control|)
block|{
name|hive
operator|.
name|createPartition
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|hive
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numOfPartKeys
operator|*
name|valuesPerPartition
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
comment|/**    * Creates partition sub-directories for a given table on the file system. Used to test the    * use-cases when partitions for the table are not present in the metastore db    *    * @param table - Table which provides the base locations and partition specs for creating the    *          sub-directories    * @param numPartitions - Number of partitions to be created    * @param reverseOrder - If set to true creates the partition sub-directories in the reverse order    *          of specified by partition keys defined for the table    * @throws IOException    */
specifier|private
name|void
name|createPartitionsDirectoriesOnFS
parameter_list|(
name|Table
name|table
parameter_list|,
name|int
name|numPartitions
parameter_list|,
name|boolean
name|reverseOrder
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|fs
operator|=
name|table
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|hive
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numPartKeys
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPartitions
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilder
name|partPath
init|=
operator|new
name|StringBuilder
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|partPath
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reverseOrder
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numPartKeys
condition|;
name|j
operator|++
control|)
block|{
name|FieldSchema
name|field
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|partPath
operator|.
name|append
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|partPath
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|partPath
operator|.
name|append
argument_list|(
literal|"val_"
argument_list|)
expr_stmt|;
name|partPath
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<
operator|(
name|numPartKeys
operator|-
literal|1
operator|)
condition|)
block|{
name|partPath
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
name|numPartKeys
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|FieldSchema
name|field
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|partPath
operator|.
name|append
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|partPath
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|partPath
operator|.
name|append
argument_list|(
literal|"val_"
argument_list|)
expr_stmt|;
name|partPath
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|partPath
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|createDirectory
argument_list|(
name|partPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createPartitionsDirectoriesOnFS
parameter_list|(
name|Table
name|table
parameter_list|,
name|int
name|numPartitions
parameter_list|)
throws|throws
name|IOException
block|{
name|createPartitionsDirectoriesOnFS
argument_list|(
name|table
argument_list|,
name|numPartitions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a partition directory structure on file system but with a reverse order    * of sub-directories compared to the partition keys defined in the table. Eg. if the    * partition keys defined in table are (a int, b int, c int) this method will create    * an invalid directory c=val_1/b=val_1/a=val_1    * @param table    * @throws IOException    */
specifier|private
name|void
name|createInvalidPartitionDirsOnFS
parameter_list|(
name|Table
name|table
parameter_list|,
name|int
name|numPartitions
parameter_list|)
throws|throws
name|IOException
block|{
name|createPartitionsDirectoriesOnFS
argument_list|(
name|table
argument_list|,
name|numPartitions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createFile
parameter_list|(
name|String
name|partPath
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|part
init|=
operator|new
name|Path
argument_list|(
name|partPath
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
name|partPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createDirectory
parameter_list|(
name|String
name|partPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|part
init|=
operator|new
name|Path
argument_list|(
name|partPath
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

