begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "import org.apache.hadoop.hive.ql.exec.FunctionInfo; AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestBlockedUdf
block|{
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|FunctionRegistry
operator|.
name|setupPermissionsForBuiltinUDFs
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that UDF in the whitelist can be access    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testDefaultWhiteList
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|new
name|HiveConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_BUILTIN_UDF_WHITELIST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|new
name|HiveConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_BUILTIN_UDF_BLACKLIST
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|setupPermissionsForBuiltinUDFs
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"substr"
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"substr"
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that UDF in the whitelist can be access    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUdfInWhiteList
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|funcNames
init|=
name|FunctionRegistry
operator|.
name|getFunctionNames
argument_list|()
decl_stmt|;
name|funcNames
operator|.
name|remove
argument_list|(
literal|"reflect"
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|setupPermissionsForBuiltinUDFs
argument_list|(
name|funcNames
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"substr"
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"substr"
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that UDF not in whitelist can't be accessed    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SemanticException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUdfNotInWhiteList
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|funcNames
init|=
name|FunctionRegistry
operator|.
name|getFunctionNames
argument_list|()
decl_stmt|;
name|funcNames
operator|.
name|remove
argument_list|(
literal|"reflect"
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|setupPermissionsForBuiltinUDFs
argument_list|(
name|funcNames
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reflect"
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"reflect"
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that UDF in blacklist can't be accessed    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SemanticException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUdfInBlackList
parameter_list|()
throws|throws
name|Exception
block|{
name|FunctionRegistry
operator|.
name|setupPermissionsForBuiltinUDFs
argument_list|(
literal|""
argument_list|,
literal|"reflect"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reflect"
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"reflect"
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that UDF in whitelist and blacklist can't be accessed    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SemanticException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUdfInBlackAndWhiteList
parameter_list|()
throws|throws
name|Exception
block|{
name|FunctionRegistry
operator|.
name|setupPermissionsForBuiltinUDFs
argument_list|(
literal|"reflect"
argument_list|,
literal|"reflect"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reflect"
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"reflect"
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test malformatted udf  list setting    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SemanticException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMalformattedListProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|FunctionRegistry
operator|.
name|setupPermissionsForBuiltinUDFs
argument_list|(
literal|",,"
argument_list|,
literal|" ,reflect,"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reflect"
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"reflect"
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

