begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockObject
operator|.
name|HiveLockObjectData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|TestEmbeddedLockManager
extends|extends
name|TestCase
block|{
specifier|private
name|int
name|counter
decl_stmt|;
specifier|public
name|void
name|testLocking
parameter_list|()
throws|throws
name|LockException
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.lock.numretries"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.unlock.numretries"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|EmbeddedLockManager
name|manager
init|=
operator|new
name|EmbeddedLockManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|setContext
argument_list|(
operator|new
name|HiveLockManagerCtx
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path1
init|=
literal|"database1/table1/x=100"
decl_stmt|;
name|String
name|path2
init|=
literal|"database1/table1/x=200"
decl_stmt|;
name|String
name|path3
init|=
literal|"database1/table2"
decl_stmt|;
name|String
name|path4
init|=
literal|"database2"
decl_stmt|;
name|HiveLockObject
name|path1sel1
init|=
name|lockObj
argument_list|(
name|path1
argument_list|,
literal|"select"
argument_list|)
decl_stmt|;
name|HiveLock
name|path1sel1Lock
init|=
name|manager
operator|.
name|lock
argument_list|(
name|path1sel1
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|path1sel1Lock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HiveLockObject
name|path1up1
init|=
name|lockObj
argument_list|(
name|path1
argument_list|,
literal|"update"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|manager
operator|.
name|lock
argument_list|(
name|path1up1
argument_list|,
name|HiveLockMode
operator|.
name|EXCLUSIVE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|HiveLockObject
name|path1sel2
init|=
name|lockObj
argument_list|(
name|path1
argument_list|,
literal|"select"
argument_list|)
decl_stmt|;
name|HiveLock
name|path1sel2Lock
init|=
name|manager
operator|.
name|lock
argument_list|(
name|path1sel2
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|path1sel2Lock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HiveLockObject
name|path1up2
init|=
name|lockObj
argument_list|(
name|path1
argument_list|,
literal|"update"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|manager
operator|.
name|lock
argument_list|(
name|path1up2
argument_list|,
name|HiveLockMode
operator|.
name|EXCLUSIVE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|HiveLockObject
name|path2sel1
init|=
name|lockObj
argument_list|(
name|path2
argument_list|,
literal|"select"
argument_list|)
decl_stmt|;
name|HiveLock
name|path2sel1Lock
init|=
name|manager
operator|.
name|lock
argument_list|(
name|path2sel1
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|path2sel1Lock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path2sel1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HiveLockObject
name|path3sel
init|=
name|lockObj
argument_list|(
name|path3
argument_list|,
literal|"select"
argument_list|)
decl_stmt|;
name|HiveLock
name|path3selLock
init|=
name|manager
operator|.
name|lock
argument_list|(
name|path3sel
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|path3selLock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path2sel1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path3sel
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|unlock
argument_list|(
name|path1sel1Lock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path2sel1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path3sel
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|unlock
argument_list|(
name|path1sel2Lock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path2sel1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path3sel
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|unlock
argument_list|(
name|path2sel1Lock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path3sel
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|unlock
argument_list|(
name|path3selLock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HiveLockObject
name|path2up1
init|=
name|lockObj
argument_list|(
name|path2
argument_list|,
literal|"update"
argument_list|)
decl_stmt|;
name|HiveLock
name|path2up1Lock
init|=
name|manager
operator|.
name|lock
argument_list|(
name|path2up1
argument_list|,
name|HiveLockMode
operator|.
name|EXCLUSIVE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|path2up1Lock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path2up1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|manager
operator|.
name|lock
argument_list|(
name|path2up1
argument_list|,
name|HiveLockMode
operator|.
name|EXCLUSIVE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|HiveLockObject
name|path1sel3
init|=
name|lockObj
argument_list|(
name|path1
argument_list|,
literal|"select"
argument_list|)
decl_stmt|;
name|HiveLockObject
name|path2sel2
init|=
name|lockObj
argument_list|(
name|path2
argument_list|,
literal|"select"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|manager
operator|.
name|lock
argument_list|(
name|path1sel3
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|manager
operator|.
name|lock
argument_list|(
name|path2sel2
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path2up1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
name|path1sel3
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|manager
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HiveLockObject
name|lockObj
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|query
parameter_list|)
block|{
name|HiveLockObjectData
name|data
init|=
operator|new
name|HiveLockObjectData
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|++
name|counter
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|query
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveLockObject
argument_list|(
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|data
argument_list|)
return|;
block|}
block|}
end_class

end_unit

