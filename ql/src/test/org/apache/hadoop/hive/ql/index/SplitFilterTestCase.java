begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
operator|.
name|HiveInputSplit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SplitFilterTestCase
block|{
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_SPLIT_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|SMALL_SPLIT_SIZE
init|=
literal|500
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|HiveInputSplit
argument_list|>
name|allSplits
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|HiveInputSplit
argument_list|>
name|selectedSplits
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|HiveInputSplit
argument_list|>
name|expectedSplits
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxInputSize
decl_stmt|;
specifier|private
name|SplitFilterTestCase
parameter_list|(
name|Iterable
argument_list|<
name|HiveInputSplit
argument_list|>
name|allSplits
parameter_list|,
name|Iterable
argument_list|<
name|HiveInputSplit
argument_list|>
name|selectedSplits
parameter_list|,
name|Iterable
argument_list|<
name|HiveInputSplit
argument_list|>
name|expectedSplits
parameter_list|,
name|long
name|maxInputSize
parameter_list|)
block|{
name|this
operator|.
name|allSplits
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|allSplits
argument_list|)
expr_stmt|;
name|this
operator|.
name|selectedSplits
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|selectedSplits
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedSplits
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|expectedSplits
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxInputSize
operator|=
name|maxInputSize
expr_stmt|;
block|}
specifier|private
name|HiveInputSplit
index|[]
name|toArray
parameter_list|(
name|Collection
argument_list|<
name|HiveInputSplit
argument_list|>
name|splits
parameter_list|)
block|{
return|return
name|splits
operator|.
name|toArray
argument_list|(
operator|new
name|HiveInputSplit
index|[
name|splits
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|executeAndValidate
parameter_list|()
throws|throws
name|IOException
block|{
name|SplitFilter
name|filter
init|=
operator|new
name|SplitFilter
argument_list|(
operator|new
name|MockIndexResult
argument_list|(
name|selectedSplits
argument_list|)
argument_list|,
name|maxInputSize
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|actualSplits
init|=
name|filter
operator|.
name|filter
argument_list|(
name|toArray
argument_list|(
name|allSplits
argument_list|)
argument_list|)
decl_stmt|;
name|assertSplits
argument_list|(
name|expectedSplits
argument_list|,
name|actualSplits
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSplits
parameter_list|(
name|Collection
argument_list|<
name|HiveInputSplit
argument_list|>
name|expectedSplits
parameter_list|,
name|Collection
argument_list|<
name|HiveInputSplit
argument_list|>
name|actualSplits
parameter_list|)
block|{
name|SplitFilter
operator|.
name|HiveInputSplitComparator
name|hiveInputSplitComparator
init|=
operator|new
name|SplitFilter
operator|.
name|HiveInputSplitComparator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|sortedExpectedSplits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expectedSplits
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedExpectedSplits
argument_list|,
name|hiveInputSplitComparator
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|sortedActualSplits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|actualSplits
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedActualSplits
argument_list|,
name|hiveInputSplitComparator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of selected splits."
argument_list|,
name|sortedExpectedSplits
operator|.
name|size
argument_list|()
argument_list|,
name|sortedActualSplits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedExpectedSplits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|HiveInputSplit
name|expectedSplit
init|=
name|sortedExpectedSplits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveInputSplit
name|actualSplit
init|=
name|sortedActualSplits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|splitName
init|=
literal|"Split #"
operator|+
name|i
decl_stmt|;
name|assertEquals
argument_list|(
name|splitName
operator|+
literal|" path."
argument_list|,
name|expectedSplit
operator|.
name|getPath
argument_list|()
argument_list|,
name|actualSplit
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|splitName
operator|+
literal|" start."
argument_list|,
name|expectedSplit
operator|.
name|getStart
argument_list|()
argument_list|,
name|actualSplit
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|splitName
operator|+
literal|" length."
argument_list|,
name|expectedSplit
operator|.
name|getLength
argument_list|()
argument_list|,
name|actualSplit
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|MaxInputSizeStep
name|builder
parameter_list|()
block|{
return|return
operator|new
name|SplitFilterTestCaseBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
interface|interface
name|MaxInputSizeStep
extends|extends
name|InputFilesStep
block|{
name|InputFilesStep
name|maxInputSize
parameter_list|(
name|long
name|maxInputSize
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|InputFilesStep
block|{
name|ExpectedSplitsStep
name|inputFiles
parameter_list|(
name|MockInputFile
modifier|...
name|inputFiles
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|ExpectedSplitsStep
block|{
name|BuildStep
name|expectedSplits
parameter_list|(
name|HiveInputSplit
modifier|...
name|expectedSplits
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|BuildStep
block|{
name|SplitFilterTestCase
name|build
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SplitFilterTestCaseBuilder
implements|implements
name|MaxInputSizeStep
implements|,
name|InputFilesStep
implements|,
name|ExpectedSplitsStep
implements|,
name|BuildStep
block|{
specifier|private
name|long
name|maxInputSize
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MockInputFile
argument_list|>
name|inputFiles
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|expectedSplits
decl_stmt|;
annotation|@
name|Override
specifier|public
name|InputFilesStep
name|maxInputSize
parameter_list|(
name|long
name|maxInputSize
parameter_list|)
block|{
name|this
operator|.
name|maxInputSize
operator|=
name|maxInputSize
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExpectedSplitsStep
name|inputFiles
parameter_list|(
name|MockInputFile
modifier|...
name|inputFiles
parameter_list|)
block|{
name|this
operator|.
name|inputFiles
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|inputFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuildStep
name|expectedSplits
parameter_list|(
name|HiveInputSplit
modifier|...
name|expectedSplits
parameter_list|)
block|{
name|this
operator|.
name|expectedSplits
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedSplits
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|SplitFilterTestCase
name|build
parameter_list|()
block|{
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|allSplits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|selectedSplits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|seenPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MockInputFile
name|inputFile
range|:
name|inputFiles
control|)
block|{
if|if
condition|(
name|seenPaths
operator|.
name|add
argument_list|(
name|inputFile
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|allSplits
operator|.
name|addAll
argument_list|(
name|inputFile
operator|.
name|getSplits
argument_list|()
argument_list|)
expr_stmt|;
name|selectedSplits
operator|.
name|addAll
argument_list|(
name|inputFile
operator|.
name|getSelectedSplits
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot add 2 input files with the same path to a test case. "
operator|+
literal|"The duplicated path is '%s'."
argument_list|,
name|inputFile
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SplitFilterTestCase
argument_list|(
name|allSplits
argument_list|,
name|selectedSplits
argument_list|,
name|expectedSplits
argument_list|,
name|maxInputSize
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

