begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|VectorMapJoinRowBytesContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorMapJoinRowBytesContainer
block|{
specifier|public
name|void
name|doFillReplay
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
name|maxCount
parameter_list|)
throws|throws
name|Exception
block|{
name|RandomByteArrayStream
name|randomByteArrayStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|VectorMapJoinRowBytesContainer
name|vectorMapJoinRowBytesContainer
init|=
operator|new
name|VectorMapJoinRowBytesContainer
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxCount
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|randomByteArrayStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|Output
name|output
init|=
name|vectorMapJoinRowBytesContainer
operator|.
name|getOuputForRowBytes
argument_list|()
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|vectorMapJoinRowBytesContainer
operator|.
name|finishRow
argument_list|()
expr_stmt|;
block|}
name|vectorMapJoinRowBytesContainer
operator|.
name|prepareForReading
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|vectorMapJoinRowBytesContainer
operator|.
name|readNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|readBytes
init|=
name|vectorMapJoinRowBytesContainer
operator|.
name|currentBytes
argument_list|()
decl_stmt|;
name|int
name|readOffset
init|=
name|vectorMapJoinRowBytesContainer
operator|.
name|currentOffset
argument_list|()
decl_stmt|;
name|int
name|readLength
init|=
name|vectorMapJoinRowBytesContainer
operator|.
name|currentLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|expectedBytes
init|=
name|randomByteArrayStream
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|readLength
operator|!=
name|expectedBytes
operator|.
name|length
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|readLength
condition|;
name|j
operator|++
control|)
block|{
name|byte
name|readByte
init|=
name|readBytes
index|[
name|readOffset
operator|+
name|j
index|]
decl_stmt|;
name|byte
name|expectedByte
init|=
name|expectedBytes
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|readByte
operator|!=
name|expectedByte
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFillReplay
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|47496
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|doFillReplay
argument_list|(
name|random
argument_list|,
literal|1
operator|<<
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

