begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CloseableThreadLocalTest
block|{
specifier|private
specifier|static
class|class
name|AutoCloseableStub
implements|implements
name|AutoCloseable
block|{
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResourcesAreInitiallyNotClosed
parameter_list|()
block|{
name|CloseableThreadLocal
argument_list|<
name|AutoCloseableStub
argument_list|>
name|closeableThreadLocal
init|=
operator|new
name|CloseableThreadLocal
argument_list|<>
argument_list|(
name|AutoCloseableStub
operator|::
operator|new
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|closeableThreadLocal
operator|.
name|get
argument_list|()
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAfterCallingCloseAllInstancesAreClosed
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|CloseableThreadLocal
argument_list|<
name|AutoCloseableStub
argument_list|>
name|closeableThreadLocal
init|=
operator|new
name|CloseableThreadLocal
argument_list|<>
argument_list|(
name|AutoCloseableStub
operator|::
operator|new
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|AutoCloseableStub
name|asyncInstance
init|=
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
name|closeableThreadLocal
operator|::
name|get
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AutoCloseableStub
name|syncInstance
init|=
name|closeableThreadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
name|closeableThreadLocal
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|asyncInstance
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|syncInstance
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubsequentGetsInTheSameThreadGivesBackTheSameObject
parameter_list|()
block|{
name|CloseableThreadLocal
argument_list|<
name|AutoCloseableStub
argument_list|>
name|closeableThreadLocal
init|=
operator|new
name|CloseableThreadLocal
argument_list|<>
argument_list|(
name|AutoCloseableStub
operator|::
operator|new
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|AutoCloseableStub
name|ref1
init|=
name|closeableThreadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
name|AutoCloseableStub
name|ref2
init|=
name|closeableThreadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ref1
argument_list|,
name|is
argument_list|(
name|ref2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDifferentThreadsHasDifferentInstancesOfTheResource
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|CloseableThreadLocal
argument_list|<
name|AutoCloseableStub
argument_list|>
name|closeableThreadLocal
init|=
operator|new
name|CloseableThreadLocal
argument_list|<>
argument_list|(
name|AutoCloseableStub
operator|::
operator|new
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|AutoCloseableStub
name|asyncInstance
init|=
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
name|closeableThreadLocal
operator|::
name|get
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AutoCloseableStub
name|syncInstance
init|=
name|closeableThreadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|asyncInstance
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|syncInstance
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

