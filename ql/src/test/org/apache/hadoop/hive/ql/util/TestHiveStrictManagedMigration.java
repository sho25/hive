begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TxnCommandsBaseForTests
operator|.
name|Table
operator|.
name|ACIDTBL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TxnCommandsBaseForTests
operator|.
name|Table
operator|.
name|ACIDTBLPART
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TxnCommandsBaseForTests
operator|.
name|Table
operator|.
name|NONACIDNONBUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TxnCommandsBaseForTests
operator|.
name|Table
operator|.
name|NONACIDORCTBL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TxnCommandsBaseForTests
operator|.
name|Table
operator|.
name|NONACIDORCTBL2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TxnCommandsBaseForTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveStrictManagedMigration
extends|extends
name|TxnCommandsBaseForTests
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestHiveStrictManagedMigration
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTERNAL_TABLE_LOCATION
init|=
operator|new
name|File
argument_list|(
name|TEST_DATA_DIR
argument_list|,
literal|"tmp"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
index|[]
name|data
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|,
block|{
literal|5
block|,
literal|6
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"DROP TABLE IF EXISTS test.TAcid"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"DROP DATABASE IF EXISTS test"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"CREATE DATABASE test"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"CREATE TABLE test.TAcid (a int, b int) CLUSTERED BY (b) INTO 2 BUCKETS STORED AS orc TBLPROPERTIES"
operator|+
literal|" ('transactional'='true')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"INSERT INTO test.TAcid"
operator|+
name|makeValuesClause
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"CREATE EXTERNAL TABLE texternal (a int, b int)"
argument_list|)
expr_stmt|;
name|String
name|oldWarehouse
init|=
name|getWarehouseDir
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"--hiveconf"
block|,
literal|"hive.strict.managed.tables=true"
block|,
literal|"-m"
block|,
literal|"automatic"
block|,
literal|"--modifyManagedTables"
block|,
literal|"--oldWarehouseRoot"
block|,
name|oldWarehouse
block|}
decl_stmt|;
name|HiveConf
name|newConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|File
name|newWarehouseDir
init|=
operator|new
name|File
argument_list|(
name|getTestDataDir
argument_list|()
argument_list|,
literal|"newWarehouse"
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|newWarehouseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|set
argument_list|(
literal|"strict.managed.tables.migration.owner"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|runMigrationTool
argument_list|(
name|newConf
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newWarehouseDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|newWarehouseDir
argument_list|,
name|ACIDTBL
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|newWarehouseDir
argument_list|,
name|ACIDTBLPART
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|newWarehouseDir
argument_list|,
name|NONACIDNONBUCKET
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|newWarehouseDir
argument_list|,
name|NONACIDORCTBL
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|newWarehouseDir
argument_list|,
name|NONACIDORCTBL2
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|newWarehouseDir
argument_list|,
literal|"test.db"
argument_list|)
argument_list|,
literal|"tacid"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|oldWarehouse
argument_list|,
literal|"texternal"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Tear down
name|runStatementOnDriver
argument_list|(
literal|"drop database test cascade"
argument_list|)
expr_stmt|;
name|Database
name|defaultDb
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getDatabase
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|defaultDb
operator|.
name|setLocationUri
argument_list|(
name|oldWarehouse
argument_list|)
expr_stmt|;
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|alterDatabase
argument_list|(
literal|"default"
argument_list|,
name|defaultDb
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hive.strict.managed.tables"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests shouldMoveExternal option on all possible scenarios of the following dimensions:    * - managed or external table type?    * - location in (old) warehouse or truly external location?    * - is partitioned?    * - is partition location default (under table directory) or custom external path?    * - default or custom database?    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testExternalMove
parameter_list|()
throws|throws
name|Exception
block|{
name|setupExternalTableTest
argument_list|()
expr_stmt|;
name|String
name|oldWarehouse
init|=
name|getWarehouseDir
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-m"
block|,
literal|"external"
block|,
literal|"--shouldMoveExternal"
block|,
literal|"--tableRegex"
block|,
literal|"man.*|ext.*|custm.*|custe.*"
block|,
literal|"--oldWarehouseRoot"
block|,
name|oldWarehouse
block|}
decl_stmt|;
name|HiveConf
name|newConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|File
name|newManagedWarehouseDir
init|=
operator|new
name|File
argument_list|(
name|getTestDataDir
argument_list|()
argument_list|,
literal|"newManaged"
argument_list|)
decl_stmt|;
name|File
name|newExtWarehouseDir
init|=
operator|new
name|File
argument_list|(
name|getTestDataDir
argument_list|()
argument_list|,
literal|"newExternal"
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|newManagedWarehouseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METASTORE_WAREHOUSE_EXTERNAL
operator|.
name|varname
argument_list|,
name|newExtWarehouseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|runMigrationTool
argument_list|(
name|newConf
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newExtWarehouseDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertExternalTableLocations
argument_list|(
name|newExtWarehouseDir
argument_list|,
operator|new
name|File
argument_list|(
name|EXTERNAL_TABLE_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertSDLocationCorrect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testExternalMoveFailsForIncorrectOptions
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-m"
block|,
literal|"automatic"
block|,
literal|"--shouldMoveExternal"
block|}
decl_stmt|;
name|runMigrationTool
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Exceptions are re-packaged by the migration tool...
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getTestDataDir
parameter_list|()
block|{
return|return
name|TEST_DATA_DIR
return|;
block|}
specifier|private
specifier|static
name|void
name|runMigrationTool
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveStrictManagedMigration
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|HiveStrictManagedMigration
operator|.
name|scheme
operator|=
literal|"file"
expr_stmt|;
name|HiveStrictManagedMigration
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupExternalTableTest
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists manwhnone"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists manoutnone"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists manwhwh"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists manwhout"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists manwhmixed"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists manoutout"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists extwhnone"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists extoutnone"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists extwhwh"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists extwhout"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists extwhmixed"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists extoutout"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists custdb.custmanwhwh"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists custdb.custextwhwh"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table manwhnone (a string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table manoutnone (a string) location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/manoutnone'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table manwhwh (a string) partitioned by (p string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table manwhwh add partition (p='p1')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table manwhwh add partition (p='p2')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table manwhout (a string) partitioned by (p string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table manwhout add partition (p='p1') location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/manwhoutp1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table manwhout add partition (p='p2') location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/manwhoutp2'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table manwhmixed (a string) partitioned by (p string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table manwhmixed add partition (p='p1') location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/manwhmixedp1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table manwhmixed add partition (p='p2')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table manoutout (a string) partitioned by (p string) location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/manoutout'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table manoutout add partition (p='p1')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table manoutout add partition (p='p2')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create external table extwhnone (a string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create external table extoutnone (a string) location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/extoutnone'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create external table extwhwh (a string) partitioned by (p string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table extwhwh add partition (p='p1')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table extwhwh add partition (p='p2')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create external table extwhout (a string) partitioned by (p string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table extwhout add partition (p='p1') location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/extwhoutp1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table extwhout add partition (p='p2') location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/extwhoutp2'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create external table extwhmixed (a string) partitioned by (p string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table extwhmixed add partition (p='p1') location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/extwhmixedp1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table extwhmixed add partition (p='p2')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create external table extoutout (a string) partitioned by (p string) location '"
operator|+
name|EXTERNAL_TABLE_LOCATION
operator|+
literal|"/extoutout'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table extoutout add partition (p='p1')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table extoutout add partition (p='p2')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop database if exists custdb"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create database custdb"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table custdb.custmanwhwh (a string) partitioned by (p string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table custdb.custmanwhwh add partition (p='p1')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table custdb.custmanwhwh add partition (p='p2')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create external table custdb.custextwhwh (a string) partitioned by (p string)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table custdb.custextwhwh add partition (p='p1')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table custdb.custextwhwh add partition (p='p2')"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertExternalTableLocations
parameter_list|(
name|File
name|exteralWarehouseDir
parameter_list|,
name|File
name|externalNonWhDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|actualDirs
init|=
name|Files
operator|.
name|find
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|exteralWarehouseDir
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|a
parameter_list|)
lambda|->
literal|true
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|exteralWarehouseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedDirs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhwh"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhwh/p=p2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhwh/p=p1"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhmixed"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhmixed/p=p2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhwh"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhwh/p=p2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhwh/p=p1"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/custdb.db"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/custdb.db/custmanwhwh"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/custdb.db/custmanwhwh/p=p2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/custdb.db/custmanwhwh/p=p1"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/custdb.db/custextwhwh"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/custdb.db/custextwhwh/p=p2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/custdb.db/custextwhwh/p=p1"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhout"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhnone"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhmixed"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhmixed/p=p2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhnone"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhout"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected external warehouse directory structure in "
operator|+
name|exteralWarehouseDir
argument_list|,
name|expectedDirs
argument_list|,
name|actualDirs
argument_list|)
expr_stmt|;
name|actualDirs
operator|=
name|Files
operator|.
name|find
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|externalNonWhDir
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|a
parameter_list|)
lambda|->
literal|true
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|externalNonWhDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manoutout"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extoutout/p=p2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extoutout/p=p1"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhoutp2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhoutp1"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhmixedp1"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhoutp1"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manoutout/p=p1"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manoutout/p=p2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manwhoutp2"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extoutnone"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/manoutnone"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extoutout"
argument_list|)
expr_stmt|;
name|expectedDirs
operator|.
name|add
argument_list|(
literal|"/extwhmixedp1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected external (non-warehouse) directory structure in "
operator|+
name|externalNonWhDir
argument_list|,
name|expectedDirs
argument_list|,
name|actualDirs
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertSDLocationCorrect
parameter_list|()
throws|throws
name|HiveException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|table
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getTable
argument_list|(
literal|"manwhwh"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocation
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/newExternal/manwhwh/p=p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLocation
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/newExternal/manwhwh/p=p2"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getTable
argument_list|(
literal|"manwhout"
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocation
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/tmp/manwhoutp1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLocation
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/tmp/manwhoutp2"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getTable
argument_list|(
literal|"manwhmixed"
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocation
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/tmp/manwhmixedp1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLocation
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/newExternal/manwhmixed/p=p2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

