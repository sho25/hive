begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|UnionColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcFile
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|PredicateLeaf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgumentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|FloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|TimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for the vectorized reader and writer for ORC files.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorOrcFile
block|{
specifier|public
specifier|static
class|class
name|InnerStruct
block|{
name|int
name|int1
decl_stmt|;
name|Text
name|string1
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|InnerStruct
parameter_list|(
name|int
name|int1
parameter_list|,
name|String
name|string1
parameter_list|)
block|{
name|this
operator|.
name|int1
operator|=
name|int1
expr_stmt|;
name|this
operator|.
name|string1
operator|.
name|set
argument_list|(
name|string1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
name|int1
operator|+
literal|", "
operator|+
name|string1
operator|+
literal|"}"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MiddleStruct
block|{
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|InnerStruct
argument_list|>
argument_list|()
decl_stmt|;
name|MiddleStruct
parameter_list|(
name|InnerStruct
modifier|...
name|items
parameter_list|)
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BigRow
block|{
name|Boolean
name|boolean1
decl_stmt|;
name|Byte
name|byte1
decl_stmt|;
name|Short
name|short1
decl_stmt|;
name|Integer
name|int1
decl_stmt|;
name|Long
name|long1
decl_stmt|;
name|Float
name|float1
decl_stmt|;
name|Double
name|double1
decl_stmt|;
name|BytesWritable
name|bytes1
decl_stmt|;
name|Text
name|string1
decl_stmt|;
name|MiddleStruct
name|middle
decl_stmt|;
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|InnerStruct
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Text
argument_list|,
name|InnerStruct
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Text
argument_list|,
name|InnerStruct
argument_list|>
argument_list|()
decl_stmt|;
name|BigRow
parameter_list|(
name|Boolean
name|b1
parameter_list|,
name|Byte
name|b2
parameter_list|,
name|Short
name|s1
parameter_list|,
name|Integer
name|i1
parameter_list|,
name|Long
name|l1
parameter_list|,
name|Float
name|f1
parameter_list|,
name|Double
name|d1
parameter_list|,
name|BytesWritable
name|b3
parameter_list|,
name|String
name|s2
parameter_list|,
name|MiddleStruct
name|m1
parameter_list|,
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|l2
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InnerStruct
argument_list|>
name|m2
parameter_list|)
block|{
name|this
operator|.
name|boolean1
operator|=
name|b1
expr_stmt|;
name|this
operator|.
name|byte1
operator|=
name|b2
expr_stmt|;
name|this
operator|.
name|short1
operator|=
name|s1
expr_stmt|;
name|this
operator|.
name|int1
operator|=
name|i1
expr_stmt|;
name|this
operator|.
name|long1
operator|=
name|l1
expr_stmt|;
name|this
operator|.
name|float1
operator|=
name|f1
expr_stmt|;
name|this
operator|.
name|double1
operator|=
name|d1
expr_stmt|;
name|this
operator|.
name|bytes1
operator|=
name|b3
expr_stmt|;
if|if
condition|(
name|s2
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|string1
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|string1
operator|=
operator|new
name|Text
argument_list|(
name|s2
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|middle
operator|=
name|m1
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|l2
expr_stmt|;
if|if
condition|(
name|m2
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|Text
argument_list|,
name|InnerStruct
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InnerStruct
argument_list|>
name|item
range|:
name|m2
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|map
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|map
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|InnerStruct
name|inner
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|InnerStruct
argument_list|(
name|i
argument_list|,
name|s
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|InnerStruct
argument_list|>
name|map
parameter_list|(
name|InnerStruct
modifier|...
name|items
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|InnerStruct
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InnerStruct
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InnerStruct
name|i
range|:
name|items
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|i
operator|.
name|string1
operator|.
name|toString
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|list
parameter_list|(
name|InnerStruct
modifier|...
name|items
parameter_list|)
block|{
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|InnerStruct
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|BytesWritable
name|bytes
parameter_list|(
name|int
modifier|...
name|items
parameter_list|)
block|{
name|BytesWritable
name|result
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|result
operator|.
name|setSize
argument_list|(
name|items
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|getBytes
argument_list|()
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|items
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|bytesArray
parameter_list|(
name|int
modifier|...
name|items
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|items
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|items
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|ByteBuffer
name|byteBuf
parameter_list|(
name|int
modifier|...
name|items
parameter_list|)
block|{
name|ByteBuffer
name|result
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|items
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|item
range|:
name|items
control|)
block|{
name|result
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|item
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testCaseName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestVectorOrcFile."
operator|+
name|testCaseName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|".orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadFormat_0_11
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|oldFilePath
init|=
operator|new
name|Path
argument_list|(
name|HiveTestUtils
operator|.
name|getFileFromClasspath
argument_list|(
literal|"orc-file-11-format.orc"
argument_list|)
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|oldFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|stripeCount
init|=
literal|0
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|long
name|currentOffset
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|stripeCount
operator|+=
literal|1
expr_stmt|;
name|rowCount
operator|+=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentOffset
operator|<
literal|0
condition|)
block|{
name|currentOffset
operator|=
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
name|stripe
operator|.
name|getIndexLength
argument_list|()
operator|+
name|stripe
operator|.
name|getDataLength
argument_list|()
operator|+
name|stripe
operator|.
name|getFooterLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|currentOffset
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|currentOffset
operator|+=
name|stripe
operator|.
name|getIndexLength
argument_list|()
operator|+
name|stripe
operator|.
name|getDataLength
argument_list|()
operator|+
name|stripe
operator|.
name|getFooterLength
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stripeCount
argument_list|)
expr_stmt|;
comment|// check the stats
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|7500
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3750
argument_list|,
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getFalseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3750
argument_list|,
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getTrueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 7500 hasNull: true true: 3750"
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|3
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|3
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|3
index|]
operator|)
operator|.
name|isSumDefined
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11520000
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|3
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 7500 hasNull: true min: 1024 max: 2048 sum: 11520000"
argument_list|,
name|stats
index|[
literal|3
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|5
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|5
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|5
index|]
operator|)
operator|.
name|isSumDefined
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 7500 hasNull: true min: 9223372036854775807 max: 9223372036854775807"
argument_list|,
name|stats
index|[
literal|5
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|15.0
argument_list|,
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|stats
index|[
literal|7
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5.0
argument_list|,
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|stats
index|[
literal|7
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|75000.0
argument_list|,
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|stats
index|[
literal|7
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 7500 hasNull: true min: -15.0 max: -5.0 sum: -75000.0"
argument_list|,
name|stats
index|[
literal|7
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 7500 hasNull: true min: bye max: hi sum: 0"
argument_list|,
name|stats
index|[
literal|9
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the inspectors
name|StructObjectInspector
name|readerInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|reader
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
argument_list|,
name|readerInspector
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<boolean1:boolean,byte1:tinyint,short1:smallint,"
operator|+
literal|"int1:int,long1:bigint,float1:float,double1:double,bytes1:"
operator|+
literal|"binary,string1:string,middle:struct<list:array<struct<int1:int,"
operator|+
literal|"string1:string>>>,list:array<struct<int1:int,string1:string>>,"
operator|+
literal|"map:map<string,struct<int1:int,string1:string>>,ts:timestamp,"
operator|+
literal|"decimal1:decimal(38,18)>"
argument_list|,
name|readerInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|readerInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|BooleanObjectInspector
name|bo
init|=
operator|(
name|BooleanObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"boolean1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|ByteObjectInspector
name|by
init|=
operator|(
name|ByteObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"byte1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|ShortObjectInspector
name|sh
init|=
operator|(
name|ShortObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"short1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|IntObjectInspector
name|in
init|=
operator|(
name|IntObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"int1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|LongObjectInspector
name|lo
init|=
operator|(
name|LongObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"long1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|FloatObjectInspector
name|fl
init|=
operator|(
name|FloatObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"float1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|DoubleObjectInspector
name|dbl
init|=
operator|(
name|DoubleObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"double1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|BinaryObjectInspector
name|bi
init|=
operator|(
name|BinaryObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"bytes1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StringObjectInspector
name|st
init|=
operator|(
name|StringObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"string1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|mid
init|=
operator|(
name|StructObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"middle"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|midFields
init|=
name|mid
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|ListObjectInspector
name|midli
init|=
operator|(
name|ListObjectInspector
operator|)
name|midFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inner
init|=
operator|(
name|StructObjectInspector
operator|)
name|midli
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|inFields
init|=
name|inner
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|ListObjectInspector
name|li
init|=
operator|(
name|ListObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"list"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|MapObjectInspector
name|ma
init|=
operator|(
name|MapObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"map"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|TimestampObjectInspector
name|tso
init|=
operator|(
name|TimestampObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|HiveDecimalObjectInspector
name|dco
init|=
operator|(
name|HiveDecimalObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"decimal1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StringObjectInspector
name|mk
init|=
operator|(
name|StringObjectInspector
operator|)
name|ma
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|Object
name|row
init|=
name|rows
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
comment|// check the contents of the first row
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bo
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|by
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|sh
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|65536
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|lo
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|fl
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|15.0
argument_list|,
name|dbl
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|bi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|midRow
init|=
name|midli
operator|.
name|getList
argument_list|(
name|mid
operator|.
name|getStructFieldData
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|,
name|midFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|midRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|midRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bye"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sigh"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|li
operator|.
name|getList
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"good"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|ma
operator|.
name|getMap
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2000-03-12 15:00:00"
argument_list|)
argument_list|,
name|tso
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"12345678.6547456"
argument_list|)
argument_list|,
name|dco
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|13
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the contents of second row
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|.
name|seekToRow
argument_list|(
literal|7499
argument_list|)
expr_stmt|;
name|row
operator|=
name|rows
operator|.
name|next
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bo
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|by
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|sh
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|65536
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|lo
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|fl
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5.0
argument_list|,
name|dbl
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|()
argument_list|,
name|bi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bye"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|midRow
operator|=
name|midli
operator|.
name|getList
argument_list|(
name|mid
operator|.
name|getStructFieldData
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|,
name|midFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|midRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|midRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bye"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sigh"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|li
operator|.
name|getList
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100000000
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|100000
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hat"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|ma
operator|.
name|getMap
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|found
init|=
operator|new
name|boolean
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|str
init|=
name|mk
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|equals
argument_list|(
literal|"chani"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|found
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|found
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|str
operator|.
name|equals
argument_list|(
literal|"mauddib"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|found
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|found
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown key "
operator|+
name|str
argument_list|)
throw|;
block|}
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|found
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|found
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2000-03-12 15:00:01"
argument_list|)
argument_list|,
name|tso
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"12345678.6547457"
argument_list|)
argument_list|,
name|dco
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|13
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// handle the close up
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestVectorOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createTimestamp
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
operator|.
name|version
argument_list|(
name|Version
operator|.
name|V_0_11
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Timestamp
argument_list|>
name|tslist
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2037-01-01 00:00:00.000999"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2003-01-01 00:00:00.000000222"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1999-01-01 00:00:00.999999999"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1995-01-01 00:00:00.688888888"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2002-01-01 00:00:00.1"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2010-03-02 00:00:00.000009001"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2005-01-01 00:00:00.000002229"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2006-01-01 00:00:00.900203003"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2003-01-01 00:00:00.800000007"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1996-08-02 00:00:00.723100809"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1998-11-02 00:00:00.857340643"
argument_list|)
argument_list|)
expr_stmt|;
name|tslist
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2008-10-02 00:00:00"
argument_list|)
argument_list|)
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|LongColumnVector
name|vec
init|=
operator|new
name|LongColumnVector
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|vec
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|tslist
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tslist
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Timestamp
name|ts
init|=
name|tslist
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|vec
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|row
init|=
name|rows
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tslist
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
operator|.
name|getNanos
argument_list|()
argument_list|,
operator|(
operator|(
name|TimestampWritable
operator|)
name|row
operator|)
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|tslist
operator|.
name|size
argument_list|()
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|writer
operator|.
name|getSchema
argument_list|()
operator|.
name|getMaximumId
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|expected
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
decl_stmt|;
name|boolean
index|[]
name|included
init|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|""
argument_list|,
name|writer
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringAndBinaryStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"bytes1"
argument_list|,
name|TypeDescription
operator|.
name|createBinary
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"string1"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|4
expr_stmt|;
name|BytesColumnVector
name|field1
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|BytesColumnVector
name|field2
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|field1
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|bytesArray
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|field1
operator|.
name|setVal
argument_list|(
literal|1
argument_list|,
name|bytesArray
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|field1
operator|.
name|setVal
argument_list|(
literal|2
argument_list|,
name|bytesArray
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|field1
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|field1
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|field2
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|field2
operator|.
name|setVal
argument_list|(
literal|1
argument_list|,
literal|"bar"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|field2
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|field2
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|field2
operator|.
name|setVal
argument_list|(
literal|3
argument_list|,
literal|"hi"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|schema
operator|=
name|writer
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getMaximumId
argument_list|()
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
index|[]
name|expected
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|}
decl_stmt|;
name|boolean
index|[]
name|included
init|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|"string1"
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
expr_stmt|;
name|included
operator|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|""
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
expr_stmt|;
name|included
operator|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|null
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the stats
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 4 hasNull: false"
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
operator|(
operator|(
name|BinaryColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 3 hasNull: true sum: 15"
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
index|[
literal|2
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 3 hasNull: true min: bar max: hi sum: 8"
argument_list|,
name|stats
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the inspectors
name|StructObjectInspector
name|readerInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|reader
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
argument_list|,
name|readerInspector
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<bytes1:binary,string1:string>"
argument_list|,
name|readerInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|readerInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|BinaryObjectInspector
name|bi
init|=
operator|(
name|BinaryObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"bytes1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StringObjectInspector
name|st
init|=
operator|(
name|StringObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"string1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|Object
name|row
init|=
name|rows
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
comment|// check the contents of the first row
name|assertEquals
argument_list|(
name|bytes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|bi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the contents of second row
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|bi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the contents of third row
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|bi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the contents of fourth row
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// handle the close up
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStripeLevelStats
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"int1"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"string1"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1000
expr_stmt|;
name|LongColumnVector
name|field1
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|BytesColumnVector
name|field2
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|field1
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|field2
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
literal|11
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
name|b
operator|>=
literal|5
condition|)
block|{
if|if
condition|(
name|b
operator|>=
literal|10
condition|)
block|{
name|field1
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|3
expr_stmt|;
name|field2
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"three"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|field1
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|2
expr_stmt|;
name|field2
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"two"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|field1
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|field2
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"one"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|schema
operator|=
name|writer
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schema
operator|.
name|getMaximumId
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|expected
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|}
decl_stmt|;
name|boolean
index|[]
name|included
init|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|"int1"
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StripeStatistics
argument_list|>
name|stats
init|=
name|reader
operator|.
name|getStripeStatistics
argument_list|()
decl_stmt|;
name|int
name|numStripes
init|=
name|stats
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|numStripes
argument_list|)
expr_stmt|;
name|StripeStatistics
name|ss1
init|=
name|stats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StripeStatistics
name|ss2
init|=
name|stats
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|StripeStatistics
name|ss3
init|=
name|stats
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|ss1
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|0
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|ss2
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|0
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|ss3
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|0
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
operator|(
name|ss1
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
operator|(
name|ss2
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
operator|(
name|ss3
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss1
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss2
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss3
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss1
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss2
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss3
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss1
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss2
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3000
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss3
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
operator|(
name|ss1
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
operator|(
name|ss2
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
operator|(
name|ss3
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|ss1
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|ss2
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"three"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|ss3
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|ss1
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|ss2
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"three"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|ss3
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|ss1
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|ss2
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|ss3
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReaderImpl
name|recordReader
init|=
operator|(
name|RecordReaderImpl
operator|)
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|RowIndex
index|[]
name|index
init|=
name|recordReader
operator|.
name|readRowIndex
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getRowGroupIndex
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|index
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcProto
operator|.
name|RowIndexEntry
argument_list|>
name|items
init|=
name|index
index|[
literal|1
index|]
operator|.
name|getEntryList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPositionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPositions
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPositions
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPositions
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatistics
argument_list|()
operator|.
name|getIntStatistics
argument_list|()
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
name|recordReader
operator|.
name|readRowIndex
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getRowGroupIndex
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|index
operator|.
name|length
argument_list|)
expr_stmt|;
name|items
operator|=
name|index
index|[
literal|1
index|]
operator|.
name|getEntryList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatistics
argument_list|()
operator|.
name|getIntStatistics
argument_list|()
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setInner
parameter_list|(
name|StructColumnVector
name|inner
parameter_list|,
name|int
name|rowId
parameter_list|,
name|int
name|i
parameter_list|,
name|String
name|value
parameter_list|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|inner
operator|.
name|fields
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|inner
operator|.
name|fields
index|[
literal|1
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|rowId
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inner
operator|.
name|fields
index|[
literal|1
index|]
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|inner
operator|.
name|fields
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setInnerList
parameter_list|(
name|ListColumnVector
name|list
parameter_list|,
name|int
name|rowId
parameter_list|,
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|list
operator|.
name|childCount
operator|+
name|value
operator|.
name|size
argument_list|()
operator|>
name|list
operator|.
name|child
operator|.
name|isNull
operator|.
name|length
condition|)
block|{
name|list
operator|.
name|child
operator|.
name|ensureSize
argument_list|(
name|list
operator|.
name|childCount
operator|*
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|lengths
index|[
name|rowId
index|]
operator|=
name|value
operator|.
name|size
argument_list|()
expr_stmt|;
name|list
operator|.
name|offsets
index|[
name|rowId
index|]
operator|=
name|list
operator|.
name|childCount
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|lengths
index|[
name|rowId
index|]
condition|;
operator|++
name|i
control|)
block|{
name|InnerStruct
name|inner
init|=
name|value
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|setInner
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|list
operator|.
name|child
argument_list|,
name|i
operator|+
name|list
operator|.
name|childCount
argument_list|,
name|inner
operator|.
name|int1
argument_list|,
name|inner
operator|.
name|string1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|childCount
operator|+=
name|value
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|list
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setInnerMap
parameter_list|(
name|MapColumnVector
name|map
parameter_list|,
name|int
name|rowId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InnerStruct
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|childCount
operator|>=
name|map
operator|.
name|keys
operator|.
name|isNull
operator|.
name|length
condition|)
block|{
name|map
operator|.
name|keys
operator|.
name|ensureSize
argument_list|(
name|map
operator|.
name|childCount
operator|*
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|map
operator|.
name|values
operator|.
name|ensureSize
argument_list|(
name|map
operator|.
name|childCount
operator|*
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|lengths
index|[
name|rowId
index|]
operator|=
name|value
operator|.
name|size
argument_list|()
expr_stmt|;
name|int
name|offset
init|=
name|map
operator|.
name|childCount
decl_stmt|;
name|map
operator|.
name|offsets
index|[
name|rowId
index|]
operator|=
name|offset
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InnerStruct
argument_list|>
name|entry
range|:
name|value
operator|.
name|entrySet
argument_list|()
control|)
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|map
operator|.
name|keys
operator|)
operator|.
name|setVal
argument_list|(
name|offset
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|InnerStruct
name|inner
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|setInner
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|map
operator|.
name|values
argument_list|,
name|offset
argument_list|,
name|inner
operator|.
name|int1
argument_list|,
name|inner
operator|.
name|string1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|1
expr_stmt|;
block|}
name|map
operator|.
name|childCount
operator|=
name|offset
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|map
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setMiddleStruct
parameter_list|(
name|StructColumnVector
name|middle
parameter_list|,
name|int
name|rowId
parameter_list|,
name|MiddleStruct
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|setInnerList
argument_list|(
operator|(
name|ListColumnVector
operator|)
name|middle
operator|.
name|fields
index|[
literal|0
index|]
argument_list|,
name|rowId
argument_list|,
name|value
operator|.
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|middle
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|middle
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setBigRow
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|rowId
parameter_list|,
name|Boolean
name|b1
parameter_list|,
name|Byte
name|b2
parameter_list|,
name|Short
name|s1
parameter_list|,
name|Integer
name|i1
parameter_list|,
name|Long
name|l1
parameter_list|,
name|Float
name|f1
parameter_list|,
name|Double
name|d1
parameter_list|,
name|BytesWritable
name|b3
parameter_list|,
name|String
name|s2
parameter_list|,
name|MiddleStruct
name|m1
parameter_list|,
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|l2
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InnerStruct
argument_list|>
name|m2
parameter_list|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|b1
condition|?
literal|1
else|:
literal|0
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|b2
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|s1
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|i1
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|4
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|l1
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|5
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|f1
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|6
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|d1
expr_stmt|;
if|if
condition|(
name|b3
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|7
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|rowId
argument_list|,
name|b3
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b3
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|batch
operator|.
name|cols
index|[
literal|7
index|]
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|7
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|8
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|rowId
argument_list|,
name|s2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|batch
operator|.
name|cols
index|[
literal|8
index|]
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|8
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
name|setMiddleStruct
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|9
index|]
argument_list|,
name|rowId
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|setInnerList
argument_list|(
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|10
index|]
argument_list|,
name|rowId
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|setInnerMap
argument_list|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|11
index|]
argument_list|,
name|rowId
argument_list|,
name|m2
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|TypeDescription
name|createInnerSchema
parameter_list|()
block|{
return|return
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"int1"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"string1"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TypeDescription
name|createBigRowSchema
parameter_list|()
block|{
return|return
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"boolean1"
argument_list|,
name|TypeDescription
operator|.
name|createBoolean
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"byte1"
argument_list|,
name|TypeDescription
operator|.
name|createByte
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"short1"
argument_list|,
name|TypeDescription
operator|.
name|createShort
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"int1"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"long1"
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"float1"
argument_list|,
name|TypeDescription
operator|.
name|createFloat
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"double1"
argument_list|,
name|TypeDescription
operator|.
name|createDouble
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"bytes1"
argument_list|,
name|TypeDescription
operator|.
name|createBinary
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"string1"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"middle"
argument_list|,
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"list"
argument_list|,
name|TypeDescription
operator|.
name|createList
argument_list|(
name|createInnerSchema
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"list"
argument_list|,
name|TypeDescription
operator|.
name|createList
argument_list|(
name|createInnerSchema
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"map"
argument_list|,
name|TypeDescription
operator|.
name|createMap
argument_list|(
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|,
name|createInnerSchema
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|void
name|assertArrayEquals
parameter_list|(
name|boolean
index|[]
name|expected
parameter_list|,
name|boolean
index|[]
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|diff
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|expected
index|[
name|i
index|]
operator|!=
name|actual
index|[
name|i
index|]
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Difference at "
operator|+
name|i
operator|+
literal|" expected: "
operator|+
name|expected
index|[
name|i
index|]
operator|+
literal|" actual: "
operator|+
name|actual
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|diff
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test1
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createBigRowSchema
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|2
expr_stmt|;
name|setBigRow
argument_list|(
name|batch
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1024
argument_list|,
literal|65536
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|(
name|float
operator|)
literal|1.0
argument_list|,
operator|-
literal|15.0
argument_list|,
name|bytes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"hi"
argument_list|,
operator|new
name|MiddleStruct
argument_list|(
name|inner
argument_list|(
literal|1
argument_list|,
literal|"bye"
argument_list|)
argument_list|,
name|inner
argument_list|(
literal|2
argument_list|,
literal|"sigh"
argument_list|)
argument_list|)
argument_list|,
name|list
argument_list|(
name|inner
argument_list|(
literal|3
argument_list|,
literal|"good"
argument_list|)
argument_list|,
name|inner
argument_list|(
literal|4
argument_list|,
literal|"bad"
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|setBigRow
argument_list|(
name|batch
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
operator|(
name|byte
operator|)
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|2048
argument_list|,
literal|65536
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|,
operator|-
literal|5.0
argument_list|,
name|bytes
argument_list|()
argument_list|,
literal|"bye"
argument_list|,
operator|new
name|MiddleStruct
argument_list|(
name|inner
argument_list|(
literal|1
argument_list|,
literal|"bye"
argument_list|)
argument_list|,
name|inner
argument_list|(
literal|2
argument_list|,
literal|"sigh"
argument_list|)
argument_list|)
argument_list|,
name|list
argument_list|(
name|inner
argument_list|(
literal|100000000
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|inner
argument_list|(
operator|-
literal|100000
argument_list|,
literal|"in"
argument_list|)
argument_list|,
name|inner
argument_list|(
literal|1234
argument_list|,
literal|"hat"
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
name|inner
argument_list|(
literal|5
argument_list|,
literal|"chani"
argument_list|)
argument_list|,
name|inner
argument_list|(
literal|1
argument_list|,
literal|"mauddib"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|schema
operator|=
name|writer
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|schema
operator|.
name|getMaximumId
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|expected
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|boolean
index|[]
name|included
init|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|""
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
expr_stmt|;
name|included
operator|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|"boolean1,string1,middle,map"
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
expr_stmt|;
name|included
operator|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|"boolean1,string1,middle,map"
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
expr_stmt|;
name|included
operator|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|"boolean1,byte1,short1,int1,long1,float1,double1,bytes1,string1,middle,list,map"
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the stats
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getFalseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getTrueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 2 hasNull: false true: 1"
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|3
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|3
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|3
index|]
operator|)
operator|.
name|isSumDefined
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3072
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|3
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 2 hasNull: false min: 1024 max: 2048 sum: 3072"
argument_list|,
name|stats
index|[
literal|3
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StripeStatistics
name|ss
init|=
name|reader
operator|.
name|getStripeStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ss
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|0
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|ss
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTrueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|3
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|3
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3072
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|ss
operator|.
name|getColumnStatistics
argument_list|()
index|[
literal|3
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|15.0
argument_list|,
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|stats
index|[
literal|7
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5.0
argument_list|,
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|stats
index|[
literal|7
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20.0
argument_list|,
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|stats
index|[
literal|7
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 2 hasNull: false min: -15.0 max: -5.0 sum: -20.0"
argument_list|,
name|stats
index|[
literal|7
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 2 hasNull: false min: bye max: hi sum: 5"
argument_list|,
name|stats
index|[
literal|9
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the inspectors
name|StructObjectInspector
name|readerInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|reader
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
argument_list|,
name|readerInspector
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<boolean1:boolean,byte1:tinyint,short1:smallint,"
operator|+
literal|"int1:int,long1:bigint,float1:float,double1:double,bytes1:"
operator|+
literal|"binary,string1:string,middle:struct<list:array<struct<int1:int,"
operator|+
literal|"string1:string>>>,list:array<struct<int1:int,string1:string>>,"
operator|+
literal|"map:map<string,struct<int1:int,string1:string>>>"
argument_list|,
name|readerInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|readerInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|BooleanObjectInspector
name|bo
init|=
operator|(
name|BooleanObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"boolean1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|ByteObjectInspector
name|by
init|=
operator|(
name|ByteObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"byte1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|ShortObjectInspector
name|sh
init|=
operator|(
name|ShortObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"short1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|IntObjectInspector
name|in
init|=
operator|(
name|IntObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"int1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|LongObjectInspector
name|lo
init|=
operator|(
name|LongObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"long1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|FloatObjectInspector
name|fl
init|=
operator|(
name|FloatObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"float1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|DoubleObjectInspector
name|dbl
init|=
operator|(
name|DoubleObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"double1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|BinaryObjectInspector
name|bi
init|=
operator|(
name|BinaryObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"bytes1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StringObjectInspector
name|st
init|=
operator|(
name|StringObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"string1"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|mid
init|=
operator|(
name|StructObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"middle"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|midFields
init|=
name|mid
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|ListObjectInspector
name|midli
init|=
operator|(
name|ListObjectInspector
operator|)
name|midFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inner
init|=
operator|(
name|StructObjectInspector
operator|)
name|midli
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|inFields
init|=
name|inner
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|ListObjectInspector
name|li
init|=
operator|(
name|ListObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"list"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|MapObjectInspector
name|ma
init|=
operator|(
name|MapObjectInspector
operator|)
name|readerInspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"map"
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StringObjectInspector
name|mk
init|=
operator|(
name|StringObjectInspector
operator|)
name|ma
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|Object
name|row
init|=
name|rows
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
comment|// check the contents of the first row
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bo
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|by
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|sh
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|65536
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|lo
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|fl
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|15.0
argument_list|,
name|dbl
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|bi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|midRow
init|=
name|midli
operator|.
name|getList
argument_list|(
name|mid
operator|.
name|getStructFieldData
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|,
name|midFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|midRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|midRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bye"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sigh"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|li
operator|.
name|getList
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"good"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|ma
operator|.
name|getMap
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the contents of second row
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bo
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|by
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|sh
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|65536
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|lo
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|fl
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5.0
argument_list|,
name|dbl
operator|.
name|get
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|()
argument_list|,
name|bi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bye"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|midRow
operator|=
name|midli
operator|.
name|getList
argument_list|(
name|mid
operator|.
name|getStructFieldData
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|,
name|midFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|midRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|midRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bye"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sigh"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|midRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|li
operator|.
name|getList
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100000000
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|100000
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hat"
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|ma
operator|.
name|getMap
argument_list|(
name|readerInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|found
init|=
operator|new
name|boolean
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|str
init|=
name|mk
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|equals
argument_list|(
literal|"chani"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|found
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|found
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|str
operator|.
name|equals
argument_list|(
literal|"mauddib"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|found
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|st
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|found
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown key "
operator|+
name|str
argument_list|)
throw|;
block|}
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|found
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|found
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// handle the close up
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnProjection
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createInnerSchema
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|100
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|Random
name|r1
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Random
name|r2
init|=
operator|new
name|Random
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|x
decl_stmt|;
name|int
name|minInt
init|=
literal|0
decl_stmt|,
name|maxInt
init|=
literal|0
decl_stmt|;
name|String
name|y
decl_stmt|;
name|String
name|minStr
init|=
literal|null
decl_stmt|,
name|maxStr
init|=
literal|null
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1000
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
literal|21
condition|;
operator|++
name|b
control|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1000
condition|;
operator|++
name|r
control|)
block|{
name|x
operator|=
name|r1
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|y
operator|=
name|Long
operator|.
name|toHexString
argument_list|(
name|r2
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|||
name|x
operator|<
name|minInt
condition|)
block|{
name|minInt
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|||
name|x
operator|>
name|maxInt
condition|)
block|{
name|maxInt
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|||
name|y
operator|.
name|compareTo
argument_list|(
name|minStr
argument_list|)
operator|<
literal|0
condition|)
block|{
name|minStr
operator|=
name|y
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|||
name|y
operator|.
name|compareTo
argument_list|(
name|maxStr
argument_list|)
operator|>
literal|0
condition|)
block|{
name|maxStr
operator|=
name|y
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|x
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|y
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
comment|// check out the statistics
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnStatistics
name|s
range|:
name|stats
control|)
block|{
name|assertEquals
argument_list|(
literal|21000
argument_list|,
name|s
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|instanceof
name|IntegerColumnStatistics
condition|)
block|{
name|assertEquals
argument_list|(
name|minInt
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|s
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxInt
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|s
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|instanceof
name|StringColumnStatistics
condition|)
block|{
name|assertEquals
argument_list|(
name|maxStr
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|s
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minStr
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|s
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check out the types
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
init|=
name|reader
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubtypesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubtypes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSubtypesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRING
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getSubtypesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// read the contents and make sure they match
name|RecordReader
name|rows1
init|=
name|reader
operator|.
name|rows
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|}
argument_list|)
decl_stmt|;
name|RecordReader
name|rows2
init|=
name|reader
operator|.
name|rows
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|r1
operator|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|r2
operator|=
operator|new
name|Random
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|OrcStruct
name|row1
init|=
literal|null
decl_stmt|;
name|OrcStruct
name|row2
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21000
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows1
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row1
operator|=
operator|(
name|OrcStruct
operator|)
name|rows1
operator|.
name|next
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|row2
operator|=
operator|(
name|OrcStruct
operator|)
name|rows2
operator|.
name|next
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|nextInt
argument_list|()
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|row1
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|r2
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|row2
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows1
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|rows1
operator|.
name|close
argument_list|()
expr_stmt|;
name|rows2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createBigRowSchema
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|rows
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|,
name|reader
operator|.
name|getCompression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|getCompressionSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|getMetadataKeys
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|reader
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|getStripes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|metaData
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createBigRowSchema
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addUserMetadata
argument_list|(
literal|"my.meta"
argument_list|,
name|byteBuf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
literal|127
argument_list|,
operator|-
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addUserMetadata
argument_list|(
literal|"clobber"
argument_list|,
name|byteBuf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addUserMetadata
argument_list|(
literal|"clobber"
argument_list|,
name|byteBuf
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bigBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|40000
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|bigBuf
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addUserMetadata
argument_list|(
literal|"big"
argument_list|,
name|bigBuf
argument_list|)
expr_stmt|;
name|bigBuf
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1
expr_stmt|;
name|setBigRow
argument_list|(
name|batch
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
operator|(
name|byte
operator|)
literal|127
argument_list|,
operator|(
name|short
operator|)
literal|1024
argument_list|,
literal|42
argument_list|,
literal|42L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
operator|(
name|float
operator|)
literal|3.1415
argument_list|,
operator|-
literal|2.713
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addUserMetadata
argument_list|(
literal|"clobber"
argument_list|,
name|byteBuf
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|,
literal|11
argument_list|,
literal|13
argument_list|,
literal|17
argument_list|,
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|byteBuf
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|,
literal|11
argument_list|,
literal|13
argument_list|,
literal|17
argument_list|,
literal|19
argument_list|)
argument_list|,
name|reader
operator|.
name|getMetadataValue
argument_list|(
literal|"clobber"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byteBuf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
literal|127
argument_list|,
operator|-
literal|128
argument_list|)
argument_list|,
name|reader
operator|.
name|getMetadataValue
argument_list|(
literal|"my.meta"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bigBuf
argument_list|,
name|reader
operator|.
name|getMetadataValue
argument_list|(
literal|"big"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|getMetadataValue
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// PASS
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|reader
operator|.
name|getMetadataKeys
argument_list|()
control|)
block|{
if|if
condition|(
literal|"my.meta"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
literal|"clobber"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
literal|"big"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|i
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown key "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|int
name|numStripes
init|=
name|reader
operator|.
name|getStripeStatistics
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numStripes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generate an ORC file with a range of dates and times.    */
specifier|public
name|void
name|createOrcDateFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|int
name|minYear
parameter_list|,
name|int
name|maxYear
parameter_list|)
throws|throws
name|IOException
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"time"
argument_list|,
name|TypeDescription
operator|.
name|createTimestamp
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"date"
argument_list|,
name|TypeDescription
operator|.
name|createDate
argument_list|()
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|file
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1000
expr_stmt|;
for|for
control|(
name|int
name|year
init|=
name|minYear
init|;
name|year
operator|<
name|maxYear
condition|;
operator|++
name|year
control|)
block|{
for|for
control|(
name|int
name|ms
init|=
literal|1000
init|;
name|ms
operator|<
literal|2000
condition|;
operator|++
name|ms
control|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|ms
operator|-
literal|1000
index|]
operator|=
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|year
operator|+
literal|"-05-05 12:34:56."
operator|+
name|ms
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
name|ms
operator|-
literal|1000
index|]
operator|=
operator|new
name|DateWritable
argument_list|(
operator|new
name|Date
argument_list|(
name|year
operator|-
literal|1900
argument_list|,
literal|11
argument_list|,
literal|25
argument_list|)
argument_list|)
operator|.
name|getDays
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|file
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|year
init|=
name|minYear
init|;
name|year
operator|<
name|maxYear
condition|;
operator|++
name|year
control|)
block|{
for|for
control|(
name|int
name|ms
init|=
literal|1000
init|;
name|ms
operator|<
literal|2000
condition|;
operator|++
name|ms
control|)
block|{
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|year
operator|+
literal|"-05-05 12:34:56."
operator|+
name|ms
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DateWritable
argument_list|(
operator|new
name|Date
argument_list|(
name|year
operator|-
literal|1900
argument_list|,
literal|11
argument_list|,
literal|25
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDate1900
parameter_list|()
throws|throws
name|Exception
block|{
name|createOrcDateFile
argument_list|(
name|testFilePath
argument_list|,
literal|1900
argument_list|,
literal|1970
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDate2038
parameter_list|()
throws|throws
name|Exception
block|{
name|createOrcDateFile
argument_list|(
name|testFilePath
argument_list|,
literal|2038
argument_list|,
literal|2250
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setUnion
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|rowId
parameter_list|,
name|Timestamp
name|ts
parameter_list|,
name|Integer
name|tag
parameter_list|,
name|Integer
name|i
parameter_list|,
name|String
name|s
parameter_list|,
name|HiveDecimalWritable
name|dec
parameter_list|)
block|{
name|UnionColumnVector
name|union
init|=
operator|(
name|UnionColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
name|union
operator|.
name|tags
index|[
name|rowId
index|]
operator|=
name|tag
expr_stmt|;
if|if
condition|(
name|tag
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|union
operator|.
name|fields
index|[
name|tag
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|i
expr_stmt|;
block|}
else|else
block|{
name|union
operator|.
name|fields
index|[
name|tag
index|]
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|union
operator|.
name|fields
index|[
name|tag
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|union
operator|.
name|fields
index|[
name|tag
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|rowId
argument_list|,
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|union
operator|.
name|fields
index|[
name|tag
index|]
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|union
operator|.
name|fields
index|[
name|tag
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad tag "
operator|+
name|tag
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|dec
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
name|dec
expr_stmt|;
block|}
else|else
block|{
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * We test union, timestamp, and decimal separately since we need to make the      * object inspector manually. (The Hive reflection-based doesn't handle      * them properly.)      */
annotation|@
name|Test
specifier|public
name|void
name|testUnionAndTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"time"
argument_list|,
name|TypeDescription
operator|.
name|createTimestamp
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"union"
argument_list|,
name|TypeDescription
operator|.
name|createUnion
argument_list|()
operator|.
name|addUnionChild
argument_list|(
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addUnionChild
argument_list|(
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"decimal"
argument_list|,
name|TypeDescription
operator|.
name|createDecimal
argument_list|()
operator|.
name|withPrecision
argument_list|(
literal|38
argument_list|)
operator|.
name|withScale
argument_list|(
literal|18
argument_list|)
argument_list|)
decl_stmt|;
name|HiveDecimal
name|maxValue
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"10000000000000000000"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|100
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|6
expr_stmt|;
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|0
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2000-03-12 15:00:00"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|42
argument_list|,
literal|null
argument_list|,
operator|new
name|HiveDecimalWritable
argument_list|(
literal|"12345678.6547456"
argument_list|)
argument_list|)
expr_stmt|;
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|1
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2000-03-20 12:00:00.123456789"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|"hello"
argument_list|,
operator|new
name|HiveDecimalWritable
argument_list|(
literal|"-5643.234"
argument_list|)
argument_list|)
expr_stmt|;
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|5
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|200000
argument_list|,
literal|null
argument_list|,
operator|new
name|HiveDecimalWritable
argument_list|(
literal|"10000000000000000000"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1970
init|;
name|i
operator|<
literal|2038
condition|;
operator|++
name|i
control|)
block|{
name|Timestamp
name|ts
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|"-05-05 12:34:56."
operator|+
name|i
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|64
argument_list|,
name|rand
argument_list|)
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|18
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
block|{
name|setUnion
argument_list|(
name|batch
argument_list|,
name|batch
operator|.
name|size
operator|++
argument_list|,
name|ts
argument_list|,
literal|0
argument_list|,
name|i
operator|*
name|i
argument_list|,
literal|null
argument_list|,
operator|new
name|HiveDecimalWritable
argument_list|(
name|dec
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setUnion
argument_list|(
name|batch
argument_list|,
name|batch
operator|.
name|size
operator|++
argument_list|,
name|ts
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|*
name|i
argument_list|)
argument_list|,
operator|new
name|HiveDecimalWritable
argument_list|(
name|dec
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxValue
operator|.
name|compareTo
argument_list|(
name|dec
argument_list|)
operator|<
literal|0
condition|)
block|{
name|maxValue
operator|=
name|dec
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// let's add a lot of constant rows to test the rle
name|batch
operator|.
name|size
operator|=
literal|1000
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|batch
operator|.
name|cols
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|setRepeating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|1732050807
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setUnion
argument_list|(
name|batch
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|138
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|schema
operator|=
name|writer
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|schema
operator|.
name|getMaximumId
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|expected
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|boolean
index|[]
name|included
init|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|""
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|}
expr_stmt|;
name|included
operator|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|"time,decimal"
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|}
expr_stmt|;
name|included
operator|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
literal|"union"
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|included
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|getMetadataKeys
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5077
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|DecimalColumnStatistics
name|stats
init|=
operator|(
name|DecimalColumnStatistics
operator|)
name|reader
operator|.
name|getStatistics
argument_list|()
index|[
literal|5
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|71
argument_list|,
name|stats
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-5643.234"
argument_list|)
argument_list|,
name|stats
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxValue
argument_list|,
name|stats
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: fix this
comment|//    assertEquals(null,stats.getSum());
name|int
name|stripeCount
init|=
literal|0
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|long
name|currentOffset
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|stripeCount
operator|+=
literal|1
expr_stmt|;
name|rowCount
operator|+=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentOffset
operator|<
literal|0
condition|)
block|{
name|currentOffset
operator|=
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
name|stripe
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|currentOffset
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|currentOffset
operator|+=
name|stripe
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stripeCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reader
operator|.
name|getContentLength
argument_list|()
argument_list|,
name|currentOffset
argument_list|)
expr_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|rows
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|OrcStruct
name|row
init|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectInspector
name|inspector
init|=
name|reader
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"struct<time:timestamp,union:uniontype<int,string>,decimal:decimal(38,18)>"
argument_list|,
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2000-03-12 15:00:00"
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|OrcUnion
name|union
init|=
operator|(
name|OrcUnion
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|union
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|42
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"12345678.6547456"
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2000-03-20 12:00:00.123456789"
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|union
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-5643.234"
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|union
operator|=
operator|(
name|OrcUnion
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|union
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|union
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|200000
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"10000000000000000000"
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1970
init|;
name|i
operator|<
literal|2038
condition|;
operator|++
name|i
control|)
block|{
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|"-05-05 12:34:56."
operator|+
name|i
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|union
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
operator|*
name|i
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|union
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|*
name|i
argument_list|)
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|64
argument_list|,
name|rand
argument_list|)
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|18
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
operator|++
name|i
control|)
block|{
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1732050807
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|10
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|138
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|rows
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|.
name|seekToRow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2000-03-20 12:00:00.123456789"
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|union
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-5643.234"
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Read and write a randomly generated snappy file.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSnappy
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createInnerSchema
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|SNAPPY
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1000
expr_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
literal|10
condition|;
operator|++
name|b
control|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1000
condition|;
operator|++
name|r
control|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Read and write a randomly generated snappy file.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWithoutIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createInnerSchema
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|5000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|SNAPPY
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|24
argument_list|)
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|5
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|batch
operator|.
name|cols
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|setRepeating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|toBinaryString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|50000
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|getRowIndexStride
argument_list|()
argument_list|)
expr_stmt|;
name|StripeInformation
name|stripe
init|=
name|reader
operator|.
name|getStripes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|stripe
operator|.
name|getDataLength
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stripe
operator|.
name|getIndexLength
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|int
name|intVal
init|=
name|rand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|strVal
init|=
name|Integer
operator|.
name|toBinaryString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|intVal
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|strVal
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createBigRowSchema
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|200000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|65536
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
specifier|final
name|int
name|COUNT
init|=
literal|32768
decl_stmt|;
name|long
index|[]
name|intValues
init|=
operator|new
name|long
index|[
name|COUNT
index|]
decl_stmt|;
name|double
index|[]
name|doubleValues
init|=
operator|new
name|double
index|[
name|COUNT
index|]
decl_stmt|;
name|String
index|[]
name|stringValues
init|=
operator|new
name|String
index|[
name|COUNT
index|]
decl_stmt|;
name|BytesWritable
index|[]
name|byteValues
init|=
operator|new
name|BytesWritable
index|[
name|COUNT
index|]
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[
literal|128
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|words
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|intValues
index|[
literal|2
operator|*
name|i
index|]
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
name|intValues
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
operator|=
name|intValues
index|[
literal|2
operator|*
name|i
index|]
expr_stmt|;
name|stringValues
index|[
literal|2
operator|*
name|i
index|]
operator|=
name|words
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|words
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
name|stringValues
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
operator|=
name|stringValues
index|[
literal|2
operator|*
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
operator|++
name|i
control|)
block|{
name|doubleValues
index|[
name|i
index|]
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|20
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|byteValues
index|[
name|i
index|]
operator|=
operator|new
name|BytesWritable
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
operator|++
name|i
control|)
block|{
name|appendRandomRow
argument_list|(
name|batch
argument_list|,
name|intValues
argument_list|,
name|doubleValues
argument_list|,
name|stringValues
argument_list|,
name|byteValues
argument_list|,
name|words
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
literal|1024
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|!=
literal|0
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|COUNT
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
comment|// get the row index
name|MetadataReader
name|meta
init|=
operator|(
operator|(
name|RecordReaderImpl
operator|)
name|rows
operator|)
operator|.
name|getMetadataReader
argument_list|()
decl_stmt|;
name|RecordReaderImpl
operator|.
name|Index
name|index
init|=
name|meta
operator|.
name|readRowIndex
argument_list|(
name|reader
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// check the primitive columns to make sure they have the right number of
comment|// items in the first row group
for|for
control|(
name|int
name|c
init|=
literal|1
init|;
name|c
operator|<
literal|9
condition|;
operator|++
name|c
control|)
block|{
name|OrcProto
operator|.
name|RowIndex
name|colIndex
init|=
name|index
operator|.
name|getRowGroupIndex
argument_list|()
index|[
name|c
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|colIndex
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatistics
argument_list|()
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|COUNT
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|rows
operator|.
name|seekToRow
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|BigRow
name|expected
init|=
name|createRandomRow
argument_list|(
name|intValues
argument_list|,
name|doubleValues
argument_list|,
name|stringValues
argument_list|,
name|byteValues
argument_list|,
name|words
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|boolean1
operator|.
name|booleanValue
argument_list|()
argument_list|,
operator|(
operator|(
name|BooleanWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|byte1
operator|.
name|byteValue
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|short1
operator|.
name|shortValue
argument_list|()
argument_list|,
operator|(
operator|(
name|ShortWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|int1
operator|.
name|intValue
argument_list|()
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|long1
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
operator|(
name|LongWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|float1
argument_list|,
operator|(
operator|(
name|FloatWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|5
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|double1
argument_list|,
operator|(
operator|(
name|DoubleWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|6
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|bytes1
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|string1
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|expectedList
init|=
name|expected
operator|.
name|middle
operator|.
name|list
decl_stmt|;
name|List
argument_list|<
name|OrcStruct
argument_list|>
name|actualList
init|=
call|(
name|List
argument_list|<
name|OrcStruct
argument_list|>
call|)
argument_list|(
operator|(
name|OrcStruct
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|9
argument_list|)
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|compareList
argument_list|(
name|expectedList
argument_list|,
name|actualList
argument_list|,
literal|"middle list "
operator|+
name|i
argument_list|)
expr_stmt|;
name|compareList
argument_list|(
name|expected
operator|.
name|list
argument_list|,
operator|(
name|List
argument_list|<
name|OrcStruct
argument_list|>
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"list "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|StripeInformation
argument_list|>
name|stripeIterator
init|=
name|reader
operator|.
name|getStripes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|offsetOfStripe2
init|=
literal|0
decl_stmt|;
name|long
name|offsetOfStripe4
init|=
literal|0
decl_stmt|;
name|long
name|lastRowOfStripe2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|StripeInformation
name|stripe
init|=
name|stripeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|2
condition|)
block|{
name|lastRowOfStripe2
operator|+=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
name|offsetOfStripe2
operator|=
name|stripe
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|lastRowOfStripe2
operator|+=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|4
condition|)
block|{
name|offsetOfStripe4
operator|=
name|stripe
operator|.
name|getOffset
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
index|[]
name|columns
init|=
operator|new
name|boolean
index|[
name|reader
operator|.
name|getStatistics
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|columns
index|[
literal|5
index|]
operator|=
literal|true
expr_stmt|;
comment|// long colulmn
name|columns
index|[
literal|9
index|]
operator|=
literal|true
expr_stmt|;
comment|// text column
name|rows
operator|=
name|reader
operator|.
name|rowsOptions
argument_list|(
operator|new
name|Reader
operator|.
name|Options
argument_list|()
operator|.
name|range
argument_list|(
name|offsetOfStripe2
argument_list|,
name|offsetOfStripe4
operator|-
name|offsetOfStripe2
argument_list|)
operator|.
name|include
argument_list|(
name|columns
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|seekToRow
argument_list|(
name|lastRowOfStripe2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|BigRow
name|expected
init|=
name|createRandomRow
argument_list|(
name|intValues
argument_list|,
name|doubleValues
argument_list|,
name|stringValues
argument_list|,
name|byteValues
argument_list|,
name|words
argument_list|,
call|(
name|int
call|)
argument_list|(
name|lastRowOfStripe2
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|long1
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
operator|(
name|LongWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|string1
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|compareInner
parameter_list|(
name|InnerStruct
name|expect
parameter_list|,
name|OrcStruct
name|actual
parameter_list|,
name|String
name|context
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|expect
operator|==
literal|null
operator|||
name|actual
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|expect
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|context
argument_list|,
name|expect
operator|.
name|int1
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
argument_list|,
name|expect
operator|.
name|string1
argument_list|,
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compareList
parameter_list|(
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|expect
parameter_list|,
name|List
argument_list|<
name|OrcStruct
argument_list|>
name|actual
parameter_list|,
name|String
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|context
argument_list|,
name|expect
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|expect
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|compareInner
argument_list|(
name|expect
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|context
operator|+
literal|" at "
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|appendRandomRow
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|long
index|[]
name|intValues
parameter_list|,
name|double
index|[]
name|doubleValues
parameter_list|,
name|String
index|[]
name|stringValues
parameter_list|,
name|BytesWritable
index|[]
name|byteValues
parameter_list|,
name|String
index|[]
name|words
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|InnerStruct
name|inner
init|=
operator|new
name|InnerStruct
argument_list|(
operator|(
name|int
operator|)
name|intValues
index|[
name|i
index|]
argument_list|,
name|stringValues
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|InnerStruct
name|inner2
init|=
operator|new
name|InnerStruct
argument_list|(
call|(
name|int
call|)
argument_list|(
name|intValues
index|[
name|i
index|]
operator|>>
literal|32
argument_list|)
argument_list|,
name|words
index|[
name|i
operator|%
name|words
operator|.
name|length
index|]
operator|+
literal|"-x"
argument_list|)
decl_stmt|;
name|setBigRow
argument_list|(
name|batch
argument_list|,
name|batch
operator|.
name|size
operator|++
argument_list|,
operator|(
name|intValues
index|[
name|i
index|]
operator|&
literal|1
operator|)
operator|==
literal|0
argument_list|,
operator|(
name|byte
operator|)
name|intValues
index|[
name|i
index|]
argument_list|,
operator|(
name|short
operator|)
name|intValues
index|[
name|i
index|]
argument_list|,
operator|(
name|int
operator|)
name|intValues
index|[
name|i
index|]
argument_list|,
name|intValues
index|[
name|i
index|]
argument_list|,
operator|(
name|float
operator|)
name|doubleValues
index|[
name|i
index|]
argument_list|,
name|doubleValues
index|[
name|i
index|]
argument_list|,
name|byteValues
index|[
name|i
index|]
argument_list|,
name|stringValues
index|[
name|i
index|]
argument_list|,
operator|new
name|MiddleStruct
argument_list|(
name|inner
argument_list|,
name|inner2
argument_list|)
argument_list|,
name|list
argument_list|()
argument_list|,
name|map
argument_list|(
name|inner
argument_list|,
name|inner2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BigRow
name|createRandomRow
parameter_list|(
name|long
index|[]
name|intValues
parameter_list|,
name|double
index|[]
name|doubleValues
parameter_list|,
name|String
index|[]
name|stringValues
parameter_list|,
name|BytesWritable
index|[]
name|byteValues
parameter_list|,
name|String
index|[]
name|words
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|InnerStruct
name|inner
init|=
operator|new
name|InnerStruct
argument_list|(
operator|(
name|int
operator|)
name|intValues
index|[
name|i
index|]
argument_list|,
name|stringValues
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|InnerStruct
name|inner2
init|=
operator|new
name|InnerStruct
argument_list|(
call|(
name|int
call|)
argument_list|(
name|intValues
index|[
name|i
index|]
operator|>>
literal|32
argument_list|)
argument_list|,
name|words
index|[
name|i
operator|%
name|words
operator|.
name|length
index|]
operator|+
literal|"-x"
argument_list|)
decl_stmt|;
return|return
operator|new
name|BigRow
argument_list|(
operator|(
name|intValues
index|[
name|i
index|]
operator|&
literal|1
operator|)
operator|==
literal|0
argument_list|,
operator|(
name|byte
operator|)
name|intValues
index|[
name|i
index|]
argument_list|,
operator|(
name|short
operator|)
name|intValues
index|[
name|i
index|]
argument_list|,
operator|(
name|int
operator|)
name|intValues
index|[
name|i
index|]
argument_list|,
name|intValues
index|[
name|i
index|]
argument_list|,
operator|(
name|float
operator|)
name|doubleValues
index|[
name|i
index|]
argument_list|,
name|doubleValues
index|[
name|i
index|]
argument_list|,
name|byteValues
index|[
name|i
index|]
argument_list|,
name|stringValues
index|[
name|i
index|]
argument_list|,
operator|new
name|MiddleStruct
argument_list|(
name|inner
argument_list|,
name|inner2
argument_list|)
argument_list|,
name|list
argument_list|()
argument_list|,
name|map
argument_list|(
name|inner
argument_list|,
name|inner2
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|MyMemoryManager
extends|extends
name|MemoryManager
block|{
specifier|final
name|long
name|totalSpace
decl_stmt|;
name|double
name|rate
decl_stmt|;
name|Path
name|path
init|=
literal|null
decl_stmt|;
name|long
name|lastAllocation
init|=
literal|0
decl_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
name|Callback
name|callback
decl_stmt|;
name|MyMemoryManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|totalSpace
parameter_list|,
name|double
name|rate
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalSpace
operator|=
name|totalSpace
expr_stmt|;
name|this
operator|.
name|rate
operator|=
name|rate
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|addWriter
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|requestedAllocation
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|lastAllocation
operator|=
name|requestedAllocation
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
specifier|synchronized
name|void
name|removeWriter
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|lastAllocation
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
name|long
name|getTotalMemoryPool
parameter_list|()
block|{
return|return
name|totalSpace
return|;
block|}
annotation|@
name|Override
name|double
name|getAllocationScale
parameter_list|()
block|{
return|return
name|rate
return|;
block|}
annotation|@
name|Override
name|void
name|addedRow
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|rows
operator|+=
name|count
expr_stmt|;
if|if
condition|(
name|rows
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|callback
operator|.
name|checkMemory
argument_list|(
name|rate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMemoryManagementV11
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createInnerSchema
argument_list|()
decl_stmt|;
name|MyMemoryManager
name|memory
init|=
operator|new
name|MyMemoryManager
argument_list|(
name|conf
argument_list|,
literal|10000
argument_list|,
literal|0.1
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|50000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|100
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|0
argument_list|)
operator|.
name|memory
argument_list|(
name|memory
argument_list|)
operator|.
name|version
argument_list|(
name|Version
operator|.
name|V_0_11
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testFilePath
argument_list|,
name|memory
operator|.
name|path
argument_list|)
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2500
condition|;
operator|++
name|i
control|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|i
operator|*
literal|300
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
literal|10
operator|*
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|memory
operator|.
name|path
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|i
operator|+=
literal|1
expr_stmt|;
name|assertTrue
argument_list|(
literal|"stripe "
operator|+
name|i
operator|+
literal|" is too long at "
operator|+
name|stripe
operator|.
name|getDataLength
argument_list|()
argument_list|,
name|stripe
operator|.
name|getDataLength
argument_list|()
operator|<
literal|5000
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2500
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMemoryManagementV12
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createInnerSchema
argument_list|()
decl_stmt|;
name|MyMemoryManager
name|memory
init|=
operator|new
name|MyMemoryManager
argument_list|(
name|conf
argument_list|,
literal|10000
argument_list|,
literal|0.1
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|50000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|100
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|0
argument_list|)
operator|.
name|memory
argument_list|(
name|memory
argument_list|)
operator|.
name|version
argument_list|(
name|Version
operator|.
name|V_0_12
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|testFilePath
argument_list|,
name|memory
operator|.
name|path
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2500
condition|;
operator|++
name|i
control|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|i
operator|*
literal|300
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
literal|10
operator|*
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|memory
operator|.
name|path
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|i
operator|+=
literal|1
expr_stmt|;
name|assertTrue
argument_list|(
literal|"stripe "
operator|+
name|i
operator|+
literal|" is too long at "
operator|+
name|stripe
operator|.
name|getDataLength
argument_list|()
argument_list|,
name|stripe
operator|.
name|getDataLength
argument_list|()
operator|<
literal|5000
argument_list|)
expr_stmt|;
block|}
comment|// with HIVE-7832, the dictionaries will be disabled after writing the first
comment|// stripe as there are too many distinct values. Hence only 3 stripes as
comment|// compared to 25 stripes in version 0.11 (above test case)
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2500
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicatePushdown
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createInnerSchema
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|400000L
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|500
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|ensureSize
argument_list|(
literal|3500
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3500
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3500
condition|;
operator|++
name|i
control|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|i
operator|*
literal|300
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
literal|10
operator|*
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3500
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|SearchArgument
name|sarg
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startAnd
argument_list|()
operator|.
name|startNot
argument_list|()
operator|.
name|lessThan
argument_list|(
literal|"int1"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|300000L
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|lessThan
argument_list|(
literal|"int1"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|600000L
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rowsOptions
argument_list|(
operator|new
name|Reader
operator|.
name|Options
argument_list|()
operator|.
name|range
argument_list|(
literal|0L
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|include
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
operator|.
name|searchArgument
argument_list|(
name|sarg
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"int1"
block|,
literal|"string1"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000L
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1000
init|;
name|i
operator|<
literal|2000
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300
operator|*
name|i
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
literal|10
operator|*
name|i
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
operator|!
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3500
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// look through the file with no rows selected
name|sarg
operator|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startAnd
argument_list|()
operator|.
name|lessThan
argument_list|(
literal|"int1"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|0L
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|rows
operator|=
name|reader
operator|.
name|rowsOptions
argument_list|(
operator|new
name|Reader
operator|.
name|Options
argument_list|()
operator|.
name|range
argument_list|(
literal|0L
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|include
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
operator|.
name|searchArgument
argument_list|(
name|sarg
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"int1"
block|,
literal|"string1"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3500L
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// select first 100 and last 100 rows
name|sarg
operator|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startOr
argument_list|()
operator|.
name|lessThan
argument_list|(
literal|"int1"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|300L
operator|*
literal|100
argument_list|)
operator|.
name|startNot
argument_list|()
operator|.
name|lessThan
argument_list|(
literal|"int1"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|300L
operator|*
literal|3400
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|rows
operator|=
name|reader
operator|.
name|rowsOptions
argument_list|(
operator|new
name|Reader
operator|.
name|Options
argument_list|()
operator|.
name|range
argument_list|(
literal|0L
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|include
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
operator|.
name|searchArgument
argument_list|(
name|sarg
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"int1"
block|,
literal|"string1"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300
operator|*
name|i
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
literal|10
operator|*
name|i
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|3000
init|;
name|i
operator|<
literal|3500
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300
operator|*
name|i
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
literal|10
operator|*
name|i
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
operator|!
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3500
argument_list|,
name|rows
operator|.
name|getRowNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|pad
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|==
name|length
condition|)
block|{
return|return
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
name|length
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
else|else
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
operator|-
name|value
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Test all of the types that have distinct ORC writers using the vectorized    * writer with different combinations of repeating and null values.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRepeating
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a row type with each type that has a unique writer
comment|// really just folds short, int, and long together
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"bin"
argument_list|,
name|TypeDescription
operator|.
name|createBinary
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"bool"
argument_list|,
name|TypeDescription
operator|.
name|createBoolean
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"byte"
argument_list|,
name|TypeDescription
operator|.
name|createByte
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"long"
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"float"
argument_list|,
name|TypeDescription
operator|.
name|createFloat
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"double"
argument_list|,
name|TypeDescription
operator|.
name|createDouble
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"date"
argument_list|,
name|TypeDescription
operator|.
name|createDate
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"time"
argument_list|,
name|TypeDescription
operator|.
name|createTimestamp
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"dec"
argument_list|,
name|TypeDescription
operator|.
name|createDecimal
argument_list|()
operator|.
name|withPrecision
argument_list|(
literal|20
argument_list|)
operator|.
name|withScale
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"string"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"char"
argument_list|,
name|TypeDescription
operator|.
name|createChar
argument_list|()
operator|.
name|withMaxLength
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"vc"
argument_list|,
name|TypeDescription
operator|.
name|createVarchar
argument_list|()
operator|.
name|withMaxLength
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"struct"
argument_list|,
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"sub1"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"union"
argument_list|,
name|TypeDescription
operator|.
name|createUnion
argument_list|()
operator|.
name|addUnionChild
argument_list|(
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
operator|.
name|addUnionChild
argument_list|(
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"list"
argument_list|,
name|TypeDescription
operator|.
name|createList
argument_list|(
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"map"
argument_list|,
name|TypeDescription
operator|.
name|createMap
argument_list|(
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
comment|// write 1024 repeating nulls
name|batch
operator|.
name|size
operator|=
literal|1024
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|batch
operator|.
name|cols
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|setRepeating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// write 1024 repeating non-null
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|batch
operator|.
name|cols
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
block|}
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"Horton"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|130
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0x123456789abcdef0L
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|4
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|1.125
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|5
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0.0009765625
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|6
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
operator|new
name|DateWritable
argument_list|(
operator|new
name|Date
argument_list|(
literal|111
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|getDays
argument_list|()
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|7
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|115
argument_list|,
literal|9
argument_list|,
literal|23
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|59
argument_list|,
literal|999999999
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|8
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|"1.234567"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|9
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"Echelon"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|10
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"Juggernaut"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|11
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"Dreadnaught"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|12
index|]
argument_list|)
operator|.
name|fields
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|123
expr_stmt|;
operator|(
operator|(
name|UnionColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|13
index|]
operator|)
operator|.
name|tags
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|UnionColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|13
index|]
argument_list|)
operator|.
name|fields
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|1234
expr_stmt|;
operator|(
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|14
index|]
operator|)
operator|.
name|offsets
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
operator|(
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|14
index|]
operator|)
operator|.
name|lengths
index|[
literal|0
index|]
operator|=
literal|3
expr_stmt|;
operator|(
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|14
index|]
operator|)
operator|.
name|child
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|14
index|]
argument_list|)
operator|.
name|child
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|31415
expr_stmt|;
operator|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
operator|)
operator|.
name|offsets
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
operator|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
operator|)
operator|.
name|lengths
index|[
literal|0
index|]
operator|=
literal|3
expr_stmt|;
operator|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
operator|)
operator|.
name|values
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
operator|(
call|(
name|BytesColumnVector
call|)
argument_list|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
argument_list|)
operator|.
name|keys
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"ORC"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
call|(
name|BytesColumnVector
call|)
argument_list|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
argument_list|)
operator|.
name|keys
operator|)
operator|.
name|setVal
argument_list|(
literal|1
argument_list|,
literal|"Hive"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
call|(
name|BytesColumnVector
call|)
argument_list|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
argument_list|)
operator|.
name|keys
operator|)
operator|.
name|setVal
argument_list|(
literal|2
argument_list|,
literal|"LLAP"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
call|(
name|BytesColumnVector
call|)
argument_list|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
argument_list|)
operator|.
name|values
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"fast"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// write 1024 null without repeat
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|batch
operator|.
name|cols
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|setRepeating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|isNull
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// add 1024 rows of non-null, non-repeating
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1024
expr_stmt|;
operator|(
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|14
index|]
operator|)
operator|.
name|child
operator|.
name|ensureSize
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
operator|)
operator|.
name|keys
operator|.
name|ensureSize
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
operator|)
operator|.
name|values
operator|.
name|ensureSize
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
operator|%
literal|2
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
operator|(
name|r
operator|%
literal|255
operator|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
literal|31415L
operator|*
name|r
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|4
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
literal|1.125
operator|*
name|r
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|5
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
literal|0.0009765625
operator|*
name|r
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|6
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
operator|new
name|DateWritable
argument_list|(
operator|new
name|Date
argument_list|(
literal|111
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|getDays
argument_list|()
operator|+
name|r
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|7
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|115
argument_list|,
literal|9
argument_list|,
literal|23
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|59
argument_list|,
literal|999999999
argument_list|)
argument_list|)
operator|+
name|r
operator|*
literal|1000000000L
expr_stmt|;
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|8
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|"1.234567"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|9
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|r
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|10
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|11
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
operator|*
literal|128
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|12
index|]
argument_list|)
operator|.
name|fields
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
operator|+
literal|13
expr_stmt|;
operator|(
operator|(
name|UnionColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|13
index|]
operator|)
operator|.
name|tags
index|[
name|r
index|]
operator|=
literal|1
expr_stmt|;
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|UnionColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|13
index|]
argument_list|)
operator|.
name|fields
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
operator|+
literal|42
expr_stmt|;
operator|(
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|14
index|]
operator|)
operator|.
name|offsets
index|[
name|r
index|]
operator|=
literal|3
operator|*
name|r
expr_stmt|;
operator|(
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|14
index|]
operator|)
operator|.
name|lengths
index|[
name|r
index|]
operator|=
literal|3
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|14
index|]
argument_list|)
operator|.
name|child
operator|)
operator|.
name|vector
index|[
literal|3
operator|*
name|r
operator|+
name|i
index|]
operator|=
literal|31415
operator|+
name|i
expr_stmt|;
block|}
operator|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
operator|)
operator|.
name|offsets
index|[
name|r
index|]
operator|=
literal|3
operator|*
name|r
expr_stmt|;
operator|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
operator|)
operator|.
name|lengths
index|[
name|r
index|]
operator|=
literal|3
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
operator|(
call|(
name|BytesColumnVector
call|)
argument_list|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
argument_list|)
operator|.
name|keys
operator|)
operator|.
name|setVal
argument_list|(
literal|3
operator|*
name|r
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
literal|3
operator|*
name|r
operator|+
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
call|(
name|BytesColumnVector
call|)
argument_list|(
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
argument_list|)
operator|.
name|values
operator|)
operator|.
name|setVal
argument_list|(
literal|3
operator|*
name|r
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|3
operator|*
name|r
operator|+
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
comment|// check the stats
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|hasNull
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TypeDescription
name|colType
range|:
name|schema
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"count on "
operator|+
name|colType
operator|.
name|getId
argument_list|()
argument_list|,
literal|2048
argument_list|,
name|stats
index|[
name|colType
operator|.
name|getId
argument_list|()
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hasNull on "
operator|+
name|colType
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|stats
index|[
name|colType
operator|.
name|getId
argument_list|()
index|]
operator|.
name|hasNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|8944
argument_list|,
operator|(
operator|(
name|BinaryColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getTrueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|512
argument_list|,
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getFalseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|4
index|]
operator|)
operator|.
name|isSumDefined
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|4
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x123456789abcdef0L
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|4
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|10
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Echelon"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|10
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10154
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|10
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0         "
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|11
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ff        "
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|11
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20480
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|11
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|12
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ff80"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|12
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14813
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|12
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
comment|// read the 1024 nulls
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|row
operator|.
name|getNumFields
argument_list|()
condition|;
operator|++
name|f
control|)
block|{
name|assertEquals
argument_list|(
literal|"non-null on row "
operator|+
name|r
operator|+
literal|" field "
operator|+
name|f
argument_list|,
literal|null
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// read the 1024 repeat values
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"48 6f 72 74 6f 6e"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"true"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"-126"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"1311768467463790320"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"1.125"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"9.765625E-4"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"2011-07-01"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"2015-10-23 10:11:59.999999999"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|7
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"1.234567"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|8
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"Echelon"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|9
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"Juggernaut"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|10
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"Dreadnaugh"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|11
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"{123}"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|12
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"union(1, 1234)"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|13
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"[31415, 31415, 31415]"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|14
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"{ORC=fast, Hive=fast, LLAP=fast}"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|15
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// read the second set of 1024 nulls
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|row
operator|.
name|getNumFields
argument_list|()
condition|;
operator|++
name|f
control|)
block|{
name|assertEquals
argument_list|(
literal|"non-null on row "
operator|+
name|r
operator|+
literal|" field "
operator|+
name|f
argument_list|,
literal|null
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|byte
index|[]
name|hex
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|StringBuilder
name|expected
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hex
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|expected
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|expected
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|hex
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|r
operator|%
literal|2
operator|==
literal|1
condition|?
literal|"true"
else|:
literal|"false"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|r
operator|%
literal|255
argument_list|)
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
literal|31415L
operator|*
name|r
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
literal|1.125F
operator|*
name|r
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
literal|0.0009765625
operator|*
name|r
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
operator|new
name|Date
argument_list|(
literal|111
argument_list|,
literal|6
argument_list|,
literal|1
operator|+
name|r
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|115
argument_list|,
literal|9
argument_list|,
literal|23
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|59
operator|+
name|r
argument_list|,
literal|999999999
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|7
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"1.234567"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|8
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|r
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|9
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|pad
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|10
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
operator|*
literal|128
argument_list|)
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|11
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"{"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|r
operator|+
literal|13
argument_list|)
operator|+
literal|"}"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|12
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"union(1, "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|r
operator|+
literal|42
argument_list|)
operator|+
literal|")"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|13
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"[31415, 31416, 31417]"
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|14
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
literal|3
operator|*
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|3
operator|*
name|r
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
literal|3
operator|*
name|r
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|3
operator|*
name|r
operator|+
literal|1
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
literal|3
operator|*
name|r
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|3
operator|*
name|r
operator|+
literal|2
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|row
operator|.
name|getFieldValue
argument_list|(
literal|15
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// should have no more rows
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|makeString
parameter_list|(
name|BytesColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|vector
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|vector
operator|.
name|length
index|[
name|row
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Test the char and varchar padding and truncation.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testStringPadding
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"char"
argument_list|,
name|TypeDescription
operator|.
name|createChar
argument_list|()
operator|.
name|withMaxLength
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"varchar"
argument_list|,
name|TypeDescription
operator|.
name|createVarchar
argument_list|()
operator|.
name|withMaxLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|4
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|batch
operator|.
name|cols
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|1
argument_list|,
literal|"xyz"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|2
argument_list|,
literal|"0123456789"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|c
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|3
argument_list|,
literal|"0123456789abcdef"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|batch
operator|=
name|rows
operator|.
name|nextBatch
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// ORC currently trims the output strings. See HIVE-12286
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xyz"
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0123456789"
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0123456789"
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xyz"
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0123456789"
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0123456789"
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A test case that tests the case where you add a repeating batch    * to a column that isn't using dictionary encoding.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testNonDictionaryRepeatingString
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"str"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1024
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|batch
operator|.
name|size
condition|;
operator|++
name|r
control|)
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|r
operator|*
literal|10001
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"Halloween"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|batch
operator|=
name|rows
operator|.
name|nextBatch
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|r
operator|*
literal|10001
argument_list|)
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|batch
operator|=
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|"Halloween"
argument_list|,
name|makeString
argument_list|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructs
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"struct"
argument_list|,
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"inner"
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1024
expr_stmt|;
name|StructColumnVector
name|outer
init|=
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|outer
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
name|r
operator|<
literal|200
operator|||
operator|(
name|r
operator|>=
literal|400
operator|&&
name|r
operator|<
literal|600
operator|)
operator|||
name|r
operator|>=
literal|800
condition|)
block|{
name|outer
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
operator|(
operator|(
name|LongColumnVector
operator|)
name|outer
operator|.
name|fields
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|OrcStruct
name|inner
init|=
operator|(
name|OrcStruct
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|200
operator|||
operator|(
name|r
operator|>=
literal|400
operator|&&
name|r
operator|<
literal|600
operator|)
operator|||
name|r
operator|>=
literal|800
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"{"
operator|+
name|r
operator|+
literal|"}"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test Unions.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUnions
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"outer"
argument_list|,
name|TypeDescription
operator|.
name|createUnion
argument_list|()
operator|.
name|addUnionChild
argument_list|(
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addUnionChild
argument_list|(
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1024
expr_stmt|;
name|UnionColumnVector
name|outer
init|=
operator|(
name|UnionColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
name|r
operator|<
literal|200
condition|)
block|{
name|outer
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|300
condition|)
block|{
name|outer
operator|.
name|tags
index|[
name|r
index|]
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|400
condition|)
block|{
name|outer
operator|.
name|tags
index|[
name|r
index|]
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|600
condition|)
block|{
name|outer
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|800
condition|)
block|{
name|outer
operator|.
name|tags
index|[
name|r
index|]
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|1000
condition|)
block|{
name|outer
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|outer
operator|.
name|tags
index|[
name|r
index|]
operator|=
literal|1
expr_stmt|;
block|}
operator|(
operator|(
name|LongColumnVector
operator|)
name|outer
operator|.
name|fields
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|outer
operator|.
name|fields
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
operator|-
name|r
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|OrcUnion
name|inner
init|=
operator|(
name|OrcUnion
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|200
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|300
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"union(0, "
operator|+
name|r
operator|+
literal|")"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|400
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"union(1, "
operator|+
operator|-
name|r
operator|+
literal|")"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|600
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|800
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"union(1, "
operator|+
operator|-
name|r
operator|+
literal|")"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|1000
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"union(1, "
operator|+
operator|-
name|r
operator|+
literal|")"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test lists and how they interact with the child column. In particular,    * put nulls between back to back lists and then make some lists that    * oper lap.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testLists
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"list"
argument_list|,
name|TypeDescription
operator|.
name|createList
argument_list|(
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1024
expr_stmt|;
name|ListColumnVector
name|list
init|=
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|list
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
name|r
operator|<
literal|200
condition|)
block|{
name|list
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|300
condition|)
block|{
name|list
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|r
operator|-
literal|200
expr_stmt|;
name|list
operator|.
name|lengths
index|[
name|r
index|]
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|400
condition|)
block|{
name|list
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|500
condition|)
block|{
name|list
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|r
operator|-
literal|300
expr_stmt|;
name|list
operator|.
name|lengths
index|[
name|r
index|]
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|600
condition|)
block|{
name|list
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|700
condition|)
block|{
name|list
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|r
expr_stmt|;
name|list
operator|.
name|lengths
index|[
name|r
index|]
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
operator|(
operator|(
name|LongColumnVector
operator|)
name|list
operator|.
name|child
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
operator|*
literal|10
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|List
name|inner
init|=
operator|(
name|List
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|200
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|300
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"["
operator|+
operator|(
operator|(
name|r
operator|-
literal|200
operator|)
operator|*
literal|10
operator|)
operator|+
literal|"]"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|400
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|500
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"["
operator|+
operator|(
operator|(
name|r
operator|-
literal|300
operator|)
operator|*
literal|10
operator|)
operator|+
literal|"]"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|600
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|700
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"["
operator|+
operator|(
literal|10
operator|*
name|r
operator|)
operator|+
literal|", "
operator|+
operator|(
literal|10
operator|*
operator|(
name|r
operator|+
literal|1
operator|)
operator|)
operator|+
literal|"]"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test maps and how they interact with the child column. In particular,    * put nulls between back to back lists and then make some lists that    * oper lap.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMaps
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"map"
argument_list|,
name|TypeDescription
operator|.
name|createMap
argument_list|(
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1024
expr_stmt|;
name|MapColumnVector
name|map
init|=
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|map
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
name|r
operator|<
literal|200
condition|)
block|{
name|map
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|300
condition|)
block|{
name|map
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|r
operator|-
literal|200
expr_stmt|;
name|map
operator|.
name|lengths
index|[
name|r
index|]
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|400
condition|)
block|{
name|map
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|500
condition|)
block|{
name|map
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|r
operator|-
literal|300
expr_stmt|;
name|map
operator|.
name|lengths
index|[
name|r
index|]
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|600
condition|)
block|{
name|map
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|700
condition|)
block|{
name|map
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|r
expr_stmt|;
name|map
operator|.
name|lengths
index|[
name|r
index|]
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|isNull
index|[
name|r
index|]
operator|=
literal|true
expr_stmt|;
block|}
operator|(
operator|(
name|LongColumnVector
operator|)
name|map
operator|.
name|keys
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|map
operator|.
name|values
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
operator|*
literal|10
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1024
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|Map
name|inner
init|=
operator|(
name|Map
operator|)
name|row
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|200
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|300
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"{"
operator|+
operator|(
name|r
operator|-
literal|200
operator|)
operator|+
literal|"="
operator|+
operator|(
operator|(
name|r
operator|-
literal|200
operator|)
operator|*
literal|10
operator|)
operator|+
literal|"}"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|400
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|500
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"{"
operator|+
operator|(
name|r
operator|-
literal|300
operator|)
operator|+
literal|"="
operator|+
operator|(
operator|(
name|r
operator|-
literal|300
operator|)
operator|*
literal|10
operator|)
operator|+
literal|"}"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|600
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|700
condition|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|"{"
operator|+
name|r
operator|+
literal|"="
operator|+
operator|(
name|r
operator|*
literal|10
operator|)
operator|+
literal|", "
operator|+
operator|(
name|r
operator|+
literal|1
operator|)
operator|+
literal|"="
operator|+
operator|(
literal|10
operator|*
operator|(
name|r
operator|+
literal|1
operator|)
operator|)
operator|+
literal|"}"
argument_list|,
name|inner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
literal|null
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

