begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetOpenTxnsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|TestDbTxnManager2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|AcidHouseKeeperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * The LockManager is not ready, but for no-concurrency straight-line path we can  * test AC=true, and AC=false with commit/rollback/exception and test resulting data.  *  * Can also test, calling commit in AC=true mode, etc, toggling AC...  */
end_comment

begin_class
specifier|public
class|class
name|TestTxnCommands
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestTxnCommands
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_WAREHOUSE_DIR
init|=
name|TEST_DATA_DIR
operator|+
literal|"/warehouse"
decl_stmt|;
comment|//bucket count for test tables; set it to 1 for easier debugging
specifier|private
specifier|static
name|int
name|BUCKET_COUNT
init|=
literal|2
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|Driver
name|d
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|Table
block|{
name|ACIDTBL
argument_list|(
literal|"acidTbl"
argument_list|)
block|,
name|ACIDTBL2
argument_list|(
literal|"acidTbl2"
argument_list|)
block|,
name|NONACIDORCTBL
argument_list|(
literal|"nonAcidOrcTbl"
argument_list|)
block|,
name|NONACIDORCTBL2
argument_list|(
literal|"nonAcidOrcTbl2"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
name|Table
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|TEST_WAREHOUSE_DIR
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPREDMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create "
operator|+
name|TEST_WAREHOUSE_DIR
argument_list|)
throw|;
block|}
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|SessionState
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Driver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|dropTables
argument_list|()
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a int, b int) clustered by (a) into "
operator|+
name|BUCKET_COUNT
operator|+
literal|" buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"(a int, b int) clustered by (a) into "
operator|+
name|BUCKET_COUNT
operator|+
literal|" buckets stored as orc TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL2
operator|+
literal|"(a int, b int) clustered by (a) into "
operator|+
name|BUCKET_COUNT
operator|+
literal|" buckets stored as orc TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create temporary  table "
operator|+
name|Table
operator|.
name|ACIDTBL2
operator|+
literal|"(a int, b int, c int) clustered by (c) into "
operator|+
name|BUCKET_COUNT
operator|+
literal|" buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dropTables
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Table
name|t
range|:
name|Table
operator|.
name|values
argument_list|()
control|)
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|dropTables
argument_list|()
expr_stmt|;
name|d
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"insert overwrite table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL2
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL2
operator|+
literal|"3(a int, b int) clustered by (a) into "
operator|+
name|BUCKET_COUNT
operator|+
literal|" buckets stored as orc TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"not needed but useful for testing"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testNonAcidInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"(a,b) values(2,3)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
decl_stmt|;
block|}
comment|/**    * Useful for debugging.  Dumps ORC file in JSON to CWD.    */
specifier|private
name|void
name|dumpBucketData
parameter_list|(
name|Table
name|table
parameter_list|,
name|long
name|txnId
parameter_list|,
name|int
name|stmtId
parameter_list|,
name|int
name|bucketNum
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return;
block|}
name|Path
name|bucket
init|=
name|AcidUtils
operator|.
name|createBucketFile
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|,
name|table
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deltaSubdir
argument_list|(
name|txnId
argument_list|,
name|txnId
argument_list|,
name|stmtId
argument_list|)
argument_list|)
argument_list|,
name|bucketNum
argument_list|)
decl_stmt|;
name|FileOutputStream
name|delta
init|=
operator|new
name|FileOutputStream
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
name|bucket
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|bucket
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//    try {
comment|//      FileDump.printJsonData(hiveConf, bucket.toString(), delta);
comment|//    }
comment|//    catch(FileNotFoundException ex) {
empty_stmt|;
comment|//this happens if you change BUCKET_COUNT
comment|//    }
name|delta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Dump all data in the table by bucket in JSON format    */
specifier|private
name|void
name|dumpTableData
parameter_list|(
name|Table
name|table
parameter_list|,
name|long
name|txnId
parameter_list|,
name|int
name|stmtId
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|bucketNum
init|=
literal|0
init|;
name|bucketNum
operator|<
name|BUCKET_COUNT
condition|;
name|bucketNum
operator|++
control|)
block|{
name|dumpBucketData
argument_list|(
name|table
argument_list|,
name|txnId
argument_list|,
name|stmtId
argument_list|,
name|bucketNum
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleAcidInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
comment|//List<String> rs = runStatementOnDriver("select a,b from " + Table.ACIDTBL + " order by a,b");
comment|//Assert.assertEquals("Data didn't match in autocommit=true (rs)", stringifyValues(rows1), rs);
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows2
init|=
block|{
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allData
init|=
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
decl_stmt|;
name|allData
operator|.
name|addAll
argument_list|(
name|stringifyValues
argument_list|(
name|rows2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs0
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Data didn't match inside tx (rs0)"
argument_list|,
name|allData
argument_list|,
name|rs0
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"COMMIT WORK"
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"COMMIT"
argument_list|)
expr_stmt|;
comment|//txn started implicitly by previous statement
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Data didn't match inside tx (rs0)"
argument_list|,
name|allData
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
block|}
comment|/**    * add tests for all transitions - AC=t, AC=t, AC=f, commit (for example)    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|runStatementOnDriverNegative
argument_list|(
literal|"start transaction"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error didn't match: "
operator|+
name|cpr
argument_list|,
name|ErrorMsg
operator|.
name|OP_NOT_ALLOWED_IN_AUTOCOMMIT
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"start transaction"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr2
init|=
name|runStatementOnDriverNegative
argument_list|(
literal|"create table foo(x int, y int)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected DDL to fail in an open txn"
argument_list|,
name|ErrorMsg
operator|.
name|OP_NOT_ALLOWED_IN_TXN
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr2
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr3
init|=
name|runStatementOnDriverNegative
argument_list|(
literal|"update "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" set a = 1 where b != 1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected update of bucket column to fail"
argument_list|,
literal|"FAILED: SemanticException [Error 10302]: Updating values of bucketing columns is not supported.  Column a."
argument_list|,
name|cpr3
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|//line below should in principle work but Driver doesn't propagate errorCode properly
comment|//Assert.assertEquals("Expected update of bucket column to fail", ErrorMsg.UPDATE_CANNOT_UPDATE_BUCKET_VALUE.getErrorCode(), cpr3.getErrorCode());
name|cpr3
operator|=
name|runStatementOnDriverNegative
argument_list|(
literal|"commit work"
argument_list|)
expr_stmt|;
comment|//not allowed in AC=true
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error didn't match: "
operator|+
name|cpr3
argument_list|,
name|ErrorMsg
operator|.
name|OP_NOT_ALLOWED_IN_AUTOCOMMIT
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|cpr3
operator|=
name|runStatementOnDriverNegative
argument_list|(
literal|"rollback work"
argument_list|)
expr_stmt|;
comment|//not allowed in AC=true
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error didn't match: "
operator|+
name|cpr3
argument_list|,
name|ErrorMsg
operator|.
name|OP_NOT_ALLOWED_IN_AUTOCOMMIT
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|cpr3
operator|=
name|runStatementOnDriverNegative
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
comment|//not allowed in w/o tx
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error didn't match: "
operator|+
name|cpr3
argument_list|,
name|ErrorMsg
operator|.
name|OP_NOT_ALLOWED_IN_AUTOCOMMIT
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|cpr3
operator|=
name|runStatementOnDriverNegative
argument_list|(
literal|"rollback"
argument_list|)
expr_stmt|;
comment|//not allowed in w/o tx
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error didn't match: "
operator|+
name|cpr3
argument_list|,
name|ErrorMsg
operator|.
name|OP_NOT_ALLOWED_IN_AUTOCOMMIT
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"start transaction"
argument_list|)
expr_stmt|;
name|cpr3
operator|=
name|runStatementOnDriverNegative
argument_list|(
literal|"start transaction"
argument_list|)
expr_stmt|;
comment|//not allowed in a tx
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected start transaction to fail"
argument_list|,
name|ErrorMsg
operator|.
name|OP_NOT_ALLOWED_IN_TXN
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr3
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"start transaction"
argument_list|)
expr_stmt|;
comment|//ok since previously opened txn was killed
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs0
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Can't see my own write"
argument_list|,
literal|1
argument_list|,
name|rs0
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
comment|//this should commit previous txn
name|rs0
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Can't see my own write"
argument_list|,
literal|1
argument_list|,
name|rs0
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadMyOwnInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from "
operator|+
name|Table
operator|.
name|ACIDTBL
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected empty "
operator|+
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|0
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs0
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Can't see my own write"
argument_list|,
literal|1
argument_list|,
name|rs0
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"rollback work"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Can't see write after commit"
argument_list|,
literal|1
argument_list|,
name|rs1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImplicitRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs0
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Can't see my own write"
argument_list|,
literal|1
argument_list|,
name|rs0
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//next command should produce an error
name|CommandProcessorResponse
name|cpr
init|=
name|runStatementOnDriverNegative
argument_list|(
literal|"select * from no_such_table"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Txn didn't fail?"
argument_list|,
literal|"FAILED: SemanticException [Error 10001]: Line 1:14 Table not found 'no_such_table'"
argument_list|,
name|cpr
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"start transaction"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Didn't rollback as expected"
argument_list|,
literal|0
argument_list|,
name|rs1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExplicitRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"ROLLBACK"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Rollback didn't rollback"
argument_list|,
literal|0
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleInserts
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows2
init|=
block|{
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allData
init|=
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
decl_stmt|;
name|allData
operator|.
name|addAll
argument_list|(
name|stringifyValues
argument_list|(
name|rows2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match before commit rs"
argument_list|,
name|allData
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match after commit rs1"
argument_list|,
name|allData
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs0
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs0"
argument_list|,
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
argument_list|,
name|rs0
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" where b = 4"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|updatedData2
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs3
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after delete"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData2
argument_list|)
argument_list|,
name|rs3
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs4
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after commit"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData2
argument_list|)
argument_list|,
name|rs4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateOfInserts
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs0
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs0"
argument_list|,
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
argument_list|,
name|rs0
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows2
init|=
block|{
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allData
init|=
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
decl_stmt|;
name|allData
operator|.
name|addAll
argument_list|(
name|stringifyValues
argument_list|(
name|rows2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs1"
argument_list|,
name|allData
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"update "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" set b = 1 where b != 1"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|updatedData
init|=
block|{
block|{
literal|1
block|,
literal|1
block|}
block|,
block|{
literal|3
block|,
literal|1
block|}
block|,
block|{
literal|5
block|,
literal|1
block|}
block|,
block|{
literal|7
block|,
literal|1
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs2
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after update"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData
argument_list|)
argument_list|,
name|rs2
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs4
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after commit"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData
argument_list|)
argument_list|,
name|rs4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateDeleteOfInserts
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs0
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs0"
argument_list|,
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
argument_list|,
name|rs0
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows2
init|=
block|{
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allData
init|=
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
decl_stmt|;
name|allData
operator|.
name|addAll
argument_list|(
name|stringifyValues
argument_list|(
name|rows2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs1"
argument_list|,
name|allData
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"update "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" set b = 1 where b != 1"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|updatedData
init|=
block|{
block|{
literal|1
block|,
literal|1
block|}
block|,
block|{
literal|3
block|,
literal|1
block|}
block|,
block|{
literal|5
block|,
literal|1
block|}
block|,
block|{
literal|7
block|,
literal|1
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs2
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after update"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData
argument_list|)
argument_list|,
name|rs2
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" where a = 7 and b = 1"
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|updatedData2
init|=
block|{
block|{
literal|1
block|,
literal|1
block|}
block|,
block|{
literal|3
block|,
literal|1
block|}
block|,
block|{
literal|5
block|,
literal|1
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs3
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after delete"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData2
argument_list|)
argument_list|,
name|rs3
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs4
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after commit"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData2
argument_list|)
argument_list|,
name|rs4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|,
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs0
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs0"
argument_list|,
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
argument_list|,
name|rs0
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" where b = 8"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|updatedData2
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|,
block|{
literal|5
block|,
literal|6
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs2
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after delete"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData2
argument_list|)
argument_list|,
name|rs2
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" where b = 4"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|updatedData3
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|5
block|,
literal|6
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs3
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after delete2"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData3
argument_list|)
argument_list|,
name|rs3
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"update "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" set b=3"
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//nothing actually hashes to bucket0, so update/delete deltas don't have it
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|dumpTableData
argument_list|(
name|Table
operator|.
name|ACIDTBL
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs5
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|updatedData4
init|=
block|{
block|{
literal|1
block|,
literal|3
block|}
block|,
block|{
literal|5
block|,
literal|3
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after delete"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData4
argument_list|)
argument_list|,
name|rs5
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"set autocommit true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs4
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong data after commit"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData4
argument_list|)
argument_list|,
name|rs4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteIn
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" where a IN (SELECT A.a from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"  A)"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|tableData
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|2
block|}
block|,
block|{
literal|5
block|,
literal|2
block|}
block|,
block|{
literal|1
block|,
literal|3
block|}
block|,
block|{
literal|3
block|,
literal|3
block|}
block|,
block|{
literal|5
block|,
literal|3
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|tableData
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL2
operator|+
literal|"(a,b,c) values(1,7,17),(3,7,17)"
argument_list|)
expr_stmt|;
comment|//    runStatementOnDriver("select b from " + Table.ACIDTBL + " where a in (select b from " + Table.NONACIDORCTBL + ")");
name|runStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" where a in(select a from "
operator|+
name|Table
operator|.
name|ACIDTBL2
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|//    runStatementOnDriver("delete from " + Table.ACIDTBL + " where a in(select a from " + Table.NONACIDORCTBL + ")");
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"(a,b) select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|updatedData
init|=
block|{
block|{
literal|1
block|,
literal|7
block|}
block|,
block|{
literal|3
block|,
literal|7
block|}
block|,
block|{
literal|5
block|,
literal|2
block|}
block|,
block|{
literal|5
block|,
literal|3
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Bulk update failed"
argument_list|,
name|stringifyValues
argument_list|(
name|updatedData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeOutReaper
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"set autocommit false"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"start transaction"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" where a = 5"
argument_list|)
expr_stmt|;
comment|//make sure currently running txn is considered aborted by housekeeper
name|hiveConf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TIMEDOUT_TXN_REAPER_START
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|AcidHouseKeeperService
name|houseKeeperService
init|=
operator|new
name|AcidHouseKeeperService
argument_list|()
decl_stmt|;
comment|//this will abort the txn
name|TestTxnCommands2
operator|.
name|runHouseKeeperService
argument_list|(
name|houseKeeperService
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
comment|//this should fail because txn aborted due to timeout
name|CommandProcessorResponse
name|cpr
init|=
name|runStatementOnDriverNegative
argument_list|(
literal|"delete from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" where a = 5"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Actual: "
operator|+
name|cpr
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Transaction manager has aborted the transaction txnid:1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//now test that we don't timeout locks we should not
comment|//heartbeater should be running in the background every 1/2 second
name|hiveConf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|//hiveConf.setBoolVar(HiveConf.ConfVars.HIVETESTMODEFAILHEARTBEATER, true);
name|runStatementOnDriver
argument_list|(
literal|"start transaction"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" where a = 17"
argument_list|)
expr_stmt|;
name|pause
argument_list|(
literal|750
argument_list|)
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
comment|//since there is txn open, we are heartbeating the txn not individual locks
name|GetOpenTxnsInfoResponse
name|txnsInfoResponse
init|=
name|txnHandler
operator|.
name|getOpenTxnsInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txnsInfoResponse
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TxnInfo
name|txnInfo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TxnInfo
name|ti
range|:
name|txnsInfoResponse
operator|.
name|getOpen_txns
argument_list|()
control|)
block|{
if|if
condition|(
name|ti
operator|.
name|getState
argument_list|()
operator|==
name|TxnState
operator|.
name|OPEN
condition|)
block|{
name|txnInfo
operator|=
name|ti
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|txnInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txnInfo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select TXN_STARTED, TXN_LAST_HEARTBEAT from TXNS where TXN_ID = "
operator|+
name|txnInfo
operator|.
name|getId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
index|[]
name|vals
init|=
name|s
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Didn't get expected timestamps"
argument_list|,
literal|2
argument_list|,
name|vals
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|lastHeartbeat
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|vals
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|//these 2 values are equal when TXN entry is made.  Should never be equal after 1st heartbeat, which we
comment|//expect to have happened by now since HIVE_TXN_TIMEOUT=1sec
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Didn't see heartbeat happen"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|lastHeartbeat
argument_list|)
expr_stmt|;
name|ShowLocksResponse
name|slr
init|=
name|txnHandler
operator|.
name|showLocks
argument_list|(
operator|new
name|ShowLocksRequest
argument_list|()
argument_list|)
decl_stmt|;
name|TestDbTxnManager2
operator|.
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
name|Table
operator|.
name|ACIDTBL
operator|.
name|name
argument_list|,
literal|null
argument_list|,
name|slr
operator|.
name|getLocks
argument_list|()
argument_list|)
expr_stmt|;
name|pause
argument_list|(
literal|750
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runHouseKeeperService
argument_list|(
name|houseKeeperService
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|pause
argument_list|(
literal|750
argument_list|)
expr_stmt|;
name|slr
operator|=
name|txnHandler
operator|.
name|showLocks
argument_list|(
operator|new
name|ShowLocksRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count: "
operator|+
name|slr
argument_list|,
literal|1
argument_list|,
name|slr
operator|.
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TestDbTxnManager2
operator|.
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
name|Table
operator|.
name|ACIDTBL
operator|.
name|name
argument_list|,
literal|null
argument_list|,
name|slr
operator|.
name|getLocks
argument_list|()
argument_list|)
expr_stmt|;
name|pause
argument_list|(
literal|750
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runHouseKeeperService
argument_list|(
name|houseKeeperService
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|slr
operator|=
name|txnHandler
operator|.
name|showLocks
argument_list|(
operator|new
name|ShowLocksRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count: "
operator|+
name|slr
argument_list|,
literal|1
argument_list|,
name|slr
operator|.
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TestDbTxnManager2
operator|.
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
name|Table
operator|.
name|ACIDTBL
operator|.
name|name
argument_list|,
literal|null
argument_list|,
name|slr
operator|.
name|getLocks
argument_list|()
argument_list|)
expr_stmt|;
comment|//should've done several heartbeats
name|s
operator|=
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select TXN_STARTED, TXN_LAST_HEARTBEAT from TXNS where TXN_ID = "
operator|+
name|txnInfo
operator|.
name|getId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|vals
operator|=
name|s
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Didn't get expected timestamps"
argument_list|,
literal|2
argument_list|,
name|vals
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Heartbeat didn't progress: (old,new) ("
operator|+
name|lastHeartbeat
operator|+
literal|","
operator|+
name|vals
index|[
literal|1
index|]
operator|+
literal|")"
argument_list|,
name|lastHeartbeat
operator|<
name|Long
operator|.
name|parseLong
argument_list|(
name|vals
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"rollback"
argument_list|)
expr_stmt|;
name|slr
operator|=
name|txnHandler
operator|.
name|showLocks
argument_list|(
operator|new
name|ShowLocksRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|0
argument_list|,
name|slr
operator|.
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|pause
parameter_list|(
name|int
name|timeMillis
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timeMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * takes raw data and turns it into a string as if from Driver.getResults()    * sorts rows in dictionary order    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|stringifyValues
parameter_list|(
name|int
index|[]
index|[]
name|rowsIn
parameter_list|)
block|{
assert|assert
name|rowsIn
operator|.
name|length
operator|>
literal|0
assert|;
name|int
index|[]
index|[]
name|rows
init|=
name|rowsIn
operator|.
name|clone
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|rows
argument_list|,
operator|new
name|RowComp
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
index|[]
name|row
range|:
name|rows
control|)
block|{
assert|assert
name|row
operator|.
name|length
operator|>
literal|0
assert|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|value
range|:
name|row
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rs
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rs
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|RowComp
implements|implements
name|Comparator
argument_list|<
name|int
index|[]
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|int
index|[]
name|row1
parameter_list|,
name|int
index|[]
name|row2
parameter_list|)
block|{
assert|assert
name|row1
operator|!=
literal|null
operator|&&
name|row2
operator|!=
literal|null
operator|&&
name|row1
operator|.
name|length
operator|==
name|row2
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|row1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|comp
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|row1
index|[
name|i
index|]
argument_list|,
name|row2
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|!=
literal|0
condition|)
block|{
return|return
name|comp
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
specifier|private
name|String
name|makeValuesClause
parameter_list|(
name|int
index|[]
index|[]
name|rows
parameter_list|)
block|{
assert|assert
name|rows
operator|.
name|length
operator|>
literal|0
assert|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"values"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
index|[]
name|row
range|:
name|rows
control|)
block|{
assert|assert
name|row
operator|.
name|length
operator|>
literal|0
assert|;
if|if
condition|(
name|row
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|value
range|:
name|row
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//remove trailing comma
if|if
condition|(
name|row
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//remove trailing comma
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTxnCommands
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|runStatementOnDriver
parameter_list|(
name|String
name|stmt
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|stmt
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|d
operator|.
name|run
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|stmt
operator|+
literal|" failed: "
operator|+
name|cpr
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|d
operator|.
name|getResults
argument_list|(
name|rs
argument_list|)
expr_stmt|;
return|return
name|rs
return|;
block|}
specifier|private
name|CommandProcessorResponse
name|runStatementOnDriverNegative
parameter_list|(
name|String
name|stmt
parameter_list|)
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|d
operator|.
name|run
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|cpr
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Didn't get expected failure!"
argument_list|)
throw|;
block|}
comment|//  @Ignore
annotation|@
name|Test
specifier|public
name|void
name|exchangePartition
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"create database ex1"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create database ex2"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"CREATE TABLE ex1.exchange_part_test1 (f1 string) PARTITIONED BY (ds STRING)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"CREATE TABLE ex2.exchange_part_test2 (f1 string) PARTITIONED BY (ds STRING)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"ALTER TABLE ex2.exchange_part_test2 ADD PARTITION (ds='2013-04-05')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"ALTER TABLE ex1.exchange_part_test1 EXCHANGE PARTITION (ds='2013-04-05') WITH TABLE ex2.exchange_part_test2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|runStatementOnDriverNegative
argument_list|(
literal|"MERGE INTO "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" target USING "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" source\nON target.a = source.a "
operator|+
literal|"\nWHEN MATCHED THEN UPDATE set b = 1 "
operator|+
literal|"\nWHEN MATCHED THEN DELETE "
operator|+
literal|"\nWHEN NOT MATCHED AND a< 1 THEN INSERT VALUES(1,2)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|MERGE_PREDIACTE_REQUIRED
argument_list|,
operator|(
operator|(
name|HiveException
operator|)
name|cpr
operator|.
name|getException
argument_list|()
operator|)
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeNegative2
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|runStatementOnDriverNegative
argument_list|(
literal|"MERGE INTO "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" target USING "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"\n source ON target.pk = source.pk "
operator|+
literal|"\nWHEN MATCHED THEN UPDATE set t = 1 "
operator|+
literal|"\nWHEN MATCHED THEN UPDATE set b=a"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|MERGE_TOO_MANY_UPDATE
argument_list|,
operator|(
operator|(
name|HiveException
operator|)
name|cpr
operator|.
name|getException
argument_list|()
operator|)
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testSpecialChar
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|target
init|=
literal|"`aci/d_u/ami`"
decl_stmt|;
name|String
name|src
init|=
literal|"`src/name`"
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|target
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|src
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|target
operator|+
literal|"(i int,"
operator|+
literal|"`d?*de e` decimal(5,2),"
operator|+
literal|"vc varchar(128)) clustered by (i) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|src
operator|+
literal|"(`g/h` int, j decimal(5,2), k varchar(128))"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"merge into "
operator|+
name|target
operator|+
literal|" as `d/8` using "
operator|+
name|src
operator|+
literal|" as `a/b` on i=`g/h` "
operator|+
literal|"\nwhen matched and i> 5 then delete "
operator|+
literal|"\nwhen matched then update set vc=`∆∋` "
operator|+
literal|"\nwhen not matched then insert values(`a/b`.`g/h`,`a/b`.j,`a/b`.k)"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

