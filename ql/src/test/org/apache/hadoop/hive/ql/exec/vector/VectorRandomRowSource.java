begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|RandomTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableBooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableDateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableDoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableFloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveIntervalDayTimeObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveIntervalYearMonthObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableLongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableTimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * Generate object inspector and random row object[].  */
end_comment

begin_class
specifier|public
class|class
name|VectorRandomRowSource
block|{
specifier|private
name|Random
name|r
decl_stmt|;
specifier|private
name|int
name|columnCount
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
decl_stmt|;
specifier|private
name|Category
index|[]
name|categories
decl_stmt|;
specifier|private
name|TypeInfo
index|[]
name|typeInfos
decl_stmt|;
specifier|private
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|objectInspectorList
decl_stmt|;
comment|// Primitive.
specifier|private
name|PrimitiveCategory
index|[]
name|primitiveCategories
decl_stmt|;
specifier|private
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|primitiveObjectInspectorList
decl_stmt|;
specifier|private
name|StructObjectInspector
name|rowStructObjectInspector
decl_stmt|;
specifier|private
name|String
index|[]
name|alphabets
decl_stmt|;
specifier|private
name|boolean
name|allowNull
decl_stmt|;
specifier|private
name|boolean
name|addEscapables
decl_stmt|;
specifier|private
name|String
name|needsEscapeStr
decl_stmt|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|()
block|{
return|return
name|typeNames
return|;
block|}
specifier|public
name|Category
index|[]
name|categories
parameter_list|()
block|{
return|return
name|categories
return|;
block|}
specifier|public
name|TypeInfo
index|[]
name|typeInfos
parameter_list|()
block|{
return|return
name|typeInfos
return|;
block|}
specifier|public
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
parameter_list|()
block|{
return|return
name|dataTypePhysicalVariations
return|;
block|}
specifier|public
name|PrimitiveCategory
index|[]
name|primitiveCategories
parameter_list|()
block|{
return|return
name|primitiveCategories
return|;
block|}
specifier|public
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|()
block|{
return|return
name|primitiveTypeInfos
return|;
block|}
specifier|public
name|StructObjectInspector
name|rowStructObjectInspector
parameter_list|()
block|{
return|return
name|rowStructObjectInspector
return|;
block|}
specifier|public
name|StructObjectInspector
name|partialRowStructObjectInspector
parameter_list|(
name|int
name|partialFieldCount
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|partialObjectInspectorList
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|partialFieldCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|partialFieldCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partialFieldCount
condition|;
name|i
operator|++
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"partial%d"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|partialObjectInspectorList
operator|.
name|add
argument_list|(
name|getObjectInspector
argument_list|(
name|typeInfos
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|objectInspectorList
argument_list|)
return|;
block|}
specifier|public
enum|enum
name|SupportedTypes
block|{
name|ALL
block|,
name|PRIMITIVES
block|,
name|ALL_EXCEPT_MAP
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Random
name|r
parameter_list|,
name|SupportedTypes
name|supportedTypes
parameter_list|,
name|int
name|maxComplexDepth
parameter_list|)
block|{
name|init
argument_list|(
name|r
argument_list|,
name|supportedTypes
argument_list|,
name|maxComplexDepth
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Random
name|r
parameter_list|,
name|SupportedTypes
name|supportedTypes
parameter_list|,
name|int
name|maxComplexDepth
parameter_list|,
name|boolean
name|allowNull
parameter_list|)
block|{
name|this
operator|.
name|r
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|allowNull
operator|=
name|allowNull
expr_stmt|;
name|chooseSchema
argument_list|(
name|supportedTypes
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|maxComplexDepth
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Random
name|r
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allowedTypeNameSet
parameter_list|,
name|int
name|maxComplexDepth
parameter_list|,
name|boolean
name|allowNull
parameter_list|)
block|{
name|this
operator|.
name|r
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|allowNull
operator|=
name|allowNull
expr_stmt|;
name|chooseSchema
argument_list|(
name|SupportedTypes
operator|.
name|ALL
argument_list|,
name|allowedTypeNameSet
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|maxComplexDepth
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initExplicitSchema
parameter_list|(
name|Random
name|r
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|explicitTypeNameList
parameter_list|,
name|int
name|maxComplexDepth
parameter_list|,
name|boolean
name|allowNull
parameter_list|,
name|List
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
name|explicitDataTypePhysicalVariationList
parameter_list|)
block|{
name|this
operator|.
name|r
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|allowNull
operator|=
name|allowNull
expr_stmt|;
name|chooseSchema
argument_list|(
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|null
argument_list|,
name|explicitTypeNameList
argument_list|,
name|explicitDataTypePhysicalVariationList
argument_list|,
name|maxComplexDepth
argument_list|)
expr_stmt|;
block|}
comment|/*    * For now, exclude CHAR until we determine why there is a difference (blank padding)    * serializing with LazyBinarySerializeWrite and the regular SerDe...    */
specifier|private
specifier|static
name|String
index|[]
name|possibleHivePrimitiveTypeNames
init|=
block|{
literal|"boolean"
block|,
literal|"tinyint"
block|,
literal|"smallint"
block|,
literal|"int"
block|,
literal|"bigint"
block|,
literal|"date"
block|,
literal|"float"
block|,
literal|"double"
block|,
literal|"string"
block|,
literal|"char"
block|,
literal|"varchar"
block|,
literal|"binary"
block|,
literal|"date"
block|,
literal|"timestamp"
block|,
literal|"interval_year_month"
block|,
literal|"interval_day_time"
block|,
literal|"decimal"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|possibleHiveComplexTypeNames
init|=
block|{
literal|"array"
block|,
literal|"struct"
block|,
literal|"uniontype"
block|,
literal|"map"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
name|getRandomTypeName
parameter_list|(
name|Random
name|random
parameter_list|,
name|SupportedTypes
name|supportedTypes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allowedTypeNameSet
parameter_list|)
block|{
name|String
name|typeName
init|=
literal|null
decl_stmt|;
do|do
block|{
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|typeName
operator|=
name|possibleHivePrimitiveTypeNames
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|possibleHivePrimitiveTypeNames
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|supportedTypes
condition|)
block|{
case|case
name|PRIMITIVES
case|:
name|typeName
operator|=
name|possibleHivePrimitiveTypeNames
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|possibleHivePrimitiveTypeNames
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
break|break;
case|case
name|ALL_EXCEPT_MAP
case|:
name|typeName
operator|=
name|possibleHiveComplexTypeNames
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|possibleHiveComplexTypeNames
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
expr_stmt|;
break|break;
case|case
name|ALL
case|:
name|typeName
operator|=
name|possibleHiveComplexTypeNames
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|possibleHiveComplexTypeNames
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
break|break;
block|}
block|}
block|}
do|while
condition|(
name|allowedTypeNameSet
operator|!=
literal|null
operator|&&
operator|!
name|allowedTypeNameSet
operator|.
name|contains
argument_list|(
name|typeName
argument_list|)
condition|)
do|;
return|return
name|typeName
return|;
block|}
specifier|public
specifier|static
name|String
name|getDecoratedTypeName
parameter_list|(
name|Random
name|random
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
return|return
name|getDecoratedTypeName
argument_list|(
name|random
argument_list|,
name|typeName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getDecoratedTypeName
parameter_list|(
name|Random
name|random
parameter_list|,
name|String
name|typeName
parameter_list|,
name|SupportedTypes
name|supportedTypes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allowedTypeNameSet
parameter_list|,
name|int
name|depth
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
name|depth
operator|++
expr_stmt|;
if|if
condition|(
name|depth
operator|<
name|maxDepth
condition|)
block|{
name|supportedTypes
operator|=
name|SupportedTypes
operator|.
name|PRIMITIVES
expr_stmt|;
block|}
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
specifier|final
name|int
name|maxLength
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"char(%d)"
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"varchar"
argument_list|)
condition|)
block|{
specifier|final
name|int
name|maxLength
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"varchar(%d)"
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"decimal"
argument_list|)
condition|)
block|{
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"decimal(%d,%d)"
argument_list|,
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_PRECISION
argument_list|,
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_SCALE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"array"
argument_list|)
condition|)
block|{
name|String
name|elementTypeName
init|=
name|getRandomTypeName
argument_list|(
name|random
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|)
decl_stmt|;
name|elementTypeName
operator|=
name|getDecoratedTypeName
argument_list|(
name|random
argument_list|,
name|elementTypeName
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|,
name|depth
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"array<%s>"
argument_list|,
name|elementTypeName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"map"
argument_list|)
condition|)
block|{
name|String
name|keyTypeName
init|=
name|getRandomTypeName
argument_list|(
name|random
argument_list|,
name|SupportedTypes
operator|.
name|PRIMITIVES
argument_list|,
name|allowedTypeNameSet
argument_list|)
decl_stmt|;
name|keyTypeName
operator|=
name|getDecoratedTypeName
argument_list|(
name|random
argument_list|,
name|keyTypeName
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|,
name|depth
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
name|String
name|valueTypeName
init|=
name|getRandomTypeName
argument_list|(
name|random
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|)
decl_stmt|;
name|valueTypeName
operator|=
name|getDecoratedTypeName
argument_list|(
name|random
argument_list|,
name|valueTypeName
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|,
name|depth
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"map<%s,%s>"
argument_list|,
name|keyTypeName
argument_list|,
name|valueTypeName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"struct"
argument_list|)
condition|)
block|{
specifier|final
name|int
name|fieldCount
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldTypeName
init|=
name|getRandomTypeName
argument_list|(
name|random
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|)
decl_stmt|;
name|fieldTypeName
operator|=
name|getDecoratedTypeName
argument_list|(
name|random
argument_list|,
name|fieldTypeName
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|,
name|depth
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"col"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fieldTypeName
argument_list|)
expr_stmt|;
block|}
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"struct<%s>"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"struct"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"uniontype"
argument_list|)
condition|)
block|{
specifier|final
name|int
name|fieldCount
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldTypeName
init|=
name|getRandomTypeName
argument_list|(
name|random
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|)
decl_stmt|;
name|fieldTypeName
operator|=
name|getDecoratedTypeName
argument_list|(
name|random
argument_list|,
name|fieldTypeName
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|,
name|depth
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fieldTypeName
argument_list|)
expr_stmt|;
block|}
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"uniontype<%s>"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|typeName
return|;
block|}
specifier|private
name|String
name|getDecoratedTypeName
parameter_list|(
name|String
name|typeName
parameter_list|,
name|SupportedTypes
name|supportedTypes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allowedTypeNameSet
parameter_list|,
name|int
name|depth
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
return|return
name|getDecoratedTypeName
argument_list|(
name|r
argument_list|,
name|typeName
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|,
name|depth
argument_list|,
name|maxDepth
argument_list|)
return|;
block|}
specifier|private
name|ObjectInspector
name|getObjectInspector
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
return|return
name|getObjectInspector
argument_list|(
name|typeInfo
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
return|;
block|}
specifier|private
name|ObjectInspector
name|getObjectInspector
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|)
block|{
specifier|final
name|ObjectInspector
name|objectInspector
decl_stmt|;
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
specifier|final
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
decl_stmt|;
if|if
condition|(
name|primitiveTypeInfo
operator|instanceof
name|DecimalTypeInfo
operator|&&
name|dataTypePhysicalVariation
operator|==
name|DataTypePhysicalVariation
operator|.
name|DECIMAL_64
condition|)
block|{
name|objectInspector
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|objectInspector
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|primitiveTypeInfo
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|MAP
case|:
block|{
specifier|final
name|MapTypeInfo
name|mapType
init|=
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|MapObjectInspector
name|mapInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|getObjectInspector
argument_list|(
name|mapType
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
argument_list|,
name|getObjectInspector
argument_list|(
name|mapType
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|objectInspector
operator|=
name|mapInspector
expr_stmt|;
block|}
break|break;
case|case
name|LIST
case|:
block|{
specifier|final
name|ListTypeInfo
name|listType
init|=
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|ListObjectInspector
name|listInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|getObjectInspector
argument_list|(
name|listType
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|objectInspector
operator|=
name|listInspector
expr_stmt|;
block|}
break|break;
case|case
name|STRUCT
case|:
block|{
specifier|final
name|StructTypeInfo
name|structType
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypes
init|=
name|structType
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeInfo
name|fieldType
range|:
name|fieldTypes
control|)
block|{
name|fieldInspectors
operator|.
name|add
argument_list|(
name|getObjectInspector
argument_list|(
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StructObjectInspector
name|structInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|structType
operator|.
name|getAllStructFieldNames
argument_list|()
argument_list|,
name|fieldInspectors
argument_list|)
decl_stmt|;
name|objectInspector
operator|=
name|structInspector
expr_stmt|;
block|}
break|break;
case|case
name|UNION
case|:
block|{
specifier|final
name|UnionTypeInfo
name|unionType
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypes
init|=
name|unionType
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeInfo
name|fieldType
range|:
name|fieldTypes
control|)
block|{
name|fieldInspectors
operator|.
name|add
argument_list|(
name|getObjectInspector
argument_list|(
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UnionObjectInspector
name|unionInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardUnionObjectInspector
argument_list|(
name|fieldInspectors
argument_list|)
decl_stmt|;
name|objectInspector
operator|=
name|unionInspector
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected category "
operator|+
name|typeInfo
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|objectInspector
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|objectInspector
return|;
block|}
specifier|private
name|void
name|chooseSchema
parameter_list|(
name|SupportedTypes
name|supportedTypes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allowedTypeNameSet
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|explicitTypeNameList
parameter_list|,
name|List
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
name|explicitDataTypePhysicalVariationList
parameter_list|,
name|int
name|maxComplexDepth
parameter_list|)
block|{
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|hashSet
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|allTypes
decl_stmt|;
specifier|final
name|boolean
name|onlyOne
decl_stmt|;
if|if
condition|(
name|explicitTypeNameList
operator|!=
literal|null
condition|)
block|{
name|columnCount
operator|=
name|explicitTypeNameList
operator|.
name|size
argument_list|()
expr_stmt|;
name|allTypes
operator|=
literal|false
expr_stmt|;
name|onlyOne
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allowedTypeNameSet
operator|!=
literal|null
condition|)
block|{
name|columnCount
operator|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|allTypes
operator|=
literal|false
expr_stmt|;
name|onlyOne
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|onlyOne
operator|=
operator|(
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|7
operator|)
expr_stmt|;
if|if
condition|(
name|onlyOne
condition|)
block|{
name|columnCount
operator|=
literal|1
expr_stmt|;
name|allTypes
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|allTypes
operator|=
name|r
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|allTypes
condition|)
block|{
switch|switch
condition|(
name|supportedTypes
condition|)
block|{
case|case
name|ALL
case|:
name|columnCount
operator|=
name|possibleHivePrimitiveTypeNames
operator|.
name|length
operator|+
name|possibleHiveComplexTypeNames
operator|.
name|length
expr_stmt|;
break|break;
case|case
name|ALL_EXCEPT_MAP
case|:
name|columnCount
operator|=
name|possibleHivePrimitiveTypeNames
operator|.
name|length
operator|+
name|possibleHiveComplexTypeNames
operator|.
name|length
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|PRIMITIVES
case|:
name|columnCount
operator|=
name|possibleHivePrimitiveTypeNames
operator|.
name|length
expr_stmt|;
break|break;
block|}
name|hashSet
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnCount
operator|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|typeNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|columnCount
argument_list|)
expr_stmt|;
name|categories
operator|=
operator|new
name|Category
index|[
name|columnCount
index|]
expr_stmt|;
name|typeInfos
operator|=
operator|new
name|TypeInfo
index|[
name|columnCount
index|]
expr_stmt|;
name|dataTypePhysicalVariations
operator|=
operator|new
name|DataTypePhysicalVariation
index|[
name|columnCount
index|]
expr_stmt|;
name|objectInspectorList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|columnCount
argument_list|)
expr_stmt|;
name|primitiveCategories
operator|=
operator|new
name|PrimitiveCategory
index|[
name|columnCount
index|]
expr_stmt|;
name|primitiveTypeInfos
operator|=
operator|new
name|PrimitiveTypeInfo
index|[
name|columnCount
index|]
expr_stmt|;
name|primitiveObjectInspectorList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|columnCount
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|columnCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnCount
condition|;
name|c
operator|++
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"col%d"
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|typeName
decl_stmt|;
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
init|=
name|DataTypePhysicalVariation
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
name|explicitTypeNameList
operator|!=
literal|null
condition|)
block|{
name|typeName
operator|=
name|explicitTypeNameList
operator|.
name|get
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|dataTypePhysicalVariation
operator|=
name|explicitDataTypePhysicalVariationList
operator|.
name|get
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|onlyOne
operator|||
name|allowedTypeNameSet
operator|!=
literal|null
condition|)
block|{
name|typeName
operator|=
name|getRandomTypeName
argument_list|(
name|r
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|typeNum
decl_stmt|;
if|if
condition|(
name|allTypes
condition|)
block|{
name|int
name|maxTypeNum
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|supportedTypes
condition|)
block|{
case|case
name|PRIMITIVES
case|:
name|maxTypeNum
operator|=
name|possibleHivePrimitiveTypeNames
operator|.
name|length
expr_stmt|;
break|break;
case|case
name|ALL_EXCEPT_MAP
case|:
name|maxTypeNum
operator|=
name|possibleHivePrimitiveTypeNames
operator|.
name|length
operator|+
name|possibleHiveComplexTypeNames
operator|.
name|length
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|ALL
case|:
name|maxTypeNum
operator|=
name|possibleHivePrimitiveTypeNames
operator|.
name|length
operator|+
name|possibleHiveComplexTypeNames
operator|.
name|length
expr_stmt|;
break|break;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|typeNum
operator|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxTypeNum
argument_list|)
expr_stmt|;
name|Integer
name|typeNumInteger
init|=
operator|new
name|Integer
argument_list|(
name|typeNum
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hashSet
operator|.
name|contains
argument_list|(
name|typeNumInteger
argument_list|)
condition|)
block|{
name|hashSet
operator|.
name|add
argument_list|(
name|typeNumInteger
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|supportedTypes
operator|==
name|SupportedTypes
operator|.
name|PRIMITIVES
operator|||
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|typeNum
operator|=
name|r
operator|.
name|nextInt
argument_list|(
name|possibleHivePrimitiveTypeNames
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|typeNum
operator|=
name|possibleHivePrimitiveTypeNames
operator|.
name|length
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|possibleHiveComplexTypeNames
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportedTypes
operator|==
name|SupportedTypes
operator|.
name|ALL_EXCEPT_MAP
condition|)
block|{
name|typeNum
operator|--
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|typeNum
operator|<
name|possibleHivePrimitiveTypeNames
operator|.
name|length
condition|)
block|{
name|typeName
operator|=
name|possibleHivePrimitiveTypeNames
index|[
name|typeNum
index|]
expr_stmt|;
block|}
else|else
block|{
name|typeName
operator|=
name|possibleHiveComplexTypeNames
index|[
name|typeNum
operator|-
name|possibleHivePrimitiveTypeNames
operator|.
name|length
index|]
expr_stmt|;
block|}
block|}
name|String
name|decoratedTypeName
init|=
name|getDecoratedTypeName
argument_list|(
name|typeName
argument_list|,
name|supportedTypes
argument_list|,
name|allowedTypeNameSet
argument_list|,
literal|0
argument_list|,
name|maxComplexDepth
argument_list|)
decl_stmt|;
specifier|final
name|TypeInfo
name|typeInfo
decl_stmt|;
try|try
block|{
name|typeInfo
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|decoratedTypeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot convert type name "
operator|+
name|decoratedTypeName
operator|+
literal|" to a type "
operator|+
name|e
argument_list|)
throw|;
block|}
name|typeInfos
index|[
name|c
index|]
operator|=
name|typeInfo
expr_stmt|;
name|dataTypePhysicalVariations
index|[
name|c
index|]
operator|=
name|dataTypePhysicalVariation
expr_stmt|;
specifier|final
name|Category
name|category
init|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|categories
index|[
name|c
index|]
operator|=
name|category
expr_stmt|;
name|ObjectInspector
name|objectInspector
init|=
name|getObjectInspector
argument_list|(
name|typeInfo
argument_list|,
name|dataTypePhysicalVariation
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
specifier|final
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|primitiveTypeInfos
index|[
name|c
index|]
operator|=
name|primitiveTypeInfo
expr_stmt|;
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|primitiveCategories
index|[
name|c
index|]
operator|=
name|primitiveCategory
expr_stmt|;
name|primitiveObjectInspectorList
operator|.
name|add
argument_list|(
name|objectInspector
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
name|primitiveObjectInspectorList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected catagory "
operator|+
name|category
argument_list|)
throw|;
block|}
name|objectInspectorList
operator|.
name|add
argument_list|(
name|objectInspector
argument_list|)
expr_stmt|;
if|if
condition|(
name|category
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{       }
name|typeNames
operator|.
name|add
argument_list|(
name|decoratedTypeName
argument_list|)
expr_stmt|;
block|}
name|rowStructObjectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|objectInspectorList
argument_list|)
expr_stmt|;
name|alphabets
operator|=
operator|new
name|String
index|[
name|columnCount
index|]
expr_stmt|;
block|}
specifier|public
name|Object
index|[]
index|[]
name|randomRows
parameter_list|(
name|int
name|n
parameter_list|)
block|{
specifier|final
name|Object
index|[]
index|[]
name|result
init|=
operator|new
name|Object
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|randomRow
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Object
index|[]
name|randomRow
parameter_list|()
block|{
specifier|final
name|Object
name|row
index|[]
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnCount
condition|;
name|c
operator|++
control|)
block|{
name|row
index|[
name|c
index|]
operator|=
name|randomWritable
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
specifier|public
name|Object
index|[]
name|randomRow
parameter_list|(
name|boolean
name|allowNull
parameter_list|)
block|{
specifier|final
name|Object
name|row
index|[]
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnCount
condition|;
name|c
operator|++
control|)
block|{
name|row
index|[
name|c
index|]
operator|=
name|randomWritable
argument_list|(
name|typeInfos
index|[
name|c
index|]
argument_list|,
name|objectInspectorList
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|,
name|allowNull
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
specifier|public
name|Object
index|[]
name|randomPrimitiveRow
parameter_list|(
name|int
name|columnCount
parameter_list|)
block|{
return|return
name|randomPrimitiveRow
argument_list|(
name|columnCount
argument_list|,
name|r
argument_list|,
name|primitiveTypeInfos
argument_list|,
name|dataTypePhysicalVariations
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
index|[]
name|randomPrimitiveRow
parameter_list|(
name|int
name|columnCount
parameter_list|,
name|Random
name|r
parameter_list|,
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|,
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
parameter_list|)
block|{
specifier|final
name|Object
name|row
index|[]
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnCount
condition|;
name|c
operator|++
control|)
block|{
name|row
index|[
name|c
index|]
operator|=
name|randomPrimitiveObject
argument_list|(
name|r
argument_list|,
name|primitiveTypeInfos
index|[
name|c
index|]
argument_list|,
name|dataTypePhysicalVariations
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
specifier|public
specifier|static
name|Object
index|[]
name|randomWritablePrimitiveRow
parameter_list|(
name|int
name|columnCount
parameter_list|,
name|Random
name|r
parameter_list|,
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|)
block|{
return|return
name|randomWritablePrimitiveRow
argument_list|(
name|columnCount
argument_list|,
name|r
argument_list|,
name|primitiveTypeInfos
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
index|[]
name|randomWritablePrimitiveRow
parameter_list|(
name|int
name|columnCount
parameter_list|,
name|Random
name|r
parameter_list|,
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|,
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
parameter_list|)
block|{
specifier|final
name|Object
name|row
index|[]
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnCount
condition|;
name|c
operator|++
control|)
block|{
specifier|final
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
name|primitiveTypeInfos
index|[
name|c
index|]
decl_stmt|;
specifier|final
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
init|=
operator|(
name|dataTypePhysicalVariations
operator|!=
literal|null
condition|?
name|dataTypePhysicalVariations
index|[
name|c
index|]
else|:
name|DataTypePhysicalVariation
operator|.
name|NONE
operator|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|objectInspector
decl_stmt|;
if|if
condition|(
name|primitiveTypeInfo
operator|instanceof
name|DecimalTypeInfo
operator|&&
name|dataTypePhysicalVariation
operator|==
name|DataTypePhysicalVariation
operator|.
name|DECIMAL_64
condition|)
block|{
name|objectInspector
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|objectInspector
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|primitiveTypeInfo
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|object
init|=
name|randomPrimitiveObject
argument_list|(
name|r
argument_list|,
name|primitiveTypeInfo
argument_list|)
decl_stmt|;
name|row
index|[
name|c
index|]
operator|=
name|getWritablePrimitiveObject
argument_list|(
name|primitiveTypeInfo
argument_list|,
name|objectInspector
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
specifier|public
name|void
name|addBinarySortableAlphabets
parameter_list|()
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnCount
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|primitiveCategories
index|[
name|c
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
switch|switch
condition|(
name|primitiveCategories
index|[
name|c
index|]
condition|)
block|{
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|10
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|32
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|96
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|alwaysIndex
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|bytes
index|[
name|alwaysIndex
index|]
operator|=
literal|0
expr_stmt|;
comment|// Must be escaped by BinarySortable.
name|int
name|alwaysIndex2
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|bytes
index|[
name|alwaysIndex2
index|]
operator|=
literal|1
expr_stmt|;
comment|// Must be escaped by BinarySortable.
name|alphabets
index|[
name|c
index|]
operator|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// No alphabet needed.
break|break;
block|}
block|}
block|}
specifier|public
name|void
name|addEscapables
parameter_list|(
name|String
name|needsEscapeStr
parameter_list|)
block|{
name|addEscapables
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|needsEscapeStr
operator|=
name|needsEscapeStr
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|Object
index|[]
index|[]
name|rows
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|rows
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|oi
argument_list|,
name|rows
index|[
name|j
index|]
argument_list|,
name|oi
argument_list|)
operator|>
literal|0
condition|)
block|{
name|Object
index|[]
name|t
init|=
name|rows
index|[
name|i
index|]
decl_stmt|;
name|rows
index|[
name|i
index|]
operator|=
name|rows
index|[
name|j
index|]
expr_stmt|;
name|rows
index|[
name|j
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|sort
parameter_list|(
name|Object
index|[]
index|[]
name|rows
parameter_list|)
block|{
name|VectorRandomRowSource
operator|.
name|sort
argument_list|(
name|rows
argument_list|,
name|rowStructObjectInspector
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Object
name|getWritablePrimitiveObject
parameter_list|(
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
return|return
name|getWritablePrimitiveObject
argument_list|(
name|primitiveTypeInfo
argument_list|,
name|objectInspector
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|,
name|object
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|getWritablePrimitiveObject
parameter_list|(
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
switch|switch
condition|(
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|(
operator|(
name|WritableBooleanObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|boolean
operator|)
name|object
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|(
operator|(
name|WritableByteObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|byte
operator|)
name|object
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|(
operator|(
name|WritableShortObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
name|object
argument_list|)
return|;
case|case
name|INT
case|:
return|return
operator|(
operator|(
name|WritableIntObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|int
operator|)
name|object
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|(
operator|(
name|WritableLongObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|long
operator|)
name|object
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|(
operator|(
name|WritableDateObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|Date
operator|)
name|object
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|(
operator|(
name|WritableFloatObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|float
operator|)
name|object
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
operator|(
name|WritableDoubleObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|double
operator|)
name|object
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|(
operator|(
name|WritableStringObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|String
operator|)
name|object
argument_list|)
return|;
case|case
name|CHAR
case|:
block|{
name|WritableHiveCharObjectInspector
name|writableCharObjectInspector
init|=
operator|new
name|WritableHiveCharObjectInspector
argument_list|(
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
argument_list|)
decl_stmt|;
return|return
name|writableCharObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|HiveChar
operator|)
name|object
argument_list|)
return|;
block|}
case|case
name|VARCHAR
case|:
block|{
name|WritableHiveVarcharObjectInspector
name|writableVarcharObjectInspector
init|=
operator|new
name|WritableHiveVarcharObjectInspector
argument_list|(
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfo
argument_list|)
decl_stmt|;
return|return
name|writableVarcharObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|HiveVarchar
operator|)
name|object
argument_list|)
return|;
block|}
case|case
name|BINARY
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|object
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|(
operator|(
name|WritableTimestampObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|Timestamp
operator|)
name|object
argument_list|)
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
operator|(
operator|(
name|WritableHiveIntervalYearMonthObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|HiveIntervalYearMonth
operator|)
name|object
argument_list|)
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
return|return
operator|(
operator|(
name|WritableHiveIntervalDayTimeObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|HiveIntervalDayTime
operator|)
name|object
argument_list|)
return|;
case|case
name|DECIMAL
case|:
block|{
if|if
condition|(
name|dataTypePhysicalVariation
operator|==
name|dataTypePhysicalVariation
operator|.
name|DECIMAL_64
condition|)
block|{
specifier|final
name|long
name|value
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|HiveDecimal
condition|)
block|{
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|value
operator|=
operator|new
name|HiveDecimalWritable
argument_list|(
operator|(
name|HiveDecimal
operator|)
name|object
argument_list|)
operator|.
name|serialize64
argument_list|(
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
operator|(
name|long
operator|)
name|object
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|WritableLongObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
name|WritableHiveDecimalObjectInspector
name|writableDecimalObjectInspector
init|=
operator|new
name|WritableHiveDecimalObjectInspector
argument_list|(
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
argument_list|)
decl_stmt|;
return|return
name|writableDecimalObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|HiveDecimal
operator|)
name|object
argument_list|)
return|;
block|}
block|}
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown primitive category "
operator|+
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|randomWritable
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|randomWritable
argument_list|(
name|typeInfos
index|[
name|column
index|]
argument_list|,
name|objectInspectorList
operator|.
name|get
argument_list|(
name|column
argument_list|)
argument_list|,
name|dataTypePhysicalVariations
index|[
name|column
index|]
argument_list|,
name|allowNull
argument_list|)
return|;
block|}
specifier|public
name|Object
name|randomWritable
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|)
block|{
return|return
name|randomWritable
argument_list|(
name|typeInfo
argument_list|,
name|objectInspector
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|,
name|allowNull
argument_list|)
return|;
block|}
specifier|public
name|Object
name|randomWritable
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|boolean
name|allowNull
parameter_list|)
block|{
return|return
name|randomWritable
argument_list|(
name|typeInfo
argument_list|,
name|objectInspector
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|,
name|allowNull
argument_list|)
return|;
block|}
specifier|public
name|Object
name|randomWritable
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|,
name|boolean
name|allowNull
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
if|if
condition|(
name|allowNull
operator|&&
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Object
name|object
init|=
name|randomPrimitiveObject
argument_list|(
name|r
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
argument_list|)
decl_stmt|;
return|return
name|getWritablePrimitiveObject
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
argument_list|,
name|objectInspector
argument_list|,
name|dataTypePhysicalVariation
argument_list|,
name|object
argument_list|)
return|;
block|}
case|case
name|LIST
case|:
block|{
if|if
condition|(
name|allowNull
operator|&&
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Always generate a list with at least 1 value?
specifier|final
name|int
name|elementCount
init|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|StandardListObjectInspector
name|listObjectInspector
init|=
operator|(
name|StandardListObjectInspector
operator|)
name|objectInspector
decl_stmt|;
specifier|final
name|ObjectInspector
name|elementObjectInspector
init|=
name|listObjectInspector
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
name|elementTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|elementObjectInspector
argument_list|)
decl_stmt|;
name|boolean
name|isStringFamily
init|=
literal|false
decl_stmt|;
name|PrimitiveCategory
name|primitiveCategory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|elementTypeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|primitiveCategory
operator|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|elementTypeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
if|if
condition|(
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|STRING
operator|||
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|BINARY
operator|||
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|CHAR
operator|||
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|VARCHAR
condition|)
block|{
name|isStringFamily
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|final
name|Object
name|listObj
init|=
name|listObjectInspector
operator|.
name|create
argument_list|(
name|elementCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elementCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Object
name|ele
init|=
name|randomWritable
argument_list|(
name|elementTypeInfo
argument_list|,
name|elementObjectInspector
argument_list|,
name|allowNull
argument_list|)
decl_stmt|;
comment|// UNDONE: For now, a 1-element list with a null element is a null list...
if|if
condition|(
name|ele
operator|==
literal|null
operator|&&
name|elementCount
operator|==
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isStringFamily
operator|&&
name|elementCount
operator|==
literal|1
condition|)
block|{
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|STRING
case|:
if|if
condition|(
operator|(
operator|(
name|Text
operator|)
name|ele
operator|)
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
break|break;
case|case
name|BINARY
case|:
if|if
condition|(
operator|(
operator|(
name|BytesWritable
operator|)
name|ele
operator|)
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
break|break;
case|case
name|CHAR
case|:
if|if
condition|(
operator|(
operator|(
name|HiveCharWritable
operator|)
name|ele
operator|)
operator|.
name|getHiveChar
argument_list|()
operator|.
name|getStrippedValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
break|break;
case|case
name|VARCHAR
case|:
if|if
condition|(
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|ele
operator|)
operator|.
name|getHiveVarchar
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategory
argument_list|)
throw|;
block|}
block|}
name|listObjectInspector
operator|.
name|set
argument_list|(
name|listObj
argument_list|,
name|i
argument_list|,
name|ele
argument_list|)
expr_stmt|;
block|}
return|return
name|listObj
return|;
block|}
case|case
name|MAP
case|:
block|{
if|if
condition|(
name|allowNull
operator|&&
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|keyPairCount
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|StandardMapObjectInspector
name|mapObjectInspector
init|=
operator|(
name|StandardMapObjectInspector
operator|)
name|objectInspector
decl_stmt|;
specifier|final
name|ObjectInspector
name|keyObjectInspector
init|=
name|mapObjectInspector
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
name|keyTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|keyObjectInspector
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|valueObjectInspector
init|=
name|mapObjectInspector
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
name|valueTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|valueObjectInspector
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|mapObj
init|=
name|mapObjectInspector
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyPairCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
name|randomWritable
argument_list|(
name|keyTypeInfo
argument_list|,
name|keyObjectInspector
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|randomWritable
argument_list|(
name|valueTypeInfo
argument_list|,
name|valueObjectInspector
argument_list|)
decl_stmt|;
name|mapObjectInspector
operator|.
name|put
argument_list|(
name|mapObj
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|mapObj
return|;
block|}
case|case
name|STRUCT
case|:
block|{
if|if
condition|(
name|allowNull
operator|&&
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|StandardStructObjectInspector
name|structObjectInspector
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|objectInspector
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefsList
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|fieldRefsList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|structObj
init|=
name|structObjectInspector
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StructField
name|fieldRef
init|=
name|fieldRefsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|fieldObjectInspector
init|=
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|fieldObjectInspector
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|fieldObj
init|=
name|randomWritable
argument_list|(
name|fieldTypeInfo
argument_list|,
name|fieldObjectInspector
argument_list|)
decl_stmt|;
name|structObjectInspector
operator|.
name|setStructFieldData
argument_list|(
name|structObj
argument_list|,
name|fieldRef
argument_list|,
name|fieldObj
argument_list|)
expr_stmt|;
block|}
return|return
name|structObj
return|;
block|}
case|case
name|UNION
case|:
block|{
specifier|final
name|StandardUnionObjectInspector
name|unionObjectInspector
init|=
operator|(
name|StandardUnionObjectInspector
operator|)
name|objectInspector
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|objectInspectorList
init|=
name|unionObjectInspector
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
specifier|final
name|int
name|unionCount
init|=
name|objectInspectorList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|tag
init|=
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|(
name|unionCount
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|fieldObjectInspector
init|=
name|objectInspectorList
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|fieldObjectInspector
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|fieldObj
init|=
name|randomWritable
argument_list|(
name|fieldTypeInfo
argument_list|,
name|fieldObjectInspector
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldObj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
return|return
operator|new
name|StandardUnion
argument_list|(
name|tag
argument_list|,
name|fieldObj
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected category "
operator|+
name|typeInfo
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|randomPrimitiveObject
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|randomPrimitiveObject
argument_list|(
name|r
argument_list|,
name|primitiveTypeInfos
index|[
name|column
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|randomPrimitiveObject
parameter_list|(
name|Random
name|r
parameter_list|,
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|)
block|{
return|return
name|randomPrimitiveObject
argument_list|(
name|r
argument_list|,
name|primitiveTypeInfo
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|randomPrimitiveObject
parameter_list|(
name|Random
name|r
parameter_list|,
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|)
block|{
switch|switch
condition|(
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextBoolean
argument_list|()
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|RandomTypeUtil
operator|.
name|getRandDate
argument_list|(
name|r
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
operator|*
literal|10
operator|-
literal|5
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
operator|*
literal|10
operator|-
literal|5
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|RandomTypeUtil
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
name|getRandHiveChar
argument_list|(
name|r
argument_list|,
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
name|getRandHiveVarchar
argument_list|(
name|r
argument_list|,
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfo
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
name|getRandBinary
argument_list|(
name|r
argument_list|,
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
name|getRandIntervalYearMonth
argument_list|(
name|r
argument_list|)
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
return|return
name|getRandIntervalDayTime
argument_list|(
name|r
argument_list|)
return|;
case|case
name|DECIMAL
case|:
block|{
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|HiveDecimal
name|hiveDecimal
init|=
name|getRandHiveDecimal
argument_list|(
name|r
argument_list|,
name|decimalTypeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataTypePhysicalVariation
operator|==
name|DataTypePhysicalVariation
operator|.
name|DECIMAL_64
condition|)
block|{
return|return
operator|new
name|HiveDecimalWritable
argument_list|(
name|hiveDecimal
argument_list|)
operator|.
name|serialize64
argument_list|(
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
argument_list|)
return|;
block|}
return|return
name|hiveDecimal
return|;
block|}
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown primitive category "
operator|+
name|primitiveTypeInfo
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|randomPrimitiveDateStringObject
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|Date
name|randomDate
init|=
name|RandomTypeUtil
operator|.
name|getRandDate
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|String
name|randomDateString
init|=
name|randomDate
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|randomDateString
return|;
block|}
specifier|public
specifier|static
name|String
name|randomPrimitiveTimestampStringObject
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|Timestamp
name|randomTimestamp
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|String
name|randomTimestampString
init|=
name|randomTimestamp
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|randomTimestampString
return|;
block|}
specifier|public
specifier|static
name|HiveChar
name|getRandHiveChar
parameter_list|(
name|Random
name|r
parameter_list|,
name|CharTypeInfo
name|charTypeInfo
parameter_list|)
block|{
specifier|final
name|int
name|maxLength
init|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|charTypeInfo
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|randomString
init|=
name|RandomTypeUtil
operator|.
name|getRandString
argument_list|(
name|r
argument_list|,
literal|"abcdefghijklmnopqrstuvwxyz"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveChar
argument_list|(
name|randomString
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HiveVarchar
name|getRandHiveVarchar
parameter_list|(
name|Random
name|r
parameter_list|,
name|VarcharTypeInfo
name|varcharTypeInfo
parameter_list|,
name|String
name|alphabet
parameter_list|)
block|{
specifier|final
name|int
name|maxLength
init|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|varcharTypeInfo
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|randomString
init|=
name|RandomTypeUtil
operator|.
name|getRandString
argument_list|(
name|r
argument_list|,
name|alphabet
argument_list|,
literal|100
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveVarchar
argument_list|(
name|randomString
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HiveVarchar
name|getRandHiveVarchar
parameter_list|(
name|Random
name|r
parameter_list|,
name|VarcharTypeInfo
name|varcharTypeInfo
parameter_list|)
block|{
return|return
name|getRandHiveVarchar
argument_list|(
name|r
argument_list|,
name|varcharTypeInfo
argument_list|,
literal|"abcdefghijklmnopqrstuvwxyz"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getRandBinary
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|len
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|bytes
index|[
name|j
index|]
operator|=
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DECIMAL_CHARS
init|=
literal|"0123456789"
decl_stmt|;
specifier|public
specifier|static
name|HiveDecimal
name|getRandHiveDecimal
parameter_list|(
name|Random
name|r
parameter_list|,
name|DecimalTypeInfo
name|decimalTypeInfo
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|precision
init|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|int
name|scale
init|=
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|precision
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|integerDigits
init|=
name|precision
operator|-
name|scale
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|integerDigits
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|RandomTypeUtil
operator|.
name|getRandString
argument_list|(
name|r
argument_list|,
name|DECIMAL_CHARS
argument_list|,
name|integerDigits
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scale
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|RandomTypeUtil
operator|.
name|getRandString
argument_list|(
name|r
argument_list|,
name|DECIMAL_CHARS
argument_list|,
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dec
operator|!=
literal|null
condition|)
block|{
return|return
name|dec
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|HiveIntervalYearMonth
name|getRandIntervalYearMonth
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
specifier|final
name|String
name|yearMonthSignStr
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|0
condition|?
literal|""
else|:
literal|"-"
decl_stmt|;
specifier|final
name|String
name|intervalYearMonthStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s%d-%d"
argument_list|,
name|yearMonthSignStr
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1800
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|)
argument_list|,
comment|// year
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// month
specifier|final
name|HiveIntervalYearMonth
name|intervalYearMonthVal
init|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|intervalYearMonthStr
argument_list|)
decl_stmt|;
return|return
name|intervalYearMonthVal
return|;
block|}
specifier|public
specifier|static
name|HiveIntervalDayTime
name|getRandIntervalDayTime
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|String
name|optionalNanos
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|1
condition|)
block|{
name|optionalNanos
operator|=
name|String
operator|.
name|format
argument_list|(
literal|".%09d"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|DateUtils
operator|.
name|NANOS_PER_SEC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|yearMonthSignStr
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|0
condition|?
literal|""
else|:
literal|"-"
decl_stmt|;
specifier|final
name|String
name|dayTimeStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s%d %02d:%02d:%02d%s"
argument_list|,
name|yearMonthSignStr
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|28
argument_list|)
argument_list|)
argument_list|,
comment|// day
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|24
argument_list|)
argument_list|)
argument_list|,
comment|// hour
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|,
comment|// minute
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|,
comment|// second
name|optionalNanos
argument_list|)
decl_stmt|;
name|HiveIntervalDayTime
name|intervalDayTimeVal
init|=
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|dayTimeStr
argument_list|)
decl_stmt|;
return|return
name|intervalDayTimeVal
return|;
block|}
block|}
end_class

end_unit

