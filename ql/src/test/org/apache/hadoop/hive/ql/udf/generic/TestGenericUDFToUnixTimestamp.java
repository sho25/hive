begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFToUnixTimestamp
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
name|void
name|runAndVerify
parameter_list|(
name|GenericUDFToUnixTimeStamp
name|udf
parameter_list|,
name|Object
name|arg
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
index|[]
name|args
init|=
block|{
operator|new
name|DeferredJavaObject
argument_list|(
name|arg
argument_list|)
block|}
decl_stmt|;
name|Object
name|result
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|runAndVerify
parameter_list|(
name|GenericUDFToUnixTimeStamp
name|udf
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
index|[]
name|args
init|=
block|{
operator|new
name|DeferredJavaObject
argument_list|(
name|arg1
argument_list|)
block|,
operator|new
name|DeferredJavaObject
argument_list|(
name|arg2
argument_list|)
block|}
decl_stmt|;
name|Object
name|result
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTimestamp
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFToUnixTimeStamp
name|udf
init|=
operator|new
name|GenericUDFToUnixTimeStamp
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Timestamp
name|ts
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|)
decl_stmt|;
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|TimestampWritableV2
argument_list|(
name|ts
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|ts
operator|.
name|toEpochSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ts
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2001-02-03 01:02:03"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|TimestampWritableV2
argument_list|(
name|ts
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|ts
operator|.
name|toEpochSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test null values
name|runAndVerify
argument_list|(
name|udf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDate
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFToUnixTimeStamp
name|udf
init|=
operator|new
name|GenericUDFToUnixTimeStamp
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Date
name|date
init|=
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01"
argument_list|)
decl_stmt|;
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|DateWritableV2
argument_list|(
name|date
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|date
operator|.
name|toEpochSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test null values
name|runAndVerify
argument_list|(
name|udf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testString
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFToUnixTimeStamp
name|udf1
init|=
operator|new
name|GenericUDFToUnixTimeStamp
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|udf1
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|String
name|val
init|=
literal|"2001-01-01 01:02:03"
decl_stmt|;
name|runAndVerify
argument_list|(
name|udf1
argument_list|,
operator|new
name|Text
argument_list|(
name|val
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
operator|.
name|toEpochSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test null values
name|runAndVerify
argument_list|(
name|udf1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Try 2-arg version
name|GenericUDFToUnixTimeStamp
name|udf2
init|=
operator|new
name|GenericUDFToUnixTimeStamp
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|args2
init|=
block|{
name|valueOI
block|,
name|valueOI
block|}
decl_stmt|;
name|udf2
operator|.
name|initialize
argument_list|(
name|args2
argument_list|)
expr_stmt|;
name|val
operator|=
literal|"2001-01-01"
expr_stmt|;
name|String
name|format
init|=
literal|"yyyy-MM-dd"
decl_stmt|;
name|runAndVerify
argument_list|(
name|udf2
argument_list|,
operator|new
name|Text
argument_list|(
name|val
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|format
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
operator|.
name|toEpochSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test null values
name|runAndVerify
argument_list|(
name|udf2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|udf2
argument_list|,
literal|null
argument_list|,
operator|new
name|Text
argument_list|(
name|format
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|udf2
argument_list|,
operator|new
name|Text
argument_list|(
name|val
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

