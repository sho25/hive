begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|HivePointLookupOptimizerRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFConcat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRelSignature
block|{
annotation|@
name|Mock
specifier|private
name|RelOptSchema
name|schemaMock
decl_stmt|;
annotation|@
name|Mock
name|RelOptHiveTable
name|tableMock
decl_stmt|;
annotation|@
name|Mock
name|Table
name|hiveTableMDMock
decl_stmt|;
specifier|private
name|HepPlanner
name|planner
decl_stmt|;
specifier|private
name|RelBuilder
name|builder
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
class|class
name|MyRecord
block|{
specifier|public
name|int
name|f1
decl_stmt|;
specifier|public
name|int
name|f2
decl_stmt|;
specifier|public
name|int
name|f3
decl_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|HepProgramBuilder
name|programBuilder
init|=
operator|new
name|HepProgramBuilder
argument_list|()
decl_stmt|;
name|programBuilder
operator|.
name|addRuleInstance
argument_list|(
operator|new
name|HivePointLookupOptimizerRule
operator|.
name|FilterCondition
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|HepPlanner
argument_list|(
name|programBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|JavaTypeFactoryImpl
name|typeFactory
init|=
operator|new
name|JavaTypeFactoryImpl
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|optCluster
init|=
name|RelOptCluster
operator|.
name|create
argument_list|(
name|planner
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|RelDataType
name|rowTypeMock
init|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|MyRecord
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|rowTypeMock
argument_list|)
operator|.
name|when
argument_list|(
name|tableMock
argument_list|)
operator|.
name|getRowType
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|tableMock
argument_list|)
operator|.
name|when
argument_list|(
name|schemaMock
argument_list|)
operator|.
name|getTableForMember
argument_list|(
name|Matchers
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|hiveTableMDMock
argument_list|)
operator|.
name|when
argument_list|(
name|tableMock
argument_list|)
operator|.
name|getHiveTableMD
argument_list|()
expr_stmt|;
name|builder
operator|=
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
operator|.
name|create
argument_list|(
name|optCluster
argument_list|,
name|schemaMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFConcat
argument_list|()
decl_stmt|;
annotation|@
name|Deprecated
name|CompilationOpContext
name|cCtx
init|=
operator|new
name|CompilationOpContext
argument_list|()
decl_stmt|;
specifier|public
name|RexNode
name|eq
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|builder
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterOpEquals
parameter_list|()
block|{
name|RelNode
name|r7
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"t"
argument_list|)
operator|.
name|filter
argument_list|(
name|eq
argument_list|(
literal|"f1"
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelNode
name|r8
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"t"
argument_list|)
operator|.
name|filter
argument_list|(
name|eq
argument_list|(
literal|"f1"
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelNode
name|r7b
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"t"
argument_list|)
operator|.
name|filter
argument_list|(
name|eq
argument_list|(
literal|"f1"
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|checkEquals
argument_list|(
name|r7
argument_list|,
name|r7b
argument_list|)
expr_stmt|;
name|checkNotEquals
argument_list|(
name|r7
argument_list|,
name|r8
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkEquals
parameter_list|(
name|RelNode
name|r7
parameter_list|,
name|RelNode
name|r7b
parameter_list|)
block|{
name|RelTreeSignature
name|s1
init|=
name|RelTreeSignature
operator|.
name|of
argument_list|(
name|r7
argument_list|)
decl_stmt|;
name|RelTreeSignature
name|s2
init|=
name|RelTreeSignature
operator|.
name|of
argument_list|(
name|r7b
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|s2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkNotEquals
parameter_list|(
name|RelNode
name|r7
parameter_list|,
name|RelNode
name|r8
parameter_list|)
block|{
name|RelTreeSignature
name|s1
init|=
name|RelTreeSignature
operator|.
name|of
argument_list|(
name|r7
argument_list|)
decl_stmt|;
name|RelTreeSignature
name|s2
init|=
name|RelTreeSignature
operator|.
name|of
argument_list|(
name|r8
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|s1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|s2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|getFilterOp
parameter_list|(
name|int
name|constVal
parameter_list|)
block|{
name|ExprNodeDesc
name|pred
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|constVal
argument_list|)
decl_stmt|;
name|FilterDesc
name|fd
init|=
operator|new
name|FilterDesc
argument_list|(
name|pred
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|cCtx
argument_list|,
name|fd
argument_list|)
decl_stmt|;
return|return
name|op
return|;
block|}
block|}
end_class

end_unit

