begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TestVectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFDatetimeLegacyHybridCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests VectorUDFDatetimeLegacyHybridCalendarTimestamp and  * VectorUDFDatetimeLegacyHybridCalendarDate.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorUDFDatetimeLegacyHybridCalendar
block|{
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFDatetimeLegacyHybridCalendarTimestamp
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getFreshBatchOfTimestamps
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarTimestamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarTimestamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getFreshBatchOfTimestamps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|//
name|verifyVectorUDFDatetimeLegacyHybridCalendarTimestamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarTimestamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getFreshBatchOfTimestamps
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarTimestamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarTimestamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getFreshBatchOfTimestamps
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|getVectorizedRowBatch
argument_list|(
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
index|[]
block|{
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"0001-01-01 00:00:00"
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
block|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1400-01-01 00:30:00.123456"
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
block|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1500-01-01 00:30:00"
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
block|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1583-01-01 00:30:00.123"
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
block|,         }
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**    * Input array is used to fill the entire specified size of the vector row batch.    */
specifier|private
name|VectorizedRowBatch
name|getVectorizedRowBatch
parameter_list|(
name|java
operator|.
name|sql
operator|.
name|Timestamp
index|[]
name|inputs
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|TimestampColumnVector
name|inputCol
init|=
operator|new
name|TimestampColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|inputCol
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|inputs
index|[
name|i
operator|%
name|inputs
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputCol
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|TimestampColumnVector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|void
name|verifyVectorUDFDatetimeLegacyHybridCalendarTimestamp
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|GenericUDF
name|genUdf
init|=
operator|new
name|GenericUDFDatetimeLegacyHybridCalendar
argument_list|()
decl_stmt|;
name|genUdf
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
block|}
argument_list|)
expr_stmt|;
name|VectorExpression
name|vecUdf
init|=
operator|new
name|VectorUDFDatetimeLegacyHybridCalendarTimestamp
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vecUdf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|input
init|=
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|)
operator|.
name|asScratchTimestamp
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|result
init|=
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|asScratchTimestamp
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|compareToUDFDatetimeLegacyHybridCalendar
argument_list|(
name|genUdf
argument_list|,
name|input
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|compareToUDFDatetimeLegacyHybridCalendar
parameter_list|(
name|GenericUDF
name|udf
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|in
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|out
parameter_list|)
throws|throws
name|HiveException
block|{
name|TimestampWritableV2
name|tswInput
init|=
operator|new
name|TimestampWritableV2
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|in
operator|.
name|getTime
argument_list|()
argument_list|,
name|in
operator|.
name|getNanos
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TimestampWritableV2
name|tswOutput
init|=
operator|(
name|TimestampWritableV2
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|GenericUDF
operator|.
name|DeferredObject
index|[]
block|{
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|tswInput
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tswOutput
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|out
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tswOutput
operator|.
name|getNanos
argument_list|()
argument_list|,
name|out
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFDatetimeLegacyHybridCalendarDate
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getFreshBatchOfDates
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarDate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarDate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getFreshBatchOfDates
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|//
name|verifyVectorUDFDatetimeLegacyHybridCalendarDate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarDate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getFreshBatchOfDates
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarDate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyVectorUDFDatetimeLegacyHybridCalendarDate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getFreshBatchOfDates
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|getVectorizedRowBatch
argument_list|(
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|Date
operator|.
name|valueOf
argument_list|(
literal|"0001-01-01"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
block|,
operator|(
name|long
operator|)
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1400-01-01"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
block|,
operator|(
name|long
operator|)
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1500-01-01"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
block|,
operator|(
name|long
operator|)
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1583-01-01"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
block|,         }
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**    * Input array is used to fill the entire specified size of the vector row batch.    */
specifier|private
name|VectorizedRowBatch
name|getVectorizedRowBatch
parameter_list|(
name|Long
index|[]
name|inputs
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputCol
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|inputCol
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|inputs
index|[
name|i
operator|%
name|inputs
operator|.
name|length
index|]
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputCol
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|void
name|verifyVectorUDFDatetimeLegacyHybridCalendarDate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|GenericUDF
name|genUdf
init|=
operator|new
name|GenericUDFDatetimeLegacyHybridCalendar
argument_list|()
decl_stmt|;
name|genUdf
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
block|}
argument_list|)
expr_stmt|;
name|VectorExpression
name|vecUdf
init|=
operator|new
name|VectorUDFDatetimeLegacyHybridCalendarDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vecUdf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|long
name|input
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|long
name|output
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFDatetimeLegacyHybridCalendar
argument_list|(
name|genUdf
argument_list|,
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|compareToUDFDatetimeLegacyHybridCalendar
parameter_list|(
name|GenericUDF
name|udf
parameter_list|,
name|long
name|in
parameter_list|,
name|long
name|out
parameter_list|)
throws|throws
name|HiveException
block|{
name|DateWritableV2
name|dateWInput
init|=
operator|new
name|DateWritableV2
argument_list|(
operator|(
name|int
operator|)
name|in
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dateWOutput
init|=
operator|(
name|DateWritableV2
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|GenericUDF
operator|.
name|DeferredObject
index|[]
block|{
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|dateWInput
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dateWOutput
operator|.
name|get
argument_list|()
argument_list|,
name|Date
operator|.
name|ofEpochDay
argument_list|(
operator|(
name|int
operator|)
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

