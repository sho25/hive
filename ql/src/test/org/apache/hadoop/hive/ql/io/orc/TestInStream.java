begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|TestInStream
block|{
specifier|static
class|class
name|OutputCollector
implements|implements
name|OutStream
operator|.
name|OutputReceiver
block|{
name|DynamicByteArray
name|buffer
init|=
operator|new
name|DynamicByteArray
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|output
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|buffer
operator|.
name|add
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|PositionCollector
implements|implements
name|PositionProvider
implements|,
name|PositionRecorder
block|{
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|positions
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|getNext
parameter_list|()
block|{
return|return
name|positions
operator|.
name|get
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPosition
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|positions
operator|.
name|add
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUncompressed
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputCollector
name|collect
init|=
operator|new
name|OutputCollector
argument_list|()
decl_stmt|;
name|OutStream
name|out
init|=
operator|new
name|OutStream
argument_list|(
literal|"test"
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|,
name|collect
argument_list|)
decl_stmt|;
name|PositionCollector
index|[]
name|positions
init|=
operator|new
name|PositionCollector
index|[
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
operator|++
name|i
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
operator|new
name|PositionCollector
argument_list|()
expr_stmt|;
name|out
operator|.
name|getPosition
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|collect
operator|.
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|,
name|collect
operator|.
name|buffer
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|inBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|collect
operator|.
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|collect
operator|.
name|buffer
operator|.
name|setByteBuffer
argument_list|(
name|inBuf
argument_list|,
literal|0
argument_list|,
name|collect
operator|.
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|inBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|InStream
name|in
init|=
name|InStream
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|inBuf
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"uncompressed stream test base: 0 offset: 0 limit: 1024"
argument_list|,
name|in
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
operator|++
name|i
control|)
block|{
name|int
name|x
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|&
literal|0xff
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1023
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|&
literal|0xff
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompressed
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputCollector
name|collect
init|=
operator|new
name|OutputCollector
argument_list|()
decl_stmt|;
name|CompressionCodec
name|codec
init|=
operator|new
name|ZlibCodec
argument_list|()
decl_stmt|;
name|OutStream
name|out
init|=
operator|new
name|OutStream
argument_list|(
literal|"test"
argument_list|,
literal|300
argument_list|,
name|codec
argument_list|,
name|collect
argument_list|)
decl_stmt|;
name|PositionCollector
index|[]
name|positions
init|=
operator|new
name|PositionCollector
index|[
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
operator|++
name|i
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
operator|new
name|PositionCollector
argument_list|()
expr_stmt|;
name|out
operator|.
name|getPosition
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|961
argument_list|,
name|collect
operator|.
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|inBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|collect
operator|.
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|collect
operator|.
name|buffer
operator|.
name|setByteBuffer
argument_list|(
name|inBuf
argument_list|,
literal|0
argument_list|,
name|collect
operator|.
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|inBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|InStream
name|in
init|=
name|InStream
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|inBuf
argument_list|,
name|codec
argument_list|,
literal|300
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"compressed stream test base: 0 offset: 0 limit: 961"
argument_list|,
name|in
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
operator|++
name|i
control|)
block|{
name|int
name|x
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|&
literal|0xff
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1023
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|&
literal|0xff
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorruptStream
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputCollector
name|collect
init|=
operator|new
name|OutputCollector
argument_list|()
decl_stmt|;
name|CompressionCodec
name|codec
init|=
operator|new
name|ZlibCodec
argument_list|()
decl_stmt|;
name|OutStream
name|out
init|=
operator|new
name|OutStream
argument_list|(
literal|"test"
argument_list|,
literal|500
argument_list|,
name|codec
argument_list|,
name|collect
argument_list|)
decl_stmt|;
name|PositionCollector
index|[]
name|positions
init|=
operator|new
name|PositionCollector
index|[
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
operator|++
name|i
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
operator|new
name|PositionCollector
argument_list|()
expr_stmt|;
name|out
operator|.
name|getPosition
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// now try to read the stream with a buffer that is too small
name|ByteBuffer
name|inBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|collect
operator|.
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|collect
operator|.
name|buffer
operator|.
name|setByteBuffer
argument_list|(
name|inBuf
argument_list|,
literal|0
argument_list|,
name|collect
operator|.
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|inBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|InStream
name|in
init|=
name|InStream
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|inBuf
argument_list|,
name|codec
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|byte
index|[]
name|contents
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
try|try
block|{
name|in
operator|.
name|read
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// EXPECTED
block|}
comment|// make a corrupted header
name|inBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inBuf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|32
argument_list|)
expr_stmt|;
name|inBuf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|inBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|in
operator|=
name|InStream
operator|.
name|create
argument_list|(
literal|"test2"
argument_list|,
name|inBuf
argument_list|,
name|codec
argument_list|,
literal|300
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// EXPECTED
block|}
block|}
block|}
end_class

end_unit

