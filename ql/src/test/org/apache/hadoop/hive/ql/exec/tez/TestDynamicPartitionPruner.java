begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|InputInitializerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|events
operator|.
name|InputInitializerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestDynamicPartitionPruner
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testNoPruning
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|HiveException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|MapWork
name|mapWork
init|=
name|mock
argument_list|(
name|MapWork
operator|.
name|class
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|pruneRunnable
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
comment|// Return immediately. No entries found for pruning. Verified via the timeout.
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testSingleSourceOrdering1
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|HiveException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|createMockMapWork
argument_list|(
operator|new
name|TestSource
argument_list|(
literal|"v1"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|InputInitializerEvent
name|event
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setSourceVertexName
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruneRunnable
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|inError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testSingleSourceOrdering2
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|HiveException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|createMockMapWork
argument_list|(
operator|new
name|TestSource
argument_list|(
literal|"v1"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|InputInitializerEvent
name|event
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setSourceVertexName
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruneRunnable
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|inError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testSingleSourceMultipleFiltersOrdering1
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|2
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|createMockMapWork
argument_list|(
operator|new
name|TestSource
argument_list|(
literal|"v1"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|InputInitializerEvent
name|event
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setSourceVertexName
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruneRunnable
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|inError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testSingleSourceMultipleFiltersOrdering2
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|2
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|createMockMapWork
argument_list|(
operator|new
name|TestSource
argument_list|(
literal|"v1"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|InputInitializerEvent
name|event
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setSourceVertexName
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruneRunnable
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|inError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testMultipleSourcesOrdering1
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|2
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|3
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|createMockMapWork
argument_list|(
operator|new
name|TestSource
argument_list|(
literal|"v1"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"v2"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|InputInitializerEvent
name|eventV1
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|eventV1
operator|.
name|setSourceVertexName
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|InputInitializerEvent
name|eventV2
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|eventV2
operator|.
name|setSourceVertexName
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
comment|// 2 X 2 events for V1. 3 X 1 events for V2
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV2
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV2
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV2
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|pruneRunnable
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|inError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testMultipleSourcesOrdering2
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|2
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|3
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|createMockMapWork
argument_list|(
operator|new
name|TestSource
argument_list|(
literal|"v1"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"v2"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|InputInitializerEvent
name|eventV1
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|eventV1
operator|.
name|setSourceVertexName
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|InputInitializerEvent
name|eventV2
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|eventV2
operator|.
name|setSourceVertexName
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
comment|// 2 X 2 events for V1. 3 X 1 events for V2
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV2
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV2
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV2
argument_list|)
expr_stmt|;
name|pruneRunnable
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|inError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testMultipleSourcesOrdering3
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|2
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|3
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|createMockMapWork
argument_list|(
operator|new
name|TestSource
argument_list|(
literal|"v1"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"v2"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|InputInitializerEvent
name|eventV1
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|eventV1
operator|.
name|setSourceVertexName
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|InputInitializerEvent
name|eventV2
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|eventV2
operator|.
name|setSourceVertexName
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
comment|// 2 X 2 events for V1. 3 X 1 events for V2
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV1
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV2
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV2
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|eventV2
argument_list|)
expr_stmt|;
name|pruneRunnable
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|inError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|,
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testExtraEvents
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|HiveException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|createMockMapWork
argument_list|(
operator|new
name|TestSource
argument_list|(
literal|"v1"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|InputInitializerEvent
name|event
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setSourceVertexName
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruneRunnable
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|inError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testMissingEvent
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|HiveException
throws|,
name|SerDeException
block|{
name|InputInitializerContext
name|mockInitContext
init|=
name|mock
argument_list|(
name|InputInitializerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|mockInitContext
argument_list|)
operator|.
name|getVertexNumTasks
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|createMockMapWork
argument_list|(
operator|new
name|TestSource
argument_list|(
literal|"v1"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DynamicPartitionPruner
name|pruner
init|=
operator|new
name|DynamicPartitionPrunerForEventTesting
argument_list|(
name|mockInitContext
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|PruneRunnable
name|pruneRunnable
init|=
operator|new
name|PruneRunnable
argument_list|(
name|pruner
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|pruneRunnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|pruneRunnable
operator|.
name|start
argument_list|()
expr_stmt|;
name|InputInitializerEvent
name|event
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
literal|"FakeTarget"
argument_list|,
literal|"TargetInput"
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setSourceVertexName
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|pruner
operator|.
name|processVertex
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000l
argument_list|)
expr_stmt|;
comment|// The pruner should not have completed.
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|ended
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pruneRunnable
operator|.
name|inError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PruneRunnable
implements|implements
name|Runnable
block|{
specifier|final
name|DynamicPartitionPruner
name|pruner
decl_stmt|;
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|final
name|Condition
name|endCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|final
name|Condition
name|startCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|ended
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|inError
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|PruneRunnable
parameter_list|(
name|DynamicPartitionPruner
name|pruner
parameter_list|)
block|{
name|this
operator|.
name|pruner
operator|=
name|pruner
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
block|{
name|started
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|startCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|awaitEnd
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|ended
operator|.
name|get
argument_list|()
condition|)
block|{
name|endCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|startCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|pruner
operator|.
name|prune
argument_list|()
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ended
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
decl||
name|IOException
decl||
name|InterruptedException
decl||
name|HiveException
name|e
parameter_list|)
block|{
name|inError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MapWork
name|createMockMapWork
parameter_list|(
name|TestSource
modifier|...
name|testSources
parameter_list|)
block|{
name|MapWork
name|mapWork
init|=
name|mock
argument_list|(
name|MapWork
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableDesc
argument_list|>
argument_list|>
name|tableMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|columnMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|exprMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TestSource
name|testSource
range|:
name|testSources
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testSource
operator|.
name|numExpressions
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|TableDesc
argument_list|>
name|tableDescList
init|=
name|tableMap
operator|.
name|get
argument_list|(
name|testSource
operator|.
name|vertexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableDescList
operator|==
literal|null
condition|)
block|{
name|tableDescList
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|tableMap
operator|.
name|put
argument_list|(
name|testSource
operator|.
name|vertexName
argument_list|,
name|tableDescList
argument_list|)
expr_stmt|;
block|}
name|tableDescList
operator|.
name|add
argument_list|(
name|mock
argument_list|(
name|TableDesc
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnList
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|testSource
operator|.
name|vertexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnList
operator|==
literal|null
condition|)
block|{
name|columnList
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
name|testSource
operator|.
name|vertexName
argument_list|,
name|columnList
argument_list|)
expr_stmt|;
block|}
name|columnList
operator|.
name|add
argument_list|(
name|testSource
operator|.
name|vertexName
operator|+
literal|"c_"
operator|+
name|count
operator|+
literal|"_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprNodeDescList
init|=
name|exprMap
operator|.
name|get
argument_list|(
name|testSource
operator|.
name|vertexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprNodeDescList
operator|==
literal|null
condition|)
block|{
name|exprNodeDescList
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|exprMap
operator|.
name|put
argument_list|(
name|testSource
operator|.
name|vertexName
argument_list|,
name|exprNodeDescList
argument_list|)
expr_stmt|;
block|}
name|exprNodeDescList
operator|.
name|add
argument_list|(
name|mock
argument_list|(
name|ExprNodeDesc
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|doReturn
argument_list|(
name|tableMap
argument_list|)
operator|.
name|when
argument_list|(
name|mapWork
argument_list|)
operator|.
name|getEventSourceTableDescMap
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|columnMap
argument_list|)
operator|.
name|when
argument_list|(
name|mapWork
argument_list|)
operator|.
name|getEventSourceColumnNameMap
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|exprMap
argument_list|)
operator|.
name|when
argument_list|(
name|mapWork
argument_list|)
operator|.
name|getEventSourcePartKeyExprMap
argument_list|()
expr_stmt|;
return|return
name|mapWork
return|;
block|}
specifier|private
specifier|static
class|class
name|TestSource
block|{
name|String
name|vertexName
decl_stmt|;
name|int
name|numExpressions
decl_stmt|;
specifier|public
name|TestSource
parameter_list|(
name|String
name|vertexName
parameter_list|,
name|int
name|numExpressions
parameter_list|)
block|{
name|this
operator|.
name|vertexName
operator|=
name|vertexName
expr_stmt|;
name|this
operator|.
name|numExpressions
operator|=
name|numExpressions
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DynamicPartitionPrunerForEventTesting
extends|extends
name|DynamicPartitionPruner
block|{
specifier|public
name|DynamicPartitionPrunerForEventTesting
parameter_list|(
name|InputInitializerContext
name|context
parameter_list|,
name|MapWork
name|work
parameter_list|)
throws|throws
name|SerDeException
block|{
name|super
argument_list|(
name|context
argument_list|,
name|work
argument_list|,
operator|new
name|JobConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|SourceInfo
name|createSourceInfo
parameter_list|(
name|TableDesc
name|t
parameter_list|,
name|ExprNodeDesc
name|partKeyExpr
parameter_list|,
name|String
name|columnName
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
operator|new
name|SourceInfo
argument_list|(
name|t
argument_list|,
name|partKeyExpr
argument_list|,
name|columnName
argument_list|,
name|jobConf
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|processPayload
parameter_list|(
name|ByteBuffer
name|payload
parameter_list|,
name|String
name|sourceName
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
comment|// No-op: testing events only
return|return
name|sourceName
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|prunePartitionSingleSource
parameter_list|(
name|String
name|source
parameter_list|,
name|SourceInfo
name|si
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// No-op: testing events only
block|}
block|}
block|}
end_class

end_unit

