begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|MockHiveInputSplits
operator|.
name|createMockSplit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|SYNC_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|SplitFilterTestCase
operator|.
name|DEFAULT_SPLIT_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|SplitFilterTestCase
operator|.
name|SMALL_SPLIT_SIZE
import|;
end_import

begin_class
specifier|public
class|class
name|TestSplitFilter
block|{
specifier|private
name|SplitFilterTestCase
name|testCase
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testOneSelectedSplitsInMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|-
name|SYNC_INTERVAL
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|+
name|SYNC_INTERVAL
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectedFirstSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectedLastSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|lastSplitSize
init|=
literal|1234
decl_stmt|;
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|(
name|lastSplitSize
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|-
name|SYNC_INTERVAL
argument_list|,
name|lastSplitSize
operator|+
name|SYNC_INTERVAL
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectedTwoAdjacentSplits
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectedThreeAdjacentSplits
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|*
literal|2
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectedSplitsInTwoFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"B"
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"B"
argument_list|,
literal|0
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverlapWithPreviousFile
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"B"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"B"
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|-
name|SYNC_INTERVAL
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|+
name|SYNC_INTERVAL
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverlapInSecondFile
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"B"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"B"
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|-
name|SYNC_INTERVAL
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|+
name|SYNC_INTERVAL
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"B"
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|*
literal|2
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmallSplitsLengthAdjustment
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|defaultSplitLength
argument_list|(
name|SMALL_SPLIT_SIZE
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
name|SMALL_SPLIT_SIZE
operator|*
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmallSplitsOverlap
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|defaultSplitLength
argument_list|(
name|SMALL_SPLIT_SIZE
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
name|SMALL_SPLIT_SIZE
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
name|SMALL_SPLIT_SIZE
operator|*
literal|2
argument_list|,
name|SMALL_SPLIT_SIZE
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
name|SMALL_SPLIT_SIZE
operator|*
literal|4
argument_list|,
name|SMALL_SPLIT_SIZE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxSplitsSizePositive
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|maxInputSize
argument_list|(
name|DEFAULT_SPLIT_SIZE
operator|*
literal|3
operator|+
name|SYNC_INTERVAL
operator|*
literal|2
argument_list|)
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|(
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
name|DEFAULT_SPLIT_SIZE
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|*
literal|2
operator|-
name|SYNC_INTERVAL
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|+
name|SYNC_INTERVAL
argument_list|)
argument_list|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|*
literal|4
operator|-
name|SYNC_INTERVAL
argument_list|,
name|DEFAULT_SPLIT_SIZE
operator|+
name|SYNC_INTERVAL
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMaxSplitsSizeNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
operator|=
name|SplitFilterTestCase
operator|.
name|builder
argument_list|()
operator|.
name|maxInputSize
argument_list|(
name|DEFAULT_SPLIT_SIZE
operator|*
literal|3
argument_list|)
operator|.
name|inputFiles
argument_list|(
name|MockInputFile
operator|.
name|builder
argument_list|()
operator|.
name|path
argument_list|(
literal|"A"
argument_list|)
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|split
argument_list|()
operator|.
name|selectedSplit
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|expectedSplits
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|testCase
operator|.
name|executeAndValidate
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

