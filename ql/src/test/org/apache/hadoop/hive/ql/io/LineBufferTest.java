begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * LineEndBuffer simple unit test.  */
end_comment

begin_class
specifier|public
class|class
name|LineBufferTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLineEndBuffer
parameter_list|()
block|{
name|SkippingTextInputFormat
operator|.
name|LineBuffer
name|buffer
decl_stmt|;
name|buffer
operator|=
operator|new
name|SkippingTextInputFormat
operator|.
name|LineBuffer
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|buffer
operator|.
name|getFirstLineStart
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|SkippingTextInputFormat
operator|.
name|LineBuffer
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|150
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|buffer
operator|.
name|getFirstLineStart
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|SkippingTextInputFormat
operator|.
name|LineBuffer
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|buffer
operator|.
name|getFirstLineStart
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|SkippingTextInputFormat
operator|.
name|LineBuffer
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
literal|25
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|buffer
operator|.
name|getFirstLineStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

