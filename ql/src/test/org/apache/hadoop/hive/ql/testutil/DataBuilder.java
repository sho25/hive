begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|testutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_comment
comment|/**  *  * DataBuilder used to build InspectableObject arrays that are used  * as part of testing.  *  */
end_comment

begin_class
specifier|public
class|class
name|DataBuilder
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|columnTypes
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rows
decl_stmt|;
specifier|public
name|DataBuilder
parameter_list|()
block|{
name|columnNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|columnTypes
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
expr_stmt|;
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setColumnNames
parameter_list|(
name|String
modifier|...
name|names
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setColumnTypes
parameter_list|(
name|ObjectInspector
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|ObjectInspector
name|type
range|:
name|types
control|)
block|{
name|columnTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addRow
parameter_list|(
name|Object
modifier|...
name|columns
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columns
argument_list|)
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|objects
argument_list|)
expr_stmt|;
block|}
comment|/**    * returns the InspectableObject array the builder methods    * helped to assemble.    * @return InspectableObject array (objects that have data coupled with    * and object inspector )    */
specifier|public
name|InspectableObject
index|[]
name|createRows
parameter_list|()
block|{
name|InspectableObject
index|[]
name|toReturn
init|=
operator|new
name|InspectableObject
index|[
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toReturn
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|toReturn
index|[
name|i
index|]
operator|=
operator|new
name|InspectableObject
argument_list|()
expr_stmt|;
name|toReturn
index|[
name|i
index|]
operator|.
name|o
operator|=
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|toReturn
index|[
name|i
index|]
operator|.
name|oi
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|this
operator|.
name|columnNames
argument_list|,
name|this
operator|.
name|columnTypes
argument_list|)
expr_stmt|;
block|}
return|return
name|toReturn
return|;
block|}
block|}
end_class

end_unit

