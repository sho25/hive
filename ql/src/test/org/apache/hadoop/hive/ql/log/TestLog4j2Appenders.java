begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|StringAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|LoggerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestLog4j2Appenders
block|{
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
comment|// programmatically set root logger level to INFO. By default if log4j2-test.xml is not
comment|// available root logger will use ERROR log level
name|LoggerContext
name|ctx
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Configuration
name|config
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LoggerConfig
name|loggerConfig
init|=
name|config
operator|.
name|getLoggerConfig
argument_list|(
name|LogManager
operator|.
name|ROOT_LOGGER_NAME
argument_list|)
decl_stmt|;
name|loggerConfig
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringAppender
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get the RootLogger which, if you don't have log4j2-test.xml defined, will only log ERRORs
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
comment|// Create a String Appender to capture log output
name|StringAppender
name|appender
init|=
name|StringAppender
operator|.
name|createStringAppender
argument_list|(
literal|"%m"
argument_list|)
decl_stmt|;
name|appender
operator|.
name|addToLogger
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|appender
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Log to the string appender
name|logger
operator|.
name|info
argument_list|(
literal|"Hello!"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" World"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello! World"
argument_list|,
name|appender
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|appender
operator|.
name|removeFromLogger
argument_list|(
name|LogManager
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveEventCounterAppender
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|HiveEventCounter
name|appender
init|=
name|HiveEventCounter
operator|.
name|createInstance
argument_list|(
literal|"EventCounter"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|appender
operator|.
name|addToLogger
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|appender
operator|.
name|start
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|fatal
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
comment|// HiveEventCounter will be loaded from hive-log4j2-test.xml before tests are run. The 2 log
comment|// info msgs from previous test case will also be counted along with 4 log info msgs in this
comment|// test and hence we assert for 6 here
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|appender
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|appender
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|appender
operator|.
name|getWarn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appender
operator|.
name|getFatal
argument_list|()
argument_list|)
expr_stmt|;
name|appender
operator|.
name|removeFromLogger
argument_list|(
name|LogManager
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

