begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TestVectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorGenericDateExpressions
block|{
specifier|private
name|Charset
name|utf8
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
specifier|private
name|int
name|size
init|=
literal|200
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PrimitiveCategory
argument_list|>
name|dateTimestampStringTypes
init|=
name|Arrays
operator|.
expr|<
name|PrimitiveCategory
operator|>
name|asList
argument_list|(
name|PrimitiveCategory
operator|.
name|DATE
argument_list|,
name|PrimitiveCategory
operator|.
name|TIMESTAMP
argument_list|,
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
specifier|private
name|long
name|newRandom
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|private
name|LongColumnVector
name|newRandomLongColumnVector
parameter_list|(
name|int
name|range
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|LongColumnVector
name|vector
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
return|return
name|vector
return|;
block|}
specifier|private
name|TypeInfo
name|primitiveCategoryToTypeInfo
parameter_list|(
name|PrimitiveCategory
name|primitiveCategory
parameter_list|)
block|{
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|DATE
case|:
return|return
name|TypeInfoFactory
operator|.
name|dateTypeInfo
return|;
case|case
name|STRING
case|:
return|return
name|TypeInfoFactory
operator|.
name|stringTypeInfo
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategory
argument_list|)
throw|;
block|}
block|}
specifier|private
name|TimestampColumnVector
name|toTimestamp
parameter_list|(
name|LongColumnVector
name|date
parameter_list|)
block|{
name|TimestampColumnVector
name|vector
init|=
operator|new
name|TimestampColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|date
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|vector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|vector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|vector
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|toTimestamp
argument_list|(
name|date
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|vector
return|;
block|}
specifier|private
name|Timestamp
name|toTimestamp
parameter_list|(
name|long
name|date
parameter_list|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|date
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|BytesColumnVector
name|toString
parameter_list|(
name|LongColumnVector
name|date
parameter_list|)
block|{
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|date
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|bcv
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|bcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|toString
argument_list|(
name|date
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|bcv
operator|.
name|start
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
name|i
index|]
operator|=
name|bcv
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
block|}
block|}
return|return
name|bcv
return|;
block|}
specifier|private
name|byte
index|[]
name|toString
parameter_list|(
name|long
name|date
parameter_list|)
block|{
name|String
name|formatted
init|=
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|date
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|formatted
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
return|;
block|}
specifier|private
name|void
name|validateDateAdd
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|PrimitiveCategory
name|colType1
parameter_list|,
name|long
name|scalar2
parameter_list|,
name|boolean
name|isPositive
parameter_list|,
name|LongColumnVector
name|date1
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorUDFDateAddColScalar
name|udf
decl_stmt|;
if|if
condition|(
name|isPositive
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFDateAddColScalar
argument_list|(
literal|0
argument_list|,
name|scalar2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFDateSubColScalar
argument_list|(
literal|0
argument_list|,
name|scalar2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|primitiveCategoryToTypeInfo
argument_list|(
name|colType1
argument_list|)
block|,
name|TypeInfoFactory
operator|.
name|voidTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|output
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|expected
decl_stmt|;
if|if
condition|(
name|isPositive
condition|)
block|{
name|expected
operator|=
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|date1
operator|.
name|vector
index|[
name|i
index|]
operator|+
name|scalar2
argument_list|)
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|date1
operator|.
name|vector
index|[
name|i
index|]
operator|-
name|scalar2
argument_list|)
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|date1
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|actual
init|=
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|output
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"expectedLen:"
operator|+
name|expected
operator|.
name|length
argument_list|()
operator|+
literal|" actualLen:"
operator|+
name|actual
operator|.
name|length
argument_list|()
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ColumnVector
name|castTo
parameter_list|(
name|LongColumnVector
name|date
parameter_list|,
name|PrimitiveCategory
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DATE
case|:
return|return
name|date
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|toTimestamp
argument_list|(
name|date
argument_list|)
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
name|toString
argument_list|(
name|date
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unsupported input type "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|testDateAddColScalar
parameter_list|(
name|PrimitiveCategory
name|colType1
parameter_list|,
name|boolean
name|isPositive
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongColumnVector
name|date1
init|=
name|newRandomLongColumnVector
argument_list|(
literal|10000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|ColumnVector
name|col1
init|=
name|castTo
argument_list|(
name|date1
argument_list|,
name|colType1
argument_list|)
decl_stmt|;
name|long
name|scalar2
init|=
name|newRandom
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|LongColumnVector
name|output
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|col1
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|output
expr_stmt|;
name|validateDateAdd
argument_list|(
name|batch
argument_list|,
name|colType1
argument_list|,
name|scalar2
argument_list|,
name|isPositive
argument_list|,
name|date1
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|validateDateAdd
argument_list|(
name|batch
argument_list|,
name|colType1
argument_list|,
name|scalar2
argument_list|,
name|isPositive
argument_list|,
name|date1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateAddColScalar
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|colType1
range|:
name|dateTimestampStringTypes
control|)
name|testDateAddColScalar
argument_list|(
name|colType1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFDateAddColScalar
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateSubColScalar
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|colType1
range|:
name|dateTimestampStringTypes
control|)
name|testDateAddColScalar
argument_list|(
name|colType1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFDateSubColScalar
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateDateAdd
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|long
name|scalar1
parameter_list|,
name|LongColumnVector
name|date2
parameter_list|,
name|PrimitiveCategory
name|colType1
parameter_list|,
name|boolean
name|isPositive
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isPositive
condition|)
block|{
switch|switch
condition|(
name|colType1
condition|)
block|{
case|case
name|DATE
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateAddScalarCol
argument_list|(
name|scalar1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateAddScalarCol
argument_list|(
name|toTimestamp
argument_list|(
name|scalar1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateAddScalarCol
argument_list|(
name|toString
argument_list|(
name|scalar1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Invalid input type: "
operator|+
name|colType1
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|colType1
condition|)
block|{
case|case
name|DATE
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateSubScalarCol
argument_list|(
name|scalar1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateSubScalarCol
argument_list|(
name|toTimestamp
argument_list|(
name|scalar1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateSubScalarCol
argument_list|(
name|toString
argument_list|(
name|scalar1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Invalid input type: "
operator|+
name|colType1
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|primitiveCategoryToTypeInfo
argument_list|(
name|colType1
argument_list|)
block|,
name|TypeInfoFactory
operator|.
name|voidTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|output
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|date2
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|expected
decl_stmt|;
if|if
condition|(
name|isPositive
condition|)
block|{
name|expected
operator|=
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|scalar1
operator|+
name|date2
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|scalar1
operator|-
name|date2
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|date2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|output
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|testDateAddScalarCol
parameter_list|(
name|PrimitiveCategory
name|colType1
parameter_list|,
name|boolean
name|isPositive
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongColumnVector
name|date2
init|=
name|newRandomLongColumnVector
argument_list|(
literal|10000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|long
name|scalar1
init|=
name|newRandom
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|LongColumnVector
name|output
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|date2
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|output
expr_stmt|;
name|validateDateAdd
argument_list|(
name|batch
argument_list|,
name|scalar1
argument_list|,
name|date2
argument_list|,
name|colType1
argument_list|,
name|isPositive
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|date2
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|date2
expr_stmt|;
name|validateDateAdd
argument_list|(
name|batch
argument_list|,
name|scalar1
argument_list|,
name|date2
argument_list|,
name|colType1
argument_list|,
name|isPositive
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateAddScalarCol
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|scalarType1
range|:
name|dateTimestampStringTypes
control|)
name|testDateAddScalarCol
argument_list|(
name|scalarType1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFDateAddScalarCol
argument_list|(
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateSubScalarCol
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|scalarType1
range|:
name|dateTimestampStringTypes
control|)
name|testDateAddScalarCol
argument_list|(
name|scalarType1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFDateSubScalarCol
argument_list|(
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateDateAdd
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|LongColumnVector
name|date1
parameter_list|,
name|LongColumnVector
name|date2
parameter_list|,
name|PrimitiveCategory
name|colType1
parameter_list|,
name|boolean
name|isPositive
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
decl_stmt|;
if|if
condition|(
name|isPositive
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFDateAddColCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFDateSubColCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|primitiveCategoryToTypeInfo
argument_list|(
name|colType1
argument_list|)
block|,
name|TypeInfoFactory
operator|.
name|voidTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|output
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|date2
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|expected
decl_stmt|;
if|if
condition|(
name|isPositive
condition|)
block|{
name|expected
operator|=
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|date1
operator|.
name|vector
index|[
name|i
index|]
operator|+
name|date2
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|date1
operator|.
name|vector
index|[
name|i
index|]
operator|-
name|date2
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|date1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|date2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|output
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|testDateAddColCol
parameter_list|(
name|PrimitiveCategory
name|colType1
parameter_list|,
name|boolean
name|isPositive
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongColumnVector
name|date1
init|=
name|newRandomLongColumnVector
argument_list|(
literal|10000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|days2
init|=
name|newRandomLongColumnVector
argument_list|(
literal|1000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|ColumnVector
name|col1
init|=
name|castTo
argument_list|(
name|date1
argument_list|,
name|colType1
argument_list|)
decl_stmt|;
name|LongColumnVector
name|output
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|col1
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|days2
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|output
expr_stmt|;
name|validateDateAdd
argument_list|(
name|batch
argument_list|,
name|date1
argument_list|,
name|days2
argument_list|,
name|colType1
argument_list|,
name|isPositive
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|date1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date1
argument_list|,
name|colType1
argument_list|)
expr_stmt|;
name|validateDateAdd
argument_list|(
name|batch
argument_list|,
name|date1
argument_list|,
name|days2
argument_list|,
name|colType1
argument_list|,
name|isPositive
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|days2
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|days2
expr_stmt|;
name|validateDateAdd
argument_list|(
name|batch
argument_list|,
name|date1
argument_list|,
name|days2
argument_list|,
name|colType1
argument_list|,
name|isPositive
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateAddColCol
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|colType1
range|:
name|dateTimestampStringTypes
control|)
name|testDateAddColCol
argument_list|(
name|colType1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFDateAddColCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bcv
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateSubColCol
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|colType1
range|:
name|dateTimestampStringTypes
control|)
name|testDateAddColCol
argument_list|(
name|colType1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFDateSubColCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bcv
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateDateDiff
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|long
name|scalar1
parameter_list|,
name|PrimitiveCategory
name|scalarType1
parameter_list|,
name|PrimitiveCategory
name|colType2
parameter_list|,
name|LongColumnVector
name|date2
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|scalarType1
condition|)
block|{
case|case
name|DATE
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateDiffScalarCol
argument_list|(
name|scalar1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateDiffScalarCol
argument_list|(
name|toTimestamp
argument_list|(
name|scalar1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateDiffScalarCol
argument_list|(
name|toString
argument_list|(
name|scalar1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|primitiveCategoryToTypeInfo
argument_list|(
name|scalarType1
argument_list|)
block|,
name|primitiveCategoryToTypeInfo
argument_list|(
name|colType2
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|output
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|date2
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scalar1
operator|-
name|date2
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|output
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateDiffScalarCol
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|scalarType1
range|:
name|dateTimestampStringTypes
control|)
block|{
for|for
control|(
name|PrimitiveCategory
name|colType2
range|:
name|dateTimestampStringTypes
control|)
block|{
name|LongColumnVector
name|date2
init|=
name|newRandomLongColumnVector
argument_list|(
literal|10000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|output
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|ColumnVector
name|col2
init|=
name|castTo
argument_list|(
name|date2
argument_list|,
name|colType2
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|col2
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|output
expr_stmt|;
name|long
name|scalar1
init|=
name|newRandom
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|validateDateDiff
argument_list|(
name|batch
argument_list|,
name|scalar1
argument_list|,
name|scalarType1
argument_list|,
name|colType2
argument_list|,
name|date2
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|date2
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date2
argument_list|,
name|colType2
argument_list|)
expr_stmt|;
name|validateDateDiff
argument_list|(
name|batch
argument_list|,
name|scalar1
argument_list|,
name|scalarType1
argument_list|,
name|colType2
argument_list|,
name|date2
argument_list|)
expr_stmt|;
block|}
block|}
name|VectorExpression
name|udf
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|udf
operator|=
operator|new
name|VectorUDFDateDiffScalarCol
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|VectorUDFDateDiffScalarCol
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateDateDiff
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|LongColumnVector
name|date1
parameter_list|,
name|long
name|scalar2
parameter_list|,
name|PrimitiveCategory
name|colType1
parameter_list|,
name|PrimitiveCategory
name|scalarType2
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|scalarType2
condition|)
block|{
case|case
name|DATE
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateDiffColScalar
argument_list|(
literal|0
argument_list|,
name|scalar2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateDiffColScalar
argument_list|(
literal|0
argument_list|,
name|toTimestamp
argument_list|(
name|scalar2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|udf
operator|=
operator|new
name|VectorUDFDateDiffColScalar
argument_list|(
literal|0
argument_list|,
name|toString
argument_list|(
name|scalar2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|primitiveCategoryToTypeInfo
argument_list|(
name|colType1
argument_list|)
block|,
name|primitiveCategoryToTypeInfo
argument_list|(
name|scalarType2
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|output
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|date1
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|date1
operator|.
name|vector
index|[
name|i
index|]
operator|-
name|scalar2
argument_list|,
name|output
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateDiffColScalar
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|colType1
range|:
name|dateTimestampStringTypes
control|)
block|{
for|for
control|(
name|PrimitiveCategory
name|scalarType2
range|:
name|dateTimestampStringTypes
control|)
block|{
name|LongColumnVector
name|date1
init|=
name|newRandomLongColumnVector
argument_list|(
literal|10000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|output
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date1
argument_list|,
name|colType1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|output
expr_stmt|;
name|long
name|scalar2
init|=
name|newRandom
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|validateDateDiff
argument_list|(
name|batch
argument_list|,
name|date1
argument_list|,
name|scalar2
argument_list|,
name|colType1
argument_list|,
name|scalarType2
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|date1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date1
argument_list|,
name|colType1
argument_list|)
expr_stmt|;
name|validateDateDiff
argument_list|(
name|batch
argument_list|,
name|date1
argument_list|,
name|scalar2
argument_list|,
name|colType1
argument_list|,
name|scalarType2
argument_list|)
expr_stmt|;
block|}
block|}
name|VectorExpression
name|udf
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|udf
operator|=
operator|new
name|VectorUDFDateDiffColScalar
argument_list|(
literal|0
argument_list|,
literal|0L
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|VectorUDFDateDiffColScalar
argument_list|(
literal|0
argument_list|,
name|bytes
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateDateDiff
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|LongColumnVector
name|date1
parameter_list|,
name|LongColumnVector
name|date2
parameter_list|,
name|PrimitiveCategory
name|colType1
parameter_list|,
name|PrimitiveCategory
name|colType2
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFDateDiffColCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|primitiveCategoryToTypeInfo
argument_list|(
name|colType1
argument_list|)
block|,
name|primitiveCategoryToTypeInfo
argument_list|(
name|colType2
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|output
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|date1
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|date1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|date2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|date1
operator|.
name|vector
index|[
name|i
index|]
operator|-
name|date2
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|output
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateDiffColCol
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|colType1
range|:
name|dateTimestampStringTypes
control|)
block|{
for|for
control|(
name|PrimitiveCategory
name|colType2
range|:
name|dateTimestampStringTypes
control|)
block|{
name|LongColumnVector
name|date1
init|=
name|newRandomLongColumnVector
argument_list|(
literal|10000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|date2
init|=
name|newRandomLongColumnVector
argument_list|(
literal|10000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|output
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date1
argument_list|,
name|colType1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|castTo
argument_list|(
name|date2
argument_list|,
name|colType2
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|output
expr_stmt|;
name|validateDateDiff
argument_list|(
name|batch
argument_list|,
name|date1
argument_list|,
name|date2
argument_list|,
name|colType1
argument_list|,
name|colType2
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|date1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date1
argument_list|,
name|colType1
argument_list|)
expr_stmt|;
name|validateDateDiff
argument_list|(
name|batch
argument_list|,
name|date1
argument_list|,
name|date2
argument_list|,
name|colType1
argument_list|,
name|colType2
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|date2
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|castTo
argument_list|(
name|date2
argument_list|,
name|colType2
argument_list|)
expr_stmt|;
name|validateDateDiff
argument_list|(
name|batch
argument_list|,
name|date1
argument_list|,
name|date2
argument_list|,
name|colType1
argument_list|,
name|colType2
argument_list|)
expr_stmt|;
block|}
block|}
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFDateDiffColCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|TimestampColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bcv
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|TimestampColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bcv
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateDate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|PrimitiveCategory
name|colType
parameter_list|,
name|LongColumnVector
name|date
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
decl_stmt|;
if|if
condition|(
name|colType
operator|==
name|PrimitiveCategory
operator|.
name|STRING
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFDateString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|==
name|PrimitiveCategory
operator|.
name|TIMESTAMP
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFDateTimestamp
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFDateLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|primitiveCategoryToTypeInfo
argument_list|(
name|colType
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|output
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|actual
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|actual
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|actual
operator|=
operator|new
name|String
argument_list|(
name|toString
argument_list|(
name|output
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|date
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|expected
init|=
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|date
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDate
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|colType
range|:
name|dateTimestampStringTypes
control|)
block|{
name|LongColumnVector
name|date
init|=
name|newRandomLongColumnVector
argument_list|(
literal|10000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|output
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date
argument_list|,
name|colType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|output
expr_stmt|;
name|validateDate
argument_list|(
name|batch
argument_list|,
name|colType
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date
argument_list|,
name|colType
argument_list|)
expr_stmt|;
name|validateDate
argument_list|(
name|batch
argument_list|,
name|colType
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFDateString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateToDate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|PrimitiveCategory
name|colType
parameter_list|,
name|LongColumnVector
name|date
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
decl_stmt|;
if|if
condition|(
name|colType
operator|==
name|PrimitiveCategory
operator|.
name|STRING
operator|||
name|colType
operator|==
name|PrimitiveCategory
operator|.
name|CHAR
operator|||
name|colType
operator|==
name|PrimitiveCategory
operator|.
name|VARCHAR
condition|)
block|{
name|udf
operator|=
operator|new
name|CastStringToDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|==
name|PrimitiveCategory
operator|.
name|TIMESTAMP
condition|)
block|{
name|udf
operator|=
operator|new
name|CastTimestampToDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|CastLongToDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|primitiveCategoryToTypeInfo
argument_list|(
name|colType
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|output
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|long
name|actual
init|=
name|output
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|expected
init|=
name|date
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToDate
parameter_list|()
throws|throws
name|HiveException
block|{
for|for
control|(
name|PrimitiveCategory
name|type
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|PrimitiveCategory
operator|.
name|TIMESTAMP
argument_list|,
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
control|)
block|{
name|LongColumnVector
name|date
init|=
name|newRandomLongColumnVector
argument_list|(
literal|10000
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|output
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|output
expr_stmt|;
name|validateToDate
argument_list|(
name|batch
argument_list|,
name|type
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|castTo
argument_list|(
name|date
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|validateToDate
argument_list|(
name|batch
argument_list|,
name|type
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
name|VectorExpression
name|udf
init|=
operator|new
name|CastStringToDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"error"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|bytes
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

