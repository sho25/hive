begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveKVResultCache
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create KV result cache object, add one (k,v) pair and retrieve them.
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|HiveKVResultCache
name|cache
init|=
operator|new
name|HiveKVResultCache
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HiveKey
name|key
init|=
operator|new
name|HiveKey
argument_list|(
literal|"key"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"key"
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
name|BytesWritable
name|value
init|=
operator|new
name|BytesWritable
argument_list|(
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KV result cache should have at least one element"
argument_list|,
name|cache
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple2
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
name|row
init|=
name|cache
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect key"
argument_list|,
name|row
operator|.
name|_1
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect value"
argument_list|,
name|row
operator|.
name|_2
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cache shouldn't have more records"
argument_list|,
operator|!
name|cache
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpilling
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|HiveKVResultCache
name|cache
init|=
operator|new
name|HiveKVResultCache
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|recordCount
init|=
name|HiveKVResultCache
operator|.
name|IN_MEMORY_CACHE_SIZE
operator|*
literal|3
decl_stmt|;
comment|// Test using the same cache where first n rows are inserted then cache is cleared.
comment|// Next reuse the same cache and insert another m rows and verify the cache stores correctly.
comment|// This simulates reusing the same cache over and over again.
name|testSpillingHelper
argument_list|(
name|cache
argument_list|,
name|recordCount
argument_list|)
expr_stmt|;
name|testSpillingHelper
argument_list|(
name|cache
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testSpillingHelper
argument_list|(
name|cache
argument_list|,
name|recordCount
argument_list|)
expr_stmt|;
block|}
comment|/** Helper method which inserts numRecords and retrieves them from cache and verifies */
specifier|private
name|void
name|testSpillingHelper
parameter_list|(
name|HiveKVResultCache
name|cache
parameter_list|,
name|int
name|numRecords
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRecords
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
literal|"key_"
operator|+
name|i
decl_stmt|;
name|String
name|value
init|=
literal|"value_"
operator|+
name|i
decl_stmt|;
name|cache
operator|.
name|add
argument_list|(
operator|new
name|HiveKey
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|,
operator|new
name|BytesWritable
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|recordsSeen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cache
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
literal|"key_"
operator|+
name|recordsSeen
decl_stmt|;
name|String
name|value
init|=
literal|"value_"
operator|+
name|recordsSeen
decl_stmt|;
name|Tuple2
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
name|row
init|=
name|cache
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected key at position: "
operator|+
name|recordsSeen
argument_list|,
operator|new
name|String
argument_list|(
name|row
operator|.
name|_1
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected value at position: "
operator|+
name|recordsSeen
argument_list|,
operator|new
name|String
argument_list|(
name|row
operator|.
name|_2
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|recordsSeen
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Retrieved record count doesn't match inserted record count"
argument_list|,
name|numRecords
operator|==
name|recordsSeen
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

