begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|AddDependencyToLeaves
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|DAGTraversal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DependencyCollectionWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AddDependencyToLeavesTest
block|{
annotation|@
name|Mock
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|shouldNotSkipIntermediateDependencyCollectionTasks
parameter_list|()
block|{
name|Task
argument_list|<
name|DependencyCollectionWork
argument_list|>
name|collectionWorkTaskOne
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DependencyCollectionWork
argument_list|()
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|DependencyCollectionWork
argument_list|>
name|collectionWorkTaskTwo
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DependencyCollectionWork
argument_list|()
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|DependencyCollectionWork
argument_list|>
name|collectionWorkTaskThree
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DependencyCollectionWork
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rootTask
operator|.
name|getDependentTasks
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|collectionWorkTaskOne
argument_list|,
name|collectionWorkTaskTwo
argument_list|,
name|collectionWorkTaskThree
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasksPostCurrentGraph
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|DAGTraversal
operator|.
name|traverse
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|rootTask
argument_list|)
argument_list|,
operator|new
name|AddDependencyToLeaves
argument_list|(
name|tasksPostCurrentGraph
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|dependentTasksForOne
init|=
name|collectionWorkTaskOne
operator|.
name|getDependentTasks
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|dependentTasksForTwo
init|=
name|collectionWorkTaskTwo
operator|.
name|getDependentTasks
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|dependentTasksForThree
init|=
name|collectionWorkTaskThree
operator|.
name|getDependentTasks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|dependentTasksForOne
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dependentTasksForTwo
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dependentTasksForThree
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tasksPostCurrentGraph
operator|.
name|containsAll
argument_list|(
name|dependentTasksForOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tasksPostCurrentGraph
operator|.
name|containsAll
argument_list|(
name|dependentTasksForTwo
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tasksPostCurrentGraph
operator|.
name|containsAll
argument_list|(
name|dependentTasksForThree
argument_list|)
argument_list|)
expr_stmt|;
comment|//    assertTrue(dependentTasksForOne.iterator().next() instanceof DependencyCollectionTask);
comment|//    assertTrue(dependentTasksForTwo.iterator().next() instanceof DependencyCollectionTask);
comment|//    assertTrue(dependentTasksForThree.iterator().next() instanceof DependencyCollectionTask);
block|}
block|}
end_class

end_unit

