begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|RandomTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
operator|.
name|VectorBatchGenerator
operator|.
name|GenerateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
operator|.
name|VectorBatchGenerator
operator|.
name|GenerateType
operator|.
name|GenerateCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|VectorColumnGroupGenerator
block|{
specifier|private
name|GenerateType
index|[]
name|generateTypes
decl_stmt|;
specifier|private
name|int
index|[]
name|columnNums
decl_stmt|;
specifier|private
name|Object
index|[]
name|arrays
decl_stmt|;
specifier|public
name|VectorColumnGroupGenerator
parameter_list|(
name|int
name|columnNum
parameter_list|,
name|GenerateType
name|generateType
parameter_list|)
block|{
name|columnNums
operator|=
operator|new
name|int
index|[]
block|{
name|columnNum
block|}
expr_stmt|;
name|generateTypes
operator|=
operator|new
name|GenerateType
index|[]
block|{
name|generateType
block|}
expr_stmt|;
name|allocateArrays
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VectorColumnGroupGenerator
parameter_list|(
name|int
name|startColumnNum
parameter_list|,
name|GenerateType
index|[]
name|generateTypes
parameter_list|)
block|{
name|columnNums
operator|=
operator|new
name|int
index|[
name|generateTypes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|generateTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columnNums
index|[
name|i
index|]
operator|=
name|startColumnNum
operator|+
name|i
expr_stmt|;
block|}
name|this
operator|.
name|generateTypes
operator|=
name|generateTypes
expr_stmt|;
name|allocateArrays
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|GenerateType
index|[]
name|generateTypes
parameter_list|()
block|{
return|return
name|generateTypes
return|;
block|}
specifier|private
name|void
name|allocateArrays
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|arrays
operator|=
operator|new
name|Object
index|[
name|generateTypes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|generateTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GenerateType
name|generateType
init|=
name|generateTypes
index|[
name|i
index|]
decl_stmt|;
name|GenerateCategory
name|category
init|=
name|generateType
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|Object
name|array
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|array
operator|=
operator|new
name|boolean
index|[
name|size
index|]
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|array
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|array
operator|=
operator|new
name|short
index|[
name|size
index|]
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|array
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|array
operator|=
operator|new
name|long
index|[
name|size
index|]
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|array
operator|=
operator|new
name|float
index|[
name|size
index|]
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|array
operator|=
operator|new
name|double
index|[
name|size
index|]
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|array
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|array
operator|=
operator|new
name|Timestamp
index|[
name|size
index|]
expr_stmt|;
break|break;
comment|// UNDONE
case|case
name|DATE
case|:
case|case
name|BINARY
case|:
case|case
name|DECIMAL
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
default|default:
block|}
name|arrays
index|[
name|i
index|]
operator|=
name|array
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clearColumnValueArrays
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|generateTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GenerateType
name|generateType
init|=
name|generateTypes
index|[
name|i
index|]
decl_stmt|;
name|GenerateCategory
name|category
init|=
name|generateType
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|Object
name|array
init|=
name|arrays
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|Arrays
operator|.
name|fill
argument_list|(
operator|(
operator|(
name|boolean
index|[]
operator|)
name|array
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|Arrays
operator|.
name|fill
argument_list|(
operator|(
operator|(
name|byte
index|[]
operator|)
name|array
operator|)
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|Arrays
operator|.
name|fill
argument_list|(
operator|(
operator|(
name|short
index|[]
operator|)
name|array
operator|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|Arrays
operator|.
name|fill
argument_list|(
operator|(
operator|(
name|int
index|[]
operator|)
name|array
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|Arrays
operator|.
name|fill
argument_list|(
operator|(
operator|(
name|long
index|[]
operator|)
name|array
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|Arrays
operator|.
name|fill
argument_list|(
operator|(
operator|(
name|float
index|[]
operator|)
name|array
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|Arrays
operator|.
name|fill
argument_list|(
operator|(
operator|(
name|double
index|[]
operator|)
name|array
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|Arrays
operator|.
name|fill
argument_list|(
operator|(
operator|(
name|String
index|[]
operator|)
name|array
operator|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|Arrays
operator|.
name|fill
argument_list|(
operator|(
operator|(
name|Timestamp
index|[]
operator|)
name|array
operator|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
comment|// UNDONE
case|case
name|DATE
case|:
case|case
name|BINARY
case|:
case|case
name|DECIMAL
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
default|default:
block|}
block|}
block|}
specifier|public
name|void
name|generateRowValues
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|generateTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|generateRowColumnValue
argument_list|(
name|rowIndex
argument_list|,
name|i
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generateRowColumnValue
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|GenerateType
name|generateType
init|=
name|generateTypes
index|[
name|columnIndex
index|]
decl_stmt|;
name|GenerateCategory
name|category
init|=
name|generateType
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|Object
name|array
init|=
name|arrays
index|[
name|columnIndex
index|]
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|boolean
name|value
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
operator|(
operator|(
name|boolean
index|[]
operator|)
name|array
operator|)
index|[
name|rowIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|byte
name|value
init|=
call|(
name|byte
call|)
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|-
name|random
operator|.
name|nextInt
argument_list|(
operator|-
operator|(
operator|(
name|int
operator|)
name|Byte
operator|.
name|MIN_VALUE
operator|)
operator|+
literal|1
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|Byte
operator|.
name|MAX_VALUE
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|byte
index|[]
operator|)
name|array
operator|)
index|[
name|rowIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|short
name|value
init|=
call|(
name|short
call|)
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|-
name|random
operator|.
name|nextInt
argument_list|(
operator|-
operator|(
operator|(
name|int
operator|)
name|Short
operator|.
name|MIN_VALUE
operator|)
operator|+
literal|1
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|Short
operator|.
name|MAX_VALUE
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|short
index|[]
operator|)
name|array
operator|)
index|[
name|rowIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
break|break;
case|case
name|INT
case|:
block|{
name|int
name|value
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
operator|(
operator|(
name|int
index|[]
operator|)
name|array
operator|)
index|[
name|rowIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|long
name|value
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
operator|(
operator|(
name|long
index|[]
operator|)
name|array
operator|)
index|[
name|rowIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|float
name|value
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
operator|(
operator|(
name|float
index|[]
operator|)
name|array
operator|)
index|[
name|rowIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|double
name|value
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
operator|(
operator|(
name|double
index|[]
operator|)
name|array
operator|)
index|[
name|rowIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|String
name|value
init|=
name|RandomTypeUtil
operator|.
name|getRandString
argument_list|(
name|random
argument_list|)
decl_stmt|;
operator|(
operator|(
name|String
index|[]
operator|)
name|array
operator|)
index|[
name|rowIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|Timestamp
name|value
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|random
argument_list|)
decl_stmt|;
operator|(
operator|(
name|Timestamp
index|[]
operator|)
name|array
operator|)
index|[
name|rowIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
break|break;
comment|// UNDONE
case|case
name|DATE
case|:
comment|// UNDONE: Needed to longTest?
case|case
name|BINARY
case|:
case|case
name|DECIMAL
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
default|default:
block|}
block|}
specifier|public
name|void
name|fillDownRowValues
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|seriesCount
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|generateTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fillDownRowColumnValue
argument_list|(
name|rowIndex
argument_list|,
name|i
argument_list|,
name|seriesCount
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fillDownRowColumnValue
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|,
name|int
name|seriesCount
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|GenerateType
name|generateType
init|=
name|generateTypes
index|[
name|columnIndex
index|]
decl_stmt|;
name|GenerateCategory
name|category
init|=
name|generateType
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|Object
name|array
init|=
name|arrays
index|[
name|columnIndex
index|]
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|boolean
index|[]
name|booleanArray
init|=
operator|(
operator|(
name|boolean
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|boolean
name|value
init|=
name|booleanArray
index|[
name|rowIndex
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|booleanArray
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|byte
index|[]
name|byteArray
init|=
operator|(
operator|(
name|byte
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|byte
name|value
init|=
name|byteArray
index|[
name|rowIndex
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|byteArray
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|short
index|[]
name|shortArray
init|=
operator|(
operator|(
name|short
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|short
name|value
init|=
name|shortArray
index|[
name|rowIndex
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|shortArray
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
name|int
index|[]
name|intArray
init|=
operator|(
operator|(
name|int
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|int
name|value
init|=
name|intArray
index|[
name|rowIndex
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|intArray
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|long
index|[]
name|longArray
init|=
operator|(
operator|(
name|long
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|long
name|value
init|=
name|longArray
index|[
name|rowIndex
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|longArray
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|float
index|[]
name|floatArray
init|=
operator|(
operator|(
name|float
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|float
name|value
init|=
name|floatArray
index|[
name|rowIndex
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|floatArray
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|double
index|[]
name|doubleArray
init|=
operator|(
operator|(
name|double
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|double
name|value
init|=
name|doubleArray
index|[
name|rowIndex
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|doubleArray
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|String
index|[]
name|stringArray
init|=
operator|(
operator|(
name|String
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|String
name|value
init|=
name|stringArray
index|[
name|rowIndex
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|stringArray
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|Timestamp
index|[]
name|timestampArray
init|=
operator|(
operator|(
name|Timestamp
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|Timestamp
name|value
init|=
name|timestampArray
index|[
name|rowIndex
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|timestampArray
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
break|break;
comment|// UNDONE
case|case
name|DATE
case|:
case|case
name|BINARY
case|:
case|case
name|DECIMAL
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
default|default:
block|}
block|}
specifier|public
name|void
name|generateDownRowValues
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|seriesCount
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|generateTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|g
init|=
literal|1
init|;
name|g
operator|<
name|seriesCount
condition|;
name|g
operator|++
control|)
block|{
name|generateRowColumnValue
argument_list|(
name|rowIndex
operator|+
name|g
argument_list|,
name|i
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|populateBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|size
parameter_list|,
name|boolean
name|isRepeated
parameter_list|)
block|{
comment|// UNDONE: Haven't finished isRepeated
assert|assert
operator|!
name|isRepeated
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|g
init|=
literal|0
init|;
name|g
operator|<
name|generateTypes
operator|.
name|length
condition|;
name|g
operator|++
control|)
block|{
name|populateBatchColumn
argument_list|(
name|batch
argument_list|,
name|g
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|populateBatchColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|int
name|columnNum
init|=
name|columnNums
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|columnNum
index|]
decl_stmt|;
name|GenerateType
name|generateType
init|=
name|generateTypes
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
name|GenerateCategory
name|category
init|=
name|generateType
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|Object
name|array
init|=
name|arrays
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|boolean
index|[]
name|booleanArray
init|=
operator|(
operator|(
name|boolean
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|long
index|[]
name|vector
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
operator|(
name|booleanArray
index|[
name|i
index|]
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|byte
index|[]
name|byteArray
init|=
operator|(
operator|(
name|byte
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|long
index|[]
name|vector
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
name|byteArray
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|short
index|[]
name|shortArray
init|=
operator|(
operator|(
name|short
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|long
index|[]
name|vector
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
name|shortArray
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
name|int
index|[]
name|intArray
init|=
operator|(
operator|(
name|int
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|long
index|[]
name|vector
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
name|intArray
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|long
index|[]
name|longArray
init|=
operator|(
operator|(
name|long
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|long
index|[]
name|vector
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
name|longArray
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|float
index|[]
name|floatArray
init|=
operator|(
operator|(
name|float
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|double
index|[]
name|vector
init|=
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
name|floatArray
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|double
index|[]
name|doubleArray
init|=
operator|(
operator|(
name|double
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|double
index|[]
name|vector
init|=
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
name|doubleArray
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|String
index|[]
name|stringArray
init|=
operator|(
operator|(
name|String
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|BytesColumnVector
name|bytesColVec
init|=
operator|(
operator|(
name|BytesColumnVector
operator|)
name|colVector
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|stringArray
index|[
name|i
index|]
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|bytesColVec
operator|.
name|setVal
argument_list|(
name|i
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|Timestamp
index|[]
name|timestampArray
init|=
operator|(
operator|(
name|Timestamp
index|[]
operator|)
name|array
operator|)
decl_stmt|;
name|TimestampColumnVector
name|timestampColVec
init|=
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|colVector
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|timestamp
init|=
name|timestampArray
index|[
name|i
index|]
decl_stmt|;
name|timestampColVec
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
comment|// UNDONE
case|case
name|DATE
case|:
case|case
name|BINARY
case|:
case|case
name|DECIMAL
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
default|default:
block|}
block|}
block|}
end_class

end_unit

