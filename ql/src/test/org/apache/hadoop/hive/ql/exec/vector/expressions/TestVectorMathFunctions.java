begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|RandomTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncACosDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncASinDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncATanDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncAbsDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncAbsLongToLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncCeilDoubleToLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncCosDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncDegreesDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncExpDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncFloorDoubleToLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncLnDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncLnLongToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncLog10DoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncLog10LongToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncLog2DoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncLog2LongToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncRadiansDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncRoundDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncSignDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncSignLongToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncSinDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncSqrtDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncTanDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorMathFunctions
block|{
specifier|private
specifier|static
specifier|final
name|double
name|eps
init|=
literal|1.0e-7
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|equalsWithinTolerance
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|a
operator|-
name|b
argument_list|)
operator|<
name|eps
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorRound
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncRoundDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|2d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// spot check null propagation
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|resultV
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultV
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|resultV
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// check isRepeating propagation
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|resultV
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|2d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|resultV
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|2d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoundToDecimalPlaces
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|RoundWithNumDigitsDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
comment|// Verify result is rounded to 4 digits
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.2346d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
specifier|static
name|int
name|DAYS_LIMIT
init|=
literal|365
operator|*
literal|9999
decl_stmt|;
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchDateInTimestampOut
parameter_list|(
name|int
index|[]
name|intValues
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|12099
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inV
decl_stmt|;
name|TimestampColumnVector
name|outV
decl_stmt|;
name|inV
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|outV
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|intValues
index|[
name|i
index|]
operator|=
name|r
operator|.
name|nextInt
argument_list|()
operator|%
name|DAYS_LIMIT
expr_stmt|;
name|inV
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|intValues
index|[
name|i
index|]
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inV
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|intValues
operator|.
name|length
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchDoubleInLongOut
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
decl_stmt|;
name|DoubleColumnVector
name|dcv
decl_stmt|;
name|lcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|dcv
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
operator|-
literal|1.5d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|0.5d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|2
index|]
operator|=
operator|-
literal|0.1d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|3
index|]
operator|=
literal|0d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|4
index|]
operator|=
literal|0.5d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|5
index|]
operator|=
literal|0.7d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|6
index|]
operator|=
literal|1.5d
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|dcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|lcv
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|7
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchDoubleInTimestampOut
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TimestampColumnVector
name|tcv
decl_stmt|;
name|DoubleColumnVector
name|dcv
decl_stmt|;
name|tcv
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
name|dcv
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
operator|-
literal|1.5d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|0.5d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|2
index|]
operator|=
operator|-
literal|0.1d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|3
index|]
operator|=
literal|0d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|4
index|]
operator|=
literal|0.5d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|5
index|]
operator|=
literal|0.7d
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
literal|6
index|]
operator|=
literal|1.5d
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|dcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|tcv
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|7
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchDoubleInDoubleOut
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inV
decl_stmt|;
name|DoubleColumnVector
name|outV
decl_stmt|;
name|outV
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|inV
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|0
index|]
operator|=
operator|-
literal|1.5d
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|0.5d
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|2
index|]
operator|=
operator|-
literal|0.1d
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|3
index|]
operator|=
literal|0d
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|4
index|]
operator|=
literal|0.5d
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|5
index|]
operator|=
literal|0.7d
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|6
index|]
operator|=
literal|1.5d
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|7
index|]
operator|=
literal|1.2345678d
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inV
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|8
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchLongInDoubleOut
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
decl_stmt|;
name|DoubleColumnVector
name|dcv
decl_stmt|;
name|lcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|dcv
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
operator|-
literal|2
expr_stmt|;
name|lcv
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|lcv
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|lcv
operator|.
name|vector
index|[
literal|3
index|]
operator|=
literal|1
expr_stmt|;
name|lcv
operator|.
name|vector
index|[
literal|4
index|]
operator|=
literal|2
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|dcv
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|5
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchTimestampInDoubleOut
parameter_list|(
name|double
index|[]
name|doubleValues
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|45993
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TimestampColumnVector
name|tcv
decl_stmt|;
name|DoubleColumnVector
name|dcv
decl_stmt|;
name|tcv
operator|=
operator|new
name|TimestampColumnVector
argument_list|(
name|doubleValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|dcv
operator|=
operator|new
name|DoubleColumnVector
argument_list|(
name|doubleValues
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubleValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doubleValues
index|[
name|i
index|]
operator|=
name|r
operator|.
name|nextDouble
argument_list|()
operator|%
operator|(
name|double
operator|)
name|SECONDS_LIMIT
expr_stmt|;
name|dcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|doubleValues
index|[
name|i
index|]
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|tcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|dcv
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|doubleValues
operator|.
name|length
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchLongInLongOut
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inV
decl_stmt|,
name|outV
decl_stmt|;
name|inV
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|outV
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|0
index|]
operator|=
operator|-
literal|2
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inV
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|2
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchStringInLongOut
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|inV
decl_stmt|;
name|LongColumnVector
name|outV
decl_stmt|;
name|inV
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|outV
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|inV
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|inV
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|encode
argument_list|(
literal|"true"
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setVal
argument_list|(
literal|1
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|encode
argument_list|(
literal|"TRUE"
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setVal
argument_list|(
literal|2
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|encode
argument_list|(
literal|"TrUe"
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setVal
argument_list|(
literal|3
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|encode
argument_list|(
literal|"false"
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setVal
argument_list|(
literal|4
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|encode
argument_list|(
literal|"FALSE"
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setVal
argument_list|(
literal|5
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|encode
argument_list|(
literal|"FaLsE"
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setVal
argument_list|(
literal|6
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|encode
argument_list|(
literal|""
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setVal
argument_list|(
literal|7
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|encode
argument_list|(
literal|"Other"
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inV
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|8
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchTimestampInLongOut
parameter_list|(
name|long
index|[]
name|longValues
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|345
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TimestampColumnVector
name|inV
decl_stmt|;
name|LongColumnVector
name|outV
decl_stmt|;
name|inV
operator|=
operator|new
name|TimestampColumnVector
argument_list|(
name|longValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|outV
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|longValues
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|randTimestamp
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|longValues
index|[
name|i
index|]
operator|=
name|TimestampWritable
operator|.
name|getLong
argument_list|(
name|randTimestamp
argument_list|)
expr_stmt|;
name|inV
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|randTimestamp
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inV
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|longValues
operator|.
name|length
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|static
name|long
name|SECONDS_LIMIT
init|=
literal|60L
operator|*
literal|24L
operator|*
literal|365L
operator|*
literal|9999L
decl_stmt|;
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatchLongInTimestampOut
parameter_list|(
name|long
index|[]
name|longValues
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|12099
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inV
decl_stmt|;
name|TimestampColumnVector
name|outV
decl_stmt|;
name|inV
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|outV
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|longValues
index|[
name|i
index|]
operator|=
name|r
operator|.
name|nextLong
argument_list|()
operator|%
name|SECONDS_LIMIT
expr_stmt|;
name|inV
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|longValues
index|[
name|i
index|]
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inV
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|longValues
operator|.
name|length
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getBatchForStringMath
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inL
decl_stmt|;
name|BytesColumnVector
name|inS
decl_stmt|,
name|outS
decl_stmt|;
name|inL
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|inS
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|outS
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|inL
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|inL
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|255
expr_stmt|;
name|inL
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|inS
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
try|try
block|{
name|inS
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
literal|"00"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|inS
operator|.
name|setVal
argument_list|(
literal|1
argument_list|,
literal|"3232"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bad
init|=
literal|"bad data"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|inS
operator|.
name|setVal
argument_list|(
literal|2
argument_list|,
name|bad
argument_list|,
literal|0
argument_list|,
name|bad
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inS
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inL
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outS
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
return|return
name|batch
return|;
block|}
comment|/*    * The following tests spot-check that vectorized functions with signature    * DOUBLE func(DOUBLE) that came from template ColumnUnaryFunc.txt    * get the right result. Null propagation, isRepeating    * propagation will be checked once for a single expansion of the template    * (for FuncRoundDoubleToDouble).    */
annotation|@
name|Test
specifier|public
name|void
name|testVectorSin
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncSinDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|sin
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorCos
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncCosDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|cos
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorTan
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncTanDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|tan
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorASin
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncASinDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|asin
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorACos
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncACosDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|acos
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorATan
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncATanDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|atan
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorDegrees
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncDegreesDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|toDegrees
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorRadians
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncRadiansDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorFloor
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|resultV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncFloorDoubleToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorCeil
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|resultV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncCeilDoubleToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExp
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncExpDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|exp
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorLn
parameter_list|()
block|{
comment|// test double->double version
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncLnDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|0.5
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// test long->double version
name|b
operator|=
name|getVectorizedRowBatchLongInDoubleOut
argument_list|()
expr_stmt|;
name|resultV
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|=
operator|new
name|FuncLnLongToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorLog2
parameter_list|()
block|{
comment|// test double->double version
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncLog2DoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|0.5d
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// test long->double version
name|b
operator|=
name|getVectorizedRowBatchLongInDoubleOut
argument_list|()
expr_stmt|;
name|resultV
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|=
operator|new
name|FuncLog2LongToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|1
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorLog10
parameter_list|()
block|{
comment|// test double->double version
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncLog10DoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|equalsWithinTolerance
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|0.5d
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|10
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// test long->double version
name|b
operator|=
name|getVectorizedRowBatchLongInDoubleOut
argument_list|()
expr_stmt|;
name|resultV
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|=
operator|new
name|FuncLog10LongToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|1
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|10
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorRand
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|v
init|=
operator|new
name|DoubleColumnVector
argument_list|()
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|b
operator|.
name|size
operator|=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
expr_stmt|;
name|int
name|n
init|=
name|b
operator|.
name|size
decl_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncRandNoSeed
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|double
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|v
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|vector
index|[
name|i
index|]
operator|>=
literal|0.0
operator|&&
name|v
operator|.
name|vector
index|[
name|i
index|]
operator|<=
literal|1.0
argument_list|)
expr_stmt|;
block|}
name|double
name|avg
init|=
name|sum
operator|/
name|n
decl_stmt|;
comment|/* The random values must be between 0 and 1, distributed uniformly.      * So the average value of a large set should be about 0.5. Verify it is      * close to this value.      */
name|Assert
operator|.
name|assertTrue
argument_list|(
name|avg
operator|>
literal|0.3
operator|&&
name|avg
operator|<
literal|0.7
argument_list|)
expr_stmt|;
comment|// Now, test again with a seed.
name|Arrays
operator|.
name|fill
argument_list|(
name|v
operator|.
name|vector
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|=
operator|new
name|FuncRand
argument_list|(
literal|99999
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|sum
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|v
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|vector
index|[
name|i
index|]
operator|>=
literal|0.0
operator|&&
name|v
operator|.
name|vector
index|[
name|i
index|]
operator|<=
literal|1.0
argument_list|)
expr_stmt|;
block|}
name|avg
operator|=
name|sum
operator|/
name|n
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|avg
operator|>
literal|0.3
operator|&&
name|avg
operator|<
literal|0.7
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorLogBase
parameter_list|()
block|{
comment|// test double->double version
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncLogWithBaseDoubleToDouble
argument_list|(
literal|10.0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|equalsWithinTolerance
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|0.5d
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|10
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorPosMod
parameter_list|()
block|{
comment|// test double->double version
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|inV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|4
index|]
operator|=
operator|-
literal|4.0
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|PosModDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|0.3d
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setOutputTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|equalsWithinTolerance
argument_list|(
operator|(
operator|(
operator|-
literal|4.0d
operator|%
literal|0.3d
operator|)
operator|+
literal|0.3d
operator|)
operator|%
literal|0.3d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// test long->long version
name|b
operator|=
name|getVectorizedRowBatchLongInLongOut
argument_list|()
expr_stmt|;
name|LongColumnVector
name|resV2
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|=
operator|new
name|PosModLongToLong
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setOutputTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"tinyint"
argument_list|)
argument_list|)
expr_stmt|;
comment|//((ISetLongArg) expr).setArg(3);
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
operator|-
literal|2
operator|%
literal|3
operator|)
operator|+
literal|3
operator|)
operator|%
literal|3
argument_list|,
name|resV2
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//use smallint as outputTypeInfo
name|expr
operator|=
operator|new
name|PosModLongToLong
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setOutputTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"smallint"
argument_list|)
argument_list|)
expr_stmt|;
comment|//((ISetLongArg) expr).setArg(3);
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
operator|-
literal|2
operator|%
literal|3
operator|)
operator|+
literal|3
operator|)
operator|%
literal|3
argument_list|,
name|resV2
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//use int as outputTypeInfo
name|expr
operator|=
operator|new
name|PosModLongToLong
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setOutputTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
comment|//((ISetLongArg) expr).setArg(3);
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
operator|-
literal|2
operator|%
literal|3
operator|)
operator|+
literal|3
operator|)
operator|%
literal|3
argument_list|,
name|resV2
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//use bigint
name|expr
operator|=
operator|new
name|PosModLongToLong
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setOutputTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"bigint"
argument_list|)
argument_list|)
expr_stmt|;
comment|//((ISetLongArg) expr).setArg(3);
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
operator|-
literal|2
operator|%
literal|3
operator|)
operator|+
literal|3
operator|)
operator|%
literal|3
argument_list|,
name|resV2
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorPosModWithFloatOutputType
parameter_list|()
block|{
comment|// test double->double version
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|inV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|inV
operator|.
name|vector
index|[
literal|4
index|]
operator|=
operator|-
literal|4.0
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|PosModDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|0.3d
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setOutputTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|equalsWithinTolerance
argument_list|(
operator|(
operator|(
operator|-
literal|4.0f
operator|%
literal|0.3f
operator|)
operator|+
literal|0.3f
operator|)
operator|%
literal|0.3f
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// test long->long version
name|b
operator|=
name|getVectorizedRowBatchLongInLongOut
argument_list|()
expr_stmt|;
name|LongColumnVector
name|resV2
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|=
operator|new
name|PosModLongToLong
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//((ISetLongArg) expr).setArg(3);
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
operator|-
literal|2
operator|%
literal|3
operator|)
operator|+
literal|3
operator|)
operator|%
literal|3
argument_list|,
name|resV2
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorPower
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncPowerDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|2.0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|equalsWithinTolerance
argument_list|(
literal|0.5d
operator|*
literal|0.5d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorSqrt
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncSqrtDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
literal|0.5d
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorAbs
parameter_list|()
block|{
comment|// test double->double version
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncAbsDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.5
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// test long->long version
name|b
operator|=
name|getVectorizedRowBatchLongInLongOut
argument_list|()
expr_stmt|;
name|LongColumnVector
name|resultVLong
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|=
operator|new
name|FuncAbsLongToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultVLong
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultVLong
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorSign
parameter_list|()
block|{
comment|// test double->double version
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatchDoubleInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncSignDoubleToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1.0d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.0d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// test long->double version
name|b
operator|=
name|getVectorizedRowBatchLongInDoubleOut
argument_list|()
expr_stmt|;
name|resultV
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|=
operator|new
name|FuncSignLongToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1.0d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.0d
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorBin
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// test conversion of long->string
name|VectorizedRowBatch
name|b
init|=
name|getBatchForStringMath
argument_list|()
decl_stmt|;
name|BytesColumnVector
name|resultV
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncBin
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"11111111"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorHex
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// test long->string version
name|VectorizedRowBatch
name|b
init|=
name|getBatchForStringMath
argument_list|()
decl_stmt|;
name|BytesColumnVector
name|resultV
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|FuncHex
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"FF"
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// test string->string version
name|b
operator|=
name|getBatchForStringMath
argument_list|()
expr_stmt|;
name|resultV
operator|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|=
operator|new
name|StringHex
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|String
argument_list|(
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"33323332"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

