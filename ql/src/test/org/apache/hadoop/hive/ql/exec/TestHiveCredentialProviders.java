begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConfUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
operator|.
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
operator|.
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
operator|.
name|HIVE_SERVER2_JOB_CREDSTORE_PASSWORD_ENVVAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveCredentialProviders
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
init|=
literal|"testhadoopCredStorePassword"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL
init|=
literal|"testhiveJobCredPassword"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JOB_CREDSTORE_LOCATION
init|=
literal|"jceks://hdfs/user/hive/creds.jceks"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HADOOP_CREDSTORE_LOCATION
init|=
literal|"localjceks://file/user/hive/localcreds.jceks"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|REDACTED_PROPERTIES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|,
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|jobConf
decl_stmt|;
comment|/*    * Dirty hack to set the environment variables using reflection code. This method is for testing    * purposes only and should not be used elsewhere    */
specifier|private
specifier|final
specifier|static
name|void
name|setEnv
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newenv
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
index|[]
name|classes
init|=
name|Collections
operator|.
name|class
operator|.
name|getDeclaredClasses
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|System
operator|.
name|getenv
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cl
range|:
name|classes
control|)
block|{
if|if
condition|(
literal|"java.util.Collections$UnmodifiableMap"
operator|.
name|equals
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Field
name|field
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
literal|"m"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|field
operator|.
name|get
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|obj
decl_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|newenv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|resetConfig
parameter_list|()
block|{
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
block|}
comment|/*    * Tests whether credential provider is updated when HIVE_JOB_CREDSTORE_PASSWORD is set and when    * hiveConf sets HiveConf.ConfVars.HIVE_SERVER2_JOB_CREDSTORE_LOCATION    *    * JobConf should contain the mapred env variable equal to ${HIVE_JOB_CREDSTORE_PASSWORD} and the    * hadoop.security.credential.provider.path property should be equal to value of    * HiveConf.ConfVars.HIVE_SERVER2_JOB_CREDSTORE_LOCATION    */
annotation|@
name|Test
specifier|public
name|void
name|testJobCredentialProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConfigs
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
comment|// make sure credential provider path points to HIVE_SERVER2_JOB_CREDSTORE_LOCATION
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JOB_CREDSTORE_LOCATION
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure MAP task environment points to HIVE_JOB_CREDSTORE_PASSWORD
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure REDUCE task environment points to HIVE_JOB_CREDSTORE_PASSWORD
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jobConf
operator|.
name|getStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDACTED_PROPERTIES
argument_list|)
operator|.
name|containsAll
argument_list|(
name|REDACTED_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * If hive job credstore location is not set, but hadoop credential provider is set    * jobConf should contain hadoop credstore location and password should be from HADOOP_CREDSTORE_PASSWORD    */
annotation|@
name|Test
specifier|public
name|void
name|testHadoopCredentialProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConfigs
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_LOCATION
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure MAP task environment points to HADOOP_CREDSTORE_PASSWORD
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure REDUCE task environment points to HADOOP_CREDSTORE_PASSWORD
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jobConf
operator|.
name|getStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDACTED_PROPERTIES
argument_list|)
operator|.
name|containsAll
argument_list|(
name|REDACTED_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * If there is no credential provider configured for hadoop, jobConf should not contain    * credstore password and provider path even if HIVE_JOB_CRESTORE_PASSWORD env is set    */
annotation|@
name|Test
specifier|public
name|void
name|testNoCredentialProviderWithPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConfigs
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|REDACTED_PROPERTIES
operator|.
name|forEach
argument_list|(
name|property
lambda|->
name|Assert
operator|.
name|assertFalse
argument_list|(
name|jobConf
operator|.
name|getStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDACTED_PROPERTIES
argument_list|)
operator|.
name|contains
argument_list|(
name|property
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * If hive job credential provider is set but HIVE_JOB_CREDSTORE_PASSWORD is not set, use    * HADOOP_CREDSTORE_PASSWORD in the jobConf    */
annotation|@
name|Test
specifier|public
name|void
name|testJobCredentialProviderWithDefaultPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConfigs
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JOB_CREDSTORE_LOCATION
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jobConf
operator|.
name|getStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDACTED_PROPERTIES
argument_list|)
operator|.
name|containsAll
argument_list|(
name|REDACTED_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * When neither HADOOP_CREDSTORE_PASSWORD nor HIVE_JOB_CREDSTORE_PASSWORD    * are not set jobConf should contain only the credential provider path    */
annotation|@
name|Test
specifier|public
name|void
name|testCredentialProviderWithNoPasswords
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConfigs
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JOB_CREDSTORE_LOCATION
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|)
argument_list|)
expr_stmt|;
name|REDACTED_PROPERTIES
operator|.
name|forEach
argument_list|(
name|property
lambda|->
name|Assert
operator|.
name|assertFalse
argument_list|(
name|jobConf
operator|.
name|getStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDACTED_PROPERTIES
argument_list|)
operator|.
name|contains
argument_list|(
name|property
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resetConfig
argument_list|()
expr_stmt|;
name|setupConfigs
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_LOCATION
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|)
argument_list|)
expr_stmt|;
name|REDACTED_PROPERTIES
operator|.
name|forEach
argument_list|(
name|property
lambda|->
name|Assert
operator|.
name|assertFalse
argument_list|(
name|jobConf
operator|.
name|getStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDACTED_PROPERTIES
argument_list|)
operator|.
name|contains
argument_list|(
name|property
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * default behavior when neither hive.job.credstore location is set nor    * HIVE_JOB_CREDSTORE_PASSWORD is. In this case if hadoop credential provider is configured job    * config should use that else it should remain unset    */
annotation|@
name|Test
specifier|public
name|void
name|testJobCredentialProviderUnset
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConfigs
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_LOCATION
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jobConf
operator|.
name|getStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDACTED_PROPERTIES
argument_list|)
operator|.
name|containsAll
argument_list|(
name|REDACTED_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test the unsecure base case when neither hadoop nor job-specific    * credential provider is set    */
annotation|@
name|Test
specifier|public
name|void
name|testNoCredentialProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConfigs
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|)
argument_list|,
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|REDACTED_PROPERTIES
operator|.
name|forEach
argument_list|(
name|property
lambda|->
name|Assert
operator|.
name|assertFalse
argument_list|(
name|jobConf
operator|.
name|getStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDACTED_PROPERTIES
argument_list|)
operator|.
name|contains
argument_list|(
name|property
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test updateCredentialProviders does not corrupt existing values of    * Mapred env configs    */
annotation|@
name|Test
specifier|public
name|void
name|testExistingConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|jobConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|,
literal|"k1=v1, k2=v2, HADOOP_CREDSTORE_PASSWORD=test"
argument_list|)
expr_stmt|;
name|setupConfigs
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
name|resetConfig
argument_list|()
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|,
literal|"k1=v1, HADOOP_CREDSTORE_PASSWORD=test, k2=v2"
argument_list|)
expr_stmt|;
name|setupConfigs
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
name|resetConfig
argument_list|()
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|,
literal|"HADOOP_CREDSTORE_PASSWORD=test, k1=v1, k2=v2"
argument_list|)
expr_stmt|;
name|setupConfigs
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|getValueFromJobConf
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|)
argument_list|,
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets up the environment and configurations    *    * @param setHadoopCredProvider set hadoop credstore provider path    * @param setHadoopCredstorePassword set HADOOP_CREDSTORE_PASSWORD env variable    * @param setHiveCredPassword set HIVE_JOB_CREDSTORE_PASSWORD env variable    * @param setHiveProviderPath set HiveConf.ConfVars.HIVE_SERVER2_JOB_CREDSTORE_LOCATION in the    *          hive config    * @throws Exception    */
specifier|private
name|void
name|setupConfigs
parameter_list|(
name|boolean
name|setHadoopCredProvider
parameter_list|,
name|boolean
name|setHadoopCredstorePassword
parameter_list|,
name|boolean
name|setHiveCredPassword
parameter_list|,
name|boolean
name|setHiveProviderPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mockEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// sets the env variable HADOOP_CREDSTORE_PASSWORD to value defined by HADOOP_CREDSTORE_PASSWORD
comment|// sets hadoop.security.credential.provider.path property to simulate default credential
comment|// provider setup
if|if
condition|(
name|setHadoopCredProvider
condition|)
block|{
name|jobConf
operator|.
name|set
argument_list|(
name|HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG
argument_list|,
name|HADOOP_CREDSTORE_LOCATION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|setHadoopCredstorePassword
condition|)
block|{
name|mockEnv
operator|.
name|put
argument_list|(
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|,
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|)
expr_stmt|;
block|}
comment|// sets the env variable HIVE_JOB_CREDSTORE_PASSWORD to value defined by
comment|// HIVE_JOB_CREDSTORE_PASSWORD
if|if
condition|(
name|setHiveCredPassword
condition|)
block|{
name|mockEnv
operator|.
name|put
argument_list|(
name|HIVE_SERVER2_JOB_CREDSTORE_PASSWORD_ENVVAR
argument_list|,
name|HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|)
expr_stmt|;
block|}
name|TestHiveCredentialProviders
operator|.
name|setEnv
argument_list|(
name|mockEnv
argument_list|)
expr_stmt|;
comment|// set hive provider path in hiveConf if setHiveProviderPath is true
comment|// simulates hive.server2.job.credstore.location property set in hive-site.xml/core-site.xml of
comment|// HS2
if|if
condition|(
name|setHiveProviderPath
condition|)
block|{
name|jobConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_JOB_CREDENTIAL_PROVIDER_PATH
operator|.
name|varname
argument_list|,
name|JOB_CREDSTORE_LOCATION
argument_list|)
expr_stmt|;
block|}
name|jobConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
operator|.
name|varname
argument_list|,
literal|"mr"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Extract value from a comma-separated key=value pairs    */
specifier|private
name|String
name|getValueFromJobConf
parameter_list|(
name|String
name|keyValuePairs
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|keyValuePairs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|keyValues
init|=
name|keyValuePairs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|kv
range|:
name|keyValues
control|)
block|{
name|String
index|[]
name|parts
init|=
name|kv
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|parts
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/*    * Test if the environment variables can be set. If this test fails    * all the other tests will also fail because environment is not getting setup    */
annotation|@
name|Test
specifier|public
name|void
name|testEnv
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mockEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mockEnv
operator|.
name|put
argument_list|(
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|,
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|)
expr_stmt|;
name|mockEnv
operator|.
name|put
argument_list|(
name|HIVE_SERVER2_JOB_CREDSTORE_PASSWORD_ENVVAR
argument_list|,
name|HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|)
expr_stmt|;
name|TestHiveCredentialProviders
operator|.
name|setEnv
argument_list|(
name|mockEnv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
name|HADOOP_CREDENTIAL_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
name|HIVE_SERVER2_JOB_CREDSTORE_PASSWORD_ENVVAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

