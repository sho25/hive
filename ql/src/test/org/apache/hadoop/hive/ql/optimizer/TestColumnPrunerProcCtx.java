begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFPower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TestColumnPrunerProcCtx
block|{
comment|// struct<a:boolean,b:double>
specifier|private
specifier|static
name|TypeInfo
name|col1Type
decl_stmt|;
comment|// double
specifier|private
specifier|static
name|TypeInfo
name|col2Type
decl_stmt|;
comment|// struct<col1:struct<a:boolean,b:double>,col2:double>
specifier|private
specifier|static
name|TypeInfo
name|col3Type
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|tis
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|TypeInfo
name|aType
init|=
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
decl_stmt|;
name|TypeInfo
name|bType
init|=
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
decl_stmt|;
name|tis
operator|.
name|add
argument_list|(
name|aType
argument_list|)
expr_stmt|;
name|tis
operator|.
name|add
argument_list|(
name|bType
argument_list|)
expr_stmt|;
name|col1Type
operator|=
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|ns
argument_list|,
name|tis
argument_list|)
expr_stmt|;
name|col2Type
operator|=
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|col1Type
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|col2Type
argument_list|)
expr_stmt|;
name|col3Type
operator|=
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|names
argument_list|,
name|typeInfos
argument_list|)
expr_stmt|;
block|}
comment|// Test select root.col1.a from root:struct<col1:struct<a:boolean,b:double>,col2:double>
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectNestedColPathsFromChildren1
parameter_list|()
block|{
name|ColumnPrunerProcCtx
name|ctx
init|=
operator|new
name|ColumnPrunerProcCtx
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|col3Type
argument_list|,
literal|"root"
argument_list|,
literal|"test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|col1
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|col1Type
argument_list|,
name|colDesc
argument_list|,
literal|"col1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|fieldDesc
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|col1
argument_list|,
literal|"a"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldNode
argument_list|>
name|paths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldNode
argument_list|(
literal|"_col0"
argument_list|)
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOperator
init|=
name|buildSelectOperator
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldDesc
argument_list|)
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|groups
init|=
name|ctx
operator|.
name|getSelectColsFromChildren
argument_list|(
name|selectOperator
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|compareTestResults
argument_list|(
name|groups
argument_list|,
literal|"root.col1.a"
argument_list|)
expr_stmt|;
block|}
comment|// Test select root.col1 from root:struct<col1:struct<a:boolean,b:double>,col2:double>
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectNestedColPathsFromChildren2
parameter_list|()
block|{
name|ColumnPrunerProcCtx
name|ctx
init|=
operator|new
name|ColumnPrunerProcCtx
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|col3Type
argument_list|,
literal|"root"
argument_list|,
literal|"test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|fieldDesc
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|col1Type
argument_list|,
name|colDesc
argument_list|,
literal|"col1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldNode
argument_list|>
name|paths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldNode
argument_list|(
literal|"_col0"
argument_list|)
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOperator
init|=
name|buildSelectOperator
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldDesc
argument_list|)
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|groups
init|=
name|ctx
operator|.
name|getSelectColsFromChildren
argument_list|(
name|selectOperator
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|compareTestResults
argument_list|(
name|groups
argument_list|,
literal|"root.col1"
argument_list|)
expr_stmt|;
block|}
comment|// Test select root.col2 from root:struct<col1:struct<a:boolean,b:double>,col2:double>
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectNestedColPathsFromChildren3
parameter_list|()
block|{
name|ColumnPrunerProcCtx
name|ctx
init|=
operator|new
name|ColumnPrunerProcCtx
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|col3Type
argument_list|,
literal|"root"
argument_list|,
literal|"test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|fieldDesc
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|col1Type
argument_list|,
name|colDesc
argument_list|,
literal|"col2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldNode
argument_list|>
name|paths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldNode
argument_list|(
literal|"_col0"
argument_list|)
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOperator
init|=
name|buildSelectOperator
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldDesc
argument_list|)
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|groups
init|=
name|ctx
operator|.
name|getSelectColsFromChildren
argument_list|(
name|selectOperator
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|compareTestResults
argument_list|(
name|groups
argument_list|,
literal|"root.col2"
argument_list|)
expr_stmt|;
block|}
comment|// Test select root from root:struct<col1:struct<a:boolean,b:double>,col2:double>
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectNestedColPathsFromChildren4
parameter_list|()
block|{
name|ColumnPrunerProcCtx
name|ctx
init|=
operator|new
name|ColumnPrunerProcCtx
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|col3Type
argument_list|,
literal|"root"
argument_list|,
literal|"test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldNode
argument_list|>
name|paths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldNode
argument_list|(
literal|"_col0"
argument_list|)
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOperator
init|=
name|buildSelectOperator
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|colDesc
argument_list|)
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|groups
init|=
name|ctx
operator|.
name|getSelectColsFromChildren
argument_list|(
name|selectOperator
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|compareTestResults
argument_list|(
name|groups
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
block|}
comment|// Test select named_struct from named_struct:struct<a:boolean,b:double>
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectNestedColPathsFromChildren5
parameter_list|()
block|{
name|ColumnPrunerProcCtx
name|ctx
init|=
operator|new
name|ColumnPrunerProcCtx
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constADesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constBDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|constADesc
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|constBDesc
argument_list|)
expr_stmt|;
name|GenericUDF
name|udf
init|=
name|mock
argument_list|(
name|GenericUDF
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|funcDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|col1Type
argument_list|,
name|udf
argument_list|,
literal|"named_struct"
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|fieldDesc
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|funcDesc
argument_list|,
literal|"foo"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldNode
argument_list|>
name|paths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldNode
argument_list|(
literal|"_col0"
argument_list|)
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOperator
init|=
name|buildSelectOperator
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldDesc
argument_list|)
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|groups
init|=
name|ctx
operator|.
name|getSelectColsFromChildren
argument_list|(
name|selectOperator
argument_list|,
name|paths
argument_list|)
decl_stmt|;
comment|// Return empty result since only constant Desc exists
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|groups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test select abs(root.col1.b) from table test(root struct<col1:struct<a:boolean,b:double>,
comment|// col2:double>);
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectNestedColPathsFromChildren6
parameter_list|()
block|{
name|ColumnPrunerProcCtx
name|ctx
init|=
operator|new
name|ColumnPrunerProcCtx
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|col3Type
argument_list|,
literal|"root"
argument_list|,
literal|"test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|col1
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|col1Type
argument_list|,
name|colDesc
argument_list|,
literal|"col1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|fieldDesc
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|col1
argument_list|,
literal|"b"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldNode
argument_list|>
name|paths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldNode
argument_list|(
literal|"_col0"
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDF
name|udf
init|=
name|mock
argument_list|(
name|GenericUDFBridge
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|fieldDesc
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|funcDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|,
name|udf
argument_list|,
literal|"abs"
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOperator
init|=
name|buildSelectOperator
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|funcDesc
argument_list|)
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|groups
init|=
name|ctx
operator|.
name|getSelectColsFromChildren
argument_list|(
name|selectOperator
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|compareTestResults
argument_list|(
name|groups
argument_list|,
literal|"root.col1.b"
argument_list|)
expr_stmt|;
block|}
comment|// Test select pow(root.col1.b, root.col2) from table test(root
comment|// struct<col1:struct<a:boolean,b:double>, col2:double>);
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectNestedColPathsFromChildren7
parameter_list|()
block|{
name|ColumnPrunerProcCtx
name|ctx
init|=
operator|new
name|ColumnPrunerProcCtx
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|col3Type
argument_list|,
literal|"root"
argument_list|,
literal|"test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|col1
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|col1Type
argument_list|,
name|colDesc
argument_list|,
literal|"col1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|fieldDesc1
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|col1
argument_list|,
literal|"b"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|colDesc
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|col3Type
argument_list|,
literal|"root"
argument_list|,
literal|"test"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|col2
init|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|col2Type
argument_list|,
name|colDesc
argument_list|,
literal|"col2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldNode
argument_list|>
name|paths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldNode
argument_list|(
literal|"_col0"
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDF
name|udf
init|=
name|mock
argument_list|(
name|GenericUDFPower
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|fieldDesc1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|col2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|funcDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|udf
argument_list|,
literal|"pow"
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOperator
init|=
name|buildSelectOperator
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|funcDesc
argument_list|)
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|groups
init|=
name|ctx
operator|.
name|getSelectColsFromChildren
argument_list|(
name|selectOperator
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|compareTestResults
argument_list|(
name|groups
argument_list|,
literal|"root.col1.b"
argument_list|,
literal|"root.col2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFieldNodeFromString
parameter_list|()
block|{
name|FieldNode
name|fn
init|=
name|FieldNode
operator|.
name|fromPath
argument_list|(
literal|"s.a.b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"s"
argument_list|,
name|fn
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fn
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldNode
name|childFn
init|=
name|fn
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|childFn
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childFn
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|childFn
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeFieldNode
parameter_list|()
block|{
name|FieldNode
name|fn1
init|=
name|FieldNode
operator|.
name|fromPath
argument_list|(
literal|"s.a.b"
argument_list|)
decl_stmt|;
name|FieldNode
name|fn2
init|=
name|FieldNode
operator|.
name|fromPath
argument_list|(
literal|"s.a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fn2
argument_list|,
name|FieldNode
operator|.
name|mergeFieldNode
argument_list|(
name|fn1
argument_list|,
name|fn2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fn2
argument_list|,
name|FieldNode
operator|.
name|mergeFieldNode
argument_list|(
name|fn2
argument_list|,
name|fn1
argument_list|)
argument_list|)
expr_stmt|;
name|fn1
operator|=
name|FieldNode
operator|.
name|fromPath
argument_list|(
literal|"s.a"
argument_list|)
expr_stmt|;
name|fn2
operator|=
name|FieldNode
operator|.
name|fromPath
argument_list|(
literal|"p.b"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|FieldNode
operator|.
name|mergeFieldNode
argument_list|(
name|fn1
argument_list|,
name|fn2
argument_list|)
argument_list|)
expr_stmt|;
name|fn1
operator|=
name|FieldNode
operator|.
name|fromPath
argument_list|(
literal|"s.a.b"
argument_list|)
expr_stmt|;
name|fn2
operator|=
name|FieldNode
operator|.
name|fromPath
argument_list|(
literal|"s.a.c"
argument_list|)
expr_stmt|;
name|FieldNode
name|fn
init|=
name|FieldNode
operator|.
name|mergeFieldNode
argument_list|(
name|fn1
argument_list|,
name|fn2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"s"
argument_list|,
name|fn
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|FieldNode
name|childFn
init|=
name|fn
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|childFn
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|childFn
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|childFn
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|childFn
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareTestResults
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|fieldNodes
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldNode
name|fn
range|:
name|fieldNodes
control|)
block|{
name|expectedPaths
operator|.
name|addAll
argument_list|(
name|fn
operator|.
name|toPaths
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected paths to have length "
operator|+
name|expectedPaths
operator|+
literal|", but got "
operator|+
name|paths
operator|.
name|length
argument_list|,
name|expectedPaths
operator|.
name|size
argument_list|()
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedPaths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"Element at index "
operator|+
name|i
operator|+
literal|" doesn't match"
argument_list|,
name|expectedPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|paths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SelectOperator
name|buildSelectOperator
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|colList
parameter_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
name|outputCols
parameter_list|)
block|{
name|SelectOperator
name|selectOperator
init|=
name|mock
argument_list|(
name|SelectOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|SelectDesc
name|selectDesc
init|=
operator|new
name|SelectDesc
argument_list|(
name|colList
argument_list|,
name|ColumnPrunerProcCtx
operator|.
name|toColumnNames
argument_list|(
name|outputCols
argument_list|)
argument_list|)
decl_stmt|;
name|selectDesc
operator|.
name|setSelStarNoCompute
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|selectOperator
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|selectDesc
argument_list|)
expr_stmt|;
return|return
name|selectOperator
return|;
block|}
block|}
end_class

end_unit

