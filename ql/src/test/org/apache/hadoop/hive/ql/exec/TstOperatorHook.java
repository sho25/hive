begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TstOperatorHook
implements|implements
name|OperatorHook
block|{
specifier|protected
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|long
name|enters
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|exits
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|enter
parameter_list|(
name|OperatorHookContext
name|opHookContext
parameter_list|)
block|{
name|enters
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|exit
parameter_list|(
name|OperatorHookContext
name|opHookContext
parameter_list|)
block|{
name|exits
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|OperatorHookContext
name|opHookContext
parameter_list|)
block|{
name|incrCounter
argument_list|(
name|TstOperatorHookUtils
operator|.
name|TEST_OPERATOR_HOOK_ENTER
argument_list|,
name|opHookContext
argument_list|,
name|enters
argument_list|)
expr_stmt|;
name|incrCounter
argument_list|(
name|TstOperatorHookUtils
operator|.
name|TEST_OPERATOR_HOOK_EXIT
argument_list|,
name|opHookContext
argument_list|,
name|exits
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|incrCounter
parameter_list|(
name|String
name|ctrName
parameter_list|,
name|OperatorHookContext
name|opHookContext
parameter_list|,
name|long
name|incrVal
parameter_list|)
block|{
name|TstOperatorHookUtils
operator|.
name|TestOperatorHookCounter
name|ctr
init|=
name|TstOperatorHookUtils
operator|.
name|TestOperatorHookCounter
operator|.
name|valueOf
argument_list|(
name|ctrName
argument_list|)
decl_stmt|;
name|Operator
name|op
init|=
name|opHookContext
operator|.
name|getOperator
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ctrName
argument_list|)
expr_stmt|;
name|op
operator|.
name|reporter
operator|.
name|incrCounter
argument_list|(
name|ctr
argument_list|,
name|incrVal
argument_list|)
expr_stmt|;
name|Long
name|val
init|=
name|op
operator|.
name|reporter
operator|.
name|getCounter
argument_list|(
name|ctr
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ctrName
operator|+
literal|" "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

