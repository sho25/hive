begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|read
operator|.
name|DataWritableReadSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|ArrayWritableObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|vector
operator|.
name|VectorizedParquetRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|example
operator|.
name|data
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|example
operator|.
name|data
operator|.
name|simple
operator|.
name|SimpleGroupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|example
operator|.
name|GroupReadSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|example
operator|.
name|GroupWriteSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|MessageType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|column
operator|.
name|ParquetProperties
operator|.
name|WriterVersion
operator|.
name|PARQUET_1_0
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|api
operator|.
name|ReadSupport
operator|.
name|PARQUET_READ_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|metadata
operator|.
name|CompressionCodecName
operator|.
name|GZIP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|MessageTypeParser
operator|.
name|parseMessageType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|VectorizedColumnReaderTestBase
block|{
specifier|protected
specifier|final
specifier|static
name|int
name|nElements
init|=
literal|2500
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|UNIQUE_NUM
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|NULL_FREQUENCY
init|=
literal|13
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"target/test/TestParquetVectorReader/testParquetFile"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|MessageType
name|schema
init|=
name|parseMessageType
argument_list|(
literal|"message hive_schema { "
operator|+
literal|"required int32 int32_field; "
operator|+
literal|"required int64 int64_field; "
operator|+
literal|"required int96 int96_field; "
operator|+
literal|"required double double_field; "
operator|+
literal|"required float float_field; "
operator|+
literal|"required boolean boolean_field; "
operator|+
literal|"required fixed_len_byte_array(3) flba_field; "
operator|+
literal|"optional fixed_len_byte_array(1) some_null_field; "
operator|+
literal|"optional fixed_len_byte_array(1) all_null_field; "
operator|+
literal|"required binary binary_field; "
operator|+
literal|"optional binary binary_field_some_null; "
operator|+
literal|"required binary value (DECIMAL(5,2)); "
operator|+
literal|"required group struct_field {"
operator|+
literal|"  required int32 a;\n"
operator|+
literal|"  required double b;\n"
operator|+
literal|"}\n"
operator|+
literal|"optional group nested_struct_field {"
operator|+
literal|"  optional group nsf {"
operator|+
literal|"    optional int32 c;\n"
operator|+
literal|"    optional int32 d;\n"
operator|+
literal|"  }\n"
operator|+
literal|"  optional double e;\n"
operator|+
literal|"}\n"
operator|+
literal|"optional group struct_field_some_null {"
operator|+
literal|"  optional int32 f;\n"
operator|+
literal|"  optional double g;\n"
operator|+
literal|"}\n"
operator|+
literal|"optional group map_field (MAP) {\n"
operator|+
literal|"  repeated group map (MAP_KEY_VALUE) {\n"
operator|+
literal|"    required binary key;\n"
operator|+
literal|"    optional binary value;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
operator|+
literal|"optional group array_list (LIST) {\n"
operator|+
literal|"  repeated group bag {\n"
operator|+
literal|"    optional int32 array_element;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
operator|+
literal|"repeated int32 list_int32_field;"
operator|+
literal|"repeated int64 list_int64_field;"
operator|+
literal|"repeated double list_double_field;"
operator|+
literal|"repeated float list_float_field;"
operator|+
literal|"repeated boolean list_boolean_field;"
operator|+
literal|"repeated fixed_len_byte_array(3) list_byte_array_field;"
operator|+
literal|"repeated binary list_binary_field;"
operator|+
literal|"repeated binary list_decimal_field (DECIMAL(5,2));"
operator|+
literal|"repeated binary list_binary_field_for_repeat_test;"
operator|+
literal|"repeated int32 list_int32_field_for_repeat_test;"
operator|+
literal|"repeated group map_int32 (MAP_KEY_VALUE) {\n"
operator|+
literal|"  required int32 key;\n"
operator|+
literal|"  optional int32 value;\n"
operator|+
literal|"}\n"
operator|+
literal|"repeated group map_int64 (MAP_KEY_VALUE) {\n"
operator|+
literal|"  required int64 key;\n"
operator|+
literal|"  optional int64 value;\n"
operator|+
literal|"}\n"
operator|+
literal|"repeated group map_double (MAP_KEY_VALUE) {\n"
operator|+
literal|"  required double key;\n"
operator|+
literal|"  optional double value;\n"
operator|+
literal|"}\n"
operator|+
literal|"repeated group map_float (MAP_KEY_VALUE) {\n"
operator|+
literal|"  required float key;\n"
operator|+
literal|"  optional float value;\n"
operator|+
literal|"}\n"
operator|+
literal|"repeated group map_binary (MAP_KEY_VALUE) {\n"
operator|+
literal|"  required binary key;\n"
operator|+
literal|"  optional binary value;\n"
operator|+
literal|"}\n"
operator|+
literal|"repeated group map_decimal (MAP_KEY_VALUE) {\n"
operator|+
literal|"  required binary key (DECIMAL(5,2));\n"
operator|+
literal|"  optional binary value (DECIMAL(5,2));\n"
operator|+
literal|"}\n"
operator|+
literal|"repeated group map_int32_for_repeat_test (MAP_KEY_VALUE) {\n"
operator|+
literal|"  required int32 key;\n"
operator|+
literal|"  optional int32 value;\n"
operator|+
literal|"}\n"
operator|+
literal|"} "
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|void
name|removeFile
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|ParquetWriter
argument_list|<
name|Group
argument_list|>
name|initWriterFromFile
parameter_list|()
throws|throws
name|IOException
block|{
name|GroupWriteSupport
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParquetWriter
argument_list|<>
argument_list|(
name|file
argument_list|,
operator|new
name|GroupWriteSupport
argument_list|()
argument_list|,
name|GZIP
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
literal|1024
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|PARQUET_1_0
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|int
name|getIntValue
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|isDictionaryEncoding
condition|?
name|index
operator|%
name|UNIQUE_NUM
else|:
name|index
return|;
block|}
specifier|protected
specifier|static
name|double
name|getDoubleValue
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|isDictionaryEncoding
condition|?
name|index
operator|%
name|UNIQUE_NUM
else|:
name|index
return|;
block|}
specifier|protected
specifier|static
name|long
name|getLongValue
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|isDictionaryEncoding
condition|?
operator|(
name|long
operator|)
literal|2
operator|*
name|index
operator|%
name|UNIQUE_NUM
else|:
operator|(
name|long
operator|)
literal|2
operator|*
name|index
return|;
block|}
specifier|protected
specifier|static
name|float
name|getFloatValue
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
call|(
name|float
call|)
argument_list|(
name|isDictionaryEncoding
condition|?
name|index
operator|%
name|UNIQUE_NUM
operator|*
literal|2.0
else|:
name|index
operator|*
literal|2.0
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|getBooleanValue
parameter_list|(
name|float
name|index
parameter_list|)
block|{
return|return
operator|(
name|index
operator|%
literal|2
operator|==
literal|0
operator|)
return|;
block|}
specifier|protected
specifier|static
name|NanoTime
name|getNanoTime
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|index
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|HiveDecimal
name|getDecimal
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|decimalVal
init|=
name|index
operator|%
literal|100
decl_stmt|;
name|String
name|decimalStr
init|=
operator|(
name|decimalVal
operator|<
literal|10
operator|)
condition|?
literal|"0"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|decimalVal
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|decimalVal
argument_list|)
decl_stmt|;
name|int
name|intVal
init|=
operator|(
name|isDictionaryEncoding
operator|)
condition|?
name|index
operator|%
name|UNIQUE_NUM
else|:
name|index
operator|/
literal|100
decl_stmt|;
name|String
name|d
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|intVal
argument_list|)
operator|+
literal|"."
operator|+
name|decimalStr
decl_stmt|;
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
name|d
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Binary
name|getTimestamp
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|NanoTime
name|s
init|=
name|isDictionaryEncoding
condition|?
name|getNanoTime
argument_list|(
name|index
operator|%
name|UNIQUE_NUM
argument_list|)
else|:
name|getNanoTime
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|toBinary
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|String
name|getStr
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|binaryLen
init|=
name|isDictionaryEncoding
condition|?
name|index
operator|%
name|UNIQUE_NUM
else|:
name|index
decl_stmt|;
name|String
name|v
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|binaryLen
operator|>
literal|0
condition|)
block|{
name|char
name|t
init|=
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|binaryLen
operator|%
literal|26
argument_list|)
decl_stmt|;
name|binaryLen
operator|/=
literal|26
expr_stmt|;
name|v
operator|=
name|t
operator|+
name|v
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
specifier|protected
specifier|static
name|Binary
name|getBinaryValue
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|Binary
operator|.
name|fromString
argument_list|(
name|getStr
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isNull
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|index
operator|%
name|NULL_FREQUENCY
operator|==
literal|0
operator|)
return|;
block|}
specifier|public
specifier|static
name|VectorizedParquetRecordReader
name|createTestParquetReader
parameter_list|(
name|String
name|schemaString
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|HiveException
block|{
name|conf
operator|.
name|set
argument_list|(
name|PARQUET_READ_SCHEMA
argument_list|,
name|schemaString
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PLAN
argument_list|,
literal|"//tmp"
argument_list|)
expr_stmt|;
name|Job
name|vectorJob
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
literal|"read vector"
argument_list|)
decl_stmt|;
name|ParquetInputFormat
operator|.
name|setInputPaths
argument_list|(
name|vectorJob
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|initialVectorizedRowBatchCtx
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|VectorizedParquetRecordReader
argument_list|(
name|getFileSplit
argument_list|(
name|vectorJob
argument_list|)
argument_list|,
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|FileSplit
name|getFileSplit
parameter_list|(
name|Job
name|vectorJob
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ParquetInputFormat
name|parquetInputFormat
init|=
operator|new
name|ParquetInputFormat
argument_list|(
name|GroupReadSupport
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputSplit
name|split
init|=
operator|(
name|InputSplit
operator|)
name|parquetInputFormat
operator|.
name|getSplits
argument_list|(
name|vectorJob
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FileSplit
name|fsplit
init|=
operator|new
name|FileSplit
argument_list|(
name|file
argument_list|,
literal|0L
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|,
name|split
operator|.
name|getLocations
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|fsplit
return|;
block|}
specifier|protected
specifier|static
name|void
name|writeData
parameter_list|(
name|ParquetWriter
argument_list|<
name|Group
argument_list|>
name|writer
parameter_list|,
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleGroupFactory
name|f
init|=
operator|new
name|SimpleGroupFactory
argument_list|(
name|schema
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nElements
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|isNull
init|=
name|isNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|intVal
init|=
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|longVal
init|=
name|getLongValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Binary
name|timeStamp
init|=
name|getTimestamp
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|HiveDecimal
name|decimalVal
init|=
name|getDecimal
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|i
argument_list|)
operator|.
name|setScale
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|double
name|doubleVal
init|=
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|float
name|floatVal
init|=
name|getFloatValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|boolean
name|booleanVal
init|=
name|getBooleanValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|getBinaryValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Group
name|group
init|=
name|f
operator|.
name|newGroup
argument_list|()
operator|.
name|append
argument_list|(
literal|"int32_field"
argument_list|,
name|intVal
argument_list|)
operator|.
name|append
argument_list|(
literal|"int64_field"
argument_list|,
name|longVal
argument_list|)
operator|.
name|append
argument_list|(
literal|"int96_field"
argument_list|,
name|timeStamp
argument_list|)
operator|.
name|append
argument_list|(
literal|"double_field"
argument_list|,
name|doubleVal
argument_list|)
operator|.
name|append
argument_list|(
literal|"float_field"
argument_list|,
name|floatVal
argument_list|)
operator|.
name|append
argument_list|(
literal|"boolean_field"
argument_list|,
name|booleanVal
argument_list|)
operator|.
name|append
argument_list|(
literal|"flba_field"
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNull
condition|)
block|{
name|group
operator|.
name|append
argument_list|(
literal|"some_null_field"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|append
argument_list|(
literal|"binary_field"
argument_list|,
name|binary
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNull
condition|)
block|{
name|group
operator|.
name|append
argument_list|(
literal|"binary_field_some_null"
argument_list|,
name|binary
argument_list|)
expr_stmt|;
block|}
name|HiveDecimalWritable
name|w
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|decimalVal
argument_list|)
decl_stmt|;
name|group
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
name|Binary
operator|.
name|fromConstantByteArray
argument_list|(
name|w
operator|.
name|getInternalStorage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|addGroup
argument_list|(
literal|"struct_field"
argument_list|)
operator|.
name|append
argument_list|(
literal|"a"
argument_list|,
name|intVal
argument_list|)
operator|.
name|append
argument_list|(
literal|"b"
argument_list|,
name|doubleVal
argument_list|)
expr_stmt|;
name|Group
name|g
init|=
name|group
operator|.
name|addGroup
argument_list|(
literal|"nested_struct_field"
argument_list|)
decl_stmt|;
name|g
operator|.
name|addGroup
argument_list|(
literal|"nsf"
argument_list|)
operator|.
name|append
argument_list|(
literal|"c"
argument_list|,
name|intVal
argument_list|)
operator|.
name|append
argument_list|(
literal|"d"
argument_list|,
name|intVal
argument_list|)
expr_stmt|;
name|g
operator|.
name|append
argument_list|(
literal|"e"
argument_list|,
name|doubleVal
argument_list|)
expr_stmt|;
name|Group
name|some_null_g
init|=
name|group
operator|.
name|addGroup
argument_list|(
literal|"struct_field_some_null"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
name|some_null_g
operator|.
name|append
argument_list|(
literal|"f"
argument_list|,
name|intVal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
literal|3
operator|!=
literal|0
condition|)
block|{
name|some_null_g
operator|.
name|append
argument_list|(
literal|"g"
argument_list|,
name|doubleVal
argument_list|)
expr_stmt|;
block|}
name|Group
name|mapGroup
init|=
name|group
operator|.
name|addGroup
argument_list|(
literal|"map_field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|13
operator|!=
literal|1
condition|)
block|{
name|mapGroup
operator|.
name|addGroup
argument_list|(
literal|"map"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|binary
argument_list|)
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapGroup
operator|.
name|addGroup
argument_list|(
literal|"map"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|binary
argument_list|)
expr_stmt|;
block|}
name|Group
name|arrayGroup
init|=
name|group
operator|.
name|addGroup
argument_list|(
literal|"array_list"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
operator|%
literal|4
condition|;
name|j
operator|++
control|)
block|{
name|arrayGroup
operator|.
name|addGroup
argument_list|(
literal|"bag"
argument_list|)
operator|.
name|append
argument_list|(
literal|"array_element"
argument_list|,
name|intVal
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|initialVectorizedRowBatchCtx
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|VectorizedRowBatchCtx
name|rbCtx
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
name|rbCtx
operator|.
name|init
argument_list|(
name|createStructObjectInspector
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setVectorMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setVectorizedRowBatchCtx
argument_list|(
name|rbCtx
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|setMapWork
argument_list|(
name|conf
argument_list|,
name|mapWork
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|StructObjectInspector
name|createStructObjectInspector
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Create row related objects
name|String
name|columnNames
init|=
name|conf
operator|.
name|get
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNamesList
init|=
name|DataWritableReadSupport
operator|.
name|getColumnNames
argument_list|(
name|columnNames
argument_list|)
decl_stmt|;
name|String
name|columnTypes
init|=
name|conf
operator|.
name|get
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypesList
init|=
name|DataWritableReadSupport
operator|.
name|getColumnTypes
argument_list|(
name|columnTypes
argument_list|)
decl_stmt|;
name|TypeInfo
name|rowTypeInfo
init|=
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|columnNamesList
argument_list|,
name|columnTypesList
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArrayWritableObjectInspector
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|rowTypeInfo
argument_list|)
return|;
block|}
specifier|protected
name|void
name|timestampRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int96_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"timestamp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required "
operator|+
literal|"int96 int96_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|TimestampColumnVector
name|vector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|nanos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|Timestamp
name|expected
init|=
name|isDictionaryEncoding
condition|?
operator|new
name|Timestamp
argument_list|(
name|c
operator|%
name|UNIQUE_NUM
argument_list|)
else|:
operator|new
name|Timestamp
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Not the same time at "
operator|+
name|c
argument_list|,
name|expected
operator|.
name|getTime
argument_list|()
argument_list|,
name|vector
operator|.
name|getTime
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not the same nano at "
operator|+
name|c
argument_list|,
name|expected
operator|.
name|getNanos
argument_list|()
argument_list|,
name|vector
operator|.
name|getNanos
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|stringReadTimestamp
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int96_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required "
operator|+
literal|"int96 int96_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|Timestamp
name|expected
init|=
name|isDictionaryEncoding
condition|?
operator|new
name|Timestamp
argument_list|(
name|c
operator|%
name|UNIQUE_NUM
argument_list|)
else|:
operator|new
name|Timestamp
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
operator|new
name|String
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
operator|+
name|vector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Not the same time at "
operator|+
name|c
argument_list|,
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|floatReadInt
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int32_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required int32"
operator|+
literal|" int32_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doubleReadInt
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int32_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required int32 int32_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|longReadInt
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int32_field"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"bigint"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|intRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|intRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int32_field"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|intRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|intRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required int32 int32_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|floatReadLong
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int64_field"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required int64 int64_field;}"
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|count
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|count
argument_list|,
name|getLongValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|count
argument_list|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doubleReadLong
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int64_field"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required int64 int64_field;}"
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|count
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|count
argument_list|,
name|getLongValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|count
argument_list|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|longRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int64_field"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"bigint"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|longRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|longRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required int64 int64_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
name|getLongValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doubleRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"double_field"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|doubleRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|stringReadDouble
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|readerConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|readerConf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"double_field"
argument_list|)
expr_stmt|;
name|readerConf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|readerConf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|readerConf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required double double_field;}"
argument_list|,
name|readerConf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|String
name|actual
init|=
operator|new
name|String
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
operator|+
name|vector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|)
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doubleRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required double double_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|floatRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"float_field"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|floatRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doubleReadFloat
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"float_field"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|floatRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|floatRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required float float_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
name|getFloatValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|booleanRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"boolean_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required boolean boolean_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
operator|(
name|getBooleanValue
argument_list|(
name|c
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|stringReadBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"boolean_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required boolean boolean_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|String
name|actual
init|=
operator|new
name|String
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
operator|+
name|vector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getBooleanValue
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|binaryRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"binary_field_some_null"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message test { required binary binary_field_some_null;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|boolean
name|noNull
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|String
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Null assert failed at "
operator|+
name|c
argument_list|,
name|isNull
argument_list|(
name|c
argument_list|)
argument_list|,
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|actual
operator|=
operator|new
name|String
argument_list|(
name|ArrayUtils
operator|.
name|subarray
argument_list|(
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
operator|+
name|vector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failed at "
operator|+
name|c
argument_list|,
name|getStr
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|noNull
operator|=
literal|false
expr_stmt|;
block|}
name|c
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"No Null check failed at "
operator|+
name|c
argument_list|,
name|noNull
argument_list|,
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|structRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"struct_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"struct<a:int,b:double>"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|String
name|schema
init|=
literal|"message hive_schema {\n"
operator|+
literal|"group struct_field {\n"
operator|+
literal|"  optional int32 a;\n"
operator|+
literal|"  optional double b;\n"
operator|+
literal|"}\n"
operator|+
literal|"}\n"
decl_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
name|schema
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|StructColumnVector
name|vector
init|=
operator|(
name|StructColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|LongColumnVector
name|cv
init|=
operator|(
name|LongColumnVector
operator|)
name|vector
operator|.
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|DoubleColumnVector
name|dv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|vector
operator|.
name|fields
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cv
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|cv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|dv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|nestedStructRead0
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"nested_struct_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"struct<nsf:struct<c:int,d:int>,e:double>"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|String
name|schema
init|=
literal|"message hive_schema {\n"
operator|+
literal|"group nested_struct_field {\n"
operator|+
literal|"  optional group nsf {\n"
operator|+
literal|"    optional int32 c;\n"
operator|+
literal|"    optional int32 d;\n"
operator|+
literal|"  }"
operator|+
literal|"optional double e;\n"
operator|+
literal|"}\n"
decl_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
name|schema
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|StructColumnVector
name|vector
init|=
operator|(
name|StructColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|StructColumnVector
name|sv
init|=
operator|(
name|StructColumnVector
operator|)
name|vector
operator|.
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|LongColumnVector
name|cv
init|=
operator|(
name|LongColumnVector
operator|)
name|sv
operator|.
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|LongColumnVector
name|dv
init|=
operator|(
name|LongColumnVector
operator|)
name|sv
operator|.
name|fields
index|[
literal|1
index|]
decl_stmt|;
name|DoubleColumnVector
name|ev
init|=
operator|(
name|DoubleColumnVector
operator|)
name|vector
operator|.
name|fields
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cv
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|cv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|dv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|ev
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|nestedStructRead1
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"nested_struct_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"struct<nsf:struct<c:int>>"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|String
name|schema
init|=
literal|"message hive_schema {\n"
operator|+
literal|"group nested_struct_field {\n"
operator|+
literal|"  optional group nsf {\n"
operator|+
literal|"    optional int32 c;\n"
operator|+
literal|"  }"
operator|+
literal|"}\n"
decl_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
name|schema
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|StructColumnVector
name|vector
init|=
operator|(
name|StructColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|StructColumnVector
name|sv
init|=
operator|(
name|StructColumnVector
operator|)
name|vector
operator|.
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|LongColumnVector
name|cv
init|=
operator|(
name|LongColumnVector
operator|)
name|sv
operator|.
name|fields
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cv
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|cv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|structReadSomeNull
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"struct_field_some_null"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"struct<f:int,g:double>"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|String
name|schema
init|=
literal|"message hive_schema {\n"
operator|+
literal|"group struct_field_some_null {\n"
operator|+
literal|"  optional int32 f;\n"
operator|+
literal|"  optional double g;\n"
operator|+
literal|"}\n"
decl_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
name|schema
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|StructColumnVector
name|sv
init|=
operator|(
name|StructColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|LongColumnVector
name|fv
init|=
operator|(
name|LongColumnVector
operator|)
name|sv
operator|.
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|DoubleColumnVector
name|gv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|sv
operator|.
name|fields
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fv
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
name|c
operator|%
literal|2
operator|==
literal|0
argument_list|,
name|fv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|%
literal|3
operator|==
literal|0
argument_list|,
name|gv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|%
comment|/* 2*3 = */
literal|6
operator|==
literal|0
argument_list|,
name|sv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|fv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|fv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|gv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|fv
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|stringReadDecimal
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message hive_schema { required value (DECIMAL(5,2));}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|String
name|actual
init|=
operator|new
name|String
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
operator|+
name|vector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check failed at pos "
operator|+
name|c
argument_list|,
name|getDecimal
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|decimalRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|readerConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|readerConf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|readerConf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"decimal(5,2)"
argument_list|)
expr_stmt|;
name|readerConf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|readerConf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message hive_schema { required value (DECIMAL(5,2));}"
argument_list|,
name|readerConf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|DecimalColumnVector
name|vector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Check failed at pos "
operator|+
name|c
argument_list|,
name|getDecimal
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|c
argument_list|)
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

