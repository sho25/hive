begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|FSRecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|InputFormatChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
specifier|public
class|class
name|TestInputOutputFormat
block|{
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|MyRow
implements|implements
name|Writable
block|{
name|int
name|x
decl_stmt|;
name|int
name|y
decl_stmt|;
name|MyRow
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no write"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no read"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Rule
specifier|public
name|TestName
name|testCaseName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
name|JobConf
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestInputOutputFormat."
operator|+
name|testCaseName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|".orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverlap
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|,
literal|2000
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|,
literal|1500
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|250
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|1000
argument_list|,
literal|250
argument_list|,
literal|500
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|,
literal|1900
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|2000
argument_list|,
literal|1000
argument_list|,
literal|2500
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"a"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"b"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"c"
argument_list|)
block|}
argument_list|,
name|OrcInputFormat
operator|.
name|getInputPaths
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"/a/b/c/d/e"
argument_list|)
block|}
argument_list|,
name|OrcInputFormat
operator|.
name|getInputPaths
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/a/b/c\\,d,/e/f\\,g/h"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"/a/b/c,d"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/e/f,g/h"
argument_list|)
block|}
argument_list|,
name|OrcInputFormat
operator|.
name|getInputPaths
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|TestContext
extends|extends
name|OrcInputFormat
operator|.
name|Context
block|{
name|List
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
name|TestContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|schedule
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFileGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|TestContext
name|context
init|=
operator|new
name|TestContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"/a/b/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"/a/b/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"/a/b/_part-02"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"/a/b/.part-03"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"/a/b/part-04"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|FileGenerator
name|gen
init|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
decl_stmt|;
name|gen
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Throwable
name|th
range|:
name|context
operator|.
name|getErrors
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|th
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Errors during file generation"
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|context
operator|.
name|getSchedulers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|context
operator|.
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/b/part-00"
argument_list|)
argument_list|,
operator|(
operator|(
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|)
name|context
operator|.
name|queue
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/b/part-01"
argument_list|)
argument_list|,
operator|(
operator|(
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|)
name|context
operator|.
name|queue
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/b/part-04"
argument_list|)
argument_list|,
operator|(
operator|(
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|)
name|context
operator|.
name|queue
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|static
class|class
name|MockBlock
block|{
name|int
name|offset
decl_stmt|;
name|int
name|length
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
decl_stmt|;
name|MockBlock
parameter_list|(
name|String
modifier|...
name|hosts
parameter_list|)
block|{
name|this
operator|.
name|hosts
operator|=
name|hosts
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MockFile
block|{
specifier|final
name|Path
name|path
decl_stmt|;
specifier|final
name|int
name|blockSize
decl_stmt|;
specifier|final
name|int
name|length
decl_stmt|;
specifier|final
name|MockBlock
index|[]
name|blocks
decl_stmt|;
specifier|final
name|byte
index|[]
name|content
decl_stmt|;
name|MockFile
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|MockBlock
modifier|...
name|blocks
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|content
operator|.
name|length
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MockBlock
name|block
range|:
name|blocks
control|)
block|{
name|block
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|block
operator|.
name|length
operator|=
name|Math
operator|.
name|min
argument_list|(
name|length
operator|-
name|offset
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|block
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|MockInputStream
extends|extends
name|FSInputStream
block|{
specifier|final
name|MockFile
name|file
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|public
name|MockInputStream
parameter_list|(
name|MockFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|offset
operator|=
operator|(
name|int
operator|)
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|<
name|file
operator|.
name|length
condition|)
block|{
return|return
name|file
operator|.
name|content
index|[
name|offset
operator|++
index|]
operator|&
literal|0xff
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FileSystem
block|{
specifier|final
name|MockFile
index|[]
name|files
decl_stmt|;
name|Path
name|workingDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|MockFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MockFile
modifier|...
name|files
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
literal|"mock:///"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"huh?"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|path
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|MockInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|fsPermission
parameter_list|,
name|boolean
name|b
parameter_list|,
name|int
name|i
parameter_list|,
name|short
name|i2
parameter_list|,
name|long
name|l
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|i
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|path2
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|path
operator|.
name|getParent
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getFileStatus
argument_list|(
name|file
operator|.
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|workingDir
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|fsPermission
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|path
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|file
operator|.
name|length
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|file
operator|.
name|blockSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|644
argument_list|)
argument_list|,
literal|"owen"
argument_list|,
literal|"group"
argument_list|,
name|file
operator|.
name|path
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|stat
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
block|{
name|List
argument_list|<
name|BlockLocation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockLocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|path
operator|.
name|equals
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|MockBlock
name|block
range|:
name|file
operator|.
name|blocks
control|)
block|{
if|if
condition|(
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
name|block
operator|.
name|offset
argument_list|,
name|block
operator|.
name|length
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|BlockLocation
argument_list|(
name|block
operator|.
name|hosts
argument_list|,
name|block
operator|.
name|hosts
argument_list|,
name|block
operator|.
name|offset
argument_list|,
name|block
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|BlockLocation
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|static
name|void
name|fill
parameter_list|(
name|DataOutputBuffer
name|out
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create the binary contents of an ORC file that just has enough information    * to test the getInputSplits.    * @param stripeLengths the length of each stripe    * @return the bytes of the file    * @throws IOException    */
specifier|static
name|byte
index|[]
name|createMockOrcFile
parameter_list|(
name|long
modifier|...
name|stripeLengths
parameter_list|)
throws|throws
name|IOException
block|{
name|OrcProto
operator|.
name|Footer
operator|.
name|Builder
name|footer
init|=
name|OrcProto
operator|.
name|Footer
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
specifier|final
name|long
name|headerLen
init|=
literal|3
decl_stmt|;
name|long
name|offset
init|=
name|headerLen
decl_stmt|;
name|DataOutputBuffer
name|buffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|stripeLength
range|:
name|stripeLengths
control|)
block|{
name|footer
operator|.
name|addStripes
argument_list|(
name|OrcProto
operator|.
name|StripeInformation
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
operator|.
name|setIndexLength
argument_list|(
literal|0
argument_list|)
operator|.
name|setDataLength
argument_list|(
name|stripeLength
operator|-
literal|10
argument_list|)
operator|.
name|setFooterLength
argument_list|(
literal|10
argument_list|)
operator|.
name|setNumberOfRows
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|stripeLength
expr_stmt|;
block|}
name|fill
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|footer
operator|.
name|addTypes
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
operator|.
name|addFieldNames
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|addSubtypes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|addTypes
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|setNumberOfRows
argument_list|(
literal|1000
operator|*
name|stripeLengths
operator|.
name|length
argument_list|)
operator|.
name|setHeaderLength
argument_list|(
name|headerLen
argument_list|)
operator|.
name|setContentLength
argument_list|(
name|offset
operator|-
name|headerLen
argument_list|)
expr_stmt|;
name|footer
operator|.
name|build
argument_list|()
operator|.
name|writeTo
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|int
name|footerEnd
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|PostScript
name|ps
init|=
name|OrcProto
operator|.
name|PostScript
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCompression
argument_list|(
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|setFooterLength
argument_list|(
name|footerEnd
operator|-
name|offset
argument_list|)
operator|.
name|setMagic
argument_list|(
literal|"ORC"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ps
operator|.
name|writeTo
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|getLength
argument_list|()
operator|-
name|footerEnd
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddSplit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a file with 5 blocks spread around the cluster
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"/a/file"
argument_list|,
literal|500
argument_list|,
name|createMockOrcFile
argument_list|(
literal|197
argument_list|,
literal|300
argument_list|,
literal|600
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1-1"
argument_list|,
literal|"host1-2"
argument_list|,
literal|"host1-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host2-1"
argument_list|,
literal|"host0"
argument_list|,
literal|"host2-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host0"
argument_list|,
literal|"host3-2"
argument_list|,
literal|"host3-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host4-1"
argument_list|,
literal|"host4-2"
argument_list|,
literal|"host4-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host5-1"
argument_list|,
literal|"host5-2"
argument_list|,
literal|"host5-3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|SplitGenerator
name|splitter
init|=
operator|new
name|OrcInputFormat
operator|.
name|SplitGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/file"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|splitter
operator|.
name|createSplit
argument_list|(
literal|0
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSplit
name|result
init|=
name|context
operator|.
name|getResult
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/file"
argument_list|,
name|result
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|locs
init|=
name|result
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host1-1"
argument_list|,
name|locs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host1-2"
argument_list|,
name|locs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host1-3"
argument_list|,
name|locs
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|splitter
operator|.
name|createSplit
argument_list|(
literal|500
argument_list|,
literal|600
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|context
operator|.
name|getResult
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|locs
operator|=
name|result
operator|.
name|getLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host2-1"
argument_list|,
name|locs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host0"
argument_list|,
name|locs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host2-3"
argument_list|,
name|locs
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|splitter
operator|.
name|createSplit
argument_list|(
literal|0
argument_list|,
literal|2500
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|context
operator|.
name|getResult
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|locs
operator|=
name|result
operator|.
name|getLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host0"
argument_list|,
name|locs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitGenerator
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a file with 5 blocks spread around the cluster
name|long
index|[]
name|stripeSizes
init|=
operator|new
name|long
index|[]
block|{
literal|197
block|,
literal|300
block|,
literal|600
block|,
literal|200
block|,
literal|200
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
decl_stmt|;
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"/a/file"
argument_list|,
literal|500
argument_list|,
name|createMockOrcFile
argument_list|(
name|stripeSizes
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1-1"
argument_list|,
literal|"host1-2"
argument_list|,
literal|"host1-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host2-1"
argument_list|,
literal|"host0"
argument_list|,
literal|"host2-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host0"
argument_list|,
literal|"host3-2"
argument_list|,
literal|"host3-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host4-1"
argument_list|,
literal|"host4-2"
argument_list|,
literal|"host4-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host5-1"
argument_list|,
literal|"host5-2"
argument_list|,
literal|"host5-3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OrcInputFormat
operator|.
name|MAX_SPLIT_SIZE
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OrcInputFormat
operator|.
name|MIN_SPLIT_SIZE
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|SplitGenerator
name|splitter
init|=
operator|new
name|OrcInputFormat
operator|.
name|SplitGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/file"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|splitter
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Throwable
name|th
range|:
name|context
operator|.
name|getErrors
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|th
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Errors during splitting"
argument_list|)
throw|;
block|}
name|FileSplit
name|result
init|=
name|context
operator|.
name|getResult
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|497
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|context
operator|.
name|getResult
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|600
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|context
operator|.
name|getResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1100
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|context
operator|.
name|getResult
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|context
operator|.
name|getResult
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1800
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// test min = 0, max = 0 generates each stripe
name|conf
operator|.
name|setInt
argument_list|(
name|OrcInputFormat
operator|.
name|MIN_SPLIT_SIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OrcInputFormat
operator|.
name|MAX_SPLIT_SIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|splitter
operator|=
operator|new
name|OrcInputFormat
operator|.
name|SplitGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/file"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitter
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Throwable
name|th
range|:
name|context
operator|.
name|getErrors
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|th
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Errors during splitting"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSizes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"checking stripe "
operator|+
name|i
operator|+
literal|" size"
argument_list|,
name|stripeSizes
index|[
name|i
index|]
argument_list|,
name|context
operator|.
name|getResult
argument_list|(
name|i
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInOutFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|SerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|FSRecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getHiveRecordWriter
argument_list|(
name|conf
argument_list|,
name|testFilePath
argument_list|,
name|MyRow
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|properties
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|MyRow
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|MyRow
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|MyRow
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serde
operator|=
operator|new
name|OrcSerde
argument_list|()
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"x,y"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:int"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OrcSerde
operator|.
name|OrcSerdeRow
operator|.
name|class
argument_list|,
name|serde
operator|.
name|getSerializedClass
argument_list|()
argument_list|)
expr_stmt|;
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<x:int,y:int>"
argument_list|,
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// the the validate input method
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|fileList
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
operator|(
operator|(
name|InputFormatChecker
operator|)
name|in
operator|)
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
operator|new
name|HiveConf
argument_list|()
argument_list|,
name|fileList
argument_list|)
argument_list|)
expr_stmt|;
name|fileList
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
operator|(
name|InputFormatChecker
operator|)
name|in
operator|)
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
operator|new
name|HiveConf
argument_list|()
argument_list|,
name|fileList
argument_list|)
argument_list|)
expr_stmt|;
name|fileList
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
operator|(
operator|(
name|InputFormatChecker
operator|)
name|in
operator|)
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
operator|new
name|HiveConf
argument_list|()
argument_list|,
name|fileList
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the whole file
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
name|reader
init|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|rowNum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|IntObjectInspector
name|intInspector
init|=
operator|(
name|IntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|reader
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|++
name|rowNum
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|serde
operator|.
name|deserialize
argument_list|(
name|value
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|serde
operator|.
name|deserialize
argument_list|(
name|value
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|reader
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read just the first column
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|key
operator|=
name|reader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|value
operator|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|createValue
argument_list|()
expr_stmt|;
name|rowNum
operator|=
literal|0
expr_stmt|;
name|fields
operator|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|++
name|rowNum
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test the mapping of empty string to all columns
name|ColumnProjectionUtils
operator|.
name|setReadAllColumns
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|reader
operator|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|key
operator|=
name|reader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|value
operator|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|createValue
argument_list|()
expr_stmt|;
name|rowNum
operator|=
literal|0
expr_stmt|;
name|fields
operator|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|++
name|rowNum
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|serde
operator|.
name|deserialize
argument_list|(
name|value
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|NestedRow
implements|implements
name|Writable
block|{
name|int
name|z
decl_stmt|;
name|MyRow
name|r
decl_stmt|;
name|NestedRow
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|z
parameter_list|)
block|{
name|this
operator|.
name|z
operator|=
name|z
expr_stmt|;
name|this
operator|.
name|r
operator|=
operator|new
name|MyRow
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unsupported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unsupported"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMROutput
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|NestedRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|SerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getRecordWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|NestedRow
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|NestedRow
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|NestedRow
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|serde
operator|=
operator|new
name|OrcSerde
argument_list|()
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"z,r"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:struct<x:int,y:int>"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
name|reader
init|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|rowNum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inner
init|=
operator|(
name|StructObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|inFields
init|=
name|inner
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|IntObjectInspector
name|intInspector
init|=
operator|(
name|IntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|sub
init|=
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|rowNum
operator|+
literal|1
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|sub
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|rowNum
operator|+
literal|2
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|sub
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowNum
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|FSRecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getHiveRecordWriter
argument_list|(
name|conf
argument_list|,
name|testFilePath
argument_list|,
name|MyRow
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|properties
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"x,y"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:int"
argument_list|)
expr_stmt|;
name|SerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|1
operator|==
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|serde
operator|.
name|getSerDeStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|StringRow
implements|implements
name|Writable
block|{
name|String
name|str
decl_stmt|;
name|String
name|str2
decl_stmt|;
name|StringRow
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|str
operator|=
name|s
expr_stmt|;
name|str2
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no write"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no read"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|StringRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|SerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|FSRecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getHiveRecordWriter
argument_list|(
name|conf
argument_list|,
name|testFilePath
argument_list|,
name|StringRow
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|properties
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"owen"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"beth"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"laurel"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"hazen"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"colin"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"miles"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serde
operator|=
operator|new
name|OrcSerde
argument_list|()
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"str,str2"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<str:string,str2:string>"
argument_list|,
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// read the whole file
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
name|reader
init|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StringObjectInspector
name|strInspector
init|=
operator|(
name|StringObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"owen"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"beth"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"laurel"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hazen"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"colin"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"miles"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

