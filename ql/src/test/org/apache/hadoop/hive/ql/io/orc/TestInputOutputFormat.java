begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|TypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|ColumnarSplitSizeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|CombineHiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|InputFormatChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
operator|.
name|SplitStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|ConvertAstToSearchArg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|PredicateLeaf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgumentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorPartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|CombineHiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Output
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
class|class
name|TestInputOutputFormat
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestInputOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|toKryo
parameter_list|(
name|SearchArgument
name|sarg
parameter_list|)
block|{
name|Output
name|out
init|=
operator|new
name|Output
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
operator|new
name|Kryo
argument_list|()
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|sarg
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|out
operator|.
name|toBytes
argument_list|()
argument_list|)
return|;
block|}
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|MILLIS_IN_DAY
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy/MM/dd"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|TIME_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy/MM/dd HH:mm:ss.SSS"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeZone
name|LOCAL_TIMEZONE
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
static|static
block|{
name|TimeZone
name|gmt
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT+0"
argument_list|)
decl_stmt|;
name|DATE_FORMAT
operator|.
name|setTimeZone
argument_list|(
name|gmt
argument_list|)
expr_stmt|;
name|TIME_FORMAT
operator|.
name|setTimeZone
argument_list|(
name|gmt
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|BigRow
implements|implements
name|Writable
block|{
name|boolean
name|booleanValue
decl_stmt|;
name|byte
name|byteValue
decl_stmt|;
name|short
name|shortValue
decl_stmt|;
name|int
name|intValue
decl_stmt|;
name|long
name|longValue
decl_stmt|;
name|float
name|floatValue
decl_stmt|;
name|double
name|doubleValue
decl_stmt|;
name|String
name|stringValue
decl_stmt|;
name|HiveDecimal
name|decimalValue
decl_stmt|;
name|Date
name|dateValue
decl_stmt|;
name|Timestamp
name|timestampValue
decl_stmt|;
name|BigRow
parameter_list|(
name|long
name|x
parameter_list|)
block|{
name|booleanValue
operator|=
name|x
operator|%
literal|2
operator|==
literal|0
expr_stmt|;
name|byteValue
operator|=
operator|(
name|byte
operator|)
name|x
expr_stmt|;
name|shortValue
operator|=
operator|(
name|short
operator|)
name|x
expr_stmt|;
name|intValue
operator|=
operator|(
name|int
operator|)
name|x
expr_stmt|;
name|longValue
operator|=
name|x
expr_stmt|;
name|floatValue
operator|=
name|x
expr_stmt|;
name|doubleValue
operator|=
name|x
expr_stmt|;
name|stringValue
operator|=
name|Long
operator|.
name|toHexString
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|decimalValue
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|long
name|millisUtc
init|=
name|x
operator|*
name|MILLIS_IN_DAY
decl_stmt|;
name|millisUtc
operator|-=
name|LOCAL_TIMEZONE
operator|.
name|getOffset
argument_list|(
name|millisUtc
argument_list|)
expr_stmt|;
name|dateValue
operator|=
operator|new
name|Date
argument_list|(
name|millisUtc
argument_list|)
expr_stmt|;
name|timestampValue
operator|=
operator|new
name|Timestamp
argument_list|(
name|millisUtc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no write"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no read"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"bigrow{booleanValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|booleanValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", byteValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|byteValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", shortValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|shortValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", intValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|intValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", longValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|longValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", floatValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|floatValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", doubleValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|doubleValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", stringValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", decimalValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|decimalValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", dateValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|DATE_FORMAT
operator|.
name|format
argument_list|(
name|dateValue
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", timestampValue: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|TIME_FORMAT
operator|.
name|format
argument_list|(
name|timestampValue
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|String
name|getColumnNamesProperty
parameter_list|()
block|{
return|return
literal|"booleanValue,byteValue,shortValue,intValue,longValue,floatValue,doubleValue,stringValue,decimalValue,dateValue,timestampValue"
return|;
block|}
specifier|static
name|String
name|getColumnTypesProperty
parameter_list|()
block|{
return|return
literal|"boolean:tinyint:smallint:int:bigint:float:double:string:decimal:date:timestamp"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BigRowField
implements|implements
name|StructField
block|{
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
name|inspector
decl_stmt|;
name|BigRowField
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getFieldObjectInspector
parameter_list|()
block|{
return|return
name|inspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldComment
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFieldID
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"field "
operator|+
name|id
operator|+
literal|" "
operator|+
name|fieldName
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BigRowInspector
extends|extends
name|StructObjectInspector
block|{
specifier|static
specifier|final
name|List
argument_list|<
name|BigRowField
argument_list|>
name|FIELDS
init|=
operator|new
name|ArrayList
argument_list|<
name|BigRowField
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|0
argument_list|,
literal|"booleanValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaBooleanObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|1
argument_list|,
literal|"byteValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaByteObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|2
argument_list|,
literal|"shortValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaShortObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|3
argument_list|,
literal|"intValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|4
argument_list|,
literal|"longValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaLongObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|5
argument_list|,
literal|"floatValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaFloatObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|6
argument_list|,
literal|"doubleValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaDoubleObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|7
argument_list|,
literal|"stringValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|8
argument_list|,
literal|"decimalValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaHiveDecimalObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|9
argument_list|,
literal|"dateValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaDateObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|FIELDS
operator|.
name|add
argument_list|(
operator|new
name|BigRowField
argument_list|(
literal|10
argument_list|,
literal|"timestampValue"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaTimestampObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|getAllStructFieldRefs
parameter_list|()
block|{
return|return
name|FIELDS
return|;
block|}
annotation|@
name|Override
specifier|public
name|StructField
name|getStructFieldRef
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|StructField
name|field
range|:
name|FIELDS
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|field
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find field "
operator|+
name|fieldName
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getStructFieldData
parameter_list|(
name|Object
name|data
parameter_list|,
name|StructField
name|fieldRef
parameter_list|)
block|{
name|BigRow
name|obj
init|=
operator|(
name|BigRow
operator|)
name|data
decl_stmt|;
switch|switch
condition|(
operator|(
operator|(
name|BigRowField
operator|)
name|fieldRef
operator|)
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
return|return
name|obj
operator|.
name|booleanValue
return|;
case|case
literal|1
case|:
return|return
name|obj
operator|.
name|byteValue
return|;
case|case
literal|2
case|:
return|return
name|obj
operator|.
name|shortValue
return|;
case|case
literal|3
case|:
return|return
name|obj
operator|.
name|intValue
return|;
case|case
literal|4
case|:
return|return
name|obj
operator|.
name|longValue
return|;
case|case
literal|5
case|:
return|return
name|obj
operator|.
name|floatValue
return|;
case|case
literal|6
case|:
return|return
name|obj
operator|.
name|doubleValue
return|;
case|case
literal|7
case|:
return|return
name|obj
operator|.
name|stringValue
return|;
case|case
literal|8
case|:
return|return
name|obj
operator|.
name|decimalValue
return|;
case|case
literal|9
case|:
return|return
name|obj
operator|.
name|dateValue
return|;
case|case
literal|10
case|:
return|return
name|obj
operator|.
name|timestampValue
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No such field "
operator|+
name|fieldRef
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getStructFieldsDataAsList
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
name|BigRow
name|obj
init|=
operator|(
name|BigRow
operator|)
name|data
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|booleanValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|byteValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|shortValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|intValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|longValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|floatValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|doubleValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|stringValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|decimalValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|dateValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
operator|.
name|timestampValue
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"struct<booleanValue:boolean,byteValue:tinyint,"
operator|+
literal|"shortValue:smallint,intValue:int,longValue:bigint,"
operator|+
literal|"floatValue:float,doubleValue:double,stringValue:string,"
operator|+
literal|"decimalValue:decimal>"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|STRUCT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MyRow
implements|implements
name|Writable
block|{
name|int
name|x
decl_stmt|;
name|int
name|y
decl_stmt|;
name|MyRow
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no write"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no read"
argument_list|)
throw|;
block|}
specifier|static
name|String
name|getColumnNamesProperty
parameter_list|()
block|{
return|return
literal|"x,y"
return|;
block|}
specifier|static
name|String
name|getColumnTypesProperty
parameter_list|()
block|{
return|return
literal|"int:int"
return|;
block|}
block|}
annotation|@
name|Rule
specifier|public
name|TestName
name|testCaseName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
name|JobConf
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestInputOutputFormat."
operator|+
name|testCaseName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|".orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverlap
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|,
literal|2000
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|,
literal|1500
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|250
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|1000
argument_list|,
literal|250
argument_list|,
literal|500
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|,
literal|1900
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
literal|2000
argument_list|,
literal|1000
argument_list|,
literal|2500
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"a"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"b"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"c"
argument_list|)
block|}
argument_list|,
name|OrcInputFormat
operator|.
name|getInputPaths
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"/a/b/c/d/e"
argument_list|)
block|}
argument_list|,
name|OrcInputFormat
operator|.
name|getInputPaths
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/a/b/c\\,d,/e/f\\,g/h"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"/a/b/c,d"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/e/f,g/h"
argument_list|)
block|}
argument_list|,
name|OrcInputFormat
operator|.
name|getInputPaths
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FileSystem
name|generateMockFiles
parameter_list|(
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|int
name|size
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|MockFile
index|[]
name|files
init|=
operator|new
name|MockFile
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|=
operator|new
name|MockFile
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"mock:/a/b/part-%d"
argument_list|,
name|i
argument_list|)
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
name|files
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitStrategySelection
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.input.fileinputformat.split.maxsize"
argument_list|,
literal|"500"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_CACHE_STRIPE_DETAILS_SIZE
operator|.
name|varname
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|counts
init|=
block|{
literal|1
block|,
literal|10
block|,
literal|100
block|,
literal|256
block|}
decl_stmt|;
specifier|final
name|int
index|[]
name|sizes
init|=
block|{
literal|100
block|,
literal|1000
block|}
decl_stmt|;
specifier|final
name|int
index|[]
name|numSplits
init|=
block|{
literal|1
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|99
block|,
literal|111
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|strategyResults
init|=
operator|new
name|String
index|[]
block|{
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 100 size for 1 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 100 size for 9 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 100 size for 10 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 100 size for 11 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 100 size for 99 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 100 size for 111 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 1000 size for 1 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 1000 size for 9 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 1000 size for 10 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 1000 size for 11 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 1000 size for 99 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 1 files x 1000 size for 111 splits */
literal|"BISplitStrategy"
block|,
comment|/* 10 files x 100 size for 1 splits */
literal|"BISplitStrategy"
block|,
comment|/* 10 files x 100 size for 9 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 100 size for 10 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 100 size for 11 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 100 size for 99 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 100 size for 111 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 1000 size for 1 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 1000 size for 9 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 1000 size for 10 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 1000 size for 11 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 1000 size for 99 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 10 files x 1000 size for 111 splits */
literal|"BISplitStrategy"
block|,
comment|/* 100 files x 100 size for 1 splits */
literal|"BISplitStrategy"
block|,
comment|/* 100 files x 100 size for 9 splits */
literal|"BISplitStrategy"
block|,
comment|/* 100 files x 100 size for 10 splits */
literal|"BISplitStrategy"
block|,
comment|/* 100 files x 100 size for 11 splits */
literal|"BISplitStrategy"
block|,
comment|/* 100 files x 100 size for 99 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 100 files x 100 size for 111 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 100 files x 1000 size for 1 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 100 files x 1000 size for 9 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 100 files x 1000 size for 10 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 100 files x 1000 size for 11 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 100 files x 1000 size for 99 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 100 files x 1000 size for 111 splits */
literal|"BISplitStrategy"
block|,
comment|/* 256 files x 100 size for 1 splits */
literal|"BISplitStrategy"
block|,
comment|/* 256 files x 100 size for 9 splits */
literal|"BISplitStrategy"
block|,
comment|/* 256 files x 100 size for 10 splits */
literal|"BISplitStrategy"
block|,
comment|/* 256 files x 100 size for 11 splits */
literal|"BISplitStrategy"
block|,
comment|/* 256 files x 100 size for 99 splits */
literal|"BISplitStrategy"
block|,
comment|/* 256 files x 100 size for 111 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 256 files x 1000 size for 1 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 256 files x 1000 size for 9 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 256 files x 1000 size for 10 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 256 files x 1000 size for 11 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 256 files x 1000 size for 99 splits */
literal|"ETLSplitStrategy"
block|,
comment|/* 256 files x 1000 size for 111 splits */
block|}
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|c
range|:
name|counts
control|)
block|{
for|for
control|(
name|int
name|s
range|:
name|sizes
control|)
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|generateMockFiles
argument_list|(
name|c
argument_list|,
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
range|:
name|numSplits
control|)
block|{
specifier|final
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|FileGenerator
name|gen
init|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a/b"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SplitStrategy
name|splitStrategy
init|=
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Split strategy for %d files x %d size for %d splits"
argument_list|,
name|c
argument_list|,
name|s
argument_list|,
name|n
argument_list|)
argument_list|,
name|splitStrategy
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|strategyResults
index|[
name|k
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|k
operator|=
literal|0
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.cache.stripe.details.size"
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
range|:
name|counts
control|)
block|{
for|for
control|(
name|int
name|s
range|:
name|sizes
control|)
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|generateMockFiles
argument_list|(
name|c
argument_list|,
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
range|:
name|numSplits
control|)
block|{
specifier|final
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|FileGenerator
name|gen
init|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a/b"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SplitStrategy
name|splitStrategy
init|=
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Split strategy for %d files x %d size for %d splits"
argument_list|,
name|c
argument_list|,
name|s
argument_list|,
name|n
argument_list|)
argument_list|,
name|splitStrategy
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|strategyResults
index|[
name|k
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFileGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/_part-02"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/.part-03"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-04"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|FileGenerator
name|gen
init|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a/b"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|BISplitStrategy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.input.fileinputformat.split.maxsize"
argument_list|,
literal|"500"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/_part-02"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/.part-03"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-04"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a/b"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitStrategies
operator|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testACIDSplitStrategy
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"bucket_count"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delta_000_001/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delta_000_001/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delta_001_002/part-02"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delta_001_002/part-03"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|FileGenerator
name|gen
init|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|splits
init|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
decl_stmt|;
name|ColumnarSplitSizeEstimator
name|splitSizeEstimator
init|=
operator|new
name|ColumnarSplitSizeEstimator
argument_list|()
decl_stmt|;
for|for
control|(
name|OrcSplit
name|split
range|:
name|splits
control|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|splitSizeEstimator
operator|.
name|getEstimatedSize
argument_list|(
name|split
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testACIDSplitStrategyForSplitUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"bucket_count"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_TRANSACTIONAL_PROPERTIES
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Case 1: Test with just originals => Single split strategy with two splits.
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/000000_0"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/000000_1"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|FileGenerator
name|gen
init|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|splits
init|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/b/000000_0"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/b/000000_1"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 2: Test with originals and base => Single split strategy with two splits on compacted
comment|// base since the presence of a base will make the originals obsolete.
name|fs
operator|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/000000_0"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/000000_1"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/base_0000001/bucket_00000"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/base_0000001/bucket_00001"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitStrategies
operator|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/base_0000001/bucket_00000"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/base_0000001/bucket_00001"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 3: Test with originals and deltas => Two split strategies with two splits for each.
name|fs
operator|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/000000_0"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/000000_1"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delta_0000001_0000001_0000/bucket_00000"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delta_0000001_0000001_0000/bucket_00001"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delete_delta_0000001_0000001_0000/bucket_00000"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delete_delta_0000001_0000001_0000/bucket_00001"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitStrategies
operator|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/b/000000_0"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/b/000000_1"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/delta_0000001_0000001_0000/bucket_00000"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/delta_0000001_0000001_0000/bucket_00001"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 4: Test with originals and deltas but now with only one bucket covered, i.e. we will
comment|// have originals& insert_deltas for only one bucket, but the delete_deltas will be for two
comment|// buckets => Two strategies with one split for each.
comment|// When split-update is enabled, we do not need to account for buckets that aren't covered.
comment|// The reason why we are able to do so is because the valid user data has already been considered
comment|// as base for the covered buckets. Hence, the uncovered buckets do not have any relevant
comment|// data and we can just ignore them.
name|fs
operator|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/000000_0"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delta_0000001_0000001_0000/bucket_00000"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delete_delta_0000001_0000001_0000/bucket_00000"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delete_delta_0000001_0000001_0000/bucket_00001"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitStrategies
operator|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/b/000000_0"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/delta_0000001_0000001_0000/bucket_00000"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 5: Test with originals, compacted_base, insert_deltas, delete_deltas (exhaustive test)
comment|// This should just generate one strategy with splits for base and insert_deltas.
name|fs
operator|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/000000_0"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/000000_1"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/base_0000001/bucket_00000"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/base_0000001/bucket_00001"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delta_0000002_0000002_0000/bucket_00000"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delta_0000002_0000002_0000/bucket_00001"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delete_delta_0000002_0000002_0000/bucket_00000"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/delete_delta_0000002_0000002_0000/bucket_00001"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitStrategies
operator|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/base_0000001/bucket_00000"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/base_0000001/bucket_00001"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/delta_0000002_0000002_0000/bucket_00000"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/delta_0000002_0000002_0000/bucket_00001"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBIStrategySplitBlockBoundary
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
operator|.
name|varname
argument_list|,
literal|"BI"
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-02"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-03"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-04"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|FileGenerator
name|gen
init|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a/b"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|BISplitStrategy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|splits
init|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|BISplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
decl_stmt|;
name|int
name|numSplits
init|=
name|splits
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|numSplits
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-02"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-03"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-04"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a/b"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitStrategies
operator|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|BISplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|BISplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|numSplits
operator|=
name|splits
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|numSplits
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1100
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1100
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-02"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1100
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-03"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1100
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-04"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1100
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a/b"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitStrategies
operator|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|BISplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|BISplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|numSplits
operator|=
name|splits
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|numSplits
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-02"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-03"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-04"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2000
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a/b"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitStrategies
operator|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|BISplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|BISplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|numSplits
operator|=
name|splits
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|numSplits
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2200
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2200
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-02"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2200
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-03"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2200
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/b/part-04"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|2200
index|]
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:/a/b"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|splitStrategies
operator|=
name|createSplitStrategies
argument_list|(
name|context
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|BISplitStrategy
argument_list|)
expr_stmt|;
name|splits
operator|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|BISplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
expr_stmt|;
name|numSplits
operator|=
name|splits
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|numSplits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEtlCombinedStrategy
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
operator|.
name|varname
argument_list|,
literal|"ETL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_DIRECTORY_BATCH_MS
operator|.
name|varname
argument_list|,
literal|"1000000"
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/1/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/1/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/2/part-00"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/2/part-01"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/3/base_0/1"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/4/base_0/1"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/5/base_0/1"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/5/delta_0_25/1"
argument_list|,
literal|1000
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|CombinedCtx
name|combineCtx
init|=
operator|new
name|OrcInputFormat
operator|.
name|CombinedCtx
argument_list|()
decl_stmt|;
comment|// The first directory becomes the base for combining.
name|List
argument_list|<
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|ss
init|=
name|createOrCombineStrategies
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
literal|"mock:/a/1"
argument_list|,
name|combineCtx
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ss
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|combineCtx
operator|.
name|combined
operator|instanceof
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
name|etlSs
init|=
name|combineCtx
operator|.
name|combined
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|etlSs
operator|.
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|etlSs
operator|.
name|isOriginal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|etlSs
operator|.
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The second one should be combined into the first.
name|ss
operator|=
name|createOrCombineStrategies
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
literal|"mock:/a/2"
argument_list|,
name|combineCtx
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ss
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|combineCtx
operator|.
name|combined
operator|instanceof
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|etlSs
operator|.
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|etlSs
operator|.
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The third one has the base file, so it shouldn't be combined but could be a base.
name|ss
operator|=
name|createOrCombineStrategies
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
literal|"mock:/a/3"
argument_list|,
name|combineCtx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|etlSs
argument_list|,
name|ss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|etlSs
operator|.
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|etlSs
operator|.
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|combineCtx
operator|.
name|combined
operator|instanceof
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
argument_list|)
expr_stmt|;
name|etlSs
operator|=
name|combineCtx
operator|.
name|combined
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|etlSs
operator|.
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|etlSs
operator|.
name|isOriginal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|etlSs
operator|.
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try the first again, it would not be combined and we'd retain the old base (less files).
name|ss
operator|=
name|createOrCombineStrategies
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
literal|"mock:/a/1"
argument_list|,
name|combineCtx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|etlSs
argument_list|,
name|ss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
name|rejectedEtlSs
init|=
operator|(
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
operator|)
name|ss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rejectedEtlSs
operator|.
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rejectedEtlSs
operator|.
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rejectedEtlSs
operator|.
name|isOriginal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|etlSs
operator|.
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|etlSs
operator|.
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The fourth could be combined again.
name|ss
operator|=
name|createOrCombineStrategies
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
literal|"mock:/a/4"
argument_list|,
name|combineCtx
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ss
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|combineCtx
operator|.
name|combined
operator|instanceof
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|etlSs
operator|.
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|etlSs
operator|.
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The fifth will not be combined because of delta files.
name|ss
operator|=
name|createOrCombineStrategies
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
literal|"mock:/a/5"
argument_list|,
name|combineCtx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|OrcInputFormat
operator|.
name|ETLSplitStrategy
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|etlSs
argument_list|,
name|ss
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|etlSs
operator|.
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|etlSs
operator|.
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|createOrCombineStrategies
parameter_list|(
name|OrcInputFormat
operator|.
name|Context
name|context
parameter_list|,
name|MockFileSystem
name|fs
parameter_list|,
name|String
name|path
parameter_list|,
name|OrcInputFormat
operator|.
name|CombinedCtx
name|combineCtx
parameter_list|)
throws|throws
name|IOException
block|{
name|OrcInputFormat
operator|.
name|AcidDirInfo
name|adi
init|=
name|createAdi
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
name|OrcInputFormat
operator|.
name|determineSplitStrategies
argument_list|(
name|combineCtx
argument_list|,
name|context
argument_list|,
name|adi
operator|.
name|fs
argument_list|,
name|adi
operator|.
name|splitPath
argument_list|,
name|adi
operator|.
name|acidInfo
argument_list|,
name|adi
operator|.
name|baseFiles
argument_list|,
name|adi
operator|.
name|parsedDeltas
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|OrcInputFormat
operator|.
name|AcidDirInfo
name|createAdi
parameter_list|(
name|OrcInputFormat
operator|.
name|Context
name|context
parameter_list|,
name|MockFileSystem
name|fs
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|createSplitStrategies
parameter_list|(
name|OrcInputFormat
operator|.
name|Context
name|context
parameter_list|,
name|OrcInputFormat
operator|.
name|FileGenerator
name|gen
parameter_list|)
throws|throws
name|IOException
block|{
name|OrcInputFormat
operator|.
name|AcidDirInfo
name|adi
init|=
name|gen
operator|.
name|call
argument_list|()
decl_stmt|;
return|return
name|OrcInputFormat
operator|.
name|determineSplitStrategies
argument_list|(
literal|null
argument_list|,
name|context
argument_list|,
name|adi
operator|.
name|fs
argument_list|,
name|adi
operator|.
name|splitPath
argument_list|,
name|adi
operator|.
name|acidInfo
argument_list|,
name|adi
operator|.
name|baseFiles
argument_list|,
name|adi
operator|.
name|parsedDeltas
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|MockBlock
block|{
name|int
name|offset
decl_stmt|;
name|int
name|length
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
decl_stmt|;
specifier|public
name|MockBlock
parameter_list|(
name|String
modifier|...
name|hosts
parameter_list|)
block|{
name|this
operator|.
name|hosts
operator|=
name|hosts
expr_stmt|;
block|}
specifier|public
name|void
name|setOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"block{offset: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", length: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", hosts: ["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|hosts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MockFile
block|{
specifier|final
name|Path
name|path
decl_stmt|;
name|int
name|blockSize
decl_stmt|;
name|int
name|length
decl_stmt|;
name|MockBlock
index|[]
name|blocks
decl_stmt|;
name|byte
index|[]
name|content
decl_stmt|;
specifier|public
name|MockFile
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|MockBlock
modifier|...
name|blocks
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|content
operator|.
name|length
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MockBlock
name|block
range|:
name|blocks
control|)
block|{
name|block
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|block
operator|.
name|length
operator|=
name|Math
operator|.
name|min
argument_list|(
name|length
operator|-
name|offset
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|block
operator|.
name|length
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|path
operator|.
name|hashCode
argument_list|()
operator|+
literal|31
operator|*
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|MockFile
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|MockFile
operator|)
name|obj
operator|)
operator|.
name|path
operator|.
name|equals
argument_list|(
name|this
operator|.
name|path
argument_list|)
operator|&&
operator|(
operator|(
name|MockFile
operator|)
name|obj
operator|)
operator|.
name|length
operator|==
name|this
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"mockFile{path: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", blkSize: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", len: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", blocks: ["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|static
class|class
name|MockInputStream
extends|extends
name|FSInputStream
block|{
specifier|final
name|MockFile
name|file
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|public
name|MockInputStream
parameter_list|(
name|MockFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|offset
operator|=
operator|(
name|int
operator|)
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|<
name|file
operator|.
name|length
condition|)
block|{
return|return
name|file
operator|.
name|content
index|[
name|offset
operator|++
index|]
operator|&
literal|0xff
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MockPath
extends|extends
name|Path
block|{
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|public
name|MockPath
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|fs
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MockOutputStream
extends|extends
name|FSDataOutputStream
block|{
specifier|private
specifier|final
name|MockFile
name|file
decl_stmt|;
specifier|public
name|MockOutputStream
parameter_list|(
name|MockFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|DataOutputBuffer
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
comment|/**      * Set the blocks and their location for the file.      * Must be called after the stream is closed or the block length will be      * wrong.      * @param blocks the list of blocks      */
specifier|public
name|void
name|setBlocks
parameter_list|(
name|MockBlock
modifier|...
name|blocks
parameter_list|)
block|{
name|file
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|file
operator|.
name|length
operator|&&
name|i
operator|<
name|blocks
operator|.
name|length
condition|)
block|{
name|blocks
index|[
name|i
index|]
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|blocks
index|[
name|i
index|]
operator|.
name|length
operator|=
name|Math
operator|.
name|min
argument_list|(
name|file
operator|.
name|length
operator|-
name|offset
argument_list|,
name|file
operator|.
name|blockSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|blocks
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataOutputBuffer
name|buf
init|=
operator|(
name|DataOutputBuffer
operator|)
name|getWrappedStream
argument_list|()
decl_stmt|;
name|file
operator|.
name|length
operator|=
name|buf
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|file
operator|.
name|content
operator|=
operator|new
name|byte
index|[
name|file
operator|.
name|length
index|]
expr_stmt|;
name|MockBlock
name|block
init|=
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
decl_stmt|;
name|block
operator|.
name|setLength
argument_list|(
name|file
operator|.
name|length
argument_list|)
expr_stmt|;
name|setBlocks
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|file
operator|.
name|content
argument_list|,
literal|0
argument_list|,
name|file
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Out stream to "
operator|+
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FileSystem
block|{
specifier|final
name|List
argument_list|<
name|MockFile
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|MockFile
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|MockFile
argument_list|,
name|FileStatus
argument_list|>
name|fileStatusMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|workingDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// statics for when the mock fs is created via FileSystem.get
specifier|private
specifier|static
name|String
name|blockedUgi
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|List
argument_list|<
name|MockFile
argument_list|>
name|globalFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|MockFile
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Statistics
name|statistics
decl_stmt|;
specifier|public
name|MockFileSystem
parameter_list|()
block|{
comment|// empty
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|statistics
operator|=
name|getStatistics
argument_list|(
literal|"mock"
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MockFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MockFile
modifier|...
name|files
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|files
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|statistics
operator|=
name|getStatistics
argument_list|(
literal|"mock"
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setBlockedUgi
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|blockedUgi
operator|=
name|s
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|files
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
literal|"mock:///"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"huh?"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
comment|// increments file modification time
specifier|public
name|void
name|touch
parameter_list|(
name|MockFile
name|file
parameter_list|)
block|{
if|if
condition|(
name|fileStatusMap
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|fileStatusMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatusNew
init|=
operator|new
name|FileStatus
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getReplication
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
operator|+
literal|1
argument_list|,
name|fileStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getPermission
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getGroup
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|fileStatusMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|fileStatusNew
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
class|class
name|MockAccessDenied
extends|extends
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|MockInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File not found: "
operator|+
name|path
argument_list|)
throw|;
block|}
specifier|private
name|MockFile
name|findFile
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|path
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
for|for
control|(
name|MockFile
name|file
range|:
name|globalFiles
control|)
block|{
if|if
condition|(
name|file
operator|.
name|path
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkAccess
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockedUgi
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
operator|!
name|blockedUgi
operator|.
name|equals
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
condition|)
return|return;
throw|throw
operator|new
name|MockAccessDenied
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|fsPermission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|MockFile
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|blockSize
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MockOutputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
return|return
name|create
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|256
operator|*
literal|1024
argument_list|,
name|progressable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|path2
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
argument_list|()
block|{
specifier|private
name|Iterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|iterator
init|=
name|listLocatedFileStatuses
argument_list|(
name|f
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|LocatedFileStatus
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|List
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedFileStatuses
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedFileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|pathname
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|pathnameAsDir
init|=
name|pathname
operator|+
literal|"/"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createLocatedStatus
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|findMatchingLocatedFiles
argument_list|(
name|files
argument_list|,
name|pathnameAsDir
argument_list|,
name|dirs
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|findMatchingLocatedFiles
argument_list|(
name|globalFiles
argument_list|,
name|pathnameAsDir
argument_list|,
name|dirs
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// for each directory add it once
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createLocatedDirectory
argument_list|(
operator|new
name|MockPath
argument_list|(
name|this
argument_list|,
name|pathnameAsDir
operator|+
name|dir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|pathname
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|pathnameAsDir
init|=
name|pathname
operator|+
literal|"/"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
name|createStatus
argument_list|(
name|file
argument_list|)
block|}
return|;
block|}
name|findMatchingFiles
argument_list|(
name|files
argument_list|,
name|pathnameAsDir
argument_list|,
name|dirs
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|findMatchingFiles
argument_list|(
name|globalFiles
argument_list|,
name|pathnameAsDir
argument_list|,
name|dirs
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// for each directory add it once
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createDirectory
argument_list|(
operator|new
name|MockPath
argument_list|(
name|this
argument_list|,
name|pathnameAsDir
operator|+
name|dir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|findMatchingFiles
parameter_list|(
name|List
argument_list|<
name|MockFile
argument_list|>
name|files
parameter_list|,
name|String
name|pathnameAsDir
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dirs
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
name|String
name|filename
init|=
name|file
operator|.
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
name|pathnameAsDir
argument_list|)
condition|)
block|{
name|String
name|tail
init|=
name|filename
operator|.
name|substring
argument_list|(
name|pathnameAsDir
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nextSlash
init|=
name|tail
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextSlash
operator|>
literal|0
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|tail
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nextSlash
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|createStatus
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|findMatchingLocatedFiles
parameter_list|(
name|List
argument_list|<
name|MockFile
argument_list|>
name|files
parameter_list|,
name|String
name|pathnameAsDir
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dirs
parameter_list|,
name|List
argument_list|<
name|LocatedFileStatus
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
name|String
name|filename
init|=
name|file
operator|.
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
name|pathnameAsDir
argument_list|)
condition|)
block|{
name|String
name|tail
init|=
name|filename
operator|.
name|substring
argument_list|(
name|pathnameAsDir
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nextSlash
init|=
name|tail
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextSlash
operator|>
literal|0
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|tail
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nextSlash
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|createLocatedStatus
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|workingDir
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|fsPermission
parameter_list|)
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|FileStatus
name|createStatus
parameter_list|(
name|MockFile
name|file
parameter_list|)
block|{
if|if
condition|(
name|fileStatusMap
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
name|fileStatusMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
return|;
block|}
name|FileStatus
name|fileStatus
init|=
operator|new
name|FileStatus
argument_list|(
name|file
operator|.
name|length
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|file
operator|.
name|blockSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|644
argument_list|)
argument_list|,
literal|"owen"
argument_list|,
literal|"group"
argument_list|,
name|file
operator|.
name|path
argument_list|)
decl_stmt|;
name|fileStatusMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|fileStatus
argument_list|)
expr_stmt|;
return|return
name|fileStatus
return|;
block|}
specifier|private
name|FileStatus
name|createDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|755
argument_list|)
argument_list|,
literal|"owen"
argument_list|,
literal|"group"
argument_list|,
name|dir
argument_list|)
return|;
block|}
specifier|private
name|LocatedFileStatus
name|createLocatedStatus
parameter_list|(
name|MockFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|createStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocatedFileStatus
argument_list|(
name|fileStatus
argument_list|,
name|getFileBlockLocationsImpl
argument_list|(
name|fileStatus
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|LocatedFileStatus
name|createLocatedDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|createDirectory
argument_list|(
name|dir
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocatedFileStatus
argument_list|(
name|fileStatus
argument_list|,
name|getFileBlockLocationsImpl
argument_list|(
name|fileStatus
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|String
name|pathnameAsDir
init|=
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
return|return
name|createStatus
argument_list|(
name|file
argument_list|)
return|;
for|for
control|(
name|MockFile
name|dir
range|:
name|files
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|path
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|pathnameAsDir
argument_list|)
condition|)
block|{
return|return
name|createDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
for|for
control|(
name|MockFile
name|dir
range|:
name|globalFiles
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|path
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|pathnameAsDir
argument_list|)
condition|)
block|{
return|return
name|createDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|path
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|stat
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileBlockLocationsImpl
argument_list|(
name|stat
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|BlockLocation
index|[]
name|getFileBlockLocationsImpl
parameter_list|(
specifier|final
name|FileStatus
name|stat
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|len
parameter_list|,
specifier|final
name|boolean
name|updateStats
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|updateStats
condition|)
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|checkAccess
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|BlockLocation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockLocation
argument_list|>
argument_list|()
decl_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MockBlock
name|block
range|:
name|file
operator|.
name|blocks
control|)
block|{
if|if
condition|(
name|OrcInputFormat
operator|.
name|SplitGenerator
operator|.
name|getOverlap
argument_list|(
name|block
operator|.
name|offset
argument_list|,
name|block
operator|.
name|length
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|topology
init|=
operator|new
name|String
index|[
name|block
operator|.
name|hosts
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topology
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|topology
index|[
name|i
index|]
operator|=
literal|"/rack/ "
operator|+
name|block
operator|.
name|hosts
index|[
name|i
index|]
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|BlockLocation
argument_list|(
name|block
operator|.
name|hosts
argument_list|,
name|block
operator|.
name|hosts
argument_list|,
name|topology
argument_list|,
name|block
operator|.
name|offset
argument_list|,
name|block
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|BlockLocation
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"mockFs{files:["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|addGlobalFile
parameter_list|(
name|MockFile
name|mockFile
parameter_list|)
block|{
name|globalFiles
operator|.
name|add
argument_list|(
name|mockFile
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|clearGlobalFiles
parameter_list|()
block|{
name|globalFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|fill
parameter_list|(
name|DataOutputBuffer
name|out
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create the binary contents of an ORC file that just has enough information    * to test the getInputSplits.    * @param stripeLengths the length of each stripe    * @return the bytes of the file    * @throws IOException    */
specifier|static
name|byte
index|[]
name|createMockOrcFile
parameter_list|(
name|long
modifier|...
name|stripeLengths
parameter_list|)
throws|throws
name|IOException
block|{
name|OrcProto
operator|.
name|Footer
operator|.
name|Builder
name|footer
init|=
name|OrcProto
operator|.
name|Footer
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
specifier|final
name|long
name|headerLen
init|=
literal|3
decl_stmt|;
name|long
name|offset
init|=
name|headerLen
decl_stmt|;
name|DataOutputBuffer
name|buffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|stripeLength
range|:
name|stripeLengths
control|)
block|{
name|footer
operator|.
name|addStripes
argument_list|(
name|OrcProto
operator|.
name|StripeInformation
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
operator|.
name|setIndexLength
argument_list|(
literal|0
argument_list|)
operator|.
name|setDataLength
argument_list|(
name|stripeLength
operator|-
literal|10
argument_list|)
operator|.
name|setFooterLength
argument_list|(
literal|10
argument_list|)
operator|.
name|setNumberOfRows
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|stripeLength
expr_stmt|;
block|}
name|fill
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|footer
operator|.
name|addTypes
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
operator|.
name|addFieldNames
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|addSubtypes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|addTypes
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|setNumberOfRows
argument_list|(
literal|1000
operator|*
name|stripeLengths
operator|.
name|length
argument_list|)
operator|.
name|setHeaderLength
argument_list|(
name|headerLen
argument_list|)
operator|.
name|setContentLength
argument_list|(
name|offset
operator|-
name|headerLen
argument_list|)
expr_stmt|;
name|footer
operator|.
name|addStatistics
argument_list|(
name|OrcProto
operator|.
name|ColumnStatistics
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNumberOfValues
argument_list|(
literal|1000
operator|*
name|stripeLengths
operator|.
name|length
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|footer
operator|.
name|addStatistics
argument_list|(
name|OrcProto
operator|.
name|ColumnStatistics
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNumberOfValues
argument_list|(
literal|1000
operator|*
name|stripeLengths
operator|.
name|length
argument_list|)
operator|.
name|setStringStatistics
argument_list|(
name|OrcProto
operator|.
name|StringStatistics
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMaximum
argument_list|(
literal|"zzz"
argument_list|)
operator|.
name|setMinimum
argument_list|(
literal|"aaa"
argument_list|)
operator|.
name|setSum
argument_list|(
literal|1000
operator|*
literal|3
operator|*
name|stripeLengths
operator|.
name|length
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|footer
operator|.
name|build
argument_list|()
operator|.
name|writeTo
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|int
name|footerEnd
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|PostScript
name|ps
init|=
name|OrcProto
operator|.
name|PostScript
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCompression
argument_list|(
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|setFooterLength
argument_list|(
name|footerEnd
operator|-
name|offset
argument_list|)
operator|.
name|setMagic
argument_list|(
literal|"ORC"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ps
operator|.
name|writeTo
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|getLength
argument_list|()
operator|-
name|footerEnd
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddSplit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a file with 5 blocks spread around the cluster
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/file"
argument_list|,
literal|500
argument_list|,
name|createMockOrcFile
argument_list|(
literal|197
argument_list|,
literal|300
argument_list|,
literal|600
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1-1"
argument_list|,
literal|"host1-2"
argument_list|,
literal|"host1-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host2-1"
argument_list|,
literal|"host0"
argument_list|,
literal|"host2-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host0"
argument_list|,
literal|"host3-2"
argument_list|,
literal|"host3-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host4-1"
argument_list|,
literal|"host4-2"
argument_list|,
literal|"host4-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host5-1"
argument_list|,
literal|"host5-2"
argument_list|,
literal|"host5-3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|SplitGenerator
name|splitter
init|=
operator|new
name|OrcInputFormat
operator|.
name|SplitGenerator
argument_list|(
operator|new
name|OrcInputFormat
operator|.
name|SplitInfo
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/file"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|OrcSplit
name|result
init|=
name|splitter
operator|.
name|createSplit
argument_list|(
literal|0
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/a/file"
argument_list|,
name|result
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|locs
init|=
name|result
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host1-1"
argument_list|,
name|locs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host1-2"
argument_list|,
name|locs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host1-3"
argument_list|,
name|locs
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|splitter
operator|.
name|createSplit
argument_list|(
literal|500
argument_list|,
literal|600
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|locs
operator|=
name|result
operator|.
name|getLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host2-1"
argument_list|,
name|locs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host0"
argument_list|,
name|locs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host2-3"
argument_list|,
name|locs
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|splitter
operator|.
name|createSplit
argument_list|(
literal|0
argument_list|,
literal|2500
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|locs
operator|=
name|result
operator|.
name|getLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host0"
argument_list|,
name|locs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitGenerator
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a file with 5 blocks spread around the cluster
name|long
index|[]
name|stripeSizes
init|=
operator|new
name|long
index|[]
block|{
literal|197
block|,
literal|300
block|,
literal|600
block|,
literal|200
block|,
literal|200
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
decl_stmt|;
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/file"
argument_list|,
literal|500
argument_list|,
name|createMockOrcFile
argument_list|(
name|stripeSizes
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1-1"
argument_list|,
literal|"host1-2"
argument_list|,
literal|"host1-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host2-1"
argument_list|,
literal|"host0"
argument_list|,
literal|"host2-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host0"
argument_list|,
literal|"host3-2"
argument_list|,
literal|"host3-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host4-1"
argument_list|,
literal|"host4-2"
argument_list|,
literal|"host4-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host5-1"
argument_list|,
literal|"host5-2"
argument_list|,
literal|"host5-3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|SplitGenerator
name|splitter
init|=
operator|new
name|OrcInputFormat
operator|.
name|SplitGenerator
argument_list|(
operator|new
name|OrcInputFormat
operator|.
name|SplitInfo
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/file"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|results
init|=
name|splitter
operator|.
name|call
argument_list|()
decl_stmt|;
name|OrcSplit
name|result
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|497
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|600
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1100
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1800
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// test min = 0, max = 0 generates each stripe
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|splitter
operator|=
operator|new
name|OrcInputFormat
operator|.
name|SplitGenerator
argument_list|(
operator|new
name|OrcInputFormat
operator|.
name|SplitInfo
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/file"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|results
operator|=
name|splitter
operator|.
name|call
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSizes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"checking stripe "
operator|+
name|i
operator|+
literal|" size"
argument_list|,
name|stripeSizes
index|[
name|i
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProjectedColumnSize
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|stripeSizes
init|=
operator|new
name|long
index|[]
block|{
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|100
block|}
decl_stmt|;
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFile
argument_list|(
literal|"mock:/a/file"
argument_list|,
literal|500
argument_list|,
name|createMockOrcFile
argument_list|(
name|stripeSizes
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1-1"
argument_list|,
literal|"host1-2"
argument_list|,
literal|"host1-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host2-1"
argument_list|,
literal|"host0"
argument_list|,
literal|"host2-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host0"
argument_list|,
literal|"host3-2"
argument_list|,
literal|"host3-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host4-1"
argument_list|,
literal|"host4-2"
argument_list|,
literal|"host4-3"
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host5-1"
argument_list|,
literal|"host5-2"
argument_list|,
literal|"host5-3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|SplitGenerator
name|splitter
init|=
operator|new
name|OrcInputFormat
operator|.
name|SplitGenerator
argument_list|(
operator|new
name|OrcInputFormat
operator|.
name|SplitInfo
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/file"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|results
init|=
name|splitter
operator|.
name|call
argument_list|()
decl_stmt|;
name|OrcSplit
name|result
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|167468
argument_list|,
name|result
operator|.
name|getProjectedColumnsUncompressedSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|167468
argument_list|,
name|result
operator|.
name|getProjectedColumnsUncompressedSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|803
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|41867
argument_list|,
name|result
operator|.
name|getProjectedColumnsUncompressedSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// test min = 0, max = 0 generates each stripe
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|splitter
operator|=
operator|new
name|OrcInputFormat
operator|.
name|SplitGenerator
argument_list|(
operator|new
name|OrcInputFormat
operator|.
name|SplitInfo
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/file"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|results
operator|=
name|splitter
operator|.
name|call
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSizes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"checking stripe "
operator|+
name|i
operator|+
literal|" size"
argument_list|,
name|stripeSizes
index|[
name|i
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|stripeSizes
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
literal|41867
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getProjectedColumnsUncompressedSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|83734
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getProjectedColumnsUncompressedSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// single split
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|splitter
operator|=
operator|new
name|OrcInputFormat
operator|.
name|SplitGenerator
argument_list|(
operator|new
name|OrcInputFormat
operator|.
name|SplitInfo
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/file"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|results
operator|=
name|splitter
operator|.
name|call
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|900
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|376804
argument_list|,
name|result
operator|.
name|getProjectedColumnsUncompressedSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInOutFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"x,y"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:int"
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|AbstractSerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getHiveRecordWriter
argument_list|(
name|conf
argument_list|,
name|testFilePath
argument_list|,
name|MyRow
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|properties
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|MyRow
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|MyRow
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|MyRow
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serde
operator|=
operator|new
name|OrcSerde
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OrcSerde
operator|.
name|OrcSerdeRow
operator|.
name|class
argument_list|,
name|serde
operator|.
name|getSerializedClass
argument_list|()
argument_list|)
expr_stmt|;
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<x:int,y:int>"
argument_list|,
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// the the validate input method
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|fileList
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
operator|(
operator|(
name|InputFormatChecker
operator|)
name|in
operator|)
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
operator|new
name|HiveConf
argument_list|()
argument_list|,
name|fileList
argument_list|)
argument_list|)
expr_stmt|;
name|fileList
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
operator|(
name|InputFormatChecker
operator|)
name|in
operator|)
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
operator|new
name|HiveConf
argument_list|()
argument_list|,
name|fileList
argument_list|)
argument_list|)
expr_stmt|;
name|fileList
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
operator|(
operator|(
name|InputFormatChecker
operator|)
name|in
operator|)
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
operator|new
name|HiveConf
argument_list|()
argument_list|,
name|fileList
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the whole file
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|MyRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|MyRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
name|reader
init|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|rowNum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|IntObjectInspector
name|intInspector
init|=
operator|(
name|IntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
comment|// UNDONE: Don't know why HIVE-12894 causes this to return 0?
comment|// assertEquals(0.33, reader.getProgress(), 0.01);
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|++
name|rowNum
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|serde
operator|.
name|deserialize
argument_list|(
name|value
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|serde
operator|.
name|deserialize
argument_list|(
name|value
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|reader
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read just the first column
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|key
operator|=
name|reader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|value
operator|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|createValue
argument_list|()
expr_stmt|;
name|rowNum
operator|=
literal|0
expr_stmt|;
name|fields
operator|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|++
name|rowNum
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test the mapping of empty string to all columns
name|ColumnProjectionUtils
operator|.
name|setReadAllColumns
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|reader
operator|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|key
operator|=
name|reader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|value
operator|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|createValue
argument_list|()
expr_stmt|;
name|rowNum
operator|=
literal|0
expr_stmt|;
name|fields
operator|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|++
name|rowNum
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|serde
operator|.
name|deserialize
argument_list|(
name|value
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|SimpleRow
implements|implements
name|Writable
block|{
name|Text
name|z
decl_stmt|;
specifier|public
name|SimpleRow
parameter_list|(
name|Text
name|t
parameter_list|)
block|{
name|this
operator|.
name|z
operator|=
name|t
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unsupported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unsupported"
argument_list|)
throw|;
block|}
block|}
specifier|static
class|class
name|NestedRow
implements|implements
name|Writable
block|{
name|int
name|z
decl_stmt|;
name|MyRow
name|r
decl_stmt|;
name|NestedRow
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|z
parameter_list|)
block|{
name|this
operator|.
name|z
operator|=
name|z
expr_stmt|;
name|this
operator|.
name|r
operator|=
operator|new
name|MyRow
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unsupported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unsupported"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMROutput
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|NestedRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|AbstractSerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getRecordWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|NestedRow
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|NestedRow
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|NestedRow
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|serde
operator|=
operator|new
name|OrcSerde
argument_list|()
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"z,r"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:struct<x:int,y:int>"
argument_list|)
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"columns"
argument_list|,
literal|"z,r"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:struct<x:int,y:int>"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
name|reader
init|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|rowNum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inner
init|=
operator|(
name|StructObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|inFields
init|=
name|inner
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|IntObjectInspector
name|intInspector
init|=
operator|(
name|IntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|sub
init|=
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|rowNum
operator|+
literal|1
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|sub
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|rowNum
operator|+
literal|2
argument_list|,
name|intInspector
operator|.
name|get
argument_list|(
name|inner
operator|.
name|getStructFieldData
argument_list|(
name|sub
argument_list|,
name|inFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowNum
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"x,y"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:int"
argument_list|)
expr_stmt|;
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getHiveRecordWriter
argument_list|(
name|conf
argument_list|,
name|testFilePath
argument_list|,
name|MyRow
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|properties
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AbstractSerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|==
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|serde
operator|.
name|getSerDeStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSplitGenFailure
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getHiveRecordWriter
argument_list|(
name|conf
argument_list|,
name|testFilePath
argument_list|,
name|MyRow
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|properties
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
operator|new
name|OrcSerde
argument_list|()
operator|.
name|serialize
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|testFilePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0333
argument_list|)
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Permission denied"
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|static
class|class
name|StringRow
implements|implements
name|Writable
block|{
name|String
name|str
decl_stmt|;
name|String
name|str2
decl_stmt|;
name|StringRow
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|str
operator|=
name|s
expr_stmt|;
name|str2
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no write"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no read"
argument_list|)
throw|;
block|}
specifier|static
name|String
name|getColumnNamesProperty
parameter_list|()
block|{
return|return
literal|"str,str2"
return|;
block|}
specifier|static
name|String
name|getColumnTypesProperty
parameter_list|()
block|{
return|return
literal|"string:string"
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"str,str2"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string:string"
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|StringRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|AbstractSerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getHiveRecordWriter
argument_list|(
name|conf
argument_list|,
name|testFilePath
argument_list|,
name|StringRow
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|properties
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"owen"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"beth"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"laurel"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"hazen"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"colin"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|StringRow
argument_list|(
literal|"miles"
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serde
operator|=
operator|new
name|OrcSerde
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<str:string,str2:string>"
argument_list|,
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// read the whole file
name|conf
operator|.
name|set
argument_list|(
literal|"columns"
argument_list|,
name|StringRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"columns.types"
argument_list|,
name|StringRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
name|reader
init|=
name|in
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StringObjectInspector
name|strInspector
init|=
operator|(
name|StringObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"owen"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"beth"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"laurel"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hazen"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"colin"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"miles"
argument_list|,
name|strInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a mock execution environment that has enough detail that    * ORC, vectorization, HiveInputFormat, and CombineHiveInputFormat don't    * explode.    * @param workDir a local filesystem work directory    * @param warehouseDir a mock filesystem warehouse directory    * @param tableName the table name    * @param objectInspector object inspector for the row    * @param isVectorized should run vectorized    * @return a JobConf that contains the necessary information    * @throws IOException    * @throws HiveException    */
name|JobConf
name|createMockExecutionEnvironment
parameter_list|(
name|Path
name|workDir
parameter_list|,
name|Path
name|warehouseDir
parameter_list|,
name|String
name|tableName
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|boolean
name|isVectorized
parameter_list|,
name|int
name|partitions
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Utilities
operator|.
name|clearWorkMap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.exec.plan"
argument_list|,
name|workDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|String
name|isVectorizedString
init|=
name|Boolean
operator|.
name|toString
argument_list|(
name|isVectorized
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.vectorized.execution.enabled"
argument_list|,
name|isVectorizedString
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Utilities
operator|.
name|VECTOR_MODE
argument_list|,
name|isVectorizedString
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Utilities
operator|.
name|USE_VECTORIZED_INPUT_FILE_FORMAT
argument_list|,
name|isVectorizedString
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.mapper.class"
argument_list|,
name|ExecMapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|warehouseDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
comment|// clean out previous contents
operator|(
operator|(
name|MockFileSystem
operator|)
name|root
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|)
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// build partition strings
name|String
index|[]
name|partPath
init|=
operator|new
name|String
index|[
name|partitions
index|]
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|partitions
condition|;
operator|++
name|p
control|)
block|{
name|partPath
index|[
name|p
index|]
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"p="
operator|+
name|p
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|partPath
index|[
name|p
index|]
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|columnIds
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|columnNames
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|columnTypes
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|structOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|objectInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structOI
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|numCols
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|columnIds
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|columnTypes
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|columnIds
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|columnTypes
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.file.readcolumn.ids"
argument_list|,
name|columnIds
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"partition_columns"
argument_list|,
literal|"p"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|columnNames
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|columnTypes
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|MockFileSystem
name|fs
init|=
operator|(
name|MockFileSystem
operator|)
name|warehouseDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Properties
name|tblProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tblProps
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|tblProps
operator|.
name|put
argument_list|(
literal|"serialization.lib"
argument_list|,
name|OrcSerde
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tblProps
operator|.
name|put
argument_list|(
literal|"columns"
argument_list|,
name|columnNames
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tblProps
operator|.
name|put
argument_list|(
literal|"columns.types"
argument_list|,
name|columnTypes
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TableDesc
name|tbl
init|=
operator|new
name|TableDesc
argument_list|(
name|OrcInputFormat
operator|.
name|class
argument_list|,
name|OrcOutputFormat
operator|.
name|class
argument_list|,
name|tblProps
argument_list|)
decl_stmt|;
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|mapWork
operator|.
name|setVectorMode
argument_list|(
name|isVectorized
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVectorized
condition|)
block|{
name|VectorizedRowBatchCtx
name|vectorizedRowBatchCtx
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
name|vectorizedRowBatchCtx
operator|.
name|init
argument_list|(
name|structOI
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setVectorizedRowBatchCtx
argument_list|(
name|vectorizedRowBatchCtx
argument_list|)
expr_stmt|;
block|}
name|mapWork
operator|.
name|setUseBucketizedHiveInputFormat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|aliasMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|aliases
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|partMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|partitions
condition|;
operator|++
name|p
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|partPath
index|[
name|p
index|]
argument_list|)
decl_stmt|;
name|aliasMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|PartitionDesc
name|part
init|=
operator|new
name|PartitionDesc
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|isVectorized
condition|)
block|{
name|part
operator|.
name|setVectorPartitionDesc
argument_list|(
name|VectorPartitionDesc
operator|.
name|createVectorizedInputFileFormat
argument_list|(
literal|"MockInputFileFormatClassName"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|partMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
name|mapWork
operator|.
name|setPathToAliases
argument_list|(
name|aliasMap
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setPathToPartitionInfo
argument_list|(
name|partMap
argument_list|)
expr_stmt|;
comment|// write the plan out
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
name|Path
name|mapXml
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"map.xml"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|mapXml
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|planStream
init|=
name|localFs
operator|.
name|create
argument_list|(
name|mapXml
argument_list|)
decl_stmt|;
name|SerializationUtilities
operator|.
name|serializePlan
argument_list|(
name|mapWork
argument_list|,
name|planStream
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|Utilities
operator|.
name|HAS_MAP_WORK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|planStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Set the mockblocks for a file after it has been written    * @param path the path to modify    * @param conf the configuration    * @param blocks the blocks to uses    * @throws IOException    */
specifier|static
name|void
name|setBlocks
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|MockBlock
modifier|...
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|mockFs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockOutputStream
name|stream
init|=
operator|(
name|MockOutputStream
operator|)
name|mockFs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setBlocks
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
block|}
specifier|static
name|int
name|getLength
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|mockFs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|stat
operator|.
name|getLen
argument_list|()
return|;
block|}
comment|/**    * Test vectorization, non-acid, non-combine.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testVectorization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get the object inspector for MyRow
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|JobConf
name|conf
init|=
name|createMockExecutionEnvironment
argument_list|(
name|workDir
argument_list|,
operator|new
name|Path
argument_list|(
literal|"mock:///"
argument_list|)
argument_list|,
literal|"vectorization"
argument_list|,
name|inspector
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// write the orc file to the mock file system
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.input.dir"
argument_list|)
operator|+
literal|"/0_0"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|path
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|setBlocks
argument_list|(
name|path
argument_list|,
name|conf
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host0"
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// call getsplits
name|HiveInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inputFormat
init|=
operator|new
name|HiveInputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
name|reader
init|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|NullWritable
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|VectorizedRowBatch
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|value
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnVector
name|col0
init|=
operator|(
name|LongColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"checking "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|col0
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test vectorization, non-acid, non-combine.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testVectorizationWithBuckets
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get the object inspector for MyRow
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|JobConf
name|conf
init|=
name|createMockExecutionEnvironment
argument_list|(
name|workDir
argument_list|,
operator|new
name|Path
argument_list|(
literal|"mock:///"
argument_list|)
argument_list|,
literal|"vectorBuckets"
argument_list|,
name|inspector
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// write the orc file to the mock file system
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.input.dir"
argument_list|)
operator|+
literal|"/0_0"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|path
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|setBlocks
argument_list|(
name|path
argument_list|,
name|conf
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host0"
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// call getsplits
name|conf
operator|.
name|setInt
argument_list|(
name|hive_metastoreConstants
operator|.
name|BUCKET_COUNT
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|HiveInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inputFormat
init|=
operator|new
name|HiveInputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
name|reader
init|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|NullWritable
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|VectorizedRowBatch
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|value
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnVector
name|col0
init|=
operator|(
name|LongColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"checking "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|col0
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test acid with vectorization, no combine
annotation|@
name|Test
specifier|public
name|void
name|testVectorizationWithAcid
parameter_list|()
throws|throws
name|Exception
block|{
name|StructObjectInspector
name|inspector
init|=
operator|new
name|BigRowInspector
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
name|createMockExecutionEnvironment
argument_list|(
name|workDir
argument_list|,
operator|new
name|Path
argument_list|(
literal|"mock:///"
argument_list|)
argument_list|,
literal|"vectorizationAcid"
argument_list|,
name|inspector
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// write the orc file to the mock file system
name|Path
name|partDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.input.dir"
argument_list|)
argument_list|)
decl_stmt|;
name|OrcRecordUpdater
name|writer
init|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|partDir
argument_list|,
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|maximumTransactionId
argument_list|(
literal|10
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|true
argument_list|)
operator|.
name|bucket
argument_list|(
literal|0
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|partDir
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|BigRow
name|row
init|=
operator|new
name|BigRow
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writer
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"mock:/vectorizationAcid/p=0/base_0000010/bucket_00000"
argument_list|)
decl_stmt|;
name|setBlocks
argument_list|(
name|path
argument_list|,
name|conf
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host0"
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// call getsplits
name|HiveInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inputFormat
init|=
operator|new
name|HiveInputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|BigRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|BigRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TRANSACTIONAL_TABLE_SCAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
name|reader
init|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|NullWritable
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|VectorizedRowBatch
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|value
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnVector
name|booleanColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|LongColumnVector
name|byteColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|LongColumnVector
name|shortColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|LongColumnVector
name|intColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|LongColumnVector
name|longColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|4
index|]
decl_stmt|;
name|DoubleColumnVector
name|floatColumn
init|=
operator|(
name|DoubleColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|5
index|]
decl_stmt|;
name|DoubleColumnVector
name|doubleCoulmn
init|=
operator|(
name|DoubleColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|6
index|]
decl_stmt|;
name|BytesColumnVector
name|stringColumn
init|=
operator|(
name|BytesColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|7
index|]
decl_stmt|;
name|DecimalColumnVector
name|decimalColumn
init|=
operator|(
name|DecimalColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|8
index|]
decl_stmt|;
name|LongColumnVector
name|dateColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|9
index|]
decl_stmt|;
name|TimestampColumnVector
name|timestampColumn
init|=
operator|(
name|TimestampColumnVector
operator|)
name|value
operator|.
name|cols
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"checking boolean "
operator|+
name|i
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
argument_list|,
name|booleanColumn
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking byte "
operator|+
name|i
argument_list|,
operator|(
name|byte
operator|)
name|i
argument_list|,
name|byteColumn
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking short "
operator|+
name|i
argument_list|,
operator|(
name|short
operator|)
name|i
argument_list|,
name|shortColumn
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking int "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|intColumn
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking long "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|longColumn
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking float "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|floatColumn
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking double "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|doubleCoulmn
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|Text
name|strValue
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|strValue
operator|.
name|set
argument_list|(
name|stringColumn
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|stringColumn
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|stringColumn
operator|.
name|length
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking string "
operator|+
name|i
argument_list|,
operator|new
name|Text
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|strValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking decimal "
operator|+
name|i
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
name|i
argument_list|)
argument_list|,
name|decimalColumn
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking date "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|dateColumn
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|long
name|millis
init|=
operator|(
name|long
operator|)
name|i
operator|*
name|MILLIS_IN_DAY
decl_stmt|;
name|millis
operator|-=
name|LOCAL_TIMEZONE
operator|.
name|getOffset
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking timestamp "
operator|+
name|i
argument_list|,
name|millis
argument_list|,
name|timestampColumn
operator|.
name|getTime
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test non-vectorized, non-acid, combine
annotation|@
name|Test
specifier|public
name|void
name|testCombinationInputFormat
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get the object inspector for MyRow
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|JobConf
name|conf
init|=
name|createMockExecutionEnvironment
argument_list|(
name|workDir
argument_list|,
operator|new
name|Path
argument_list|(
literal|"mock:///"
argument_list|)
argument_list|,
literal|"combination"
argument_list|,
name|inspector
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// write the orc file to the mock file system
name|Path
name|partDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.input.dir"
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|partDir
argument_list|,
literal|"0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"mock:/combination/p=0/0_0"
argument_list|)
decl_stmt|;
name|setBlocks
argument_list|(
name|path
argument_list|,
name|conf
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host0"
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
name|MockFileSystem
name|mockFs
init|=
operator|(
name|MockFileSystem
operator|)
name|partDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|length0
init|=
name|getLength
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|partDir
argument_list|,
literal|"1_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"mock:/combination/p=0/1_0"
argument_list|)
decl_stmt|;
name|setBlocks
argument_list|(
name|path1
argument_list|,
name|conf
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// call getsplits
name|HiveInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inputFormat
init|=
operator|new
name|CombineHiveInputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|CombineHiveInputFormat
operator|.
name|CombineHiveInputSplit
name|split
init|=
operator|(
name|CombineHiveInputFormat
operator|.
name|CombineHiveInputSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
comment|// check split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|split
operator|.
name|getNumPaths
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|partDir
operator|.
name|toString
argument_list|()
operator|+
literal|"/0_0"
argument_list|,
name|split
operator|.
name|getPath
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|partDir
operator|.
name|toString
argument_list|()
operator|+
literal|"/1_0"
argument_list|,
name|split
operator|.
name|getPath
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|length0
argument_list|,
name|split
operator|.
name|getLength
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getLength
argument_list|(
name|path1
argument_list|,
name|conf
argument_list|)
argument_list|,
name|split
operator|.
name|getLength
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|split
operator|.
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|split
operator|.
name|getOffset
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// hadoop-1 gets 3 and hadoop-2 gets 0. *sigh*
comment|// best answer would be 1.
name|assertTrue
argument_list|(
literal|3
operator|>=
name|split
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// read split
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|CombineHiveKey
argument_list|,
name|OrcStruct
argument_list|>
name|reader
init|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|CombineHiveKey
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|OrcStruct
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|value
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test non-vectorized, acid, combine
annotation|@
name|Test
specifier|public
name|void
name|testCombinationInputFormatWithAcid
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get the object inspector for MyRow
name|StructObjectInspector
name|inspector
decl_stmt|;
specifier|final
name|int
name|PARTITIONS
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|BUCKETS
init|=
literal|3
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|JobConf
name|conf
init|=
name|createMockExecutionEnvironment
argument_list|(
name|workDir
argument_list|,
operator|new
name|Path
argument_list|(
literal|"mock:///"
argument_list|)
argument_list|,
literal|"combinationAcid"
argument_list|,
name|inspector
argument_list|,
literal|false
argument_list|,
name|PARTITIONS
argument_list|)
decl_stmt|;
comment|// write the orc file to the mock file system
name|Path
index|[]
name|partDir
init|=
operator|new
name|Path
index|[
name|PARTITIONS
index|]
decl_stmt|;
name|String
index|[]
name|paths
init|=
name|conf
operator|.
name|getStrings
argument_list|(
literal|"mapred.input.dir"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|PARTITIONS
condition|;
operator|++
name|p
control|)
block|{
name|partDir
index|[
name|p
index|]
operator|=
operator|new
name|Path
argument_list|(
name|paths
index|[
name|p
index|]
argument_list|)
expr_stmt|;
block|}
comment|// write a base file in partition 0
name|OrcRecordUpdater
name|writer
init|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|partDir
index|[
literal|0
index|]
argument_list|,
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|maximumTransactionId
argument_list|(
literal|10
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|true
argument_list|)
operator|.
name|bucket
argument_list|(
literal|0
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|partDir
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// base file
name|Path
name|base0
init|=
operator|new
name|Path
argument_list|(
literal|"mock:/combinationAcid/p=0/base_0000010/bucket_00000"
argument_list|)
decl_stmt|;
name|setBlocks
argument_list|(
name|base0
argument_list|,
name|conf
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// write a delta file in partition 0
name|writer
operator|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|partDir
index|[
literal|0
index|]
argument_list|,
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|maximumTransactionId
argument_list|(
literal|10
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|true
argument_list|)
operator|.
name|bucket
argument_list|(
literal|1
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|partDir
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
literal|"mock:/combinationAcid/p=0/base_0000010/bucket_00001"
argument_list|)
decl_stmt|;
name|setBlocks
argument_list|(
name|base1
argument_list|,
name|conf
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// write three files in partition 1
for|for
control|(
name|int
name|bucket
init|=
literal|0
init|;
name|bucket
operator|<
name|BUCKETS
condition|;
operator|++
name|bucket
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|partDir
index|[
literal|1
index|]
argument_list|,
literal|"00000"
operator|+
name|bucket
operator|+
literal|"_0"
argument_list|)
decl_stmt|;
name|Writer
name|orc
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|path
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
name|orc
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|orc
operator|.
name|close
argument_list|()
expr_stmt|;
name|setBlocks
argument_list|(
name|path
argument_list|,
name|conf
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host3"
argument_list|,
literal|"host4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// call getsplits
name|conf
operator|.
name|setInt
argument_list|(
name|hive_metastoreConstants
operator|.
name|BUCKET_COUNT
argument_list|,
name|BUCKETS
argument_list|)
expr_stmt|;
name|HiveInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inputFormat
init|=
operator|new
name|CombineHiveInputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|HiveInputFormat
operator|.
name|HiveInputSplit
name|split
init|=
operator|(
name|HiveInputFormat
operator|.
name|HiveInputSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"
argument_list|,
name|split
operator|.
name|inputFormatClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/combinationAcid/p=0/base_0000010/bucket_00000"
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|split
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|607
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|split
operator|=
operator|(
name|HiveInputFormat
operator|.
name|HiveInputSplit
operator|)
name|splits
index|[
literal|1
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"
argument_list|,
name|split
operator|.
name|inputFormatClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock:/combinationAcid/p=0/base_0000010/bucket_00001"
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|split
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|629
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CombineHiveInputFormat
operator|.
name|CombineHiveInputSplit
name|combineSplit
init|=
operator|(
name|CombineHiveInputFormat
operator|.
name|CombineHiveInputSplit
operator|)
name|splits
index|[
literal|2
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|BUCKETS
argument_list|,
name|combineSplit
operator|.
name|getNumPaths
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|bucket
init|=
literal|0
init|;
name|bucket
operator|<
name|BUCKETS
condition|;
operator|++
name|bucket
control|)
block|{
name|assertEquals
argument_list|(
literal|"mock:/combinationAcid/p=1/00000"
operator|+
name|bucket
operator|+
literal|"_0"
argument_list|,
name|combineSplit
operator|.
name|getPath
argument_list|(
name|bucket
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|combineSplit
operator|.
name|getOffset
argument_list|(
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|241
argument_list|,
name|combineSplit
operator|.
name|getLength
argument_list|(
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|hosts
init|=
name|combineSplit
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hosts
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSearchArgument
parameter_list|()
throws|throws
name|Exception
block|{
name|Reader
operator|.
name|Options
name|options
init|=
operator|new
name|Reader
operator|.
name|Options
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|Type
operator|.
name|Builder
name|builder
init|=
name|OrcProto
operator|.
name|Type
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
operator|.
name|addAllFieldNames
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"op"
argument_list|,
literal|"otid"
argument_list|,
literal|"bucket"
argument_list|,
literal|"rowid"
argument_list|,
literal|"ctid"
argument_list|,
literal|"row"
argument_list|)
argument_list|)
operator|.
name|addAllSubtypes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
operator|.
name|addAllFieldNames
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"url"
argument_list|,
literal|"purchase"
argument_list|,
literal|"cost"
argument_list|,
literal|"store"
argument_list|)
argument_list|)
operator|.
name|addAllSubtypes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|SearchArgument
name|isNull
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startAnd
argument_list|()
operator|.
name|isNull
argument_list|(
literal|"cost"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConvertAstToSearchArg
operator|.
name|SARG_PUSHDOWN
argument_list|,
name|toKryo
argument_list|(
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_NAMES_CONF_STR
argument_list|,
literal|"url,cost"
argument_list|)
expr_stmt|;
name|options
operator|.
name|include
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|setSearchArgument
argument_list|(
name|options
argument_list|,
name|types
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|colNames
init|=
name|options
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|colNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"url"
argument_list|,
name|colNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|colNames
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cost"
argument_list|,
name|colNames
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|colNames
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|SearchArgument
name|arg
init|=
name|options
operator|.
name|getSearchArgument
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
init|=
name|arg
operator|.
name|getLeaves
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cost"
argument_list|,
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IS_NULL
argument_list|,
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitElimination
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"z,r"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:struct<x:int,y:int>"
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|NestedRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|AbstractSerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapred.max.split.size"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|RecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getRecordWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|NestedRow
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|NestedRow
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|NestedRow
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|serde
operator|=
operator|new
name|OrcSerde
argument_list|()
expr_stmt|;
name|SearchArgument
name|sarg
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startAnd
argument_list|()
operator|.
name|lessThan
argument_list|(
literal|"z"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"sarg.pushdown"
argument_list|,
name|toKryo
argument_list|(
name|sarg
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.file.readcolumn.names"
argument_list|,
literal|"z,r"
argument_list|)
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitEliminationNullStats
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inspector
init|=
name|createSoi
argument_list|()
decl_stmt|;
name|AbstractSerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapred.max.split.size"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|RecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getRecordWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|SimpleRow
argument_list|(
literal|null
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|SimpleRow
argument_list|(
literal|null
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|SimpleRow
argument_list|(
literal|null
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|serde
operator|=
operator|new
name|OrcSerde
argument_list|()
expr_stmt|;
name|SearchArgument
name|sarg
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startAnd
argument_list|()
operator|.
name|lessThan
argument_list|(
literal|"z"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|STRING
argument_list|,
operator|new
name|String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"sarg.pushdown"
argument_list|,
name|toKryo
argument_list|(
name|sarg
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.file.readcolumn.names"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoAs
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|ConfVars
operator|.
name|HIVE_ORC_COMPUTE_SPLITS_NUM_THREADS
operator|.
name|varname
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
operator|.
name|varname
argument_list|,
literal|"ETL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ConfVars
operator|.
name|HIVE_IN_TEST
operator|.
name|varname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|badUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"-foo"
decl_stmt|;
name|MockFileSystem
operator|.
name|setBlockedUgi
argument_list|(
name|badUser
argument_list|)
expr_stmt|;
name|MockFileSystem
operator|.
name|clearGlobalFiles
argument_list|()
expr_stmt|;
name|OrcInputFormat
operator|.
name|Context
operator|.
name|resetThreadPool
argument_list|()
expr_stmt|;
comment|// We need the size above to take effect.
try|try
block|{
comment|// OrcInputFormat will get a mock fs from FileSystem.get; add global files.
name|MockFileSystem
operator|.
name|addGlobalFile
argument_list|(
operator|new
name|MockFile
argument_list|(
literal|"mock:/ugi/1/file"
argument_list|,
literal|10000
argument_list|,
name|createMockOrcFile
argument_list|(
literal|197
argument_list|,
literal|300
argument_list|,
literal|600
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1-1"
argument_list|,
literal|"host1-2"
argument_list|,
literal|"host1-3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MockFileSystem
operator|.
name|addGlobalFile
argument_list|(
operator|new
name|MockFile
argument_list|(
literal|"mock:/ugi/2/file"
argument_list|,
literal|10000
argument_list|,
name|createMockOrcFile
argument_list|(
literal|197
argument_list|,
literal|300
argument_list|,
literal|600
argument_list|)
argument_list|,
operator|new
name|MockBlock
argument_list|(
literal|"host1-1"
argument_list|,
literal|"host1-2"
argument_list|,
literal|"host1-3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
literal|"mock:/ugi/1"
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|badUser
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|OrcInputFormat
operator|.
name|Context
operator|.
name|getCurrentThreadPoolSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|OrcInputFormat
operator|.
name|generateSplitsInfo
argument_list|(
name|conf
argument_list|,
operator|new
name|Context
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ex
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|MockFileSystem
operator|.
name|MockAccessDenied
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
comment|// Expected.
break|break;
block|}
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
throw|throw
name|ex
throw|;
comment|// Unexpected.
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|OrcInputFormat
operator|.
name|Context
operator|.
name|getCurrentThreadPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
literal|"mock:/ugi/2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|splits
init|=
name|OrcInputFormat
operator|.
name|generateSplitsInfo
argument_list|(
name|conf
argument_list|,
operator|new
name|Context
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MockFileSystem
operator|.
name|clearGlobalFiles
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|StructObjectInspector
name|createSoi
parameter_list|()
block|{
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
return|return
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|SimpleRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitGenReadOps
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"mock:///mocktable"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktable"
argument_list|)
decl_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktable
comment|// call-2: open - mock:/mocktable/0_0
comment|// call-3: open - mock:/mocktable/0_1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitGenReadOpsLocalCache
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// creates the static cache
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktbl"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.cache.stripe.details.size"
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktbl
comment|// call-2: open - mock:/mocktbl/0_0
comment|// call-3: open - mock:/mocktbl/0_1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// force BI to avoid reading footers
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
operator|.
name|varname
argument_list|,
literal|"BI"
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|orcInputFormat
operator|=
operator|new
name|OrcInputFormat
argument_list|()
expr_stmt|;
name|splits
operator|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktbl
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// enable cache and use default strategy
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.cache.stripe.details.size"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
operator|.
name|varname
argument_list|,
literal|"HYBRID"
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|orcInputFormat
operator|=
operator|new
name|OrcInputFormat
argument_list|()
expr_stmt|;
name|splits
operator|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktbl
comment|// call-2: open - mock:/mocktbl/0_0
comment|// call-3: open - mock:/mocktbl/0_1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|orcInputFormat
operator|=
operator|new
name|OrcInputFormat
argument_list|()
expr_stmt|;
name|splits
operator|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktbl
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitGenReadOpsLocalCacheChangeFileLen
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// creates the static cache
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktbl1"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktable
comment|// call-2: open - mock:/mocktbl1/0_0
comment|// call-3: open - mock:/mocktbl1/0_1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// change file length and look for cache misses
name|fs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|orcInputFormat
operator|=
operator|new
name|OrcInputFormat
argument_list|()
expr_stmt|;
name|splits
operator|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktable
comment|// call-2: open - mock:/mocktbl1/0_0
comment|// call-3: open - mock:/mocktbl1/0_1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|orcInputFormat
operator|=
operator|new
name|OrcInputFormat
argument_list|()
expr_stmt|;
name|splits
operator|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktbl1
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitGenReadOpsLocalCacheChangeModificationTime
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// creates the static cache
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktbl2"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.cache.use.soft.references"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktbl2
comment|// call-2: open - mock:/mocktbl2/0_0
comment|// call-3: open - mock:/mocktbl2/0_1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// change file modification time and look for cache misses
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockFile
name|mockFile
init|=
operator|(
operator|(
name|MockFileSystem
operator|)
name|fs1
operator|)
operator|.
name|findFile
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|MockFileSystem
operator|)
name|fs1
operator|)
operator|.
name|touch
argument_list|(
name|mockFile
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|orcInputFormat
operator|=
operator|new
name|OrcInputFormat
argument_list|()
expr_stmt|;
name|splits
operator|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktbl2
comment|// call-2: open - mock:/mocktbl2/0_1
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// touch the next file
name|fs1
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mockFile
operator|=
operator|(
operator|(
name|MockFileSystem
operator|)
name|fs1
operator|)
operator|.
name|findFile
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MockFileSystem
operator|)
name|fs1
operator|)
operator|.
name|touch
argument_list|(
name|mockFile
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|orcInputFormat
operator|=
operator|new
name|OrcInputFormat
argument_list|()
expr_stmt|;
name|splits
operator|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktbl2
comment|// call-2: open - mock:/mocktbl2/0_0
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|orcInputFormat
operator|=
operator|new
name|OrcInputFormat
argument_list|()
expr_stmt|;
name|splits
operator|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: listLocatedStatus - mock:/mocktbl2
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonVectorReaderNoFooterSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktable1"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.splits.include.file.footer"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|assertTrue
argument_list|(
literal|"OrcSplit is expected"
argument_list|,
name|split
operator|instanceof
name|OrcSplit
argument_list|)
expr_stmt|;
comment|// ETL strategies will have start=3 (start of first stripe)
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"start=3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasFooter=false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasBase=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"deltas=0"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|assertFalse
argument_list|(
literal|"No footer serialize test for non-vector reader, hasFooter is not expected in"
operator|+
literal|" orc splits."
argument_list|,
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|hasFooter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|orcInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: open to read footer - split 1 => mock:/mocktable1/0_0
comment|// call-2: open to read data - split 1 => mock:/mocktable1/0_0
comment|// call-3: open to read footer - split 2 => mock:/mocktable1/0_1
comment|// call-4: open to read data - split 2 => mock:/mocktable1/0_1
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonVectorReaderFooterSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktable2"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.splits.include.file.footer"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|assertTrue
argument_list|(
literal|"OrcSplit is expected"
argument_list|,
name|split
operator|instanceof
name|OrcSplit
argument_list|)
expr_stmt|;
comment|// ETL strategies will have start=3 (start of first stripe)
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"start=3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasFooter=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasBase=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"deltas=0"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Footer serialize test for non-vector reader, hasFooter is expected in"
operator|+
literal|" orc splits."
argument_list|,
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|hasFooter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|orcInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: open to read data - split 1 => mock:/mocktable2/0_0
comment|// call-2: open to read data - split 2 => mock:/mocktable2/0_1
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorReaderNoFooterSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktable3"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.splits.include.file.footer"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|JobConf
name|jobConf
init|=
name|createMockExecutionEnvironment
argument_list|(
name|workDir
argument_list|,
operator|new
name|Path
argument_list|(
literal|"mock:///"
argument_list|)
argument_list|,
literal|"mocktable3"
argument_list|,
name|inspector
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|assertTrue
argument_list|(
literal|"OrcSplit is expected"
argument_list|,
name|split
operator|instanceof
name|OrcSplit
argument_list|)
expr_stmt|;
comment|// ETL strategies will have start=3 (start of first stripe)
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"start=3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasFooter=false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasBase=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"deltas=0"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|assertFalse
argument_list|(
literal|"No footer serialize test for vector reader, hasFooter is not expected in"
operator|+
literal|" orc splits."
argument_list|,
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|hasFooter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|orcInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|jobConf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: open to read footer - split 1 => mock:/mocktable3/0_0
comment|// call-2: open to read data - split 1 => mock:/mocktable3/0_0
comment|// call-3: open to read footer - split 2 => mock:/mocktable3/0_1
comment|// call-4: open to read data - split 2 => mock:/mocktable3/0_1
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorReaderFooterSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktable4"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.splits.include.file.footer"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|JobConf
name|jobConf
init|=
name|createMockExecutionEnvironment
argument_list|(
name|workDir
argument_list|,
operator|new
name|Path
argument_list|(
literal|"mock:///"
argument_list|)
argument_list|,
literal|"mocktable4"
argument_list|,
name|inspector
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|assertTrue
argument_list|(
literal|"OrcSplit is expected"
argument_list|,
name|split
operator|instanceof
name|OrcSplit
argument_list|)
expr_stmt|;
comment|// ETL strategies will have start=3 (start of first stripe)
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"start=3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasFooter=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasBase=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"deltas=0"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Footer serialize test for vector reader, hasFooter is expected in"
operator|+
literal|" orc splits."
argument_list|,
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|hasFooter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|orcInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|jobConf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: open to read data - split 1 => mock:/mocktable4/0_0
comment|// call-2: open to read data - split 2 => mock:/mocktable4/0_1
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testACIDReaderNoFooterSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktable5"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.transactional.table.scan"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|MyRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|MyRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.splits.include.file.footer"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|assertTrue
argument_list|(
literal|"OrcSplit is expected"
argument_list|,
name|split
operator|instanceof
name|OrcSplit
argument_list|)
expr_stmt|;
comment|// ETL strategies will have start=3 (start of first stripe)
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"start=3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasFooter=false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasBase=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"deltas=0"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|assertFalse
argument_list|(
literal|"No footer serialize test for non-vector reader, hasFooter is not expected in"
operator|+
literal|" orc splits."
argument_list|,
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|hasFooter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|orcInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: open to read footer - split 1 => mock:/mocktable5/0_0
comment|// call-2: open to read data - split 1 => mock:/mocktable5/0_0
comment|// call-3: open to read footer - split 2 => mock:/mocktable5/0_1
comment|// call-4: open to read data - split 2 => mock:/mocktable5/0_1
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testACIDReaderFooterSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktable6"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.transactional.table.scan"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|MyRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|MyRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.splits.include.file.footer"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|assertTrue
argument_list|(
literal|"OrcSplit is expected"
argument_list|,
name|split
operator|instanceof
name|OrcSplit
argument_list|)
expr_stmt|;
comment|// ETL strategies will have start=3 (start of first stripe)
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"start=3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasFooter=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasBase=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"deltas=0"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Footer serialize test for ACID reader, hasFooter is expected in"
operator|+
literal|" orc splits."
argument_list|,
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|hasFooter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|orcInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: open to read data - split 1 => mock:/mocktable6/0_0
comment|// call-2: open to read data - split 2 => mock:/mocktable6/0_1
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testACIDReaderNoFooterSerializeWithDeltas
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktable7"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.transactional.table.scan"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|MyRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|MyRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.splits.include.file.footer"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/delta_001_002"
argument_list|)
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|assertTrue
argument_list|(
literal|"OrcSplit is expected"
argument_list|,
name|split
operator|instanceof
name|OrcSplit
argument_list|)
expr_stmt|;
comment|// ETL strategies will have start=3 (start of first stripe)
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"start=3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasFooter=false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasBase=true"
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: don't be surprised if deltas value is different
comment|// in older release deltas=2 as min and max transaction are added separately to delta list.
comment|// in newer release since both of them are put together deltas=1
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"deltas=1"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|assertFalse
argument_list|(
literal|"No footer serialize test for ACID reader, hasFooter is not expected in"
operator|+
literal|" orc splits."
argument_list|,
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|hasFooter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|orcInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: open to read footer - split 1 => mock:/mocktable7/0_0
comment|// call-2: open to read data - split 1 => mock:/mocktable7/0_0
comment|// call-3: open side file (flush length) of delta directory
comment|// call-4: fs.exists() check for delta_xxx_xxx/bucket_00000 file
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testACIDReaderFooterSerializeWithDeltas
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockPath
name|mockPath
init|=
operator|new
name|MockPath
argument_list|(
name|fs
argument_list|,
literal|"mock:///mocktable8"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.transactional.table.scan"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|MyRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|MyRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.orc.splits.include.file.footer"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|mockPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mock:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.mock.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/0_0"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|mockPath
operator|+
literal|"/delta_001_002"
argument_list|)
operator|+
literal|"/0_1"
argument_list|)
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|OrcInputFormat
name|orcInputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|orcInputFormat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|readOpsBefore
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsBefore
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"MockFS has stats. Read ops not expected to be -1"
argument_list|,
name|readOpsBefore
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|assertTrue
argument_list|(
literal|"OrcSplit is expected"
argument_list|,
name|split
operator|instanceof
name|OrcSplit
argument_list|)
expr_stmt|;
comment|// ETL strategies will have start=3 (start of first stripe)
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"start=3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasFooter=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasBase=true"
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: don't be surprised if deltas value is different
comment|// in older release deltas=2 as min and max transaction are added separately to delta list.
comment|// in newer release since both of them are put together deltas=1
name|assertTrue
argument_list|(
name|split
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"deltas=1"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Footer serialize test for ACID reader, hasFooter is not expected in"
operator|+
literal|" orc splits."
argument_list|,
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|hasFooter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|orcInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|int
name|readOpsDelta
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|readOpsDelta
operator|=
name|statistics
operator|.
name|getReadOps
argument_list|()
operator|-
name|readOpsBefore
expr_stmt|;
block|}
block|}
comment|// call-1: open to read data - split 1 => mock:/mocktable8/0_0
comment|// call-2: open side file (flush length) of delta directory
comment|// call-3: fs.exists() check for delta_xxx_xxx/bucket_00000 file
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|readOpsDelta
argument_list|)
expr_stmt|;
comment|// revert back to local fs
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
block|}
comment|/**    * also see {@link TestOrcFile#testPredicatePushdown()}    * This tests that {@link RecordReader#getRowNumber()} works with multiple splits    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRowNumberUniquenessInDifferentSplits
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"x,y"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:int"
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
comment|// Save the conf variable values so that they can be restored later.
name|long
name|oldDefaultStripeSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|OrcConf
operator|.
name|STRIPE_SIZE
operator|.
name|getHiveConfName
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|long
name|oldMaxSplitSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
operator|.
name|varname
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
comment|// Set the conf variable values for this test.
name|long
name|newStripeSize
init|=
literal|10000L
decl_stmt|;
comment|// 10000 bytes per stripe
name|long
name|newMaxSplitSize
init|=
literal|100L
decl_stmt|;
comment|// 1024 bytes per split
name|conf
operator|.
name|setLong
argument_list|(
name|OrcConf
operator|.
name|STRIPE_SIZE
operator|.
name|getHiveConfName
argument_list|()
argument_list|,
name|newStripeSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
operator|.
name|varname
argument_list|,
name|newMaxSplitSize
argument_list|)
expr_stmt|;
name|AbstractSerDe
name|serde
init|=
operator|new
name|OrcSerde
argument_list|()
decl_stmt|;
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outFormat
init|=
operator|new
name|OrcOutputFormat
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
name|writer
init|=
name|outFormat
operator|.
name|getHiveRecordWriter
argument_list|(
name|conf
argument_list|,
name|testFilePath
argument_list|,
name|MyRow
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|properties
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
comment|// The following loop should create 20 stripes in the orc file.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newStripeSize
operator|*
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|serde
operator|.
name|serialize
argument_list|(
operator|new
name|MyRow
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|inspector
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serde
operator|=
operator|new
name|OrcSerde
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OrcSerde
operator|.
name|OrcSerdeRow
operator|.
name|class
argument_list|,
name|serde
operator|.
name|getSerializedClass
argument_list|()
argument_list|)
expr_stmt|;
name|inspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<x:int,y:int>"
argument_list|,
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numExpectedSplits
init|=
literal|20
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
name|numExpectedSplits
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numExpectedSplits
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numExpectedSplits
condition|;
operator|++
name|i
control|)
block|{
name|OrcSplit
name|split
init|=
operator|(
name|OrcSplit
operator|)
name|splits
index|[
name|i
index|]
decl_stmt|;
name|Reader
operator|.
name|Options
name|orcReaderOptions
init|=
operator|new
name|Reader
operator|.
name|Options
argument_list|()
decl_stmt|;
name|orcReaderOptions
operator|.
name|range
argument_list|(
name|split
operator|.
name|getStart
argument_list|()
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|OrcFile
operator|.
name|ReaderOptions
name|qlReaderOptions
init|=
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|maxLength
argument_list|(
name|split
operator|.
name|getFileLength
argument_list|()
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|split
operator|.
name|getPath
argument_list|()
argument_list|,
name|qlReaderOptions
argument_list|)
decl_stmt|;
name|RecordReader
name|recordReader
init|=
name|reader
operator|.
name|rowsOptions
argument_list|(
name|orcReaderOptions
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|recordReader
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|long
name|rowNum
init|=
operator|(
name|i
operator|*
literal|5000
operator|)
operator|+
name|j
decl_stmt|;
name|long
name|rowNumActual
init|=
name|recordReader
operator|.
name|getRowNumber
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rowNum="
operator|+
name|rowNum
argument_list|,
name|rowNum
argument_list|,
name|rowNumActual
argument_list|)
expr_stmt|;
name|Object
name|row
init|=
name|recordReader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
block|}
name|recordReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Reset the conf variable values that we changed for this test.
if|if
condition|(
name|oldDefaultStripeSize
operator|!=
operator|-
literal|1L
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|OrcConf
operator|.
name|STRIPE_SIZE
operator|.
name|getHiveConfName
argument_list|()
argument_list|,
name|oldDefaultStripeSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this means that nothing was set for default stripe size previously, so we should unset it.
name|conf
operator|.
name|unset
argument_list|(
name|OrcConf
operator|.
name|STRIPE_SIZE
operator|.
name|getHiveConfName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldMaxSplitSize
operator|!=
operator|-
literal|1L
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
operator|.
name|varname
argument_list|,
name|oldMaxSplitSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this means that nothing was set for default stripe size previously, so we should unset it.
name|conf
operator|.
name|unset
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
operator|.
name|varname
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test schema evolution when using the reader directly.    */
annotation|@
name|Test
specifier|public
name|void
name|testSchemaEvolution
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|fileSchema
init|=
name|TypeDescription
operator|.
name|fromString
argument_list|(
literal|"struct<a:int,b:struct<c:int>,d:string>"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|setSchema
argument_list|(
name|fileSchema
argument_list|)
operator|.
name|compress
argument_list|(
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|fileSchema
operator|.
name|createRowBatch
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1000
expr_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
operator|.
name|fields
index|[
literal|0
index|]
operator|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1000
condition|;
name|r
operator|++
control|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
operator|*
literal|42
expr_stmt|;
name|lcv
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
operator|*
literal|10001
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|TypeDescription
name|readerSchema
init|=
name|TypeDescription
operator|.
name|fromString
argument_list|(
literal|"struct<a:int,b:struct<c:int,future1:int>,d:string,future2:int>"
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rowsOptions
argument_list|(
operator|new
name|Reader
operator|.
name|Options
argument_list|()
operator|.
name|schema
argument_list|(
name|readerSchema
argument_list|)
argument_list|)
decl_stmt|;
name|batch
operator|=
name|readerSchema
operator|.
name|createRowBatch
argument_list|()
expr_stmt|;
name|lcv
operator|=
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
operator|.
name|fields
index|[
literal|0
index|]
operator|)
expr_stmt|;
name|LongColumnVector
name|future1
init|=
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
operator|.
name|fields
index|[
literal|1
index|]
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|future1
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|future1
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|batch
operator|.
name|size
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|r
operator|*
literal|42
argument_list|,
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|r
operator|*
literal|10001
argument_list|,
name|lcv
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|r
operator|*
literal|10001
argument_list|,
name|lcv
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
argument_list|)
argument_list|,
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|toString
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// try it again with an include vector
name|rows
operator|=
name|reader
operator|.
name|rowsOptions
argument_list|(
operator|new
name|Reader
operator|.
name|Options
argument_list|()
operator|.
name|schema
argument_list|(
name|readerSchema
argument_list|)
operator|.
name|include
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|=
name|readerSchema
operator|.
name|createRowBatch
argument_list|()
expr_stmt|;
name|lcv
operator|=
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
operator|.
name|fields
index|[
literal|0
index|]
operator|)
expr_stmt|;
name|future1
operator|=
operator|(
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
operator|.
name|fields
index|[
literal|1
index|]
operator|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|future1
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|future1
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|batch
operator|.
name|size
condition|;
operator|++
name|r
control|)
block|{
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|r
operator|*
literal|42
argument_list|,
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row "
operator|+
name|r
argument_list|,
name|r
operator|*
literal|10001
argument_list|,
name|lcv
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test column projection when using ACID.    */
annotation|@
name|Test
specifier|public
name|void
name|testColumnProjectionWithAcid
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"base_00100"
argument_list|)
decl_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"bucket_00000"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TypeDescription
name|fileSchema
init|=
name|TypeDescription
operator|.
name|fromString
argument_list|(
literal|"struct<operation:int,"
operator|+
literal|"originalTransaction:bigint,bucket:int,rowId:bigint,"
operator|+
literal|"currentTransaction:bigint,"
operator|+
literal|"row:struct<a:int,b:struct<c:int>,d:string>>"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|setSchema
argument_list|(
name|fileSchema
argument_list|)
operator|.
name|compress
argument_list|(
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|fileSchema
operator|.
name|createRowBatch
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1000
expr_stmt|;
name|StructColumnVector
name|scv
init|=
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|5
index|]
decl_stmt|;
comment|// operation
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
comment|// original transaction
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
comment|// bucket
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
comment|// current transaction
name|batch
operator|.
name|cols
index|[
literal|4
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|4
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|LongColumnVector
name|lcv
init|=
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
name|StructColumnVector
operator|)
name|scv
operator|.
name|fields
index|[
literal|1
index|]
argument_list|)
operator|.
name|fields
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|1000
condition|;
name|r
operator|++
control|)
block|{
comment|// row id
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
expr_stmt|;
comment|// a
operator|(
operator|(
name|LongColumnVector
operator|)
name|scv
operator|.
name|fields
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
operator|*
literal|42
expr_stmt|;
comment|// b.c
name|lcv
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|r
operator|*
literal|10001
expr_stmt|;
comment|// d
operator|(
operator|(
name|BytesColumnVector
operator|)
name|scv
operator|.
name|fields
index|[
literal|2
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addUserMetadata
argument_list|(
name|OrcRecordUpdater
operator|.
name|ACID_KEY_INDEX_NAME
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"0,0,999"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|fileLength
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFilePath
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// test with same schema with include
name|conf
operator|.
name|set
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|,
literal|"100:99:"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
literal|"a,b,d"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
literal|"int,struct<c:int>,string"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0,2"
argument_list|)
expr_stmt|;
name|OrcSplit
name|split
init|=
operator|new
name|OrcSplit
argument_list|(
name|testFilePath
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|)
decl_stmt|;
name|OrcInputFormat
name|inputFormat
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|AcidInputFormat
operator|.
name|RowReader
argument_list|<
name|OrcStruct
argument_list|>
name|reader
init|=
name|inputFormat
operator|.
name|getReader
argument_list|(
name|split
argument_list|,
operator|new
name|AcidInputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|record
init|=
literal|0
decl_stmt|;
name|RecordIdentifier
name|id
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|OrcStruct
name|struct
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|id
argument_list|,
name|struct
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"id "
operator|+
name|record
argument_list|,
name|record
argument_list|,
name|id
operator|.
name|getRowId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bucket "
operator|+
name|record
argument_list|,
literal|0
argument_list|,
name|id
operator|.
name|getBucketId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"trans "
operator|+
name|record
argument_list|,
literal|1
argument_list|,
name|id
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a "
operator|+
name|record
argument_list|,
literal|42
operator|*
name|record
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|struct
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|struct
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d "
operator|+
name|record
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|record
argument_list|)
argument_list|,
name|struct
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|record
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test with schema evolution and include
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
literal|"a,b,d,f"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
literal|"int,struct<c:int,e:string>,string,int"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0,2,3"
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|testFilePath
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
name|inputFormat
operator|=
operator|new
name|OrcInputFormat
argument_list|()
expr_stmt|;
name|reader
operator|=
name|inputFormat
operator|.
name|getReader
argument_list|(
name|split
argument_list|,
operator|new
name|AcidInputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|=
literal|0
expr_stmt|;
name|id
operator|=
name|reader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|struct
operator|=
name|reader
operator|.
name|createValue
argument_list|()
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|id
argument_list|,
name|struct
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"id "
operator|+
name|record
argument_list|,
name|record
argument_list|,
name|id
operator|.
name|getRowId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bucket "
operator|+
name|record
argument_list|,
literal|0
argument_list|,
name|id
operator|.
name|getBucketId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"trans "
operator|+
name|record
argument_list|,
literal|1
argument_list|,
name|id
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a "
operator|+
name|record
argument_list|,
literal|42
operator|*
name|record
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|struct
operator|.
name|getFieldValue
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|struct
operator|.
name|getFieldValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d "
operator|+
name|record
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|record
argument_list|)
argument_list|,
name|struct
operator|.
name|getFieldValue
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f "
operator|+
name|record
argument_list|,
literal|null
argument_list|,
name|struct
operator|.
name|getFieldValue
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|record
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

