begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|TestPTFRowContainer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|COL_NAMES
init|=
literal|"x,y,z,a,b,v"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COL_TYPES
init|=
literal|"int,string,double,int,string,string"
decl_stmt|;
specifier|static
name|AbstractSerDe
name|serDe
decl_stmt|;
specifier|static
name|Configuration
name|cfg
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|SerDeException
block|{
name|cfg
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|serDe
operator|=
operator|new
name|LazyBinarySerDe
argument_list|()
expr_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|COL_NAMES
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|COL_TYPES
argument_list|)
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|cfg
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PTFRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rowContainer
parameter_list|(
name|int
name|blockSize
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|HiveException
block|{
name|PTFRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rc
init|=
operator|new
name|PTFRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|(
name|blockSize
argument_list|,
name|cfg
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rc
operator|.
name|setSerDe
argument_list|(
name|serDe
argument_list|,
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|serDe
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setTableDesc
argument_list|(
name|PTFRowContainer
operator|.
name|createTableDesc
argument_list|(
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|private
name|void
name|runTest
parameter_list|(
name|int
name|sz
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|HiveException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|row
decl_stmt|;
name|PTFRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rc
init|=
name|rowContainer
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"abc "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"def "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
comment|// test forward scan
name|assertEquals
argument_list|(
name|sz
argument_list|,
name|rc
operator|.
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
name|row
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|row
operator|=
name|rc
operator|.
name|first
argument_list|()
expr_stmt|;
while|while
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"abc "
operator|+
name|i
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|row
operator|=
name|rc
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|// test backward scan
name|row
operator|=
name|rc
operator|.
name|first
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
name|sz
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|row
operator|=
name|rc
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc "
operator|+
name|i
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1000L
argument_list|)
decl_stmt|;
comment|//test random scan
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|sz
argument_list|)
decl_stmt|;
name|row
operator|=
name|rc
operator|.
name|getAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc "
operator|+
name|j
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// intersperse getAt and next calls
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|sz
argument_list|)
decl_stmt|;
name|row
operator|=
name|rc
operator|.
name|getAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc "
operator|+
name|j
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
name|j
operator|+
literal|1
init|;
name|k
operator|<
name|j
operator|+
operator|(
name|blockSize
operator|/
literal|4
operator|)
operator|&&
name|k
operator|<
name|sz
condition|;
name|k
operator|++
control|)
block|{
name|row
operator|=
name|rc
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def "
operator|+
name|k
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runTest
parameter_list|(
name|int
name|sz
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|HiveException
block|{
name|runTest
argument_list|(
name|sz
argument_list|,
name|blockSize
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLargeBlockSize
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|HiveException
block|{
name|runTest
argument_list|(
literal|100
operator|*
literal|1000
argument_list|,
literal|25
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmallBlockSize
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|HiveException
block|{
name|runTest
argument_list|(
literal|10
operator|*
literal|1000
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBlocksLargerThanSplit
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|runTest
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
operator|(
name|int
operator|)
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|cfg
argument_list|)
operator|.
name|getDefaultBlockSize
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

