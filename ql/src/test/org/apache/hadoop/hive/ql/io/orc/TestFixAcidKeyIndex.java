begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcFile
operator|.
name|WriterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|AcidStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|OrcAcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|WriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
specifier|public
class|class
name|TestFixAcidKeyIndex
block|{
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFixAcidKeyIndex
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testCaseName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestFixAcidKeyIndex."
operator|+
name|testCaseName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|".orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|abstract
class|class
name|TestKeyIndexBuilder
extends|extends
name|OrcRecordUpdater
operator|.
name|KeyIndexBuilder
implements|implements
name|OrcFile
operator|.
name|WriterCallback
block|{
specifier|public
name|TestKeyIndexBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Will be called before closing the ORC file to stop writing any additional information
comment|// to the acid key index.
specifier|abstract
name|void
name|stopWritingKeyIndex
parameter_list|()
function_decl|;
block|}
name|void
name|createTestAcidFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|numRows
parameter_list|,
name|TestKeyIndexBuilder
name|indexBuilder
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|typeStr
init|=
literal|"struct<operation:int,"
operator|+
literal|"originalTransaction:bigint,bucket:int,rowId:bigint,"
operator|+
literal|"currentTransaction:bigint,"
operator|+
literal|"row:struct<a:int,b:struct<c:int>,d:string>>"
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeStr
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|path
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|inspector
argument_list|(
name|OrcStruct
operator|.
name|createObjectInspector
argument_list|(
name|typeInfo
argument_list|)
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|callback
argument_list|(
name|indexBuilder
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|128
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create ORC file with small stripe size so we can write multiple stripes.
name|OrcStruct
name|row
init|=
operator|new
name|OrcStruct
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|row
operator|.
name|setFieldValue
argument_list|(
literal|0
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|setFieldValue
argument_list|(
literal|1
argument_list|,
operator|new
name|LongWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|setFieldValue
argument_list|(
literal|2
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LongWritable
name|rowId
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
name|row
operator|.
name|setFieldValue
argument_list|(
literal|3
argument_list|,
name|rowId
argument_list|)
expr_stmt|;
name|row
operator|.
name|setFieldValue
argument_list|(
literal|4
argument_list|,
operator|new
name|LongWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|OrcStruct
name|rowField
init|=
operator|new
name|OrcStruct
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|row
operator|.
name|setFieldValue
argument_list|(
literal|5
argument_list|,
name|rowField
argument_list|)
expr_stmt|;
name|IntWritable
name|a
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|rowField
operator|.
name|setFieldValue
argument_list|(
literal|0
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|OrcStruct
name|b
init|=
operator|new
name|OrcStruct
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rowField
operator|.
name|setFieldValue
argument_list|(
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|IntWritable
name|c
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|b
operator|.
name|setFieldValue
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|Text
name|d
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|rowField
operator|.
name|setFieldValue
argument_list|(
literal|2
argument_list|,
name|d
argument_list|)
expr_stmt|;
comment|// Minimum 5000 rows per stripe.
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|numRows
condition|;
name|r
operator|++
control|)
block|{
comment|// row id
name|rowId
operator|.
name|set
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// a
name|a
operator|.
name|set
argument_list|(
name|r
operator|*
literal|42
argument_list|)
expr_stmt|;
comment|// b.c
name|c
operator|.
name|set
argument_list|(
name|r
operator|*
literal|10001
argument_list|)
expr_stmt|;
comment|// d
name|d
operator|.
name|set
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|indexBuilder
operator|.
name|addKey
argument_list|(
name|OrcRecordUpdater
operator|.
name|INSERT_OPERATION
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|rowId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|indexBuilder
operator|.
name|stopWritingKeyIndex
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|void
name|runIndexCheck
parameter_list|(
name|Path
name|orcFile
parameter_list|,
name|File
name|outFile
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Run with --check-index and save the output to file so it can be checked.
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|FileOutputStream
name|myOut
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|checkArgs
init|=
operator|new
name|String
index|[]
block|{
literal|"--check-only"
block|,
name|orcFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|FixAcidKeyIndex
operator|.
name|main
argument_list|(
name|checkArgs
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
block|}
name|void
name|checkValidKeyIndex
parameter_list|(
name|Path
name|orcFile
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outputFilename
init|=
literal|"fixAcidKeyIndex.out"
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|toString
argument_list|()
argument_list|,
name|outputFilename
argument_list|)
decl_stmt|;
name|runIndexCheck
argument_list|(
name|orcFile
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
comment|// Check the output of FixAcidKeyIndex - it should indicate the index was valid.
name|String
name|outputAsString
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outputAsString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outputAsString
operator|.
name|contains
argument_list|(
literal|"acid key index is valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|checkInvalidKeyIndex
parameter_list|(
name|Path
name|orcFile
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outputFilename
init|=
literal|"fixAcidKeyIndex.out"
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|toString
argument_list|()
argument_list|,
name|outputFilename
argument_list|)
decl_stmt|;
name|runIndexCheck
argument_list|(
name|orcFile
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
comment|// Check the output of FixAcidKeyIndex - it should indicate the index was invalid.
name|String
name|outputAsString
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outputAsString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outputAsString
operator|.
name|contains
argument_list|(
literal|"acid key index is invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|runFixIndex
parameter_list|(
name|Path
name|orcFile
parameter_list|,
name|File
name|outFile
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Run with --recover and save the output to a file so it can be checked.
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|FileOutputStream
name|myOut
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|checkArgs
init|=
operator|new
name|String
index|[]
block|{
literal|"--recover"
block|,
name|orcFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|FixAcidKeyIndex
operator|.
name|main
argument_list|(
name|checkArgs
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
block|}
name|void
name|fixInvalidIndex
parameter_list|(
name|Path
name|orcFile
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outputFilename
init|=
literal|"fixAcidKeyIndex.out"
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|toString
argument_list|()
argument_list|,
name|outputFilename
argument_list|)
decl_stmt|;
name|runFixIndex
argument_list|(
name|orcFile
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
comment|// Check the output of FixAcidKeyIndex - it should indicate the index was fixed.
name|String
name|outputAsString
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outputAsString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outputAsString
operator|.
name|contains
argument_list|(
literal|"Fixed acid key index"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|fixValidIndex
parameter_list|(
name|Path
name|orcFile
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outputFilename
init|=
literal|"fixAcidKeyIndex.out"
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|toString
argument_list|()
argument_list|,
name|outputFilename
argument_list|)
decl_stmt|;
name|runFixIndex
argument_list|(
name|orcFile
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
comment|// Check the output of FixAcidKeyIndex - it should indicate nothing required fixing.
name|String
name|outputAsString
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outputAsString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outputAsString
operator|.
name|contains
argument_list|(
literal|"No need to recover"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidKeyIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try single stripe
name|createTestAcidFile
argument_list|(
name|testFilePath
argument_list|,
literal|100
argument_list|,
operator|new
name|GoodKeyIndexBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|checkValidKeyIndex
argument_list|(
name|testFilePath
argument_list|)
expr_stmt|;
comment|// Attempting to fix a valid - should not result in a new file.
name|fixValidIndex
argument_list|(
name|testFilePath
argument_list|)
expr_stmt|;
comment|// Multiple stripes
name|createTestAcidFile
argument_list|(
name|testFilePath
argument_list|,
literal|12000
argument_list|,
operator|new
name|GoodKeyIndexBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|checkValidKeyIndex
argument_list|(
name|testFilePath
argument_list|)
expr_stmt|;
comment|// Attempting to fix a valid - should not result in a new file.
name|fixValidIndex
argument_list|(
name|testFilePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidKeyIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try single stripe
name|createTestAcidFile
argument_list|(
name|testFilePath
argument_list|,
literal|100
argument_list|,
operator|new
name|BadKeyIndexBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|checkInvalidKeyIndex
argument_list|(
name|testFilePath
argument_list|)
expr_stmt|;
comment|// Try fixing, this should result in new fixed file.
name|fixInvalidIndex
argument_list|(
name|testFilePath
argument_list|)
expr_stmt|;
comment|// Multiple stripes
name|createTestAcidFile
argument_list|(
name|testFilePath
argument_list|,
literal|12000
argument_list|,
operator|new
name|BadKeyIndexBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|checkInvalidKeyIndex
argument_list|(
name|testFilePath
argument_list|)
expr_stmt|;
comment|// Try fixing, this should result in new fixed file.
name|fixInvalidIndex
argument_list|(
name|testFilePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonAcidOrcFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Copy data/files/alltypesorc to workDir
name|Path
name|baseSrcDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|dataFilesPath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|baseSrcDir
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|"files"
argument_list|)
decl_stmt|;
name|File
name|origOrcFile
init|=
operator|new
name|File
argument_list|(
name|dataFilesPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|"alltypesorc"
argument_list|)
decl_stmt|;
name|File
name|testOrcFile
init|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"alltypesorc"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|origOrcFile
argument_list|,
name|testOrcFile
argument_list|)
expr_stmt|;
name|String
name|outputFilename
init|=
literal|"fixAcidKeyIndex.out"
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|toString
argument_list|()
argument_list|,
name|outputFilename
argument_list|)
decl_stmt|;
name|runIndexCheck
argument_list|(
operator|new
name|Path
argument_list|(
name|testOrcFile
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
name|String
name|outputAsString
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outputAsString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outputAsString
operator|.
name|contains
argument_list|(
literal|"is not an acid file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Version of KeyIndexBuilder that generates a valid key index    */
specifier|static
class|class
name|GoodKeyIndexBuilder
extends|extends
name|TestKeyIndexBuilder
block|{
name|GoodKeyIndexBuilder
parameter_list|()
block|{
name|super
argument_list|(
literal|"GoodKeyIndexBuilder"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stopWritingKeyIndex
parameter_list|()
block|{
comment|// Do nothing - this should generate proper index.
block|}
block|}
comment|/**    * Bad version of KeyIndexBuilder which builds an invalid acid key index    * by not including the key index info once stopWritingKeyIndex() is called.    */
specifier|static
class|class
name|BadKeyIndexBuilder
extends|extends
name|TestKeyIndexBuilder
block|{
name|boolean
name|writeAcidIndexInfo
init|=
literal|true
decl_stmt|;
name|BadKeyIndexBuilder
parameter_list|()
block|{
name|super
argument_list|(
literal|"BadKeyIndexBuilder"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stopWritingKeyIndex
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"*** Stop writing index!"
argument_list|)
expr_stmt|;
name|writeAcidIndexInfo
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preStripeWrite
parameter_list|(
name|OrcFile
operator|.
name|WriterContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"*** writeAcidIndexInfo: "
operator|+
name|writeAcidIndexInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|writeAcidIndexInfo
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|preStripeWrite
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

