begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|topnkey
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for CommonKeyPrefix.  */
end_comment

begin_class
specifier|public
class|class
name|TestCommonKeyPrefix
block|{
annotation|@
name|Test
specifier|public
name|void
name|testmapWhenNoKeysExists
parameter_list|()
block|{
comment|// when
name|CommonKeyPrefix
name|commonPrefix
init|=
name|CommonKeyPrefix
operator|.
name|map
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedNullOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedColumns
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testmapWhenAllKeysMatch
parameter_list|()
block|{
comment|// given
name|ExprNodeColumnDesc
name|childCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col0"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|childCol1
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col1"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|parentCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"KEY._col0"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|parentCol1
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"KEY._col1"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|exprNodeDescMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|exprNodeDescMap
operator|.
name|put
argument_list|(
literal|"_col0"
argument_list|,
name|parentCol0
argument_list|)
expr_stmt|;
name|exprNodeDescMap
operator|.
name|put
argument_list|(
literal|"_col1"
argument_list|,
name|parentCol1
argument_list|)
expr_stmt|;
comment|// when
name|CommonKeyPrefix
name|commonPrefix
init|=
name|CommonKeyPrefix
operator|.
name|map
argument_list|(
name|asList
argument_list|(
name|childCol0
argument_list|,
name|childCol1
argument_list|)
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|,
name|asList
argument_list|(
name|parentCol0
argument_list|,
name|parentCol1
argument_list|)
argument_list|,
name|exprNodeDescMap
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"++"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedNullOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|parentCol0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|parentCol1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ExprNodeColumnDesc
name|exprNodeColumnDesc
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
name|ExprNodeColumnDesc
name|exprNodeColumnDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|()
decl_stmt|;
name|exprNodeColumnDesc
operator|.
name|setColumn
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|exprNodeColumnDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
return|return
name|exprNodeColumnDesc
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testmapWhenOnlyFirstKeyMatchFromTwo
parameter_list|()
block|{
comment|// given
name|ExprNodeColumnDesc
name|childCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col0"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|differentChildCol
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col2"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|parentCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"KEY._col0"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|parentCol1
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"KEY._col1"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|exprNodeDescMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|exprNodeDescMap
operator|.
name|put
argument_list|(
literal|"_col0"
argument_list|,
name|parentCol0
argument_list|)
expr_stmt|;
name|exprNodeDescMap
operator|.
name|put
argument_list|(
literal|"_col1"
argument_list|,
name|parentCol1
argument_list|)
expr_stmt|;
comment|// when
name|CommonKeyPrefix
name|commonPrefix
init|=
name|CommonKeyPrefix
operator|.
name|map
argument_list|(
name|asList
argument_list|(
name|childCol0
argument_list|,
name|differentChildCol
argument_list|)
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|,
name|asList
argument_list|(
name|parentCol0
argument_list|,
name|parentCol1
argument_list|)
argument_list|,
name|exprNodeDescMap
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"+"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|parentCol0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testmapWhenAllColumnsMatchButOrderMismatch
parameter_list|()
block|{
comment|// given
name|ExprNodeColumnDesc
name|childCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col0"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|childCol1
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col1"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|parentCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"KEY._col0"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|parentCol1
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"KEY._col1"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|exprNodeDescMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|exprNodeDescMap
operator|.
name|put
argument_list|(
literal|"_col0"
argument_list|,
name|parentCol0
argument_list|)
expr_stmt|;
name|exprNodeDescMap
operator|.
name|put
argument_list|(
literal|"_col1"
argument_list|,
name|parentCol1
argument_list|)
expr_stmt|;
comment|// when
name|CommonKeyPrefix
name|commonPrefix
init|=
name|CommonKeyPrefix
operator|.
name|map
argument_list|(
name|asList
argument_list|(
name|childCol0
argument_list|,
name|childCol1
argument_list|)
argument_list|,
literal|"+-"
argument_list|,
literal|"aa"
argument_list|,
name|asList
argument_list|(
name|parentCol0
argument_list|,
name|parentCol1
argument_list|)
argument_list|,
name|exprNodeDescMap
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"+"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedNullOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|parentCol0
argument_list|)
argument_list|)
expr_stmt|;
comment|// when
name|commonPrefix
operator|=
name|CommonKeyPrefix
operator|.
name|map
argument_list|(
name|asList
argument_list|(
name|childCol0
argument_list|,
name|childCol1
argument_list|)
argument_list|,
literal|"-+"
argument_list|,
literal|"aa"
argument_list|,
name|asList
argument_list|(
name|parentCol0
argument_list|,
name|parentCol1
argument_list|)
argument_list|,
name|exprNodeDescMap
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|)
expr_stmt|;
comment|// then
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testmapWhenAllColumnsMatchButNullOrderMismatch
parameter_list|()
block|{
comment|// given
name|ExprNodeColumnDesc
name|childCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col0"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|childCol1
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col1"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|parentCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"KEY._col0"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|parentCol1
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"KEY._col1"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|exprNodeDescMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|exprNodeDescMap
operator|.
name|put
argument_list|(
literal|"_col0"
argument_list|,
name|parentCol0
argument_list|)
expr_stmt|;
name|exprNodeDescMap
operator|.
name|put
argument_list|(
literal|"_col1"
argument_list|,
name|parentCol1
argument_list|)
expr_stmt|;
comment|// when
name|CommonKeyPrefix
name|commonPrefix
init|=
name|CommonKeyPrefix
operator|.
name|map
argument_list|(
name|asList
argument_list|(
name|childCol0
argument_list|,
name|childCol1
argument_list|)
argument_list|,
literal|"++"
argument_list|,
literal|"az"
argument_list|,
name|asList
argument_list|(
name|parentCol0
argument_list|,
name|parentCol1
argument_list|)
argument_list|,
name|exprNodeDescMap
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"+"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedNullOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|parentCol0
argument_list|)
argument_list|)
expr_stmt|;
comment|// when
name|commonPrefix
operator|=
name|CommonKeyPrefix
operator|.
name|map
argument_list|(
name|asList
argument_list|(
name|childCol0
argument_list|,
name|childCol1
argument_list|)
argument_list|,
literal|"++"
argument_list|,
literal|"za"
argument_list|,
name|asList
argument_list|(
name|parentCol0
argument_list|,
name|parentCol1
argument_list|)
argument_list|,
name|exprNodeDescMap
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|)
expr_stmt|;
comment|// then
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testmapWhenKeyCountsMismatch
parameter_list|()
block|{
comment|// given
name|ExprNodeColumnDesc
name|childCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col0"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|childCol1
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"_col1"
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|parentCol0
init|=
name|exprNodeColumnDesc
argument_list|(
literal|"KEY._col0"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|exprNodeDescMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|exprNodeDescMap
operator|.
name|put
argument_list|(
literal|"_col0"
argument_list|,
name|parentCol0
argument_list|)
expr_stmt|;
comment|// when
name|CommonKeyPrefix
name|commonPrefix
init|=
name|CommonKeyPrefix
operator|.
name|map
argument_list|(
name|asList
argument_list|(
name|childCol0
argument_list|,
name|childCol1
argument_list|)
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|,
name|singletonList
argument_list|(
name|parentCol0
argument_list|)
argument_list|,
name|exprNodeDescMap
argument_list|,
literal|"++"
argument_list|,
literal|"aa"
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedOrder
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"+"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commonPrefix
operator|.
name|getMappedColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|parentCol0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

