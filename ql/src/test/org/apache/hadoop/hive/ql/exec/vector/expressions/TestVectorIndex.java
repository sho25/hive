begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExtractRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomBatchSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
operator|.
name|SupportedTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
operator|.
name|GenerationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|udf
operator|.
name|VectorUDFAdaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorIndex
block|{
annotation|@
name|Test
specifier|public
name|void
name|testListIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|241
argument_list|)
decl_stmt|;
name|doIndex
argument_list|(
name|random
argument_list|,
comment|/* isList */
literal|true
argument_list|,
literal|null
argument_list|,
comment|/* isFullElementTypeGamut */
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|TypeInfo
index|[]
name|decimalTypeInfos
init|=
operator|new
name|TypeInfo
index|[]
block|{
operator|new
name|DecimalTypeInfo
argument_list|(
literal|38
argument_list|,
literal|18
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|25
argument_list|,
literal|2
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|19
argument_list|,
literal|4
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|18
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|17
argument_list|,
literal|3
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|12
argument_list|,
literal|2
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|7
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMapIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|233
argument_list|)
decl_stmt|;
name|doIndex
argument_list|(
name|random
argument_list|,
comment|/* isList */
literal|false
argument_list|,
literal|"int"
argument_list|,
comment|/* isFullElementTypeGamut */
literal|true
argument_list|)
expr_stmt|;
name|doIndex
argument_list|(
name|random
argument_list|,
comment|/* isList */
literal|false
argument_list|,
literal|"bigint"
argument_list|,
comment|/* isFullElementTypeGamut */
literal|false
argument_list|)
expr_stmt|;
name|doIndex
argument_list|(
name|random
argument_list|,
comment|/* isList */
literal|false
argument_list|,
literal|"double"
argument_list|,
comment|/* isFullElementTypeGamut */
literal|false
argument_list|)
expr_stmt|;
name|doIndex
argument_list|(
name|random
argument_list|,
comment|/* isList */
literal|false
argument_list|,
literal|"string"
argument_list|,
comment|/* isFullElementTypeGamut */
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|TypeInfo
name|typeInfo
range|:
name|decimalTypeInfos
control|)
block|{
name|doIndex
argument_list|(
name|random
argument_list|,
comment|/* isList */
literal|false
argument_list|,
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|,
comment|/* isFullElementTypeGamut */
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
enum|enum
name|IndexTestMode
block|{
name|ROW_MODE
block|,
name|ADAPTOR
block|,
name|VECTOR_EXPRESSION
block|;
specifier|static
specifier|final
name|int
name|count
init|=
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
block|}
specifier|private
name|void
name|doIndex
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|isList
parameter_list|,
name|String
name|keyTypeName
parameter_list|,
name|boolean
name|isFullElementTypeGamut
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|oneElementRootTypeName
init|=
literal|"bigint"
decl_stmt|;
name|doIndexOnRandomDataType
argument_list|(
name|random
argument_list|,
name|isList
argument_list|,
name|keyTypeName
argument_list|,
name|oneElementRootTypeName
argument_list|,
comment|/* allowNulls */
literal|true
argument_list|,
comment|/* isScalarIndex */
literal|false
argument_list|)
expr_stmt|;
name|doIndexOnRandomDataType
argument_list|(
name|random
argument_list|,
name|isList
argument_list|,
name|keyTypeName
argument_list|,
name|oneElementRootTypeName
argument_list|,
comment|/* allowNulls */
literal|true
argument_list|,
comment|/* isScalarIndex */
literal|true
argument_list|)
expr_stmt|;
name|doIndexOnRandomDataType
argument_list|(
name|random
argument_list|,
name|isList
argument_list|,
name|keyTypeName
argument_list|,
name|oneElementRootTypeName
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isScalarIndex */
literal|false
argument_list|)
expr_stmt|;
name|doIndexOnRandomDataType
argument_list|(
name|random
argument_list|,
name|isList
argument_list|,
name|keyTypeName
argument_list|,
name|oneElementRootTypeName
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isScalarIndex */
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isFullElementTypeGamut
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|elementRootTypeNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"bigint"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"char"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"varchar"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"date"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"timestamp"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"binary"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"decimal"
argument_list|)
expr_stmt|;
name|elementRootTypeNameList
operator|.
name|add
argument_list|(
literal|"interval_day_time"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|elementRootTypeName
range|:
name|elementRootTypeNameList
control|)
block|{
name|doIndexOnRandomDataType
argument_list|(
name|random
argument_list|,
name|isList
argument_list|,
name|keyTypeName
argument_list|,
name|elementRootTypeName
argument_list|,
comment|/* allowNulls */
literal|true
argument_list|,
comment|/* isScalarIndex */
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|doIndexOnRandomDataType
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|isList
parameter_list|,
name|String
name|keyTypeName
parameter_list|,
name|String
name|elementRootTypeName
parameter_list|,
name|boolean
name|allowNulls
parameter_list|,
name|boolean
name|isScalarIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|elementTypeName
init|=
name|VectorRandomRowSource
operator|.
name|getDecoratedTypeName
argument_list|(
name|random
argument_list|,
name|elementRootTypeName
argument_list|,
name|SupportedTypes
operator|.
name|ALL
argument_list|,
comment|/* allowedTypeNameSet */
literal|null
argument_list|,
comment|/* depth */
literal|0
argument_list|,
comment|/* maxDepth */
literal|3
argument_list|)
decl_stmt|;
name|TypeInfo
name|elementTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|elementTypeName
argument_list|)
decl_stmt|;
name|ObjectInspector
name|elementObjectInspector
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|elementTypeInfo
argument_list|)
decl_stmt|;
comment|//----------------------------------------------------------------------------------------------
specifier|final
name|TypeInfo
name|keyTypeInfo
decl_stmt|;
if|if
condition|(
name|isList
condition|)
block|{
name|keyTypeInfo
operator|=
name|TypeInfoFactory
operator|.
name|intTypeInfo
expr_stmt|;
block|}
else|else
block|{
name|keyTypeInfo
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|keyTypeName
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ObjectInspector
name|keyObjectInspector
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|keyTypeInfo
argument_list|)
decl_stmt|;
name|Object
name|exampleObject
init|=
operator|(
name|isList
condition|?
operator|(
operator|(
name|WritableIntObjectInspector
operator|)
name|keyObjectInspector
operator|)
operator|.
name|create
argument_list|(
literal|0
argument_list|)
else|:
name|VectorRandomRowSource
operator|.
name|randomWritable
argument_list|(
name|random
argument_list|,
name|keyTypeInfo
argument_list|,
name|keyObjectInspector
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|,
comment|/* allowNull */
literal|false
argument_list|)
operator|)
decl_stmt|;
name|WritableComparator
name|writableComparator
init|=
name|WritableComparator
operator|.
name|get
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
operator|)
name|exampleObject
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|allKeyCount
init|=
literal|10
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|keyCount
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|allKeyCount
operator|/
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|allKeyList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|allKeyCount
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|allKeyTreeSet
init|=
operator|new
name|TreeSet
argument_list|<
name|Object
argument_list|>
argument_list|(
name|writableComparator
argument_list|)
decl_stmt|;
name|int
name|fillAllKeyCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fillAllKeyCount
operator|<
name|allKeyCount
condition|)
block|{
name|Object
name|object
decl_stmt|;
if|if
condition|(
name|isList
condition|)
block|{
name|WritableIntObjectInspector
name|writableOI
init|=
operator|(
name|WritableIntObjectInspector
operator|)
name|keyObjectInspector
decl_stmt|;
name|int
name|index
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|keyCount
argument_list|)
decl_stmt|;
name|object
operator|=
name|writableOI
operator|.
name|create
argument_list|(
name|index
argument_list|)
expr_stmt|;
while|while
condition|(
name|allKeyTreeSet
operator|.
name|contains
argument_list|(
name|object
argument_list|)
condition|)
block|{
name|index
operator|=
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
operator|.
name|nextInt
argument_list|()
else|:
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|-
literal|1
else|:
name|keyCount
operator|)
operator|)
expr_stmt|;
name|object
operator|=
name|writableOI
operator|.
name|create
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
do|do
block|{
name|object
operator|=
name|VectorRandomRowSource
operator|.
name|randomWritable
argument_list|(
name|random
argument_list|,
name|keyTypeInfo
argument_list|,
name|keyObjectInspector
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|,
comment|/* allowNull */
literal|false
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|allKeyTreeSet
operator|.
name|contains
argument_list|(
name|object
argument_list|)
condition|)
do|;
block|}
name|allKeyList
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|allKeyTreeSet
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|fillAllKeyCount
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|keyList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|keyTreeSet
init|=
operator|new
name|TreeSet
argument_list|<
name|Object
argument_list|>
argument_list|(
name|writableComparator
argument_list|)
decl_stmt|;
name|int
name|fillKeyCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fillKeyCount
operator|<
name|keyCount
condition|)
block|{
name|Object
name|newKey
init|=
name|allKeyList
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|allKeyCount
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyTreeSet
operator|.
name|contains
argument_list|(
name|newKey
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|keyList
operator|.
name|add
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
name|keyTreeSet
operator|.
name|add
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
name|fillKeyCount
operator|++
expr_stmt|;
block|}
comment|//----------------------------------------------------------------------------------------------
specifier|final
name|TypeInfo
name|typeInfo
decl_stmt|;
if|if
condition|(
name|isList
condition|)
block|{
name|ListTypeInfo
name|listTypeInfo
init|=
operator|new
name|ListTypeInfo
argument_list|()
decl_stmt|;
name|listTypeInfo
operator|.
name|setListElementTypeInfo
argument_list|(
name|elementTypeInfo
argument_list|)
expr_stmt|;
name|typeInfo
operator|=
name|listTypeInfo
expr_stmt|;
block|}
else|else
block|{
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|new
name|MapTypeInfo
argument_list|()
decl_stmt|;
name|mapTypeInfo
operator|.
name|setMapKeyTypeInfo
argument_list|(
name|keyTypeInfo
argument_list|)
expr_stmt|;
name|mapTypeInfo
operator|.
name|setMapValueTypeInfo
argument_list|(
name|elementTypeInfo
argument_list|)
expr_stmt|;
name|typeInfo
operator|=
name|mapTypeInfo
expr_stmt|;
block|}
specifier|final
name|String
name|typeName
init|=
name|typeInfo
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
specifier|final
name|ObjectInspector
name|objectInspector
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
comment|//----------------------------------------------------------------------------------------------
name|GenerationSpec
name|generationSpec
init|=
name|GenerationSpec
operator|.
name|createSameType
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|GenerationSpec
argument_list|>
name|generationSpecList
init|=
operator|new
name|ArrayList
argument_list|<
name|GenerationSpec
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
name|explicitDataTypePhysicalVariationList
init|=
operator|new
name|ArrayList
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|columnNum
init|=
literal|1
decl_stmt|;
name|ExprNodeDesc
name|keyColExpr
decl_stmt|;
if|if
condition|(
operator|!
name|isScalarIndex
condition|)
block|{
name|generationSpecList
operator|.
name|add
argument_list|(
name|GenerationSpec
operator|.
name|createValueList
argument_list|(
name|keyTypeInfo
argument_list|,
name|keyList
argument_list|)
argument_list|)
expr_stmt|;
name|explicitDataTypePhysicalVariationList
operator|.
name|add
argument_list|(
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|String
name|columnName
init|=
literal|"col"
operator|+
name|columnNum
operator|++
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|keyColExpr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|keyTypeInfo
argument_list|,
name|columnName
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|scalarWritable
init|=
name|keyList
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|keyCount
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|scalarObject
init|=
name|VectorRandomRowSource
operator|.
name|getNonWritableObject
argument_list|(
name|scalarWritable
argument_list|,
name|keyTypeInfo
argument_list|,
name|keyObjectInspector
argument_list|)
decl_stmt|;
name|keyColExpr
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|keyTypeInfo
argument_list|,
name|scalarObject
argument_list|)
expr_stmt|;
block|}
comment|/*     System.out.println("*DEBUG* typeName " + typeName);     System.out.println("*DEBUG* keyColExpr " + keyColExpr.toString());     System.out.println("*DEBUG* keyList " + keyList.toString());     System.out.println("*DEBUG* allKeyList " + allKeyList.toString());     */
name|generationSpecList
operator|.
name|add
argument_list|(
name|GenerationSpec
operator|.
name|createValueList
argument_list|(
name|typeInfo
argument_list|,
name|keyList
argument_list|)
argument_list|)
expr_stmt|;
name|explicitDataTypePhysicalVariationList
operator|.
name|add
argument_list|(
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|String
name|columnName
init|=
literal|"col"
operator|+
name|columnNum
operator|++
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|listOrMapColExpr
decl_stmt|;
name|listOrMapColExpr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|columnName
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|listOrMapColExpr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|keyColExpr
argument_list|)
expr_stmt|;
name|VectorRandomRowSource
name|rowSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|rowSource
operator|.
name|initGenerationSpecSchema
argument_list|(
name|random
argument_list|,
name|generationSpecList
argument_list|,
comment|/* maxComplexDepth */
literal|0
argument_list|,
comment|/* allowNull */
name|allowNulls
argument_list|,
name|explicitDataTypePhysicalVariationList
argument_list|)
expr_stmt|;
name|String
index|[]
name|columnNames
init|=
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Object
index|[]
index|[]
name|randomRows
init|=
name|rowSource
operator|.
name|randomRows
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|VectorRandomBatchSource
name|batchSource
init|=
name|VectorRandomBatchSource
operator|.
name|createInterestingBatches
argument_list|(
name|random
argument_list|,
name|rowSource
argument_list|,
name|randomRows
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFIndex
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|argumentOIs
init|=
operator|new
name|ObjectInspector
index|[
literal|2
index|]
decl_stmt|;
name|argumentOIs
index|[
literal|0
index|]
operator|=
name|objectInspector
expr_stmt|;
name|argumentOIs
index|[
literal|1
index|]
operator|=
name|keyObjectInspector
expr_stmt|;
specifier|final
name|ObjectInspector
name|outputObjectInspector
init|=
name|udf
operator|.
name|initialize
argument_list|(
name|argumentOIs
argument_list|)
decl_stmt|;
name|TypeInfo
name|outputTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|outputObjectInspector
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|elementTypeInfo
argument_list|,
name|udf
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"here"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|rowCount
init|=
name|randomRows
operator|.
name|length
decl_stmt|;
name|Object
index|[]
index|[]
name|resultObjectsArray
init|=
operator|new
name|Object
index|[
name|IndexTestMode
operator|.
name|count
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|IndexTestMode
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|resultObjects
init|=
operator|new
name|Object
index|[
name|rowCount
index|]
decl_stmt|;
name|resultObjectsArray
index|[
name|i
index|]
operator|=
name|resultObjects
expr_stmt|;
name|IndexTestMode
name|indexTestMode
init|=
name|IndexTestMode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|indexTestMode
condition|)
block|{
case|case
name|ROW_MODE
case|:
if|if
condition|(
operator|!
name|doRowCastTest
argument_list|(
name|typeInfo
argument_list|,
name|columns
argument_list|,
name|children
argument_list|,
name|udf
argument_list|,
name|exprDesc
argument_list|,
name|randomRows
argument_list|,
name|rowSource
operator|.
name|rowStructObjectInspector
argument_list|()
argument_list|,
name|elementObjectInspector
argument_list|,
name|outputTypeInfo
argument_list|,
name|resultObjects
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
name|ADAPTOR
case|:
case|case
name|VECTOR_EXPRESSION
case|:
if|if
condition|(
operator|!
name|doVectorCastTest
argument_list|(
name|typeInfo
argument_list|,
name|columns
argument_list|,
name|columnNames
argument_list|,
name|rowSource
operator|.
name|typeInfos
argument_list|()
argument_list|,
name|rowSource
operator|.
name|dataTypePhysicalVariations
argument_list|()
argument_list|,
name|children
argument_list|,
name|udf
argument_list|,
name|exprDesc
argument_list|,
name|indexTestMode
argument_list|,
name|batchSource
argument_list|,
name|exprDesc
operator|.
name|getWritableObjectInspector
argument_list|()
argument_list|,
name|outputTypeInfo
argument_list|,
name|resultObjects
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected IF statement test mode "
operator|+
name|indexTestMode
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
name|i
operator|++
control|)
block|{
comment|// Row-mode is the expected value.
name|Object
name|expectedResult
init|=
name|resultObjectsArray
index|[
literal|0
index|]
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|1
init|;
name|v
operator|<
name|IndexTestMode
operator|.
name|count
condition|;
name|v
operator|++
control|)
block|{
name|Object
name|vectorResult
init|=
name|resultObjectsArray
index|[
name|v
index|]
index|[
name|i
index|]
decl_stmt|;
name|IndexTestMode
name|indexTestMode
init|=
name|IndexTestMode
operator|.
name|values
argument_list|()
index|[
name|v
index|]
decl_stmt|;
if|if
condition|(
name|expectedResult
operator|==
literal|null
operator|||
name|vectorResult
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|expectedResult
operator|!=
literal|null
operator|||
name|vectorResult
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Row "
operator|+
name|i
operator|+
literal|" sourceTypeName "
operator|+
name|typeName
operator|+
literal|" "
operator|+
name|indexTestMode
operator|+
literal|" result is NULL "
operator|+
operator|(
name|vectorResult
operator|==
literal|null
condition|?
literal|"YES"
else|:
literal|"NO result "
operator|+
name|vectorResult
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" does not match row-mode expected result is NULL "
operator|+
operator|(
name|expectedResult
operator|==
literal|null
condition|?
literal|"YES"
else|:
literal|"NO result "
operator|+
name|expectedResult
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" row values "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|randomRows
index|[
name|i
index|]
argument_list|)
operator|+
literal|" exprDesc "
operator|+
name|exprDesc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|expectedResult
operator|.
name|equals
argument_list|(
name|vectorResult
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Row "
operator|+
name|i
operator|+
literal|" sourceTypeName "
operator|+
name|typeName
operator|+
literal|" "
operator|+
name|indexTestMode
operator|+
literal|" result "
operator|+
name|vectorResult
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|vectorResult
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")"
operator|+
literal|" does not match row-mode expected result "
operator|+
name|expectedResult
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|expectedResult
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")"
operator|+
literal|" row values "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|randomRows
index|[
name|i
index|]
argument_list|)
operator|+
literal|" exprDesc "
operator|+
name|exprDesc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|doRowCastTest
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|,
name|GenericUDF
name|udf
parameter_list|,
name|ExprNodeGenericFuncDesc
name|exprDesc
parameter_list|,
name|Object
index|[]
index|[]
name|randomRows
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|ObjectInspector
name|elementObjectInspector
parameter_list|,
name|TypeInfo
name|outputTypeInfo
parameter_list|,
name|Object
index|[]
name|resultObjects
parameter_list|)
throws|throws
name|Exception
block|{
comment|/*     System.out.println(         "*DEBUG* typeInfo " + typeInfo.toString() +         " outputTypeInfo " + outputTypeInfo.toString() +         " indexTestMode ROW_MODE" +         " exprDesc " + exprDesc.toString());     */
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|ExprNodeEvaluator
name|evaluator
init|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
try|try
block|{
name|evaluator
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|rowCount
init|=
name|randomRows
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|randomRows
index|[
name|i
index|]
decl_stmt|;
name|Object
name|result
init|=
name|evaluator
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Object
name|copyResult
decl_stmt|;
try|try
block|{
name|copyResult
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|result
argument_list|,
name|elementObjectInspector
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"here"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|resultObjects
index|[
name|i
index|]
operator|=
name|copyResult
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|extractResultObjects
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|VectorExtractRow
name|resultVectorExtractRow
parameter_list|,
name|Object
index|[]
name|scrqtchRow
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|Object
index|[]
name|resultObjects
parameter_list|)
block|{
name|boolean
name|selectedInUse
init|=
name|batch
operator|.
name|selectedInUse
decl_stmt|;
name|int
index|[]
name|selected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
for|for
control|(
name|int
name|logicalIndex
init|=
literal|0
init|;
name|logicalIndex
operator|<
name|batch
operator|.
name|size
condition|;
name|logicalIndex
operator|++
control|)
block|{
specifier|final
name|int
name|batchIndex
init|=
operator|(
name|selectedInUse
condition|?
name|selected
index|[
name|logicalIndex
index|]
else|:
name|logicalIndex
operator|)
decl_stmt|;
name|resultVectorExtractRow
operator|.
name|extractRow
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|scrqtchRow
argument_list|)
expr_stmt|;
name|Object
name|copyResult
init|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|scrqtchRow
index|[
literal|0
index|]
argument_list|,
name|objectInspector
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
name|resultObjects
index|[
name|rowIndex
operator|++
index|]
operator|=
name|copyResult
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|doVectorCastTest
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|,
name|GenericUDF
name|udf
parameter_list|,
name|ExprNodeGenericFuncDesc
name|exprDesc
parameter_list|,
name|IndexTestMode
name|indexTestMode
parameter_list|,
name|VectorRandomBatchSource
name|batchSource
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|TypeInfo
name|outputTypeInfo
parameter_list|,
name|Object
index|[]
name|resultObjects
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexTestMode
operator|==
name|IndexTestMode
operator|.
name|ADAPTOR
condition|)
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_VECTOR_ADAPTOR_OVERRIDE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|VectorizationContext
name|vectorizationContext
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|typeInfos
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dataTypePhysicalVariations
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|VectorExpression
name|vectorExpression
init|=
name|vectorizationContext
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|transientInit
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexTestMode
operator|==
name|IndexTestMode
operator|.
name|VECTOR_EXPRESSION
operator|&&
name|vectorExpression
operator|instanceof
name|VectorUDFAdaptor
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*NO NATIVE VECTOR EXPRESSION* typeInfo "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|" indexTestMode "
operator|+
name|indexTestMode
operator|+
literal|" vectorExpression "
operator|+
name|vectorExpression
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*VECTOR EXPRESSION* "
operator|+
name|vectorExpression
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
comment|/*     System.out.println(         "*DEBUG* typeInfo " + typeInfo.toString() +         " indexTestMode " + indexTestMode +         " vectorExpression " + vectorExpression.toString());     */
name|VectorRandomRowSource
name|rowSource
init|=
name|batchSource
operator|.
name|getRowSource
argument_list|()
decl_stmt|;
name|VectorizedRowBatchCtx
name|batchContext
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|(
name|columnNames
argument_list|,
name|rowSource
operator|.
name|typeInfos
argument_list|()
argument_list|,
name|rowSource
operator|.
name|dataTypePhysicalVariations
argument_list|()
argument_list|,
comment|/* dataColumnNums */
literal|null
argument_list|,
comment|/* partitionColumnCount */
literal|0
argument_list|,
comment|/* virtualColumnCount */
literal|0
argument_list|,
comment|/* neededVirtualColumns */
literal|null
argument_list|,
name|vectorizationContext
operator|.
name|getScratchColumnTypeNames
argument_list|()
argument_list|,
name|vectorizationContext
operator|.
name|getScratchDataTypePhysicalVariations
argument_list|()
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|batchContext
operator|.
name|createVectorizedRowBatch
argument_list|()
decl_stmt|;
name|VectorExtractRow
name|resultVectorExtractRow
init|=
operator|new
name|VectorExtractRow
argument_list|()
decl_stmt|;
name|resultVectorExtractRow
operator|.
name|init
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|outputTypeInfo
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|vectorExpression
operator|.
name|getOutputColumnNum
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Object
index|[]
name|scrqtchRow
init|=
operator|new
name|Object
index|[
literal|1
index|]
decl_stmt|;
comment|/*     System.out.println(         "*DEBUG* typeInfo1 " + typeInfo1.toString() +         " typeInfo2 " + typeInfo2.toString() +         " arithmeticTestMode " + arithmeticTestMode +         " columnScalarMode " + columnScalarMode +         " vectorExpression " + vectorExpression.toString());     */
name|batchSource
operator|.
name|resetBatchIteration
argument_list|()
expr_stmt|;
name|int
name|rowIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|batchSource
operator|.
name|fillNextBatch
argument_list|(
name|batch
argument_list|)
condition|)
block|{
break|break;
block|}
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|extractResultObjects
argument_list|(
name|batch
argument_list|,
name|rowIndex
argument_list|,
name|resultVectorExtractRow
argument_list|,
name|scrqtchRow
argument_list|,
name|objectInspector
argument_list|,
name|resultObjects
argument_list|)
expr_stmt|;
name|rowIndex
operator|+=
name|batch
operator|.
name|size
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

