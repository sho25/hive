begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2016 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PositionedReadable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|FileFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
specifier|public
class|class
name|TestReaderImpl
block|{
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"test-file.orc"
argument_list|)
decl_stmt|;
specifier|private
name|FSDataInputStream
name|in
decl_stmt|;
specifier|private
name|int
name|psLen
decl_stmt|;
specifier|private
name|ByteBuffer
name|buffer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|in
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnsureOrcFooterSmallTextFile
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareTestCase
argument_list|(
literal|"1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|FileFormatException
operator|.
name|class
argument_list|)
expr_stmt|;
name|ReaderImpl
operator|.
name|ensureOrcFooter
argument_list|(
name|in
argument_list|,
name|path
argument_list|,
name|psLen
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnsureOrcFooterLargeTextFile
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareTestCase
argument_list|(
literal|"This is Some Text File"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|FileFormatException
operator|.
name|class
argument_list|)
expr_stmt|;
name|ReaderImpl
operator|.
name|ensureOrcFooter
argument_list|(
name|in
argument_list|,
name|path
argument_list|,
name|psLen
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnsureOrcFooter011ORCFile
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareTestCase
argument_list|(
name|composeContent
argument_list|(
name|OrcFile
operator|.
name|MAGIC
argument_list|,
literal|"FOOTER"
argument_list|)
argument_list|)
expr_stmt|;
name|ReaderImpl
operator|.
name|ensureOrcFooter
argument_list|(
name|in
argument_list|,
name|path
argument_list|,
name|psLen
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnsureOrcFooterCorrectORCFooter
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareTestCase
argument_list|(
name|composeContent
argument_list|(
literal|""
argument_list|,
name|OrcFile
operator|.
name|MAGIC
argument_list|)
argument_list|)
expr_stmt|;
name|ReaderImpl
operator|.
name|ensureOrcFooter
argument_list|(
name|in
argument_list|,
name|path
argument_list|,
name|psLen
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|prepareTestCase
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|buffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|psLen
operator|=
name|buffer
operator|.
name|get
argument_list|(
name|bytes
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|&
literal|0xff
expr_stmt|;
name|in
operator|=
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|SeekableByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|composeContent
parameter_list|(
name|String
name|headerStr
parameter_list|,
name|String
name|footerStr
parameter_list|)
throws|throws
name|CharacterCodingException
block|{
name|ByteBuffer
name|header
init|=
name|Text
operator|.
name|encode
argument_list|(
name|headerStr
argument_list|)
decl_stmt|;
name|ByteBuffer
name|footer
init|=
name|Text
operator|.
name|encode
argument_list|(
name|footerStr
argument_list|)
decl_stmt|;
name|int
name|headerLen
init|=
name|header
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|int
name|footerLen
init|=
name|footer
operator|.
name|remaining
argument_list|()
operator|+
literal|1
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|headerLen
operator|+
name|footerLen
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|footer
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|footerLen
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|array
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SeekableByteArrayInputStream
extends|extends
name|ByteArrayInputStream
implements|implements
name|Seekable
implements|,
name|PositionedReadable
block|{
specifier|public
name|SeekableByteArrayInputStream
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|super
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|skip
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|oldPos
init|=
name|getPos
argument_list|()
decl_stmt|;
name|int
name|nread
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|nread
operator|=
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|seek
argument_list|(
name|oldPos
argument_list|)
expr_stmt|;
block|}
return|return
name|nread
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nread
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nread
operator|<
name|length
condition|)
block|{
name|int
name|nbytes
init|=
name|read
argument_list|(
name|position
operator|+
name|nread
argument_list|,
name|buffer
argument_list|,
name|offset
operator|+
name|nread
argument_list|,
name|length
operator|-
name|nread
argument_list|)
decl_stmt|;
if|if
condition|(
name|nbytes
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"End of file reached before reading fully."
argument_list|)
throw|;
block|}
name|nread
operator|+=
name|nbytes
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|readFully
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

