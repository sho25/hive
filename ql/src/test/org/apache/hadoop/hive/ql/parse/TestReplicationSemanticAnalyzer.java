begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|runners
operator|.
name|Enclosed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Enclosed
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestReplicationSemanticAnalyzer
block|{
specifier|private
specifier|static
name|ParseDriver
name|driver
init|=
operator|new
name|ParseDriver
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ASTNode
name|parse
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
operator|(
name|ASTNode
operator|)
name|driver
operator|.
name|parse
argument_list|(
name|command
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertWithClause
parameter_list|(
name|ASTNode
name|root
parameter_list|,
name|int
name|replConfigIndex
parameter_list|)
block|{
name|ASTNode
name|replConfig
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
name|replConfigIndex
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_REPL_CONFIG"
argument_list|,
name|replConfig
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|replConfig
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|replConfigList
init|=
operator|(
name|ASTNode
operator|)
name|replConfig
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_REPL_CONFIG_LIST"
argument_list|,
name|replConfigList
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|replConfigList
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfig
argument_list|(
name|replConfigList
argument_list|,
literal|0
argument_list|,
literal|"'key.1'"
argument_list|,
literal|"'value.1'"
argument_list|)
expr_stmt|;
name|assertConfig
argument_list|(
name|replConfigList
argument_list|,
literal|1
argument_list|,
literal|"'key.2'"
argument_list|,
literal|"'value.2'"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertConfig
parameter_list|(
name|ASTNode
name|replConfigList
parameter_list|,
name|int
name|atIndex
parameter_list|,
name|String
name|expectedKey
parameter_list|,
name|String
name|expectedValue
parameter_list|)
block|{
name|ASTNode
name|configOne
init|=
operator|(
name|ASTNode
operator|)
name|replConfigList
operator|.
name|getChild
argument_list|(
name|atIndex
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_TABLEPROPERTY"
argument_list|,
name|configOne
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configOne
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
argument_list|,
name|configOne
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|configOne
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertToEventId
parameter_list|(
name|ASTNode
name|fromClauseRootNode
parameter_list|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|fromClauseRootNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_TO"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|=
operator|(
name|ASTNode
operator|)
name|fromClauseRootNode
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"200"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ASTNode
name|assertFromEvent
parameter_list|(
specifier|final
name|int
name|expectedNumberOfChildren
parameter_list|,
name|ASTNode
name|root
parameter_list|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_FROM"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|,
name|expectedNumberOfChildren
argument_list|)
expr_stmt|;
name|ASTNode
name|fromClauseChild
init|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"100"
argument_list|,
name|fromClauseChild
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fromClauseChild
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|private
specifier|static
name|void
name|assertTableName
parameter_list|(
name|ASTNode
name|root
parameter_list|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_REPL_TABLES"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'test_table'"
argument_list|,
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertDatabase
parameter_list|(
specifier|final
name|int
name|expectedNumberOfChildren
parameter_list|,
name|ASTNode
name|root
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"TOK_REPL_DUMP"
argument_list|,
name|root
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumberOfChildren
argument_list|,
name|root
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testDb"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|ReplDump
block|{
annotation|@
name|Test
specifier|public
name|void
name|parseDbPattern
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl dump `*`"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_REPL_DUMP"
argument_list|,
name|root
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|root
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"`*`"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseDb
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl dump testDb"
argument_list|)
decl_stmt|;
name|assertDatabase
argument_list|(
literal|1
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseTableName
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl dump testDb.'test_table'"
argument_list|)
decl_stmt|;
name|assertDatabase
argument_list|(
literal|2
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertTableName
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ReplDumpWithClause
block|{
annotation|@
name|Test
specifier|public
name|void
name|parseDb
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl dump testDb with ('key.1'='value.1','key.2'='value.2')"
argument_list|)
decl_stmt|;
name|assertDatabase
argument_list|(
literal|2
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertWithClause
argument_list|(
name|root
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseTableName
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl dump testDb.'test_table' with ('key.1'='value.1','key.2'='value.2')"
argument_list|)
decl_stmt|;
name|assertDatabase
argument_list|(
literal|3
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertTableName
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertWithClause
argument_list|(
name|root
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ReplLoad
block|{
annotation|@
name|Test
specifier|public
name|void
name|parseFromLocation
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl load testDbName"
argument_list|)
decl_stmt|;
name|assertFromLocation
argument_list|(
literal|1
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseTargetDbName
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl load testDbName into targetTestDbName"
argument_list|)
decl_stmt|;
name|assertFromLocation
argument_list|(
literal|2
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertTargetDatabaseName
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseWithClause
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl load testDbName into targetTestDbName"
operator|+
literal|" with ('mapred.job.queue.name'='repl','hive.repl.approx.max.load.tasks'='100')"
argument_list|)
decl_stmt|;
name|assertFromLocation
argument_list|(
literal|3
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertTargetDatabaseName
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_REPL_CONFIG"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_REPL_CONFIG_LIST"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|configNode
init|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_TABLEPROPERTY"
argument_list|,
name|configNode
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configNode
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'mapred.job.queue.name'"
argument_list|,
name|configNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'repl'"
argument_list|,
name|configNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|configNode
operator|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_TABLEPROPERTY"
argument_list|,
name|configNode
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configNode
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'hive.repl.approx.max.load.tasks'"
argument_list|,
name|configNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'100'"
argument_list|,
name|configNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertFromLocation
parameter_list|(
specifier|final
name|int
name|expectedNumberOfChildren
parameter_list|,
name|ASTNode
name|root
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"TOK_REPL_LOAD"
argument_list|,
name|root
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumberOfChildren
argument_list|,
name|root
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testDbName"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTargetDatabaseName
parameter_list|(
name|ASTNode
name|root
parameter_list|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_DBNAME"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"targetTestDbName"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ReplStatus
block|{
annotation|@
name|Test
specifier|public
name|void
name|parseTargetDbName
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl status targetTestDbName"
argument_list|)
decl_stmt|;
name|assertTargetDatabaseName
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseWithClause
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTNode
name|root
init|=
name|parse
argument_list|(
literal|"repl status targetTestDbName with"
operator|+
literal|"('hive.metastore.uris'='thrift://localhost:12341')"
argument_list|)
decl_stmt|;
name|assertTargetDatabaseName
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_REPL_CONFIG"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_REPL_CONFIG_LIST"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|configNode
init|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOK_TABLEPROPERTY"
argument_list|,
name|configNode
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configNode
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'hive.metastore.uris'"
argument_list|,
name|configNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'thrift://localhost:12341'"
argument_list|,
name|configNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTargetDatabaseName
parameter_list|(
name|ASTNode
name|root
parameter_list|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"targetTestDbName"
argument_list|,
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

