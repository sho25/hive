begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DynamicPartitionCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsCollectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Tests for {@link org.apache.hadoop.hive.ql.exec.FileSinkOperator}  */
end_comment

begin_class
specifier|public
class|class
name|TestFileSinkOperator
block|{
specifier|private
specifier|static
name|String
name|PARTCOL_NAME
init|=
literal|"partval"
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFileSinkOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|File
name|tmpdir
decl_stmt|;
specifier|private
specifier|static
name|TableDesc
name|nonAcidTableDescriptor
decl_stmt|;
specifier|private
specifier|static
name|TableDesc
name|acidTableDescriptor
decl_stmt|;
specifier|private
specifier|static
name|ObjectInspector
name|inspector
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Row
argument_list|>
name|rows
decl_stmt|;
specifier|private
name|Path
name|basePath
decl_stmt|;
specifier|private
name|JobConf
name|jc
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classSetup
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|TFSOSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|hive_metastoreConstants
operator|.
name|META_TABLE_NAME
argument_list|,
literal|"tfs"
argument_list|)
expr_stmt|;
name|nonAcidTableDescriptor
operator|=
operator|new
name|TableDesc
argument_list|(
name|TFSOInputFormat
operator|.
name|class
argument_list|,
name|TFSOOutputFormat
operator|.
name|class
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
name|properties
operator|=
operator|new
name|Properties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|hive_metastoreConstants
operator|.
name|BUCKET_COUNT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|acidTableDescriptor
operator|=
operator|new
name|TableDesc
argument_list|(
name|TFSOInputFormat
operator|.
name|class
argument_list|,
name|TFSOOutputFormat
operator|.
name|class
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|tmpdir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
literal|"testFileSinkOperator"
argument_list|)
expr_stmt|;
name|tmpdir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|tmpdir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonAcidWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|setBasePath
argument_list|(
literal|"write"
argument_list|)
expr_stmt|;
name|setupData
argument_list|(
name|DataFormat
operator|.
name|WITH_PARTITION_VALUE
argument_list|)
expr_stmt|;
name|FileSinkOperator
name|op
init|=
name|getFileSink
argument_list|(
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|processRows
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|confirmOutput
argument_list|(
name|DataFormat
operator|.
name|WITH_PARTITION_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|setBasePath
argument_list|(
literal|"insert"
argument_list|)
expr_stmt|;
name|setupData
argument_list|(
name|DataFormat
operator|.
name|WITH_PARTITION_VALUE
argument_list|)
expr_stmt|;
name|FileSinkOperator
name|op
init|=
name|getFileSink
argument_list|(
name|AcidUtils
operator|.
name|Operation
operator|.
name|INSERT
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|processRows
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|TFSOStatsPublisher
operator|.
name|stats
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|confirmOutput
argument_list|(
name|DataFormat
operator|.
name|WITH_PARTITION_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|setBasePath
argument_list|(
literal|"update"
argument_list|)
expr_stmt|;
name|setupData
argument_list|(
name|DataFormat
operator|.
name|WITH_RECORD_ID
argument_list|)
expr_stmt|;
name|FileSinkOperator
name|op
init|=
name|getFileSink
argument_list|(
name|AcidUtils
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|processRows
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|TFSOStatsPublisher
operator|.
name|stats
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|confirmOutput
argument_list|(
name|DataFormat
operator|.
name|WITH_RECORD_ID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|setBasePath
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
name|setupData
argument_list|(
name|DataFormat
operator|.
name|WITH_RECORD_ID
argument_list|)
expr_stmt|;
name|FileSinkOperator
name|op
init|=
name|getFileSink
argument_list|(
name|AcidUtils
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|processRows
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"-10"
argument_list|,
name|TFSOStatsPublisher
operator|.
name|stats
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|confirmOutput
argument_list|(
name|DataFormat
operator|.
name|WITH_RECORD_ID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonAcidDynamicPartitioning
parameter_list|()
throws|throws
name|Exception
block|{
name|setBasePath
argument_list|(
literal|"writeDP"
argument_list|)
expr_stmt|;
name|setupData
argument_list|(
name|DataFormat
operator|.
name|WITH_PARTITION_VALUE
argument_list|)
expr_stmt|;
name|FileSinkOperator
name|op
init|=
name|getFileSink
argument_list|(
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|processRows
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|confirmOutput
argument_list|(
name|DataFormat
operator|.
name|WITH_PARTITION_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertDynamicPartitioning
parameter_list|()
throws|throws
name|Exception
block|{
name|setBasePath
argument_list|(
literal|"insertDP"
argument_list|)
expr_stmt|;
name|setupData
argument_list|(
name|DataFormat
operator|.
name|WITH_PARTITION_VALUE
argument_list|)
expr_stmt|;
name|FileSinkOperator
name|op
init|=
name|getFileSink
argument_list|(
name|AcidUtils
operator|.
name|Operation
operator|.
name|INSERT
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|processRows
argument_list|(
name|op
argument_list|)
expr_stmt|;
comment|// We only expect 5 here because we'll get whichever of the partitions published its stats
comment|// last.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|TFSOStatsPublisher
operator|.
name|stats
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|confirmOutput
argument_list|(
name|DataFormat
operator|.
name|WITH_PARTITION_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateDynamicPartitioning
parameter_list|()
throws|throws
name|Exception
block|{
name|setBasePath
argument_list|(
literal|"updateDP"
argument_list|)
expr_stmt|;
name|setupData
argument_list|(
name|DataFormat
operator|.
name|WITH_RECORD_ID_AND_PARTITION_VALUE
argument_list|)
expr_stmt|;
name|FileSinkOperator
name|op
init|=
name|getFileSink
argument_list|(
name|AcidUtils
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|processRows
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|TFSOStatsPublisher
operator|.
name|stats
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|confirmOutput
argument_list|(
name|DataFormat
operator|.
name|WITH_RECORD_ID_AND_PARTITION_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteDynamicPartitioning
parameter_list|()
throws|throws
name|Exception
block|{
name|setBasePath
argument_list|(
literal|"deleteDP"
argument_list|)
expr_stmt|;
name|setupData
argument_list|(
name|DataFormat
operator|.
name|WITH_RECORD_ID
argument_list|)
expr_stmt|;
name|FileSinkOperator
name|op
init|=
name|getFileSink
argument_list|(
name|AcidUtils
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|processRows
argument_list|(
name|op
argument_list|)
expr_stmt|;
comment|// We only expect -5 here because we'll get whichever of the partitions published its stats
comment|// last.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"-5"
argument_list|,
name|TFSOStatsPublisher
operator|.
name|stats
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|confirmOutput
argument_list|(
name|DataFormat
operator|.
name|WITH_RECORD_ID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|jc
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|jc
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_DEFAULT_PUBLISHER
operator|.
name|varname
argument_list|,
name|TFSOStatsPublisher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jc
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_DEFAULT_AGGREGATOR
operator|.
name|varname
argument_list|,
name|TFSOStatsAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jc
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCLASS
operator|.
name|varname
argument_list|,
literal|"custom"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setBasePath
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|basePath
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
name|testName
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
enum|enum
name|DataFormat
block|{
name|WITH_RECORD_ID
block|,
name|WITH_PARTITION_VALUE
block|,
name|WITH_RECORD_ID_AND_PARTITION_VALUE
block|}
empty_stmt|;
specifier|private
name|void
name|setupData
parameter_list|(
name|DataFormat
name|format
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rType
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|WITH_PARTITION_VALUE
case|:
name|rType
operator|=
name|RowWithPartVal
operator|.
name|class
expr_stmt|;
break|break;
case|case
name|WITH_RECORD_ID
case|:
name|rType
operator|=
name|RowWithRecID
operator|.
name|class
expr_stmt|;
break|break;
case|case
name|WITH_RECORD_ID_AND_PARTITION_VALUE
case|:
name|rType
operator|=
name|RowWithPartNRecID
operator|.
name|class
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type"
argument_list|)
throw|;
block|}
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|rType
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|()
expr_stmt|;
name|Row
name|r
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|WITH_PARTITION_VALUE
case|:
name|r
operator|=
operator|new
name|RowWithPartVal
argument_list|(
operator|new
name|Text
argument_list|(
literal|"mary had a little lamb"
argument_list|)
argument_list|,
operator|(
name|i
operator|<
literal|5
operator|)
condition|?
operator|new
name|Text
argument_list|(
literal|"Monday"
argument_list|)
else|:
operator|new
name|Text
argument_list|(
literal|"Tuesday"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|WITH_RECORD_ID
case|:
name|r
operator|=
operator|new
name|RowWithRecID
argument_list|(
operator|new
name|RecordIdentifier
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|i
argument_list|)
argument_list|,
operator|(
name|i
operator|<
literal|5
operator|)
condition|?
operator|new
name|Text
argument_list|(
literal|"Monday"
argument_list|)
else|:
operator|new
name|Text
argument_list|(
literal|"Tuesday"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|WITH_RECORD_ID_AND_PARTITION_VALUE
case|:
name|r
operator|=
operator|new
name|RowWithPartNRecID
argument_list|(
operator|new
name|Text
argument_list|(
literal|"its fleect was white as snow"
argument_list|)
argument_list|,
operator|(
name|i
operator|<
literal|5
operator|)
condition|?
operator|new
name|Text
argument_list|(
literal|"Monday"
argument_list|)
else|:
operator|new
name|Text
argument_list|(
literal|"Tuesday"
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown data format"
argument_list|)
throw|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|FileSinkOperator
name|getFileSink
parameter_list|(
name|AcidUtils
operator|.
name|Operation
name|writeType
parameter_list|,
name|boolean
name|dynamic
parameter_list|,
name|long
name|txnId
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|TableDesc
name|tableDesc
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|writeType
condition|)
block|{
case|case
name|DELETE
case|:
case|case
name|UPDATE
case|:
case|case
name|INSERT
case|:
name|tableDesc
operator|=
name|acidTableDescriptor
expr_stmt|;
break|break;
case|case
name|NOT_ACID
case|:
name|tableDesc
operator|=
name|nonAcidTableDescriptor
expr_stmt|;
break|break;
block|}
name|FileSinkDesc
name|desc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dynamic
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|PARTCOL_NAME
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partColMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|partColMap
operator|.
name|put
argument_list|(
name|PARTCOL_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|DynamicPartitionCtx
name|dpCtx
init|=
operator|new
name|DynamicPartitionCtx
argument_list|(
literal|null
argument_list|,
name|partColMap
argument_list|,
literal|"Sunday"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|//todo: does this need the finalDestination?
name|desc
operator|=
operator|new
name|FileSinkDesc
argument_list|(
name|basePath
argument_list|,
name|tableDesc
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|partCols
argument_list|,
name|dpCtx
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|=
operator|new
name|FileSinkDesc
argument_list|(
name|basePath
argument_list|,
name|tableDesc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|desc
operator|.
name|setWriteType
argument_list|(
name|writeType
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setGatherStats
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|txnId
operator|>
literal|0
condition|)
name|desc
operator|.
name|setTransactionId
argument_list|(
name|txnId
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeType
operator|!=
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
condition|)
name|desc
operator|.
name|setTransactionId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|FileSinkOperator
name|op
init|=
operator|(
name|FileSinkOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|FileSinkDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|op
operator|.
name|setConf
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|op
operator|.
name|initialize
argument_list|(
name|jc
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|inspector
block|}
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
specifier|private
name|void
name|processRows
parameter_list|(
name|FileSinkOperator
name|op
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|Object
name|r
range|:
name|rows
control|)
name|op
operator|.
name|process
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|op
operator|.
name|jobCloseOp
argument_list|(
name|jc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|op
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|confirmOutput
parameter_list|(
name|DataFormat
name|rType
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
throws|,
name|CloneNotSupportedException
block|{
name|Path
index|[]
name|paths
init|=
name|findFilesInBasePath
argument_list|()
decl_stmt|;
name|TFSOInputFormat
name|input
init|=
operator|new
name|TFSOInputFormat
argument_list|(
name|rType
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jc
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|input
operator|.
name|getSplits
argument_list|(
name|jc
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|reader
init|=
name|input
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|jc
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|NullWritable
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Row
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|sortedRows
init|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|value
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|sortedRows
operator|.
name|add
argument_list|(
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedRows
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sortedRows
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Path
index|[]
name|findFilesInBasePath
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|basePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|last
init|=
name|basePath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"_tmp."
operator|+
name|last
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|basePath
operator|.
name|getFileSystem
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|recurseOnPath
argument_list|(
name|tmpPath
argument_list|,
name|fs
argument_list|,
name|paths
argument_list|)
expr_stmt|;
return|return
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
name|paths
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|recurseOnPath
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|stats
control|)
name|recurseOnPath
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|fs
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|Row
extends|extends
name|WritableComparable
argument_list|<
name|Row
argument_list|>
block|{
name|Row
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|RowWithRecID
implements|implements
name|Row
block|{
specifier|private
name|RecordIdentifier
name|recId
decl_stmt|;
specifier|private
name|Text
name|partVal
decl_stmt|;
specifier|public
name|RowWithRecID
parameter_list|()
block|{     }
specifier|public
name|RowWithRecID
parameter_list|(
name|RecordIdentifier
name|recId
parameter_list|,
name|Text
name|partVal
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|recId
operator|=
name|recId
expr_stmt|;
name|this
operator|.
name|partVal
operator|=
name|partVal
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Row
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
operator|new
name|RowWithRecID
argument_list|(
name|this
operator|.
name|recId
argument_list|,
name|this
operator|.
name|partVal
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|partVal
operator|==
literal|null
condition|)
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partVal
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recId
operator|==
literal|null
condition|)
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|recId
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|notNull
init|=
name|dataInput
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|notNull
condition|)
block|{
name|partVal
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partVal
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
name|notNull
operator|=
name|dataInput
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|notNull
condition|)
block|{
name|recId
operator|=
operator|new
name|RecordIdentifier
argument_list|()
expr_stmt|;
name|recId
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|RowWithRecID
name|other
init|=
operator|(
name|RowWithRecID
operator|)
name|row
decl_stmt|;
if|if
condition|(
name|recId
operator|==
literal|null
operator|&&
name|other
operator|.
name|recId
operator|==
literal|null
condition|)
block|{
return|return
name|comparePartVal
argument_list|(
name|other
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|recId
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|int
name|rc
init|=
name|recId
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|recId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
return|return
name|comparePartVal
argument_list|(
name|other
argument_list|)
return|;
else|else
return|return
name|rc
return|;
block|}
block|}
specifier|private
name|int
name|comparePartVal
parameter_list|(
name|RowWithRecID
name|other
parameter_list|)
block|{
return|return
name|partVal
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|partVal
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|RowWithRecID
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RowWithPartVal
implements|implements
name|Row
block|{
specifier|public
name|RowWithPartVal
parameter_list|(
name|Text
name|data
parameter_list|,
name|Text
name|partVal
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|partVal
operator|=
name|partVal
expr_stmt|;
block|}
specifier|public
name|RowWithPartVal
parameter_list|()
block|{     }
specifier|private
name|Text
name|data
decl_stmt|;
specifier|private
name|Text
name|partVal
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Row
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
operator|new
name|RowWithPartVal
argument_list|(
name|this
operator|.
name|data
argument_list|,
name|this
operator|.
name|partVal
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
if|if
condition|(
name|partVal
operator|==
literal|null
condition|)
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partVal
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|data
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|boolean
name|notNull
init|=
name|dataInput
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|notNull
condition|)
block|{
name|partVal
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partVal
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|RowWithPartVal
name|other
init|=
operator|(
name|RowWithPartVal
operator|)
name|row
decl_stmt|;
if|if
condition|(
name|partVal
operator|==
literal|null
operator|&&
name|other
operator|.
name|partVal
operator|==
literal|null
condition|)
block|{
return|return
name|compareData
argument_list|(
name|other
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|partVal
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|int
name|rc
init|=
name|partVal
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|partVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
return|return
name|compareData
argument_list|(
name|other
argument_list|)
return|;
else|else
return|return
name|rc
return|;
block|}
block|}
specifier|private
name|int
name|compareData
parameter_list|(
name|RowWithPartVal
name|other
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|&&
name|other
operator|.
name|data
operator|==
literal|null
condition|)
return|return
literal|0
return|;
elseif|else
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
name|data
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|RowWithPartVal
condition|)
block|{
name|RowWithPartVal
name|other
init|=
operator|(
name|RowWithPartVal
operator|)
name|obj
decl_stmt|;
return|return
name|compareTo
argument_list|(
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|RowWithPartNRecID
implements|implements
name|Row
block|{
specifier|private
name|RecordIdentifier
name|recId
decl_stmt|;
specifier|private
name|Text
name|data
decl_stmt|;
specifier|private
name|Text
name|partVal
decl_stmt|;
name|RowWithPartNRecID
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|RowWithPartNRecID
parameter_list|(
name|Text
name|t
parameter_list|,
name|Text
name|pv
parameter_list|,
name|RecordIdentifier
name|ri
parameter_list|)
block|{
name|data
operator|=
name|t
expr_stmt|;
name|partVal
operator|=
name|pv
expr_stmt|;
name|recId
operator|=
name|ri
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RowWithPartNRecID
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
operator|new
name|RowWithPartNRecID
argument_list|(
name|this
operator|.
name|data
argument_list|,
name|this
operator|.
name|partVal
argument_list|,
name|this
operator|.
name|recId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
if|if
condition|(
name|partVal
operator|==
literal|null
condition|)
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partVal
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recId
operator|==
literal|null
condition|)
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOutput
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|recId
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|data
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|boolean
name|notNull
init|=
name|dataInput
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|notNull
condition|)
block|{
name|partVal
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partVal
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
name|notNull
operator|=
name|dataInput
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|notNull
condition|)
block|{
name|recId
operator|=
operator|new
name|RecordIdentifier
argument_list|()
expr_stmt|;
name|recId
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|RowWithPartNRecID
condition|)
block|{
name|RowWithPartNRecID
name|other
init|=
operator|(
name|RowWithPartNRecID
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|&&
name|other
operator|.
name|data
operator|==
literal|null
condition|)
return|return
name|checkPartVal
argument_list|(
name|other
argument_list|)
return|;
elseif|else
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return
literal|false
return|;
elseif|else
if|if
condition|(
name|data
operator|.
name|equals
argument_list|(
name|other
operator|.
name|data
argument_list|)
condition|)
return|return
name|checkPartVal
argument_list|(
name|other
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|checkPartVal
parameter_list|(
name|RowWithPartNRecID
name|other
parameter_list|)
block|{
if|if
condition|(
name|partVal
operator|==
literal|null
operator|&&
name|other
operator|.
name|partVal
operator|==
literal|null
condition|)
return|return
name|checkRecId
argument_list|(
name|other
argument_list|)
return|;
elseif|else
if|if
condition|(
name|partVal
operator|==
literal|null
condition|)
return|return
literal|false
return|;
elseif|else
if|if
condition|(
name|partVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|partVal
argument_list|)
condition|)
return|return
name|checkRecId
argument_list|(
name|other
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkRecId
parameter_list|(
name|RowWithPartNRecID
name|other
parameter_list|)
block|{
if|if
condition|(
name|recId
operator|==
literal|null
operator|&&
name|other
operator|.
name|recId
operator|==
literal|null
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|recId
operator|==
literal|null
condition|)
return|return
literal|false
return|;
else|else
return|return
name|recId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|recId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|RowWithPartNRecID
name|other
init|=
operator|(
name|RowWithPartNRecID
operator|)
name|row
decl_stmt|;
if|if
condition|(
name|recId
operator|==
literal|null
operator|&&
name|other
operator|.
name|recId
operator|==
literal|null
condition|)
block|{
return|return
name|comparePartVal
argument_list|(
name|other
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|recId
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|int
name|rc
init|=
name|recId
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|recId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
return|return
name|comparePartVal
argument_list|(
name|other
argument_list|)
return|;
else|else
return|return
name|rc
return|;
block|}
block|}
specifier|private
name|int
name|comparePartVal
parameter_list|(
name|RowWithPartNRecID
name|other
parameter_list|)
block|{
if|if
condition|(
name|partVal
operator|==
literal|null
operator|&&
name|other
operator|.
name|partVal
operator|==
literal|null
condition|)
block|{
return|return
name|compareData
argument_list|(
name|other
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|partVal
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|int
name|rc
init|=
name|partVal
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|partVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
return|return
name|compareData
argument_list|(
name|other
argument_list|)
return|;
else|else
return|return
name|rc
return|;
block|}
block|}
specifier|private
name|int
name|compareData
parameter_list|(
name|RowWithPartNRecID
name|other
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|&&
name|other
operator|.
name|data
operator|==
literal|null
condition|)
return|return
literal|0
return|;
elseif|else
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
name|data
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|data
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TFSOInputFormat
extends|extends
name|FileInputFormat
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
implements|implements
name|AcidInputFormat
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
block|{
name|FSDataInputStream
name|in
index|[]
init|=
literal|null
decl_stmt|;
name|int
name|readingFrom
init|=
operator|-
literal|1
decl_stmt|;
name|DataFormat
name|rType
decl_stmt|;
specifier|public
name|TFSOInputFormat
parameter_list|(
name|DataFormat
name|rType
parameter_list|)
block|{
name|this
operator|.
name|rType
operator|=
name|rType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|inputSplit
parameter_list|,
name|JobConf
name|entries
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|Path
name|paths
index|[]
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|in
operator|=
operator|new
name|FSDataInputStream
index|[
name|paths
operator|.
name|length
index|]
expr_stmt|;
name|FileSystem
name|fs
init|=
name|paths
index|[
literal|0
index|]
operator|.
name|getFileSystem
argument_list|(
name|entries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|in
index|[
name|i
index|]
operator|=
name|fs
operator|.
name|open
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|readingFrom
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|new
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|nullWritable
parameter_list|,
name|Row
name|tfsoRecord
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|tfsoRecord
operator|.
name|readFields
argument_list|(
name|in
index|[
name|readingFrom
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|in
index|[
name|readingFrom
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|++
name|readingFrom
operator|>=
name|in
operator|.
name|length
condition|)
return|return
literal|false
return|;
else|else
return|return
name|next
argument_list|(
name|nullWritable
argument_list|,
name|tfsoRecord
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Row
name|createValue
parameter_list|()
block|{
switch|switch
condition|(
name|rType
condition|)
block|{
case|case
name|WITH_RECORD_ID_AND_PARTITION_VALUE
case|:
return|return
operator|new
name|RowWithPartNRecID
argument_list|()
return|;
case|case
name|WITH_PARTITION_VALUE
case|:
return|return
operator|new
name|RowWithPartVal
argument_list|()
return|;
case|case
name|WITH_RECORD_ID
case|:
return|return
operator|new
name|RowWithRecID
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown row Type"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0L
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{          }
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0.0f
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|RowReader
argument_list|<
name|Row
argument_list|>
name|getReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RawReader
argument_list|<
name|Row
argument_list|>
name|getRawReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|collapseEvents
parameter_list|,
name|int
name|bucket
parameter_list|,
name|ValidTxnList
name|validTxnList
parameter_list|,
name|Path
name|baseDirectory
parameter_list|,
name|Path
index|[]
name|deltaDirectory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|validateInput
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TFSOOutputFormat
extends|extends
name|FileOutputFormat
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
implements|implements
name|AcidOutputFormat
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
block|{
name|List
argument_list|<
name|Row
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|numRecordsAdded
init|=
literal|0
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|RecordUpdater
name|getRecordUpdater
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RecordUpdater
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|insert
parameter_list|(
name|long
name|currentTransaction
parameter_list|,
name|Object
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|addRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|numRecordsAdded
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|long
name|currentTransaction
parameter_list|,
name|Object
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|addRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|currentTransaction
parameter_list|,
name|Object
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|addRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|numRecordsAdded
operator|--
expr_stmt|;
block|}
specifier|private
name|void
name|addRow
parameter_list|(
name|Object
name|row
parameter_list|)
block|{
assert|assert
name|row
operator|instanceof
name|Row
operator|:
literal|"Expected Row but got "
operator|+
name|row
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
assert|;
name|records
operator|.
name|add
argument_list|(
operator|(
name|Row
operator|)
name|row
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|options
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Writable
name|r
range|:
name|records
control|)
name|r
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|records
operator|.
name|clear
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getStats
parameter_list|()
block|{
name|SerDeStats
name|stats
init|=
operator|new
name|SerDeStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setRowCount
argument_list|(
name|numRecordsAdded
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileSinkOperator
operator|.
name|RecordWriter
name|getRawRecordWriter
parameter_list|(
name|Path
name|path
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileSinkOperator
operator|.
name|RecordWriter
name|getHiveRecordWriter
parameter_list|(
specifier|final
name|JobConf
name|jc
parameter_list|,
specifier|final
name|Path
name|finalOutPath
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileSinkOperator
operator|.
name|RecordWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|w
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|w
operator|instanceof
name|Row
argument_list|)
expr_stmt|;
name|records
operator|.
name|add
argument_list|(
operator|(
name|Row
operator|)
name|w
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
name|FileSystem
name|fs
init|=
name|finalOutPath
operator|.
name|getFileSystem
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|finalOutPath
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Writable
name|r
range|:
name|records
control|)
name|r
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|records
operator|.
name|clear
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordWriter
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|getRecordWriter
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|JobConf
name|entries
parameter_list|,
name|String
name|s
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|JobConf
name|entries
parameter_list|)
throws|throws
name|IOException
block|{      }
block|}
specifier|public
specifier|static
class|class
name|TFSOSerDe
extends|extends
name|AbstractSerDe
block|{
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{      }
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|RowWithPartNRecID
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
assert|assert
name|obj
operator|instanceof
name|Row
operator|:
literal|"Expected Row or decendent, got "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
assert|;
return|return
operator|(
name|Row
operator|)
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
assert|assert
name|blob
operator|instanceof
name|Row
operator|:
literal|"Expected Row or decendent, got "
operator|+
name|blob
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
assert|;
return|return
name|blob
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TFSOStatsPublisher
implements|implements
name|StatsPublisher
block|{
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stats
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|init
parameter_list|(
name|StatsCollectionContext
name|context
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|connect
parameter_list|(
name|StatsCollectionContext
name|context
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|publishStat
parameter_list|(
name|String
name|fileID
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stats
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|closeConnection
parameter_list|(
name|StatsCollectionContext
name|context
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TFSOStatsAggregator
implements|implements
name|StatsAggregator
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|connect
parameter_list|(
name|StatsCollectionContext
name|scc
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|aggregateStats
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|statType
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|closeConnection
parameter_list|(
name|StatsCollectionContext
name|scc
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

