begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestGenericUDFDateFormat.  */
end_comment

begin_class
specifier|public
class|class
name|TestGenericUDFDateFormat
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDateFormatStr
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFDateFormat
name|udf
init|=
operator|new
name|GenericUDFDateFormat
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|Text
name|fmtText
init|=
operator|new
name|Text
argument_list|(
literal|"EEEE"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|fmtText
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
comment|// date str
name|runAndVerifyStr
argument_list|(
literal|"2015-04-05"
argument_list|,
name|fmtText
argument_list|,
literal|"Sunday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-06"
argument_list|,
name|fmtText
argument_list|,
literal|"Monday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-07"
argument_list|,
name|fmtText
argument_list|,
literal|"Tuesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-08"
argument_list|,
name|fmtText
argument_list|,
literal|"Wednesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-09"
argument_list|,
name|fmtText
argument_list|,
literal|"Thursday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-10"
argument_list|,
name|fmtText
argument_list|,
literal|"Friday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-11"
argument_list|,
name|fmtText
argument_list|,
literal|"Saturday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-12"
argument_list|,
name|fmtText
argument_list|,
literal|"Sunday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// ts str
name|runAndVerifyStr
argument_list|(
literal|"2015-04-05 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Sunday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-06 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Monday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-07 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Tuesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-08 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Wednesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-09 10:30"
argument_list|,
name|fmtText
argument_list|,
literal|"Thursday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-10 10:30:45.123"
argument_list|,
name|fmtText
argument_list|,
literal|"Friday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-11T10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Saturday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-12 10"
argument_list|,
name|fmtText
argument_list|,
literal|"Sunday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrongDateStr
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFDateFormat
name|udf
init|=
operator|new
name|GenericUDFDateFormat
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|Text
name|fmtText
init|=
operator|new
name|Text
argument_list|(
literal|"EEEE"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|fmtText
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2016-02-30 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Tuesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2014-01-32"
argument_list|,
name|fmtText
argument_list|,
literal|"Saturday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"01/14/2014"
argument_list|,
name|fmtText
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|null
argument_list|,
name|fmtText
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateFormatDate
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFDateFormat
name|udf
init|=
operator|new
name|GenericUDFDateFormat
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
decl_stmt|;
name|Text
name|fmtText
init|=
operator|new
name|Text
argument_list|(
literal|"EEEE"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|fmtText
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyDate
argument_list|(
literal|"2015-04-05"
argument_list|,
name|fmtText
argument_list|,
literal|"Sunday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyDate
argument_list|(
literal|"2015-04-06"
argument_list|,
name|fmtText
argument_list|,
literal|"Monday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyDate
argument_list|(
literal|"2015-04-07"
argument_list|,
name|fmtText
argument_list|,
literal|"Tuesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyDate
argument_list|(
literal|"2015-04-08"
argument_list|,
name|fmtText
argument_list|,
literal|"Wednesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyDate
argument_list|(
literal|"2015-04-09"
argument_list|,
name|fmtText
argument_list|,
literal|"Thursday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyDate
argument_list|(
literal|"2015-04-10"
argument_list|,
name|fmtText
argument_list|,
literal|"Friday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyDate
argument_list|(
literal|"2015-04-11"
argument_list|,
name|fmtText
argument_list|,
literal|"Saturday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyDate
argument_list|(
literal|"2015-04-12"
argument_list|,
name|fmtText
argument_list|,
literal|"Sunday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateFormatTs
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFDateFormat
name|udf
init|=
operator|new
name|GenericUDFDateFormat
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
decl_stmt|;
name|Text
name|fmtText
init|=
operator|new
name|Text
argument_list|(
literal|"EEEE"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|fmtText
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyTs
argument_list|(
literal|"2015-04-08 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Wednesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyTs
argument_list|(
literal|"2015-04-05 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Sunday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyTs
argument_list|(
literal|"2015-04-06 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Monday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyTs
argument_list|(
literal|"2015-04-07 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Tuesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyTs
argument_list|(
literal|"2015-04-08 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Wednesday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyTs
argument_list|(
literal|"2015-04-09 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Thursday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyTs
argument_list|(
literal|"2015-04-10 10:30:45.123"
argument_list|,
name|fmtText
argument_list|,
literal|"Friday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyTs
argument_list|(
literal|"2015-04-11 10:30:45.123456789"
argument_list|,
name|fmtText
argument_list|,
literal|"Saturday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyTs
argument_list|(
literal|"2015-04-12 10:30:45"
argument_list|,
name|fmtText
argument_list|,
literal|"Sunday"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullFmt
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFDateFormat
name|udf
init|=
operator|new
name|GenericUDFDateFormat
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|Text
name|fmtText
init|=
literal|null
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|fmtText
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-05"
argument_list|,
name|fmtText
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrongFmt
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFDateFormat
name|udf
init|=
operator|new
name|GenericUDFDateFormat
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|Text
name|fmtText
init|=
operator|new
name|Text
argument_list|(
literal|"Q"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|fmtText
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"2015-04-05"
argument_list|,
name|fmtText
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJulianDates
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFDateFormat
name|udf
init|=
operator|new
name|GenericUDFDateFormat
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|Text
name|fmtText
init|=
operator|new
name|Text
argument_list|(
literal|"dd---MM--yyyy"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|fmtText
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"1001-01-05"
argument_list|,
name|fmtText
argument_list|,
literal|"05---01--1001"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerifyStr
parameter_list|(
name|String
name|str
parameter_list|,
name|Text
name|fmtText
parameter_list|,
name|String
name|expResult
parameter_list|,
name|GenericUDF
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|str
operator|!=
literal|null
condition|?
operator|new
name|Text
argument_list|(
name|str
argument_list|)
else|:
literal|null
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|fmtText
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|,
name|valueObj1
block|}
decl_stmt|;
name|Text
name|output
init|=
operator|(
name|Text
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"date_format() test "
argument_list|,
name|expResult
argument_list|,
name|output
operator|!=
literal|null
condition|?
name|output
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerifyDate
parameter_list|(
name|String
name|str
parameter_list|,
name|Text
name|fmtText
parameter_list|,
name|String
name|expResult
parameter_list|,
name|GenericUDF
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|str
operator|!=
literal|null
condition|?
operator|new
name|DateWritableV2
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
argument_list|)
else|:
literal|null
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|fmtText
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|,
name|valueObj1
block|}
decl_stmt|;
name|Text
name|output
init|=
operator|(
name|Text
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"date_format() test "
argument_list|,
name|expResult
argument_list|,
name|output
operator|!=
literal|null
condition|?
name|output
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerifyTs
parameter_list|(
name|String
name|str
parameter_list|,
name|Text
name|fmtText
parameter_list|,
name|String
name|expResult
parameter_list|,
name|GenericUDF
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|str
operator|!=
literal|null
condition|?
operator|new
name|TimestampWritableV2
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
argument_list|)
else|:
literal|null
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|fmtText
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|,
name|valueObj1
block|}
decl_stmt|;
name|Text
name|output
init|=
operator|(
name|Text
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"date_format() test "
argument_list|,
name|expResult
argument_list|,
name|output
operator|!=
literal|null
condition|?
name|output
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

