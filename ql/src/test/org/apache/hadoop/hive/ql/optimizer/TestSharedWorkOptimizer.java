begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
operator|.
name|ReducerTraits
operator|.
name|AUTOPARALLEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
operator|.
name|ReducerTraits
operator|.
name|FIXED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
operator|.
name|ReducerTraits
operator|.
name|UNIFORM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
operator|.
name|ReducerTraits
operator|.
name|UNSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestSharedWorkOptimizer
block|{
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|unset
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|UNSET
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|fixed
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|FIXED
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|uniform
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|UNIFORM
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|autoparallel
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|AUTOPARALLEL
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|uniformAutoparallel
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|UNIFORM
argument_list|,
name|AUTOPARALLEL
argument_list|)
decl_stmt|;
specifier|private
name|void
name|ensureDeduplicate
parameter_list|(
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|traits1
parameter_list|,
name|int
name|numReducers1
parameter_list|,
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|traits2
parameter_list|,
name|int
name|numReducers2
parameter_list|,
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|expectedTraits
parameter_list|,
name|int
name|expectedNumReducers
parameter_list|)
block|{
name|ReduceSinkDesc
name|rsConf1
decl_stmt|;
name|ReduceSinkDesc
name|rsConf2
decl_stmt|;
name|boolean
name|deduplicated
decl_stmt|;
name|rsConf1
operator|=
operator|new
name|ReduceSinkDesc
argument_list|()
expr_stmt|;
name|rsConf1
operator|.
name|setReducerTraits
argument_list|(
name|traits1
argument_list|)
expr_stmt|;
name|rsConf1
operator|.
name|setNumReducers
argument_list|(
name|numReducers1
argument_list|)
expr_stmt|;
name|rsConf2
operator|=
operator|new
name|ReduceSinkDesc
argument_list|()
expr_stmt|;
name|rsConf2
operator|.
name|setReducerTraits
argument_list|(
name|traits2
argument_list|)
expr_stmt|;
name|rsConf2
operator|.
name|setNumReducers
argument_list|(
name|numReducers2
argument_list|)
expr_stmt|;
name|deduplicated
operator|=
name|SharedWorkOptimizer
operator|.
name|deduplicateReduceTraits
argument_list|(
name|rsConf1
argument_list|,
name|rsConf2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deduplicated
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTraits
argument_list|,
name|rsConf1
operator|.
name|getReducerTraits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumReducers
argument_list|,
name|rsConf1
operator|.
name|getNumReducers
argument_list|()
argument_list|)
expr_stmt|;
name|rsConf1
operator|=
operator|new
name|ReduceSinkDesc
argument_list|()
expr_stmt|;
name|rsConf1
operator|.
name|setReducerTraits
argument_list|(
name|traits1
argument_list|)
expr_stmt|;
name|rsConf1
operator|.
name|setNumReducers
argument_list|(
name|numReducers1
argument_list|)
expr_stmt|;
name|rsConf2
operator|=
operator|new
name|ReduceSinkDesc
argument_list|()
expr_stmt|;
name|rsConf2
operator|.
name|setReducerTraits
argument_list|(
name|traits2
argument_list|)
expr_stmt|;
name|rsConf2
operator|.
name|setNumReducers
argument_list|(
name|numReducers2
argument_list|)
expr_stmt|;
name|deduplicated
operator|=
name|SharedWorkOptimizer
operator|.
name|deduplicateReduceTraits
argument_list|(
name|rsConf2
argument_list|,
name|rsConf1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deduplicated
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTraits
argument_list|,
name|rsConf2
operator|.
name|getReducerTraits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumReducers
argument_list|,
name|rsConf2
operator|.
name|getNumReducers
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|ensureNotDeduplicate
parameter_list|(
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|traits1
parameter_list|,
name|int
name|numReducers1
parameter_list|,
name|EnumSet
argument_list|<
name|ReduceSinkDesc
operator|.
name|ReducerTraits
argument_list|>
name|traits2
parameter_list|,
name|int
name|numReducers2
parameter_list|)
block|{
name|ReduceSinkDesc
name|rsConf1
decl_stmt|;
name|ReduceSinkDesc
name|rsConf2
decl_stmt|;
name|boolean
name|deduplicated
decl_stmt|;
name|rsConf1
operator|=
operator|new
name|ReduceSinkDesc
argument_list|()
expr_stmt|;
name|rsConf1
operator|.
name|setReducerTraits
argument_list|(
name|traits1
argument_list|)
expr_stmt|;
name|rsConf1
operator|.
name|setNumReducers
argument_list|(
name|numReducers1
argument_list|)
expr_stmt|;
name|rsConf2
operator|=
operator|new
name|ReduceSinkDesc
argument_list|()
expr_stmt|;
name|rsConf2
operator|.
name|setReducerTraits
argument_list|(
name|traits2
argument_list|)
expr_stmt|;
name|rsConf2
operator|.
name|setNumReducers
argument_list|(
name|numReducers2
argument_list|)
expr_stmt|;
name|deduplicated
operator|=
name|SharedWorkOptimizer
operator|.
name|deduplicateReduceTraits
argument_list|(
name|rsConf1
argument_list|,
name|rsConf2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|deduplicated
argument_list|)
expr_stmt|;
name|rsConf1
operator|=
operator|new
name|ReduceSinkDesc
argument_list|()
expr_stmt|;
name|rsConf1
operator|.
name|setReducerTraits
argument_list|(
name|traits1
argument_list|)
expr_stmt|;
name|rsConf1
operator|.
name|setNumReducers
argument_list|(
name|numReducers1
argument_list|)
expr_stmt|;
name|rsConf2
operator|=
operator|new
name|ReduceSinkDesc
argument_list|()
expr_stmt|;
name|rsConf2
operator|.
name|setReducerTraits
argument_list|(
name|traits2
argument_list|)
expr_stmt|;
name|rsConf2
operator|.
name|setNumReducers
argument_list|(
name|numReducers2
argument_list|)
expr_stmt|;
name|deduplicated
operator|=
name|SharedWorkOptimizer
operator|.
name|deduplicateReduceTraits
argument_list|(
name|rsConf1
argument_list|,
name|rsConf2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|deduplicated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeduplicate
parameter_list|()
block|{
comment|// UNSET
name|ensureDeduplicate
argument_list|(
name|unset
argument_list|,
literal|0
argument_list|,
name|unset
argument_list|,
literal|0
argument_list|,
name|unset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ensureDeduplicate
argument_list|(
name|unset
argument_list|,
literal|0
argument_list|,
name|fixed
argument_list|,
literal|1
argument_list|,
name|fixed
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ensureDeduplicate
argument_list|(
name|unset
argument_list|,
literal|0
argument_list|,
name|uniform
argument_list|,
literal|1
argument_list|,
name|uniform
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ensureDeduplicate
argument_list|(
name|unset
argument_list|,
literal|0
argument_list|,
name|autoparallel
argument_list|,
literal|1
argument_list|,
name|autoparallel
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ensureDeduplicate
argument_list|(
name|unset
argument_list|,
literal|0
argument_list|,
name|uniformAutoparallel
argument_list|,
literal|1
argument_list|,
name|uniformAutoparallel
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// FIXED
name|ensureDeduplicate
argument_list|(
name|fixed
argument_list|,
literal|1
argument_list|,
name|fixed
argument_list|,
literal|1
argument_list|,
name|fixed
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ensureNotDeduplicate
argument_list|(
name|fixed
argument_list|,
literal|1
argument_list|,
name|fixed
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ensureDeduplicate
argument_list|(
name|fixed
argument_list|,
literal|1
argument_list|,
name|uniform
argument_list|,
literal|1
argument_list|,
name|fixed
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ensureDeduplicate
argument_list|(
name|fixed
argument_list|,
literal|1
argument_list|,
name|autoparallel
argument_list|,
literal|2
argument_list|,
name|fixed
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ensureDeduplicate
argument_list|(
name|fixed
argument_list|,
literal|1
argument_list|,
name|uniformAutoparallel
argument_list|,
literal|2
argument_list|,
name|fixed
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// UNIFORM
name|ensureDeduplicate
argument_list|(
name|uniform
argument_list|,
literal|1
argument_list|,
name|uniform
argument_list|,
literal|2
argument_list|,
name|uniform
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ensureNotDeduplicate
argument_list|(
name|uniform
argument_list|,
literal|1
argument_list|,
name|autoparallel
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ensureDeduplicate
argument_list|(
name|uniform
argument_list|,
literal|1
argument_list|,
name|uniformAutoparallel
argument_list|,
literal|2
argument_list|,
name|uniform
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// AUTOPARALLEL
name|ensureDeduplicate
argument_list|(
name|autoparallel
argument_list|,
literal|1
argument_list|,
name|uniformAutoparallel
argument_list|,
literal|2
argument_list|,
name|autoparallel
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// UNIFORM and AUTOPARALLEL
name|ensureDeduplicate
argument_list|(
name|uniformAutoparallel
argument_list|,
literal|1
argument_list|,
name|uniformAutoparallel
argument_list|,
literal|2
argument_list|,
name|uniformAutoparallel
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

