begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|RecordConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|Types
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|OriginalType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
operator|.
name|PrimitiveTypeName
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestMapStructures
extends|extends
name|AbstractTestParquetDirect
block|{
annotation|@
name|Test
specifier|public
name|void
name|testStringMapRequiredPrimitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"StringMapRequiredPrimitive"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|MAP
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|required
argument_list|(
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|UTF8
argument_list|)
operator|.
name|named
argument_list|(
literal|"key"
argument_list|)
operator|.
name|required
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"key_value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"votes"
argument_list|)
operator|.
name|named
argument_list|(
literal|"StringMapRequiredPrimitive"
argument_list|)
argument_list|,
operator|new
name|TestArrayCompatibility
operator|.
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"votes"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"lettuce"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"cabbage"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|18
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"votes"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ArrayWritable
name|expected
init|=
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"lettuce"
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cabbage"
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|18
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deserialize
argument_list|(
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"votes"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map<string,int>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringMapOptionalPrimitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"StringMapOptionalPrimitive"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|MAP
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|required
argument_list|(
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|UTF8
argument_list|)
operator|.
name|named
argument_list|(
literal|"key"
argument_list|)
operator|.
name|optional
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"key_value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"votes"
argument_list|)
operator|.
name|named
argument_list|(
literal|"StringMapOptionalPrimitive"
argument_list|)
argument_list|,
operator|new
name|TestArrayCompatibility
operator|.
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"votes"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"lettuce"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"kale"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// no value for kale
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"cabbage"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|18
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"votes"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ArrayWritable
name|expected
init|=
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"lettuce"
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"kale"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cabbage"
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|18
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deserialize
argument_list|(
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"votes"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map<string,int>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringMapOfOptionalArray
parameter_list|()
throws|throws
name|Exception
block|{
comment|// tests a multimap structure
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"StringMapOfOptionalArray"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|MAP
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|required
argument_list|(
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|UTF8
argument_list|)
operator|.
name|named
argument_list|(
literal|"key"
argument_list|)
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|optional
argument_list|(
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|UTF8
argument_list|)
operator|.
name|named
argument_list|(
literal|"element"
argument_list|)
operator|.
name|named
argument_list|(
literal|"list"
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"key_value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"examples"
argument_list|)
operator|.
name|named
argument_list|(
literal|"StringMapOfOptionalArray"
argument_list|)
argument_list|,
operator|new
name|TestArrayCompatibility
operator|.
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"examples"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"lettuce"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"kale"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// adds a null element
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"brown"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// no values array
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"examples"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ArrayWritable
name|expected
init|=
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"green"
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"lettuce"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kale"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"brown"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deserialize
argument_list|(
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"examples"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map<string,array<string>>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringMapOfOptionalIntArray
parameter_list|()
throws|throws
name|Exception
block|{
comment|// tests a multimap structure for PARQUET-26
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"StringMapOfOptionalIntArray"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|MAP
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|required
argument_list|(
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|UTF8
argument_list|)
operator|.
name|named
argument_list|(
literal|"key"
argument_list|)
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|optional
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"element"
argument_list|)
operator|.
name|named
argument_list|(
literal|"list"
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"key_value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"examples"
argument_list|)
operator|.
name|named
argument_list|(
literal|"StringMapOfOptionalIntArray"
argument_list|)
argument_list|,
operator|new
name|TestArrayCompatibility
operator|.
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"examples"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"low"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// adds a null element
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"high"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|340
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|360
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"examples"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ArrayWritable
name|expected
init|=
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"low"
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|34
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|35
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"high"
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|340
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|360
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deserialize
argument_list|(
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"examples"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map<string,array<int>>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapWithComplexKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"MapWithComplexKey"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|MAP
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|requiredGroup
argument_list|()
operator|.
name|required
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"x"
argument_list|)
operator|.
name|required
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"y"
argument_list|)
operator|.
name|named
argument_list|(
literal|"key"
argument_list|)
operator|.
name|optional
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"key_value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"matrix"
argument_list|)
operator|.
name|named
argument_list|(
literal|"MapWithComplexKey"
argument_list|)
argument_list|,
operator|new
name|TestArrayCompatibility
operator|.
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"matrix"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|22
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|3.14
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"matrix"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ArrayWritable
name|expected
init|=
name|list
argument_list|(
name|record
argument_list|(
name|record
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|22
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
literal|3.14
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deserialize
argument_list|(
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"matrix"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map<struct<x:int,y:int>,bigint>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleMapWithStructValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"DoubleMapWithStructValue"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|MAP
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|optional
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"key"
argument_list|)
operator|.
name|optionalGroup
argument_list|()
operator|.
name|required
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"x"
argument_list|)
operator|.
name|required
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"y"
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"key_value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"approx"
argument_list|)
operator|.
name|named
argument_list|(
literal|"DoubleMapWithStructValue"
argument_list|)
argument_list|,
operator|new
name|TestArrayCompatibility
operator|.
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"approx"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|3.14
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|22
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"approx"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ArrayWritable
name|expected
init|=
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|3.14
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|22
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deserialize
argument_list|(
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"approx"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map<bigint,struct<x:int,y:int>>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"DoubleMapWithStructValue"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|MAP
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|optional
argument_list|(
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|UTF8
argument_list|)
operator|.
name|named
argument_list|(
literal|"key"
argument_list|)
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|MAP
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|optional
argument_list|(
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|UTF8
argument_list|)
operator|.
name|named
argument_list|(
literal|"key"
argument_list|)
operator|.
name|required
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"key_value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"key_value"
argument_list|)
operator|.
name|named
argument_list|(
literal|"map_of_maps"
argument_list|)
operator|.
name|named
argument_list|(
literal|"NestedMap"
argument_list|)
argument_list|,
operator|new
name|TestArrayCompatibility
operator|.
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"map_of_maps"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"key_value"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"map_of_maps"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ArrayWritable
name|expected
init|=
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|record
argument_list|(
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|record
argument_list|(
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deserialize
argument_list|(
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map_of_maps"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map<string,map<string,int>>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

