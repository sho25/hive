begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udaf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFSum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|ISupportStreamingModeForWindowing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestStreamingSum
block|{
specifier|public
specifier|static
name|WindowFrameDef
name|wdwFrame
parameter_list|(
name|int
name|p
parameter_list|,
name|int
name|f
parameter_list|)
block|{
name|BoundaryDef
name|start
decl_stmt|,
name|end
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|0
condition|)
block|{
name|start
operator|=
operator|new
name|BoundaryDef
argument_list|(
name|Direction
operator|.
name|CURRENT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
operator|new
name|BoundaryDef
argument_list|(
name|Direction
operator|.
name|PRECEDING
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|==
literal|0
condition|)
block|{
name|end
operator|=
operator|new
name|BoundaryDef
argument_list|(
name|Direction
operator|.
name|CURRENT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
operator|new
name|BoundaryDef
argument_list|(
name|Direction
operator|.
name|FOLLOWING
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|WindowFrameDef
argument_list|(
name|WindowType
operator|.
name|ROWS
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
specifier|public
name|void
name|sumDouble
parameter_list|(
name|Iterator
argument_list|<
name|Double
argument_list|>
name|inVals
parameter_list|,
name|int
name|inSz
parameter_list|,
name|int
name|numPreceding
parameter_list|,
name|int
name|numFollowing
parameter_list|,
name|Iterator
argument_list|<
name|Double
argument_list|>
name|outVals
parameter_list|)
throws|throws
name|HiveException
block|{
name|GenericUDAFSum
name|fnR
init|=
operator|new
name|GenericUDAFSum
argument_list|()
decl_stmt|;
name|TypeInfo
index|[]
name|inputTypes
init|=
block|{
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
block|}
decl_stmt|;
name|ObjectInspector
index|[]
name|inputOIs
init|=
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
block|}
decl_stmt|;
name|DoubleWritable
index|[]
name|in
init|=
operator|new
name|DoubleWritable
index|[
literal|1
index|]
decl_stmt|;
name|in
index|[
literal|0
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
name|_agg
argument_list|(
name|fnR
argument_list|,
name|inputTypes
argument_list|,
name|inVals
argument_list|,
name|TypeHandler
operator|.
name|DoubleHandler
argument_list|,
name|in
argument_list|,
name|inputOIs
argument_list|,
name|inSz
argument_list|,
name|numPreceding
argument_list|,
name|numFollowing
argument_list|,
name|outVals
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sumLong
parameter_list|(
name|Iterator
argument_list|<
name|Long
argument_list|>
name|inVals
parameter_list|,
name|int
name|inSz
parameter_list|,
name|int
name|numPreceding
parameter_list|,
name|int
name|numFollowing
parameter_list|,
name|Iterator
argument_list|<
name|Long
argument_list|>
name|outVals
parameter_list|)
throws|throws
name|HiveException
block|{
name|GenericUDAFSum
name|fnR
init|=
operator|new
name|GenericUDAFSum
argument_list|()
decl_stmt|;
name|TypeInfo
index|[]
name|inputTypes
init|=
block|{
name|TypeInfoFactory
operator|.
name|longTypeInfo
block|}
decl_stmt|;
name|ObjectInspector
index|[]
name|inputOIs
init|=
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
block|}
decl_stmt|;
name|LongWritable
index|[]
name|in
init|=
operator|new
name|LongWritable
index|[
literal|1
index|]
decl_stmt|;
name|in
index|[
literal|0
index|]
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
name|_agg
argument_list|(
name|fnR
argument_list|,
name|inputTypes
argument_list|,
name|inVals
argument_list|,
name|TypeHandler
operator|.
name|LongHandler
argument_list|,
name|in
argument_list|,
name|inputOIs
argument_list|,
name|inSz
argument_list|,
name|numPreceding
argument_list|,
name|numFollowing
argument_list|,
name|outVals
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sumHiveDecimal
parameter_list|(
name|Iterator
argument_list|<
name|HiveDecimal
argument_list|>
name|inVals
parameter_list|,
name|int
name|inSz
parameter_list|,
name|int
name|numPreceding
parameter_list|,
name|int
name|numFollowing
parameter_list|,
name|Iterator
argument_list|<
name|HiveDecimal
argument_list|>
name|outVals
parameter_list|)
throws|throws
name|HiveException
block|{
name|GenericUDAFSum
name|fnR
init|=
operator|new
name|GenericUDAFSum
argument_list|()
decl_stmt|;
name|TypeInfo
index|[]
name|inputTypes
init|=
block|{
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
block|}
decl_stmt|;
name|ObjectInspector
index|[]
name|inputOIs
init|=
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|writableHiveDecimalObjectInspector
block|}
decl_stmt|;
name|HiveDecimalWritable
index|[]
name|in
init|=
operator|new
name|HiveDecimalWritable
index|[
literal|1
index|]
decl_stmt|;
name|in
index|[
literal|0
index|]
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
name|_agg
argument_list|(
name|fnR
argument_list|,
name|inputTypes
argument_list|,
name|inVals
argument_list|,
name|TypeHandler
operator|.
name|HiveDecimalHandler
argument_list|,
name|in
argument_list|,
name|inputOIs
argument_list|,
name|inSz
argument_list|,
name|numPreceding
argument_list|,
name|numFollowing
argument_list|,
name|outVals
argument_list|)
expr_stmt|;
block|}
specifier|static
interface|interface
name|TypeHandler
parameter_list|<
name|T
parameter_list|,
name|TW
parameter_list|>
block|{
specifier|public
name|void
name|set
parameter_list|(
name|T
name|i
parameter_list|,
name|TW
name|iw
parameter_list|)
function_decl|;
specifier|public
name|T
name|get
parameter_list|(
name|TW
name|iw
parameter_list|)
function_decl|;
name|TypeHandler
argument_list|<
name|Double
argument_list|,
name|DoubleWritable
argument_list|>
name|DoubleHandler
init|=
operator|new
name|TypeHandler
argument_list|<
name|Double
argument_list|,
name|DoubleWritable
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|set
parameter_list|(
name|Double
name|d
parameter_list|,
name|DoubleWritable
name|iw
parameter_list|)
block|{
name|iw
operator|.
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Double
name|get
parameter_list|(
name|DoubleWritable
name|iw
parameter_list|)
block|{
return|return
name|iw
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|TypeHandler
argument_list|<
name|Long
argument_list|,
name|LongWritable
argument_list|>
name|LongHandler
init|=
operator|new
name|TypeHandler
argument_list|<
name|Long
argument_list|,
name|LongWritable
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|set
parameter_list|(
name|Long
name|d
parameter_list|,
name|LongWritable
name|iw
parameter_list|)
block|{
name|iw
operator|.
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Long
name|get
parameter_list|(
name|LongWritable
name|iw
parameter_list|)
block|{
return|return
name|iw
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|TypeHandler
argument_list|<
name|HiveDecimal
argument_list|,
name|HiveDecimalWritable
argument_list|>
name|HiveDecimalHandler
init|=
operator|new
name|TypeHandler
argument_list|<
name|HiveDecimal
argument_list|,
name|HiveDecimalWritable
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|set
parameter_list|(
name|HiveDecimal
name|d
parameter_list|,
name|HiveDecimalWritable
name|iw
parameter_list|)
block|{
name|iw
operator|.
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveDecimal
name|get
parameter_list|(
name|HiveDecimalWritable
name|iw
parameter_list|)
block|{
return|return
name|iw
operator|.
name|getHiveDecimal
argument_list|()
return|;
block|}
block|}
decl_stmt|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TW
parameter_list|>
name|void
name|_agg
parameter_list|(
name|GenericUDAFResolver
name|fnR
parameter_list|,
name|TypeInfo
index|[]
name|inputTypes
parameter_list|,
name|Iterator
argument_list|<
name|T
argument_list|>
name|inVals
parameter_list|,
name|TypeHandler
argument_list|<
name|T
argument_list|,
name|TW
argument_list|>
name|typeHandler
parameter_list|,
name|TW
index|[]
name|in
parameter_list|,
name|ObjectInspector
index|[]
name|inputOIs
parameter_list|,
name|int
name|inSz
parameter_list|,
name|int
name|numPreceding
parameter_list|,
name|int
name|numFollowing
parameter_list|,
name|Iterator
argument_list|<
name|T
argument_list|>
name|outVals
parameter_list|)
throws|throws
name|HiveException
block|{
name|GenericUDAFEvaluator
name|fn
init|=
name|fnR
operator|.
name|getEvaluator
argument_list|(
name|inputTypes
argument_list|)
decl_stmt|;
name|fn
operator|.
name|init
argument_list|(
name|Mode
operator|.
name|COMPLETE
argument_list|,
name|inputOIs
argument_list|)
expr_stmt|;
name|fn
operator|=
name|fn
operator|.
name|getWindowingEvaluator
argument_list|(
name|wdwFrame
argument_list|(
name|numPreceding
argument_list|,
name|numFollowing
argument_list|)
argument_list|)
expr_stmt|;
name|AggregationBuffer
name|agg
init|=
name|fn
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
name|ISupportStreamingModeForWindowing
name|oS
init|=
operator|(
name|ISupportStreamingModeForWindowing
operator|)
name|fn
decl_stmt|;
name|int
name|outSz
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|inVals
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|typeHandler
operator|.
name|set
argument_list|(
name|inVals
operator|.
name|next
argument_list|()
argument_list|,
name|in
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fn
operator|.
name|aggregate
argument_list|(
name|agg
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|Object
name|out
init|=
name|oS
operator|.
name|getNextResult
argument_list|(
name|agg
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|out
operator|==
name|ISupportStreamingModeForWindowing
operator|.
name|NULL_RESULT
condition|)
block|{
name|out
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|out
operator|=
name|typeHandler
operator|.
name|get
argument_list|(
operator|(
name|TW
operator|)
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ce
parameter_list|)
block|{           }
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|out
argument_list|,
name|outVals
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|outSz
operator|++
expr_stmt|;
block|}
block|}
name|fn
operator|.
name|terminate
argument_list|(
name|agg
argument_list|)
expr_stmt|;
while|while
condition|(
name|outSz
operator|<
name|inSz
condition|)
block|{
name|Object
name|out
init|=
name|oS
operator|.
name|getNextResult
argument_list|(
name|agg
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
name|ISupportStreamingModeForWindowing
operator|.
name|NULL_RESULT
condition|)
block|{
name|out
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|out
operator|=
name|typeHandler
operator|.
name|get
argument_list|(
operator|(
name|TW
operator|)
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ce
parameter_list|)
block|{         }
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|out
argument_list|,
name|outVals
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|outSz
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble_3_4
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|,
literal|3.0
argument_list|,
literal|4.0
argument_list|,
literal|5.0
argument_list|,
literal|6.0
argument_list|,
literal|7.0
argument_list|,
literal|8.0
argument_list|,
literal|9.0
argument_list|,
literal|10.0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|15.0
argument_list|,
literal|21.0
argument_list|,
literal|28.0
argument_list|,
literal|36.0
argument_list|,
literal|44.0
argument_list|,
literal|52.0
argument_list|,
literal|49.0
argument_list|,
literal|45.0
argument_list|,
literal|40.0
argument_list|,
literal|34.0
argument_list|)
decl_stmt|;
name|sumDouble
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble_3_0
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|,
literal|3.0
argument_list|,
literal|4.0
argument_list|,
literal|5.0
argument_list|,
literal|6.0
argument_list|,
literal|7.0
argument_list|,
literal|8.0
argument_list|,
literal|9.0
argument_list|,
literal|10.0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|3.0
argument_list|,
literal|6.0
argument_list|,
literal|10.0
argument_list|,
literal|14.0
argument_list|,
literal|18.0
argument_list|,
literal|22.0
argument_list|,
literal|26.0
argument_list|,
literal|30.0
argument_list|,
literal|34.0
argument_list|)
decl_stmt|;
name|sumDouble
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble_unb_0
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|,
literal|3.0
argument_list|,
literal|4.0
argument_list|,
literal|5.0
argument_list|,
literal|6.0
argument_list|,
literal|7.0
argument_list|,
literal|8.0
argument_list|,
literal|9.0
argument_list|,
literal|10.0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|3.0
argument_list|,
literal|6.0
argument_list|,
literal|10.0
argument_list|,
literal|15.0
argument_list|,
literal|21.0
argument_list|,
literal|28.0
argument_list|,
literal|36.0
argument_list|,
literal|45.0
argument_list|,
literal|55.0
argument_list|)
decl_stmt|;
name|sumDouble
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|,
literal|0
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble_0_5
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|,
literal|3.0
argument_list|,
literal|4.0
argument_list|,
literal|5.0
argument_list|,
literal|6.0
argument_list|,
literal|7.0
argument_list|,
literal|8.0
argument_list|,
literal|9.0
argument_list|,
literal|10.0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|21.0
argument_list|,
literal|27.0
argument_list|,
literal|33.0
argument_list|,
literal|39.0
argument_list|,
literal|45.0
argument_list|,
literal|40.0
argument_list|,
literal|34.0
argument_list|,
literal|27.0
argument_list|,
literal|19.0
argument_list|,
literal|10.0
argument_list|)
decl_stmt|;
name|sumDouble
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble_unb_5
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|,
literal|3.0
argument_list|,
literal|4.0
argument_list|,
literal|5.0
argument_list|,
literal|6.0
argument_list|,
literal|7.0
argument_list|,
literal|8.0
argument_list|,
literal|9.0
argument_list|,
literal|10.0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|21.0
argument_list|,
literal|28.0
argument_list|,
literal|36.0
argument_list|,
literal|45.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|)
decl_stmt|;
name|sumDouble
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|,
literal|5
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble_7_2
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|,
literal|3.0
argument_list|,
literal|4.0
argument_list|,
literal|5.0
argument_list|,
literal|6.0
argument_list|,
literal|7.0
argument_list|,
literal|8.0
argument_list|,
literal|9.0
argument_list|,
literal|10.0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|6.0
argument_list|,
literal|10.0
argument_list|,
literal|15.0
argument_list|,
literal|21.0
argument_list|,
literal|28.0
argument_list|,
literal|36.0
argument_list|,
literal|45.0
argument_list|,
literal|55.0
argument_list|,
literal|54.0
argument_list|,
literal|52.0
argument_list|)
decl_stmt|;
name|sumDouble
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble_15_15
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|,
literal|3.0
argument_list|,
literal|4.0
argument_list|,
literal|5.0
argument_list|,
literal|6.0
argument_list|,
literal|7.0
argument_list|,
literal|8.0
argument_list|,
literal|9.0
argument_list|,
literal|10.0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|,
literal|55.0
argument_list|)
decl_stmt|;
name|sumDouble
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLong_3_4
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|5L
argument_list|,
literal|6L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|9L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|15L
argument_list|,
literal|21L
argument_list|,
literal|28L
argument_list|,
literal|36L
argument_list|,
literal|44L
argument_list|,
literal|52L
argument_list|,
literal|49L
argument_list|,
literal|45L
argument_list|,
literal|40L
argument_list|,
literal|34L
argument_list|)
decl_stmt|;
name|sumLong
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLong_3_0
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|5L
argument_list|,
literal|6L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|9L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|3L
argument_list|,
literal|6L
argument_list|,
literal|10L
argument_list|,
literal|14L
argument_list|,
literal|18L
argument_list|,
literal|22L
argument_list|,
literal|26L
argument_list|,
literal|30L
argument_list|,
literal|34L
argument_list|)
decl_stmt|;
name|sumLong
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLong_unb_0
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|5L
argument_list|,
literal|6L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|9L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|3L
argument_list|,
literal|6L
argument_list|,
literal|10L
argument_list|,
literal|15L
argument_list|,
literal|21L
argument_list|,
literal|28L
argument_list|,
literal|36L
argument_list|,
literal|45L
argument_list|,
literal|55L
argument_list|)
decl_stmt|;
name|sumLong
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|,
literal|0
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLong_0_5
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|5L
argument_list|,
literal|6L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|9L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|21L
argument_list|,
literal|27L
argument_list|,
literal|33L
argument_list|,
literal|39L
argument_list|,
literal|45L
argument_list|,
literal|40L
argument_list|,
literal|34L
argument_list|,
literal|27L
argument_list|,
literal|19L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|sumLong
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLong_unb_5
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|5L
argument_list|,
literal|6L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|9L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|21L
argument_list|,
literal|28L
argument_list|,
literal|36L
argument_list|,
literal|45L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|)
decl_stmt|;
name|sumLong
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|,
literal|5
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLong_7_2
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|5L
argument_list|,
literal|6L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|9L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|6L
argument_list|,
literal|10L
argument_list|,
literal|15L
argument_list|,
literal|21L
argument_list|,
literal|28L
argument_list|,
literal|36L
argument_list|,
literal|45L
argument_list|,
literal|55L
argument_list|,
literal|54L
argument_list|,
literal|52L
argument_list|)
decl_stmt|;
name|sumLong
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLong_15_15
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|5L
argument_list|,
literal|6L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|9L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|,
literal|55L
argument_list|)
decl_stmt|;
name|sumLong
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveDecimal_3_4
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|4L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|5L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|7L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|8L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|9L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|15L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|21L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|28L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|36L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|44L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|52L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|49L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|45L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|40L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|34L
argument_list|)
argument_list|)
decl_stmt|;
name|sumHiveDecimal
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveDecimal_3_0
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|4L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|5L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|7L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|8L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|9L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|14L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|18L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|22L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|26L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|30L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|34L
argument_list|)
argument_list|)
decl_stmt|;
name|sumHiveDecimal
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveDecimal_unb_0
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|4L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|5L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|7L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|8L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|9L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|15L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|21L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|28L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|36L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|45L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|)
decl_stmt|;
name|sumHiveDecimal
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|,
literal|0
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveDecimal_0_5
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|4L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|5L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|7L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|8L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|9L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|21L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|27L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|33L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|39L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|45L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|40L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|34L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|27L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|19L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|sumHiveDecimal
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveDecimal_unb_5
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|4L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|5L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|7L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|8L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|9L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|21L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|28L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|36L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|45L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|)
decl_stmt|;
name|sumHiveDecimal
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|,
literal|5
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveDecimal_7_2
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|4L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|5L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|7L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|8L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|9L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|15L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|21L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|28L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|36L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|45L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|54L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|52L
argument_list|)
argument_list|)
decl_stmt|;
name|sumHiveDecimal
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveDecimal_15_15
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|inVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|4L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|5L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|7L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|8L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|9L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveDecimal
argument_list|>
name|outVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|55L
argument_list|)
argument_list|)
decl_stmt|;
name|sumHiveDecimal
argument_list|(
name|inVals
operator|.
name|iterator
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
name|outVals
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

