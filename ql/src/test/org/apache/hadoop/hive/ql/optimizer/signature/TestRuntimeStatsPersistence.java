begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFConcat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestRuntimeStatsPersistence
block|{
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFConcat
argument_list|()
decl_stmt|;
name|CompilationOpContext
name|cCtx
init|=
operator|new
name|CompilationOpContext
argument_list|()
decl_stmt|;
specifier|private
name|Operator
argument_list|<
name|?
argument_list|>
name|getFilTsOp
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|Operator
argument_list|<
name|TableScanDesc
argument_list|>
name|ts
init|=
name|getTsOp
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|fil
init|=
name|getFilterOp
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|connectOperators
argument_list|(
name|ts
argument_list|,
name|fil
argument_list|)
expr_stmt|;
return|return
name|fil
return|;
block|}
specifier|private
name|void
name|connectOperators
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|child
parameter_list|)
block|{
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkPersistJoinCondDesc
parameter_list|()
throws|throws
name|Exception
block|{
name|JoinCondDesc
name|jcd
init|=
operator|new
name|JoinCondDesc
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|JoinCondDesc
name|jcd2
init|=
name|persistenceLoop
argument_list|(
name|jcd
argument_list|,
name|JoinCondDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|jcd
argument_list|,
name|jcd2
argument_list|)
expr_stmt|;
block|}
name|OpTreeSignatureFactory
name|signatureFactory
init|=
name|OpTreeSignatureFactory
operator|.
name|newCache
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|checkPersistingSigWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|OpSignature
name|sig
init|=
name|OpSignature
operator|.
name|of
argument_list|(
name|getTsOp
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|OpSignature
name|sig2
init|=
name|persistenceLoop
argument_list|(
name|sig
argument_list|,
name|OpSignature
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sig
argument_list|,
name|sig2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkPersistingTreeSigWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|OpTreeSignature
name|sig
init|=
name|signatureFactory
operator|.
name|getSignature
argument_list|(
name|getFilTsOp
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|sig2
init|=
name|persistenceLoop
argument_list|(
name|sig
argument_list|,
name|OpTreeSignature
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sig
argument_list|,
name|sig2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkCanStoreAsGraph
parameter_list|()
throws|throws
name|Exception
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|ts
init|=
name|getTsOp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|fil1
init|=
name|getFilterOp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|fil2
init|=
name|getFilterOp
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|fil3
init|=
name|getFilterOp
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|connectOperators
argument_list|(
name|ts
argument_list|,
name|fil1
argument_list|)
expr_stmt|;
name|connectOperators
argument_list|(
name|ts
argument_list|,
name|fil2
argument_list|)
expr_stmt|;
name|connectOperators
argument_list|(
name|fil1
argument_list|,
name|fil3
argument_list|)
expr_stmt|;
name|connectOperators
argument_list|(
name|fil2
argument_list|,
name|fil3
argument_list|)
expr_stmt|;
name|OpTreeSignature
name|sig
init|=
name|signatureFactory
operator|.
name|getSignature
argument_list|(
name|fil3
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|sig2
init|=
name|persistenceLoop
argument_list|(
name|sig
argument_list|,
name|OpTreeSignature
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sig
argument_list|,
name|sig2
argument_list|)
expr_stmt|;
name|OpTreeSignature
name|o0
init|=
name|sig
operator|.
name|getParentSig
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParentSig
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|o1
init|=
name|sig
operator|.
name|getParentSig
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getParentSig
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"these have to be the same instance"
argument_list|,
name|o0
operator|==
name|o1
argument_list|)
expr_stmt|;
name|OpTreeSignature
name|p0
init|=
name|sig2
operator|.
name|getParentSig
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParentSig
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|p1
init|=
name|sig2
operator|.
name|getParentSig
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getParentSig
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"these have to be the same instance"
argument_list|,
name|p0
operator|==
name|p1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkCanStoreMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|signatureFactory
operator|.
name|getSignature
argument_list|(
name|getTsOp
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|new
name|OperatorStats
argument_list|(
literal|"ts0"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|signatureFactory
operator|.
name|getSignature
argument_list|(
name|getTsOp
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|new
name|OperatorStats
argument_list|(
literal|"ts1"
argument_list|)
argument_list|)
expr_stmt|;
name|RuntimeStatsMap
name|rsm
init|=
operator|new
name|RuntimeStatsMap
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|RuntimeStatsMap
name|rsm2
init|=
name|persistenceLoop
argument_list|(
name|rsm
argument_list|,
name|RuntimeStatsMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|k1
init|=
name|rsm
operator|.
name|toMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|OpTreeSignature
name|k2
init|=
name|rsm2
operator|.
name|toMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|k1
argument_list|,
name|k2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rsm
argument_list|,
name|rsm2
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|persistenceLoop
parameter_list|(
name|T
name|sig
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
block|{
name|RuntimeStatsPersister
name|sp
init|=
name|RuntimeStatsPersister
operator|.
name|INSTANCE
decl_stmt|;
name|String
name|stored
init|=
name|sp
operator|.
name|encode
argument_list|(
name|sig
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|stored
argument_list|)
expr_stmt|;
name|T
name|sig2
init|=
name|sp
operator|.
name|decode
argument_list|(
name|stored
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
return|return
name|sig2
return|;
block|}
specifier|private
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|getFilterOp
parameter_list|(
name|int
name|constVal
parameter_list|)
block|{
name|ExprNodeDesc
name|pred
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|constVal
argument_list|)
decl_stmt|;
name|FilterDesc
name|fd
init|=
operator|new
name|FilterDesc
argument_list|(
name|pred
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|cCtx
argument_list|,
name|fd
argument_list|)
decl_stmt|;
return|return
name|op
return|;
block|}
specifier|private
name|Operator
argument_list|<
name|TableScanDesc
argument_list|>
name|getTsOp
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Table
name|tblMetadata
init|=
operator|new
name|Table
argument_list|(
literal|"db"
argument_list|,
literal|"table"
argument_list|)
decl_stmt|;
name|TableScanDesc
name|desc
init|=
operator|new
name|TableScanDesc
argument_list|(
literal|"alias"
comment|/*+ cCtx.nextOperatorId()*/
argument_list|,
name|tblMetadata
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|as
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|"c1"
argument_list|,
literal|"aa"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|f1
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|udf
argument_list|,
name|as
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setFilterExpr
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|TableScanDesc
argument_list|>
name|ts
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|cCtx
argument_list|,
name|desc
argument_list|)
decl_stmt|;
return|return
name|ts
return|;
block|}
block|}
end_class

end_unit

