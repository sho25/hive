begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*   Licensed to the Apache Software Foundation (ASF) under one   or more contributor license agreements.  See the NOTICE file   distributed with this work for additional information   regarding copyright ownership.  The ASF licenses this file   to you under the Apache License, Version 2.0 (the   "License"); you may not use this file except in compliance   with the License.  You may obtain a copy of the License at        http://www.apache.org/licenses/LICENSE-2.0    Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MoveTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|MapRedTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadFileDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadMultiFilesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|LineageState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenMapRedUtilsCreateConditionalTask
block|{
specifier|private
specifier|static
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|dummyMRTask
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initializeSessionState
parameter_list|()
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|dummyMRTask
operator|=
operator|new
name|MapRedTask
argument_list|()
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMovePathsThatCannotBeMerged
parameter_list|()
block|{
specifier|final
name|Path
name|condInputPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10000"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|condOutputPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10002"
argument_list|)
decl_stmt|;
specifier|final
name|MoveWork
name|mockWork
init|=
name|mock
argument_list|(
name|MoveWork
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"A MoveWork null object cannot be merged."
argument_list|,
name|GenMapRedUtils
operator|.
name|shouldMergeMovePaths
argument_list|(
name|hiveConf
argument_list|,
name|condInputPath
argument_list|,
name|condOutputPath
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_BLOBSTORE_OPTIMIZATIONS_ENABLED
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Merging paths is not allowed when BlobStorage optimizations are disabled."
argument_list|,
name|GenMapRedUtils
operator|.
name|shouldMergeMovePaths
argument_list|(
name|hiveConf
argument_list|,
name|condInputPath
argument_list|,
name|condOutputPath
argument_list|,
name|mockWork
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable BlobStore optimizations for the rest of tests
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_BLOBSTORE_OPTIMIZATIONS_ENABLED
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|mockWork
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadMultiFilesWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LoadMultiFilesDesc
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Merging paths is not allowed when MultiFileWork is found in the MoveWork object."
argument_list|,
name|GenMapRedUtils
operator|.
name|shouldMergeMovePaths
argument_list|(
name|hiveConf
argument_list|,
name|condInputPath
argument_list|,
name|condOutputPath
argument_list|,
name|mockWork
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|mockWork
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadFileWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|LoadFileDesc
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadTableWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|LoadTableDesc
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Merging paths is not allowed when both LoadFileWork& LoadTableWork are found in the MoveWork object."
argument_list|,
name|GenMapRedUtils
operator|.
name|shouldMergeMovePaths
argument_list|(
name|hiveConf
argument_list|,
name|condInputPath
argument_list|,
name|condOutputPath
argument_list|,
name|mockWork
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|mockWork
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadFileWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LoadFileDesc
argument_list|(
name|condInputPath
argument_list|,
name|condOutputPath
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Merging paths is not allowed when both conditional output path is not equals to MoveWork input path."
argument_list|,
name|GenMapRedUtils
operator|.
name|shouldMergeMovePaths
argument_list|(
name|hiveConf
argument_list|,
name|condInputPath
argument_list|,
name|condOutputPath
argument_list|,
name|mockWork
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|mockWork
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadFileWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LoadFileDesc
argument_list|(
name|condOutputPath
argument_list|,
operator|new
name|Path
argument_list|(
literal|"unused"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Merging paths is not allowed when conditional input path is not a BlobStore path."
argument_list|,
name|GenMapRedUtils
operator|.
name|shouldMergeMovePaths
argument_list|(
name|hiveConf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://hdfs-path"
argument_list|)
argument_list|,
name|condOutputPath
argument_list|,
name|mockWork
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|mockWork
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadFileWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LoadFileDesc
argument_list|(
name|condOutputPath
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://hdfs-path"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Merging paths is not allowed when MoveWork output path is not a BlobStore path."
argument_list|,
name|GenMapRedUtils
operator|.
name|shouldMergeMovePaths
argument_list|(
name|hiveConf
argument_list|,
name|condInputPath
argument_list|,
name|condOutputPath
argument_list|,
name|mockWork
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMovePathsThatCanBeMerged
parameter_list|()
block|{
specifier|final
name|Path
name|condInputPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10000"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|condOutputPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10002"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|targetMoveWorkPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10003"
argument_list|)
decl_stmt|;
specifier|final
name|MoveWork
name|mockWork
init|=
name|mock
argument_list|(
name|MoveWork
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadFileWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LoadFileDesc
argument_list|(
name|condOutputPath
argument_list|,
name|targetMoveWorkPath
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Merging BlobStore paths should be allowed."
argument_list|,
name|GenMapRedUtils
operator|.
name|shouldMergeMovePaths
argument_list|(
name|hiveConf
argument_list|,
name|condInputPath
argument_list|,
name|condOutputPath
argument_list|,
name|mockWork
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMergePathWithInvalidMoveWorkThrowsException
parameter_list|()
block|{
specifier|final
name|Path
name|condInputPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10000"
argument_list|)
decl_stmt|;
specifier|final
name|MoveWork
name|mockWork
init|=
name|mock
argument_list|(
name|MoveWork
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|LineageState
name|lineageState
init|=
operator|new
name|LineageState
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadMultiFilesWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LoadMultiFilesDesc
argument_list|()
argument_list|)
expr_stmt|;
name|GenMapRedUtils
operator|.
name|mergeMovePaths
argument_list|(
name|condInputPath
argument_list|,
name|mockWork
argument_list|,
name|lineageState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergePathValidMoveWorkReturnsNewMoveWork
parameter_list|()
block|{
specifier|final
name|Path
name|condInputPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10000"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|condOutputPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10002"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|targetMoveWorkPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10003"
argument_list|)
decl_stmt|;
specifier|final
name|MoveWork
name|mockWork
init|=
name|mock
argument_list|(
name|MoveWork
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|LineageState
name|lineageState
init|=
operator|new
name|LineageState
argument_list|()
decl_stmt|;
name|MoveWork
name|newWork
decl_stmt|;
comment|// test using loadFileWork
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadFileWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LoadFileDesc
argument_list|(
name|condOutputPath
argument_list|,
name|targetMoveWorkPath
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|newWork
operator|=
name|GenMapRedUtils
operator|.
name|mergeMovePaths
argument_list|(
name|condInputPath
argument_list|,
name|mockWork
argument_list|,
name|lineageState
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|newWork
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|newWork
argument_list|,
name|mockWork
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|condInputPath
argument_list|,
name|newWork
operator|.
name|getLoadFileWork
argument_list|()
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetMoveWorkPath
argument_list|,
name|newWork
operator|.
name|getLoadFileWork
argument_list|()
operator|.
name|getTargetDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// test using loadTableWork
name|TableDesc
name|tableDesc
init|=
operator|new
name|TableDesc
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|mockWork
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockWork
operator|.
name|getLoadTableWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LoadTableDesc
argument_list|(
name|condOutputPath
argument_list|,
name|tableDesc
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newWork
operator|=
name|GenMapRedUtils
operator|.
name|mergeMovePaths
argument_list|(
name|condInputPath
argument_list|,
name|mockWork
argument_list|,
name|lineageState
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|newWork
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|newWork
argument_list|,
name|mockWork
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|condInputPath
argument_list|,
name|newWork
operator|.
name|getLoadTableWork
argument_list|()
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newWork
operator|.
name|getLoadTableWork
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalMoveTaskIsOptimized
parameter_list|()
throws|throws
name|SemanticException
block|{
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_BLOBSTORE_OPTIMIZATIONS_ENABLED
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Path
name|sinkDirName
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10002"
argument_list|)
decl_stmt|;
name|FileSinkOperator
name|fileSinkOperator
init|=
name|createFileSinkOperator
argument_list|(
name|sinkDirName
argument_list|)
decl_stmt|;
name|Path
name|finalDirName
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10000"
argument_list|)
decl_stmt|;
name|Path
name|tableLocation
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/warehouse/table"
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|moveTask
init|=
name|createMoveTask
argument_list|(
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|MoveWork
argument_list|>
argument_list|>
name|moveTaskList
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|moveTask
argument_list|)
decl_stmt|;
name|GenMapRedUtils
operator|.
name|createMRWorkForMergingFiles
argument_list|(
name|fileSinkOperator
argument_list|,
name|finalDirName
argument_list|,
literal|null
argument_list|,
name|moveTaskList
argument_list|,
name|hiveConf
argument_list|,
name|dummyMRTask
argument_list|,
operator|new
name|LineageState
argument_list|()
argument_list|)
expr_stmt|;
name|ConditionalTask
name|conditionalTask
init|=
operator|(
name|ConditionalTask
operator|)
name|dummyMRTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|moveOnlyTask
init|=
name|conditionalTask
operator|.
name|getListTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|mergeOnlyTask
init|=
name|conditionalTask
operator|.
name|getListTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|mergeAndMoveTask
init|=
name|conditionalTask
operator|.
name|getListTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|/*      * OPTIMIZATION      * The ConditionalTask avoids linking 2 MoveTask that are expensive on blobstorage systems. Instead of      * linking, it creates one MoveTask where the source is the first MoveTask source, and target is the      * second MoveTask target.      */
comment|// Verify moveOnlyTask is optimized
name|assertNull
argument_list|(
name|moveOnlyTask
operator|.
name|getChildTasks
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|moveOnlyTask
argument_list|,
name|sinkDirName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
comment|// Verify mergeOnlyTask is NOT optimized (a merge task writes directly to finalDirName, then a MoveTask is executed)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergeOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|mergeOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
comment|// Verify mergeAndMoveTask is NOT optimized
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sinkDirName
argument_list|,
name|finalDirName
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalMoveTaskIsNotOptimized
parameter_list|()
throws|throws
name|SemanticException
block|{
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_BLOBSTORE_OPTIMIZATIONS_ENABLED
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Path
name|sinkDirName
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10002"
argument_list|)
decl_stmt|;
name|FileSinkOperator
name|fileSinkOperator
init|=
name|createFileSinkOperator
argument_list|(
name|sinkDirName
argument_list|)
decl_stmt|;
name|Path
name|finalDirName
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/scratch/-ext-10000"
argument_list|)
decl_stmt|;
name|Path
name|tableLocation
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/warehouse/table"
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|moveTask
init|=
name|createMoveTask
argument_list|(
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|MoveWork
argument_list|>
argument_list|>
name|moveTaskList
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|moveTask
argument_list|)
decl_stmt|;
name|GenMapRedUtils
operator|.
name|createMRWorkForMergingFiles
argument_list|(
name|fileSinkOperator
argument_list|,
name|finalDirName
argument_list|,
literal|null
argument_list|,
name|moveTaskList
argument_list|,
name|hiveConf
argument_list|,
name|dummyMRTask
argument_list|,
operator|new
name|LineageState
argument_list|()
argument_list|)
expr_stmt|;
name|ConditionalTask
name|conditionalTask
init|=
operator|(
name|ConditionalTask
operator|)
name|dummyMRTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|moveOnlyTask
init|=
name|conditionalTask
operator|.
name|getListTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|mergeOnlyTask
init|=
name|conditionalTask
operator|.
name|getListTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|mergeAndMoveTask
init|=
name|conditionalTask
operator|.
name|getListTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// Verify moveOnlyTask is NOT optimized
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|moveOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|moveOnlyTask
argument_list|,
name|sinkDirName
argument_list|,
name|finalDirName
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|moveOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
comment|// Verify mergeOnlyTask is NOT optimized
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergeOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|mergeOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
comment|// Verify mergeAndMoveTask is NOT optimized
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sinkDirName
argument_list|,
name|finalDirName
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalMoveOnHdfsIsNotOptimized
parameter_list|()
throws|throws
name|SemanticException
block|{
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_BLOBSTORE_OPTIMIZATIONS_ENABLED
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Path
name|sinkDirName
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://bucket/scratch/-ext-10002"
argument_list|)
decl_stmt|;
name|FileSinkOperator
name|fileSinkOperator
init|=
name|createFileSinkOperator
argument_list|(
name|sinkDirName
argument_list|)
decl_stmt|;
name|Path
name|finalDirName
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://bucket/scratch/-ext-10000"
argument_list|)
decl_stmt|;
name|Path
name|tableLocation
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://bucket/warehouse/table"
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|moveTask
init|=
name|createMoveTask
argument_list|(
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|MoveWork
argument_list|>
argument_list|>
name|moveTaskList
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|moveTask
argument_list|)
decl_stmt|;
name|GenMapRedUtils
operator|.
name|createMRWorkForMergingFiles
argument_list|(
name|fileSinkOperator
argument_list|,
name|finalDirName
argument_list|,
literal|null
argument_list|,
name|moveTaskList
argument_list|,
name|hiveConf
argument_list|,
name|dummyMRTask
argument_list|,
operator|new
name|LineageState
argument_list|()
argument_list|)
expr_stmt|;
name|ConditionalTask
name|conditionalTask
init|=
operator|(
name|ConditionalTask
operator|)
name|dummyMRTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|moveOnlyTask
init|=
name|conditionalTask
operator|.
name|getListTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|mergeOnlyTask
init|=
name|conditionalTask
operator|.
name|getListTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|mergeAndMoveTask
init|=
name|conditionalTask
operator|.
name|getListTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// Verify moveOnlyTask is NOT optimized
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|moveOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|moveOnlyTask
argument_list|,
name|sinkDirName
argument_list|,
name|finalDirName
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|moveOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
comment|// Verify mergeOnlyTask is NOT optimized
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergeOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|mergeOnlyTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
comment|// Verify mergeAndMoveTask is NOT optimized
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sinkDirName
argument_list|,
name|finalDirName
argument_list|)
expr_stmt|;
name|verifyMoveTask
argument_list|(
name|mergeAndMoveTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|finalDirName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FileSinkOperator
name|createFileSinkOperator
parameter_list|(
name|Path
name|finalDirName
parameter_list|)
block|{
name|FileSinkOperator
name|fileSinkOperator
init|=
name|mock
argument_list|(
name|FileSinkOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|TableDesc
name|tableDesc
init|=
operator|new
name|TableDesc
argument_list|(
name|HiveInputFormat
operator|.
name|class
argument_list|,
name|HiveOutputFormat
operator|.
name|class
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
name|FileSinkDesc
name|fileSinkDesc
init|=
operator|new
name|FileSinkDesc
argument_list|(
name|finalDirName
argument_list|,
name|tableDesc
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fileSinkDesc
operator|.
name|setDirName
argument_list|(
name|finalDirName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileSinkOperator
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileSinkDesc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileSinkOperator
operator|.
name|getSchema
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|RowSchema
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fileSinkDesc
operator|.
name|setTableInfo
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileSinkOperator
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|CompilationOpContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fileSinkOperator
return|;
block|}
specifier|private
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|createMoveTask
parameter_list|(
name|Path
name|source
parameter_list|,
name|Path
name|destination
parameter_list|)
block|{
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|moveTask
init|=
name|mock
argument_list|(
name|MoveTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|MoveWork
name|moveWork
init|=
operator|new
name|MoveWork
argument_list|()
decl_stmt|;
name|moveWork
operator|.
name|setLoadFileWork
argument_list|(
operator|new
name|LoadFileDesc
argument_list|(
name|source
argument_list|,
name|destination
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|moveTask
operator|.
name|getWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|moveWork
argument_list|)
expr_stmt|;
return|return
name|moveTask
return|;
block|}
specifier|private
name|void
name|verifyMoveTask
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|,
name|Path
name|source
parameter_list|,
name|Path
name|target
parameter_list|)
block|{
name|MoveTask
name|moveTask
init|=
operator|(
name|MoveTask
operator|)
name|task
decl_stmt|;
name|assertEquals
argument_list|(
name|source
argument_list|,
name|moveTask
operator|.
name|getWork
argument_list|()
operator|.
name|getLoadFileWork
argument_list|()
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|target
argument_list|,
name|moveTask
operator|.
name|getWork
argument_list|()
operator|.
name|getLoadFileWork
argument_list|()
operator|.
name|getTargetDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

