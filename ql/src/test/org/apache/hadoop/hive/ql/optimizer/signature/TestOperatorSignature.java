begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFConcat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestOperatorSignature
block|{
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFConcat
argument_list|()
decl_stmt|;
name|CompilationOpContext
name|cCtx
init|=
operator|new
name|CompilationOpContext
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testFilterOpEquals
parameter_list|()
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op7
init|=
name|getFilterOp
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op8
init|=
name|getFilterOp
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op7b
init|=
name|getFilterOp
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|checkEquals
argument_list|(
name|op7
argument_list|,
name|op7b
argument_list|)
expr_stmt|;
name|checkNotEquals
argument_list|(
name|op7
argument_list|,
name|op8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTree1
parameter_list|()
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|tr37
init|=
name|getFilTsOp
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|tr37a
init|=
name|getFilTsOp
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|tr17
init|=
name|getFilTsOp
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|tr31
init|=
name|getFilTsOp
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|checkEquals
argument_list|(
name|tr37
argument_list|,
name|tr37a
argument_list|)
expr_stmt|;
name|checkTreeNotEquals
argument_list|(
name|tr37
argument_list|,
name|tr17
argument_list|)
expr_stmt|;
name|checkTreeEquals
argument_list|(
name|tr37
argument_list|,
name|tr37a
argument_list|)
expr_stmt|;
name|checkTreeNotEquals
argument_list|(
name|tr37
argument_list|,
name|tr31
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Operator
argument_list|<
name|?
argument_list|>
name|getFilTsOp
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|Operator
argument_list|<
name|TableScanDesc
argument_list|>
name|ts
init|=
name|getTsOp
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|fil
init|=
name|getFilterOp
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|connectOperators
argument_list|(
name|ts
argument_list|,
name|fil
argument_list|)
expr_stmt|;
return|return
name|fil
return|;
block|}
specifier|private
name|void
name|connectOperators
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|child
parameter_list|)
block|{
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableScand
parameter_list|()
block|{
name|Operator
argument_list|<
name|TableScanDesc
argument_list|>
name|t1
init|=
name|getTsOp
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|TableScanDesc
argument_list|>
name|t1a
init|=
name|getTsOp
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|TableScanDesc
argument_list|>
name|t2
init|=
name|getTsOp
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t1
operator|.
name|logicalEquals
argument_list|(
name|t1a
argument_list|)
argument_list|)
expr_stmt|;
name|checkEquals
argument_list|(
name|t1
argument_list|,
name|t1a
argument_list|)
expr_stmt|;
name|checkNotEquals
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkEquals
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|o1
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|o2
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|o1
operator|.
name|logicalEquals
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
name|OpSignature
name|s1
init|=
name|OpSignature
operator|.
name|of
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|OpSignature
name|s2
init|=
name|OpSignature
operator|.
name|of
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|s1
operator|.
name|proveEquals
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"sigCmp"
argument_list|,
name|s1
operator|.
name|signatureCompare
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|s2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkNotEquals
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o1
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o2
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|o1
operator|.
name|logicalEquals
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
name|OpSignature
name|s1
init|=
name|OpSignature
operator|.
name|of
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|OpSignature
name|s2
init|=
name|OpSignature
operator|.
name|of
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|s1
operator|.
name|signatureCompare
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
comment|// this might be a little bit too much...but in most cases this should be true
name|assertNotEquals
argument_list|(
name|s1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|s2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkTreeEquals
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|o1
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|o2
parameter_list|)
block|{
name|OpTreeSignature
name|ts1
init|=
name|OpTreeSignature
operator|.
name|of
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|ts2
init|=
name|OpTreeSignature
operator|.
name|of
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ts1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ts2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts1
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkTreeNotEquals
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o1
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o2
parameter_list|)
block|{
name|OpTreeSignature
name|ts1
init|=
name|OpTreeSignature
operator|.
name|of
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|ts2
init|=
name|OpTreeSignature
operator|.
name|of
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|ts1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ts2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|ts1
operator|.
name|equals
argument_list|(
name|ts2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ts1
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|getFilterOp
parameter_list|(
name|int
name|constVal
parameter_list|)
block|{
name|ExprNodeDesc
name|pred
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|constVal
argument_list|)
decl_stmt|;
name|FilterDesc
name|fd
init|=
operator|new
name|FilterDesc
argument_list|(
name|pred
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|cCtx
argument_list|,
name|fd
argument_list|)
decl_stmt|;
return|return
name|op
return|;
block|}
specifier|private
name|Operator
argument_list|<
name|TableScanDesc
argument_list|>
name|getTsOp
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Table
name|tblMetadata
init|=
operator|new
name|Table
argument_list|(
literal|"db"
argument_list|,
literal|"table"
argument_list|)
decl_stmt|;
comment|// FIXME: I think this shouldn't be sensitive to the alias; but currently its included in logicalEquals...check that
name|TableScanDesc
name|desc
init|=
operator|new
name|TableScanDesc
argument_list|(
literal|"alias"
comment|/*+ cCtx.nextOperatorId()*/
argument_list|,
name|tblMetadata
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|as
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|"c1"
argument_list|,
literal|"aa"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|f1
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|udf
argument_list|,
name|as
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setFilterExpr
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|TableScanDesc
argument_list|>
name|ts
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|cCtx
argument_list|,
name|desc
argument_list|)
decl_stmt|;
return|return
name|ts
return|;
block|}
block|}
end_class

end_unit

