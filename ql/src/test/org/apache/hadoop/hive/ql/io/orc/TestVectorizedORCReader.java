begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Decimal128
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/** * * Class that tests ORC reader vectorization by comparing records that are * returned by "row by row" reader with batch reader. * */
end_comment

begin_class
specifier|public
class|class
name|TestVectorizedORCReader
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|testFilePath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
literal|"TestVectorizedORCReader.testDump.orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|MyRecord
block|{
specifier|private
specifier|final
name|Boolean
name|bo
decl_stmt|;
specifier|private
specifier|final
name|Byte
name|by
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|i
decl_stmt|;
specifier|private
specifier|final
name|Long
name|l
decl_stmt|;
specifier|private
specifier|final
name|Short
name|s
decl_stmt|;
specifier|private
specifier|final
name|Double
name|d
decl_stmt|;
specifier|private
specifier|final
name|String
name|k
decl_stmt|;
specifier|private
specifier|final
name|Timestamp
name|t
decl_stmt|;
specifier|private
specifier|final
name|Date
name|dt
decl_stmt|;
specifier|private
specifier|final
name|HiveDecimal
name|hd
decl_stmt|;
name|MyRecord
parameter_list|(
name|Boolean
name|bo
parameter_list|,
name|Byte
name|by
parameter_list|,
name|Integer
name|i
parameter_list|,
name|Long
name|l
parameter_list|,
name|Short
name|s
parameter_list|,
name|Double
name|d
parameter_list|,
name|String
name|k
parameter_list|,
name|Timestamp
name|t
parameter_list|,
name|Date
name|dt
parameter_list|,
name|HiveDecimal
name|hd
parameter_list|)
block|{
name|this
operator|.
name|bo
operator|=
name|bo
expr_stmt|;
name|this
operator|.
name|by
operator|=
name|by
expr_stmt|;
name|this
operator|.
name|i
operator|=
name|i
expr_stmt|;
name|this
operator|.
name|l
operator|=
name|l
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|d
operator|=
name|d
expr_stmt|;
name|this
operator|.
name|k
operator|=
name|k
expr_stmt|;
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|dt
operator|=
name|dt
expr_stmt|;
name|this
operator|.
name|hd
operator|=
name|hd
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|createFile
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestVectorizedORCReader
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyRecord
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|testFilePath
argument_list|,
name|conf
argument_list|,
name|inspector
argument_list|,
literal|100000
argument_list|,
name|CompressionKind
operator|.
name|ZLIB
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|Random
name|r1
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[]
block|{
literal|"It"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"best"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"worst"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"wisdom,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"foolishness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"belief,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"incredulity,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Light,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Darkness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"spring"
block|,
literal|"of"
block|,
literal|"hope,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"winter"
block|,
literal|"of"
block|,
literal|"despair,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"everything"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"nothing"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"to"
block|,
literal|"Heaven,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"the"
block|,
literal|"other"
block|,
literal|"way"
block|}
decl_stmt|;
name|String
index|[]
name|dates
init|=
operator|new
name|String
index|[]
block|{
literal|"1991-02-28"
block|,
literal|"1970-01-31"
block|,
literal|"1950-04-23"
block|}
decl_stmt|;
name|String
index|[]
name|decimalStrings
init|=
operator|new
name|String
index|[]
block|{
literal|"234.443"
block|,
literal|"10001000"
block|,
literal|"0.3333367"
block|,
literal|"67788798.0"
block|,
literal|"-234.443"
block|,
literal|"-10001000"
block|,
literal|"-0.3333367"
block|,
literal|"-67788798.0"
block|,
literal|"0"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21000
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|7
operator|)
operator|!=
literal|0
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRecord
argument_list|(
operator|(
operator|(
name|i
operator|%
literal|3
operator|)
operator|==
literal|0
operator|)
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
literal|5
argument_list|)
argument_list|,
name|i
argument_list|,
operator|(
name|long
operator|)
literal|200
argument_list|,
call|(
name|short
call|)
argument_list|(
literal|300
operator|+
name|i
argument_list|)
argument_list|,
call|(
name|double
call|)
argument_list|(
literal|400
operator|+
name|i
argument_list|)
argument_list|,
name|words
index|[
name|r1
operator|.
name|nextInt
argument_list|(
name|words
operator|.
name|length
argument_list|)
index|]
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|Date
operator|.
name|valueOf
argument_list|(
name|dates
index|[
name|i
operator|%
literal|3
index|]
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decimalStrings
index|[
name|i
operator|%
name|decimalStrings
operator|.
name|length
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|MyRecord
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|i
argument_list|,
operator|(
name|long
operator|)
literal|200
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkVectorizedReader
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkVectorizedReader
parameter_list|()
throws|throws
name|Exception
block|{
name|Reader
name|vreader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|testFilePath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|testFilePath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RecordReaderImpl
name|vrr
init|=
operator|(
name|RecordReaderImpl
operator|)
name|vreader
operator|.
name|rows
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|RecordReaderImpl
name|rr
init|=
operator|(
name|RecordReaderImpl
operator|)
name|reader
operator|.
name|rows
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
literal|null
decl_stmt|;
name|OrcStruct
name|row
init|=
literal|null
decl_stmt|;
comment|// Check Vectorized ORC reader against ORC row reader
while|while
condition|(
name|vrr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|batch
operator|=
name|vrr
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|=
operator|(
name|OrcStruct
operator|)
name|rr
operator|.
name|next
argument_list|(
operator|(
name|Object
operator|)
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|batch
operator|.
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|a
init|=
operator|(
name|row
operator|.
name|getFieldValue
argument_list|(
name|j
argument_list|)
operator|)
decl_stmt|;
name|Object
name|b
init|=
name|batch
operator|.
name|cols
index|[
name|j
index|]
operator|.
name|getWritableObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Boolean values are stores a 1's and 0's, so convert and compare
if|if
condition|(
name|a
operator|instanceof
name|BooleanWritable
condition|)
block|{
name|Long
name|temp
init|=
call|(
name|long
call|)
argument_list|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|a
operator|)
operator|.
name|get
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|temp
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Timestamps are stored as long, so convert and compare
if|if
condition|(
name|a
operator|instanceof
name|Timestamp
condition|)
block|{
name|Timestamp
name|t
init|=
operator|(
operator|(
name|Timestamp
operator|)
name|a
operator|)
decl_stmt|;
comment|// Timestamp.getTime() is overriden and is
comment|// long time = super.getTime();
comment|// return (time + (nanos / 1000000));
name|Long
name|timeInNanoSec
init|=
operator|(
name|t
operator|.
name|getTime
argument_list|()
operator|*
literal|1000000
operator|)
operator|+
operator|(
name|t
operator|.
name|getNanos
argument_list|()
operator|%
literal|1000000
operator|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|timeInNanoSec
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Dates are stored as long, so convert and compare
if|if
condition|(
name|a
operator|instanceof
name|Date
condition|)
block|{
name|Date
name|adt
init|=
operator|(
name|Date
operator|)
name|a
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|adt
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongWritable
operator|)
name|b
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Decimals are stored as BigInteger, so convert and compare
if|if
condition|(
name|a
operator|instanceof
name|HiveDecimal
condition|)
block|{
name|HiveDecimalWritable
name|dec
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|b
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|a
argument_list|,
name|dec
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|a
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
name|b
operator|==
literal|null
operator|||
operator|(
name|b
operator|instanceof
name|NullWritable
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|b
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check repeating
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|4
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|5
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|6
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|7
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|8
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|9
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// Check non null
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|4
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|5
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|6
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|7
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|8
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|9
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

