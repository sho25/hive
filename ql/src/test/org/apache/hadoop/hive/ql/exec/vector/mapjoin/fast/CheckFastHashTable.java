begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMapResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMultiSetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashSetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|CheckFastHashTable
block|{
specifier|public
specifier|static
name|boolean
name|findMatch
parameter_list|(
name|int
name|valueIndex
parameter_list|,
name|byte
index|[]
name|valueBytes
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|actualValues
parameter_list|,
name|int
name|actualCount
parameter_list|,
name|boolean
index|[]
name|actualTaken
parameter_list|,
name|int
index|[]
name|actualToValueMap
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|actualTaken
index|[
name|i
index|]
condition|)
block|{
name|byte
index|[]
name|actualBytes
init|=
name|actualValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringExpr
operator|.
name|compare
argument_list|(
name|valueBytes
argument_list|,
literal|0
argument_list|,
name|valueBytes
operator|.
name|length
argument_list|,
name|actualBytes
argument_list|,
literal|0
argument_list|,
name|actualBytes
operator|.
name|length
argument_list|)
operator|==
literal|0
condition|)
block|{
name|actualToValueMap
index|[
name|i
index|]
operator|=
name|valueIndex
expr_stmt|;
name|actualTaken
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|int
index|[]
name|verifyHashMapValues
parameter_list|(
name|VectorMapJoinHashMapResult
name|hashMapResult
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|values
parameter_list|)
block|{
name|int
name|valueCount
init|=
name|values
operator|.
name|size
argument_list|()
decl_stmt|;
name|WriteBuffers
operator|.
name|ByteSegmentRef
name|ref
init|=
name|hashMapResult
operator|.
name|first
argument_list|()
decl_stmt|;
comment|// Read through all values.
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|actualValues
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ref
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|ref
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|ref
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
name|actualValues
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actualValues
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ref
operator|=
name|hashMapResult
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
name|int
name|actualCount
init|=
name|actualValues
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueCount
operator|!=
name|actualCount
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"values.size() "
operator|+
name|valueCount
operator|+
literal|" does not match actualCount "
operator|+
name|actualCount
argument_list|)
expr_stmt|;
block|}
name|boolean
index|[]
name|actualTaken
init|=
operator|new
name|boolean
index|[
name|actualCount
index|]
decl_stmt|;
name|int
index|[]
name|actualToValueMap
init|=
operator|new
name|int
index|[
name|actualCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualCount
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|valueBytes
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|findMatch
argument_list|(
name|i
argument_list|,
name|valueBytes
argument_list|,
name|actualValues
argument_list|,
name|actualCount
argument_list|,
name|actualTaken
argument_list|,
name|actualToValueMap
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|availableLengths
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|actualCount
condition|;
name|a
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|actualTaken
index|[
name|a
index|]
condition|)
block|{
name|availableLengths
operator|.
name|add
argument_list|(
name|actualValues
operator|.
name|get
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|TestCase
operator|.
name|fail
argument_list|(
literal|"No match for actual value (valueBytes length "
operator|+
name|valueBytes
operator|.
name|length
operator|+
literal|", availableLengths "
operator|+
name|availableLengths
operator|.
name|toString
argument_list|()
operator|+
literal|" of "
operator|+
name|actualCount
operator|+
literal|" total)"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|actualToValueMap
return|;
block|}
comment|/*    * Element for Key: Long x Hash Table: HashMap    */
specifier|public
specifier|static
class|class
name|FastLongHashMapElement
block|{
specifier|private
name|long
name|key
decl_stmt|;
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|values
decl_stmt|;
specifier|public
name|FastLongHashMapElement
parameter_list|(
name|long
name|key
parameter_list|,
name|byte
index|[]
name|firstValue
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|values
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
specifier|public
name|void
name|addValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Verify table for Key: Long x Hash Table: HashMap    */
specifier|public
specifier|static
class|class
name|VerifyFastLongHashMap
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|FastLongHashMapElement
index|[]
name|array
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|keyValueMap
decl_stmt|;
specifier|public
name|VerifyFastLongHashMap
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|array
operator|=
operator|new
name|FastLongHashMapElement
index|[
literal|50
index|]
expr_stmt|;
name|keyValueMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|long
name|key
parameter_list|)
block|{
return|return
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|long
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
if|if
condition|(
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|keyValueMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|array
index|[
name|index
index|]
operator|.
name|addValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|>=
name|array
operator|.
name|length
condition|)
block|{
comment|// Grow.
name|FastLongHashMapElement
index|[]
name|newArray
init|=
operator|new
name|FastLongHashMapElement
index|[
name|array
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|array
operator|=
name|newArray
expr_stmt|;
block|}
name|array
index|[
name|count
index|]
operator|=
operator|new
name|FastLongHashMapElement
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|keyValueMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|addRandomExisting
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|Random
name|r
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|array
index|[
name|index
index|]
operator|.
name|addValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|long
name|getKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getValues
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getValues
argument_list|()
return|;
block|}
specifier|public
name|void
name|verify
parameter_list|(
name|VectorMapJoinFastLongHashMap
name|map
parameter_list|)
block|{
name|int
name|mapSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapSize
operator|!=
name|count
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"map.size() does not match expected count"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
name|index
operator|++
control|)
block|{
name|FastLongHashMapElement
name|element
init|=
name|array
index|[
name|index
index|]
decl_stmt|;
name|long
name|key
init|=
name|element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|values
init|=
name|element
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|map
operator|.
name|createHashMapResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|lookup
argument_list|(
name|key
argument_list|,
name|hashMapResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|!=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|verifyHashMapValues
argument_list|(
name|hashMapResult
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Element for Key: byte[] x Hash Table: HashMap    */
specifier|public
specifier|static
class|class
name|FastBytesHashMapElement
block|{
specifier|private
name|byte
index|[]
name|key
decl_stmt|;
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|values
decl_stmt|;
specifier|public
name|FastBytesHashMapElement
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|firstValue
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|values
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
specifier|public
name|void
name|addValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Verify table for Key: byte[] x Hash Table: HashMap    */
specifier|public
specifier|static
class|class
name|VerifyFastBytesHashMap
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|FastBytesHashMapElement
index|[]
name|array
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|BytesWritable
argument_list|,
name|Integer
argument_list|>
name|keyValueMap
decl_stmt|;
specifier|public
name|VerifyFastBytesHashMap
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|array
operator|=
operator|new
name|FastBytesHashMapElement
index|[
literal|50
index|]
expr_stmt|;
comment|// We use BytesWritable because it supports Comparable for our TreeMap.
name|keyValueMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|BytesWritable
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|BytesWritable
name|keyBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|keyBytesWritable
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|BytesWritable
name|keyBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|keyBytesWritable
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|keyValueMap
operator|.
name|get
argument_list|(
name|keyBytesWritable
argument_list|)
decl_stmt|;
name|array
index|[
name|index
index|]
operator|.
name|addValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|>=
name|array
operator|.
name|length
condition|)
block|{
comment|// Grow.
name|FastBytesHashMapElement
index|[]
name|newArray
init|=
operator|new
name|FastBytesHashMapElement
index|[
name|array
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|array
operator|=
name|newArray
expr_stmt|;
block|}
name|array
index|[
name|count
index|]
operator|=
operator|new
name|FastBytesHashMapElement
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|keyValueMap
operator|.
name|put
argument_list|(
name|keyBytesWritable
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|addRandomExisting
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|Random
name|r
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|array
index|[
name|index
index|]
operator|.
name|addValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|getKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getValues
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getValues
argument_list|()
return|;
block|}
specifier|public
name|void
name|verify
parameter_list|(
name|VectorMapJoinFastBytesHashMap
name|map
parameter_list|)
block|{
name|int
name|mapSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapSize
operator|!=
name|count
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"map.size() does not match expected count"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
name|index
operator|++
control|)
block|{
name|FastBytesHashMapElement
name|element
init|=
name|array
index|[
name|index
index|]
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|values
init|=
name|element
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|map
operator|.
name|createHashMapResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|lookup
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|hashMapResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|!=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|verifyHashMapValues
argument_list|(
name|hashMapResult
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Element for Key: Long x Hash Table: HashMultiSet    */
specifier|public
specifier|static
class|class
name|FastLongHashMultiSetElement
block|{
specifier|private
name|long
name|key
decl_stmt|;
specifier|private
name|int
name|multiSetCount
decl_stmt|;
specifier|public
name|FastLongHashMultiSetElement
parameter_list|(
name|long
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|multiSetCount
operator|=
literal|1
expr_stmt|;
block|}
specifier|public
name|long
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|int
name|getMultiSetCount
parameter_list|()
block|{
return|return
name|multiSetCount
return|;
block|}
specifier|public
name|void
name|incrementMultiSetCount
parameter_list|()
block|{
name|multiSetCount
operator|++
expr_stmt|;
block|}
block|}
comment|/*    * Verify table for Key: Long x Hash Table: HashMultiSet    */
specifier|public
specifier|static
class|class
name|VerifyFastLongHashMultiSet
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|FastLongHashMultiSetElement
index|[]
name|array
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|keyValueMap
decl_stmt|;
specifier|public
name|VerifyFastLongHashMultiSet
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|array
operator|=
operator|new
name|FastLongHashMultiSetElement
index|[
literal|50
index|]
expr_stmt|;
name|keyValueMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|long
name|key
parameter_list|)
block|{
return|return
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|long
name|key
parameter_list|)
block|{
if|if
condition|(
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|keyValueMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|array
index|[
name|index
index|]
operator|.
name|incrementMultiSetCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|>=
name|array
operator|.
name|length
condition|)
block|{
comment|// Grow.
name|FastLongHashMultiSetElement
index|[]
name|newArray
init|=
operator|new
name|FastLongHashMultiSetElement
index|[
name|array
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|array
operator|=
name|newArray
expr_stmt|;
block|}
name|array
index|[
name|count
index|]
operator|=
operator|new
name|FastLongHashMultiSetElement
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|keyValueMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|addRandomExisting
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|Random
name|r
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|array
index|[
name|index
index|]
operator|.
name|incrementMultiSetCount
argument_list|()
expr_stmt|;
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|long
name|getKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMultiSetCount
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getMultiSetCount
argument_list|()
return|;
block|}
specifier|public
name|void
name|verify
parameter_list|(
name|VectorMapJoinFastLongHashMultiSet
name|map
parameter_list|)
block|{
name|int
name|mapSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapSize
operator|!=
name|count
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"map.size() does not match expected count"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
name|index
operator|++
control|)
block|{
name|FastLongHashMultiSetElement
name|element
init|=
name|array
index|[
name|index
index|]
decl_stmt|;
name|long
name|key
init|=
name|element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|multiSetCount
init|=
name|element
operator|.
name|getMultiSetCount
argument_list|()
decl_stmt|;
name|VectorMapJoinHashMultiSetResult
name|hashMultiSetResult
init|=
name|map
operator|.
name|createHashMultiSetResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|contains
argument_list|(
name|key
argument_list|,
name|hashMultiSetResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|!=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|hashMultiSetResult
operator|.
name|count
argument_list|()
argument_list|,
name|multiSetCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Element for Key: byte[] x Hash Table: HashMultiSet    */
specifier|public
specifier|static
class|class
name|FastBytesHashMultiSetElement
block|{
specifier|private
name|byte
index|[]
name|key
decl_stmt|;
specifier|private
name|int
name|multiSetCount
decl_stmt|;
specifier|public
name|FastBytesHashMultiSetElement
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|multiSetCount
operator|=
literal|1
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|int
name|getMultiSetCount
parameter_list|()
block|{
return|return
name|multiSetCount
return|;
block|}
specifier|public
name|void
name|incrementMultiSetCount
parameter_list|()
block|{
name|multiSetCount
operator|++
expr_stmt|;
block|}
block|}
comment|/*    * Verify table for Key: byte[] x Hash Table: HashMultiSet    */
specifier|public
specifier|static
class|class
name|VerifyFastBytesHashMultiSet
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|FastBytesHashMultiSetElement
index|[]
name|array
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|BytesWritable
argument_list|,
name|Integer
argument_list|>
name|keyValueMap
decl_stmt|;
specifier|public
name|VerifyFastBytesHashMultiSet
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|array
operator|=
operator|new
name|FastBytesHashMultiSetElement
index|[
literal|50
index|]
expr_stmt|;
comment|// We use BytesWritable because it supports Comparable for our TreeMap.
name|keyValueMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|BytesWritable
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|BytesWritable
name|keyBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|keyBytesWritable
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|BytesWritable
name|keyBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|keyBytesWritable
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|keyValueMap
operator|.
name|get
argument_list|(
name|keyBytesWritable
argument_list|)
decl_stmt|;
name|array
index|[
name|index
index|]
operator|.
name|incrementMultiSetCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|>=
name|array
operator|.
name|length
condition|)
block|{
comment|// Grow.
name|FastBytesHashMultiSetElement
index|[]
name|newArray
init|=
operator|new
name|FastBytesHashMultiSetElement
index|[
name|array
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|array
operator|=
name|newArray
expr_stmt|;
block|}
name|array
index|[
name|count
index|]
operator|=
operator|new
name|FastBytesHashMultiSetElement
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|keyValueMap
operator|.
name|put
argument_list|(
name|keyBytesWritable
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|addRandomExisting
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|Random
name|r
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|array
index|[
name|index
index|]
operator|.
name|incrementMultiSetCount
argument_list|()
expr_stmt|;
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|getKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMultiSetCount
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getMultiSetCount
argument_list|()
return|;
block|}
specifier|public
name|void
name|verify
parameter_list|(
name|VectorMapJoinFastBytesHashMultiSet
name|map
parameter_list|)
block|{
name|int
name|mapSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapSize
operator|!=
name|count
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"map.size() does not match expected count"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
name|index
operator|++
control|)
block|{
name|FastBytesHashMultiSetElement
name|element
init|=
name|array
index|[
name|index
index|]
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|multiSetCount
init|=
name|element
operator|.
name|getMultiSetCount
argument_list|()
decl_stmt|;
name|VectorMapJoinHashMultiSetResult
name|hashMultiSetResult
init|=
name|map
operator|.
name|createHashMultiSetResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|contains
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|hashMultiSetResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|!=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|hashMultiSetResult
operator|.
name|count
argument_list|()
argument_list|,
name|multiSetCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Element for Key: Long x Hash Table: HashSet    */
specifier|public
specifier|static
class|class
name|FastLongHashSetElement
block|{
specifier|private
name|long
name|key
decl_stmt|;
specifier|public
name|FastLongHashSetElement
parameter_list|(
name|long
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
specifier|public
name|long
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
block|}
comment|/*    * Verify table for Key: Long x Hash Table: HashSet    */
specifier|public
specifier|static
class|class
name|VerifyFastLongHashSet
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|FastLongHashSetElement
index|[]
name|array
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|keyValueMap
decl_stmt|;
specifier|public
name|VerifyFastLongHashSet
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|array
operator|=
operator|new
name|FastLongHashSetElement
index|[
literal|50
index|]
expr_stmt|;
name|keyValueMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|long
name|key
parameter_list|)
block|{
return|return
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|long
name|key
parameter_list|)
block|{
if|if
condition|(
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// Already exists.
block|}
else|else
block|{
if|if
condition|(
name|count
operator|>=
name|array
operator|.
name|length
condition|)
block|{
comment|// Grow.
name|FastLongHashSetElement
index|[]
name|newArray
init|=
operator|new
name|FastLongHashSetElement
index|[
name|array
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|array
operator|=
name|newArray
expr_stmt|;
block|}
name|array
index|[
name|count
index|]
operator|=
operator|new
name|FastLongHashSetElement
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|keyValueMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|addRandomExisting
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|Random
name|r
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|count
argument_list|)
decl_stmt|;
comment|// Exists aleady.
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|long
name|getKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|void
name|verify
parameter_list|(
name|VectorMapJoinFastLongHashSet
name|map
parameter_list|)
block|{
name|int
name|mapSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapSize
operator|!=
name|count
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"map.size() does not match expected count"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
name|index
operator|++
control|)
block|{
name|FastLongHashSetElement
name|element
init|=
name|array
index|[
name|index
index|]
decl_stmt|;
name|long
name|key
init|=
name|element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|VectorMapJoinHashSetResult
name|hashSetResult
init|=
name|map
operator|.
name|createHashSetResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|contains
argument_list|(
name|key
argument_list|,
name|hashSetResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|!=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Element for Key: byte[] x Hash Table: HashSet    */
specifier|public
specifier|static
class|class
name|FastBytesHashSetElement
block|{
specifier|private
name|byte
index|[]
name|key
decl_stmt|;
specifier|public
name|FastBytesHashSetElement
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
block|}
comment|/*    * Verify table for Key: byte[] x Hash Table: HashSet    */
specifier|public
specifier|static
class|class
name|VerifyFastBytesHashSet
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|FastBytesHashSetElement
index|[]
name|array
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|BytesWritable
argument_list|,
name|Integer
argument_list|>
name|keyValueMap
decl_stmt|;
specifier|public
name|VerifyFastBytesHashSet
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|array
operator|=
operator|new
name|FastBytesHashSetElement
index|[
literal|50
index|]
expr_stmt|;
comment|// We use BytesWritable because it supports Comparable for our TreeMap.
name|keyValueMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|BytesWritable
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|BytesWritable
name|keyBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|keyBytesWritable
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|BytesWritable
name|keyBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValueMap
operator|.
name|containsKey
argument_list|(
name|keyBytesWritable
argument_list|)
condition|)
block|{
comment|// Already exists.
block|}
else|else
block|{
if|if
condition|(
name|count
operator|>=
name|array
operator|.
name|length
condition|)
block|{
comment|// Grow.
name|FastBytesHashSetElement
index|[]
name|newArray
init|=
operator|new
name|FastBytesHashSetElement
index|[
name|array
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|array
operator|=
name|newArray
expr_stmt|;
block|}
name|array
index|[
name|count
index|]
operator|=
operator|new
name|FastBytesHashSetElement
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|keyValueMap
operator|.
name|put
argument_list|(
name|keyBytesWritable
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|addRandomExisting
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|Random
name|r
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|count
argument_list|)
decl_stmt|;
comment|// Already exists.
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|getKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|void
name|verify
parameter_list|(
name|VectorMapJoinFastBytesHashSet
name|map
parameter_list|)
block|{
name|int
name|mapSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapSize
operator|!=
name|count
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"map.size() does not match expected count"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
name|index
operator|++
control|)
block|{
name|FastBytesHashSetElement
name|element
init|=
name|array
index|[
name|index
index|]
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|VectorMapJoinHashSetResult
name|hashSetResult
init|=
name|map
operator|.
name|createHashSetResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|contains
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|hashSetResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|!=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

