begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDayOfMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TestVectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFWeekOfYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorDateExpressions
block|{
specifier|private
name|ExecutorService
name|runner
decl_stmt|;
comment|/* copied over from VectorUDFTimestampFieldLong */
specifier|private
name|TimestampWritableV2
name|toTimestampWritable
parameter_list|(
name|long
name|daysSinceEpoch
parameter_list|)
block|{
return|return
operator|new
name|TimestampWritableV2
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|DateWritableV2
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|daysSinceEpoch
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
index|[]
name|getAllBoundaries
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|boundaries
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTimeInMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// c.set doesn't reset millis
for|for
control|(
name|int
name|year
init|=
literal|1902
init|;
name|year
operator|<=
literal|2038
condition|;
name|year
operator|++
control|)
block|{
name|c
operator|.
name|set
argument_list|(
name|year
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|exactly
init|=
call|(
name|int
call|)
argument_list|(
name|c
operator|.
name|getTimeInMillis
argument_list|()
operator|/
operator|(
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|)
argument_list|)
decl_stmt|;
name|int
name|before
init|=
name|exactly
operator|-
literal|1
decl_stmt|;
name|int
name|after
init|=
name|exactly
operator|+
literal|1
decl_stmt|;
name|boundaries
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
name|boundaries
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|exactly
argument_list|)
argument_list|)
expr_stmt|;
name|boundaries
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Integer
index|[]
name|indices
init|=
name|boundaries
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|indices
argument_list|)
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|getVectorizedRandomRowBatch
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|lcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
name|rand
operator|.
name|nextInt
argument_list|()
operator|)
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|batch
return|;
block|}
comment|/**    * Input array is used to fill the entire size of the vector row batch    */
specifier|private
name|VectorizedRowBatch
name|getVectorizedRowBatch
parameter_list|(
name|int
index|[]
name|inputs
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|lcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|inputs
index|[
name|i
operator|%
name|inputs
operator|.
name|length
index|]
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|void
name|compareToUDFYearDate
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
throws|throws
name|HiveException
block|{
name|UDFYear
name|udf
init|=
operator|new
name|UDFYear
argument_list|()
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
block|}
argument_list|)
expr_stmt|;
name|TimestampWritableV2
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
operator|(
name|IntWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|GenericUDF
operator|.
name|DeferredObject
index|[]
block|{
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|tsw
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFYear
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
init|=
literal|null
decl_stmt|;
name|udf
operator|=
operator|new
name|VectorUDFYearDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|dateTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFYearDate
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFYear
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|int
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareToUDFDayOfMonthDate
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
throws|throws
name|HiveException
block|{
name|UDFDayOfMonth
name|udf
init|=
operator|new
name|UDFDayOfMonth
argument_list|()
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
block|}
argument_list|)
expr_stmt|;
name|TimestampWritableV2
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
operator|(
name|IntWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|GenericUDF
operator|.
name|DeferredObject
index|[]
block|{
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|tsw
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFDayOfMonth
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
init|=
literal|null
decl_stmt|;
name|udf
operator|=
operator|new
name|VectorUDFDayOfMonthDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|dateTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFDayOfMonthDate
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFDayOfMonth
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|int
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareToUDFMonthDate
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
throws|throws
name|HiveException
block|{
name|UDFMonth
name|udf
init|=
operator|new
name|UDFMonth
argument_list|()
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
block|}
argument_list|)
expr_stmt|;
name|TimestampWritableV2
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
operator|(
name|IntWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|GenericUDF
operator|.
name|DeferredObject
index|[]
block|{
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|tsw
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFMonth
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
decl_stmt|;
name|udf
operator|=
operator|new
name|VectorUDFMonthDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|dateTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFMonthDate
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFMonth
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|int
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LongWritable
name|getLongWritable
parameter_list|(
name|TimestampWritableV2
name|i
parameter_list|)
block|{
name|LongWritable
name|result
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
name|i
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
name|void
name|compareToUDFUnixTimeStampDate
parameter_list|(
name|long
name|t
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|TimestampWritableV2
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|LongWritable
name|res
init|=
name|getLongWritable
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|get
argument_list|()
operator|!=
name|y
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%d vs %d for %d, %d\n"
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|,
name|t
argument_list|,
name|tsw
operator|.
name|getTimestamp
argument_list|()
operator|.
name|toEpochMilli
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFUnixTimeStamp
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
decl_stmt|;
name|udf
operator|=
operator|new
name|VectorUDFUnixTimeStampDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|dateTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFUnixTimeStampDate
argument_list|(
name|t
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFUnixTimeStamp
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|int
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareToUDFWeekOfYearDate
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|UDFWeekOfYear
name|udf
init|=
operator|new
name|UDFWeekOfYear
argument_list|()
decl_stmt|;
name|TimestampWritableV2
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFWeekOfYear
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpression
name|udf
decl_stmt|;
name|udf
operator|=
operator|new
name|VectorUDFWeekOfYearDate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|dateTypeInfo
block|}
argument_list|)
expr_stmt|;
name|udf
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|long
name|t
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFWeekOfYearDate
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFWeekOfYear
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|int
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|runner
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|3
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"date-tester-thread-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MultiThreadedDateFormatTest
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|batchSize
init|=
literal|1024
decl_stmt|;
name|VectorUDFDateString
name|udf
init|=
operator|new
name|VectorUDFDateString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|in
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
name|LongColumnVector
name|out
init|=
operator|new
name|LongColumnVector
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|in
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|out
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|data
init|=
name|String
operator|.
name|format
argument_list|(
literal|"1999-%02d-%02d"
argument_list|,
literal|1
operator|+
operator|(
name|i
operator|%
literal|12
operator|)
argument_list|,
literal|1
operator|+
operator|(
name|i
operator|%
literal|15
operator|)
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|in
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|in
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// bug if it throws an exception
return|return
operator|(
name|Void
operator|)
literal|null
return|;
block|}
block|}
comment|// 5s timeout
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testMultiThreadedVectorUDFDate
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|MultiThreadedDateFormatTest
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|results
init|=
name|runner
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|f
range|:
name|results
control|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Interrupted while running tests"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Multi threaded operations threw unexpected Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|runner
operator|!=
literal|null
condition|)
block|{
name|runner
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|HiveException
block|{
name|TestVectorDateExpressions
name|self
init|=
operator|new
name|TestVectorDateExpressions
argument_list|()
decl_stmt|;
name|self
operator|.
name|testVectorUDFYear
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFMonth
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFDayOfMonth
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFWeekOfYear
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFUnixTimeStamp
argument_list|()
expr_stmt|;
name|self
operator|.
name|testMultiThreadedVectorUDFDate
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

