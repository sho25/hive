begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_comment
comment|/**  * Base class for VectorizedRowBatch data source.  * Used in unit test only.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FakeVectorRowBatchBase
implements|implements
name|Iterable
argument_list|<
name|VectorizedRowBatch
argument_list|>
block|{
specifier|public
specifier|abstract
name|VectorizedRowBatch
name|produceNextBatch
parameter_list|()
function_decl|;
specifier|private
name|boolean
name|iteratorProduced
decl_stmt|;
specifier|public
name|Iterator
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|iterator
parameter_list|()
block|{
assert|assert
operator|(
operator|!
name|iteratorProduced
operator|)
assert|;
return|return
name|this
operator|.
expr|new
name|BatchIterator
argument_list|()
return|;
block|}
specifier|private
class|class
name|BatchIterator
implements|implements
name|Iterator
argument_list|<
name|VectorizedRowBatch
argument_list|>
block|{
specifier|private
name|VectorizedRowBatch
name|currentBatch
decl_stmt|;
specifier|private
name|VectorizedRowBatch
name|getCurrentBatch
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|currentBatch
condition|)
block|{
name|currentBatch
operator|=
name|produceNextBatch
argument_list|()
expr_stmt|;
block|}
return|return
name|currentBatch
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|getCurrentBatch
argument_list|()
operator|.
name|size
operator|>
literal|0
return|;
block|}
specifier|public
name|VectorizedRowBatch
name|next
parameter_list|()
block|{
name|VectorizedRowBatch
name|ret
init|=
name|getCurrentBatch
argument_list|()
decl_stmt|;
name|currentBatch
operator|=
literal|null
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

