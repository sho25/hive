begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|metrics2
operator|.
name|CodahaleMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
operator|.
name|WAITING_COMPILE_OPS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_COMPILE_LOCK_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_METRICS_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PARALLEL_COMPILATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PARALLEL_COMPILATION_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_comment
comment|/**  * Class for testing HS2 compile lock behavior (serializable, parallel unbounded, parallel bounded).  */
end_comment

begin_class
specifier|public
class|class
name|TestCompileLock
block|{
specifier|private
specifier|static
specifier|final
name|int
name|CONCURRENT_COMPILATION
init|=
literal|15151
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HIVE_SERVER2_METRICS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DOWNLOADED_RESOURCES_DIR
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HIVE_SERVER2_COMPILE_LOCK_TIMEOUT
argument_list|,
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|MetricsFactory
operator|.
name|close
argument_list|()
expr_stmt|;
name|MetricsFactory
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initDriver
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|int
name|threadCount
parameter_list|)
throws|throws
name|Exception
block|{
name|driver
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|resetParallelCompilationLimit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|verifyThatWaitingCompileOpsCountIsEqualTo
argument_list|(
name|count
operator|.
name|decrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|driver
argument_list|)
operator|.
name|compile
argument_list|(
name|eq
argument_list|(
literal|"<QUERY>"
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializableCompilation
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|initDriver
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
init|=
name|compileAndRespond
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|verifyThatWaitingCompileOpsCountIsEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyThatTimedOutCompileOpsCountIsZero
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
name|verifyThatNoConcurrentCompilationWasIndeed
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelCompilationWithSingleQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION_LIMIT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|initDriver
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
init|=
name|compileAndRespond
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|verifyThatWaitingCompileOpsCountIsEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyThatTimedOutCompileOpsCountIsZero
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
name|verifyThatNoConcurrentCompilationWasIndeed
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelCompilationWithUnboundedQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION_LIMIT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|initDriver
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
init|=
name|compileAndRespond
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|verifyThatWaitingCompileOpsCountIsEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyThatTimedOutCompileOpsCountIsZero
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
name|verifyThatConcurrentCompilationWasIndeed
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelCompilationWithUnboundedQuotaAndSingleSession
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION_LIMIT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|initDriver
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
init|=
name|compileAndRespond
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|verifyThatWaitingCompileOpsCountIsEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyThatTimedOutCompileOpsCountIsZero
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
name|verifyThatNoConcurrentCompilationWasIndeed
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelCompilationTimeoutWithSingleQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION_LIMIT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HIVE_SERVER2_COMPILE_LOCK_TIMEOUT
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|initDriver
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
init|=
name|compileAndRespond
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|verifyThatWaitingCompileOpsCountIsEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyThatTimedOutCompileOpsCountIsNotZero
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelCompilationWithSingleQuotaAndZeroTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION_LIMIT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HIVE_SERVER2_COMPILE_LOCK_TIMEOUT
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|initDriver
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
init|=
name|compileAndRespond
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|verifyThatWaitingCompileOpsCountIsEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyThatTimedOutCompileOpsCountIsZero
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
name|verifyThatNoConcurrentCompilationWasIndeed
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelCompilationWithMultipleQuotas
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION_LIMIT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|initDriver
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
init|=
name|compileAndRespond
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|verifyThatWaitingCompileOpsCountIsEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyThatTimedOutCompileOpsCountIsZero
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
name|verifyThatConcurrentCompilationWasIndeed
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelCompilationWithMultipleQuotasAndClientSessionConcurrency
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION_LIMIT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|initDriver
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
argument_list|>
argument_list|>
name|callables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|callables
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|compileAndRespond
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|callables
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
argument_list|>
argument_list|>
name|futures
init|=
name|pool
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|responseList
operator|.
name|addAll
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|verifyThatWaitingCompileOpsCountIsEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyThatTimedOutCompileOpsCountIsZero
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
name|verifyThatConcurrentCompilationWasIndeed
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|compileAndRespond
parameter_list|(
name|int
name|threadCount
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|compileAndRespond
argument_list|(
literal|false
argument_list|,
name|threadCount
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|compileAndRespond
parameter_list|(
name|boolean
name|reuseSession
parameter_list|,
name|int
name|threadCount
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SessionState
name|sessionState
init|=
operator|new
name|SessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|CommandProcessorResponse
argument_list|>
argument_list|>
name|callables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|callables
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
name|SessionState
name|ss
init|=
operator|(
name|reuseSession
operator|)
condition|?
name|sessionState
else|:
operator|new
name|SessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SessionState
operator|.
name|setCurrentSessionState
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"<QUERY>"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SessionState
operator|.
name|detachSession
argument_list|()
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|callables
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|CommandProcessorResponse
argument_list|>
argument_list|>
name|futures
init|=
name|pool
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|future
range|:
name|futures
control|)
block|{
try|try
block|{
name|responseList
operator|.
name|add
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|responseList
operator|.
name|add
argument_list|(
operator|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|CommandProcessorResponse
operator|)
condition|?
operator|new
name|CommandProcessorResponse
argument_list|(
name|ErrorMsg
operator|.
name|COMPILE_LOCK_TIMED_OUT
operator|.
name|getErrorCode
argument_list|()
argument_list|)
else|:
operator|new
name|CommandProcessorResponse
argument_list|(
name|CONCURRENT_COMPILATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
return|return
name|responseList
return|;
block|}
specifier|private
name|void
name|resetParallelCompilationLimit
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Enum
argument_list|<
name|?
argument_list|>
name|compileLock
init|=
name|createEnumInstance
argument_list|(
literal|"instance"
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.ql.lock"
operator|+
literal|".CompileLockFactory$SessionWithQuotaCompileLock"
argument_list|)
argument_list|)
decl_stmt|;
name|Field
name|field
init|=
name|compileLock
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"globalCompileQuotas"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|compileLimit
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HIVE_SERVER2_PARALLEL_COMPILATION_LIMIT
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|compileLock
argument_list|,
operator|new
name|Semaphore
argument_list|(
name|compileLimit
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|createEnumInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
return|return
name|Enum
operator|.
name|valueOf
argument_list|(
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
name|void
name|verifyThatTimedOutCompileOpsCountIsZero
parameter_list|(
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
parameter_list|)
block|{
name|verifyErrorCount
argument_list|(
name|ErrorMsg
operator|.
name|COMPILE_LOCK_TIMED_OUT
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|responseList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyThatTimedOutCompileOpsCountIsNotZero
parameter_list|(
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
parameter_list|)
block|{
name|verifyErrorCount
argument_list|(
name|ErrorMsg
operator|.
name|COMPILE_LOCK_TIMED_OUT
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|responseList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyThatConcurrentCompilationWasIndeed
parameter_list|(
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
parameter_list|)
block|{
name|verifyErrorCount
argument_list|(
name|CONCURRENT_COMPILATION
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|responseList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyThatNoConcurrentCompilationWasIndeed
parameter_list|(
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
parameter_list|)
block|{
name|verifyErrorCount
argument_list|(
name|CONCURRENT_COMPILATION
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|responseList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyErrorCount
parameter_list|(
name|int
name|code
parameter_list|,
name|Matcher
argument_list|<
name|Integer
argument_list|>
name|matcher
parameter_list|,
name|List
argument_list|<
name|CommandProcessorResponse
argument_list|>
name|responseList
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CommandProcessorResponse
name|response
range|:
name|responseList
control|)
block|{
if|if
condition|(
name|code
operator|==
name|response
operator|.
name|getResponseCode
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|count
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyThatWaitingCompileOpsCountIsEqualTo
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|Counter
name|counter
init|=
name|getCounter
argument_list|(
name|WAITING_COMPILE_OPS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|counter
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counter
operator|.
name|getCount
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|count
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Counter
name|getCounter
parameter_list|(
name|String
name|counter
parameter_list|)
block|{
name|CodahaleMetrics
name|metrics
init|=
operator|(
name|CodahaleMetrics
operator|)
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counters
init|=
name|metrics
operator|.
name|getMetricRegistry
argument_list|()
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|counters
argument_list|)
expr_stmt|;
return|return
name|counters
operator|.
name|get
argument_list|(
name|counter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

