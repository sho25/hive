begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests here are for micro-managed tables:  * specifically INSERT OVERWRITE statements and Major/Minor Compactions.  */
end_comment

begin_class
specifier|public
class|class
name|TestTxnCommandsForMmTable
extends|extends
name|TxnCommandsBaseForTests
block|{
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTxnCommandsForMmTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestTxnCommands
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_WAREHOUSE_DIR
init|=
name|TEST_DATA_DIR
operator|+
literal|"/warehouse"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|getTestDataDir
parameter_list|()
block|{
return|return
name|TEST_DATA_DIR
return|;
block|}
enum|enum
name|TableExtended
block|{
name|NONACIDPART
argument_list|(
literal|"nonAcidPart"
argument_list|,
literal|"p"
argument_list|)
block|,
name|MMTBL
argument_list|(
literal|"mmTbl"
argument_list|)
block|,
name|MMTBL2
argument_list|(
literal|"mmTbl2"
argument_list|)
block|,
name|MMTBLPART
argument_list|(
literal|"mmTblPart"
argument_list|,
literal|"p"
argument_list|)
block|;
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|String
name|partitionColumns
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
name|String
name|getPartitionColumns
parameter_list|()
block|{
return|return
name|partitionColumns
return|;
block|}
name|TableExtended
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|TableExtended
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|partitionColumns
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|partitionColumns
operator|=
name|partitionColumns
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUpInternal
argument_list|()
expr_stmt|;
name|setUpInternalExtended
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|setUpInternalExtended
parameter_list|(
name|boolean
name|isOrcFormat
parameter_list|)
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPREDMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEFETCHTASKCONVERSION
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
operator|+
literal|"(a int, b int) partitioned by (p string) stored as orc TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOrcFormat
condition|)
block|{
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a int, b int) TBLPROPERTIES ('transactional'='true', 'transactional_properties'='insert_only')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|TableExtended
operator|.
name|MMTBL2
operator|+
literal|"(a int, b int) TBLPROPERTIES ('transactional'='true', 'transactional_properties'='insert_only')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|"(a int, b int) partitioned by (p string) TBLPROPERTIES ('transactional'='true', 'transactional_properties'='insert_only')"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a int, b int) stored as orc TBLPROPERTIES ('transactional'='true', 'transactional_properties'='insert_only')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|TableExtended
operator|.
name|MMTBL2
operator|+
literal|"(a int, b int) stored as orc TBLPROPERTIES ('transactional'='true', 'transactional_properties'='insert_only')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|"(a int, b int) partitioned by (p string) stored as orc TBLPROPERTIES ('transactional'='true', 'transactional_properties'='insert_only')"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|dropTables
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|dropTables
argument_list|()
expr_stmt|;
for|for
control|(
name|TestTxnCommandsForMmTable
operator|.
name|TableExtended
name|t
range|:
name|TestTxnCommandsForMmTable
operator|.
name|TableExtended
operator|.
name|values
argument_list|()
control|)
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test compaction for Micro-managed table    * 1. Regular compaction shouldn't impact any valid subdirectories of MM tables    * 2. Compactions will only remove subdirectories for aborted transactions of MM tables, if any    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMmTableCompaction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1. Insert some rows into MM table
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(3,4)"
argument_list|)
expr_stmt|;
comment|// There should be 2 delta directories
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// 2. Perform a MINOR compaction. Since nothing was aborted, subdirs should stay.
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" compact 'MINOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// 3. Let a transaction be aborted
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(5,6)"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// There should be 3 delta directories. The new one is the aborted one.
name|verifyDirAndResult
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// 4. Perform a MINOR compaction again. This time it will remove the subdir for aborted transaction.
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" compact 'MINOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// The worker should remove the subdir for aborted transaction
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// 5. Run Cleaner. Shouldn't impact anything.
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a scenario, on a micro-managed table, where an IOW comes in    * after a MAJOR compaction, and then a MINOR compaction is initiated.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwriteForMmTable
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
decl_stmt|;
comment|// 1. Insert two rows to an MM table
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(3,4)"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 delta dirs in the location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 2. INSERT OVERWRITE
comment|// Prepare data for the source table
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"(a,b) values(5,6),(7,8)"
argument_list|)
expr_stmt|;
comment|// Insert overwrite MM table from source table
name|runStatementOnDriver
argument_list|(
literal|"insert overwrite table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 delta dirs, plus 1 base dir in the location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|baseCount
init|=
literal|0
decl_stmt|;
name|int
name|deltaCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirName
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|deltaCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|baseCount
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deltaCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|baseCount
argument_list|)
expr_stmt|;
comment|// Verify query result
name|int
index|[]
index|[]
name|resultData
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a scenario, on a partitioned micro-managed table, that an IOW comes in    * before a MAJOR compaction happens.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwriteForPartitionedMmTable
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
decl_stmt|;
comment|// 1. Insert two rows to a partitioned MM table.
name|int
index|[]
index|[]
name|valuesOdd
init|=
block|{
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|valuesEven
init|=
block|{
block|{
literal|2
block|,
literal|1
block|}
block|,
block|{
literal|4
block|,
literal|3
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" PARTITION(p='odd') "
operator|+
name|makeValuesClause
argument_list|(
name|valuesOdd
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" PARTITION(p='even') "
operator|+
name|makeValuesClause
argument_list|(
name|valuesEven
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify dirs
name|String
index|[]
name|pStrings
init|=
block|{
literal|"/p=odd"
block|,
literal|"/p=even"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBLPART
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
name|pStrings
index|[
name|i
index|]
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 1 delta dir per partition location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 2. INSERT OVERWRITE
comment|// Prepare data for the source table
name|int
index|[]
index|[]
name|newValsOdd
init|=
block|{
block|{
literal|5
block|,
literal|5
block|}
block|,
block|{
literal|11
block|,
literal|11
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|newValsEven
init|=
block|{
block|{
literal|2
block|,
literal|2
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
operator|+
literal|" PARTITION(p='odd') "
operator|+
name|makeValuesClause
argument_list|(
name|newValsOdd
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
operator|+
literal|" PARTITION(p='even') "
operator|+
name|makeValuesClause
argument_list|(
name|newValsEven
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert overwrite MM table from source table
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
literal|null
decl_stmt|;
name|String
name|s
init|=
literal|"insert overwrite table "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" PARTITION(p='odd') "
operator|+
literal|" select a,b from "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
operator|+
literal|" where "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
operator|+
literal|".p='odd'"
decl_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"explain formatted "
operator|+
name|s
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Explain formatted: "
operator|+
name|rs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"insert overwrite table "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" PARTITION(p='even') "
operator|+
literal|" select a,b from "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
operator|+
literal|" where "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
operator|+
literal|".p='even'"
expr_stmt|;
name|runStatementOnDriver
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// Verify resulting dirs.
name|boolean
name|sawBase
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|baseDirs
init|=
block|{
literal|""
block|,
literal|""
block|}
decl_stmt|;
name|int
name|deltaCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|h
init|=
literal|0
init|;
name|h
operator|<
name|pStrings
operator|.
name|length
condition|;
name|h
operator|++
control|)
block|{
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBLPART
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
name|pStrings
index|[
name|h
index|]
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// There should be 1 delta dir, plus a base dir in the location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirName
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|deltaCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sawBase
operator|=
literal|true
expr_stmt|;
name|baseDirs
index|[
name|h
index|]
operator|=
name|dirName
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|baseDirs
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deltaCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawBase
argument_list|)
expr_stmt|;
name|deltaCount
operator|=
literal|0
expr_stmt|;
name|sawBase
operator|=
literal|false
expr_stmt|;
block|}
comment|// Verify query result
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" where p='even' order by a,b"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rExpectedEven
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpectedEven
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" where p='odd' order by a,b"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rExpectedOdd
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|5
block|,
literal|5
block|}
block|,
block|{
literal|11
block|,
literal|11
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpectedOdd
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|// 3. Perform a major compaction. Nothing should change.
comment|// Both deltas and base dirs should have the same name.
comment|// Re-verify directory layout and query result by using the same logic as above
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" PARTITION(p='odd') "
operator|+
literal|" compact 'MAJOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" PARTITION(p='even') "
operator|+
literal|" compact 'MAJOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|h
init|=
literal|0
init|;
name|h
operator|<
name|pStrings
operator|.
name|length
condition|;
name|h
operator|++
control|)
block|{
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBLPART
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
name|pStrings
index|[
name|h
index|]
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 delta dirs, plus a base dir in the location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|sawBase
operator|=
literal|false
expr_stmt|;
name|deltaCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirName
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|deltaCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sawBase
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"BASE ERROR: "
operator|+
name|dirName
argument_list|,
name|dirName
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|baseDirs
index|[
name|h
index|]
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deltaCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawBase
argument_list|)
expr_stmt|;
name|deltaCount
operator|=
literal|0
expr_stmt|;
name|sawBase
operator|=
literal|false
expr_stmt|;
block|}
comment|// Verify query result
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rExpected
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|5
block|,
literal|5
block|}
block|,
block|{
literal|11
block|,
literal|11
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpected
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|// 4. Run Cleaner. It should remove the 2 delta dirs.
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// There should be only 1 directory left: base_xxxxxxx.
comment|// The delta dirs should have been cleaned up.
for|for
control|(
name|int
name|h
init|=
literal|0
init|;
name|h
operator|<
name|pStrings
operator|.
name|length
condition|;
name|h
operator|++
control|)
block|{
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBLPART
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
name|pStrings
index|[
name|h
index|]
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|baseDirs
index|[
name|h
index|]
argument_list|,
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify query result
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpected
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a scenario, on a dynamically partitioned micro-managed table, that an IOW comes in    * before a MAJOR compaction happens.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwriteWithDynamicPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
decl_stmt|;
comment|// 1. Insert two rows to a partitioned MM table.
name|int
index|[]
index|[]
name|valuesOdd
init|=
block|{
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|valuesEven
init|=
block|{
block|{
literal|2
block|,
literal|1
block|}
block|,
block|{
literal|4
block|,
literal|3
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" PARTITION(p='odd') "
operator|+
name|makeValuesClause
argument_list|(
name|valuesOdd
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" PARTITION(p='even') "
operator|+
name|makeValuesClause
argument_list|(
name|valuesEven
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify dirs
name|String
index|[]
name|pStrings
init|=
block|{
literal|"/p=odd"
block|,
literal|"/p=even"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBLPART
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
name|pStrings
index|[
name|i
index|]
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 1 delta dir per partition location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 2. INSERT OVERWRITE
comment|// Prepare data for the source table
name|int
index|[]
index|[]
name|newValsOdd
init|=
block|{
block|{
literal|5
block|,
literal|5
block|}
block|,
block|{
literal|11
block|,
literal|11
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|newValsEven
init|=
block|{
block|{
literal|2
block|,
literal|2
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
operator|+
literal|" PARTITION(p='odd') "
operator|+
name|makeValuesClause
argument_list|(
name|newValsOdd
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
operator|+
literal|" PARTITION(p='even') "
operator|+
name|makeValuesClause
argument_list|(
name|newValsEven
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert overwrite table "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" partition(p) select a,b,p from "
operator|+
name|TableExtended
operator|.
name|NONACIDPART
argument_list|)
expr_stmt|;
comment|// Verify resulting dirs.
name|boolean
name|sawBase
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|baseDirs
init|=
block|{
literal|""
block|,
literal|""
block|}
decl_stmt|;
name|int
name|deltaCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|h
init|=
literal|0
init|;
name|h
operator|<
name|pStrings
operator|.
name|length
condition|;
name|h
operator|++
control|)
block|{
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBLPART
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
name|pStrings
index|[
name|h
index|]
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 1 delta dir, plus a base dir in the location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// steve
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirName
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|deltaCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sawBase
operator|=
literal|true
expr_stmt|;
name|baseDirs
index|[
name|h
index|]
operator|=
name|dirName
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|baseDirs
index|[
name|h
index|]
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deltaCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawBase
argument_list|)
expr_stmt|;
name|deltaCount
operator|=
literal|0
expr_stmt|;
name|sawBase
operator|=
literal|false
expr_stmt|;
block|}
comment|// Verify query result
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
literal|null
decl_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" where p='even' order by a,b"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rExpectedEven
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpectedEven
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" where p='odd' order by a,b"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rExpectedOdd
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|5
block|,
literal|5
block|}
block|,
block|{
literal|11
block|,
literal|11
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpectedOdd
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|// Verify query result
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBLPART
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rExpected
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|5
block|,
literal|5
block|}
block|,
block|{
literal|11
block|,
literal|11
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpected
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwriteWithUnionAll
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
decl_stmt|;
comment|// 1. Insert two rows to an MM table
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(3,4)"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 delta dirs in the location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 2. Insert Overwrite.
name|int
index|[]
index|[]
name|values
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|}
block|,
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|8
block|}
block|,
block|{
literal|9
block|,
literal|10
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
name|TestTxnCommands2
operator|.
name|makeValuesClause
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert overwrite table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" where a between 1 and 3 union all select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" where a between 5 and 7"
argument_list|)
expr_stmt|;
comment|// Verify resulting dirs.
name|boolean
name|sawBase
init|=
literal|false
decl_stmt|;
name|String
name|baseDir
init|=
literal|""
decl_stmt|;
name|int
name|deltaCount
init|=
literal|0
decl_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 delta dirs, plus a base dir in the location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirName
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|deltaCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sawBase
operator|=
literal|true
expr_stmt|;
name|baseDir
operator|=
name|dirName
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deltaCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawBase
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|rExpected
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|}
block|,
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|8
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpected
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|// 4. Perform a major compaction.
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" compact 'MAJOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// 5. Run Cleaner. It should remove the 2 delta dirs.
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpected
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|// Verify resulting dirs.
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be one base dir in the location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|sawBase
operator|=
literal|false
expr_stmt|;
name|deltaCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirName
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|deltaCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sawBase
operator|=
literal|true
expr_stmt|;
name|baseDir
operator|=
name|dirName
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deltaCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawBase
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|rExpected
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOperationsOnCompletedTxnComponentsForMmTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Insert two rows into the table.
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(3,4)"
argument_list|)
expr_stmt|;
comment|// There should be 2 delta directories
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from TXNS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXNS"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Initiate a major compaction request on the table.
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" compact 'MAJOR'"
argument_list|)
expr_stmt|;
comment|// Run worker.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Run Cleaner.
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from TXNS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXNS"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDirAndResult
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotIsolationWithAbortedTxnOnMmTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Insert two rows into the table.
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|"(a,b) values(3,4)"
argument_list|)
expr_stmt|;
comment|// There should be 2 delta directories
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Initiate a minor compaction request on the table.
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" compact 'MINOR'"
argument_list|)
expr_stmt|;
comment|// Run Compaction Worker to do compaction.
comment|// But we do not compact a MM table but only transit the compaction request to
comment|// "ready for cleaning" state in this case.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Start an INSERT statement transaction and roll back this transaction.
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" values (5, 6)"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|/**      * There should be 3 delta directories. The new one is the aborted one.      *      * target/tmp/org.apache.hadoop.hive.ql.TestTxnCommands-1541637725613/warehouse/mmtbl/      ├── delta_0000001_0000001_0000      │   └── 000000_0      ├── delta_0000002_0000002_0000      │   └── 000000_0      └── delta_0000003_0000003_0000          └── 000000_0       */
name|verifyDirAndResult
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Execute SELECT statement and verify the result set (should be two rows).
name|int
index|[]
index|[]
name|expected
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|expected
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|// Run Cleaner.
comment|// delta_0000003_0000003_0000 produced by the aborted txn is removed even though it is
comment|// above COMPACTION_QUEUE.CQ_HIGHEST_WRITE_ID since all data in it is aborted
comment|// This run does transition the entry "successful".
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Execute SELECT and verify that aborted operation is not counted for MM table.
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|expected
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|// Run initiator to execute CompactionTxnHandler.cleanEmptyAbortedTxns()
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from TXNS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXNS"
argument_list|)
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runInitiator
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// This run of Initiator doesn't add any compaction_queue entry
comment|// since we only have one MM table with data - we don't compact MM tables.
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from TXNS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXNS"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Execute SELECT statement and verify that aborted INSERT statement is not counted.
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|expected
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|// Initiate a minor compaction request on the table.
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" compact 'MINOR'"
argument_list|)
expr_stmt|;
comment|// Run worker to delete aborted transaction's delta directory.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from TXNS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXNS"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXN_COMPONENTS"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDirAndResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Run Cleaner to delete rows for the aborted transaction
comment|// from TXN_COMPONENTS.
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// Run initiator to clean the row fro the aborted transaction from TXNS.
name|TestTxnCommands2
operator|.
name|runInitiator
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from TXNS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXNS"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXN_COMPONENTS"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyDirAndResult
parameter_list|(
name|int
name|expectedDeltas
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyDirAndResult
argument_list|(
name|expectedDeltas
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyDirAndResult
parameter_list|(
name|int
name|expectedDeltas
parameter_list|,
name|boolean
name|expectBaseDir
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
comment|// Verify the content of subdirs
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|TableExtended
operator|.
name|MMTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
decl_stmt|;
name|int
name|sawDeltaTimes
init|=
literal|0
decl_stmt|;
name|int
name|sawBaseTimes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|sawDeltaTimes
operator|++
expr_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"000000_0"
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sawBaseTimes
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDeltas
argument_list|,
name|sawDeltaTimes
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectBaseDir
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1 base directory expected"
argument_list|,
literal|1
argument_list|,
name|sawBaseTimes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0 base directories expected"
argument_list|,
literal|0
argument_list|,
name|sawBaseTimes
argument_list|)
expr_stmt|;
block|}
comment|// Verify query result
name|int
index|[]
index|[]
name|resultData
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|TableExtended
operator|.
name|MMTBL
operator|+
literal|" order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

