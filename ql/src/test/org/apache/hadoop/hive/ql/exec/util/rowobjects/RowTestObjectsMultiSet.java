begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
operator|.
name|RowTestObjects
import|;
end_import

begin_class
specifier|public
class|class
name|RowTestObjectsMultiSet
block|{
specifier|public
enum|enum
name|RowFlag
block|{
name|NONE
argument_list|(
literal|0
argument_list|)
block|,
name|REGULAR
argument_list|(
literal|0x01
argument_list|)
block|,
name|LEFT_OUTER
argument_list|(
literal|0x02
argument_list|)
block|,
name|FULL_OUTER
argument_list|(
literal|0x04
argument_list|)
block|;
specifier|public
specifier|final
name|long
name|value
decl_stmt|;
name|RowFlag
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Value
block|{
comment|// Mutable.
specifier|public
name|int
name|count
decl_stmt|;
specifier|public
name|long
name|rowFlags
decl_stmt|;
specifier|public
specifier|final
name|int
name|initialKeyCount
decl_stmt|;
specifier|public
specifier|final
name|int
name|initialValueCount
decl_stmt|;
specifier|public
specifier|final
name|RowFlag
name|initialRowFlag
decl_stmt|;
specifier|public
name|Value
parameter_list|(
name|int
name|count
parameter_list|,
name|RowFlag
name|rowFlag
parameter_list|,
name|int
name|totalKeyCount
parameter_list|,
name|int
name|totalValueCount
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|rowFlags
operator|=
name|rowFlag
operator|.
name|value
expr_stmt|;
name|initialKeyCount
operator|=
name|totalKeyCount
expr_stmt|;
name|initialValueCount
operator|=
name|totalValueCount
expr_stmt|;
name|initialRowFlag
operator|=
name|rowFlag
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"count "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|count
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
name|SortedMap
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
name|sortedMap
decl_stmt|;
specifier|private
name|int
name|totalKeyCount
decl_stmt|;
specifier|private
name|int
name|totalValueCount
decl_stmt|;
specifier|public
name|RowTestObjectsMultiSet
parameter_list|()
block|{
name|sortedMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
argument_list|()
expr_stmt|;
name|totalKeyCount
operator|=
literal|0
expr_stmt|;
name|totalValueCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|getTotalKeyCount
parameter_list|()
block|{
return|return
name|totalKeyCount
return|;
block|}
specifier|public
name|int
name|getTotalValueCount
parameter_list|()
block|{
return|return
name|totalValueCount
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|RowTestObjects
name|testRow
parameter_list|,
name|RowFlag
name|rowFlag
parameter_list|)
block|{
if|if
condition|(
name|sortedMap
operator|.
name|containsKey
argument_list|(
name|testRow
argument_list|)
condition|)
block|{
name|Value
name|value
init|=
name|sortedMap
operator|.
name|get
argument_list|(
name|testRow
argument_list|)
decl_stmt|;
name|value
operator|.
name|count
operator|++
expr_stmt|;
name|value
operator|.
name|rowFlags
operator||=
name|rowFlag
operator|.
name|value
expr_stmt|;
name|totalValueCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sortedMap
operator|.
name|put
argument_list|(
name|testRow
argument_list|,
operator|new
name|Value
argument_list|(
literal|1
argument_list|,
name|rowFlag
argument_list|,
operator|++
name|totalKeyCount
argument_list|,
operator|++
name|totalValueCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
name|RowTestObjects
name|testRow
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|sortedMap
operator|.
name|containsKey
argument_list|(
name|testRow
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
name|sortedMap
operator|.
name|put
argument_list|(
name|testRow
argument_list|,
operator|new
name|Value
argument_list|(
name|count
argument_list|,
name|RowFlag
operator|.
name|NONE
argument_list|,
operator|++
name|totalKeyCount
argument_list|,
operator|++
name|totalValueCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|displayRowFlags
parameter_list|(
name|long
name|rowFlags
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|RowFlag
name|rowFlag
range|:
name|RowFlag
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|rowFlags
operator|&
name|rowFlag
operator|.
name|value
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|rowFlag
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|verify
parameter_list|(
name|RowTestObjectsMultiSet
name|other
parameter_list|,
name|String
name|left
parameter_list|,
name|String
name|right
parameter_list|)
block|{
specifier|final
name|int
name|thisSize
init|=
name|this
operator|.
name|sortedMap
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|otherSize
init|=
name|other
operator|.
name|sortedMap
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|thisSize
operator|!=
name|otherSize
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* "
operator|+
name|left
operator|+
literal|" count "
operator|+
name|thisSize
operator|+
literal|" doesn't match "
operator|+
name|right
operator|+
literal|" "
operator|+
name|otherSize
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
argument_list|>
name|thisIterator
init|=
name|this
operator|.
name|sortedMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
argument_list|>
name|otherIterator
init|=
name|other
operator|.
name|sortedMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thisSize
condition|;
name|i
operator|++
control|)
block|{
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
name|thisEntry
init|=
name|thisIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
name|otherEntry
init|=
name|otherIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|thisEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|otherEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* "
operator|+
name|left
operator|+
literal|" row "
operator|+
name|thisEntry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" (rowFlags "
operator|+
name|displayRowFlags
argument_list|(
name|thisEntry
operator|.
name|getValue
argument_list|()
operator|.
name|rowFlags
argument_list|)
operator|+
literal|" count "
operator|+
name|thisEntry
operator|.
name|getValue
argument_list|()
operator|.
name|count
operator|+
literal|")"
operator|+
literal|" but found "
operator|+
name|right
operator|+
literal|" row "
operator|+
name|otherEntry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" (initialKeyCount "
operator|+
operator|+
name|otherEntry
operator|.
name|getValue
argument_list|()
operator|.
name|initialKeyCount
operator|+
literal|" initialValueCount "
operator|+
name|otherEntry
operator|.
name|getValue
argument_list|()
operator|.
name|initialValueCount
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Check multi-set count.
if|if
condition|(
name|thisEntry
operator|.
name|getValue
argument_list|()
operator|.
name|count
operator|!=
name|otherEntry
operator|.
name|getValue
argument_list|()
operator|.
name|count
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* "
operator|+
name|left
operator|+
literal|" row "
operator|+
name|thisEntry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" count "
operator|+
name|thisEntry
operator|.
name|getValue
argument_list|()
operator|.
name|count
operator|+
literal|" (rowFlags "
operator|+
name|displayRowFlags
argument_list|(
name|thisEntry
operator|.
name|getValue
argument_list|()
operator|.
name|rowFlags
argument_list|)
operator|+
literal|")"
operator|+
literal|" doesn't match "
operator|+
name|right
operator|+
literal|" row count "
operator|+
name|otherEntry
operator|.
name|getValue
argument_list|()
operator|.
name|count
operator|+
literal|" (initialKeyCount "
operator|+
operator|+
name|otherEntry
operator|.
name|getValue
argument_list|()
operator|.
name|initialKeyCount
operator|+
literal|" initialValueCount "
operator|+
name|otherEntry
operator|.
name|getValue
argument_list|()
operator|.
name|initialValueCount
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|thisSize
operator|!=
name|otherSize
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|RowTestObjectsMultiSet
name|subtract
parameter_list|(
name|RowTestObjectsMultiSet
name|other
parameter_list|)
block|{
name|RowTestObjectsMultiSet
name|result
init|=
operator|new
name|RowTestObjectsMultiSet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
argument_list|>
name|thisIterator
init|=
name|this
operator|.
name|sortedMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|thisIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
name|thisEntry
init|=
name|thisIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|sortedMap
operator|.
name|containsKey
argument_list|(
name|thisEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|Value
name|thisValue
init|=
name|thisEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Value
name|otherValue
init|=
name|other
operator|.
name|sortedMap
operator|.
name|get
argument_list|(
name|thisEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisValue
operator|.
name|count
operator|==
name|otherValue
operator|.
name|count
condition|)
block|{
continue|continue;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|thisEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|thisEntry
operator|.
name|getValue
argument_list|()
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|displayDifferences
parameter_list|(
name|RowTestObjectsMultiSet
name|other
parameter_list|,
name|String
name|left
parameter_list|,
name|String
name|right
parameter_list|)
block|{
name|RowTestObjectsMultiSet
name|leftOnly
init|=
name|this
operator|.
name|subtract
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
argument_list|>
name|leftOnlyIterator
init|=
name|leftOnly
operator|.
name|sortedMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|leftOnlyIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
name|leftOnlyEntry
init|=
name|leftOnlyIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* "
operator|+
name|left
operator|+
literal|" only row "
operator|+
name|leftOnlyEntry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" count "
operator|+
name|leftOnlyEntry
operator|.
name|getValue
argument_list|()
operator|.
name|count
operator|+
literal|" (initialRowFlag "
operator|+
name|leftOnlyEntry
operator|.
name|getValue
argument_list|()
operator|.
name|initialRowFlag
operator|.
name|name
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|RowTestObjectsMultiSet
name|rightOnly
init|=
name|other
operator|.
name|subtract
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
argument_list|>
name|rightOnlyIterator
init|=
name|rightOnly
operator|.
name|sortedMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rightOnlyIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Value
argument_list|>
name|rightOnlyEntry
init|=
name|rightOnlyIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* "
operator|+
name|right
operator|+
literal|" only row "
operator|+
name|rightOnlyEntry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" count "
operator|+
name|rightOnlyEntry
operator|.
name|getValue
argument_list|()
operator|.
name|count
operator|+
literal|" (initialRowFlag "
operator|+
name|rightOnlyEntry
operator|.
name|getValue
argument_list|()
operator|.
name|initialRowFlag
operator|.
name|name
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sortedMap
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

