begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|DDLSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GrantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GrantRevokeRoleDDL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrincipalDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrivilegeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrivilegeObjectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|RevokeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|RoleDDLDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|RoleDDLDesc
operator|.
name|RoleOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowGrantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HadoopDefaultAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveAuthorizationTaskFactory
block|{
specifier|public
specifier|static
class|class
name|DummyHiveAuthorizationTaskFactoryImpl
extends|extends
name|HiveAuthorizationTaskFactoryImpl
block|{
specifier|static
name|String
name|uriPath
init|=
literal|""
decl_stmt|;
specifier|static
name|String
name|serverName
init|=
literal|""
decl_stmt|;
specifier|public
name|DummyHiveAuthorizationTaskFactoryImpl
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Hive
name|db
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|PrivilegeObjectDesc
name|parsePrivObject
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ASTNode
name|gchild
init|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_URI_TYPE
condition|)
block|{
name|uriPath
operator|=
name|gchild
operator|.
name|getText
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SERVER_TYPE
condition|)
block|{
name|serverName
operator|=
name|gchild
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|parsePrivObject
argument_list|(
name|ast
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|uriPath
operator|=
literal|""
expr_stmt|;
name|serverName
operator|=
literal|""
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|SELECT
init|=
literal|"SELECT"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE
init|=
literal|"table1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_QNAME
init|=
name|DB
operator|+
literal|"."
operator|+
name|TABLE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP
init|=
literal|"group1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROLE
init|=
literal|"role1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user1"
decl_stmt|;
specifier|private
name|ParseDriver
name|parseDriver
decl_stmt|;
specifier|private
name|DDLSemanticAnalyzer
name|analyzer
decl_stmt|;
specifier|private
name|QueryState
name|queryState
decl_stmt|;
specifier|private
name|Context
name|context
decl_stmt|;
specifier|private
name|String
name|currentUser
decl_stmt|;
specifier|private
name|Hive
name|db
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
specifier|private
name|Partition
name|partition
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|queryState
operator|=
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|HiveConf
name|conf
init|=
name|queryState
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_TASK_FACTORY
argument_list|,
name|TestHiveAuthorizationTaskFactory
operator|.
name|DummyHiveAuthorizationTaskFactoryImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|db
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Hive
operator|.
name|class
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|Table
argument_list|(
name|DB
argument_list|,
name|TABLE
argument_list|)
expr_stmt|;
name|partition
operator|=
operator|new
name|Partition
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|parseDriver
operator|=
operator|new
name|ParseDriver
argument_list|()
expr_stmt|;
name|analyzer
operator|=
operator|new
name|DDLSemanticAnalyzer
argument_list|(
name|queryState
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|DB
argument_list|,
name|TABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|TABLE_QNAME
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|db
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|HadoopDefaultAuthenticator
name|auth
init|=
operator|new
name|HadoopDefaultAuthenticator
argument_list|()
decl_stmt|;
name|auth
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|currentUser
operator|=
name|auth
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|DummyHiveAuthorizationTaskFactoryImpl
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * CREATE ROLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateRole
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"CREATE ROLE "
operator|+
name|ROLE
argument_list|)
decl_stmt|;
name|RoleDDLDesc
name|roleDesc
init|=
name|work
operator|.
name|getRoleDDLDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Role should not be null"
argument_list|,
name|roleDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RoleOperation
operator|.
name|CREATE_ROLE
argument_list|,
name|roleDesc
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Did not expect a group"
argument_list|,
name|roleDesc
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|roleDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * DROP ROLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testDropRole
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"DROp ROLE "
operator|+
name|ROLE
argument_list|)
decl_stmt|;
name|RoleDDLDesc
name|roleDesc
init|=
name|work
operator|.
name|getRoleDDLDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Role should not be null"
argument_list|,
name|roleDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RoleOperation
operator|.
name|DROP_ROLE
argument_list|,
name|roleDesc
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Did not expect a group"
argument_list|,
name|roleDesc
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|roleDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * GRANT ... ON TABLE ... TO USER ...    */
annotation|@
name|Test
specifier|public
name|void
name|testGrantUserTable
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"GRANT "
operator|+
name|SELECT
operator|+
literal|" ON TABLE "
operator|+
name|TABLE
operator|+
literal|" TO USER "
operator|+
name|USER
argument_list|)
decl_stmt|;
name|GrantDesc
name|grantDesc
init|=
name|work
operator|.
name|getGrantDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipals
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrivilegeDesc
name|privilege
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrivileges
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Privilege
operator|.
name|SELECT
argument_list|,
name|privilege
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_QNAME
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * GRANT ... ON TABLE ... TO ROLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testGrantRoleTable
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"GRANT "
operator|+
name|SELECT
operator|+
literal|" ON TABLE "
operator|+
name|TABLE
operator|+
literal|" TO ROLE "
operator|+
name|ROLE
argument_list|)
decl_stmt|;
name|GrantDesc
name|grantDesc
init|=
name|work
operator|.
name|getGrantDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipals
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrivilegeDesc
name|privilege
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrivileges
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Privilege
operator|.
name|SELECT
argument_list|,
name|privilege
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_QNAME
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * GRANT ... ON TABLE ... TO GROUP ...    */
annotation|@
name|Test
specifier|public
name|void
name|testGrantGroupTable
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"GRANT "
operator|+
name|SELECT
operator|+
literal|" ON TABLE "
operator|+
name|TABLE
operator|+
literal|" TO GROUP "
operator|+
name|GROUP
argument_list|)
decl_stmt|;
name|GrantDesc
name|grantDesc
init|=
name|work
operator|.
name|getGrantDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipals
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|GROUP
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrivilegeDesc
name|privilege
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrivileges
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Privilege
operator|.
name|SELECT
argument_list|,
name|privilege
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_QNAME
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * REVOKE ... ON TABLE ... FROM USER ...    */
annotation|@
name|Test
specifier|public
name|void
name|testRevokeUserTable
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"REVOKE "
operator|+
name|SELECT
operator|+
literal|" ON TABLE "
operator|+
name|TABLE
operator|+
literal|" FROM USER "
operator|+
name|USER
argument_list|)
decl_stmt|;
name|RevokeDesc
name|grantDesc
init|=
name|work
operator|.
name|getRevokeDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Revoke should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipals
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrivilegeDesc
name|privilege
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrivileges
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Privilege
operator|.
name|SELECT
argument_list|,
name|privilege
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_QNAME
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * REVOKE ... ON TABLE ... FROM ROLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testRevokeRoleTable
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"REVOKE "
operator|+
name|SELECT
operator|+
literal|" ON TABLE "
operator|+
name|TABLE
operator|+
literal|" FROM ROLE "
operator|+
name|ROLE
argument_list|)
decl_stmt|;
name|RevokeDesc
name|grantDesc
init|=
name|work
operator|.
name|getRevokeDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Revoke should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipals
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrivilegeDesc
name|privilege
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrivileges
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Privilege
operator|.
name|SELECT
argument_list|,
name|privilege
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_QNAME
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * REVOKE ... ON TABLE ... FROM GROUP ...    */
annotation|@
name|Test
specifier|public
name|void
name|testRevokeGroupTable
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"REVOKE "
operator|+
name|SELECT
operator|+
literal|" ON TABLE "
operator|+
name|TABLE
operator|+
literal|" FROM GROUP "
operator|+
name|GROUP
argument_list|)
decl_stmt|;
name|RevokeDesc
name|grantDesc
init|=
name|work
operator|.
name|getRevokeDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Revoke should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipals
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|GROUP
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrivilegeDesc
name|privilege
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrivileges
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Privilege
operator|.
name|SELECT
argument_list|,
name|privilege
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_QNAME
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * GRANT ROLE ... TO USER ...    */
annotation|@
name|Test
specifier|public
name|void
name|testGrantRoleUser
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"GRANT ROLE "
operator|+
name|ROLE
operator|+
literal|" TO USER "
operator|+
name|USER
argument_list|)
decl_stmt|;
name|GrantRevokeRoleDDL
name|grantDesc
init|=
name|work
operator|.
name|getGrantRevokeRoleDDL
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected grant "
argument_list|,
name|grantDesc
operator|.
name|getGrant
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"With admin option is not specified"
argument_list|,
name|grantDesc
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentUser
argument_list|,
name|grantDesc
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantDesc
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|role
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getRoles
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * GRANT ROLE ... TO ROLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testGrantRoleRole
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"GRANT ROLE "
operator|+
name|ROLE
operator|+
literal|" TO ROLE "
operator|+
name|ROLE
argument_list|)
decl_stmt|;
name|GrantRevokeRoleDDL
name|grantDesc
init|=
name|work
operator|.
name|getGrantRevokeRoleDDL
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected grant "
argument_list|,
name|grantDesc
operator|.
name|getGrant
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"With admin option is not specified"
argument_list|,
name|grantDesc
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentUser
argument_list|,
name|grantDesc
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantDesc
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|role
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getRoles
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * GRANT ROLE ... TO GROUP ...    */
annotation|@
name|Test
specifier|public
name|void
name|testGrantRoleGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"GRANT ROLE "
operator|+
name|ROLE
operator|+
literal|" TO GROUP "
operator|+
name|GROUP
argument_list|)
decl_stmt|;
name|GrantRevokeRoleDDL
name|grantDesc
init|=
name|work
operator|.
name|getGrantRevokeRoleDDL
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected grant "
argument_list|,
name|grantDesc
operator|.
name|getGrant
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"With admin option is not specified"
argument_list|,
name|grantDesc
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentUser
argument_list|,
name|grantDesc
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantDesc
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|role
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getRoles
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|GROUP
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * REVOKE ROLE ... FROM USER ...    */
annotation|@
name|Test
specifier|public
name|void
name|testRevokeRoleUser
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"REVOKE ROLE "
operator|+
name|ROLE
operator|+
literal|" FROM USER "
operator|+
name|USER
argument_list|)
decl_stmt|;
name|GrantRevokeRoleDDL
name|grantDesc
init|=
name|work
operator|.
name|getGrantRevokeRoleDDL
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Did not expect grant "
argument_list|,
name|grantDesc
operator|.
name|getGrant
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"With admin option is not specified"
argument_list|,
name|grantDesc
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentUser
argument_list|,
name|grantDesc
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantDesc
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|role
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getRoles
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * REVOKE ROLE ... FROM ROLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testRevokeRoleRole
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"REVOKE ROLE "
operator|+
name|ROLE
operator|+
literal|" FROM ROLE "
operator|+
name|ROLE
argument_list|)
decl_stmt|;
name|GrantRevokeRoleDDL
name|grantDesc
init|=
name|work
operator|.
name|getGrantRevokeRoleDDL
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Did not expect grant "
argument_list|,
name|grantDesc
operator|.
name|getGrant
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"With admin option is not specified"
argument_list|,
name|grantDesc
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentUser
argument_list|,
name|grantDesc
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantDesc
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|role
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getRoles
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * REVOKE ROLE ... FROM GROUP ...    */
annotation|@
name|Test
specifier|public
name|void
name|testRevokeRoleGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"REVOKE ROLE "
operator|+
name|ROLE
operator|+
literal|" FROM GROUP "
operator|+
name|GROUP
argument_list|)
decl_stmt|;
name|GrantRevokeRoleDDL
name|grantDesc
init|=
name|work
operator|.
name|getGrantRevokeRoleDDL
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Did not expect grant "
argument_list|,
name|grantDesc
operator|.
name|getGrant
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"With admin option is not specified"
argument_list|,
name|grantDesc
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentUser
argument_list|,
name|grantDesc
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantDesc
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|role
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getRoles
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|ListSizeMatcher
operator|.
name|inList
argument_list|(
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|GROUP
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * SHOW ROLE GRANT USER ...    */
annotation|@
name|Test
specifier|public
name|void
name|testShowRoleGrantUser
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"SHOW ROLE GRANT USER "
operator|+
name|USER
argument_list|)
decl_stmt|;
name|RoleDDLDesc
name|roleDesc
init|=
name|work
operator|.
name|getRoleDDLDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Role should not be null"
argument_list|,
name|roleDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RoleOperation
operator|.
name|SHOW_ROLE_GRANT
argument_list|,
name|roleDesc
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|roleDesc
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|roleDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * SHOW ROLE GRANT ROLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testShowRoleGrantRole
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"SHOW ROLE GRANT ROLE "
operator|+
name|ROLE
argument_list|)
decl_stmt|;
name|RoleDDLDesc
name|roleDesc
init|=
name|work
operator|.
name|getRoleDDLDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Role should not be null"
argument_list|,
name|roleDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RoleOperation
operator|.
name|SHOW_ROLE_GRANT
argument_list|,
name|roleDesc
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|roleDesc
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|roleDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * SHOW ROLE GRANT GROUP ...    */
annotation|@
name|Test
specifier|public
name|void
name|testShowRoleGrantGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"SHOW ROLE GRANT GROUP "
operator|+
name|GROUP
argument_list|)
decl_stmt|;
name|RoleDDLDesc
name|roleDesc
init|=
name|work
operator|.
name|getRoleDDLDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Role should not be null"
argument_list|,
name|roleDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RoleOperation
operator|.
name|SHOW_ROLE_GRANT
argument_list|,
name|roleDesc
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|GROUP
argument_list|,
name|roleDesc
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP
argument_list|,
name|roleDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * SHOW GRANT USER ... ON TABLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testShowGrantUserOnTable
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"SHOW GRANT USER "
operator|+
name|USER
operator|+
literal|" ON TABLE "
operator|+
name|TABLE
argument_list|)
decl_stmt|;
name|ShowGrantDesc
name|grantDesc
init|=
name|work
operator|.
name|getShowGrantDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Show grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getHiveObj
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_QNAME
argument_list|,
name|grantDesc
operator|.
name|getHiveObj
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getHiveObj
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * SHOW GRANT ROLE ... ON TABLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testShowGrantRoleOnTable
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"SHOW GRANT ROLE "
operator|+
name|ROLE
operator|+
literal|" ON TABLE "
operator|+
name|TABLE
argument_list|)
decl_stmt|;
name|ShowGrantDesc
name|grantDesc
init|=
name|work
operator|.
name|getShowGrantDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Show grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE
argument_list|,
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getHiveObj
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_QNAME
argument_list|,
name|grantDesc
operator|.
name|getHiveObj
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getHiveObj
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * SHOW GRANT GROUP ... ON TABLE ...    */
annotation|@
name|Test
specifier|public
name|void
name|testShowGrantGroupOnTable
parameter_list|()
throws|throws
name|Exception
block|{
name|DDLWork
name|work
init|=
name|analyze
argument_list|(
literal|"SHOW GRANT GROUP "
operator|+
name|GROUP
operator|+
literal|" ON TABLE "
operator|+
name|TABLE
argument_list|)
decl_stmt|;
name|ShowGrantDesc
name|grantDesc
init|=
name|work
operator|.
name|getShowGrantDesc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Show grant should not be null"
argument_list|,
name|grantDesc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|GROUP
argument_list|,
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP
argument_list|,
name|grantDesc
operator|.
name|getPrincipalDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getHiveObj
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_QNAME
argument_list|,
name|grantDesc
operator|.
name|getHiveObj
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected table"
argument_list|,
name|grantDesc
operator|.
name|getHiveObj
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * GRANT ALL ON URI    */
annotation|@
name|Test
specifier|public
name|void
name|testGrantUri
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uriPath
init|=
literal|"/tmp"
decl_stmt|;
try|try
block|{
name|analyze
argument_list|(
literal|"GRANT ALL ON URI '"
operator|+
name|uriPath
operator|+
literal|"' TO USER user2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Grant on URI should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|uriPath
argument_list|,
name|DummyHiveAuthorizationTaskFactoryImpl
operator|.
name|uriPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * GRANT ALL ON SERVER    */
annotation|@
name|Test
specifier|public
name|void
name|testGrantServer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|serverName
init|=
literal|"foo"
decl_stmt|;
try|try
block|{
name|analyze
argument_list|(
literal|"GRANT ALL ON SERVER "
operator|+
name|serverName
operator|+
literal|" TO USER user2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Grant on Server should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serverName
argument_list|,
name|DummyHiveAuthorizationTaskFactoryImpl
operator|.
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DDLWork
name|analyze
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|AuthorizationTestUtil
operator|.
name|analyze
argument_list|(
name|command
argument_list|,
name|queryState
argument_list|,
name|db
argument_list|)
return|;
block|}
block|}
end_class

end_unit

