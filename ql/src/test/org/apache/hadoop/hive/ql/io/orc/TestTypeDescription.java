begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestTypeDescription
block|{
annotation|@
name|Test
specifier|public
name|void
name|testJson
parameter_list|()
block|{
name|TypeDescription
name|bin
init|=
name|TypeDescription
operator|.
name|createBinary
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"category\": \"binary\", \"id\": 0, \"max\": 0}"
argument_list|,
name|bin
operator|.
name|toJson
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"binary"
argument_list|,
name|bin
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TypeDescription
name|struct
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"f1"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"f2"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"f3"
argument_list|,
name|TypeDescription
operator|.
name|createDecimal
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"struct<f1:int,f2:string,f3:decimal(38,10)>"
argument_list|,
name|struct
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"category\": \"struct\", \"id\": 0, \"max\": 3, \"fields\": [\n"
operator|+
literal|"  \"f1\": {\"category\": \"int\", \"id\": 1, \"max\": 1},\n"
operator|+
literal|"  \"f2\": {\"category\": \"string\", \"id\": 2, \"max\": 2},\n"
operator|+
literal|"  \"f3\": {\"category\": \"decimal\", \"id\": 3, \"max\": 3, \"precision\": 38, \"scale\": 10}]}"
argument_list|,
name|struct
operator|.
name|toJson
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"f1"
argument_list|,
name|TypeDescription
operator|.
name|createUnion
argument_list|()
operator|.
name|addUnionChild
argument_list|(
name|TypeDescription
operator|.
name|createByte
argument_list|()
argument_list|)
operator|.
name|addUnionChild
argument_list|(
name|TypeDescription
operator|.
name|createDecimal
argument_list|()
operator|.
name|withPrecision
argument_list|(
literal|20
argument_list|)
operator|.
name|withScale
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"f2"
argument_list|,
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"f3"
argument_list|,
name|TypeDescription
operator|.
name|createDate
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"f4"
argument_list|,
name|TypeDescription
operator|.
name|createDouble
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"f5"
argument_list|,
name|TypeDescription
operator|.
name|createBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"f6"
argument_list|,
name|TypeDescription
operator|.
name|createChar
argument_list|()
operator|.
name|withMaxLength
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<f1:uniontype<tinyint,decimal(20,10)>,f2:struct<f3:date,f4:double,f5:boolean>,f6:char(100)>"
argument_list|,
name|struct
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"category\": \"struct\", \"id\": 0, \"max\": 8, \"fields\": [\n"
operator|+
literal|"  \"f1\": {\"category\": \"uniontype\", \"id\": 1, \"max\": 3, \"children\": [\n"
operator|+
literal|"    {\"category\": \"tinyint\", \"id\": 2, \"max\": 2},\n"
operator|+
literal|"    {\"category\": \"decimal\", \"id\": 3, \"max\": 3, \"precision\": 20, \"scale\": 10}]},\n"
operator|+
literal|"  \"f2\": {\"category\": \"struct\", \"id\": 4, \"max\": 7, \"fields\": [\n"
operator|+
literal|"    \"f3\": {\"category\": \"date\", \"id\": 5, \"max\": 5},\n"
operator|+
literal|"    \"f4\": {\"category\": \"double\", \"id\": 6, \"max\": 6},\n"
operator|+
literal|"    \"f5\": {\"category\": \"boolean\", \"id\": 7, \"max\": 7}]},\n"
operator|+
literal|"  \"f6\": {\"category\": \"char\", \"id\": 8, \"max\": 8, \"length\": 100}]}"
argument_list|,
name|struct
operator|.
name|toJson
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

