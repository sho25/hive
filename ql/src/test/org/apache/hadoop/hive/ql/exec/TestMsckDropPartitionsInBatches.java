begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|CheckResult
operator|.
name|PartitionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|RetryUtilities
operator|.
name|RetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Unit test for function dropPartitionsInBatches in DDLTask.  *  **/
end_comment

begin_class
specifier|public
class|class
name|TestMsckDropPartitionsInBatches
block|{
specifier|private
specifier|static
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|static
name|DDLTask
name|ddlTask
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
init|=
literal|"test_msck_batch"
decl_stmt|;
specifier|private
specifier|static
name|Hive
name|db
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|repairOutput
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|HiveException
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestMsckCreatePartitionsInBatches
operator|.
name|class
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_MSCK_REPAIR_BATCH_SIZE
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|ddlTask
operator|=
operator|new
name|DDLTask
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|createPartitionedTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|repairOutput
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanUpTableQuietly
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Table
name|createPartitionedTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|db
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
comment|// Data columns.
name|Arrays
operator|.
name|asList
argument_list|(
literal|"city"
argument_list|)
argument_list|,
comment|// Partition columns.
name|TextInputFormat
operator|.
name|class
argument_list|,
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|db
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to drop and create table "
operator|+
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|" because "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
specifier|private
name|void
name|cleanUpTableQuietly
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
try|try
block|{
name|db
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|dropPartsNotInFs
parameter_list|(
name|int
name|numOfParts
parameter_list|)
block|{
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInFs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfParts
condition|;
name|i
operator|++
control|)
block|{
name|PartitionResult
name|result
init|=
operator|new
name|PartitionResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|result
operator|.
name|setPartitionName
argument_list|(
literal|"city=dummyCity_"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|partsNotInFs
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|partsNotInFs
return|;
block|}
comment|// Find most significant bit with starting index as 0
specifier|private
name|int
name|findMSB
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|int
name|msbIndex
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Only positive values expected"
argument_list|,
name|n
operator|>
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|n
operator|>
literal|1
condition|)
block|{
name|n
operator|=
operator|(
name|n
operator|>>
literal|1
operator|)
expr_stmt|;
name|msbIndex
operator|++
expr_stmt|;
block|}
return|return
name|msbIndex
return|;
block|}
comment|// runDropPartitions is the main function that gets called with different options
comment|// partCount: total number of partitions that will be deleted
comment|// batchSize: maximum number of partitions that can be deleted in a batch
comment|//    based on the above the test will check that the batch sizes are as expected
comment|// exceptionStatus can take 3 values
comment|//   noException: no exception is expected.
comment|//   oneException: first call throws exception.  Since dropPartitionInBatches will retry, this
comment|//                  will succeed after the first failure
comment|//   allException: failure case where everything fails.  Will test that the test fails after
comment|//                  retrying based on maxRetries when specified, or based on a decaying factor
comment|//                  of 2
specifier|private
specifier|final
name|int
name|noException
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|int
name|oneException
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|int
name|allException
init|=
literal|3
decl_stmt|;
specifier|private
name|void
name|runDropPartitions
parameter_list|(
name|int
name|partCount
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|int
name|maxRetries
parameter_list|,
name|int
name|exceptionStatus
parameter_list|)
throws|throws
name|Exception
block|{
name|Hive
name|spyDb
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// create partCount dummy partitions
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInFs
init|=
name|dropPartsNotInFs
argument_list|(
name|partCount
argument_list|)
decl_stmt|;
comment|// Expected number of dropPartitions call
name|int
name|expectedCallCount
init|=
name|maxRetries
decl_stmt|;
comment|// Expected number of partitions dropped in each of those calls
name|int
index|[]
name|expectedBatchSizes
decl_stmt|;
comment|// Last batch can sometimes have less number of elements
name|int
name|lastBatchSize
init|=
name|batchSize
decl_stmt|;
comment|// Actual Batch size that will be used
name|int
name|actualBatchSize
init|=
name|batchSize
decl_stmt|;
if|if
condition|(
name|exceptionStatus
operator|==
name|oneException
condition|)
block|{
comment|// After one exception everything is expected to run
name|actualBatchSize
operator|=
name|batchSize
operator|/
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|exceptionStatus
operator|!=
name|allException
condition|)
block|{
name|expectedCallCount
operator|=
name|partCount
operator|/
name|actualBatchSize
expr_stmt|;
if|if
condition|(
name|expectedCallCount
operator|*
name|actualBatchSize
operator|<
name|partCount
condition|)
block|{
comment|// partCount not equally divided into batches.  last batch size will be less than batch size
name|lastBatchSize
operator|=
name|partCount
operator|-
operator|(
name|expectedCallCount
operator|*
name|actualBatchSize
operator|)
expr_stmt|;
comment|// Add 1 to counter default rounding
name|expectedCallCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|exceptionStatus
operator|==
name|oneException
condition|)
block|{
comment|// first one will fail - count it in
name|expectedCallCount
operator|++
expr_stmt|;
comment|// only first call throws exception
name|Mockito
operator|.
name|doThrow
argument_list|(
name|HiveException
operator|.
name|class
argument_list|)
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|spyDb
argument_list|)
operator|.
name|dropPartitions
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|table
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expectedBatchSizes
operator|=
operator|new
name|int
index|[
name|expectedCallCount
index|]
expr_stmt|;
comment|// first batch is always based on batch size
name|expectedBatchSizes
index|[
literal|0
index|]
operator|=
name|Integer
operator|.
name|min
argument_list|(
name|partCount
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// second batch to last but one batch will be actualBatchSize
comment|// actualBatchSize is same as batchSize when no exceptions are expected
comment|// actualBatchSize is half of batchSize when 1 exception is expected
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedCallCount
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|expectedBatchSizes
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|min
argument_list|(
name|partCount
argument_list|,
name|actualBatchSize
argument_list|)
expr_stmt|;
block|}
name|expectedBatchSizes
index|[
name|expectedCallCount
operator|-
literal|1
index|]
operator|=
name|lastBatchSize
expr_stmt|;
comment|// batch size from input and decaying factor of 2
name|ddlTask
operator|.
name|dropPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInFs
argument_list|,
name|table
argument_list|,
name|batchSize
argument_list|,
literal|2
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|maxRetries
operator|==
literal|0
condition|)
block|{
comment|// Retries will be done till decaying factor reduces to 0.  Decaying Factor is 2.
comment|// So, log to base 2 of batchSize plus 1 or Most Significant Bit
comment|// of batchsize plus 1 will give the number of expected calls
name|expectedCallCount
operator|=
name|findMSB
argument_list|(
name|batchSize
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|expectedBatchSizes
operator|=
operator|new
name|int
index|[
name|expectedCallCount
index|]
expr_stmt|;
comment|// decaying where the batchSize keeps reducing by half
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedCallCount
condition|;
name|i
operator|++
control|)
block|{
name|actualBatchSize
operator|=
name|batchSize
operator|/
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|expectedBatchSizes
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|min
argument_list|(
name|partCount
argument_list|,
name|actualBatchSize
argument_list|)
expr_stmt|;
block|}
comment|// all calls fail
name|Mockito
operator|.
name|doThrow
argument_list|(
name|HiveException
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|spyDb
argument_list|)
operator|.
name|dropPartitions
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|table
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ddlTask
operator|.
name|dropPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInFs
argument_list|,
name|table
argument_list|,
name|batchSize
argument_list|,
literal|2
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|retryEx
parameter_list|)
block|{
name|ex
operator|=
name|retryEx
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Exception was expected but was not thrown"
argument_list|,
name|ex
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected class of exception thrown"
argument_list|,
name|ex
operator|instanceof
name|RetryException
argument_list|)
expr_stmt|;
block|}
comment|// there should be expectedCallCount calls to drop partitions with each batch size of
comment|// actualBatchSize
name|ArgumentCaptor
argument_list|<
name|List
argument_list|>
name|argument
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
name|expectedCallCount
argument_list|)
argument_list|)
operator|.
name|dropPartitions
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|table
argument_list|)
argument_list|,
name|argument
operator|.
name|capture
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// confirm the batch sizes were as expected
name|List
argument_list|<
name|List
argument_list|>
name|droppedParts
init|=
name|argument
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedCallCount
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in attempt %d.  Expected: %d.  Found: %d"
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|expectedBatchSizes
index|[
name|i
index|]
argument_list|,
name|droppedParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|expectedBatchSizes
index|[
name|i
index|]
argument_list|,
name|droppedParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runDropPartitions
parameter_list|(
name|int
name|partCount
parameter_list|,
name|int
name|batchSize
parameter_list|)
throws|throws
name|Exception
block|{
name|runDropPartitions
argument_list|(
name|partCount
argument_list|,
name|batchSize
argument_list|,
literal|0
argument_list|,
name|noException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the number of times Hive.dropPartitions calls are executed with total number of    * partitions to be added are equally divisible by batch size.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testNumberOfDropPartitionsCalls
parameter_list|()
throws|throws
name|Exception
block|{
name|runDropPartitions
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the number of times Hive.dropPartitions calls are executed with total number of    * partitions to be added are not exactly divisible by batch size.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUnevenNumberOfCreatePartitionCalls
parameter_list|()
throws|throws
name|Exception
block|{
name|runDropPartitions
argument_list|(
literal|14
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the number of times Hive.dropPartitions calls are executed with total number of    * partitions exactly equal to batch size.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testEqualNumberOfPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|runDropPartitions
argument_list|(
literal|13
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the number of times Hive.dropPartitions calls are executed with total number of    * partitions to is less than batch size.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSmallNumberOfPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|runDropPartitions
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the number of calls to dropPartitions and the respective batch sizes when first call to    * dropPartitions throws HiveException. The batch size should be reduced once by the    * decayingFactor 2, iow after batch size is halved.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBatchingWhenException
parameter_list|()
throws|throws
name|Exception
block|{
name|runDropPartitions
argument_list|(
literal|23
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
name|oneException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the retries exhausted case when Hive.DropPartitions method call always keep throwing    * HiveException. The batch sizes should exponentially decreased based on the decaying factor and    * ultimately give up when it reaches 0.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRetriesExhaustedBatchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|runDropPartitions
argument_list|(
literal|17
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
name|allException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the maximum retry attempt is set to 2.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMaxRetriesReached
parameter_list|()
throws|throws
name|Exception
block|{
name|runDropPartitions
argument_list|(
literal|17
argument_list|,
literal|30
argument_list|,
literal|2
argument_list|,
name|allException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests when max number of retries is set to 1.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testOneMaxRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|runDropPartitions
argument_list|(
literal|17
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|,
name|allException
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

