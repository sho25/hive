begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TestVectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDayOfMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFHour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFMinute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSecond
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFWeekOfYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests for timestamp expressions.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorTimestampExpressions
block|{
specifier|private
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
comment|/* copied over from VectorUDFTimestampFieldLong */
specifier|private
name|TimestampWritable
name|toTimestampWritable
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|long
name|ms
init|=
operator|(
name|nanos
operator|/
operator|(
literal|1000
operator|*
literal|1000
operator|*
literal|1000
operator|)
operator|)
operator|*
literal|1000
decl_stmt|;
comment|/* the milliseconds should be kept in nanos */
name|long
name|ns
init|=
name|nanos
operator|%
operator|(
literal|1000
operator|*
literal|1000
operator|*
literal|1000
operator|)
decl_stmt|;
if|if
condition|(
name|ns
operator|<
literal|0
condition|)
block|{
comment|/*        * The nano seconds are always positive,        * but the milliseconds can be negative        */
name|ms
operator|-=
literal|1000
expr_stmt|;
name|ns
operator|+=
literal|1000
operator|*
literal|1000
operator|*
literal|1000
expr_stmt|;
block|}
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|ms
argument_list|)
decl_stmt|;
name|ts
operator|.
name|setNanos
argument_list|(
operator|(
name|int
operator|)
name|ns
argument_list|)
expr_stmt|;
return|return
operator|new
name|TimestampWritable
argument_list|(
name|ts
argument_list|)
return|;
block|}
specifier|private
name|long
index|[]
name|getAllBoundaries
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|boundaries
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTimeInMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// c.set doesn't reset millis
for|for
control|(
name|int
name|year
init|=
literal|1902
init|;
name|year
operator|<=
literal|2038
condition|;
name|year
operator|++
control|)
block|{
name|c
operator|.
name|set
argument_list|(
name|year
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|long
name|exactly
init|=
name|c
operator|.
name|getTimeInMillis
argument_list|()
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
comment|/* one second before and after */
name|long
name|before
init|=
name|exactly
operator|-
literal|1000
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
name|long
name|after
init|=
name|exactly
operator|+
literal|1000
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
name|boundaries
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
name|boundaries
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|exactly
argument_list|)
argument_list|)
expr_stmt|;
name|boundaries
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Long
index|[]
name|indices
init|=
name|boundaries
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|indices
argument_list|)
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|getVectorizedRandomRowBatchLong2
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|/* all 32 bit numbers qualify& multiply up to get nano-seconds */
name|lcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
call|(
name|long
call|)
argument_list|(
literal|1000
operator|*
literal|1000
operator|*
literal|1000
operator|*
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|getVectorizedRandomRowBatchStringLong
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|/* all 32 bit numbers qualify& multiply up to get nano-seconds */
name|byte
index|[]
name|encoded
init|=
name|encodeTime
argument_list|(
literal|1000
operator|*
literal|1000
operator|*
literal|1000
operator|*
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|encoded
expr_stmt|;
name|bcv
operator|.
name|start
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
name|i
index|]
operator|=
name|encoded
operator|.
name|length
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|bcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|getVectorizedRandomRowBatch
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
switch|switch
condition|(
name|testType
condition|)
block|{
case|case
name|LONG2
case|:
return|return
name|getVectorizedRandomRowBatchLong2
argument_list|(
name|seed
argument_list|,
name|size
argument_list|)
return|;
case|case
name|STRING_LONG
case|:
return|return
name|getVectorizedRandomRowBatchStringLong
argument_list|(
name|seed
argument_list|,
name|size
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
comment|/*    * Input array is used to fill the entire size of the vector row batch    */
specifier|private
name|VectorizedRowBatch
name|getVectorizedRowBatchLong2
parameter_list|(
name|long
index|[]
name|inputs
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|lcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|inputs
index|[
name|i
operator|%
name|inputs
operator|.
name|length
index|]
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|batch
return|;
block|}
comment|/*    * Input array is used to fill the entire size of the vector row batch    */
specifier|private
name|VectorizedRowBatch
name|getVectorizedRowBatchStringLong
parameter_list|(
name|long
index|[]
name|inputs
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|encoded
init|=
name|encodeTime
argument_list|(
name|inputs
index|[
name|i
operator|%
name|inputs
operator|.
name|length
index|]
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|encoded
expr_stmt|;
name|bcv
operator|.
name|start
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|bcv
operator|.
name|length
index|[
name|i
index|]
operator|=
name|encoded
operator|.
name|length
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|bcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|getVectorizedRowBatchStringLong
parameter_list|(
name|byte
index|[]
name|vector
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|vector
expr_stmt|;
name|bcv
operator|.
name|start
index|[
literal|0
index|]
operator|=
name|start
expr_stmt|;
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|=
name|length
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|bcv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|getVectorizedRowBatch
parameter_list|(
name|long
index|[]
name|inputs
parameter_list|,
name|int
name|size
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
switch|switch
condition|(
name|testType
condition|)
block|{
case|case
name|LONG2
case|:
return|return
name|getVectorizedRowBatchLong2
argument_list|(
name|inputs
argument_list|,
name|size
argument_list|)
return|;
case|case
name|STRING_LONG
case|:
return|return
name|getVectorizedRowBatchStringLong
argument_list|(
name|inputs
argument_list|,
name|size
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|byte
index|[]
name|encodeTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|ByteBuffer
name|encoded
decl_stmt|;
try|try
block|{
name|String
name|formatted
init|=
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|time
operator|/
operator|(
literal|1000
operator|*
literal|1000
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|encoded
operator|=
name|Text
operator|.
name|encode
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|encoded
operator|.
name|array
argument_list|()
argument_list|,
name|encoded
operator|.
name|limit
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|long
name|decodeTime
parameter_list|(
name|byte
index|[]
name|time
parameter_list|)
block|{
try|try
block|{
return|return
name|dateFormat
operator|.
name|parse
argument_list|(
name|Text
operator|.
name|decode
argument_list|(
name|time
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
operator|*
literal|1000
operator|*
literal|1000
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|long
name|readVectorElementAt
parameter_list|(
name|ColumnVector
name|col
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|col
operator|instanceof
name|LongColumnVector
condition|)
block|{
return|return
operator|(
operator|(
name|LongColumnVector
operator|)
name|col
operator|)
operator|.
name|vector
index|[
name|i
index|]
return|;
block|}
if|if
condition|(
name|col
operator|instanceof
name|BytesColumnVector
condition|)
block|{
name|byte
index|[]
name|timeBytes
init|=
operator|(
operator|(
name|BytesColumnVector
operator|)
name|col
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
return|return
name|decodeTime
argument_list|(
name|timeBytes
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
specifier|private
enum|enum
name|TestType
block|{
name|LONG2
block|,
name|STRING_LONG
block|}
specifier|private
name|void
name|compareToUDFYearLong
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|UDFYear
name|udf
init|=
operator|new
name|UDFYear
argument_list|()
decl_stmt|;
name|TimestampWritable
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFYear
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
name|VectorExpression
name|udf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TestType
operator|.
name|LONG2
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFYearLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFYearString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
name|readVectorElementAt
argument_list|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFYearLong
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testVectorUDFYear
parameter_list|(
name|TestType
name|testType
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|long
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|42
block|}
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFYearLong
parameter_list|()
block|{
name|testVectorUDFYear
argument_list|(
name|TestType
operator|.
name|LONG2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFYearString
parameter_list|()
block|{
name|testVectorUDFYear
argument_list|(
name|TestType
operator|.
name|STRING_LONG
argument_list|)
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatchStringLong
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|'2'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'3'
block|}
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|VectorExpression
name|udf
init|=
operator|new
name|VectorUDFYearString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareToUDFDayOfMonthLong
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|UDFDayOfMonth
name|udf
init|=
operator|new
name|UDFDayOfMonth
argument_list|()
decl_stmt|;
name|TimestampWritable
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFDayOfMonth
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
name|VectorExpression
name|udf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TestType
operator|.
name|LONG2
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFDayOfMonthLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFDayOfMonthString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
name|readVectorElementAt
argument_list|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFDayOfMonthLong
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testVectorUDFDayOfMonth
parameter_list|(
name|TestType
name|testType
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|long
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|42
block|}
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFDayOfMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFDayOfMonthLong
parameter_list|()
block|{
name|testVectorUDFDayOfMonth
argument_list|(
name|TestType
operator|.
name|LONG2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFDayOfMonthString
parameter_list|()
block|{
name|testVectorUDFDayOfMonth
argument_list|(
name|TestType
operator|.
name|STRING_LONG
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareToUDFHourLong
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|UDFHour
name|udf
init|=
operator|new
name|UDFHour
argument_list|()
decl_stmt|;
name|TimestampWritable
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFHour
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
name|VectorExpression
name|udf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TestType
operator|.
name|LONG2
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFHourLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFHourString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
name|readVectorElementAt
argument_list|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFHourLong
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testVectorUDFHour
parameter_list|(
name|TestType
name|testType
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|long
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|42
block|}
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFHour
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFHourLong
parameter_list|()
block|{
name|testVectorUDFHour
argument_list|(
name|TestType
operator|.
name|LONG2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFHourString
parameter_list|()
block|{
name|testVectorUDFHour
argument_list|(
name|TestType
operator|.
name|STRING_LONG
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareToUDFMinuteLong
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|UDFMinute
name|udf
init|=
operator|new
name|UDFMinute
argument_list|()
decl_stmt|;
name|TimestampWritable
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFMinute
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
name|VectorExpression
name|udf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TestType
operator|.
name|LONG2
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFMinuteLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFMinuteString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
name|readVectorElementAt
argument_list|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFMinuteLong
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testVectorUDFMinute
parameter_list|(
name|TestType
name|testType
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|long
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|42
block|}
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMinute
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFMinuteLong
parameter_list|()
block|{
name|testVectorUDFMinute
argument_list|(
name|TestType
operator|.
name|LONG2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFMinuteString
parameter_list|()
block|{
name|testVectorUDFMinute
argument_list|(
name|TestType
operator|.
name|STRING_LONG
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareToUDFMonthLong
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|UDFMonth
name|udf
init|=
operator|new
name|UDFMonth
argument_list|()
decl_stmt|;
name|TimestampWritable
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFMonth
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
name|VectorExpression
name|udf
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TestType
operator|.
name|LONG2
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFMonthLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFMonthString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
name|readVectorElementAt
argument_list|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFMonthLong
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testVectorUDFMonth
parameter_list|(
name|TestType
name|testType
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|long
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|42
block|}
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFMonth
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFMonthLong
parameter_list|()
block|{
name|testVectorUDFMonth
argument_list|(
name|TestType
operator|.
name|LONG2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFMonthString
parameter_list|()
block|{
name|testVectorUDFMonth
argument_list|(
name|TestType
operator|.
name|STRING_LONG
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareToUDFSecondLong
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|UDFSecond
name|udf
init|=
operator|new
name|UDFSecond
argument_list|()
decl_stmt|;
name|TimestampWritable
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFSecond
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
name|VectorExpression
name|udf
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TestType
operator|.
name|LONG2
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFSecondLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFSecondString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
name|readVectorElementAt
argument_list|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFSecondLong
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testVectorUDFSecond
parameter_list|(
name|TestType
name|testType
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|long
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|42
block|}
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFSecond
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFSecondLong
parameter_list|()
block|{
name|testVectorUDFSecond
argument_list|(
name|TestType
operator|.
name|LONG2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFSecondString
parameter_list|()
block|{
name|testVectorUDFSecond
argument_list|(
name|TestType
operator|.
name|STRING_LONG
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LongWritable
name|getLongWritable
parameter_list|(
name|TimestampWritable
name|i
parameter_list|)
block|{
name|LongWritable
name|result
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
name|i
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
name|void
name|compareToUDFUnixTimeStampLong
parameter_list|(
name|long
name|t
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|TimestampWritable
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|LongWritable
name|res
init|=
name|getLongWritable
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|get
argument_list|()
operator|!=
name|y
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%d vs %d for %d, %d\n"
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|,
name|t
argument_list|,
name|tsw
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFUnixTimeStamp
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
name|VectorExpression
name|udf
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TestType
operator|.
name|LONG2
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFUnixTimeStampLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFUnixTimeStampString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|noNulls
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|t
init|=
name|readVectorElementAt
argument_list|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFUnixTimeStampLong
argument_list|(
name|t
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testVectorUDFUnixTimeStamp
parameter_list|(
name|TestType
name|testType
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|long
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|42
block|}
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFUnixTimeStamp
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFUnixTimeStampLong
parameter_list|()
block|{
name|testVectorUDFUnixTimeStamp
argument_list|(
name|TestType
operator|.
name|LONG2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFUnixTimeStampString
parameter_list|()
block|{
name|testVectorUDFUnixTimeStamp
argument_list|(
name|TestType
operator|.
name|STRING_LONG
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareToUDFWeekOfYearLong
parameter_list|(
name|long
name|t
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|UDFWeekOfYear
name|udf
init|=
operator|new
name|UDFWeekOfYear
argument_list|()
decl_stmt|;
name|TimestampWritable
name|tsw
init|=
name|toTimestampWritable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|IntWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|tsw
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUDFWeekOfYear
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|TestType
name|testType
parameter_list|)
block|{
name|VectorExpression
name|udf
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TestType
operator|.
name|LONG2
condition|)
block|{
name|udf
operator|=
operator|new
name|VectorUDFWeekOfYearLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udf
operator|=
operator|new
name|VectorUDFWeekOfYearString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|udf
operator|.
name|setInputTypes
argument_list|(
name|VectorExpression
operator|.
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|udf
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|in
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|out
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|noNulls
operator|||
operator|!
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|long
name|t
init|=
name|readVectorElementAt
argument_list|(
name|batch
operator|.
name|cols
index|[
name|in
index|]
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|y
init|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|compareToUDFWeekOfYearLong
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|cols
index|[
name|out
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|batch
operator|.
name|cols
index|[
name|in
index|]
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testVectorUDFWeekOfYear
parameter_list|(
name|TestType
name|testType
parameter_list|)
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|long
index|[]
name|boundaries
init|=
name|getAllBoundaries
argument_list|()
decl_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
name|boundaries
argument_list|,
name|boundaries
operator|.
name|length
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRowBatch
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
literal|1
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
operator|new
name|int
index|[]
block|{
literal|42
block|}
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getVectorizedRandomRowBatch
argument_list|(
literal|200
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyUDFWeekOfYear
argument_list|(
name|batch
argument_list|,
name|testType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFWeekOfYearLong
parameter_list|()
block|{
name|testVectorUDFWeekOfYear
argument_list|(
name|TestType
operator|.
name|LONG2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorUDFWeekOfYearString
parameter_list|()
block|{
name|testVectorUDFWeekOfYear
argument_list|(
name|TestType
operator|.
name|STRING_LONG
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestVectorTimestampExpressions
name|self
init|=
operator|new
name|TestVectorTimestampExpressions
argument_list|()
decl_stmt|;
name|self
operator|.
name|testVectorUDFYearLong
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFMonthLong
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFDayOfMonthLong
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFHourLong
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFWeekOfYearLong
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFUnixTimeStampLong
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFYearString
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFMonthString
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFDayOfMonthString
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFHourString
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFWeekOfYearString
argument_list|()
expr_stmt|;
name|self
operator|.
name|testVectorUDFUnixTimeStampString
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

