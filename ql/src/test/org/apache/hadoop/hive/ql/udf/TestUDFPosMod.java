begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestUDFPosMod
block|{
name|UDFPosMod
name|udf
init|=
operator|new
name|UDFPosMod
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDivideByZero
parameter_list|()
block|{
comment|// Byte
name|ByteWritable
name|b1
init|=
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
decl_stmt|;
name|ByteWritable
name|b2
init|=
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|ByteWritable
name|b3
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|b3
argument_list|)
expr_stmt|;
comment|// Short
name|ShortWritable
name|s1
init|=
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
name|ShortWritable
name|s2
init|=
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
name|ShortWritable
name|s3
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|s3
argument_list|)
expr_stmt|;
comment|// Int
name|IntWritable
name|i1
init|=
operator|new
name|IntWritable
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|IntWritable
name|i2
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|IntWritable
name|i3
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|i3
argument_list|)
expr_stmt|;
comment|// Long
name|LongWritable
name|l1
init|=
operator|new
name|LongWritable
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|LongWritable
name|l2
init|=
operator|new
name|LongWritable
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
name|LongWritable
name|l3
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|l3
argument_list|)
expr_stmt|;
comment|// Double
name|FloatWritable
name|f1
init|=
operator|new
name|FloatWritable
argument_list|(
literal|4.5f
argument_list|)
decl_stmt|;
name|FloatWritable
name|f2
init|=
operator|new
name|FloatWritable
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|FloatWritable
name|f3
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|f1
argument_list|,
name|f2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|f3
argument_list|)
expr_stmt|;
comment|// Double
name|DoubleWritable
name|d1
init|=
operator|new
name|DoubleWritable
argument_list|(
literal|4.5
argument_list|)
decl_stmt|;
name|DoubleWritable
name|d2
init|=
operator|new
name|DoubleWritable
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
name|DoubleWritable
name|d3
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|d3
argument_list|)
expr_stmt|;
comment|// Decimal
name|HiveDecimalWritable
name|dec1
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"4.5"
argument_list|)
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|dec2
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|dec3
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|dec1
argument_list|,
name|dec2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

