begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|vector
operator|.
name|VectorizedParquetRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|example
operator|.
name|data
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|example
operator|.
name|data
operator|.
name|simple
operator|.
name|SimpleGroupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorizedListColumnReader
extends|extends
name|VectorizedColumnReaderTestBase
block|{
specifier|protected
specifier|static
name|void
name|writeListData
parameter_list|(
name|ParquetWriter
argument_list|<
name|Group
argument_list|>
name|writer
parameter_list|,
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleGroupFactory
name|f
init|=
operator|new
name|SimpleGroupFactory
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|int
name|listMaxSize
init|=
literal|4
decl_stmt|;
name|int
name|listElementIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elementNum
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|isNull
init|=
name|isNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Group
name|group
init|=
name|f
operator|.
name|newGroup
argument_list|()
decl_stmt|;
name|int
name|listSize
init|=
name|i
operator|%
name|listMaxSize
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|isNull
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|listSize
condition|;
name|j
operator|++
control|)
block|{
name|group
operator|.
name|append
argument_list|(
literal|"list_int32_field"
argument_list|,
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|listElementIndex
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|append
argument_list|(
literal|"list_int64_field"
argument_list|,
name|getLongValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|listElementIndex
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|append
argument_list|(
literal|"list_double_field"
argument_list|,
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|listElementIndex
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|append
argument_list|(
literal|"list_float_field"
argument_list|,
name|getFloatValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|listElementIndex
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|append
argument_list|(
literal|"list_boolean_field"
argument_list|,
name|getBooleanValue
argument_list|(
name|listElementIndex
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|append
argument_list|(
literal|"list_binary_field"
argument_list|,
name|getBinaryValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|listElementIndex
argument_list|)
argument_list|)
expr_stmt|;
name|HiveDecimal
name|hd
init|=
name|getDecimal
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|listElementIndex
argument_list|)
operator|.
name|setScale
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|hdw
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|hd
argument_list|)
decl_stmt|;
name|group
operator|.
name|append
argument_list|(
literal|"list_decimal_field"
argument_list|,
name|Binary
operator|.
name|fromConstantByteArray
argument_list|(
name|hdw
operator|.
name|getInternalStorage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|listElementIndex
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|listMaxSize
condition|;
name|j
operator|++
control|)
block|{
name|group
operator|.
name|append
argument_list|(
literal|"list_int32_field_for_repeat_test"
argument_list|,
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|writeRepeateListData
parameter_list|(
name|ParquetWriter
argument_list|<
name|Group
argument_list|>
name|writer
parameter_list|,
name|int
name|elementNum
parameter_list|,
name|boolean
name|isNull
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleGroupFactory
name|f
init|=
operator|new
name|SimpleGroupFactory
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|int
name|listMaxSize
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elementNum
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|group
init|=
name|f
operator|.
name|newGroup
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNull
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|listMaxSize
condition|;
name|j
operator|++
control|)
block|{
name|group
operator|.
name|append
argument_list|(
literal|"list_int32_field_for_repeat_test"
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|write
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListReadLessOneBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|isDictionaryEncoding
init|=
literal|false
decl_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|testListReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|isDictionaryEncoding
operator|=
literal|true
expr_stmt|;
name|writeListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|testListReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListReadEqualOneBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|isDictionaryEncoding
init|=
literal|false
decl_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|testListReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|isDictionaryEncoding
operator|=
literal|true
expr_stmt|;
name|writeListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|testListReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListReadMoreOneBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|isDictionaryEncoding
init|=
literal|false
decl_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1025
argument_list|)
expr_stmt|;
name|testListReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1025
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|isDictionaryEncoding
operator|=
literal|true
expr_stmt|;
name|writeListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1025
argument_list|)
expr_stmt|;
name|testListReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1025
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepeateListRead
parameter_list|()
throws|throws
name|Exception
block|{
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1023
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testRepeateListRead
argument_list|(
literal|1023
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1023
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testRepeateListRead
argument_list|(
literal|1023
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testRepeateListRead
argument_list|(
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testRepeateListRead
argument_list|(
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1025
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testRepeateListRead
argument_list|(
literal|1025
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateListData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1025
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testRepeateListRead
argument_list|(
literal|1025
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testListReadAllType
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|elementNum
parameter_list|)
throws|throws
name|Exception
block|{
name|testListRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"int"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testListRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"long"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testListRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"double"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testListRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"float"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testListRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"boolean"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testListRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"binary"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testListRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"decimal"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setTypeConfiguration
parameter_list|(
name|String
name|type
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"list_int32_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"array<int>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"list_int64_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"array<bigint>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"list_double_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"array<double>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"list_float_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"array<float>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"list_boolean_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"array<boolean>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"binary"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"list_binary_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"array<string>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"decimal"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"list_decimal_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"array<decimal(5,2)>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getSchema
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|"message hive_schema {repeated int32 list_int32_field;}"
return|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|"message hive_schema {repeated int64 list_int64_field;}"
return|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|"message hive_schema {repeated double list_double_field;}"
return|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|"message hive_schema {repeated float list_float_field;}"
return|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|"message hive_schema {repeated boolean list_boolean_field;}"
return|;
block|}
elseif|else
if|if
condition|(
literal|"binary"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|"message hive_schema {repeated binary list_binary_field;}"
return|;
block|}
elseif|else
if|if
condition|(
literal|"decimal"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|"message hive_schema {repeated binary list_decimal_field (DECIMAL(5,2));}"
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported type for TestVectorizedListColumnReader!"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|assertValue
parameter_list|(
name|String
name|type
parameter_list|,
name|ColumnVector
name|childVector
parameter_list|,
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|valueIndex
parameter_list|,
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|LongColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getLongValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|LongColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getFloatValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
name|getBooleanValue
argument_list|(
name|valueIndex
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
operator|(
operator|(
name|LongColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"binary"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|actual
init|=
operator|new
name|String
argument_list|(
name|ArrayUtils
operator|.
name|subarray
argument_list|(
operator|(
operator|(
name|BytesColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|,
operator|(
operator|(
name|BytesColumnVector
operator|)
name|childVector
operator|)
operator|.
name|start
index|[
name|position
index|]
argument_list|,
operator|(
operator|(
name|BytesColumnVector
operator|)
name|childVector
operator|)
operator|.
name|start
index|[
name|position
index|]
operator|+
operator|(
operator|(
name|BytesColumnVector
operator|)
name|childVector
operator|)
operator|.
name|length
index|[
name|position
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getStr
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"decimal"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getDecimal
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported type for TestVectorizedListColumnReader!"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|testListRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|elementNum
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|setTypeConfiguration
argument_list|(
name|type
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
name|getSchema
argument_list|(
name|type
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|ListColumnVector
name|vector
init|=
operator|(
name|ListColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|offsets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|row
operator|==
name|elementNum
condition|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|vector
operator|.
name|offsets
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
name|long
name|start
init|=
name|vector
operator|.
name|offsets
index|[
name|i
index|]
decl_stmt|;
name|long
name|length
init|=
name|vector
operator|.
name|lengths
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|isNull
init|=
name|isNull
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNull
condition|)
block|{
name|assertEquals
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|long
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertValue
argument_list|(
name|type
argument_list|,
name|vector
operator|.
name|child
argument_list|,
name|isDictionaryEncoding
argument_list|,
name|index
argument_list|,
call|(
name|int
call|)
argument_list|(
name|start
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
name|row
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|elementNum
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testRepeateListRead
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|boolean
name|isNull
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"list_int32_field_for_repeat_test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"array<int>"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
literal|"message hive_schema {repeated int32 list_int32_field_for_repeat_test;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|ListColumnVector
name|vector
init|=
operator|(
name|ListColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isNull
argument_list|,
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|offsets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|row
operator|==
name|elementNum
condition|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|vector
operator|.
name|offsets
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
name|row
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|elementNum
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

