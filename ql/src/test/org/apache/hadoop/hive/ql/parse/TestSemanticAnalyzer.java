begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestSemanticAnalyzer
block|{
annotation|@
name|Test
specifier|public
name|void
name|testNormalizeColSpec
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Hive normalizes partition spec for dates to yyyy-mm-dd format. Some versions of Java will
comment|// accept other formats for Date.valueOf, e.g. yyyy-m-d, and who knows what else in the future;
comment|// some will not accept other formats, so we cannot test normalization with them - type check
comment|// will fail before it can ever happen. Thus, test in isolation.
name|checkNormalization
argument_list|(
literal|"date"
argument_list|,
literal|"2010-01-01"
argument_list|,
literal|"2010-01-01"
argument_list|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2010-01-01"
argument_list|)
argument_list|)
expr_stmt|;
name|checkNormalization
argument_list|(
literal|"date"
argument_list|,
literal|"2010-1-01"
argument_list|,
literal|"2010-01-01"
argument_list|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2010-01-01"
argument_list|)
argument_list|)
expr_stmt|;
name|checkNormalization
argument_list|(
literal|"date"
argument_list|,
literal|"2010-1-1"
argument_list|,
literal|"2010-01-01"
argument_list|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2010-01-01"
argument_list|)
argument_list|)
expr_stmt|;
name|checkNormalization
argument_list|(
literal|"string"
argument_list|,
literal|"2010-1-1"
argument_list|,
literal|"2010-1-1"
argument_list|,
literal|"2010-1-1"
argument_list|)
expr_stmt|;
try|try
block|{
name|checkNormalization
argument_list|(
literal|"date"
argument_list|,
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// Bad format.
name|fail
argument_list|(
literal|"should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{     }
try|try
block|{
name|checkNormalization
argument_list|(
literal|"date"
argument_list|,
literal|"2010-01-01"
argument_list|,
literal|"2010-01-01"
argument_list|,
literal|"2010-01-01"
argument_list|)
expr_stmt|;
comment|// Bad value type.
name|fail
argument_list|(
literal|"should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{     }
block|}
specifier|public
name|void
name|checkNormalization
parameter_list|(
name|String
name|colType
parameter_list|,
name|String
name|originalColSpec
parameter_list|,
name|String
name|result
parameter_list|,
name|Object
name|colValue
parameter_list|)
throws|throws
name|SemanticException
block|{
specifier|final
name|String
name|colName
init|=
literal|"col"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partSpec
operator|.
name|put
argument_list|(
name|colName
argument_list|,
name|originalColSpec
argument_list|)
expr_stmt|;
name|BaseSemanticAnalyzer
operator|.
name|normalizeColSpec
argument_list|(
name|partSpec
argument_list|,
name|colName
argument_list|,
name|colType
argument_list|,
name|originalColSpec
argument_list|,
name|colValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
name|partSpec
operator|.
name|get
argument_list|(
name|colName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|colValue
operator|instanceof
name|Date
condition|)
block|{
name|DateWritable
name|dw
init|=
operator|new
name|DateWritable
argument_list|(
operator|(
name|Date
operator|)
name|colValue
argument_list|)
decl_stmt|;
name|BaseSemanticAnalyzer
operator|.
name|normalizeColSpec
argument_list|(
name|partSpec
argument_list|,
name|colName
argument_list|,
name|colType
argument_list|,
name|originalColSpec
argument_list|,
name|dw
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
name|partSpec
operator|.
name|get
argument_list|(
name|colName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnescapeSQLString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"abcdefg"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"abcdefg\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// String enclosed by single quotes.
name|assertEquals
argument_list|(
literal|"C0FFEE"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\'C0FFEE\'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Strings including single escaped characters.
name|assertEquals
argument_list|(
literal|"\u0000"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"'\\0'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\'"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"\\'\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\""
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"'\\\"'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\b"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"\\b\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\n"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"'\\n'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\r"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"\\r\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\t"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"'\\t'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u001A"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"\\Z\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\\"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"'\\\\'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\\%"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"\\%\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\\_"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"'\\_'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// String including '\000' style literal characters.
name|assertEquals
argument_list|(
literal|"3 + 5 = \u0038"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"'3 + 5 = \\070'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u0000"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"\\000\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// String including invalid '\000' style literal characters.
name|assertEquals
argument_list|(
literal|"256"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"\\256\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// String including a '\u0000' style literal characters (\u732B is a cat in Kanji).
name|assertEquals
argument_list|(
literal|"How cute \u732B are"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"How cute \\u732B are\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// String including a surrogate pair character
comment|// (\uD867\uDE3D is Okhotsk atka mackerel in Kanji).
name|assertEquals
argument_list|(
literal|"\uD867\uDE3D is a fish"
argument_list|,
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
literal|"\"\\uD867\uDE3D is a fish\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

