begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHiveCopyFiles
block|{
specifier|private
specifier|static
name|boolean
name|LOCAL_SOURCE
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|NO_ACID
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|boolean
name|isSourceLocal
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|sourceFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|targetFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getParameters
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|0
block|,
name|LOCAL_SOURCE
block|}
block|,
block|{
literal|15
block|,
name|LOCAL_SOURCE
block|}
block|,
block|{
literal|0
block|,
operator|!
name|LOCAL_SOURCE
block|}
block|,
block|{
literal|15
block|,
operator|!
name|LOCAL_SOURCE
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestHiveCopyFiles
operator|.
name|class
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestHiveCopyFiles
parameter_list|(
name|int
name|threadCount
parameter_list|,
name|boolean
name|isSourceLocal
parameter_list|)
block|{
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MOVE_FILES_THREAD_COUNT
argument_list|,
name|threadCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|isSourceLocal
operator|=
name|isSourceLocal
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameNewFilesOnSameFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
name|sourceFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0.gz"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0.gz"
argument_list|)
expr_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|targetFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|targetFs
init|=
name|targetPath
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
try|try
block|{
name|Hive
operator|.
name|copyFiles
argument_list|(
name|hiveConf
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|targetFs
argument_list|,
name|isSourceLocal
argument_list|,
name|NO_ACID
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Hive.copyFiles() threw an unexpected exception."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameExistingFilesOnSameFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
name|sourceFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0.gz"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0.gz"
argument_list|)
expr_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|targetFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|targetFs
init|=
name|targetPath
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
try|try
block|{
name|Hive
operator|.
name|copyFiles
argument_list|(
name|hiveConf
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|targetFs
argument_list|,
name|isSourceLocal
argument_list|,
name|NO_ACID
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Hive.copyFiles() threw an unexpected exception."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// If source is local, then source files won't be deleted, and we have to delete them here
if|if
condition|(
name|isSourceLocal
condition|)
block|{
name|sourceFolder
operator|.
name|delete
argument_list|()
expr_stmt|;
name|sourceFolder
operator|.
name|create
argument_list|()
expr_stmt|;
name|sourcePath
operator|=
operator|new
name|Path
argument_list|(
name|sourceFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* Create new source files with same filenames */
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0.gz"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0.gz"
argument_list|)
expr_stmt|;
try|try
block|{
name|Hive
operator|.
name|copyFiles
argument_list|(
name|hiveConf
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|targetFs
argument_list|,
name|isSourceLocal
argument_list|,
name|NO_ACID
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Hive.copyFiles() threw an unexpected exception."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0_copy_1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0_copy_1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0_copy_1.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0_copy_1.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopyNewFilesOnDifferentFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
name|sourceFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0.gz"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0.gz"
argument_list|)
expr_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|targetFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Simulate different filesystems by returning a different URI
name|FileSystem
name|spyTargetFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|targetPath
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyTargetFs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"hdfs://"
operator|+
name|targetPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Hive
operator|.
name|copyFiles
argument_list|(
name|hiveConf
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|spyTargetFs
argument_list|,
name|isSourceLocal
argument_list|,
name|NO_ACID
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Hive.copyFiles() threw an unexpected exception."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopyExistingFilesOnDifferentFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
name|sourceFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0.gz"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0.gz"
argument_list|)
expr_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|targetFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Simulate different filesystems by returning a different URI
name|FileSystem
name|spyTargetFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|targetPath
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyTargetFs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"hdfs://"
operator|+
name|targetPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Hive
operator|.
name|copyFiles
argument_list|(
name|hiveConf
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|spyTargetFs
argument_list|,
name|isSourceLocal
argument_list|,
name|NO_ACID
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Hive.copyFiles() threw an unexpected exception."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// If source is local, then source files won't be deleted, and we have to delete them here
if|if
condition|(
name|isSourceLocal
condition|)
block|{
name|sourceFolder
operator|.
name|delete
argument_list|()
expr_stmt|;
name|sourceFolder
operator|.
name|create
argument_list|()
expr_stmt|;
name|sourcePath
operator|=
operator|new
name|Path
argument_list|(
name|sourceFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* Create new source files with same filenames */
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000000_0.gz"
argument_list|)
expr_stmt|;
name|sourceFolder
operator|.
name|newFile
argument_list|(
literal|"000001_0.gz"
argument_list|)
expr_stmt|;
try|try
block|{
name|Hive
operator|.
name|copyFiles
argument_list|(
name|hiveConf
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|spyTargetFs
argument_list|,
name|isSourceLocal
argument_list|,
name|NO_ACID
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Hive.copyFiles() threw an unexpected exception."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0_copy_1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0_copy_1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000000_0_copy_1.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyTargetFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
literal|"000001_0_copy_1.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

