begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DateColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
operator|.
name|VectorBatchGenerator
operator|.
name|GenerateType
operator|.
name|GenerateCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|VectorBatchGenerator
block|{
specifier|public
specifier|static
class|class
name|GenerateType
block|{
comment|// UNDONE: Missing date/time interval data types
specifier|public
enum|enum
name|GenerateCategory
block|{
name|BOOLEAN
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
block|,
name|BYTE
argument_list|(
literal|"tinyint"
argument_list|,
literal|true
argument_list|)
block|,
name|SHORT
argument_list|(
literal|"smallint"
argument_list|,
literal|true
argument_list|)
block|,
name|INT
argument_list|(
literal|"int"
argument_list|,
literal|true
argument_list|)
block|,
name|LONG
argument_list|(
literal|"bigint"
argument_list|,
literal|true
argument_list|)
block|,
name|FLOAT
argument_list|(
literal|"float"
argument_list|,
literal|true
argument_list|)
block|,
name|DOUBLE
argument_list|(
literal|"double"
argument_list|,
literal|true
argument_list|)
block|,
name|STRING
argument_list|(
literal|"string"
argument_list|,
literal|true
argument_list|)
block|,
name|DATE
argument_list|(
literal|"date"
argument_list|,
literal|true
argument_list|)
block|,
name|TIMESTAMP
argument_list|(
literal|"timestamp"
argument_list|,
literal|true
argument_list|)
block|,
name|BINARY
argument_list|(
literal|"binary"
argument_list|,
literal|true
argument_list|)
block|,
name|DECIMAL
argument_list|(
literal|"decimal"
argument_list|,
literal|true
argument_list|)
block|,
name|VARCHAR
argument_list|(
literal|"varchar"
argument_list|,
literal|true
argument_list|)
block|,
name|CHAR
argument_list|(
literal|"char"
argument_list|,
literal|true
argument_list|)
block|,
name|LIST
argument_list|(
literal|"array"
argument_list|,
literal|false
argument_list|)
block|,
name|MAP
argument_list|(
literal|"map"
argument_list|,
literal|false
argument_list|)
block|,
name|STRUCT
argument_list|(
literal|"struct"
argument_list|,
literal|false
argument_list|)
block|,
name|UNION
argument_list|(
literal|"uniontype"
argument_list|,
literal|false
argument_list|)
block|;
name|GenerateCategory
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isPrimitive
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|isPrimitive
operator|=
name|isPrimitive
expr_stmt|;
block|}
specifier|final
name|boolean
name|isPrimitive
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
name|boolean
name|isPrimitive
parameter_list|()
block|{
return|return
name|isPrimitive
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
specifier|static
name|GenerateCategory
name|generateCategoryFromPrimitiveCategory
parameter_list|(
name|PrimitiveCategory
name|primitiveCategory
parameter_list|)
block|{
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|GenerateCategory
operator|.
name|BOOLEAN
return|;
case|case
name|BYTE
case|:
return|return
name|GenerateCategory
operator|.
name|BYTE
return|;
case|case
name|SHORT
case|:
return|return
name|GenerateCategory
operator|.
name|SHORT
return|;
case|case
name|INT
case|:
return|return
name|GenerateCategory
operator|.
name|INT
return|;
case|case
name|LONG
case|:
return|return
name|GenerateCategory
operator|.
name|LONG
return|;
case|case
name|FLOAT
case|:
return|return
name|GenerateCategory
operator|.
name|FLOAT
return|;
case|case
name|DOUBLE
case|:
return|return
name|GenerateCategory
operator|.
name|DOUBLE
return|;
case|case
name|STRING
case|:
return|return
name|GenerateCategory
operator|.
name|STRING
return|;
case|case
name|DATE
case|:
return|return
name|GenerateCategory
operator|.
name|DATE
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|GenerateCategory
operator|.
name|TIMESTAMP
return|;
case|case
name|BINARY
case|:
return|return
name|GenerateCategory
operator|.
name|BINARY
return|;
case|case
name|DECIMAL
case|:
return|return
name|GenerateCategory
operator|.
name|DECIMAL
return|;
case|case
name|VARCHAR
case|:
return|return
name|GenerateCategory
operator|.
name|VARCHAR
return|;
case|case
name|CHAR
case|:
return|return
name|GenerateCategory
operator|.
name|CHAR
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
name|GenerateCategory
name|category
decl_stmt|;
specifier|private
name|boolean
name|allowNulls
decl_stmt|;
specifier|public
name|GenerateType
parameter_list|(
name|GenerateCategory
name|category
parameter_list|)
block|{
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
block|}
specifier|public
name|GenerateType
parameter_list|(
name|GenerateCategory
name|category
parameter_list|,
name|boolean
name|allowNulls
parameter_list|)
block|{
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
name|this
operator|.
name|allowNulls
operator|=
name|allowNulls
expr_stmt|;
block|}
specifier|public
name|GenerateCategory
name|getCategory
parameter_list|()
block|{
return|return
name|category
return|;
block|}
specifier|public
name|boolean
name|getAllowNulls
parameter_list|()
block|{
return|return
name|allowNulls
return|;
block|}
comment|/*      * BOOLEAN .. LONG: Min and max.      */
specifier|private
name|long
name|integerMin
decl_stmt|;
specifier|private
name|long
name|integerMax
decl_stmt|;
comment|/*      * FLOAT: Min and max.      */
specifier|private
name|float
name|floatMin
decl_stmt|;
specifier|private
name|float
name|floatMax
decl_stmt|;
comment|/*      * DOUBLE: Min and max.      */
specifier|private
name|double
name|doubleMin
decl_stmt|;
specifier|private
name|double
name|doubleMax
decl_stmt|;
comment|/*      * STRING:      *   Range, values, empty strings.      */
comment|/*      * CHAR: strategic blanks, string length beyond max      */
comment|/*      * VARCHAR: string length beyond max      */
block|}
specifier|private
name|VectorColumnGroupGenerator
index|[]
name|columnGroups
decl_stmt|;
specifier|private
name|boolean
index|[]
name|isGenerateSeries
decl_stmt|;
specifier|public
name|VectorBatchGenerator
parameter_list|(
name|GenerateType
index|[]
name|generateTypes
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|generateTypes
operator|.
name|length
decl_stmt|;
name|columnGroups
operator|=
operator|new
name|VectorColumnGroupGenerator
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|columnGroups
index|[
name|i
index|]
operator|=
operator|new
name|VectorColumnGroupGenerator
argument_list|(
name|i
argument_list|,
name|generateTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|isGenerateSeries
operator|=
operator|new
name|boolean
index|[
name|size
index|]
expr_stmt|;
comment|// UNDONE: For now, all...
name|Arrays
operator|.
name|fill
argument_list|(
name|isGenerateSeries
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VectorBatchGenerator
parameter_list|(
name|VectorColumnGroupGenerator
index|[]
name|columnGroups
parameter_list|)
block|{
name|this
operator|.
name|columnGroups
operator|=
name|columnGroups
expr_stmt|;
block|}
specifier|public
name|void
name|assignColumnVectors
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|columnNum
parameter_list|,
name|VectorColumnGroupGenerator
name|columnGroup
parameter_list|)
block|{
comment|// UNDONE: Multiple types...
name|GenerateType
index|[]
name|generateTypes
init|=
name|columnGroup
operator|.
name|generateTypes
argument_list|()
decl_stmt|;
name|GenerateType
name|generateType
init|=
name|generateTypes
index|[
literal|0
index|]
decl_stmt|;
name|ColumnVector
name|colVector
decl_stmt|;
switch|switch
condition|(
name|generateType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
name|colVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|colVector
operator|=
operator|new
name|DateColumnVector
argument_list|()
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
name|colVector
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|BINARY
case|:
name|colVector
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|colVector
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|colVector
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|38
argument_list|,
literal|18
argument_list|)
expr_stmt|;
break|break;
comment|// UNDONE
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported catagory "
operator|+
name|generateType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
name|colVector
operator|.
name|init
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
name|columnNum
index|]
operator|=
name|colVector
expr_stmt|;
block|}
specifier|public
name|VectorizedRowBatch
name|createBatch
parameter_list|()
block|{
specifier|final
name|int
name|size
init|=
name|columnGroups
operator|.
name|length
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|assignColumnVectors
argument_list|(
name|batch
argument_list|,
name|i
argument_list|,
name|columnGroups
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|batch
return|;
block|}
specifier|public
name|void
name|generateBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|Random
name|random
parameter_list|,
name|int
name|size
parameter_list|)
block|{
comment|// Clear value arrays.
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnGroups
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|columnGroups
index|[
name|c
index|]
operator|.
name|clearColumnValueArrays
argument_list|()
expr_stmt|;
block|}
comment|// Generate row values.
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnGroups
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|columnGroups
index|[
name|c
index|]
operator|.
name|generateRowValues
argument_list|(
name|i
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
name|size
condition|)
block|{
break|break;
block|}
comment|// Null out some row column entries.
comment|// UNDONE
comment|// Consider generating a column group equal value series?
if|if
condition|(
name|i
operator|<
name|size
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnGroups
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|isGenerateSeries
index|[
name|c
index|]
condition|)
block|{
name|int
name|seriesCount
init|=
name|getSeriesCount
argument_list|(
name|random
argument_list|)
decl_stmt|;
if|if
condition|(
name|seriesCount
operator|==
literal|1
condition|)
block|{
continue|continue;
block|}
name|seriesCount
operator|=
name|Math
operator|.
name|min
argument_list|(
name|seriesCount
argument_list|,
name|size
operator|-
name|i
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|seriesCount
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// Fill values down for equal value series.
name|VectorColumnGroupGenerator
name|columnGroup
init|=
name|columnGroups
index|[
name|c
index|]
decl_stmt|;
name|columnGroup
operator|.
name|fillDownRowValues
argument_list|(
name|i
argument_list|,
name|seriesCount
argument_list|,
name|random
argument_list|)
expr_stmt|;
comment|// For all the other column groups, generate new values down.
for|for
control|(
name|int
name|other
init|=
literal|0
init|;
name|other
operator|<
name|columnGroups
operator|.
name|length
condition|;
name|other
operator|++
control|)
block|{
if|if
condition|(
name|other
operator|!=
name|c
condition|)
block|{
name|VectorColumnGroupGenerator
name|otherColumnGroup
init|=
name|columnGroups
index|[
name|other
index|]
decl_stmt|;
name|otherColumnGroup
operator|.
name|generateDownRowValues
argument_list|(
name|i
argument_list|,
name|seriesCount
argument_list|,
name|random
argument_list|)
expr_stmt|;
comment|// Also, null down.
comment|// UNDONE
block|}
block|}
comment|// Fill down null flags.
comment|// UNDONE
name|i
operator|+=
operator|(
name|seriesCount
operator|-
literal|1
operator|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Recheck.
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|size
condition|)
block|{
break|break;
block|}
block|}
comment|// Optionally, do some filtering of rows...
comment|// UNDONE
comment|// From the value arrays and our isRepeated, selected, isNull arrays, generate the batch!
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnGroups
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|VectorColumnGroupGenerator
name|columnGroup
init|=
name|columnGroups
index|[
name|c
index|]
decl_stmt|;
comment|// UNDONE: Provide isRepeated, selected, isNull
name|columnGroup
operator|.
name|populateBatch
argument_list|(
name|batch
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
specifier|private
name|int
name|getSeriesCount
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
comment|// UNDONE: For now...
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

