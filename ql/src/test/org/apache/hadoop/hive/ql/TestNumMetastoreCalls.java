begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|// this test is to ensure number of calls to metastore server by query compiler
end_comment

begin_class
specifier|public
class|class
name|TestNumMetastoreCalls
block|{
specifier|static
name|HiveConf
name|hConf
init|=
literal|null
decl_stmt|;
specifier|static
name|Driver
name|driver
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|Setup
parameter_list|()
throws|throws
name|Exception
block|{
name|hConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
expr_stmt|;
name|driver
operator|=
name|setUpImpl
argument_list|(
name|hConf
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create table t1(id1 int, name1 string)"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create table t2(id2 int, id1 int, name2 string)"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create database db1"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create table db1.tdb1(id2 int, id1 int, name2 string)"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create table tpart(id2 int, id1 int)"
operator|+
literal|" partitioned by (name string)"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"alter table tpart add partition (name='p1')"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"alter table tpart add partition (name='p2')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|Teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table t1"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table t2"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table db1.tdb1"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop database db1 cascade"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Driver
name|setUpImpl
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|hiveConf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|RAW_STORE_IMPL
argument_list|,
literal|"org.apache.hadoop.hive.ql.TestNumMetastoreCallsObjectStore"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|SCHEDULED_QUERIES_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
return|return
operator|new
name|Driver
argument_list|(
name|hiveConf
argument_list|)
return|;
block|}
comment|// compiler should do 6 metastore calls for each table reference
comment|// get table, get table col statistics
comment|// pk, fk, unique, not null constraints
comment|// for partitioned table there would be an extra call to get partitions
annotation|@
name|Test
specifier|public
name|void
name|testSelectQuery
parameter_list|()
block|{
name|int
name|numCallsBefore
init|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
decl_stmt|;
name|int
name|numCallsAfter
init|=
literal|0
decl_stmt|;
comment|// simple select *
name|String
name|query1
init|=
literal|"select * from t1"
decl_stmt|;
name|int
name|rc
init|=
name|driver
operator|.
name|compile
argument_list|(
name|query1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|rc
operator|==
literal|0
operator|)
assert|;
name|numCallsAfter
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
assert|assert
operator|(
operator|(
name|numCallsAfter
operator|-
name|numCallsBefore
operator|)
operator|==
literal|6
operator|)
assert|;
comment|// single table
name|numCallsBefore
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
name|String
name|query2
init|=
literal|"select count(distinct id1) from t1 group by name1"
decl_stmt|;
name|rc
operator|=
name|driver
operator|.
name|compile
argument_list|(
name|query2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|rc
operator|==
literal|0
operator|)
assert|;
name|numCallsAfter
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
assert|assert
operator|(
operator|(
name|numCallsAfter
operator|-
name|numCallsBefore
operator|)
operator|==
literal|6
operator|)
assert|;
comment|// two different tables
name|numCallsBefore
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
name|String
name|query3
init|=
literal|"select count(*) from t1 join t2 on t1.id1 = t2.id1 "
operator|+
literal|"where t2.id2> 0 group by t1.name1, t2.name2"
decl_stmt|;
name|rc
operator|=
name|driver
operator|.
name|compile
argument_list|(
name|query3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|rc
operator|==
literal|0
operator|)
assert|;
name|numCallsAfter
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
assert|assert
operator|(
operator|(
name|numCallsAfter
operator|-
name|numCallsBefore
operator|)
operator|==
literal|12
operator|)
assert|;
comment|//from different dbs
name|numCallsBefore
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
name|String
name|query4
init|=
literal|"select count(*) from t1 join db1.tdb1 as t2 on t1.id1 = t2.id1 "
operator|+
literal|"where t2.id2> 0 group by t1.name1, t2.name2"
decl_stmt|;
name|rc
operator|=
name|driver
operator|.
name|compile
argument_list|(
name|query4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|rc
operator|==
literal|0
operator|)
assert|;
name|numCallsAfter
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
assert|assert
operator|(
operator|(
name|numCallsAfter
operator|-
name|numCallsBefore
operator|)
operator|==
literal|12
operator|)
assert|;
comment|// three table join
name|numCallsBefore
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
name|String
name|query5
init|=
literal|"select count(*) from t1 join db1.tdb1 as dbt2 on t1.id1 = dbt2.id1 "
operator|+
literal|"join t2 on t1.id1 = t2.id1 "
operator|+
literal|"where t2.id2> 0 group by t1.name1, t2.name2"
decl_stmt|;
name|rc
operator|=
name|driver
operator|.
name|compile
argument_list|(
name|query5
argument_list|,
literal|true
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|rc
operator|==
literal|0
operator|)
assert|;
name|numCallsAfter
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
assert|assert
operator|(
operator|(
name|numCallsAfter
operator|-
name|numCallsBefore
operator|)
operator|==
literal|18
operator|)
assert|;
comment|// single partitioned table
name|numCallsBefore
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
name|String
name|query6
init|=
literal|"select count(distinct id1) from tpart group by name"
decl_stmt|;
name|rc
operator|=
name|driver
operator|.
name|compile
argument_list|(
name|query6
argument_list|,
literal|true
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|rc
operator|==
literal|0
operator|)
assert|;
name|numCallsAfter
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
assert|assert
operator|(
operator|(
name|numCallsAfter
operator|-
name|numCallsBefore
operator|)
operator|==
literal|7
operator|)
assert|;
comment|// two different tables
name|numCallsBefore
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
name|String
name|query7
init|=
literal|"select count(*) from t1 join tpart on t1.id1 = tpart.id1 "
operator|+
literal|"where tpart.id2> 0 group by t1.name1, tpart.name"
decl_stmt|;
name|rc
operator|=
name|driver
operator|.
name|compile
argument_list|(
name|query7
argument_list|,
literal|true
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|rc
operator|==
literal|0
operator|)
assert|;
name|numCallsAfter
operator|=
name|TestNumMetastoreCallsObjectStore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
assert|assert
operator|(
operator|(
name|numCallsAfter
operator|-
name|numCallsBefore
operator|)
operator|==
literal|13
operator|)
assert|;
block|}
block|}
end_class

end_unit

