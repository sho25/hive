begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|read
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|PredicateLeaf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgumentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|MessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|MessageTypeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestParquetFilterPredicate
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFilterColumnsThatDoNoExistOnSchema
parameter_list|()
block|{
name|MessageType
name|schema
init|=
name|MessageTypeParser
operator|.
name|parseMessageType
argument_list|(
literal|"message test { required int32 a; required binary stinger; }"
argument_list|)
decl_stmt|;
name|SearchArgument
name|sarg
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startNot
argument_list|()
operator|.
name|startOr
argument_list|()
operator|.
name|isNull
argument_list|(
literal|"a"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|between
argument_list|(
literal|"y"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|10L
argument_list|,
literal|20L
argument_list|)
comment|// Column will be removed from filter
operator|.
name|in
argument_list|(
literal|"z"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|)
comment|// Column will be removed from filter
operator|.
name|nullSafeEquals
argument_list|(
literal|"a"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"stinger"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|FilterPredicate
name|p
init|=
name|ParquetFilterPredicateConverter
operator|.
name|toFilterPredicate
argument_list|(
name|sarg
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"and(not(eq(a, null)), not(eq(a, Binary{\"stinger\"})))"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterColumnsThatDoNoExistOnSchemaHighOrder1
parameter_list|()
block|{
name|MessageType
name|schema
init|=
name|MessageTypeParser
operator|.
name|parseMessageType
argument_list|(
literal|"message test { required int32 a; required int32 b; }"
argument_list|)
decl_stmt|;
name|SearchArgument
name|sarg
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startOr
argument_list|()
operator|.
name|startAnd
argument_list|()
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|1L
argument_list|)
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|1L
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|startAnd
argument_list|()
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|999L
argument_list|)
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|999L
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|FilterPredicate
name|p
init|=
name|ParquetFilterPredicateConverter
operator|.
name|toFilterPredicate
argument_list|(
name|sarg
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"or(eq(a, 1), eq(a, 999))"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterColumnsThatDoNoExistOnSchemaHighOrder2
parameter_list|()
block|{
name|MessageType
name|schema
init|=
name|MessageTypeParser
operator|.
name|parseMessageType
argument_list|(
literal|"message test { required int32 a; required int32 b; }"
argument_list|)
decl_stmt|;
name|SearchArgument
name|sarg
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startAnd
argument_list|()
operator|.
name|startOr
argument_list|()
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|1L
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|1L
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|startOr
argument_list|()
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|999L
argument_list|)
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|999L
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|FilterPredicate
name|p
init|=
name|ParquetFilterPredicateConverter
operator|.
name|toFilterPredicate
argument_list|(
name|sarg
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"or(eq(a, 1), eq(b, 1))"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterFloatColumns
parameter_list|()
block|{
name|MessageType
name|schema
init|=
name|MessageTypeParser
operator|.
name|parseMessageType
argument_list|(
literal|"message test {  required float a; required int32 b; }"
argument_list|)
decl_stmt|;
name|SearchArgument
name|sarg
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|startNot
argument_list|()
operator|.
name|startOr
argument_list|()
operator|.
name|isNull
argument_list|(
literal|"a"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|FLOAT
argument_list|)
operator|.
name|between
argument_list|(
literal|"a"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|FLOAT
argument_list|,
literal|10.2
argument_list|,
literal|20.3
argument_list|)
operator|.
name|in
argument_list|(
literal|"b"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|end
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|FilterPredicate
name|p
init|=
name|ParquetFilterPredicateConverter
operator|.
name|toFilterPredicate
argument_list|(
name|sarg
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"and(and(not(eq(a, null)), not(and(lteq(a, 20.3), not(lt(a, 10.2))))), not(or(or(eq(b, 1), eq(b, 2)), eq(b, 3))))"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterBetween
parameter_list|()
block|{
name|MessageType
name|schema
init|=
name|MessageTypeParser
operator|.
name|parseMessageType
argument_list|(
literal|"message test {  required int32 bCol; }"
argument_list|)
decl_stmt|;
name|SearchArgument
name|sarg
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|between
argument_list|(
literal|"bCol"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|1L
argument_list|,
literal|5L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FilterPredicate
name|p
init|=
name|ParquetFilterPredicateConverter
operator|.
name|toFilterPredicate
argument_list|(
name|sarg
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"and(lteq(bCol, 5), not(lt(bCol, 1)))"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sarg
operator|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|between
argument_list|(
literal|"bCol"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|5L
argument_list|,
literal|1L
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|p
operator|=
name|ParquetFilterPredicateConverter
operator|.
name|toFilterPredicate
argument_list|(
name|sarg
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|"and(lteq(bCol, 1), not(lt(bCol, 5)))"
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sarg
operator|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
operator|.
name|between
argument_list|(
literal|"bCol"
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|1L
argument_list|,
literal|1L
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|p
operator|=
name|ParquetFilterPredicateConverter
operator|.
name|toFilterPredicate
argument_list|(
name|sarg
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|"and(lteq(bCol, 1), not(lt(bCol, 1)))"
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

