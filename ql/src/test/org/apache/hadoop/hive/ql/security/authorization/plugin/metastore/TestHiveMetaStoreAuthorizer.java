begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ColumnType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HadoopDefaultMetastoreAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/* Test whether HiveAuthorizer for MetaStore operation is trigger and HiveMetaStoreAuthzInfo is created by HiveMetaStoreAuthorizer  */
end_comment

begin_class
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
specifier|public
class|class
name|TestHiveMetaStoreAuthorizer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|dbName
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tblName
init|=
literal|"tmptbl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|viewName
init|=
literal|"tmpview"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|roleName
init|=
literal|"tmpRole"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|catalogName
init|=
literal|"testCatalog"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|unAuthorizedUser
init|=
literal|"bob"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|authorizedUser
init|=
literal|"sam"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|superUser
init|=
literal|"hive"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|metaConfVal
init|=
literal|""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
literal|"file:///testdata"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|private
name|RawStore
name|rawStore
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|HiveMetaStore
operator|.
name|HMSHandler
name|hmsHandler
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_TXN_STATS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|AGGREGATE_STATS_CACHE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|PARTITION_NAME_WHITELIST_PATTERN
argument_list|,
name|metaConfVal
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|THRIFT_CONNECTION_RETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
name|DummyHiveAuthorizerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|PRE_EVENT_LISTENERS
argument_list|,
name|HiveMetaStoreAuthorizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_METASTORE_AUTHENTICATOR_MANAGER
argument_list|,
name|HadoopDefaultMetastoreAuthenticator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.hive.groups"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.hive.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.hive.users"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hmsHandler
operator|=
operator|new
name|HiveMetaStore
operator|.
name|HMSHandler
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rawStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|rawStore
operator|.
name|setConf
argument_list|(
name|hmsHandler
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the 'hive' catalog with new warehouse directory
name|HiveMetaStore
operator|.
name|HMSHandler
operator|.
name|createDefaultCatalog
argument_list|(
name|rawStore
argument_list|,
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|hmsHandler
operator|.
name|drop_table
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|drop_database
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|drop_catalog
argument_list|(
operator|new
name|DropCatalogRequest
argument_list|(
name|catalogName
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// NoSuchObjectException will be ignored if the step objects are not there
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testA_CreateDatabase_unAuthorizedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|unAuthorizedUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_database
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|err
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"Operation type "
operator|+
name|HiveOperationType
operator|.
name|CREATEDATABASE
operator|+
literal|" not allowed for user:"
operator|+
name|unAuthorizedUser
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testB_CreateTable_unAuthorizedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|unAuthorizedUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|setOwner
argument_list|(
name|unAuthorizedUser
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_table
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|err
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"Operation type "
operator|+
name|HiveOperationType
operator|.
name|CREATETABLE
operator|+
literal|" not allowed for user:"
operator|+
name|unAuthorizedUser
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testC_CreateView_anyUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|authorizedUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|viewObj
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|viewName
argument_list|)
operator|.
name|setType
argument_list|(
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|setOwner
argument_list|(
name|authorizedUser
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_table
argument_list|(
name|viewObj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|err
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"Operation type CREATE_VIEW not allowed for user:"
operator|+
name|authorizedUser
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testD_CreateView_SuperUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|superUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|viewObj
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|viewName
argument_list|)
operator|.
name|setType
argument_list|(
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_table
argument_list|(
name|viewObj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// no Exceptions for superuser as hive is allowed CREATE_VIEW operation
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testE_CreateRole__anyUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|authorizedUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Role
name|role
init|=
operator|new
name|RoleBuilder
argument_list|()
operator|.
name|setRoleName
argument_list|(
name|roleName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|authorizedUser
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|hmsHandler
operator|.
name|create_role
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|err
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"Operation type "
operator|+
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|AUTHORIZATION_API_CALL
operator|.
name|name
argument_list|()
operator|+
literal|" not allowed for user:"
operator|+
name|authorizedUser
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testF_CreateCatalog_anyUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|authorizedUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Catalog
name|catalog
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catalogName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|TEST_DATA_DIR
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|hmsHandler
operator|.
name|create_catalog
argument_list|(
operator|new
name|CreateCatalogRequest
argument_list|(
name|catalog
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|err
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"Operation type "
operator|+
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|CREATE_CATALOG
operator|.
name|name
argument_list|()
operator|+
literal|" not allowed for user:"
operator|+
name|authorizedUser
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testG_CreateCatalog_SuperUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|superUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Catalog
name|catalog
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catalogName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|TEST_DATA_DIR
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|hmsHandler
operator|.
name|create_catalog
argument_list|(
operator|new
name|CreateCatalogRequest
argument_list|(
name|catalog
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// no Exceptions for superuser as hive is allowed CREATE CATALOG operation
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testH_CreateDatabase_authorizedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|authorizedUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_database
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No Exception for create database for authorized user
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testI_CreateTable_authorizedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|authorizedUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|setOwner
argument_list|(
name|authorizedUser
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_table
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No Exception for create table for authorized user
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJ_DropTable_authorizedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|authorizedUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|hmsHandler
operator|.
name|drop_table
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No Exception for create table for authorized user
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testK_DropDatabase_authorizedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|authorizedUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|hmsHandler
operator|.
name|drop_database
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No Exception for dropDatabase for authorized user
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testL_DropCatalog_SuperUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|superUser
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|hmsHandler
operator|.
name|drop_catalog
argument_list|(
operator|new
name|DropCatalogRequest
argument_list|(
name|catalogName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// no Exceptions for superuser as hive is allowed CREATE CATALOG operation
block|}
block|}
block|}
end_class

end_unit

