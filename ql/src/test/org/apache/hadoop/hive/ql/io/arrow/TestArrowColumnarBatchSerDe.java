begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|VarCharVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|TestArrowColumnarBatchSerDe
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Object
index|[]
index|[]
name|INTEGER_ROWS
init|=
block|{
block|{
name|byteW
argument_list|(
literal|0
argument_list|)
block|,
name|shortW
argument_list|(
literal|0
argument_list|)
block|,
name|intW
argument_list|(
literal|0
argument_list|)
block|,
name|longW
argument_list|(
literal|0
argument_list|)
block|}
block|,
block|{
name|byteW
argument_list|(
literal|1
argument_list|)
block|,
name|shortW
argument_list|(
literal|1
argument_list|)
block|,
name|intW
argument_list|(
literal|1
argument_list|)
block|,
name|longW
argument_list|(
literal|1
argument_list|)
block|}
block|,
block|{
name|byteW
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|shortW
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|intW
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|longW
argument_list|(
operator|-
literal|1
argument_list|)
block|}
block|,
block|{
name|byteW
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|shortW
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|intW
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|longW
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|}
block|,
block|{
name|byteW
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|shortW
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|intW
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|longW
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|}
block|,
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,   }
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Object
index|[]
index|[]
name|FLOAT_ROWS
init|=
block|{
block|{
name|floatW
argument_list|(
literal|0f
argument_list|)
block|,
name|doubleW
argument_list|(
literal|0d
argument_list|)
block|}
block|,
block|{
name|floatW
argument_list|(
literal|1f
argument_list|)
block|,
name|doubleW
argument_list|(
literal|1d
argument_list|)
block|}
block|,
block|{
name|floatW
argument_list|(
operator|-
literal|1f
argument_list|)
block|,
name|doubleW
argument_list|(
operator|-
literal|1d
argument_list|)
block|}
block|,
block|{
name|floatW
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|doubleW
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
block|}
block|,
block|{
name|floatW
argument_list|(
operator|-
name|Float
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|doubleW
argument_list|(
operator|-
name|Double
operator|.
name|MIN_VALUE
argument_list|)
block|}
block|,
block|{
name|floatW
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|doubleW
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|}
block|,
block|{
name|floatW
argument_list|(
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|doubleW
argument_list|(
operator|-
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|}
block|,
block|{
name|floatW
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
block|,
name|doubleW
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
block|}
block|,
block|{
name|floatW
argument_list|(
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
block|,
name|doubleW
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
block|}
block|,
block|{
literal|null
block|,
literal|null
block|}
block|,   }
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Object
index|[]
index|[]
name|STRING_ROWS
init|=
block|{
block|{
name|text
argument_list|(
literal|""
argument_list|)
block|,
name|charW
argument_list|(
literal|""
argument_list|,
literal|10
argument_list|)
block|,
name|varcharW
argument_list|(
literal|""
argument_list|,
literal|10
argument_list|)
block|}
block|,
block|{
name|text
argument_list|(
literal|"Hello"
argument_list|)
block|,
name|charW
argument_list|(
literal|"Hello"
argument_list|,
literal|10
argument_list|)
block|,
name|varcharW
argument_list|(
literal|"Hello"
argument_list|,
literal|10
argument_list|)
block|}
block|,
block|{
name|text
argument_list|(
literal|"world!"
argument_list|)
block|,
name|charW
argument_list|(
literal|"world!"
argument_list|,
literal|10
argument_list|)
block|,
name|varcharW
argument_list|(
literal|"world!"
argument_list|,
literal|10
argument_list|)
block|}
block|,
block|{
name|text
argument_list|(
literal|"안녕?"
argument_list|)
block|,
name|charW
argument_list|(
literal|"안녕?"
argument_list|,
literal|10
argument_list|)
block|,
name|varcharW
argument_list|(
literal|"안녕?"
argument_list|,
literal|10
argument_list|)
block|}
block|,
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,   }
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|long
name|TIME_IN_MILLIS
init|=
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|365
operator|+
literal|31
operator|+
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|long
name|NEGATIVE_TIME_IN_MILLIS
init|=
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
operator|-
literal|9
operator|*
literal|365
operator|+
literal|31
operator|+
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Timestamp
name|TIMESTAMP
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Timestamp
name|NEGATIVE_TIMESTAMP_WITHOUT_NANOS
decl_stmt|;
static|static
block|{
name|TIMESTAMP
operator|=
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|TIME_IN_MILLIS
argument_list|)
expr_stmt|;
name|NEGATIVE_TIMESTAMP_WITHOUT_NANOS
operator|=
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|NEGATIVE_TIME_IN_MILLIS
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|Object
index|[]
index|[]
name|DTI_ROWS
init|=
block|{
block|{
operator|new
name|DateWritableV2
argument_list|(
name|DateWritableV2
operator|.
name|millisToDays
argument_list|(
name|TIME_IN_MILLIS
argument_list|)
argument_list|)
block|,
operator|new
name|TimestampWritableV2
argument_list|(
name|TIMESTAMP
argument_list|)
block|,
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
block|,
operator|new
name|HiveIntervalDayTimeWritable
argument_list|(
operator|new
name|HiveIntervalDayTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5_000_000
argument_list|)
argument_list|)
block|}
block|,
block|{
operator|new
name|DateWritableV2
argument_list|(
name|DateWritableV2
operator|.
name|millisToDays
argument_list|(
name|NEGATIVE_TIME_IN_MILLIS
argument_list|)
argument_list|)
block|,
operator|new
name|TimestampWritableV2
argument_list|(
name|NEGATIVE_TIMESTAMP_WITHOUT_NANOS
argument_list|)
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,   }
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Object
index|[]
index|[]
name|DECIMAL_ROWS
init|=
block|{
block|{
name|decimalW
argument_list|(
name|HiveDecimal
operator|.
name|ZERO
argument_list|)
block|}
block|,
block|{
name|decimalW
argument_list|(
name|HiveDecimal
operator|.
name|ONE
argument_list|)
block|}
block|,
block|{
name|decimalW
argument_list|(
name|HiveDecimal
operator|.
name|ONE
operator|.
name|negate
argument_list|()
argument_list|)
block|}
block|,
block|{
name|decimalW
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.000001"
argument_list|)
argument_list|)
block|}
block|,
block|{
name|decimalW
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"100000"
argument_list|)
argument_list|)
block|}
block|,
block|{
literal|null
block|}
block|,   }
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Object
index|[]
index|[]
name|BOOLEAN_ROWS
init|=
block|{
block|{
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
block|}
block|,
block|{
literal|null
block|}
block|,   }
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Object
index|[]
index|[]
name|BINARY_ROWS
init|=
block|{
block|{
operator|new
name|BytesWritable
argument_list|(
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|)
block|}
block|,
block|{
operator|new
name|BytesWritable
argument_list|(
literal|"Hello"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|}
block|,
block|{
operator|new
name|BytesWritable
argument_list|(
literal|"world!"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|null
block|}
block|,   }
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|ByteWritable
name|byteW
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ShortWritable
name|shortW
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|IntWritable
name|intW
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|IntWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|LongWritable
name|longW
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|new
name|LongWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|FloatWritable
name|floatW
parameter_list|(
name|float
name|value
parameter_list|)
block|{
return|return
operator|new
name|FloatWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|DoubleWritable
name|doubleW
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|DoubleWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Text
name|text
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|Text
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HiveCharWritable
name|charW
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|HiveCharWritable
argument_list|(
operator|new
name|HiveChar
argument_list|(
name|value
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HiveVarcharWritable
name|varcharW
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|HiveVarcharWritable
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
name|value
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HiveDecimalWritable
name|decimalW
parameter_list|(
name|HiveDecimal
name|value
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimalWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
name|void
name|initAndSerializeAndDeserialize
parameter_list|(
name|String
index|[]
index|[]
name|schema
parameter_list|,
name|Object
index|[]
index|[]
name|rows
parameter_list|)
throws|throws
name|SerDeException
block|{
name|ArrowColumnarBatchSerDe
name|serDe
init|=
operator|new
name|ArrowColumnarBatchSerDe
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|rowOI
init|=
name|initSerDe
argument_list|(
name|serDe
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|serializeAndDeserialize
argument_list|(
name|serDe
argument_list|,
name|rows
argument_list|,
name|rowOI
argument_list|)
expr_stmt|;
block|}
specifier|private
name|StructObjectInspector
name|initSerDe
parameter_list|(
name|AbstractSerDe
name|serDe
parameter_list|,
name|String
index|[]
index|[]
name|schema
parameter_list|)
throws|throws
name|SerDeException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldNameList
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldTypeList
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfoList
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
index|[]
name|nameAndType
range|:
name|schema
control|)
block|{
name|String
name|name
init|=
name|nameAndType
index|[
literal|0
index|]
decl_stmt|;
name|String
name|type
init|=
name|nameAndType
index|[
literal|1
index|]
decl_stmt|;
name|fieldNameList
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fieldTypeList
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|typeInfoList
operator|.
name|add
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|fieldNames
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|fieldNameList
argument_list|)
decl_stmt|;
name|String
name|fieldTypes
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|fieldTypeList
argument_list|)
decl_stmt|;
name|Properties
name|schemaProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|schemaProperties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|schemaProperties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|fieldTypes
argument_list|)
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|schemaProperties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|(
name|StructObjectInspector
operator|)
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|fieldNameList
argument_list|,
name|typeInfoList
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|serializeAndDeserialize
parameter_list|(
name|ArrowColumnarBatchSerDe
name|serDe
parameter_list|,
name|Object
index|[]
index|[]
name|rows
parameter_list|,
name|StructObjectInspector
name|rowOI
parameter_list|)
block|{
name|ArrowWrapperWritable
name|serialized
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|row
range|:
name|rows
control|)
block|{
name|serialized
operator|=
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|rowOI
argument_list|)
expr_stmt|;
block|}
comment|// Pass null to complete a batch
if|if
condition|(
name|serialized
operator|==
literal|null
condition|)
block|{
name|serialized
operator|=
name|serDe
operator|.
name|serialize
argument_list|(
literal|null
argument_list|,
name|rowOI
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
index|[]
index|[]
name|deserializedRows
init|=
operator|(
name|Object
index|[]
index|[]
operator|)
name|serDe
operator|.
name|deserialize
argument_list|(
name|serialized
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|Math
operator|.
name|min
argument_list|(
name|deserializedRows
operator|.
name|length
argument_list|,
name|rows
operator|.
name|length
argument_list|)
condition|;
name|rowIndex
operator|++
control|)
block|{
specifier|final
name|Object
index|[]
name|row
init|=
name|rows
index|[
name|rowIndex
index|]
decl_stmt|;
specifier|final
name|Object
index|[]
name|deserializedRow
init|=
name|deserializedRows
index|[
name|rowIndex
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|length
argument_list|,
name|deserializedRow
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|rowOI
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|fieldIndex
operator|++
control|)
block|{
specifier|final
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|fieldObjInspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|fieldObjInspector
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
specifier|final
name|PrimitiveObjectInspector
name|primitiveObjInspector
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|fieldObjInspector
decl_stmt|;
switch|switch
condition|(
name|primitiveObjInspector
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
name|assertEquals
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|row
index|[
name|fieldIndex
index|]
argument_list|)
argument_list|,
name|Objects
operator|.
name|toString
argument_list|(
name|deserializedRow
index|[
name|fieldIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|assertEquals
argument_list|(
name|row
index|[
name|fieldIndex
index|]
argument_list|,
name|deserializedRow
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
name|STRUCT
case|:
specifier|final
name|Object
index|[]
name|rowStruct
init|=
operator|(
name|Object
index|[]
operator|)
name|row
index|[
name|fieldIndex
index|]
decl_stmt|;
specifier|final
name|List
name|deserializedRowStruct
init|=
operator|(
name|List
operator|)
name|deserializedRow
index|[
name|fieldIndex
index|]
decl_stmt|;
if|if
condition|(
name|rowStruct
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|deserializedRowStruct
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|rowStruct
argument_list|,
name|deserializedRowStruct
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LIST
case|:
case|case
name|UNION
case|:
name|assertEquals
argument_list|(
name|row
index|[
name|fieldIndex
index|]
argument_list|,
name|deserializedRow
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
specifier|final
name|Map
name|rowMap
init|=
operator|(
name|Map
operator|)
name|row
index|[
name|fieldIndex
index|]
decl_stmt|;
specifier|final
name|Map
name|deserializedRowMap
init|=
operator|(
name|Map
operator|)
name|deserializedRow
index|[
name|fieldIndex
index|]
decl_stmt|;
if|if
condition|(
name|rowMap
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|deserializedRowMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Set
name|rowMapKeySet
init|=
name|rowMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
specifier|final
name|Set
name|deserializedRowMapKeySet
init|=
name|deserializedRowMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rowMapKeySet
argument_list|,
name|deserializedRowMapKeySet
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|rowMapKeySet
control|)
block|{
name|assertEquals
argument_list|(
name|rowMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|deserializedRowMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComprehensive
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"datatypes.c1"
block|,
literal|"int"
block|}
block|,
block|{
literal|"datatypes.c2"
block|,
literal|"boolean"
block|}
block|,
block|{
literal|"datatypes.c3"
block|,
literal|"double"
block|}
block|,
block|{
literal|"datatypes.c4"
block|,
literal|"string"
block|}
block|,
block|{
literal|"datatypes.c5"
block|,
literal|"array<int>"
block|}
block|,
block|{
literal|"datatypes.c6"
block|,
literal|"map<int,string>"
block|}
block|,
block|{
literal|"datatypes.c7"
block|,
literal|"map<string,string>"
block|}
block|,
block|{
literal|"datatypes.c8"
block|,
literal|"struct<r:string,s:int,t:double>"
block|}
block|,
block|{
literal|"datatypes.c9"
block|,
literal|"tinyint"
block|}
block|,
block|{
literal|"datatypes.c10"
block|,
literal|"smallint"
block|}
block|,
block|{
literal|"datatypes.c11"
block|,
literal|"float"
block|}
block|,
block|{
literal|"datatypes.c12"
block|,
literal|"bigint"
block|}
block|,
block|{
literal|"datatypes.c13"
block|,
literal|"array<array<string>>"
block|}
block|,
block|{
literal|"datatypes.c14"
block|,
literal|"map<int,map<int,int>>"
block|}
block|,
block|{
literal|"datatypes.c15"
block|,
literal|"struct<r:int,s:struct<a:int,b:string>>"
block|}
block|,
block|{
literal|"datatypes.c16"
block|,
literal|"array<struct<m:map<string,string>,n:int>>"
block|}
block|,
block|{
literal|"datatypes.c17"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"datatypes.c18"
block|,
literal|"decimal(16,7)"
block|}
block|,
block|{
literal|"datatypes.c19"
block|,
literal|"binary"
block|}
block|,
block|{
literal|"datatypes.c20"
block|,
literal|"date"
block|}
block|,
block|{
literal|"datatypes.c21"
block|,
literal|"varchar(20)"
block|}
block|,
block|{
literal|"datatypes.c22"
block|,
literal|"char(15)"
block|}
block|,
block|{
literal|"datatypes.c23"
block|,
literal|"binary"
block|}
block|,     }
decl_stmt|;
name|Object
index|[]
index|[]
name|comprehensiveRows
init|=
block|{
block|{
name|intW
argument_list|(
literal|0
argument_list|)
block|,
comment|// c1:int
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
block|,
comment|// c2:boolean
name|doubleW
argument_list|(
literal|0
argument_list|)
block|,
comment|// c3:double
name|text
argument_list|(
literal|"Hello"
argument_list|)
block|,
comment|// c4:string
name|newArrayList
argument_list|(
name|intW
argument_list|(
literal|0
argument_list|)
argument_list|,
name|intW
argument_list|(
literal|1
argument_list|)
argument_list|,
name|intW
argument_list|(
literal|2
argument_list|)
argument_list|)
block|,
comment|// c5:array<int>
name|Maps
operator|.
name|toMap
argument_list|(
name|newArrayList
argument_list|(
name|intW
argument_list|(
literal|0
argument_list|)
argument_list|,
name|intW
argument_list|(
literal|1
argument_list|)
argument_list|,
name|intW
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|input
lambda|->
name|text
argument_list|(
literal|"Number "
operator|+
name|input
argument_list|)
argument_list|)
block|,
comment|// c6:map<int,string>
name|Maps
operator|.
name|toMap
argument_list|(
name|newArrayList
argument_list|(
name|text
argument_list|(
literal|"apple"
argument_list|)
argument_list|,
name|text
argument_list|(
literal|"banana"
argument_list|)
argument_list|,
name|text
argument_list|(
literal|"carrot"
argument_list|)
argument_list|)
argument_list|,
name|input
lambda|->
name|text
argument_list|(
name|input
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
block|,
comment|// c7:map<string,string>
operator|new
name|Object
index|[]
block|{
name|text
argument_list|(
literal|"0"
argument_list|)
block|,
name|intW
argument_list|(
literal|1
argument_list|)
block|,
name|doubleW
argument_list|(
literal|2
argument_list|)
block|}
block|,
comment|// c8:struct<r:string,s:int,t:double>
name|byteW
argument_list|(
literal|0
argument_list|)
block|,
comment|// c9:tinyint
name|shortW
argument_list|(
literal|0
argument_list|)
block|,
comment|// c10:smallint
name|floatW
argument_list|(
literal|0
argument_list|)
block|,
comment|// c11:float
name|longW
argument_list|(
literal|0
argument_list|)
block|,
comment|// c12:bigint
name|newArrayList
argument_list|(
name|newArrayList
argument_list|(
name|text
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|text
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|text
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|text
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|text
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
block|,
comment|// c13:array<array<string>>
name|Maps
operator|.
name|toMap
argument_list|(
name|newArrayList
argument_list|(
name|intW
argument_list|(
literal|0
argument_list|)
argument_list|,
name|intW
argument_list|(
literal|1
argument_list|)
argument_list|,
name|intW
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|x
lambda|->
name|Maps
operator|.
name|toMap
argument_list|(
name|newArrayList
argument_list|(
name|x
argument_list|,
name|intW
argument_list|(
name|x
operator|.
name|get
argument_list|()
operator|*
literal|2
argument_list|)
argument_list|)
argument_list|,
name|y
lambda|->
name|y
argument_list|)
argument_list|)
block|,
comment|// c14:map<int,map<int,int>>
operator|new
name|Object
index|[]
block|{
name|intW
argument_list|(
literal|0
argument_list|)
block|,
name|newArrayList
argument_list|(
name|intW
argument_list|(
literal|1
argument_list|)
argument_list|,
name|text
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
block|}
block|,
comment|// c15:struct<r:int,s:struct<a:int,b:string>>
name|Collections
operator|.
name|singletonList
argument_list|(
name|newArrayList
argument_list|(
name|Maps
operator|.
name|toMap
argument_list|(
name|newArrayList
argument_list|(
name|text
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
argument_list|,
name|input
lambda|->
name|text
argument_list|(
name|input
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|intW
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
block|,
comment|// c16:array<struct<m:map<string,string>,n:int>>
operator|new
name|TimestampWritableV2
argument_list|(
name|TIMESTAMP
argument_list|)
block|,
comment|// c17:timestamp
name|decimalW
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
block|,
comment|// c18:decimal(16,7)
operator|new
name|BytesWritable
argument_list|(
literal|"Hello"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
comment|// c19:binary
operator|new
name|DateWritableV2
argument_list|(
literal|123
argument_list|)
block|,
comment|// c20:date
name|varcharW
argument_list|(
literal|"x"
argument_list|,
literal|20
argument_list|)
block|,
comment|// c21:varchar(20)
name|charW
argument_list|(
literal|"y"
argument_list|,
literal|15
argument_list|)
block|,
comment|// c22:char(15)
operator|new
name|BytesWritable
argument_list|(
literal|"world!"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
comment|// c23:binary
block|}
block|,
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
comment|// c1-c10
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
comment|// c11-c20
literal|null
block|,
literal|null
block|,
literal|null
block|,
comment|// c21-c23
block|}
block|}
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|comprehensiveRows
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|newArrayList
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveInteger
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"tinyint1"
block|,
literal|"tinyint"
block|}
block|,
block|{
literal|"smallint1"
block|,
literal|"smallint"
block|}
block|,
block|{
literal|"int1"
block|,
literal|"int"
block|}
block|,
block|{
literal|"bigint1"
block|,
literal|"bigint"
block|}
block|}
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|INTEGER_ROWS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveBigInt10000
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"bigint1"
block|,
literal|"bigint"
block|}
block|}
decl_stmt|;
specifier|final
name|int
name|batchSize
init|=
literal|1000
decl_stmt|;
specifier|final
name|Object
index|[]
index|[]
name|integerRows
init|=
operator|new
name|Object
index|[
name|batchSize
index|]
index|[]
decl_stmt|;
specifier|final
name|ArrowColumnarBatchSerDe
name|serDe
init|=
operator|new
name|ArrowColumnarBatchSerDe
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|rowOI
init|=
name|initSerDe
argument_list|(
name|serDe
argument_list|,
name|schema
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|integerRows
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[]
block|{
name|longW
argument_list|(
name|i
operator|+
name|j
operator|*
name|batchSize
argument_list|)
block|}
expr_stmt|;
block|}
name|serializeAndDeserialize
argument_list|(
name|serDe
argument_list|,
name|integerRows
argument_list|,
name|rowOI
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveBigIntRandom
parameter_list|()
block|{
try|try
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"bigint1"
block|,
literal|"bigint"
block|}
block|}
decl_stmt|;
specifier|final
name|ArrowColumnarBatchSerDe
name|serDe
init|=
operator|new
name|ArrowColumnarBatchSerDe
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|rowOI
init|=
name|initSerDe
argument_list|(
name|serDe
argument_list|,
name|schema
argument_list|)
decl_stmt|;
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|batchSize
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
index|[]
name|integerRows
init|=
operator|new
name|Object
index|[
name|batchSize
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|integerRows
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[]
block|{
name|longW
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
block|}
expr_stmt|;
block|}
name|serializeAndDeserialize
argument_list|(
name|serDe
argument_list|,
name|integerRows
argument_list|,
name|rowOI
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveFloat
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"float1"
block|,
literal|"float"
block|}
block|,
block|{
literal|"double1"
block|,
literal|"double"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|FLOAT_ROWS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AssertionError
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPrimitiveFloatNaN
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"float1"
block|,
literal|"float"
block|}
block|,     }
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
block|{
block|{
operator|new
name|FloatWritable
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
block|}
block|}
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AssertionError
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPrimitiveDoubleNaN
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"double1"
block|,
literal|"double"
block|}
block|,     }
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
block|{
block|{
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
block|}
block|}
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveString
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"string1"
block|,
literal|"string"
block|}
block|,
block|{
literal|"char1"
block|,
literal|"char(10)"
block|}
block|,
block|{
literal|"varchar1"
block|,
literal|"varchar(10)"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|STRING_ROWS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveDTI
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"date1"
block|,
literal|"date"
block|}
block|,
block|{
literal|"timestamp1"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"interval_year_month1"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"interval_day_time1"
block|,
literal|"interval_day_time"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|DTI_ROWS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveRandomTimestamp
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"timestamp1"
block|,
literal|"timestamp"
block|}
block|,     }
decl_stmt|;
name|int
name|size
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ARROW_BATCH_SIZE
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|294722773L
argument_list|)
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
operator|new
name|Object
index|[
name|size
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|long
name|millis
init|=
operator|(
operator|(
name|long
operator|)
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|)
operator|*
literal|1000
decl_stmt|;
name|Timestamp
name|timestamp
init|=
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|?
name|millis
else|:
operator|-
name|millis
argument_list|)
decl_stmt|;
name|timestamp
operator|.
name|setNanos
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|rows
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[]
block|{
operator|new
name|TimestampWritableV2
argument_list|(
name|timestamp
argument_list|)
block|}
expr_stmt|;
block|}
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveDecimal
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"decimal1"
block|,
literal|"decimal(38,10)"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|DECIMAL_ROWS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomPrimitiveDecimal
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"decimal1"
block|,
literal|"decimal(38,10)"
block|}
block|,     }
decl_stmt|;
name|int
name|size
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|randomDecimals
init|=
operator|new
name|Object
index|[
name|size
index|]
index|[]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|'+'
else|:
literal|'-'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|28
condition|;
name|j
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|randomDecimals
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[]
block|{
name|decimalW
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
block|}
expr_stmt|;
block|}
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|randomDecimals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveBoolean
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"boolean1"
block|,
literal|"boolean"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|BOOLEAN_ROWS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveBinary
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"binary1"
block|,
literal|"binary"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|BINARY_ROWS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
index|[]
index|[]
name|toList
parameter_list|(
name|Object
index|[]
index|[]
name|rows
parameter_list|)
block|{
name|List
index|[]
index|[]
name|array
init|=
operator|new
name|List
index|[
name|rows
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|rows
operator|.
name|length
condition|;
name|rowIndex
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|rows
index|[
name|rowIndex
index|]
decl_stmt|;
name|array
index|[
name|rowIndex
index|]
operator|=
operator|new
name|List
index|[
name|row
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|row
operator|.
name|length
condition|;
name|fieldIndex
operator|++
control|)
block|{
name|array
index|[
name|rowIndex
index|]
index|[
name|fieldIndex
index|]
operator|=
name|newArrayList
argument_list|(
name|row
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|array
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListInteger
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"tinyint_list"
block|,
literal|"array<tinyint>"
block|}
block|,
block|{
literal|"smallint_list"
block|,
literal|"array<smallint>"
block|}
block|,
block|{
literal|"int_list"
block|,
literal|"array<int>"
block|}
block|,
block|{
literal|"bigint_list"
block|,
literal|"array<bigint>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toList
argument_list|(
name|INTEGER_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListFloat
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"float_list"
block|,
literal|"array<float>"
block|}
block|,
block|{
literal|"double_list"
block|,
literal|"array<double>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toList
argument_list|(
name|FLOAT_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListString
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"string_list"
block|,
literal|"array<string>"
block|}
block|,
block|{
literal|"char_list"
block|,
literal|"array<char(10)>"
block|}
block|,
block|{
literal|"varchar_list"
block|,
literal|"array<varchar(10)>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toList
argument_list|(
name|STRING_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListDTI
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"date_list"
block|,
literal|"array<date>"
block|}
block|,
block|{
literal|"timestamp_list"
block|,
literal|"array<timestamp>"
block|}
block|,
block|{
literal|"interval_year_month_list"
block|,
literal|"array<interval_year_month>"
block|}
block|,
block|{
literal|"interval_day_time_list"
block|,
literal|"array<interval_day_time>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toList
argument_list|(
name|DTI_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListBoolean
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"boolean_list"
block|,
literal|"array<boolean>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toList
argument_list|(
name|BOOLEAN_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListBinary
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"binary_list"
block|,
literal|"array<binary>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toList
argument_list|(
name|BINARY_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
index|[]
index|[]
index|[]
name|toStruct
parameter_list|(
name|Object
index|[]
index|[]
name|rows
parameter_list|)
block|{
name|Object
index|[]
index|[]
index|[]
name|struct
init|=
operator|new
name|Object
index|[
name|rows
operator|.
name|length
index|]
index|[]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|rows
operator|.
name|length
condition|;
name|rowIndex
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|rows
index|[
name|rowIndex
index|]
decl_stmt|;
name|struct
index|[
name|rowIndex
index|]
operator|=
operator|new
name|Object
index|[]
index|[]
block|{
name|row
block|}
expr_stmt|;
block|}
return|return
name|struct
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructInteger
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"int_struct"
block|,
literal|"struct<tinyint1:tinyint,smallint1:smallint,int1:int,bigint1:bigint>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toStruct
argument_list|(
name|INTEGER_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructFloat
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"float_struct"
block|,
literal|"struct<float1:float,double1:double>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toStruct
argument_list|(
name|FLOAT_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructString
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"string_struct"
block|,
literal|"struct<string1:string,char1:char(10),varchar1:varchar(10)>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toStruct
argument_list|(
name|STRING_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructDTI
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"date_struct"
block|,
literal|"struct<date1:date,timestamp1:timestamp,"
operator|+
literal|"interval_year_month1:interval_year_month,interval_day_time1:interval_day_time>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toStruct
argument_list|(
name|DTI_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructDecimal
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"decimal_struct"
block|,
literal|"struct<decimal1:decimal(38,10)>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toStruct
argument_list|(
name|DECIMAL_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructBoolean
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"boolean_struct"
block|,
literal|"struct<boolean1:boolean>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toStruct
argument_list|(
name|BOOLEAN_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructBinary
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"binary_struct"
block|,
literal|"struct<binary1:binary>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toStruct
argument_list|(
name|BINARY_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
index|[]
index|[]
name|toMap
parameter_list|(
name|Object
index|[]
index|[]
name|rows
parameter_list|)
block|{
name|Map
index|[]
index|[]
name|array
init|=
operator|new
name|Map
index|[
name|rows
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|rows
operator|.
name|length
condition|;
name|rowIndex
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|rows
index|[
name|rowIndex
index|]
decl_stmt|;
name|array
index|[
name|rowIndex
index|]
operator|=
operator|new
name|Map
index|[
name|row
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|row
operator|.
name|length
condition|;
name|fieldIndex
operator|++
control|)
block|{
name|Map
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|row
index|[
name|fieldIndex
index|]
argument_list|)
argument_list|)
argument_list|,
name|row
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
name|array
index|[
name|rowIndex
index|]
index|[
name|fieldIndex
index|]
operator|=
name|map
expr_stmt|;
block|}
block|}
return|return
name|array
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapInteger
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"tinyint_map"
block|,
literal|"map<string,tinyint>"
block|}
block|,
block|{
literal|"smallint_map"
block|,
literal|"map<string,smallint>"
block|}
block|,
block|{
literal|"int_map"
block|,
literal|"map<string,int>"
block|}
block|,
block|{
literal|"bigint_map"
block|,
literal|"map<string,bigint>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toMap
argument_list|(
name|INTEGER_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapFloat
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"float_map"
block|,
literal|"map<string,float>"
block|}
block|,
block|{
literal|"double_map"
block|,
literal|"map<string,double>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toMap
argument_list|(
name|FLOAT_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapString
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"string_map"
block|,
literal|"map<string,string>"
block|}
block|,
block|{
literal|"char_map"
block|,
literal|"map<string,char(10)>"
block|}
block|,
block|{
literal|"varchar_map"
block|,
literal|"map<string,varchar(10)>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toMap
argument_list|(
name|STRING_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapDTI
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"date_map"
block|,
literal|"map<string,date>"
block|}
block|,
block|{
literal|"timestamp_map"
block|,
literal|"map<string,timestamp>"
block|}
block|,
block|{
literal|"interval_year_month_map"
block|,
literal|"map<string,interval_year_month>"
block|}
block|,
block|{
literal|"interval_day_time_map"
block|,
literal|"map<string,interval_day_time>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toMap
argument_list|(
name|DTI_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapBoolean
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"boolean_map"
block|,
literal|"map<string,boolean>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toMap
argument_list|(
name|BOOLEAN_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapBinary
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"binary_map"
block|,
literal|"map<string,binary>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toMap
argument_list|(
name|BINARY_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveCharPadding
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"char1"
block|,
literal|"char(10)"
block|}
block|,     }
decl_stmt|;
name|HiveCharWritable
index|[]
index|[]
name|rows
init|=
operator|new
name|HiveCharWritable
index|[]
index|[]
block|{
block|{
name|charW
argument_list|(
literal|"Hello"
argument_list|,
literal|10
argument_list|)
block|}
block|,
block|{
name|charW
argument_list|(
literal|"world!"
argument_list|,
literal|10
argument_list|)
block|}
block|}
decl_stmt|;
name|ArrowColumnarBatchSerDe
name|serDe
init|=
operator|new
name|ArrowColumnarBatchSerDe
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|rowOI
init|=
name|initSerDe
argument_list|(
name|serDe
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|ArrowWrapperWritable
name|serialized
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|row
range|:
name|rows
control|)
block|{
name|serialized
operator|=
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|rowOI
argument_list|)
expr_stmt|;
block|}
comment|// Pass null to complete a batch
if|if
condition|(
name|serialized
operator|==
literal|null
condition|)
block|{
name|serialized
operator|=
name|serDe
operator|.
name|serialize
argument_list|(
literal|null
argument_list|,
name|rowOI
argument_list|)
expr_stmt|;
block|}
name|VarCharVector
name|varCharVector
init|=
operator|(
name|VarCharVector
operator|)
name|serialized
operator|.
name|getVectorSchemaRoot
argument_list|()
operator|.
name|getFieldVectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|rows
index|[
name|i
index|]
index|[
literal|0
index|]
operator|.
name|getPaddedValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|varCharVector
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMapDecimal
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"decimal_map"
block|,
literal|"map<string,decimal(38,10)>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toMap
argument_list|(
name|DECIMAL_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testListDecimal
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
index|[]
index|[]
name|schema
init|=
block|{
block|{
literal|"decimal_list"
block|,
literal|"array<decimal(38,10)>"
block|}
block|,     }
decl_stmt|;
name|initAndSerializeAndDeserialize
argument_list|(
name|schema
argument_list|,
name|toList
argument_list|(
name|DECIMAL_ROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

