begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFJsonRead
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UDFArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testArgCnt1
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UDFArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testArgCnt3
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|,
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UDFArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testArgInvalidType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"__invalid__type__"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testList
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"array<string>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
literal|"[\"a\",\"b\",null]"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|l
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|res
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"array<string>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
literal|"null"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleStruct
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"struct<a:string>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
literal|"{\"a\":\"b\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|res
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|o
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructNullField
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"struct<a:string>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
literal|"{\"a\":null}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|res
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|o
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"struct<a:string>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"struct<a:string>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|DeferredObject
index|[]
block|{
operator|new
name|DeferredJavaObject
argument_list|(
literal|null
argument_list|)
block|,
literal|null
block|}
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructNullComplexField
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"struct<a:struct<x:string>>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
literal|"{\"a\":null}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|res
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|o
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUndeclaredStructField
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"struct<a:int>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
literal|"{\"b\":null}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|res
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|o
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnexpectedStruct
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"array<int>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
literal|"[1,22,2,{\"b\":null}]"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|res
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|o
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMap
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
literal|"map<string,string>"
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Object
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
literal|"{\"a\":\"v\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
name|o
init|=
operator|(
name|Map
operator|)
name|res
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|o
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"v"
argument_list|)
argument_list|,
name|o
operator|.
name|get
argument_list|(
operator|new
name|Text
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DeferredObject
index|[]
name|evalArgs
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|new
name|DeferredObject
index|[]
block|{
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|Text
argument_list|(
name|string
argument_list|)
argument_list|)
block|,
literal|null
block|}
return|;
block|}
specifier|private
name|ObjectInspector
index|[]
name|buildArguments
parameter_list|(
name|String
name|typeStr
parameter_list|)
block|{
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|,
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|Text
argument_list|(
name|typeStr
argument_list|)
argument_list|)
block|}
decl_stmt|;
return|return
name|arguments
return|;
block|}
block|}
end_class

end_unit

