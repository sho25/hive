begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|ParquetHiveSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetWriter
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|hadoop
operator|.
name|api
operator|.
name|WriteSupport
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|RecordConsumer
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|schema
operator|.
name|MessageType
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTestParquetDirect
block|{
specifier|public
specifier|static
name|FileSystem
name|localFS
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initializeFS
parameter_list|()
throws|throws
name|IOException
block|{
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|tempDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|public
interface|interface
name|DirectWriter
block|{
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|consumer
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|DirectWriteSupport
extends|extends
name|WriteSupport
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
name|RecordConsumer
name|recordConsumer
decl_stmt|;
specifier|private
specifier|final
name|MessageType
name|type
decl_stmt|;
specifier|private
specifier|final
name|DirectWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
decl_stmt|;
specifier|private
name|DirectWriteSupport
parameter_list|(
name|MessageType
name|type
parameter_list|,
name|DirectWriter
name|writer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WriteContext
name|init
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
return|return
operator|new
name|WriteContext
argument_list|(
name|type
argument_list|,
name|metadata
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepareForWrite
parameter_list|(
name|RecordConsumer
name|recordConsumer
parameter_list|)
block|{
name|this
operator|.
name|recordConsumer
operator|=
name|recordConsumer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Void
name|record
parameter_list|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|recordConsumer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Path
name|writeDirect
parameter_list|(
name|String
name|name
parameter_list|,
name|MessageType
name|type
parameter_list|,
name|DirectWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|tempDir
operator|.
name|newFile
argument_list|(
name|name
operator|+
literal|".parquet"
argument_list|)
decl_stmt|;
name|temp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|temp
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|temp
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|ParquetWriter
argument_list|<
name|Void
argument_list|>
name|parquetWriter
init|=
operator|new
name|ParquetWriter
argument_list|<
name|Void
argument_list|>
argument_list|(
name|path
argument_list|,
operator|new
name|DirectWriteSupport
argument_list|(
name|type
argument_list|,
name|writer
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|parquetWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|parquetWriter
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|path
return|;
block|}
specifier|public
specifier|static
name|ArrayWritable
name|record
parameter_list|(
name|Writable
modifier|...
name|fields
parameter_list|)
block|{
return|return
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|fields
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ArrayWritable
name|list
parameter_list|(
name|Writable
modifier|...
name|elements
parameter_list|)
block|{
comment|// the ObjectInspector for array<?> and map<?, ?> expects an extra layer
return|return
operator|new
name|ArrayWritable
argument_list|(
name|ArrayWritable
operator|.
name|class
argument_list|,
operator|new
name|ArrayWritable
index|[]
block|{
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|elements
argument_list|)
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|ArrayWritable
name|arrayWritable
parameter_list|)
block|{
name|Writable
index|[]
name|writables
init|=
name|arrayWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[
name|writables
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writables
operator|.
name|length
condition|;
name|i
operator|+=
literal|1
control|)
block|{
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|ArrayWritable
condition|)
block|{
name|strings
index|[
name|i
index|]
operator|=
name|toString
argument_list|(
operator|(
name|ArrayWritable
operator|)
name|writables
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|strings
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|writables
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|strings
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|String
name|message
parameter_list|,
name|ArrayWritable
name|expected
parameter_list|,
name|ArrayWritable
name|actual
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|message
argument_list|,
name|toString
argument_list|(
name|expected
argument_list|)
argument_list|,
name|toString
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ArrayWritable
argument_list|>
name|read
parameter_list|(
name|Path
name|parquetFile
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ArrayWritable
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayWritable
argument_list|>
argument_list|()
decl_stmt|;
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|ArrayWritable
argument_list|>
name|reader
init|=
operator|new
name|MapredParquetInputFormat
argument_list|()
operator|.
name|getRecordReader
argument_list|(
operator|new
name|FileSplit
argument_list|(
name|parquetFile
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|(
name|parquetFile
argument_list|)
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
operator|new
name|JobConf
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NullWritable
name|alwaysNull
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|ArrayWritable
name|record
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|alwaysNull
argument_list|,
name|record
argument_list|)
condition|)
block|{
name|records
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|record
operator|=
name|reader
operator|.
name|createValue
argument_list|()
expr_stmt|;
comment|// a new value so the last isn't clobbered
block|}
return|return
name|records
return|;
block|}
specifier|public
specifier|static
name|long
name|fileLength
parameter_list|(
name|Path
name|localFile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|localFS
operator|.
name|getFileStatus
argument_list|(
name|localFile
argument_list|)
operator|.
name|getLen
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Joiner
name|COMMA
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
decl_stmt|;
specifier|public
name|void
name|deserialize
parameter_list|(
name|Writable
name|record
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnTypes
parameter_list|)
throws|throws
name|Exception
block|{
name|ParquetHiveSerDe
name|serde
init|=
operator|new
name|ParquetHiveSerDe
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|COMMA
operator|.
name|join
argument_list|(
name|columnNames
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|COMMA
operator|.
name|join
argument_list|(
name|columnTypes
argument_list|)
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|serde
operator|.
name|deserialize
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

