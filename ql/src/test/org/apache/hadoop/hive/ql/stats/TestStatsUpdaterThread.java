begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestStatsUpdaterThread
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStatsUpdaterThread
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestStatsUpdaterThread
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|SessionState
name|ss
decl_stmt|;
name|String
name|getTestDataDir
parameter_list|()
block|{
return|return
name|TEST_DATA_DIR
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestStatsUpdaterThread
operator|.
name|class
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|getTestDataDir
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEINPUTFORMAT
argument_list|,
name|HiveInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
comment|//    hiveConf.setBoolVar(HiveConf.ConfVars.MERGE_CARDINALITY_VIOLATION_CHECK, true);
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|STATS_AUTO_UPDATE
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|getTestDataDir
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|getTestDataDir
argument_list|()
argument_list|)
operator|.
name|mkdirs
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create "
operator|+
name|getTestDataDir
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|ss
operator|=
name|DriverUtils
operator|.
name|setUpSessionState
argument_list|(
name|hiveConf
argument_list|,
literal|"hive"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cleanUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|HiveException
block|{
name|executeQuery
argument_list|(
literal|"drop table simple_stats"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"drop table simple_stats2"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"drop table simple_stats3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
specifier|public
name|void
name|testSimpleUpdateWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|su
operator|.
name|startWorkers
argument_list|()
expr_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (i int, s string)"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats (i, s) values (1, 'test')"
argument_list|)
expr_stmt|;
name|verifyAndUnsetColStats
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|msClient
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|su
operator|.
name|waitForQueuedCommands
argument_list|()
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
specifier|public
name|void
name|testMultipleTables
parameter_list|()
throws|throws
name|Exception
block|{
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (s string)"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats (s) values ('test')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats2 (s string)"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats2 (s) values ('test2')"
argument_list|)
expr_stmt|;
name|verifyAndUnsetColStats
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|)
expr_stmt|;
name|verifyAndUnsetColStats
argument_list|(
literal|"simple_stats2"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|)
expr_stmt|;
name|verifyAndUnsetColStats
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|)
expr_stmt|;
name|verifyAndUnsetColStats
argument_list|(
literal|"simple_stats2"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|)
expr_stmt|;
name|setTableSkipProperty
argument_list|(
name|msClient
argument_list|,
literal|"simple_stats"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyAndUnsetColStats
argument_list|(
literal|"simple_stats2"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|80000
argument_list|)
specifier|public
name|void
name|testTxnTable
parameter_list|()
throws|throws
name|Exception
block|{
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (s string) TBLPROPERTIES "
operator|+
literal|"(\"transactional\"=\"true\", \"transactional_properties\"=\"insert_only\")"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats (s) values ('test')"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
decl_stmt|,
name|tblName
init|=
literal|"simple_stats"
decl_stmt|,
name|fqName
init|=
name|dbName
operator|+
literal|"."
operator|+
name|tblName
decl_stmt|;
name|ValidWriteIdList
name|initialWriteIds
init|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|fqName
argument_list|)
decl_stmt|;
name|verifyStatsUpToDate
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|,
name|msClient
argument_list|,
name|initialWriteIds
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert overwrite table simple_stats values ('test2')"
argument_list|)
expr_stmt|;
name|ValidWriteIdList
name|nextWriteIds
init|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|fqName
argument_list|)
decl_stmt|;
name|verifyStatsUpToDate
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|,
name|msClient
argument_list|,
name|nextWriteIds
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|String
name|currentWriteIds
init|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|fqName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Overwrite the txn state to refer to an open txn.
name|long
name|badTxnId
init|=
name|msClient
operator|.
name|openTxn
argument_list|(
literal|"moo"
argument_list|)
decl_stmt|;
name|long
name|badWriteId
init|=
name|msClient
operator|.
name|allocateTableWriteId
argument_list|(
name|badTxnId
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setWriteId
argument_list|(
name|badWriteId
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|alter_table
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl
argument_list|,
operator|new
name|EnvironmentContext
argument_list|()
argument_list|,
name|initialWriteIds
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Stats should not be valid.
name|verifyStatsUpToDate
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|,
name|msClient
argument_list|,
name|currentWriteIds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Analyze should not be able to set valid stats for a running txn.
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|)
expr_stmt|;
name|currentWriteIds
operator|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|fqName
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|,
name|msClient
argument_list|,
name|currentWriteIds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|abortTxns
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|badTxnId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Analyze should be able to override stats of an aborted txn.
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|)
expr_stmt|;
comment|// Stats will now be valid.
name|currentWriteIds
operator|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|fqName
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|,
name|msClient
argument_list|,
name|currentWriteIds
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Verify that incorrect stats from a valid write ID are also handled.
name|badTxnId
operator|=
name|msClient
operator|.
name|openTxn
argument_list|(
literal|"moo"
argument_list|)
expr_stmt|;
name|badWriteId
operator|=
name|msClient
operator|.
name|allocateTableWriteId
argument_list|(
name|badTxnId
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setWriteId
argument_list|(
name|badWriteId
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|StatsSetupConst
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|alter_table
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl
argument_list|,
operator|new
name|EnvironmentContext
argument_list|()
argument_list|,
name|initialWriteIds
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Stats should not be valid.
name|verifyStatsUpToDate
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|,
name|msClient
argument_list|,
name|currentWriteIds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Analyze should not be able to set valid stats for a running txn.
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|)
expr_stmt|;
name|currentWriteIds
operator|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|fqName
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|,
name|msClient
argument_list|,
name|currentWriteIds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|commitTxn
argument_list|(
name|badTxnId
argument_list|)
expr_stmt|;
comment|// Analyze should be able to override stats of an committed txn.
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|)
expr_stmt|;
comment|// Stats will now be valid.
name|currentWriteIds
operator|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|fqName
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|,
name|msClient
argument_list|,
name|currentWriteIds
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTxnPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (s string) partitioned by (p int) TBLPROPERTIES "
operator|+
literal|"(\"transactional\"=\"true\", \"transactional_properties\"=\"insert_only\")"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(p=1) values ('test')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(p=2) values ('test2')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(p=3) values ('test3')"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert overwrite table simple_stats partition(p=1) values ('test2')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert overwrite table simple_stats partition(p=2) values ('test3')"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Overwrite the txn state to refer to an aborted txn on some partitions.
name|String
name|dbName
init|=
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
decl_stmt|,
name|tblName
init|=
literal|"simple_stats"
decl_stmt|,
name|fqName
init|=
name|dbName
operator|+
literal|"."
operator|+
name|tblName
decl_stmt|;
name|long
name|badTxnId
init|=
name|msClient
operator|.
name|openTxn
argument_list|(
literal|"moo"
argument_list|)
decl_stmt|;
name|long
name|badWriteId
init|=
name|msClient
operator|.
name|allocateTableWriteId
argument_list|(
name|badTxnId
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|msClient
operator|.
name|abortTxns
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|badTxnId
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part1
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p=1"
argument_list|)
decl_stmt|;
name|Partition
name|part2
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p=2"
argument_list|)
decl_stmt|;
name|part1
operator|.
name|setWriteId
argument_list|(
name|badWriteId
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setWriteId
argument_list|(
name|badWriteId
argument_list|)
expr_stmt|;
name|String
name|currentWriteIds
init|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|fqName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// To update write ID we need to specify the write ID list to validate concurrent writes.
name|msClient
operator|.
name|alter_partitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|part1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|currentWriteIds
argument_list|,
name|badWriteId
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|alter_partitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|part2
argument_list|)
argument_list|,
literal|null
argument_list|,
name|currentWriteIds
argument_list|,
name|badWriteId
argument_list|)
expr_stmt|;
comment|// We expect two partitions to be updated.
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|stats
init|=
name|msClient
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"p=1"
argument_list|,
literal|"p=2"
argument_list|,
literal|"p=3"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|currentWriteIds
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Analyze treats stats like data (new write ID), so stats still should not be valid.
name|stats
operator|=
name|msClient
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"p=1"
argument_list|,
literal|"p=2"
argument_list|,
literal|"p=3"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|currentWriteIds
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with null list of partNames
name|stats
operator|=
name|msClient
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|currentWriteIds
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// New reader.
name|currentWriteIds
operator|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|fqName
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|stats
operator|=
name|msClient
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"p=1"
argument_list|,
literal|"p=2"
argument_list|,
literal|"p=3"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|currentWriteIds
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
specifier|public
name|void
name|testExistingOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|STATS_AUTO_UPDATE
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"existing"
argument_list|)
expr_stmt|;
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (i int, s string)"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats (i, s) values (1, 'test')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"analyze table simple_stats compute statistics for columns i"
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyAndUnsetColStats
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|msClient
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|80000
argument_list|)
specifier|public
name|void
name|testQueueingWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|PART_COUNT
init|=
literal|12
decl_stmt|;
name|hiveConf
operator|.
name|setInt
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|BATCH_RETRIEVE_MAX
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setInt
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|STATS_AUTO_UPDATE_WORKER_COUNT
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|su
operator|.
name|startWorkers
argument_list|()
expr_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (s string) partitioned by (i int)"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PART_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(i='"
operator|+
name|i
operator|+
literal|"') values ('test')"
argument_list|)
expr_stmt|;
block|}
name|verifyPartStatsUpToDate
argument_list|(
name|PART_COUNT
argument_list|,
literal|0
argument_list|,
name|msClient
argument_list|,
literal|"simple_stats"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Set one of the partitions to be skipped, so that a command is created for every other one.
name|setPartitionSkipProperty
argument_list|(
name|msClient
argument_list|,
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|su
operator|.
name|waitForQueuedCommands
argument_list|()
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPartStatsUpToDate
argument_list|(
name|PART_COUNT
argument_list|,
literal|1
argument_list|,
name|msClient
argument_list|,
literal|"simple_stats"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Nothing else is updated after the first update.
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
specifier|public
name|void
name|testAllPartitions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|PART_COUNT
init|=
literal|3
decl_stmt|;
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (s string) partitioned by (i int)"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PART_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(i='"
operator|+
name|i
operator|+
literal|"') values ('test')"
argument_list|)
expr_stmt|;
block|}
name|verifyPartStatsUpToDate
argument_list|(
name|PART_COUNT
argument_list|,
literal|0
argument_list|,
name|msClient
argument_list|,
literal|"simple_stats"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// All the partitions need to be updated; a single command can be used.
name|verifyPartStatsUpToDate
argument_list|(
name|PART_COUNT
argument_list|,
literal|0
argument_list|,
name|msClient
argument_list|,
literal|"simple_stats"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Nothing else is updated after the first update.
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
specifier|public
name|void
name|testPartitionSubset
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NONSTAT_PART_COUNT
init|=
literal|3
decl_stmt|;
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (s string) partitioned by (i int)"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NONSTAT_PART_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(i='"
operator|+
name|i
operator|+
literal|"') values ('test')"
argument_list|)
expr_stmt|;
block|}
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(i='"
operator|+
name|NONSTAT_PART_COUNT
operator|+
literal|"') values ('test')"
argument_list|)
expr_stmt|;
name|verifyPartStatsUpToDate
argument_list|(
name|NONSTAT_PART_COUNT
argument_list|,
literal|0
argument_list|,
name|msClient
argument_list|,
literal|"simple_stats"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i="
operator|+
name|NONSTAT_PART_COUNT
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|EXCLUDED_PART
init|=
literal|1
decl_stmt|;
name|setPartitionSkipProperty
argument_list|(
name|msClient
argument_list|,
literal|"simple_stats"
argument_list|,
literal|"i="
operator|+
name|EXCLUDED_PART
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 is excluded via property, 3 already has stats, so we only expect two updates.
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
name|NONSTAT_PART_COUNT
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NONSTAT_PART_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i="
operator|+
name|i
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
name|i
operator|!=
name|EXCLUDED_PART
argument_list|)
expr_stmt|;
block|}
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i="
operator|+
name|EXCLUDED_PART
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
specifier|public
name|void
name|testPartitionsWithDifferentColsAll
parameter_list|()
throws|throws
name|Exception
block|{
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (s string, t string, u string) partitioned by (i int)"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(i=0) values ('test', '0', 'foo')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(i=1) values ('test', '1', 'bar')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"analyze table simple_stats partition(i=0) compute statistics for columns s"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"analyze table simple_stats partition(i=1) compute statistics for columns s, u"
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"t"
argument_list|,
literal|"u"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=1"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|,
literal|"u"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=1"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"t"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
comment|// Different columns means different commands have to be run.
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|,
literal|"t"
argument_list|,
literal|"u"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=1"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|,
literal|"t"
argument_list|,
literal|"u"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Nothing else is updated after the first update.
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|45000
argument_list|)
specifier|public
name|void
name|testPartitionsWithDifferentColsExistingOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|STATS_AUTO_UPDATE
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"existing"
argument_list|)
expr_stmt|;
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (s string, t string, u string) partitioned by (i int)"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(i=0) values ('test', '0', 'foo')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(i=1) values ('test', '1', 'bar')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats partition(i=2) values ('test', '2', 'baz')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"analyze table simple_stats partition(i=0) compute statistics for columns s, t"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"analyze table simple_stats partition(i=1) compute statistics for columns"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"analyze table simple_stats partition(i=2) compute statistics for columns s"
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"u"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=1"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|,
literal|"t"
argument_list|,
literal|"u"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=2"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=2"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"u"
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// We will unset s on i=0, and t on i=1. Only these should be updated; and nothing for 2.
name|verifyAndUnsetColStats
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|)
expr_stmt|;
name|verifyAndUnsetColStats
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=1"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"t"
argument_list|)
argument_list|,
name|msClient
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Exact same state as above.
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"u"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=1"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|,
literal|"t"
argument_list|,
literal|"u"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=2"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
literal|"i=2"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"u"
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
specifier|public
name|void
name|testParallelOps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set high worker count so we get a longer queue.
name|hiveConf
operator|.
name|setInt
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|STATS_AUTO_UPDATE_WORKER_COUNT
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|StatsUpdaterThread
name|su
init|=
name|createUpdater
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats (s string)"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats2 (s string) partitioned by (i int)"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"create table simple_stats3 (s string) partitioned by (i int)"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats values ('test')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats2 partition(i=0) values ('test')"
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats3 partition(i=0) values ('test')"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats3 partition(i=1) values ('test')"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|su
operator|.
name|getQueueLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nothing updated yet.
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPartStatsUpToDate
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|msClient
argument_list|,
literal|"simple_stats2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats3"
argument_list|,
literal|"i=0"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats3"
argument_list|,
literal|"i=1"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|su
operator|.
name|getQueueLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nothing new added to the queue while analyze runs.
comment|// Add another partition without stats.
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
literal|"insert into simple_stats3 partition(i=2) values ('test')"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|su
operator|.
name|getQueueLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// An item for new partition is queued now.
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|verifyStatsUpToDate
argument_list|(
literal|"simple_stats"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPartStatsUpToDate
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|msClient
argument_list|,
literal|"simple_stats2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPartStatsUpToDate
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
name|msClient
argument_list|,
literal|"simple_stats3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|su
operator|.
name|runOneIteration
argument_list|()
argument_list|)
expr_stmt|;
name|drainWorkQueue
argument_list|(
name|su
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Nothing else is updated after the first update.
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyPartStatsUpToDate
parameter_list|(
name|int
name|partCount
parameter_list|,
name|int
name|skip
parameter_list|,
name|IMetaStoreClient
name|msClient
parameter_list|,
name|String
name|tbl
parameter_list|,
name|boolean
name|isUpToDate
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
name|skip
init|;
name|i
operator|<
name|partCount
condition|;
operator|++
name|i
control|)
block|{
name|verifyStatsUpToDate
argument_list|(
name|tbl
argument_list|,
literal|"i="
operator|+
name|i
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|msClient
argument_list|,
name|isUpToDate
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|drainWorkQueue
parameter_list|(
name|StatsUpdaterThread
name|su
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|su
operator|.
name|runOneWorkerIteration
argument_list|(
name|ss
argument_list|,
name|ss
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
literal|false
argument_list|)
condition|)
block|{}
block|}
specifier|private
name|void
name|drainWorkQueue
parameter_list|(
name|StatsUpdaterThread
name|su
parameter_list|,
name|int
name|expectedReqs
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|actualReqs
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|su
operator|.
name|runOneWorkerIteration
argument_list|(
name|ss
argument_list|,
name|ss
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
literal|false
argument_list|)
condition|)
block|{
operator|++
name|actualReqs
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedReqs
argument_list|,
name|actualReqs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setTableSkipProperty
parameter_list|(
name|IMetaStoreClient
name|msClient
parameter_list|,
name|String
name|tbl
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|StatsUpdaterThread
operator|.
name|SKIP_STATS_AUTOUPDATE_PROPERTY
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|alter_table
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setPartitionSkipProperty
parameter_list|(
name|IMetaStoreClient
name|msClient
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|part
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|StatsUpdaterThread
operator|.
name|SKIP_STATS_AUTOUPDATE_PROPERTY
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|alter_partition
argument_list|(
name|part
operator|.
name|getCatName
argument_list|()
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tblName
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyAndUnsetColStats
parameter_list|(
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cols
parameter_list|,
name|IMetaStoreClient
name|msClient
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|tbl
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|verifyAndUnsetColStatsVal
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|EnvironmentContext
name|ec
init|=
operator|new
name|EnvironmentContext
argument_list|()
decl_stmt|;
comment|// Make sure metastore doesn't mess with our bogus stats updates.
name|ec
operator|.
name|putToProperties
argument_list|(
name|StatsSetupConst
operator|.
name|DO_NOT_UPDATE_STATS
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|alter_table_with_environmentContext
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tbl
argument_list|,
name|ec
argument_list|)
expr_stmt|;
comment|// Double-check.
name|tbl
operator|=
name|msClient
operator|.
name|getTable
argument_list|(
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|col
range|:
name|cols
control|)
block|{
name|assertFalse
argument_list|(
name|StatsSetupConst
operator|.
name|areColumnStatsUptoDate
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyAndUnsetColStatsVal
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cols
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|StatsSetupConst
operator|.
name|areBasicStatsUptoDate
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|col
range|:
name|cols
control|)
block|{
name|assertTrue
argument_list|(
name|StatsSetupConst
operator|.
name|areColumnStatsUptoDate
argument_list|(
name|params
argument_list|,
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StatsSetupConst
operator|.
name|removeColumnStatsState
argument_list|(
name|params
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyAndUnsetColStats
parameter_list|(
name|String
name|tblName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cols
parameter_list|,
name|IMetaStoreClient
name|msClient
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|part
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|verifyAndUnsetColStatsVal
argument_list|(
name|part
operator|.
name|getParameters
argument_list|()
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|EnvironmentContext
name|ec
init|=
operator|new
name|EnvironmentContext
argument_list|()
decl_stmt|;
comment|// Make sure metastore doesn't mess with our bogus stats updates.
name|ec
operator|.
name|putToProperties
argument_list|(
name|StatsSetupConst
operator|.
name|DO_NOT_UPDATE_STATS
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|msClient
operator|.
name|alter_partition
argument_list|(
name|part
operator|.
name|getCatName
argument_list|()
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tblName
argument_list|,
name|part
argument_list|,
name|ec
argument_list|)
expr_stmt|;
comment|// Double-check.
name|part
operator|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|col
range|:
name|cols
control|)
block|{
name|assertFalse
argument_list|(
name|StatsSetupConst
operator|.
name|areColumnStatsUptoDate
argument_list|(
name|part
operator|.
name|getParameters
argument_list|()
argument_list|,
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyStatsUpToDate
parameter_list|(
name|String
name|tbl
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cols
parameter_list|,
name|IMetaStoreClient
name|msClient
parameter_list|,
name|boolean
name|isUpToDate
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
name|verifyStatsUpToDate
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|,
name|cols
argument_list|,
name|isUpToDate
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyStatsUpToDate
parameter_list|(
name|String
name|tbl
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cols
parameter_list|,
name|IMetaStoreClient
name|msClient
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|boolean
name|isUpToDate
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|ss
operator|.
name|getCurrentCatalog
argument_list|()
argument_list|,
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tbl
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|verifyStatsUpToDate
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|,
name|cols
argument_list|,
name|isUpToDate
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyStatsUpToDate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cols
parameter_list|,
name|boolean
name|isUpToDate
parameter_list|)
block|{
if|if
condition|(
name|isUpToDate
condition|)
block|{
name|assertTrue
argument_list|(
name|StatsSetupConst
operator|.
name|areBasicStatsUptoDate
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|col
range|:
name|cols
control|)
block|{
name|assertEquals
argument_list|(
name|isUpToDate
argument_list|,
name|StatsSetupConst
operator|.
name|areColumnStatsUptoDate
argument_list|(
name|params
argument_list|,
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyStatsUpToDate
parameter_list|(
name|String
name|tbl
parameter_list|,
name|String
name|part
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|cols
parameter_list|,
name|IMetaStoreClient
name|msClient
parameter_list|,
name|boolean
name|isUpToDate
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|partition
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|ss
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|tbl
argument_list|,
name|part
argument_list|)
decl_stmt|;
name|verifyStatsUpToDate
argument_list|(
name|partition
operator|.
name|getParameters
argument_list|()
argument_list|,
name|cols
argument_list|,
name|isUpToDate
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|HiveException
block|{
name|DriverUtils
operator|.
name|runOnDriver
argument_list|(
name|hiveConf
argument_list|,
name|ss
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ss
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
specifier|private
name|StatsUpdaterThread
name|createUpdater
parameter_list|()
throws|throws
name|MetaException
block|{
name|StatsUpdaterThread
name|su
init|=
operator|new
name|StatsUpdaterThread
argument_list|()
decl_stmt|;
name|su
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|su
operator|.
name|init
argument_list|(
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|su
return|;
block|}
block|}
end_class

end_unit

