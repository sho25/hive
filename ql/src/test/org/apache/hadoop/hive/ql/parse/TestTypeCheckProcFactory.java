begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TypeCheckProcFactory
operator|.
name|DefaultExprProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveTypeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_comment
comment|/**  * Parametrized test for the TypeCheckProcFactory.  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTypeCheckProcFactory
block|{
annotation|@
name|Mock
specifier|private
name|PrimitiveTypeInfo
name|typeInfo
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ExprNodeConstantDesc
name|nodeDesc
decl_stmt|;
specifier|private
name|DefaultExprProcessor
name|testSubject
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{1}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"127"
block|,
name|PrimitiveObjectInspectorUtils
operator|.
name|byteTypeEntry
block|,
operator|(
name|byte
operator|)
literal|127
block|,
literal|true
block|}
block|,
block|{
literal|"32767"
block|,
name|PrimitiveObjectInspectorUtils
operator|.
name|shortTypeEntry
block|,
operator|(
name|short
operator|)
literal|32767
block|,
literal|true
block|}
block|,
block|{
literal|"2147483647"
block|,
name|PrimitiveObjectInspectorUtils
operator|.
name|intTypeEntry
block|,
literal|2147483647
block|,
literal|true
block|}
block|,
block|{
literal|"9223372036854775807"
block|,
name|PrimitiveObjectInspectorUtils
operator|.
name|longTypeEntry
block|,
literal|9223372036854775807L
block|,
literal|true
block|}
block|,
block|{
literal|"111.1"
block|,
name|PrimitiveObjectInspectorUtils
operator|.
name|floatTypeEntry
block|,
literal|111.1f
block|,
literal|false
block|}
block|,
block|{
literal|"111.1"
block|,
name|PrimitiveObjectInspectorUtils
operator|.
name|doubleTypeEntry
block|,
literal|111.1d
block|,
literal|false
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|BigDecimal
name|maxValue
decl_stmt|;
specifier|private
specifier|final
name|PrimitiveTypeEntry
name|constType
decl_stmt|;
specifier|private
specifier|final
name|Object
name|expectedValue
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|intType
decl_stmt|;
specifier|public
name|TestTypeCheckProcFactory
parameter_list|(
name|String
name|maxValue
parameter_list|,
name|PrimitiveTypeEntry
name|constType
parameter_list|,
name|Object
name|expectedValue
parameter_list|,
name|boolean
name|intType
parameter_list|)
block|{
name|this
operator|.
name|maxValue
operator|=
operator|new
name|BigDecimal
argument_list|(
name|maxValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|constType
operator|=
name|constType
expr_stmt|;
name|this
operator|.
name|expectedValue
operator|=
name|expectedValue
expr_stmt|;
name|this
operator|.
name|intType
operator|=
name|intType
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
block|{
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|testSubject
operator|=
operator|new
name|DefaultExprProcessor
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testOneCase
parameter_list|(
name|Object
name|constValue
parameter_list|)
block|{
name|when
argument_list|(
name|nodeDesc
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|typeInfo
operator|.
name|getPrimitiveTypeEntry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|constType
argument_list|)
expr_stmt|;
name|ExprNodeConstantDesc
name|result
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|testSubject
operator|.
name|interpretNodeAs
argument_list|(
name|typeInfo
argument_list|,
name|nodeDesc
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|result
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNullCase
parameter_list|(
name|Object
name|constValue
parameter_list|)
block|{
name|when
argument_list|(
name|nodeDesc
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|typeInfo
operator|.
name|getPrimitiveTypeEntry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|constType
argument_list|)
expr_stmt|;
name|ExprNodeConstantDesc
name|result
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|testSubject
operator|.
name|interpretNodeAs
argument_list|(
name|typeInfo
argument_list|,
name|nodeDesc
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithSring
parameter_list|()
block|{
name|testOneCase
argument_list|(
name|maxValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithLSuffix
parameter_list|()
block|{
if|if
condition|(
name|intType
condition|)
block|{
name|testOneCase
argument_list|(
name|maxValue
operator|.
name|toString
argument_list|()
operator|+
literal|"L"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithZeroFraction
parameter_list|()
block|{
if|if
condition|(
name|intType
condition|)
block|{
name|testOneCase
argument_list|(
name|maxValue
operator|.
name|toString
argument_list|()
operator|+
literal|".0"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithFSuffix
parameter_list|()
block|{
name|testOneCase
argument_list|(
name|maxValue
operator|.
name|toString
argument_list|()
operator|+
literal|"f"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithDSuffix
parameter_list|()
block|{
name|testOneCase
argument_list|(
name|maxValue
operator|.
name|toString
argument_list|()
operator|+
literal|"D"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverflow
parameter_list|()
block|{
if|if
condition|(
name|intType
condition|)
block|{
name|testNullCase
argument_list|(
name|maxValue
operator|.
name|add
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1L
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithNonZeroFraction
parameter_list|()
block|{
if|if
condition|(
name|intType
condition|)
block|{
name|testNullCase
argument_list|(
literal|"100.1"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

