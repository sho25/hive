begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExtractDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ScriptDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_comment
comment|/**  * Mimics the actual query compiler in generating end to end plans and testing  * them out.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestExecDriver
extends|extends
name|TestCase
block|{
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|static
name|String
name|tmpdir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
operator|+
name|File
operator|.
name|separator
decl_stmt|;
specifier|private
specifier|static
name|Path
name|tmppath
init|=
operator|new
name|Path
argument_list|(
name|tmpdir
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Hive
name|db
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
static|static
block|{
try|try
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|ExecDriver
operator|.
name|class
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tmppath
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|tmppath
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|tmpdir
operator|+
literal|" exists but is not a directory"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|tmppath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|tmppath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not make scratch directory "
operator|+
name|tmpdir
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Object
name|one
range|:
name|Utilities
operator|.
name|makeList
argument_list|(
literal|"mapplan1.out"
argument_list|,
literal|"mapplan2.out"
argument_list|,
literal|"mapredplan1.out"
argument_list|,
literal|"mapredplan2.out"
argument_list|,
literal|"mapredplan3.out"
argument_list|,
literal|"mapredplan4.out"
argument_list|,
literal|"mapredplan5.out"
argument_list|,
literal|"mapredplan6.out"
argument_list|)
control|)
block|{
name|Path
name|onedir
init|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
operator|(
name|String
operator|)
name|one
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|onedir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|onedir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// copy the test files into hadoop if required.
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Path
index|[]
name|hadoopDataFile
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|String
index|[]
name|testFiles
init|=
block|{
literal|"kv1.txt"
block|,
literal|"kv2.txt"
block|}
decl_stmt|;
name|String
name|testFileDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|oneFile
range|:
name|testFiles
control|)
block|{
name|Path
name|localDataFile
init|=
operator|new
name|Path
argument_list|(
name|testFileDir
argument_list|,
name|oneFile
argument_list|)
decl_stmt|;
name|hadoopDataFile
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
name|oneFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|localDataFile
argument_list|,
name|hadoopDataFile
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|// load the test files into tables
name|i
operator|=
literal|0
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
index|[]
name|srctables
init|=
block|{
literal|"src"
block|,
literal|"src2"
block|}
decl_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|src
range|:
name|srctables
control|)
block|{
name|db
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|src
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
name|src
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|db
operator|.
name|loadTable
argument_list|(
name|hadoopDataFile
index|[
name|i
index|]
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Encountered throwable"
argument_list|)
throw|;
block|}
block|}
name|MapredWork
name|mr
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|mr
operator|=
name|PlanUtils
operator|.
name|getMapRedWork
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addMapWork
parameter_list|(
name|MapredWork
name|mr
parameter_list|,
name|Table
name|tbl
parameter_list|,
name|String
name|alias
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|work
parameter_list|)
block|{
name|mr
operator|.
name|addMapWork
argument_list|(
name|tbl
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|alias
argument_list|,
name|work
argument_list|,
operator|new
name|PartitionDesc
argument_list|(
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|tbl
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|fileDiff
parameter_list|(
name|String
name|datafile
parameter_list|,
name|String
name|testdir
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|testFileDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|testFileDir
argument_list|)
expr_stmt|;
name|FileInputStream
name|fi_gold
init|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|testFileDir
argument_list|,
name|datafile
argument_list|)
argument_list|)
decl_stmt|;
comment|// inbuilt assumption that the testdir has only one output file.
name|Path
name|di_test
init|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
name|testdir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|di_test
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|tmpdir
operator|+
name|testdir
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|di_test
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|tmpdir
operator|+
name|testdir
operator|+
literal|" is not a directory"
argument_list|)
throw|;
block|}
name|FSDataInputStream
name|fi_test
init|=
name|fs
operator|.
name|open
argument_list|(
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|di_test
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Utilities
operator|.
name|contentsEqual
argument_list|(
name|fi_gold
argument_list|,
name|fi_test
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|di_test
operator|.
name|toString
argument_list|()
operator|+
literal|" does not match "
operator|+
name|datafile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|FilterDesc
name|getTestFilterDesc
parameter_list|(
name|String
name|column
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|column
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|lhs
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|children1
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|rhs
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children3
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|lhs
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|rhs
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|desc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"<"
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|children3
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterDesc
argument_list|(
name|desc
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|populateMapPlan1
parameter_list|(
name|Table
name|src
parameter_list|)
block|{
name|mr
operator|.
name|setNumReduceTasks
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|FileSinkDesc
argument_list|>
name|op2
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|FileSinkDesc
argument_list|(
name|tmpdir
operator|+
literal|"mapplan1.out"
argument_list|,
name|Utilities
operator|.
name|defaultTd
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|FilterDesc
argument_list|>
name|op1
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|getTestFilterDesc
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|op2
argument_list|)
decl_stmt|;
name|addMapWork
argument_list|(
name|mr
argument_list|,
name|src
argument_list|,
literal|"a"
argument_list|,
name|op1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|populateMapPlan2
parameter_list|(
name|Table
name|src
parameter_list|)
block|{
name|mr
operator|.
name|setNumReduceTasks
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|FileSinkDesc
argument_list|>
name|op3
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|FileSinkDesc
argument_list|(
name|tmpdir
operator|+
literal|"mapplan2.out"
argument_list|,
name|Utilities
operator|.
name|defaultTd
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|ScriptDesc
argument_list|>
name|op2
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|ScriptDesc
argument_list|(
literal|"cat"
argument_list|,
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|,
literal|"key,value"
argument_list|)
argument_list|,
name|TextRecordWriter
operator|.
name|class
argument_list|,
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|,
literal|"key,value"
argument_list|)
argument_list|,
name|TextRecordReader
operator|.
name|class
argument_list|,
name|TextRecordReader
operator|.
name|class
argument_list|,
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|,
literal|"key"
argument_list|)
argument_list|)
argument_list|,
name|op3
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|FilterDesc
argument_list|>
name|op1
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|getTestFilterDesc
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|op2
argument_list|)
decl_stmt|;
name|addMapWork
argument_list|(
name|mr
argument_list|,
name|src
argument_list|,
literal|"a"
argument_list|,
name|op1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|populateMapRedPlan1
parameter_list|(
name|Table
name|src
parameter_list|)
throws|throws
name|SemanticException
block|{
name|mr
operator|.
name|setNumReduceTasks
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|outputColumns
operator|.
name|add
argument_list|(
literal|"_col"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// map-side work
name|Operator
argument_list|<
name|ReduceSinkDesc
argument_list|>
name|op1
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"key"
argument_list|)
argument_list|)
argument_list|,
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|addMapWork
argument_list|(
name|mr
argument_list|,
name|src
argument_list|,
literal|"a"
argument_list|,
name|op1
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setKeyDesc
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getKeySerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|getTagToValueDesc
argument_list|()
operator|.
name|add
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getValueSerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// reduce side work
name|Operator
argument_list|<
name|FileSinkDesc
argument_list|>
name|op3
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|FileSinkDesc
argument_list|(
name|tmpdir
operator|+
literal|"mapredplan1.out"
argument_list|,
name|Utilities
operator|.
name|defaultTd
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|ExtractDesc
argument_list|>
name|op2
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|ExtractDesc
argument_list|(
name|getStringColumn
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|op3
argument_list|)
decl_stmt|;
name|mr
operator|.
name|setReducer
argument_list|(
name|op2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|populateMapRedPlan2
parameter_list|(
name|Table
name|src
parameter_list|)
throws|throws
name|SemanticException
block|{
name|mr
operator|.
name|setNumReduceTasks
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|outputColumns
operator|.
name|add
argument_list|(
literal|"_col"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// map-side work
name|Operator
argument_list|<
name|ReduceSinkDesc
argument_list|>
name|op1
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"key"
argument_list|)
argument_list|)
argument_list|,
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|getStringColumn
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|addMapWork
argument_list|(
name|mr
argument_list|,
name|src
argument_list|,
literal|"a"
argument_list|,
name|op1
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setKeyDesc
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getKeySerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|getTagToValueDesc
argument_list|()
operator|.
name|add
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getValueSerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// reduce side work
name|Operator
argument_list|<
name|FileSinkDesc
argument_list|>
name|op4
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|FileSinkDesc
argument_list|(
name|tmpdir
operator|+
literal|"mapredplan2.out"
argument_list|,
name|Utilities
operator|.
name|defaultTd
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|FilterDesc
argument_list|>
name|op3
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|getTestFilterDesc
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|op4
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|ExtractDesc
argument_list|>
name|op2
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|ExtractDesc
argument_list|(
name|getStringColumn
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|op3
argument_list|)
decl_stmt|;
name|mr
operator|.
name|setReducer
argument_list|(
name|op2
argument_list|)
expr_stmt|;
block|}
comment|/**    * test reduce with multiple tagged inputs.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|populateMapRedPlan3
parameter_list|(
name|Table
name|src
parameter_list|,
name|Table
name|src2
parameter_list|)
throws|throws
name|SemanticException
block|{
name|mr
operator|.
name|setNumReduceTasks
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setNeedsTagging
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|outputColumns
operator|.
name|add
argument_list|(
literal|"_col"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// map-side work
name|Operator
argument_list|<
name|ReduceSinkDesc
argument_list|>
name|op1
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"key"
argument_list|)
argument_list|)
argument_list|,
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|,
literal|true
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|addMapWork
argument_list|(
name|mr
argument_list|,
name|src
argument_list|,
literal|"a"
argument_list|,
name|op1
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setKeyDesc
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getKeySerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|getTagToValueDesc
argument_list|()
operator|.
name|add
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getValueSerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|ReduceSinkDesc
argument_list|>
name|op2
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"key"
argument_list|)
argument_list|)
argument_list|,
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"key"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|,
literal|true
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|addMapWork
argument_list|(
name|mr
argument_list|,
name|src2
argument_list|,
literal|"b"
argument_list|,
name|op2
argument_list|)
expr_stmt|;
name|mr
operator|.
name|getTagToValueDesc
argument_list|()
operator|.
name|add
argument_list|(
name|op2
operator|.
name|getConf
argument_list|()
operator|.
name|getValueSerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// reduce side work
name|Operator
argument_list|<
name|FileSinkDesc
argument_list|>
name|op4
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|FileSinkDesc
argument_list|(
name|tmpdir
operator|+
literal|"mapredplan3.out"
argument_list|,
name|Utilities
operator|.
name|defaultTd
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|op5
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|SelectDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|ALIAS
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getListTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
argument_list|,
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"0"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|)
argument_list|,
name|op4
argument_list|)
decl_stmt|;
name|mr
operator|.
name|setReducer
argument_list|(
name|op5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|populateMapRedPlan4
parameter_list|(
name|Table
name|src
parameter_list|)
throws|throws
name|SemanticException
block|{
name|mr
operator|.
name|setNumReduceTasks
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// map-side work
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|outputColumns
operator|.
name|add
argument_list|(
literal|"_col"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Operator
argument_list|<
name|ReduceSinkDesc
argument_list|>
name|op1
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"tkey"
argument_list|)
argument_list|)
argument_list|,
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"tkey"
argument_list|)
argument_list|,
name|getStringColumn
argument_list|(
literal|"tvalue"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|ScriptDesc
argument_list|>
name|op0
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|ScriptDesc
argument_list|(
literal|"cat"
argument_list|,
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|,
literal|"key,value"
argument_list|)
argument_list|,
name|TextRecordWriter
operator|.
name|class
argument_list|,
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|,
literal|"tkey,tvalue"
argument_list|)
argument_list|,
name|TextRecordReader
operator|.
name|class
argument_list|,
name|TextRecordReader
operator|.
name|class
argument_list|,
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|,
literal|"key"
argument_list|)
argument_list|)
argument_list|,
name|op1
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|op4
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|SelectDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|getStringColumn
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|)
argument_list|,
name|op0
argument_list|)
decl_stmt|;
name|addMapWork
argument_list|(
name|mr
argument_list|,
name|src
argument_list|,
literal|"a"
argument_list|,
name|op4
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setKeyDesc
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getKeySerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|getTagToValueDesc
argument_list|()
operator|.
name|add
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getValueSerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// reduce side work
name|Operator
argument_list|<
name|FileSinkDesc
argument_list|>
name|op3
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|FileSinkDesc
argument_list|(
name|tmpdir
operator|+
literal|"mapredplan4.out"
argument_list|,
name|Utilities
operator|.
name|defaultTd
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|ExtractDesc
argument_list|>
name|op2
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|ExtractDesc
argument_list|(
name|getStringColumn
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|op3
argument_list|)
decl_stmt|;
name|mr
operator|.
name|setReducer
argument_list|(
name|op2
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ExprNodeColumnDesc
name|getStringColumn
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|columnName
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|populateMapRedPlan5
parameter_list|(
name|Table
name|src
parameter_list|)
throws|throws
name|SemanticException
block|{
name|mr
operator|.
name|setNumReduceTasks
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// map-side work
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|outputColumns
operator|.
name|add
argument_list|(
literal|"_col"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Operator
argument_list|<
name|ReduceSinkDesc
argument_list|>
name|op0
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|,
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|getStringColumn
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|op4
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|SelectDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|getStringColumn
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|)
argument_list|,
name|op0
argument_list|)
decl_stmt|;
name|addMapWork
argument_list|(
name|mr
argument_list|,
name|src
argument_list|,
literal|"a"
argument_list|,
name|op4
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setKeyDesc
argument_list|(
name|op0
operator|.
name|getConf
argument_list|()
operator|.
name|getKeySerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|getTagToValueDesc
argument_list|()
operator|.
name|add
argument_list|(
name|op0
operator|.
name|getConf
argument_list|()
operator|.
name|getValueSerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// reduce side work
name|Operator
argument_list|<
name|FileSinkDesc
argument_list|>
name|op3
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|FileSinkDesc
argument_list|(
name|tmpdir
operator|+
literal|"mapredplan5.out"
argument_list|,
name|Utilities
operator|.
name|defaultTd
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|ExtractDesc
argument_list|>
name|op2
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|ExtractDesc
argument_list|(
name|getStringColumn
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|op3
argument_list|)
decl_stmt|;
name|mr
operator|.
name|setReducer
argument_list|(
name|op2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|populateMapRedPlan6
parameter_list|(
name|Table
name|src
parameter_list|)
throws|throws
name|SemanticException
block|{
name|mr
operator|.
name|setNumReduceTasks
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// map-side work
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|outputColumns
operator|.
name|add
argument_list|(
literal|"_col"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Operator
argument_list|<
name|ReduceSinkDesc
argument_list|>
name|op1
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"tkey"
argument_list|)
argument_list|)
argument_list|,
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"tkey"
argument_list|)
argument_list|,
name|getStringColumn
argument_list|(
literal|"tvalue"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|ScriptDesc
argument_list|>
name|op0
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|ScriptDesc
argument_list|(
literal|"\'cat\'"
argument_list|,
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|,
literal|"tkey,tvalue"
argument_list|)
argument_list|,
name|TextRecordWriter
operator|.
name|class
argument_list|,
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|,
literal|"tkey,tvalue"
argument_list|)
argument_list|,
name|TextRecordReader
operator|.
name|class
argument_list|,
name|TextRecordReader
operator|.
name|class
argument_list|,
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|,
literal|"key"
argument_list|)
argument_list|)
argument_list|,
name|op1
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|op4
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|SelectDesc
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|getStringColumn
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|getStringColumn
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|outputColumns
argument_list|)
argument_list|,
name|op0
argument_list|)
decl_stmt|;
name|addMapWork
argument_list|(
name|mr
argument_list|,
name|src
argument_list|,
literal|"a"
argument_list|,
name|op4
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setKeyDesc
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getKeySerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|getTagToValueDesc
argument_list|()
operator|.
name|add
argument_list|(
name|op1
operator|.
name|getConf
argument_list|()
operator|.
name|getValueSerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// reduce side work
name|Operator
argument_list|<
name|FileSinkDesc
argument_list|>
name|op3
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|FileSinkDesc
argument_list|(
name|tmpdir
operator|+
literal|"mapredplan6.out"
argument_list|,
name|Utilities
operator|.
name|defaultTd
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|FilterDesc
argument_list|>
name|op2
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|getTestFilterDesc
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|op3
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|ExtractDesc
argument_list|>
name|op5
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|ExtractDesc
argument_list|(
name|getStringColumn
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|op2
argument_list|)
decl_stmt|;
name|mr
operator|.
name|setReducer
argument_list|(
name|op5
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executePlan
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testName
init|=
operator|new
name|Exception
argument_list|()
operator|.
name|getStackTrace
argument_list|()
index|[
literal|1
index|]
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|MapRedTask
name|mrtask
init|=
operator|new
name|MapRedTask
argument_list|()
decl_stmt|;
name|DriverContext
name|dctx
init|=
operator|new
name|DriverContext
argument_list|()
decl_stmt|;
name|mrtask
operator|.
name|setWork
argument_list|(
name|mr
argument_list|)
expr_stmt|;
name|mrtask
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|dctx
argument_list|)
expr_stmt|;
name|int
name|exitVal
init|=
name|mrtask
operator|.
name|execute
argument_list|(
name|dctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|testName
operator|+
literal|" execution failed with exit status: "
operator|+
name|exitVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|testName
operator|+
literal|" execution completed successfully"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMapPlan1
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Beginning testMapPlan1"
argument_list|)
expr_stmt|;
try|try
block|{
name|populateMapPlan1
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|executePlan
argument_list|()
expr_stmt|;
name|fileDiff
argument_list|(
literal|"lt100.txt.deflate"
argument_list|,
literal|"mapplan1.out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got Throwable"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMapPlan2
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Beginning testMapPlan2"
argument_list|)
expr_stmt|;
try|try
block|{
name|populateMapPlan2
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|executePlan
argument_list|()
expr_stmt|;
name|fileDiff
argument_list|(
literal|"lt100.txt"
argument_list|,
literal|"mapplan2.out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got Throwable"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMapRedPlan1
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Beginning testMapRedPlan1"
argument_list|)
expr_stmt|;
try|try
block|{
name|populateMapRedPlan1
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|executePlan
argument_list|()
expr_stmt|;
name|fileDiff
argument_list|(
literal|"kv1.val.sorted.txt"
argument_list|,
literal|"mapredplan1.out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got Throwable"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMapRedPlan2
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Beginning testMapPlan2"
argument_list|)
expr_stmt|;
try|try
block|{
name|populateMapRedPlan2
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|executePlan
argument_list|()
expr_stmt|;
name|fileDiff
argument_list|(
literal|"lt100.sorted.txt"
argument_list|,
literal|"mapredplan2.out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got Throwable"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMapRedPlan3
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Beginning testMapPlan3"
argument_list|)
expr_stmt|;
try|try
block|{
name|populateMapRedPlan3
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"src"
argument_list|)
argument_list|,
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"src2"
argument_list|)
argument_list|)
expr_stmt|;
name|executePlan
argument_list|()
expr_stmt|;
name|fileDiff
argument_list|(
literal|"kv1kv2.cogroup.txt"
argument_list|,
literal|"mapredplan3.out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got Throwable"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMapRedPlan4
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Beginning testMapPlan4"
argument_list|)
expr_stmt|;
try|try
block|{
name|populateMapRedPlan4
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|executePlan
argument_list|()
expr_stmt|;
name|fileDiff
argument_list|(
literal|"kv1.string-sorted.txt"
argument_list|,
literal|"mapredplan4.out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got Throwable"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMapRedPlan5
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Beginning testMapPlan5"
argument_list|)
expr_stmt|;
try|try
block|{
name|populateMapRedPlan5
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|executePlan
argument_list|()
expr_stmt|;
name|fileDiff
argument_list|(
literal|"kv1.string-sorted.txt"
argument_list|,
literal|"mapredplan5.out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got Throwable"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMapRedPlan6
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Beginning testMapPlan6"
argument_list|)
expr_stmt|;
try|try
block|{
name|populateMapRedPlan6
argument_list|(
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|executePlan
argument_list|()
expr_stmt|;
name|fileDiff
argument_list|(
literal|"lt100.sorted.txt"
argument_list|,
literal|"mapredplan6.out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got Throwable"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

