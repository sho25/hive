begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFChr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFChr
block|{
annotation|@
name|Test
specifier|public
name|void
name|testChr
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFChr
name|udf
init|=
operator|new
name|UDFChr
argument_list|()
decl_stmt|;
comment|// Test string "0"
name|double
name|d
init|=
literal|48.0d
decl_stmt|;
name|float
name|f
init|=
literal|48.0f
decl_stmt|;
name|long
name|l
init|=
literal|48L
decl_stmt|;
name|int
name|i
init|=
literal|48
decl_stmt|;
name|short
name|s
init|=
literal|48
decl_stmt|;
name|runAndVerify
argument_list|(
name|d
argument_list|,
name|udf
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|f
argument_list|,
name|udf
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|l
argument_list|,
name|udf
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|i
argument_list|,
name|udf
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|s
argument_list|,
name|udf
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// Test string "A"
name|d
operator|=
literal|65.123d
expr_stmt|;
name|f
operator|=
literal|65.123f
expr_stmt|;
name|l
operator|=
literal|65L
expr_stmt|;
name|i
operator|=
literal|65
expr_stmt|;
name|s
operator|=
literal|65
expr_stmt|;
name|runAndVerify
argument_list|(
name|d
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|f
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|l
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|i
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|s
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
comment|// Test negative integers result in ""
name|d
operator|=
operator|-
literal|65.123d
expr_stmt|;
name|f
operator|=
operator|-
literal|65.123f
expr_stmt|;
name|l
operator|=
operator|-
literal|65L
expr_stmt|;
name|i
operator|=
operator|-
literal|65
expr_stmt|;
name|s
operator|=
operator|-
literal|65
expr_stmt|;
name|runAndVerify
argument_list|(
name|d
argument_list|,
name|udf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|f
argument_list|,
name|udf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|l
argument_list|,
name|udf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|i
argument_list|,
name|udf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|s
argument_list|,
name|udf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Test 0 is nul character
name|d
operator|=
literal|0.9d
expr_stmt|;
name|f
operator|=
literal|0.9f
expr_stmt|;
name|l
operator|=
literal|0L
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
name|s
operator|=
literal|0
expr_stmt|;
name|char
name|nul
init|=
literal|'\u0000'
decl_stmt|;
name|String
name|nulString
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|nul
argument_list|)
decl_stmt|;
name|runAndVerify
argument_list|(
name|d
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|f
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|l
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|i
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|s
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
comment|// Test 256 or greater is n % 256
name|d
operator|=
literal|256.9d
expr_stmt|;
name|f
operator|=
literal|256.9f
expr_stmt|;
name|l
operator|=
literal|256L
expr_stmt|;
name|i
operator|=
literal|256
expr_stmt|;
name|s
operator|=
literal|256
expr_stmt|;
name|runAndVerify
argument_list|(
name|d
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|f
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|l
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|i
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|s
argument_list|,
name|udf
argument_list|,
name|nulString
argument_list|)
expr_stmt|;
name|d
operator|=
literal|321.9d
expr_stmt|;
name|f
operator|=
literal|321.9f
expr_stmt|;
name|l
operator|=
literal|321L
expr_stmt|;
name|i
operator|=
literal|321
expr_stmt|;
name|s
operator|=
literal|321
expr_stmt|;
name|runAndVerify
argument_list|(
name|d
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|f
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|l
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|i
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|s
argument_list|,
name|udf
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
comment|// Test down-casting when greater than 256.
name|d
operator|=
name|Double
operator|.
name|MAX_VALUE
expr_stmt|;
name|f
operator|=
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
name|l
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|i
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|s
operator|=
name|Short
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// 32767 % 256 = 255
name|runAndVerify
argument_list|(
name|d
argument_list|,
name|udf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|f
argument_list|,
name|udf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|l
argument_list|,
name|udf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|i
argument_list|,
name|udf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|s
argument_list|,
name|udf
argument_list|,
literal|"Ã¿"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|long
name|v
parameter_list|,
name|UDFChr
name|udf
parameter_list|,
name|String
name|expV
parameter_list|)
throws|throws
name|HiveException
block|{
name|Text
name|output
init|=
operator|(
name|Text
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|verifyOutput
argument_list|(
name|output
argument_list|,
name|expV
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|int
name|v
parameter_list|,
name|UDFChr
name|udf
parameter_list|,
name|String
name|expV
parameter_list|)
throws|throws
name|HiveException
block|{
name|Text
name|output
init|=
operator|(
name|Text
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|verifyOutput
argument_list|(
name|output
argument_list|,
name|expV
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|short
name|v
parameter_list|,
name|UDFChr
name|udf
parameter_list|,
name|String
name|expV
parameter_list|)
throws|throws
name|HiveException
block|{
name|Text
name|output
init|=
operator|(
name|Text
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|verifyOutput
argument_list|(
name|output
argument_list|,
name|expV
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|double
name|v
parameter_list|,
name|UDFChr
name|udf
parameter_list|,
name|String
name|expV
parameter_list|)
throws|throws
name|HiveException
block|{
name|Text
name|output
init|=
operator|(
name|Text
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|verifyOutput
argument_list|(
name|output
argument_list|,
name|expV
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|float
name|v
parameter_list|,
name|UDFChr
name|udf
parameter_list|,
name|String
name|expV
parameter_list|)
throws|throws
name|HiveException
block|{
name|Text
name|output
init|=
operator|(
name|Text
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|verifyOutput
argument_list|(
name|output
argument_list|,
name|expV
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyOutput
parameter_list|(
name|Text
name|output
parameter_list|,
name|String
name|expV
parameter_list|)
block|{
if|if
condition|(
name|expV
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"chr() test "
argument_list|,
name|expV
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

