begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
operator|.
name|StreamPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ThriftDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|Complex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_class
specifier|public
class|class
name|QTestUtil
block|{
specifier|private
name|String
name|testWarehouse
decl_stmt|;
specifier|private
name|String
name|tmpdir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/../build/ql/tmp"
decl_stmt|;
specifier|private
name|Path
name|tmppath
init|=
operator|new
name|Path
argument_list|(
name|tmpdir
argument_list|)
decl_stmt|;
specifier|private
name|String
name|testFiles
decl_stmt|;
specifier|private
name|String
name|outDir
decl_stmt|;
specifier|private
name|String
name|logDir
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|qMap
decl_stmt|;
specifier|private
name|LinkedList
argument_list|<
name|String
argument_list|>
name|srcTables
decl_stmt|;
specifier|private
name|ParseDriver
name|pd
decl_stmt|;
specifier|private
name|Hive
name|db
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Driver
name|drv
decl_stmt|;
specifier|private
name|SemanticAnalyzer
name|sem
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|boolean
name|overWrite
decl_stmt|;
specifier|private
name|CliDriver
name|cliDriver
decl_stmt|;
specifier|public
name|boolean
name|deleteDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectory
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|path
operator|.
name|delete
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|copyDirectoryToLocal
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|srcFs
init|=
name|src
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|destFs
init|=
name|dest
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcFs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|srcFs
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|files
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|dfs_path
init|=
name|files
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|local_path
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// If this is a source table we do not copy it out
if|if
condition|(
name|srcTables
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|destFs
operator|.
name|exists
argument_list|(
name|local_path
argument_list|)
condition|)
block|{
name|destFs
operator|.
name|mkdirs
argument_list|(
name|local_path
argument_list|)
expr_stmt|;
block|}
name|copyDirectoryToLocal
argument_list|(
name|dfs_path
argument_list|,
name|local_path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcFs
operator|.
name|copyToLocalFile
argument_list|(
name|dfs_path
argument_list|,
name|local_path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
name|Pattern
name|mapTok
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\.?)(.*)_map_(.*)"
argument_list|)
decl_stmt|;
specifier|static
name|Pattern
name|reduceTok
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*)(reduce_[^\\.]*)((\\..*)?)"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|normalizeNames
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|path
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|normalizeNames
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// System.out.println("Trying to match: " + path.getPath());
name|Matcher
name|m
init|=
name|reduceTok
operator|.
name|matcher
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"reduce"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// System.out.println("Matched new name: " + name);
name|path
operator|.
name|renameTo
argument_list|(
operator|new
name|File
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
name|mapTok
operator|.
name|matcher
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"map_"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// System.out.println("Matched new name: " + name);
name|path
operator|.
name|renameTo
argument_list|(
operator|new
name|File
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|QTestUtil
parameter_list|(
name|String
name|outDir
parameter_list|,
name|String
name|logDir
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|outDir
operator|=
name|outDir
expr_stmt|;
name|this
operator|.
name|logDir
operator|=
name|logDir
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
expr_stmt|;
name|CliSessionState
name|ss
init|=
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
comment|// System.out.println(conf.toString());
name|testFiles
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|ow
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.output.overwrite"
argument_list|)
decl_stmt|;
name|overWrite
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|(
name|ow
operator|!=
literal|null
operator|)
operator|&&
name|ow
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|overWrite
operator|=
literal|true
expr_stmt|;
block|}
name|qMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|srcTables
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|qFile
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|qFile
argument_list|)
decl_stmt|;
name|addFile
argument_list|(
name|qf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|File
name|qf
parameter_list|)
throws|throws
name|Exception
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|qf
argument_list|)
decl_stmt|;
name|BufferedInputStream
name|bis
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|bis
argument_list|)
decl_stmt|;
name|StringBuffer
name|qsb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// Read the entire query
while|while
condition|(
name|dis
operator|.
name|available
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|qsb
operator|.
name|append
argument_list|(
name|dis
operator|.
name|readLine
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|qMap
operator|.
name|put
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|,
name|qsb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|warehousePath
init|=
operator|(
operator|(
operator|new
name|URI
argument_list|(
name|testWarehouse
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
operator|)
decl_stmt|;
comment|// Drop any tables that remain due to unsuccessful runs
for|for
control|(
name|String
name|s
range|:
operator|new
name|String
index|[]
block|{
literal|"src"
block|,
literal|"src1"
block|,
literal|"src_json"
block|,
literal|"src_thrift"
block|,
literal|"src_sequencefile"
block|,
literal|"srcpart"
block|,
literal|"srcbucket"
block|,
literal|"dest1"
block|,
literal|"dest2"
block|,
literal|"dest3"
block|,
literal|"dest4"
block|,
literal|"dest4_sequencefile"
block|,
literal|"dest_j1"
block|,
literal|"dest_j2"
block|,
literal|"dest_g1"
block|,
literal|"dest_g2"
block|}
control|)
block|{
name|db
operator|.
name|dropTable
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
operator|new
name|String
index|[]
block|{
literal|"dest4.out"
block|,
literal|"union.out"
block|}
control|)
block|{
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|warehousePath
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|createSources
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Next create the three tables src, dest1 and dest2 each with two columns
comment|// key and value
name|LinkedList
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|part_cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"ds"
argument_list|)
expr_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"srcpart"
argument_list|,
name|cols
argument_list|,
name|part_cols
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|srcTables
operator|.
name|add
argument_list|(
literal|"srcpart"
argument_list|)
expr_stmt|;
name|Table
name|srcpart
init|=
name|db
operator|.
name|getTable
argument_list|(
literal|"srcpart"
argument_list|)
decl_stmt|;
name|Path
name|fpath
decl_stmt|;
name|Path
name|newfpath
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part_spec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|loadCmd
decl_stmt|;
name|int
name|ecode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|ds
range|:
operator|new
name|String
index|[]
block|{
literal|"2008-04-08"
block|,
literal|"2008-04-09"
block|}
control|)
block|{
for|for
control|(
name|String
name|hr
range|:
operator|new
name|String
index|[]
block|{
literal|"11"
block|,
literal|"12"
block|}
control|)
block|{
name|part_spec
operator|.
name|clear
argument_list|()
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"hr"
argument_list|,
name|hr
argument_list|)
expr_stmt|;
comment|// System.out.println("Loading partition with spec: " + part_spec);
name|db
operator|.
name|createPartition
argument_list|(
name|srcpart
argument_list|,
name|part_spec
argument_list|)
expr_stmt|;
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|newfpath
operator|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|fpath
argument_list|,
name|newfpath
argument_list|)
expr_stmt|;
name|fpath
operator|=
name|newfpath
expr_stmt|;
comment|//db.loadPartition(fpath, srcpart.getName(), part_spec, true);
name|loadCmd
operator|=
literal|"LOAD DATA INPATH '"
operator|+
name|newfpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE srcpart PARTITION (ds='"
operator|+
name|ds
operator|+
literal|"',hr='"
operator|+
name|hr
operator|+
literal|"')"
expr_stmt|;
name|ecode
operator|=
name|drv
operator|.
name|run
argument_list|(
name|loadCmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"load command: "
operator|+
name|loadCmd
operator|+
literal|" failed with exit code= "
operator|+
name|ecode
argument_list|)
throw|;
block|}
block|}
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|bucketCols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"srcbucket"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|,
literal|2
argument_list|,
name|bucketCols
argument_list|)
expr_stmt|;
name|srcTables
operator|.
name|add
argument_list|(
literal|"srcbucket"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fname
range|:
operator|new
name|String
index|[]
block|{
literal|"kv1.txt"
block|,
literal|"kv2.txt"
block|}
control|)
block|{
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
name|fname
argument_list|)
expr_stmt|;
name|newfpath
operator|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
name|fname
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|fpath
argument_list|,
name|newfpath
argument_list|)
expr_stmt|;
name|loadCmd
operator|=
literal|"LOAD DATA INPATH '"
operator|+
name|newfpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE srcbucket"
expr_stmt|;
name|ecode
operator|=
name|drv
operator|.
name|run
argument_list|(
name|loadCmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"load command: "
operator|+
name|loadCmd
operator|+
literal|" failed with exit code= "
operator|+
name|ecode
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|String
name|tname
range|:
operator|new
name|String
index|[]
block|{
literal|"src"
block|,
literal|"src1"
block|}
control|)
block|{
name|db
operator|.
name|createTable
argument_list|(
name|tname
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|srcTables
operator|.
name|add
argument_list|(
name|tname
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|createTable
argument_list|(
literal|"src_sequencefile"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|srcTables
operator|.
name|add
argument_list|(
literal|"src_sequencefile"
argument_list|)
expr_stmt|;
name|Table
name|srcThrift
init|=
operator|new
name|Table
argument_list|(
literal|"src_thrift"
argument_list|)
decl_stmt|;
name|srcThrift
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|srcThrift
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|srcThrift
operator|.
name|setSerializationLib
argument_list|(
name|ThriftDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|srcThrift
operator|.
name|setSerdeParam
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
name|Complex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|srcThrift
operator|.
name|setSerdeParam
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|TBinaryProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
name|srcThrift
argument_list|)
expr_stmt|;
name|srcTables
operator|.
name|add
argument_list|(
literal|"src_thrift"
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|json_cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|json_cols
operator|.
name|add
argument_list|(
literal|"json"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"src_json"
argument_list|,
name|json_cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|srcTables
operator|.
name|add
argument_list|(
literal|"src_json"
argument_list|)
expr_stmt|;
comment|// load the input data into the src table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|newfpath
operator|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|fpath
argument_list|,
name|newfpath
argument_list|)
expr_stmt|;
comment|//db.loadTable(newfpath, "src", false);
name|loadCmd
operator|=
literal|"LOAD DATA INPATH '"
operator|+
name|newfpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE src"
expr_stmt|;
name|ecode
operator|=
name|drv
operator|.
name|run
argument_list|(
name|loadCmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"load command: "
operator|+
name|loadCmd
operator|+
literal|" failed with exit code= "
operator|+
name|ecode
argument_list|)
throw|;
block|}
comment|// load the input data into the src table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"kv3.txt"
argument_list|)
expr_stmt|;
name|newfpath
operator|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
literal|"kv3.txt"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|fpath
argument_list|,
name|newfpath
argument_list|)
expr_stmt|;
name|db
operator|.
name|loadTable
argument_list|(
name|newfpath
argument_list|,
literal|"src1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// load the input data into the src_sequencefile table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"kv1.seq"
argument_list|)
expr_stmt|;
name|newfpath
operator|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
literal|"kv1.seq"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|fpath
argument_list|,
name|newfpath
argument_list|)
expr_stmt|;
name|db
operator|.
name|loadTable
argument_list|(
name|newfpath
argument_list|,
literal|"src_sequencefile"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// load the input data into the src_thrift table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"complex.seq"
argument_list|)
expr_stmt|;
name|newfpath
operator|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
literal|"complex.seq"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|fpath
argument_list|,
name|newfpath
argument_list|)
expr_stmt|;
name|db
operator|.
name|loadTable
argument_list|(
name|newfpath
argument_list|,
literal|"src_thrift"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// load the json data into the src_json table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"json.txt"
argument_list|)
expr_stmt|;
name|newfpath
operator|=
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
literal|"json.txt"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|fpath
argument_list|,
name|newfpath
argument_list|)
expr_stmt|;
name|db
operator|.
name|loadTable
argument_list|(
name|newfpath
argument_list|,
literal|"src_json"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
comment|// System.out.println(conf.toString());
name|testWarehouse
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
expr_stmt|;
comment|// conf.logVars(System.out);
comment|// System.out.flush();
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|drv
operator|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|pd
operator|=
operator|new
name|ParseDriver
argument_list|()
expr_stmt|;
name|sem
operator|=
operator|new
name|SemanticAnalyzer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|cleanUp
argument_list|()
expr_stmt|;
name|createSources
argument_list|()
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|part_cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"ds"
argument_list|)
expr_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest1"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest2"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest3"
argument_list|,
name|cols
argument_list|,
name|part_cols
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|Table
name|dest3
init|=
name|db
operator|.
name|getTable
argument_list|(
literal|"dest3"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part_spec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"2008-04-08"
argument_list|)
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"hr"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createPartition
argument_list|(
name|dest3
argument_list|,
name|part_spec
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest4"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest4_sequencefile"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cliInit
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|cliInit
argument_list|(
name|tname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cliInit
parameter_list|(
name|String
name|tname
parameter_list|,
name|boolean
name|recreate
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|recreate
condition|)
block|{
name|cleanUp
argument_list|()
expr_stmt|;
name|createSources
argument_list|()
expr_stmt|;
block|}
comment|//CliSessionState ss = new CliSessionState(conf);
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|ss
operator|.
name|in
operator|=
name|System
operator|.
name|in
expr_stmt|;
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fo
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outf
argument_list|)
decl_stmt|;
name|ss
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|fo
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|err
operator|=
name|ss
operator|.
name|out
expr_stmt|;
name|ss
operator|.
name|setIsSilent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|cliDriver
operator|=
operator|new
name|CliDriver
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|executeOne
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
name|String
name|q
init|=
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
name|String
name|q1
init|=
name|q
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|qrest
init|=
name|q
operator|.
name|substring
argument_list|(
name|q
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|qMap
operator|.
name|put
argument_list|(
name|tname
argument_list|,
name|qrest
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing "
operator|+
name|q1
argument_list|)
expr_stmt|;
return|return
name|cliDriver
operator|.
name|processLine
argument_list|(
name|q1
argument_list|)
return|;
block|}
specifier|public
name|int
name|execute
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
return|return
name|drv
operator|.
name|run
argument_list|(
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|executeClient
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
return|return
name|cliDriver
operator|.
name|processLine
argument_list|(
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|convertSequenceFileToTextFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an instance of hive in order to create the tables
name|testWarehouse
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Create dest4 to replace dest4_sequencefile
name|LinkedList
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
comment|// Move all data from dest4_sequencefile to dest4
name|drv
operator|.
name|run
argument_list|(
literal|"FROM dest4_sequencefile INSERT OVERWRITE TABLE dest4 SELECT dest4_sequencefile.*"
argument_list|)
expr_stmt|;
comment|// Drop dest4_sequencefile
name|db
operator|.
name|dropTable
argument_list|(
literal|"dest4_sequencefile"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|checkNegativeResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
decl_stmt|;
name|File
name|expf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|)
decl_stmt|;
name|expf
operator|=
operator|new
name|File
argument_list|(
name|expf
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
expr_stmt|;
name|FileWriter
name|outfd
init|=
operator|new
name|FileWriter
argument_list|(
name|outf
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ParseException
condition|)
block|{
name|outfd
operator|.
name|write
argument_list|(
literal|"Parse Error: "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|SemanticException
condition|)
block|{
name|outfd
operator|.
name|write
argument_list|(
literal|"Semantic Exception: \n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
name|outfd
operator|.
name|write
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|outfd
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|cmdLine
init|=
literal|"diff "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|expf
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
operator|&&
name|overWrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results"
argument_list|)
expr_stmt|;
name|cmdLine
operator|=
literal|"cp "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|expf
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|executor
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|exitVal
operator|=
name|executor
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
specifier|public
name|int
name|checkParseResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
name|File
name|parseDir
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
literal|"parse"
argument_list|)
decl_stmt|;
name|File
name|expf
init|=
operator|new
name|File
argument_list|(
name|parseDir
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
expr_stmt|;
name|FileWriter
name|outfd
init|=
operator|new
name|FileWriter
argument_list|(
name|outf
argument_list|)
decl_stmt|;
name|outfd
operator|.
name|write
argument_list|(
name|tree
operator|.
name|toStringTree
argument_list|()
argument_list|)
expr_stmt|;
name|outfd
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|cmdLine
init|=
literal|"diff "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|expf
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
operator|&&
name|overWrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results"
argument_list|)
expr_stmt|;
name|cmdLine
operator|=
literal|"cp "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|expf
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|executor
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|exitVal
operator|=
name|executor
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Parse tree is null"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|checkPlan
parameter_list|(
name|String
name|tname
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tasks
operator|!=
literal|null
condition|)
block|{
name|File
name|planDir
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
literal|"plan"
argument_list|)
decl_stmt|;
name|File
name|planFile
init|=
operator|new
name|File
argument_list|(
name|planDir
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
literal|".xml"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
literal|".xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputStream
name|ofs
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outf
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|plan
range|:
name|tasks
control|)
block|{
name|Utilities
operator|.
name|serializeTasks
argument_list|(
name|plan
argument_list|,
name|ofs
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|cmdArray
init|=
operator|new
name|String
index|[
literal|6
index|]
decl_stmt|;
name|cmdArray
index|[
literal|0
index|]
operator|=
literal|"diff"
expr_stmt|;
name|cmdArray
index|[
literal|1
index|]
operator|=
literal|"-b"
expr_stmt|;
name|cmdArray
index|[
literal|2
index|]
operator|=
literal|"-I"
expr_stmt|;
name|cmdArray
index|[
literal|3
index|]
operator|=
literal|"\\(\\(<java version=\".*\" class=\"java.beans.XMLDecoder\">\\)"
operator|+
literal|"\\|\\(<string>.*/tmp/.*</string>\\)"
operator|+
literal|"\\|\\(<string>file:.*</string>\\)"
operator|+
literal|"\\|\\(<string>/.*/warehouse/.*</string>\\)\\)"
expr_stmt|;
name|cmdArray
index|[
literal|4
index|]
operator|=
name|outf
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|cmdArray
index|[
literal|5
index|]
operator|=
name|planFile
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdArray
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|2
index|]
operator|+
literal|"\'"
operator|+
name|cmdArray
index|[
literal|3
index|]
operator|+
literal|"\'"
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|4
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdArray
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
operator|&&
name|overWrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results"
argument_list|)
expr_stmt|;
name|String
name|cmdLine
init|=
literal|"cp "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|planFile
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|executor
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|exitVal
operator|=
name|executor
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Plan is null"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|checkResults
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|warehousePath
init|=
operator|new
name|Path
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|warehousePath
operator|=
operator|new
name|Path
argument_list|(
name|warehousePath
argument_list|,
operator|(
operator|new
name|URI
argument_list|(
name|testWarehouse
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|localPath
operator|=
operator|new
name|Path
argument_list|(
name|localPath
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|localPath
operator|=
operator|new
name|Path
argument_list|(
name|localPath
argument_list|,
literal|"warehouse_local_copy"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"warehousePath = "
operator|+
name|warehousePath
operator|.
name|toString
argument_list|()
operator|+
literal|" localPath = "
operator|+
name|localPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|localPath
argument_list|)
condition|)
block|{
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|localPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|copyDirectoryToLocal
argument_list|(
name|warehousePath
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
name|normalizeNames
argument_list|(
operator|new
name|File
argument_list|(
name|localPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|cmdArray
decl_stmt|;
if|if
condition|(
name|overWrite
operator|==
literal|false
condition|)
block|{
name|cmdArray
operator|=
operator|new
name|String
index|[
literal|6
index|]
expr_stmt|;
name|cmdArray
index|[
literal|0
index|]
operator|=
literal|"diff"
expr_stmt|;
name|cmdArray
index|[
literal|1
index|]
operator|=
literal|"-r"
expr_stmt|;
name|cmdArray
index|[
literal|2
index|]
operator|=
literal|"--exclude=tmp"
expr_stmt|;
name|cmdArray
index|[
literal|3
index|]
operator|=
literal|"--exclude=.svn"
expr_stmt|;
name|cmdArray
index|[
literal|4
index|]
operator|=
name|localPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|cmdArray
index|[
literal|5
index|]
operator|=
operator|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
operator|+
literal|"/warehouse"
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdArray
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|2
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|3
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|4
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"overwritting"
argument_list|)
expr_stmt|;
comment|// Remove any existing output
name|String
index|[]
name|cmdArray1
init|=
operator|new
name|String
index|[
literal|5
index|]
decl_stmt|;
name|cmdArray1
index|[
literal|0
index|]
operator|=
literal|"rm"
expr_stmt|;
name|cmdArray1
index|[
literal|1
index|]
operator|=
literal|"-rf"
expr_stmt|;
name|cmdArray1
index|[
literal|2
index|]
operator|=
operator|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdArray1
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|cmdArray1
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|cmdArray1
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdArray1
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
condition|)
block|{
return|return
name|exitVal
return|;
block|}
comment|// Capture code
name|cmdArray
operator|=
operator|new
name|String
index|[
literal|5
index|]
expr_stmt|;
name|cmdArray
index|[
literal|0
index|]
operator|=
literal|"cp"
expr_stmt|;
name|cmdArray
index|[
literal|1
index|]
operator|=
literal|"-r"
expr_stmt|;
name|cmdArray
index|[
literal|2
index|]
operator|=
name|localPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|cmdArray
index|[
literal|3
index|]
operator|=
operator|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdArray
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|2
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdArray
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
return|return
name|exitVal
return|;
block|}
specifier|public
name|int
name|checkCliDriverResults
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|cmdArray
decl_stmt|;
name|cmdArray
operator|=
operator|new
name|String
index|[
literal|5
index|]
expr_stmt|;
name|cmdArray
index|[
literal|0
index|]
operator|=
literal|"diff"
expr_stmt|;
name|cmdArray
index|[
literal|1
index|]
operator|=
literal|"-I"
expr_stmt|;
name|cmdArray
index|[
literal|2
index|]
operator|=
literal|"\\(file:\\)\\|\\(/tmp/.*\\)"
expr_stmt|;
name|cmdArray
index|[
literal|3
index|]
operator|=
operator|(
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|tname
operator|+
literal|".out"
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|cmdArray
index|[
literal|4
index|]
operator|=
operator|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
operator|+
literal|".out"
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdArray
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|2
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|3
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdArray
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
operator|&&
name|overWrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results"
argument_list|)
expr_stmt|;
name|cmdArray
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|cmdArray
index|[
literal|0
index|]
operator|=
literal|"cp"
expr_stmt|;
name|cmdArray
index|[
literal|1
index|]
operator|=
operator|(
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|tname
operator|+
literal|".out"
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|cmdArray
index|[
literal|2
index|]
operator|=
operator|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
operator|+
literal|".out"
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|executor
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdArray
argument_list|)
expr_stmt|;
name|exitVal
operator|=
name|executor
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
specifier|public
name|ASTNode
name|parseQuery
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|pd
operator|.
name|parse
argument_list|(
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|analyzeAST
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Do semantic analysis and plan generation
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|makeScratchDir
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|ast
operator|.
name|getToken
argument_list|()
operator|==
literal|null
operator|)
operator|&&
operator|(
name|ast
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|ast
operator|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sem
operator|.
name|analyze
argument_list|(
name|ast
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|removeScratchDir
argument_list|()
expr_stmt|;
return|return
name|sem
operator|.
name|getRootTasks
argument_list|()
return|;
block|}
specifier|public
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getQMap
parameter_list|()
block|{
return|return
name|qMap
return|;
block|}
comment|/**    * QTRunner: Runnable class for running a a single query file    *     **/
specifier|public
specifier|static
class|class
name|QTRunner
implements|implements
name|Runnable
block|{
specifier|private
name|QTestUtil
name|qt
decl_stmt|;
specifier|private
name|String
name|fname
decl_stmt|;
specifier|public
name|QTRunner
parameter_list|(
name|QTestUtil
name|qt
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|this
operator|.
name|qt
operator|=
name|qt
expr_stmt|;
name|this
operator|.
name|fname
operator|=
name|fname
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// assumption is that environment has already been cleaned once globally
comment|// hence each thread does not call cleanUp() and createSources() again
name|qt
operator|.
name|cliInit
argument_list|(
name|fname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qt
operator|.
name|executeClient
argument_list|(
name|fname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Query file "
operator|+
name|fname
operator|+
literal|" failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * executes a set of query files either in sequence or in parallel.    * Uses QTestUtil to do so    *    * @param qfiles array of input query files containing arbitrary number of hive queries    * @param resDirs array of output directories one corresponding to each input query file    * @param mt whether to run in multithreaded mode or not    * @return true if all the query files were executed successfully, else false    *    * In multithreaded mode each query file is run in a separate thread. the caller has to     * arrange that different query files do not collide (in terms of destination tables)    */
specifier|public
specifier|static
name|boolean
name|queryListRunner
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|String
index|[]
name|resDirs
parameter_list|,
name|String
index|[]
name|logDirs
parameter_list|,
name|boolean
name|mt
parameter_list|)
block|{
assert|assert
operator|(
name|qfiles
operator|.
name|length
operator|==
name|resDirs
operator|.
name|length
operator|)
assert|;
assert|assert
operator|(
name|qfiles
operator|.
name|length
operator|==
name|logDirs
operator|.
name|length
operator|)
assert|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|QTestUtil
index|[]
name|qt
init|=
operator|new
name|QTestUtil
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qt
index|[
name|i
index|]
operator|=
operator|new
name|QTestUtil
argument_list|(
name|resDirs
index|[
name|i
index|]
argument_list|,
name|logDirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|addFile
argument_list|(
name|qfiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mt
condition|)
block|{
comment|// in multithreaded mode - do cleanup/initialization just once
name|qt
index|[
literal|0
index|]
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|createSources
argument_list|()
expr_stmt|;
name|QTRunner
index|[]
name|qtRunners
init|=
operator|new
name|QTestUtil
operator|.
name|QTRunner
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
name|Thread
index|[]
name|qtThread
init|=
operator|new
name|Thread
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtRunners
index|[
name|i
index|]
operator|=
operator|new
name|QTestUtil
operator|.
name|QTRunner
argument_list|(
name|qt
index|[
name|i
index|]
argument_list|,
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|qtThread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|qtRunners
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtThread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtThread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|int
name|ecode
init|=
name|qt
index|[
name|i
index|]
operator|.
name|checkCliDriverResults
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Test "
operator|+
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" results check failed with error code "
operator|+
name|ecode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
operator|&&
operator|!
name|failed
condition|;
name|i
operator|++
control|)
block|{
name|qt
index|[
name|i
index|]
operator|.
name|cliInit
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|executeClient
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ecode
init|=
name|qt
index|[
name|i
index|]
operator|.
name|checkCliDriverResults
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Test "
operator|+
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" results check failed with error code "
operator|+
name|ecode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|!
name|failed
operator|)
return|;
block|}
block|}
end_class

end_unit

