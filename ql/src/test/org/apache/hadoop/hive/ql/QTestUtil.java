begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
operator|.
name|StreamPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|zookeeper
operator|.
name|ZooKeeperHiveLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ThriftDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|Complex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_comment
comment|/**  * QTestUtil.  *  */
end_comment

begin_class
specifier|public
class|class
name|QTestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"QTestUtil"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|testWarehouse
decl_stmt|;
specifier|private
specifier|final
name|String
name|tmpdir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|tmppath
init|=
operator|new
name|Path
argument_list|(
name|tmpdir
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|testFiles
decl_stmt|;
specifier|protected
specifier|final
name|String
name|outDir
decl_stmt|;
specifier|protected
specifier|final
name|String
name|logDir
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|qMap
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qSkipSet
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|srcTables
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"src"
block|,
literal|"src1"
block|,
literal|"srcbucket"
block|,
literal|"srcbucket2"
block|,
literal|"src_json"
block|,
literal|"src_thrift"
block|,
literal|"src_sequencefile"
block|,
literal|"srcpart"
block|}
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|ParseDriver
name|pd
decl_stmt|;
specifier|private
name|Hive
name|db
decl_stmt|;
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Driver
name|drv
decl_stmt|;
specifier|private
name|SemanticAnalyzer
name|sem
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|overWrite
decl_stmt|;
specifier|private
name|CliDriver
name|cliDriver
decl_stmt|;
specifier|private
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|MiniDFSShim
name|dfs
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|miniMr
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|hadoopVer
init|=
literal|null
decl_stmt|;
specifier|private
name|QTestSetup
name|setup
init|=
literal|null
decl_stmt|;
specifier|public
name|boolean
name|deleteDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|path
operator|.
name|delete
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|copyDirectoryToLocal
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|srcFs
init|=
name|src
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|destFs
init|=
name|dest
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcFs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|srcFs
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|dfs_path
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|local_path
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// If this is a source table we do not copy it out
if|if
condition|(
name|srcTables
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|file
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|destFs
operator|.
name|exists
argument_list|(
name|local_path
argument_list|)
condition|)
block|{
name|destFs
operator|.
name|mkdirs
argument_list|(
name|local_path
argument_list|)
expr_stmt|;
block|}
name|copyDirectoryToLocal
argument_list|(
name|dfs_path
argument_list|,
name|local_path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcFs
operator|.
name|copyToLocalFile
argument_list|(
name|dfs_path
argument_list|,
name|local_path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
name|Pattern
name|mapTok
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\.?)(.*)_map_(.*)"
argument_list|)
decl_stmt|;
specifier|static
name|Pattern
name|reduceTok
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*)(reduce_[^\\.]*)((\\..*)?)"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|normalizeNames
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|path
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|normalizeNames
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// System.out.println("Trying to match: " + path.getPath());
name|Matcher
name|m
init|=
name|reduceTok
operator|.
name|matcher
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"reduce"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// System.out.println("Matched new name: " + name);
name|path
operator|.
name|renameTo
argument_list|(
operator|new
name|File
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
name|mapTok
operator|.
name|matcher
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"map_"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// System.out.println("Matched new name: " + name);
name|path
operator|.
name|renameTo
argument_list|(
operator|new
name|File
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|QTestUtil
parameter_list|(
name|String
name|outDir
parameter_list|,
name|String
name|logDir
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|outDir
argument_list|,
name|logDir
argument_list|,
literal|false
argument_list|,
literal|"0.20"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getHadoopMainVersion
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+\\.\\d+).*"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|initConf
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniMr
condition|)
block|{
assert|assert
name|dfs
operator|!=
literal|null
assert|;
assert|assert
name|mr
operator|!=
literal|null
assert|;
comment|// set fs.default.name to the uri of mini-dfs
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPFS
argument_list|,
name|dfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// hive.metastore.warehouse.dir needs to be set relative to the mini-dfs
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
operator|(
operator|new
name|Path
argument_list|(
name|dfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/build/ql/test/data/warehouse/"
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJT
argument_list|,
literal|"localhost:"
operator|+
name|mr
operator|.
name|getJobTrackerPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|QTestUtil
parameter_list|(
name|String
name|outDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|boolean
name|miniMr
parameter_list|,
name|String
name|hadoopVer
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|outDir
operator|=
name|outDir
expr_stmt|;
name|this
operator|.
name|logDir
operator|=
name|logDir
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|miniMr
operator|=
name|miniMr
expr_stmt|;
name|this
operator|.
name|hadoopVer
operator|=
name|getHadoopMainVersion
argument_list|(
name|hadoopVer
argument_list|)
expr_stmt|;
name|qMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|qSkipSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|miniMr
condition|)
block|{
name|dfs
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getMiniDfs
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|4
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|initConf
argument_list|()
expr_stmt|;
name|testFiles
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|ow
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.output.overwrite"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ow
operator|!=
literal|null
operator|)
operator|&&
name|ow
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|overWrite
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|overWrite
operator|=
literal|false
expr_stmt|;
block|}
name|setup
operator|=
operator|new
name|QTestSetup
argument_list|()
expr_stmt|;
name|setup
operator|.
name|preTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanUp
argument_list|()
expr_stmt|;
name|setup
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|mr
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|qFile
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|qFile
argument_list|)
decl_stmt|;
name|addFile
argument_list|(
name|qf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|File
name|qf
parameter_list|)
throws|throws
name|Exception
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|qf
argument_list|)
decl_stmt|;
name|BufferedInputStream
name|bis
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|bis
argument_list|)
decl_stmt|;
name|StringBuilder
name|qsb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Look for a hint to not run a test on some Hadoop versions
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- EXCLUDE_HADOOP_MAJOR_VERSIONS(.*)"
argument_list|)
decl_stmt|;
comment|// Read the entire query
name|boolean
name|excludeQuery
init|=
literal|false
decl_stmt|;
name|String
name|hadoopVer
init|=
name|ShimLoader
operator|.
name|getMajorVersion
argument_list|()
decl_stmt|;
while|while
condition|(
name|dis
operator|.
name|available
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|line
init|=
name|dis
operator|.
name|readLine
argument_list|()
decl_stmt|;
comment|// While we are reading the lines, detect whether this query wants to be
comment|// excluded from running because the Hadoop version is incorrect
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|group
init|=
name|matcher
operator|.
name|group
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|group
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|group
operator|.
name|indexOf
argument_list|(
literal|')'
argument_list|)
decl_stmt|;
assert|assert
name|end
operator|>
name|start
assert|;
comment|// versions might be something like '0.17, 0.19'
name|String
name|versions
init|=
name|group
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludedVersionSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|versions
operator|.
name|split
argument_list|(
literal|"\\,"
argument_list|)
control|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
name|excludedVersionSet
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludedVersionSet
operator|.
name|contains
argument_list|(
name|hadoopVer
argument_list|)
condition|)
block|{
name|excludeQuery
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|qsb
operator|.
name|append
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|qMap
operator|.
name|put
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|,
name|qsb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|excludeQuery
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Due to the Hadoop Version ("
operator|+
name|hadoopVer
operator|+
literal|"), "
operator|+
literal|"adding query "
operator|+
name|qf
operator|.
name|getName
argument_list|()
operator|+
literal|" to the set of tests to skip"
argument_list|)
expr_stmt|;
name|qSkipSet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Clear out any side effects of running tests    */
specifier|public
name|void
name|clearPostTestEffects
parameter_list|()
throws|throws
name|Exception
block|{
name|setup
operator|.
name|postTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear out any side effects of running tests    */
specifier|public
name|void
name|clearTestSideEffects
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Delete any tables other than the source tables
comment|// and any databases other than the default database.
for|for
control|(
name|String
name|dbName
range|:
name|db
operator|.
name|getAllDatabases
argument_list|()
control|)
block|{
name|db
operator|.
name|setCurrentDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|db
operator|.
name|getAllTables
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|DEFAULT_DATABASE_NAME
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
operator|||
operator|!
name|srcTables
operator|.
name|contains
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
name|Table
name|tblObj
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
comment|// dropping index table can not be dropped directly. Dropping the base
comment|// table will automatically drop all its index table
if|if
condition|(
name|tblObj
operator|.
name|isIndexTable
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|db
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this table is defined in srcTables, drop all indexes on it
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|db
operator|.
name|getIndexes
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexes
operator|!=
literal|null
operator|&&
name|indexes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Index
name|index
range|:
name|indexes
control|)
block|{
name|db
operator|.
name|dropIndex
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|DEFAULT_DATABASE_NAME
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
name|db
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
name|db
operator|.
name|setCurrentDatabase
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
name|db
operator|.
name|getAllRoleNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
name|db
operator|.
name|dropRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
comment|// allocate and initialize a new conf since a test can
comment|// modify conf by using 'set' commands
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
expr_stmt|;
name|initConf
argument_list|()
expr_stmt|;
name|setup
operator|.
name|preTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Drop any tables that remain due to unsuccessful runs
for|for
control|(
name|String
name|s
range|:
operator|new
name|String
index|[]
block|{
literal|"src"
block|,
literal|"src1"
block|,
literal|"src_json"
block|,
literal|"src_thrift"
block|,
literal|"src_sequencefile"
block|,
literal|"srcpart"
block|,
literal|"srcbucket"
block|,
literal|"srcbucket2"
block|,
literal|"dest1"
block|,
literal|"dest2"
block|,
literal|"dest3"
block|,
literal|"dest4"
block|,
literal|"dest4_sequencefile"
block|,
literal|"dest_j1"
block|,
literal|"dest_j2"
block|,
literal|"dest_g1"
block|,
literal|"dest_g2"
block|,
literal|"fetchtask_ioexception"
block|}
control|)
block|{
name|db
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|// delete any contents in the warehouse dir
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|testWarehouse
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|ls
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|ls
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|i
operator|<
name|ls
operator|.
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|ls
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FunctionRegistry
operator|.
name|unregisterTemporaryUDF
argument_list|(
literal|"test_udaf"
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|unregisterTemporaryUDF
argument_list|(
literal|"test_error"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runLoadCmd
parameter_list|(
name|String
name|loadCmd
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ecode
init|=
literal|0
decl_stmt|;
name|ecode
operator|=
name|drv
operator|.
name|run
argument_list|(
name|loadCmd
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|drv
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"load command: "
operator|+
name|loadCmd
operator|+
literal|" failed with exit code= "
operator|+
name|ecode
argument_list|)
throw|;
block|}
return|return;
block|}
specifier|private
name|void
name|runCreateTableCmd
parameter_list|(
name|String
name|createTableCmd
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ecode
init|=
literal|0
decl_stmt|;
name|ecode
operator|=
name|drv
operator|.
name|run
argument_list|(
name|createTableCmd
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"create table command: "
operator|+
name|createTableCmd
operator|+
literal|" failed with exit code= "
operator|+
name|ecode
argument_list|)
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|createSources
parameter_list|()
throws|throws
name|Exception
block|{
name|startSessionState
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.test.init.phase"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create a bunch of tables with columns key and value
name|LinkedList
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|part_cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"ds"
argument_list|)
expr_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"srcpart"
argument_list|,
name|cols
argument_list|,
name|part_cols
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|Path
name|fpath
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part_spec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ds
range|:
operator|new
name|String
index|[]
block|{
literal|"2008-04-08"
block|,
literal|"2008-04-09"
block|}
control|)
block|{
for|for
control|(
name|String
name|hr
range|:
operator|new
name|String
index|[]
block|{
literal|"11"
block|,
literal|"12"
block|}
control|)
block|{
name|part_spec
operator|.
name|clear
argument_list|()
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"hr"
argument_list|,
name|hr
argument_list|)
expr_stmt|;
comment|// System.out.println("Loading partition with spec: " + part_spec);
comment|// db.createPartition(srcpart, part_spec);
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
comment|// db.loadPartition(fpath, srcpart.getName(), part_spec, true);
name|runLoadCmd
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|fpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' OVERWRITE INTO TABLE srcpart PARTITION (ds='"
operator|+
name|ds
operator|+
literal|"',hr='"
operator|+
name|hr
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|bucketCols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|runCreateTableCmd
argument_list|(
literal|"CREATE TABLE srcbucket(key int, value string) CLUSTERED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
comment|// db.createTable("srcbucket", cols, null, TextInputFormat.class,
comment|// IgnoreKeyTextOutputFormat.class, 2, bucketCols);
for|for
control|(
name|String
name|fname
range|:
operator|new
name|String
index|[]
block|{
literal|"srcbucket0.txt"
block|,
literal|"srcbucket1.txt"
block|}
control|)
block|{
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
name|fname
argument_list|)
expr_stmt|;
name|runLoadCmd
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|fpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE srcbucket"
argument_list|)
expr_stmt|;
block|}
name|runCreateTableCmd
argument_list|(
literal|"CREATE TABLE srcbucket2(key int, value string) "
operator|+
literal|"CLUSTERED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
comment|// db.createTable("srcbucket", cols, null, TextInputFormat.class,
comment|// IgnoreKeyTextOutputFormat.class, 2, bucketCols);
for|for
control|(
name|String
name|fname
range|:
operator|new
name|String
index|[]
block|{
literal|"srcbucket20.txt"
block|,
literal|"srcbucket21.txt"
block|,
literal|"srcbucket22.txt"
block|,
literal|"srcbucket23.txt"
block|}
control|)
block|{
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
name|fname
argument_list|)
expr_stmt|;
name|runLoadCmd
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|fpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE srcbucket2"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|tname
range|:
operator|new
name|String
index|[]
block|{
literal|"src"
block|,
literal|"src1"
block|}
control|)
block|{
name|db
operator|.
name|createTable
argument_list|(
name|tname
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|createTable
argument_list|(
literal|"src_sequencefile"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|Table
name|srcThrift
init|=
operator|new
name|Table
argument_list|(
name|db
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
literal|"src_thrift"
argument_list|)
decl_stmt|;
name|srcThrift
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|srcThrift
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|srcThrift
operator|.
name|setSerializationLib
argument_list|(
name|ThriftDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|srcThrift
operator|.
name|setSerdeParam
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
name|Complex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|srcThrift
operator|.
name|setSerdeParam
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|TBinaryProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
name|srcThrift
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|json_cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|json_cols
operator|.
name|add
argument_list|(
literal|"json"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"src_json"
argument_list|,
name|json_cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// load the input data into the src table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|runLoadCmd
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|fpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE src"
argument_list|)
expr_stmt|;
comment|// load the input data into the src table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"kv3.txt"
argument_list|)
expr_stmt|;
name|runLoadCmd
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|fpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE src1"
argument_list|)
expr_stmt|;
comment|// load the input data into the src_sequencefile table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"kv1.seq"
argument_list|)
expr_stmt|;
name|runLoadCmd
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|fpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE src_sequencefile"
argument_list|)
expr_stmt|;
comment|// load the input data into the src_thrift table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"complex.seq"
argument_list|)
expr_stmt|;
name|runLoadCmd
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|fpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE src_thrift"
argument_list|)
expr_stmt|;
comment|// load the json data into the src_json table
name|fpath
operator|=
operator|new
name|Path
argument_list|(
name|testFiles
argument_list|,
literal|"json.txt"
argument_list|)
expr_stmt|;
name|runLoadCmd
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|fpath
operator|.
name|toString
argument_list|()
operator|+
literal|"' INTO TABLE src_json"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.test.init.phase"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
comment|// System.out.println(conf.toString());
name|testWarehouse
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
expr_stmt|;
comment|// conf.logVars(System.out);
comment|// System.out.flush();
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|drv
operator|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|drv
operator|.
name|init
argument_list|()
expr_stmt|;
name|pd
operator|=
operator|new
name|ParseDriver
argument_list|()
expr_stmt|;
name|sem
operator|=
operator|new
name|SemanticAnalyzer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|cleanUp
argument_list|()
expr_stmt|;
name|createSources
argument_list|()
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|part_cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"ds"
argument_list|)
expr_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest1"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest2"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest3"
argument_list|,
name|cols
argument_list|,
name|part_cols
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|Table
name|dest3
init|=
name|db
operator|.
name|getTable
argument_list|(
literal|"dest3"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part_spec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"2008-04-08"
argument_list|)
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"hr"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createPartition
argument_list|(
name|dest3
argument_list|,
name|part_spec
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest4"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
literal|"dest4_sequencefile"
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cliInit
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|cliInit
argument_list|(
name|tname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cliInit
parameter_list|(
name|String
name|tname
parameter_list|,
name|boolean
name|recreate
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|recreate
condition|)
block|{
name|cleanUp
argument_list|()
expr_stmt|;
name|createSources
argument_list|()
expr_stmt|;
block|}
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.DummyAuthenticator"
argument_list|)
expr_stmt|;
name|CliSessionState
name|ss
init|=
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
assert|assert
name|ss
operator|!=
literal|null
assert|;
name|ss
operator|.
name|in
operator|=
name|System
operator|.
name|in
expr_stmt|;
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fo
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outf
argument_list|)
decl_stmt|;
name|ss
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|fo
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|err
operator|=
name|ss
operator|.
name|out
expr_stmt|;
name|ss
operator|.
name|setIsSilent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SessionState
name|oldSs
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|oldSs
operator|.
name|out
operator|!=
literal|null
operator|&&
name|oldSs
operator|.
name|out
operator|!=
name|System
operator|.
name|out
condition|)
block|{
name|oldSs
operator|.
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|cliDriver
operator|=
operator|new
name|CliDriver
argument_list|()
expr_stmt|;
if|if
condition|(
name|tname
operator|.
name|equals
argument_list|(
literal|"init_file.q"
argument_list|)
condition|)
block|{
name|ss
operator|.
name|initFiles
operator|.
name|add
argument_list|(
literal|"../data/scripts/test_init_file.sql"
argument_list|)
expr_stmt|;
block|}
name|cliDriver
operator|.
name|processInitFiles
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CliSessionState
name|startSessionState
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|UnsupportedEncodingException
block|{
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.DummyAuthenticator"
argument_list|)
expr_stmt|;
name|CliSessionState
name|ss
init|=
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
assert|assert
name|ss
operator|!=
literal|null
assert|;
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
return|return
name|ss
return|;
block|}
specifier|public
name|int
name|executeOne
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
name|String
name|q
init|=
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|q1
init|=
name|q
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|qrest
init|=
name|q
operator|.
name|substring
argument_list|(
name|q
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|qMap
operator|.
name|put
argument_list|(
name|tname
argument_list|,
name|qrest
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing "
operator|+
name|q1
argument_list|)
expr_stmt|;
return|return
name|cliDriver
operator|.
name|processLine
argument_list|(
name|q1
argument_list|)
return|;
block|}
specifier|public
name|int
name|execute
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
try|try
block|{
return|return
name|drv
operator|.
name|run
argument_list|(
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
argument_list|)
operator|.
name|getResponseCode
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|public
name|int
name|executeClient
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
return|return
name|cliDriver
operator|.
name|processLine
argument_list|(
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|shouldBeSkipped
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
return|return
name|qSkipSet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
return|;
block|}
specifier|public
name|void
name|convertSequenceFileToTextFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an instance of hive in order to create the tables
name|testWarehouse
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Create dest4 to replace dest4_sequencefile
name|LinkedList
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
comment|// Move all data from dest4_sequencefile to dest4
name|drv
operator|.
name|run
argument_list|(
literal|"FROM dest4_sequencefile INSERT OVERWRITE TABLE dest4 SELECT dest4_sequencefile.*"
argument_list|)
expr_stmt|;
comment|// Drop dest4_sequencefile
name|db
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"dest4_sequencefile"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|checkNegativeResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
decl_stmt|;
name|String
name|expf
init|=
name|outPath
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
expr_stmt|;
name|FileWriter
name|outfd
init|=
operator|new
name|FileWriter
argument_list|(
name|outf
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ParseException
condition|)
block|{
name|outfd
operator|.
name|write
argument_list|(
literal|"Parse Error: "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|SemanticException
condition|)
block|{
name|outfd
operator|.
name|write
argument_list|(
literal|"Semantic Exception: \n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
name|outfd
operator|.
name|write
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|outfd
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|cmdLine
init|=
literal|"diff "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|expf
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildOutStream
argument_list|()
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildErrStream
argument_list|()
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
operator|&&
name|overWrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results"
argument_list|)
expr_stmt|;
name|cmdLine
operator|=
literal|"cp "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|expf
expr_stmt|;
name|executor
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|exitVal
operator|=
name|executor
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
specifier|public
name|int
name|checkParseResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
name|File
name|parseDir
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
literal|"parse"
argument_list|)
decl_stmt|;
name|String
name|expf
init|=
name|outPath
argument_list|(
name|parseDir
operator|.
name|toString
argument_list|()
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
literal|".out"
argument_list|)
argument_list|)
expr_stmt|;
name|FileWriter
name|outfd
init|=
operator|new
name|FileWriter
argument_list|(
name|outf
argument_list|)
decl_stmt|;
name|outfd
operator|.
name|write
argument_list|(
name|tree
operator|.
name|toStringTree
argument_list|()
argument_list|)
expr_stmt|;
name|outfd
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|cmdLine
init|=
literal|"diff "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|expf
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildOutStream
argument_list|()
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildErrStream
argument_list|()
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
operator|&&
name|overWrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results"
argument_list|)
expr_stmt|;
name|cmdLine
operator|=
literal|"cp "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|expf
expr_stmt|;
name|executor
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|exitVal
operator|=
name|executor
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Parse tree is null"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|checkPlan
parameter_list|(
name|String
name|tname
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tasks
operator|!=
literal|null
condition|)
block|{
name|File
name|planDir
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
literal|"plan"
argument_list|)
decl_stmt|;
name|String
name|planFile
init|=
name|outPath
argument_list|(
name|planDir
operator|.
name|toString
argument_list|()
argument_list|,
name|tname
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
literal|".xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputStream
name|ofs
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outf
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|plan
range|:
name|tasks
control|)
block|{
name|Utilities
operator|.
name|serializeTasks
argument_list|(
name|plan
argument_list|,
name|ofs
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|cmdArray
init|=
operator|new
name|String
index|[
literal|6
index|]
decl_stmt|;
name|cmdArray
index|[
literal|0
index|]
operator|=
literal|"diff"
expr_stmt|;
name|cmdArray
index|[
literal|1
index|]
operator|=
literal|"-b"
expr_stmt|;
name|cmdArray
index|[
literal|2
index|]
operator|=
literal|"-I"
expr_stmt|;
name|cmdArray
index|[
literal|3
index|]
operator|=
literal|"\\(\\(<java version=\".*\" class=\"java.beans.XMLDecoder\">\\)"
operator|+
literal|"\\|\\(<string>.*/tmp/.*</string>\\)"
operator|+
literal|"\\|\\(<string>file:.*</string>\\)"
operator|+
literal|"\\|\\(<string>pfile:.*</string>\\)"
operator|+
literal|"\\|\\(<string>[0-9]\\{10\\}</string>\\)"
operator|+
literal|"\\|\\(<string>/.*/warehouse/.*</string>\\)\\)"
expr_stmt|;
name|cmdArray
index|[
literal|4
index|]
operator|=
name|outf
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|cmdArray
index|[
literal|5
index|]
operator|=
name|planFile
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdArray
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|2
index|]
operator|+
literal|"\'"
operator|+
name|cmdArray
index|[
literal|3
index|]
operator|+
literal|"\'"
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|4
index|]
operator|+
literal|" "
operator|+
name|cmdArray
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdArray
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildOutStream
argument_list|()
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildErrStream
argument_list|()
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
operator|&&
name|overWrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results"
argument_list|)
expr_stmt|;
name|String
name|cmdLine
init|=
literal|"cp "
operator|+
name|outf
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|planFile
decl_stmt|;
name|executor
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
name|exitVal
operator|=
name|executor
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Plan is null"
argument_list|)
throw|;
block|}
block|}
comment|/* This seems unused. Comment out first in case it is used somewhere.   public int checkResults(String tname) throws Exception {     Path warehousePath = new Path(FileSystem.get(conf).getUri().getPath());     warehousePath = new Path(warehousePath, (new URI(testWarehouse)).getPath());      Path localPath = new Path(FileSystem.getLocal(conf).getUri().getPath());     localPath = new Path(localPath, logDir);     localPath = new Path(localPath, "warehouse_local_copy");     System.out.println("warehousePath = " + warehousePath.toString()         + " localPath = " + localPath.toString());      if (FileSystem.getLocal(conf).exists(localPath)) {       FileSystem.getLocal(conf).delete(localPath, true);     }      copyDirectoryToLocal(warehousePath, localPath);     normalizeNames(new File(localPath.toUri().getPath()));      String[] cmdArray;     if (overWrite == false) {       cmdArray = new String[6];       cmdArray[0] = "diff";       cmdArray[1] = "-r";       cmdArray[2] = "--exclude=tmp";       cmdArray[3] = "--exclude=.svn";       cmdArray[4] = localPath.toUri().getPath();       cmdArray[5] = (new File(outDir, tname)).getPath() + "/warehouse";       System.out.println(cmdArray[0] + " " + cmdArray[1] + " " + cmdArray[2]           + " " + cmdArray[3] + " " + cmdArray[4] + " " + cmdArray[5]);     } else {       System.out.println("overwritting");       // Remove any existing output       String[] cmdArray1 = new String[5];       cmdArray1[0] = "rm";       cmdArray1[1] = "-rf";       cmdArray1[2] = (new File(outDir, tname)).getPath();       System.out           .println(cmdArray1[0] + " " + cmdArray1[1] + " " + cmdArray1[2]);        Process executor = Runtime.getRuntime().exec(cmdArray1);        StreamPrinter outPrinter = new StreamPrinter(           executor.getInputStream(), null, SessionState.getConsole().getChildOutStream());       StreamPrinter errPrinter = new StreamPrinter(           executor.getErrorStream(), null, SessionState.getConsole().getChildErrStream());        outPrinter.start();       errPrinter.start();       int exitVal = executor.waitFor();       if (exitVal != 0) {         return exitVal;       }        // Capture code       cmdArray = new String[5];       cmdArray[0] = "cp";       cmdArray[1] = "-r";       cmdArray[2] = localPath.toUri().getPath();       cmdArray[3] = (new File(outDir, tname)).getPath();       System.out.println(cmdArray[0] + " " + cmdArray[1] + " " + cmdArray[2]           + " " + cmdArray[3]);     }      Process executor = Runtime.getRuntime().exec(cmdArray);      StreamPrinter outPrinter = new StreamPrinter(         executor.getInputStream(), null, SessionState.getConsole().getChildOutStream());     StreamPrinter errPrinter = new StreamPrinter(         executor.getErrorStream(), null, SessionState.getConsole().getChildErrStream());      outPrinter.start();     errPrinter.start();      int exitVal = executor.waitFor();      return exitVal;   }   */
comment|/**    * Given the current configurations (e.g., hadoop version and execution mode), return    * the correct file name to compare with the current test run output.    * @param outDir The directory where the reference log files are stored.    * @param testName The test file name (terminated by ".out").    * @return The file name appended with the configuration values if it exists.    */
specifier|public
name|String
name|outPath
parameter_list|(
name|String
name|outDir
parameter_list|,
name|String
name|testName
parameter_list|)
block|{
name|String
name|ret
init|=
operator|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|testName
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// List of configurations. Currently the list consists of hadoop version and execution mode only
name|List
argument_list|<
name|String
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|configs
operator|.
name|add
argument_list|(
name|this
operator|.
name|hadoopVer
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|String
argument_list|>
name|stack
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|testName
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// example file names are input1.q.out_0.20.0_minimr or input2.q.out_0.17
for|for
control|(
name|String
name|s
range|:
name|configs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|fileName
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ret
operator|=
name|f
operator|.
name|getPath
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|checkCliDriverResults
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|cmdArray
decl_stmt|;
assert|assert
operator|(
name|qMap
operator|.
name|containsKey
argument_list|(
name|tname
argument_list|)
operator|)
assert|;
name|String
name|outFileName
init|=
name|outPath
argument_list|(
name|outDir
argument_list|,
name|tname
operator|+
literal|".out"
argument_list|)
decl_stmt|;
name|cmdArray
operator|=
operator|new
name|String
index|[]
block|{
literal|"diff"
block|,
literal|"-a"
block|,
literal|"-I"
block|,
literal|"file:"
block|,
literal|"-I"
block|,
literal|"pfile:"
block|,
literal|"-I"
block|,
literal|"hdfs:"
block|,
literal|"-I"
block|,
literal|"/tmp/"
block|,
literal|"-I"
block|,
literal|"invalidscheme:"
block|,
literal|"-I"
block|,
literal|"lastUpdateTime"
block|,
literal|"-I"
block|,
literal|"lastAccessTime"
block|,
literal|"-I"
block|,
literal|"[Oo]wner"
block|,
literal|"-I"
block|,
literal|"CreateTime"
block|,
literal|"-I"
block|,
literal|"LastAccessTime"
block|,
literal|"-I"
block|,
literal|"Location"
block|,
literal|"-I"
block|,
literal|"LOCATION '"
block|,
literal|"-I"
block|,
literal|"transient_lastDdlTime"
block|,
literal|"-I"
block|,
literal|"last_modified_"
block|,
literal|"-I"
block|,
literal|"java.lang.RuntimeException"
block|,
literal|"-I"
block|,
literal|"at org"
block|,
literal|"-I"
block|,
literal|"at sun"
block|,
literal|"-I"
block|,
literal|"at java"
block|,
literal|"-I"
block|,
literal|"at junit"
block|,
literal|"-I"
block|,
literal|"Caused by:"
block|,
literal|"-I"
block|,
literal|"LOCK_QUERYID:"
block|,
literal|"-I"
block|,
literal|"LOCK_TIME:"
block|,
literal|"-I"
block|,
literal|"grantTime"
block|,
literal|"-I"
block|,
literal|"[.][.][.] [0-9]* more"
block|,
literal|"-I"
block|,
literal|"job_[0-9]*_[0-9]*"
block|,
literal|"-I"
block|,
literal|"USING 'java -cp"
block|,
operator|(
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|tname
operator|+
literal|".out"
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
block|,
name|outFileName
block|}
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|cmdArray
argument_list|,
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdArray
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildOutStream
argument_list|()
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildErrStream
argument_list|()
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
operator|&&
name|overWrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results"
argument_list|)
expr_stmt|;
name|cmdArray
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|cmdArray
index|[
literal|0
index|]
operator|=
literal|"cp"
expr_stmt|;
name|cmdArray
index|[
literal|1
index|]
operator|=
operator|(
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|tname
operator|+
literal|".out"
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|cmdArray
index|[
literal|2
index|]
operator|=
name|outFileName
expr_stmt|;
name|executor
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdArray
argument_list|)
expr_stmt|;
name|exitVal
operator|=
name|executor
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
specifier|public
name|ASTNode
name|parseQuery
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|pd
operator|.
name|parse
argument_list|(
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|resetParser
parameter_list|()
throws|throws
name|SemanticException
block|{
name|drv
operator|.
name|init
argument_list|()
expr_stmt|;
name|pd
operator|=
operator|new
name|ParseDriver
argument_list|()
expr_stmt|;
name|sem
operator|=
operator|new
name|SemanticAnalyzer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|analyzeAST
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Do semantic analysis and plan generation
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|ast
operator|.
name|getToken
argument_list|()
operator|==
literal|null
operator|)
operator|&&
operator|(
name|ast
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|ast
operator|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sem
operator|.
name|getOutputs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sem
operator|.
name|getInputs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sem
operator|.
name|analyze
argument_list|(
name|ast
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|sem
operator|.
name|getRootTasks
argument_list|()
return|;
block|}
specifier|public
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getQMap
parameter_list|()
block|{
return|return
name|qMap
return|;
block|}
comment|/**    * QTestSetup defines test fixtures which are reused across testcases,    * and are needed before any test can be run    */
specifier|public
specifier|static
class|class
name|QTestSetup
block|{
specifier|private
name|MiniZooKeeperCluster
name|zooKeeperCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|zkPort
decl_stmt|;
specifier|private
name|ZooKeeper
name|zooKeeper
decl_stmt|;
specifier|public
name|QTestSetup
parameter_list|()
block|{     }
specifier|public
name|void
name|preTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|zooKeeperCluster
operator|==
literal|null
condition|)
block|{
name|String
name|tmpdir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/../build/ql/tmp"
decl_stmt|;
name|zooKeeperCluster
operator|=
operator|new
name|MiniZooKeeperCluster
argument_list|()
expr_stmt|;
name|zkPort
operator|=
name|zooKeeperCluster
operator|.
name|startup
argument_list|(
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
literal|"zookeeper"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zooKeeper
operator|!=
literal|null
condition|)
block|{
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|sessionTimeout
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_SESSION_TIMEOUT
argument_list|)
decl_stmt|;
name|zooKeeper
operator|=
operator|new
name|ZooKeeper
argument_list|(
literal|"localhost:"
operator|+
name|zkPort
argument_list|,
name|sessionTimeout
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|zkServer
init|=
literal|"localhost"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.zookeeper.quorum"
argument_list|,
name|zkServer
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.zookeeper.client.port"
argument_list|,
literal|""
operator|+
name|zkPort
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|postTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|zooKeeperCluster
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|zooKeeper
operator|!=
literal|null
condition|)
block|{
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|ZooKeeperHiveLockManager
operator|.
name|releaseAllLocks
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|zooKeeperCluster
operator|!=
literal|null
condition|)
block|{
name|zooKeeperCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|zooKeeperCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * QTRunner: Runnable class for running a a single query file.    *    **/
specifier|public
specifier|static
class|class
name|QTRunner
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|QTestUtil
name|qt
decl_stmt|;
specifier|private
specifier|final
name|String
name|fname
decl_stmt|;
specifier|public
name|QTRunner
parameter_list|(
name|QTestUtil
name|qt
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|this
operator|.
name|qt
operator|=
name|qt
expr_stmt|;
name|this
operator|.
name|fname
operator|=
name|fname
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// assumption is that environment has already been cleaned once globally
comment|// hence each thread does not call cleanUp() and createSources() again
name|qt
operator|.
name|cliInit
argument_list|(
name|fname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qt
operator|.
name|executeClient
argument_list|(
name|fname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Query file "
operator|+
name|fname
operator|+
literal|" failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|outputTestFailureHelpMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Setup to execute a set of query files. Uses QTestUtil to do so.    *    * @param qfiles    *          array of input query files containing arbitrary number of hive    *          queries    * @param resDir    *          output directory    * @param logDir    *          log directory    * @return one QTestUtil for each query file    */
specifier|public
specifier|static
name|QTestUtil
index|[]
name|queryListRunnerSetup
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|String
name|resDir
parameter_list|,
name|String
name|logDir
parameter_list|)
throws|throws
name|Exception
block|{
name|QTestUtil
index|[]
name|qt
init|=
operator|new
name|QTestUtil
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qt
index|[
name|i
index|]
operator|=
operator|new
name|QTestUtil
argument_list|(
name|resDir
argument_list|,
name|logDir
argument_list|,
literal|false
argument_list|,
literal|"0.20"
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|addFile
argument_list|(
name|qfiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|clearTestSideEffects
argument_list|()
expr_stmt|;
block|}
return|return
name|qt
return|;
block|}
comment|/**    * Executes a set of query files in sequence.    *    * @param qfiles    *          array of input query files containing arbitrary number of hive    *          queries    * @param qt    *          array of QTestUtils, one per qfile    * @return true if all queries passed, false otw    */
specifier|public
specifier|static
name|boolean
name|queryListRunnerSingleThreaded
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|QTestUtil
index|[]
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|createSources
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
operator|&&
operator|!
name|failed
condition|;
name|i
operator|++
control|)
block|{
name|qt
index|[
name|i
index|]
operator|.
name|clearTestSideEffects
argument_list|()
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|cliInit
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|executeClient
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ecode
init|=
name|qt
index|[
name|i
index|]
operator|.
name|checkCliDriverResults
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Test "
operator|+
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" results check failed with error code "
operator|+
name|ecode
argument_list|)
expr_stmt|;
name|outputTestFailureHelpMessage
argument_list|()
expr_stmt|;
block|}
name|qt
index|[
name|i
index|]
operator|.
name|clearPostTestEffects
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
operator|!
name|failed
operator|)
return|;
block|}
comment|/**    * Executes a set of query files parallel.    *    * Each query file is run in a separate thread. The caller has to arrange    * that different query files do not collide (in terms of destination tables)    *    * @param qfiles    *          array of input query files containing arbitrary number of hive    *          queries    * @param qt    *          array of QTestUtils, one per qfile    * @return true if all queries passed, false otw    *    */
specifier|public
specifier|static
name|boolean
name|queryListRunnerMultiThreaded
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|QTestUtil
index|[]
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
comment|// in multithreaded mode - do cleanup/initialization just once
name|qt
index|[
literal|0
index|]
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|createSources
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|clearTestSideEffects
argument_list|()
expr_stmt|;
name|QTRunner
index|[]
name|qtRunners
init|=
operator|new
name|QTestUtil
operator|.
name|QTRunner
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
name|Thread
index|[]
name|qtThread
init|=
operator|new
name|Thread
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtRunners
index|[
name|i
index|]
operator|=
operator|new
name|QTestUtil
operator|.
name|QTRunner
argument_list|(
name|qt
index|[
name|i
index|]
argument_list|,
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|qtThread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|qtRunners
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtThread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtThread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|int
name|ecode
init|=
name|qt
index|[
name|i
index|]
operator|.
name|checkCliDriverResults
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Test "
operator|+
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" results check failed with error code "
operator|+
name|ecode
argument_list|)
expr_stmt|;
name|outputTestFailureHelpMessage
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
operator|!
name|failed
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|outputTestFailureHelpMessage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"See build/ql/tmp/hive.log, "
operator|+
literal|"or try \"ant test ... -Dtest.silent=false\" to get more logs."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

