begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
specifier|final
class|class
name|TestExecutionEngineWorkConcurrency
block|{
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
operator|new
name|TezDagIdProvider
argument_list|()
block|}
block|,
block|{
operator|new
name|SparkDagIdProvider
argument_list|()
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|ExecutionEngineDagIdGenerator
name|executionEngineDagIdGenerator
decl_stmt|;
specifier|public
name|TestExecutionEngineWorkConcurrency
parameter_list|(
name|ExecutionEngineDagIdGenerator
name|executionEngineDagIdGenerator
parameter_list|)
block|{
name|this
operator|.
name|executionEngineDagIdGenerator
operator|=
name|executionEngineDagIdGenerator
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ensureDagIdIsUnique
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|threadCount
init|=
literal|5
decl_stmt|;
specifier|final
name|CountDownLatch
name|threadReadyToStartSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startThreadSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numberOfWorkToCreatePerThread
init|=
literal|100
decl_stmt|;
name|List
argument_list|<
name|FutureTask
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|tasks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|FutureTask
argument_list|<>
argument_list|(
operator|new
name|Callable
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|threadReadyToStartSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|startThreadSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|generateWorkDagIds
argument_list|(
name|numberOfWorkToCreatePerThread
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
for|for
control|(
name|FutureTask
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|threadReadyToStartSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|startThreadSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allWorkDagIds
init|=
name|getAllWorkDagIds
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|threadCount
operator|*
name|numberOfWorkToCreatePerThread
argument_list|,
name|allWorkDagIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|generateWorkDagIds
parameter_list|(
name|int
name|numberOfNames
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|workIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNames
condition|;
name|i
operator|++
control|)
block|{
name|workIds
operator|.
name|add
argument_list|(
name|executionEngineDagIdGenerator
operator|.
name|getDagId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|workIds
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getAllWorkDagIds
parameter_list|(
name|List
argument_list|<
name|FutureTask
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|allWorkDagIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|FutureTask
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
name|allWorkDagIds
operator|.
name|addAll
argument_list|(
name|task
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|allWorkDagIds
return|;
block|}
specifier|private
interface|interface
name|ExecutionEngineDagIdGenerator
block|{
name|String
name|getDagId
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TezDagIdProvider
implements|implements
name|ExecutionEngineDagIdGenerator
block|{
annotation|@
name|Override
specifier|public
name|String
name|getDagId
parameter_list|()
block|{
return|return
operator|new
name|TezWork
argument_list|(
literal|"query-id"
argument_list|)
operator|.
name|getDagId
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SparkDagIdProvider
implements|implements
name|ExecutionEngineDagIdGenerator
block|{
annotation|@
name|Override
specifier|public
name|String
name|getDagId
parameter_list|()
block|{
return|return
operator|new
name|SparkWork
argument_list|(
literal|"query-id"
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

