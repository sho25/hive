begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestUDFUnhex.  */
end_comment

begin_class
specifier|public
class|class
name|TestUDFUnhex
block|{
annotation|@
name|Test
specifier|public
name|void
name|testUnhexConversion
parameter_list|()
block|{
name|Text
name|hex
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|// Let's make sure we only read the relevant part of the writable in case of reuse
name|hex
operator|.
name|set
argument_list|(
literal|"57686174207765726520796F7520686F70696E6720666F723F"
argument_list|)
expr_stmt|;
name|hex
operator|.
name|set
argument_list|(
literal|"737472696E67"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
literal|"string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|UDFUnhex
name|udf
init|=
operator|new
name|UDFUnhex
argument_list|()
decl_stmt|;
name|byte
index|[]
name|output
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|hex
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|output
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|output
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

