begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapping
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonMergeJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|TestOperatorSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|PlanMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStatsReaderHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|HiveTestEnvSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_class
specifier|public
class|class
name|TestOperatorCmp
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|HiveTestEnvSetup
name|env_setup
init|=
operator|new
name|HiveTestEnvSetup
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|methodRule
init|=
name|env_setup
operator|.
name|getMethodRule
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|String
name|cmds
index|[]
init|=
block|{
comment|// @formatter:off
literal|"create table tu(id_uv int,id_uw int,u int)"
block|,
literal|"create table tv(id_uv int,v int)"
block|,
literal|"create table tw(id_uw int,w int)"
block|,
literal|"insert into tu values (10,10,10),(1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,6,6)"
block|,
literal|"insert into tv values (10,10),(1,1),(2,2),(3,3)"
block|,
literal|"insert into tw values (10,10),(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9)"
block|,
comment|// @formatter:on
block|}
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|cmds
control|)
block|{
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|dropTables
parameter_list|(
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|tables
index|[]
init|=
block|{
literal|"tu"
block|,
literal|"tv"
block|,
literal|"tw"
block|}
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tables
control|)
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PlanMapper
name|getMapperForQuery
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|PlanMapper
name|pm0
init|=
name|driver
operator|.
name|getContext
argument_list|()
operator|.
name|getPlanMapper
argument_list|()
decl_stmt|;
return|return
name|pm0
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnrelatedFiltersAreNotMatched0
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommandProcessorException
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select u from tu where id_uv = 1 union all select v from tv where id_uv = 1"
decl_stmt|;
name|PlanMapper
name|pm
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos
init|=
name|pm
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the same operator is present 2 times
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
literal|4
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|compareOperators
argument_list|(
name|fos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fos
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnrelatedFiltersAreNotMatched1
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommandProcessorException
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|PlanMapper
name|pm0
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
literal|"select u from tu where id_uv = 1 group by u"
argument_list|)
decl_stmt|;
name|PlanMapper
name|pm1
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
literal|"select v from tv where id_uv = 1 group by v"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos0
init|=
name|pm0
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos1
init|=
name|pm1
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fos0
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fos1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"logicalEquals"
argument_list|,
name|compareOperators
argument_list|(
name|fos0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fos1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDifferentFiltersAreNotMatched
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommandProcessorException
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|PlanMapper
name|pm0
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
literal|"select u from tu where id_uv = 1 group by u"
argument_list|)
decl_stmt|;
name|PlanMapper
name|pm1
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
literal|"select u from tu where id_uv = 2 group by u"
argument_list|)
decl_stmt|;
name|assertHelper
argument_list|(
name|AssertHelperOp
operator|.
name|NOT_SAME
argument_list|,
name|pm0
argument_list|,
name|pm1
argument_list|,
name|FilterOperator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameFiltersMatched
parameter_list|()
throws|throws
name|ParseException
throws|,
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|PlanMapper
name|pm0
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
literal|"select u from tu where id_uv = 1 group by u"
argument_list|)
decl_stmt|;
name|PlanMapper
name|pm1
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
literal|"select u from tu where id_uv = 1 group by u"
argument_list|)
decl_stmt|;
name|assertHelper
argument_list|(
name|AssertHelperOp
operator|.
name|SAME
argument_list|,
name|pm0
argument_list|,
name|pm1
argument_list|,
name|FilterOperator
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertHelper
argument_list|(
name|AssertHelperOp
operator|.
name|SAME
argument_list|,
name|pm0
argument_list|,
name|pm1
argument_list|,
name|TableScanOperator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameJoinMatched
parameter_list|()
throws|throws
name|ParseException
throws|,
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|PlanMapper
name|pm0
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
literal|"select u,v from tu,tv where tu.id_uv = tv.id_uv and u>1 and v<10 group by u,v"
argument_list|)
decl_stmt|;
name|PlanMapper
name|pm1
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
literal|"select u,v from tu,tv where tu.id_uv = tv.id_uv and u>1 and v<10 group by u,v"
argument_list|)
decl_stmt|;
name|assertHelper
argument_list|(
name|AssertHelperOp
operator|.
name|SAME
argument_list|,
name|pm0
argument_list|,
name|pm1
argument_list|,
name|CommonMergeJoinOperator
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertHelper
argument_list|(
name|AssertHelperOp
operator|.
name|SAME
argument_list|,
name|pm0
argument_list|,
name|pm1
argument_list|,
name|JoinOperator
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//    assertHelper(AssertHelperOp.SAME, pm0, pm1, TableScanOperator.class);
block|}
enum|enum
name|AssertHelperOp
block|{
name|SAME
block|,
name|NOT_SAME
block|}
empty_stmt|;
specifier|private
parameter_list|<
name|T
extends|extends
name|Operator
argument_list|<
name|?
argument_list|>
parameter_list|>
name|void
name|assertHelper
parameter_list|(
name|AssertHelperOp
name|same
parameter_list|,
name|PlanMapper
name|pm0
parameter_list|,
name|PlanMapper
name|pm1
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|fos0
init|=
name|pm0
operator|.
name|getAll
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|fos1
init|=
name|pm1
operator|.
name|getAll
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fos0
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fos1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|T
name|opL
init|=
name|fos0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|T
name|opR
init|=
name|fos1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|same
operator|==
name|AssertHelperOp
operator|.
name|SAME
condition|)
block|{
name|assertTrue
argument_list|(
name|clazz
operator|+
literal|" "
operator|+
name|same
argument_list|,
name|compareOperators
argument_list|(
name|opL
argument_list|,
name|opR
argument_list|)
argument_list|)
expr_stmt|;
name|TestOperatorSignature
operator|.
name|checkEquals
argument_list|(
name|opL
argument_list|,
name|opR
argument_list|)
expr_stmt|;
name|TestOperatorSignature
operator|.
name|checkTreeEquals
argument_list|(
name|opL
argument_list|,
name|opR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|clazz
operator|+
literal|" "
operator|+
name|same
argument_list|,
name|compareOperators
argument_list|(
name|opL
argument_list|,
name|opR
argument_list|)
argument_list|)
expr_stmt|;
name|TestOperatorSignature
operator|.
name|checkNotEquals
argument_list|(
name|opL
argument_list|,
name|opR
argument_list|)
expr_stmt|;
name|TestOperatorSignature
operator|.
name|checkTreeNotEquals
argument_list|(
name|opL
argument_list|,
name|opR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|compareOperators
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|opL
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|opR
parameter_list|)
block|{
return|return
name|opL
operator|.
name|logicalEqualsTree
argument_list|(
name|opR
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|IDriver
name|createDriver
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
name|env_setup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVEOPTPPD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_ALWAYS_COLLECT_OPERATOR_STATS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_STRATEGIES
argument_list|,
literal|"reoptimize"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"zzz"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"reexec.overlay.zzz"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
comment|//
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|,
name|OperatorStatsReaderHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|IDriver
name|driver
init|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|driver
return|;
block|}
block|}
end_class

end_unit

