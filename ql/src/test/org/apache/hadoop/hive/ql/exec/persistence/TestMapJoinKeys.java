begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestMapJoinKeys
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDoubleKeys
parameter_list|()
block|{
name|MapJoinDoubleKeys
name|left
init|=
operator|new
name|MapJoinDoubleKeys
argument_list|(
literal|148
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MapJoinDoubleKeys
name|right
init|=
operator|new
name|MapJoinDoubleKeys
argument_list|(
literal|148
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|left
operator|.
name|hashCode
argument_list|()
argument_list|,
name|right
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|left
operator|=
operator|new
name|MapJoinDoubleKeys
argument_list|(
literal|null
argument_list|,
literal|148
argument_list|)
expr_stmt|;
name|right
operator|=
operator|new
name|MapJoinDoubleKeys
argument_list|(
literal|null
argument_list|,
literal|148
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|left
operator|.
name|hashCode
argument_list|()
argument_list|,
name|right
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|left
operator|=
operator|new
name|MapJoinDoubleKeys
argument_list|(
literal|148
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|right
operator|=
operator|new
name|MapJoinDoubleKeys
argument_list|(
literal|149
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|left
operator|.
name|equals
argument_list|(
name|right
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|right
operator|.
name|equals
argument_list|(
name|left
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectKeys
parameter_list|()
block|{
name|MapJoinObjectKey
name|left
init|=
operator|new
name|MapJoinObjectKey
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"left"
block|}
argument_list|)
decl_stmt|;
name|MapJoinObjectKey
name|right
init|=
operator|new
name|MapJoinObjectKey
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"right"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|left
operator|.
name|equals
argument_list|(
name|right
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|right
operator|.
name|equals
argument_list|(
name|left
argument_list|)
argument_list|)
expr_stmt|;
name|left
operator|=
operator|new
name|MapJoinObjectKey
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"key"
block|,
literal|148
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|right
operator|=
operator|new
name|MapJoinObjectKey
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"key"
block|,
literal|148
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|left
operator|.
name|hashCode
argument_list|()
argument_list|,
name|right
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

