begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
operator|.
name|DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
operator|.
name|getFileExtension
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|SparkTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InputEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DependencyCollectionWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DynamicPartitionCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFFromUtcTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestUtilities
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestUtilities
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_BUCKETS
init|=
literal|3
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetFileExtension
parameter_list|()
block|{
name|JobConf
name|jc
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No extension for uncompressed unknown format"
argument_list|,
literal|""
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No extension for compressed unknown format"
argument_list|,
literal|""
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No extension for uncompressed text format"
argument_list|,
literal|""
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|false
argument_list|,
operator|new
name|HiveIgnoreKeyTextOutputFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Deflate for uncompressed text format"
argument_list|,
literal|".deflate"
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|true
argument_list|,
operator|new
name|HiveIgnoreKeyTextOutputFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No extension for uncompressed default format"
argument_list|,
literal|""
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Deflate for uncompressed default format"
argument_list|,
literal|".deflate"
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|extension
init|=
literal|".myext"
decl_stmt|;
name|jc
operator|.
name|set
argument_list|(
literal|"hive.output.file.extension"
argument_list|,
name|extension
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Custom extension for uncompressed unknown format"
argument_list|,
name|extension
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Custom extension for compressed unknown format"
argument_list|,
name|extension
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Custom extension for uncompressed text format"
argument_list|,
name|extension
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|false
argument_list|,
operator|new
name|HiveIgnoreKeyTextOutputFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Custom extension for uncompressed text format"
argument_list|,
name|extension
argument_list|,
name|getFileExtension
argument_list|(
name|jc
argument_list|,
literal|true
argument_list|,
operator|new
name|HiveIgnoreKeyTextOutputFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializeTimestamp
parameter_list|()
block|{
name|Timestamp
name|ts
init|=
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
literal|1374554702000L
argument_list|,
literal|123456
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|desc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|,
operator|new
name|GenericUDFFromUtcTimestamp
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|desc
operator|.
name|getExprString
argument_list|()
argument_list|,
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|desc
argument_list|)
argument_list|)
operator|.
name|getExprString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetDbTableName
parameter_list|()
throws|throws
name|HiveException
block|{
name|String
name|tablename
decl_stmt|;
name|String
index|[]
name|dbtab
decl_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|curDefaultdb
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
decl_stmt|;
comment|//test table without db portion
name|tablename
operator|=
literal|"tab1"
expr_stmt|;
name|dbtab
operator|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|tablename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"db name"
argument_list|,
name|curDefaultdb
argument_list|,
name|dbtab
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"table name"
argument_list|,
name|tablename
argument_list|,
name|dbtab
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|//test table with db portion
name|tablename
operator|=
literal|"dab1.tab1"
expr_stmt|;
name|dbtab
operator|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|tablename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"db name"
argument_list|,
literal|"dab1"
argument_list|,
name|dbtab
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"table name"
argument_list|,
literal|"tab1"
argument_list|,
name|dbtab
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|//test invalid table name
name|tablename
operator|=
literal|"dab1.tab1.x1"
expr_stmt|;
try|try
block|{
name|dbtab
operator|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|tablename
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception was expected for invalid table name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid table name "
operator|+
name|tablename
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceTaskId
parameter_list|()
block|{
name|String
name|taskID
init|=
literal|"000000"
decl_stmt|;
name|int
name|bucketNum
init|=
literal|1
decl_stmt|;
name|String
name|newTaskID
init|=
name|Utilities
operator|.
name|replaceTaskId
argument_list|(
name|taskID
argument_list|,
name|bucketNum
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"000001"
argument_list|,
name|newTaskID
argument_list|)
expr_stmt|;
name|taskID
operator|=
literal|"(ds%3D1)000001"
expr_stmt|;
name|newTaskID
operator|=
name|Utilities
operator|.
name|replaceTaskId
argument_list|(
name|taskID
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"(ds%3D1)000005"
argument_list|,
name|newTaskID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveTempOrDuplicateFilesOnTezNoDp
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|runRemoveTempOrDuplicateFilesTestCase
argument_list|(
literal|"tez"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveTempOrDuplicateFilesOnTezWithDp
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|runRemoveTempOrDuplicateFilesTestCase
argument_list|(
literal|"tez"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveTempOrDuplicateFilesOnMrNoDp
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|runRemoveTempOrDuplicateFilesTestCase
argument_list|(
literal|"mr"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_BUCKETS
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveTempOrDuplicateFilesOnMrWithDp
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|runRemoveTempOrDuplicateFilesTestCase
argument_list|(
literal|"mr"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_BUCKETS
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|runRemoveTempOrDuplicateFilesTestCase
parameter_list|(
name|String
name|executionEngine
parameter_list|,
name|boolean
name|dPEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|hconf
init|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// do this to verify that Utilities.removeTempOrDuplicateFiles does not revert to default scheme information
name|hconf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"hdfs://should-not-be-used/"
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
operator|.
name|varname
argument_list|,
name|executionEngine
argument_list|)
expr_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
name|DynamicPartitionCtx
name|dpCtx
init|=
name|getDynamicPartitionCtx
argument_list|(
name|dPEnabled
argument_list|)
decl_stmt|;
name|Path
name|tempDirPath
init|=
name|setupTempDirWithSingleOutputFile
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
name|FileSinkDesc
name|conf
init|=
name|getFileSinkDesc
argument_list|(
name|tempDirPath
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|Utilities
operator|.
name|removeTempOrDuplicateFiles
argument_list|(
name|localFs
argument_list|,
name|tempDirPath
argument_list|,
name|dpCtx
argument_list|,
name|conf
argument_list|,
name|hconf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|expectedScheme
init|=
name|tempDirPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|expectedAuthority
init|=
name|tempDirPath
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|assertPathsMatchSchemeAndAuthority
argument_list|(
name|expectedScheme
argument_list|,
name|expectedAuthority
argument_list|,
name|paths
argument_list|)
expr_stmt|;
return|return
name|paths
return|;
block|}
specifier|private
name|void
name|assertPathsMatchSchemeAndAuthority
parameter_list|(
name|String
name|expectedScheme
parameter_list|,
name|String
name|expectedAuthority
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|assertEquals
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|expectedScheme
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|expectedAuthority
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DynamicPartitionCtx
name|getDynamicPartitionCtx
parameter_list|(
name|boolean
name|dPEnabled
parameter_list|)
block|{
name|DynamicPartitionCtx
name|dpCtx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dPEnabled
condition|)
block|{
name|dpCtx
operator|=
name|mock
argument_list|(
name|DynamicPartitionCtx
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dpCtx
operator|.
name|getNumDPCols
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dpCtx
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NUM_BUCKETS
argument_list|)
expr_stmt|;
block|}
return|return
name|dpCtx
return|;
block|}
specifier|private
name|FileSinkDesc
name|getFileSinkDesc
parameter_list|(
name|Path
name|tempDirPath
parameter_list|)
block|{
name|Table
name|table
init|=
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|table
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NUM_BUCKETS
argument_list|)
expr_stmt|;
name|FileSinkDesc
name|conf
init|=
operator|new
name|FileSinkDesc
argument_list|(
name|tempDirPath
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
specifier|private
name|Path
name|setupTempDirWithSingleOutputFile
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tempDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"file://"
operator|+
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|taskOutputPath
init|=
operator|new
name|Path
argument_list|(
name|tempDirPath
argument_list|,
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|hconf
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|hconf
argument_list|)
operator|.
name|create
argument_list|(
name|taskOutputPath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tempDirPath
return|;
block|}
comment|/**    * Check that calling {@link Utilities#getInputPaths(JobConf, MapWork, Path, Context, boolean)}    * can process two different tables that both have empty partitions.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetInputPathsWithEmptyPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|alias1Name
init|=
literal|"alias1"
decl_stmt|;
name|String
name|alias2Name
init|=
literal|"alias2"
decl_stmt|;
name|MapWork
name|mapWork1
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|MapWork
name|mapWork2
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|nonExistentPath1
init|=
operator|new
name|Path
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|nonExistentPath2
init|=
operator|new
name|Path
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|PartitionDesc
name|mockPartitionDesc
init|=
name|mock
argument_list|(
name|PartitionDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|TableDesc
name|mockTableDesc
init|=
name|mock
argument_list|(
name|TableDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTableDesc
operator|.
name|isNonNative
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockPartitionDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockPartitionDesc
operator|.
name|getTableDesc
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTableDesc
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|HiveSequenceFileOutputFormat
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|mockPartitionDesc
argument_list|)
operator|.
name|getOutputFileFormatClass
argument_list|()
expr_stmt|;
name|mapWork1
operator|.
name|setPathToAliases
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nonExistentPath1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|alias1Name
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork1
operator|.
name|setAliasToWork
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|alias1Name
argument_list|,
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|mock
argument_list|(
name|Operator
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork1
operator|.
name|setPathToPartitionInfo
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nonExistentPath1
argument_list|,
name|mockPartitionDesc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork2
operator|.
name|setPathToAliases
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nonExistentPath2
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|alias2Name
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork2
operator|.
name|setAliasToWork
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|alias2Name
argument_list|,
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|mock
argument_list|(
name|Operator
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork2
operator|.
name|setPathToPartitionInfo
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nonExistentPath2
argument_list|,
name|mockPartitionDesc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|scratchDir
init|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|jobConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths1
init|=
name|Utilities
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|,
name|mapWork1
argument_list|,
name|scratchDir
argument_list|,
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|inputPaths
operator|.
name|addAll
argument_list|(
name|inputPaths1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputPaths1
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|inputPaths1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nonExistentPath1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inputPaths1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|inputPaths1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nonExistentPath1
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|nonExistentPath1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths2
init|=
name|Utilities
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|,
name|mapWork2
argument_list|,
name|scratchDir
argument_list|,
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|inputPaths
operator|.
name|addAll
argument_list|(
name|inputPaths2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputPaths2
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|inputPaths2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nonExistentPath2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inputPaths2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|inputPaths2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nonExistentPath2
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|nonExistentPath2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|File
name|file
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|inputPaths
control|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Check that calling {@link Utilities#getInputPaths(JobConf, MapWork, Path, Context, boolean)}    * can process two different tables that both have empty partitions when using multiple threads.    * Some extra logic is placed at the end of the test to validate no race conditions put the    * {@link MapWork} object in an invalid state.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetInputPathsWithMultipleThreadsAndEmptyPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPartitions
init|=
literal|15
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|Path
name|testTablePath
init|=
operator|new
name|Path
argument_list|(
literal|"testTable"
argument_list|)
decl_stmt|;
name|Path
index|[]
name|testPartitionsPaths
init|=
operator|new
name|Path
index|[
name|numPartitions
index|]
decl_stmt|;
name|PartitionDesc
name|mockPartitionDesc
init|=
name|mock
argument_list|(
name|PartitionDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|TableDesc
name|mockTableDesc
init|=
name|mock
argument_list|(
name|TableDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTableDesc
operator|.
name|isNonNative
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockPartitionDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockPartitionDesc
operator|.
name|getTableDesc
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTableDesc
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|HiveSequenceFileOutputFormat
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|mockPartitionDesc
argument_list|)
operator|.
name|getOutputFileFormatClass
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPartitions
condition|;
name|i
operator|++
control|)
block|{
name|String
name|testPartitionName
init|=
literal|"p="
operator|+
name|i
decl_stmt|;
name|testPartitionsPaths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|testTablePath
argument_list|,
literal|"p="
operator|+
name|i
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|getPathToAliases
argument_list|()
operator|.
name|put
argument_list|(
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|testPartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|put
argument_list|(
name|testPartitionName
argument_list|,
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|mock
argument_list|(
name|Operator
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|getPathToPartitionInfo
argument_list|()
operator|.
name|put
argument_list|(
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|,
name|mockPartitionDesc
argument_list|)
expr_stmt|;
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testTablePath
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths
init|=
name|Utilities
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|,
name|mapWork
argument_list|,
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|jobConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|)
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|inputPaths
operator|.
name|size
argument_list|()
argument_list|,
name|numPartitions
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPartitions
condition|;
name|i
operator|++
control|)
block|{
name|assertNotEquals
argument_list|(
name|inputPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mapWork
operator|.
name|getPathToAliases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|numPartitions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapWork
operator|.
name|getPathToPartitionInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|numPartitions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|numPartitions
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|mapWork
operator|.
name|getPathToAliases
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getFileSystem
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testTablePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testTablePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check that calling {@link Utilities#getMaxExecutorsForInputListing(Configuration, int)}    * returns the maximum number of executors to use based on the number of input locations.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetMaxExecutorsForInputListing
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|ZERO_EXECUTORS
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|ONE_EXECUTOR
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|TWO_EXECUTORS
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|ZERO_THREADS
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|ONE_THREAD
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|TWO_THREADS
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|ZERO_LOCATIONS
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|ONE_LOCATION
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|TWO_LOCATIONS
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|THREE_LOCATIONS
init|=
literal|3
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
name|ONE_THREAD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ZERO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ONE_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|TWO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|THREE_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
name|TWO_THREADS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ZERO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ONE_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|TWO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|THREE_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * The following tests will verify the deprecation variable is still usable.      */
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
name|ZERO_THREADS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
argument_list|,
name|ZERO_THREADS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ZERO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ONE_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|TWO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|THREE_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
name|ZERO_THREADS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
argument_list|,
name|ONE_THREAD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ZERO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ONE_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|TWO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|THREE_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
name|ZERO_THREADS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
argument_list|,
name|TWO_THREADS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ZERO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ONE_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|TWO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|THREE_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that HIVE_EXEC_INPUT_LISTING_MAX_THREADS has priority overr DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
name|TWO_THREADS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
argument_list|,
name|ONE_THREAD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ZERO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_EXECUTOR
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|ONE_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|TWO_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWO_EXECUTORS
argument_list|,
name|Utilities
operator|.
name|getMaxExecutorsForInputListing
argument_list|(
name|conf
argument_list|,
name|THREE_LOCATIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for {@link Utilities#getInputPaths(JobConf, MapWork, Path, Context, boolean)} with a single    * threaded.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetInputPathsWithASingleThread
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_PARTITIONS
init|=
literal|5
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|runTestGetInputPaths
argument_list|(
name|jobConf
argument_list|,
name|NUM_PARTITIONS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for {@link Utilities#getInputPaths(JobConf, MapWork, Path, Context, boolean)} with multiple    * threads.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetInputPathsWithMultipleThreads
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_PARTITIONS
init|=
literal|5
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|runTestGetInputPaths
argument_list|(
name|jobConf
argument_list|,
name|NUM_PARTITIONS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runTestGetInputPaths
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|int
name|numOfPartitions
parameter_list|)
throws|throws
name|Exception
block|{
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|Path
name|scratchDir
init|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|jobConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|)
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliasTable
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|testTableName
init|=
literal|"testTable"
decl_stmt|;
name|Path
name|testTablePath
init|=
operator|new
name|Path
argument_list|(
name|testTableName
argument_list|)
decl_stmt|;
name|Path
index|[]
name|testPartitionsPaths
init|=
operator|new
name|Path
index|[
name|numOfPartitions
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfPartitions
condition|;
name|i
operator|++
control|)
block|{
name|String
name|testPartitionName
init|=
literal|"p="
operator|+
name|i
decl_stmt|;
name|testPartitionsPaths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|testTablePath
argument_list|,
literal|"p="
operator|+
name|i
argument_list|)
expr_stmt|;
name|pathToAliasTable
operator|.
name|put
argument_list|(
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|testPartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|put
argument_list|(
name|testPartitionName
argument_list|,
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|mock
argument_list|(
name|Operator
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mapWork
operator|.
name|setPathToAliases
argument_list|(
name|pathToAliasTable
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testTablePath
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfPartitions
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|,
literal|"test1.txt"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths
init|=
name|Utilities
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|,
name|mapWork
argument_list|,
name|scratchDir
argument_list|,
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|inputPaths
operator|.
name|size
argument_list|()
argument_list|,
name|numOfPartitions
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfPartitions
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|inputPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testTablePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testTablePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryPool
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|ExecutorService
name|pool
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Future
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|pathNeedProcess
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path1"
argument_list|)
argument_list|)
expr_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path2"
argument_list|)
argument_list|)
expr_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path3"
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|Utilities
operator|.
name|getInputSummaryWithPool
argument_list|(
name|context
argument_list|,
name|pathNeedProcess
argument_list|,
name|mock
argument_list|(
name|MapWork
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|long
index|[
literal|3
index|]
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryPoolAndFailure
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|ExecutorService
name|pool
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Future
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|pathNeedProcess
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path1"
argument_list|)
argument_list|)
expr_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path2"
argument_list|)
argument_list|)
expr_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path3"
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|Utilities
operator|.
name|getInputSummaryWithPool
argument_list|(
name|context
argument_list|,
name|pathNeedProcess
argument_list|,
name|mock
argument_list|(
name|MapWork
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|long
index|[
literal|3
index|]
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputPathsPool
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|pathsToAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"dummy-path"
argument_list|)
decl_stmt|;
name|pathsToAdd
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|pathsToAdd
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|pathsToAdd
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|ExecutorService
name|pool
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Future
name|mockFuture
init|=
name|mock
argument_list|(
name|Future
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFuture
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockFuture
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|getInputPathsWithPool
argument_list|(
name|mock
argument_list|(
name|JobConf
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|MapWork
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|,
name|pathsToAdd
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputPathsPoolAndFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|pathsToAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"dummy-path"
argument_list|)
decl_stmt|;
name|pathsToAdd
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|pathsToAdd
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|pathsToAdd
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|ExecutorService
name|pool
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Future
name|mockFuture
init|=
name|mock
argument_list|(
name|Future
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFuture
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockFuture
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Utilities
operator|.
name|getInputPathsWithPool
argument_list|(
name|mock
argument_list|(
name|JobConf
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|MapWork
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|,
name|pathsToAdd
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|thrownException
parameter_list|)
block|{
name|e
operator|=
name|thrownException
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryWithASingleThread
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|NUM_PARTITIONS
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|5
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|NUM_PARTITIONS
argument_list|,
name|BYTES_PER_FILE
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryWithMultipleThreads
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|NUM_PARTITIONS
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|5
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|NUM_PARTITIONS
argument_list|,
name|BYTES_PER_FILE
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test deprecated mapred.dfsclient.parallelism.max
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|Utilities
operator|.
name|DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|summary
operator|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|NUM_PARTITIONS
argument_list|,
name|BYTES_PER_FILE
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryWithInputEstimator
parameter_list|()
throws|throws
name|IOException
throws|,
name|HiveException
block|{
specifier|final
name|int
name|NUM_PARTITIONS
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|NUM_OF_ROWS
init|=
literal|5
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|Utilities
operator|.
name|DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|,
name|InputEstimatorTestClass
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|InputEstimatorTestClass
operator|.
name|setEstimation
argument_list|(
operator|new
name|InputEstimator
operator|.
name|Estimation
argument_list|(
name|NUM_OF_ROWS
argument_list|,
name|BYTES_PER_FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Let's write more bytes to the files to test that Estimator is actually working returning the file size not from the filesystem */
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|NUM_PARTITIONS
argument_list|,
name|BYTES_PER_FILE
operator|*
literal|2
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
operator|-
literal|1
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current getInputSummary() returns -1 for each file found
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
operator|-
literal|1
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current getInputSummary() returns -1 for each file found
comment|// Test deprecated mapred.dfsclient.parallelism.max
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|,
name|InputEstimatorTestClass
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|InputEstimatorTestClass
operator|.
name|setEstimation
argument_list|(
operator|new
name|InputEstimator
operator|.
name|Estimation
argument_list|(
name|NUM_OF_ROWS
argument_list|,
name|BYTES_PER_FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Let's write more bytes to the files to test that Estimator is actually working returning the file size not from the filesystem */
name|summary
operator|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|NUM_PARTITIONS
argument_list|,
name|BYTES_PER_FILE
operator|*
literal|2
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
operator|-
literal|1
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current getInputSummary() returns -1 for each file found
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
operator|-
literal|1
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current getInputSummary() returns -1 for each file found
block|}
specifier|static
class|class
name|ContentSummaryInputFormatTestClass
extends|extends
name|FileInputFormat
implements|implements
name|ContentSummaryInputFormat
block|{
specifier|private
specifier|static
name|ContentSummary
name|summary
init|=
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|setContentSummary
parameter_list|(
name|ContentSummary
name|contentSummary
parameter_list|)
block|{
name|summary
operator|=
name|contentSummary
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|getRecordReader
parameter_list|(
name|InputSplit
name|inputSplit
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|Path
name|p
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|summary
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryWithContentSummaryInputFormat
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|NUM_PARTITIONS
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|10
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|Utilities
operator|.
name|DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ContentSummaryInputFormatTestClass
operator|.
name|setContentSummary
argument_list|(
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|length
argument_list|(
name|BYTES_PER_FILE
argument_list|)
operator|.
name|fileCount
argument_list|(
literal|2
argument_list|)
operator|.
name|directoryCount
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Let's write more bytes to the files to test that ContentSummaryInputFormat is actually working returning the file size not from the filesystem */
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|NUM_PARTITIONS
argument_list|,
name|BYTES_PER_FILE
operator|*
literal|2
argument_list|,
name|ContentSummaryInputFormatTestClass
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
operator|*
literal|2
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_PARTITIONS
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ContentSummary
name|runTestGetInputSummary
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|int
name|numOfPartitions
parameter_list|,
name|int
name|bytesPerFile
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
throws|throws
name|IOException
block|{
comment|// creates scratch directories needed by the Context object
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|pathToPartitionInfo
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliasTable
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TableScanOperator
name|scanOp
init|=
operator|new
name|TableScanOperator
argument_list|()
decl_stmt|;
name|PartitionDesc
name|partitionDesc
init|=
operator|new
name|PartitionDesc
argument_list|(
operator|new
name|TableDesc
argument_list|(
name|inputFormatClass
argument_list|,
literal|null
argument_list|,
name|properties
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|testTableName
init|=
literal|"testTable"
decl_stmt|;
name|Path
name|testTablePath
init|=
operator|new
name|Path
argument_list|(
name|testTableName
argument_list|)
decl_stmt|;
name|Path
index|[]
name|testPartitionsPaths
init|=
operator|new
name|Path
index|[
name|numOfPartitions
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfPartitions
condition|;
name|i
operator|++
control|)
block|{
name|String
name|testPartitionName
init|=
literal|"p="
operator|+
literal|1
decl_stmt|;
name|testPartitionsPaths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|testTablePath
argument_list|,
literal|"p="
operator|+
name|i
argument_list|)
expr_stmt|;
name|pathToPartitionInfo
operator|.
name|put
argument_list|(
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|,
name|partitionDesc
argument_list|)
expr_stmt|;
name|pathToAliasTable
operator|.
name|put
argument_list|(
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|testPartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|put
argument_list|(
name|testPartitionName
argument_list|,
name|scanOp
argument_list|)
expr_stmt|;
block|}
name|mapWork
operator|.
name|setPathToAliases
argument_list|(
name|pathToAliasTable
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setPathToPartitionInfo
argument_list|(
name|pathToPartitionInfo
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testTablePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|bytesPerFile
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfPartitions
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|testPartitionsPaths
index|[
name|i
index|]
argument_list|,
literal|"test1.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|Utilities
operator|.
name|getInputSummary
argument_list|(
name|context
argument_list|,
name|mapWork
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testTablePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testTablePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|getDependencyCollectionTask
parameter_list|()
block|{
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DependencyCollectionWork
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Generates a task graph that looks like this:    *    *       ---->DTa----    *      /            \    * root ----->DTb-----*-->DTd---> ProvidedTask --> DTe    *      \            /    *       ---->DTc----    */
specifier|private
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getTestDiamondTaskGraph
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|providedTask
parameter_list|)
block|{
comment|// Note: never instantiate a task without TaskFactory.get() if you're not
comment|// okay with .equals() breaking. Doing it via TaskFactory.get makes sure
comment|// that an id is generated, and two tasks of the same type don't show
comment|// up as "equal", which is important for things like iterating over an
comment|// array. Without this, DTa, DTb, and DTc would show up as one item in
comment|// the list of children. Thus, we're instantiating via a helper method
comment|// that instantiates via TaskFactory.get()
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|root
init|=
name|getDependencyCollectionTask
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|DTa
init|=
name|getDependencyCollectionTask
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|DTb
init|=
name|getDependencyCollectionTask
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|DTc
init|=
name|getDependencyCollectionTask
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|DTd
init|=
name|getDependencyCollectionTask
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|DTe
init|=
name|getDependencyCollectionTask
argument_list|()
decl_stmt|;
name|root
operator|.
name|addDependentTask
argument_list|(
name|DTa
argument_list|)
expr_stmt|;
name|root
operator|.
name|addDependentTask
argument_list|(
name|DTb
argument_list|)
expr_stmt|;
name|root
operator|.
name|addDependentTask
argument_list|(
name|DTc
argument_list|)
expr_stmt|;
name|DTa
operator|.
name|addDependentTask
argument_list|(
name|DTd
argument_list|)
expr_stmt|;
name|DTb
operator|.
name|addDependentTask
argument_list|(
name|DTd
argument_list|)
expr_stmt|;
name|DTc
operator|.
name|addDependentTask
argument_list|(
name|DTd
argument_list|)
expr_stmt|;
name|DTd
operator|.
name|addDependentTask
argument_list|(
name|providedTask
argument_list|)
expr_stmt|;
name|providedTask
operator|.
name|addDependentTask
argument_list|(
name|DTe
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|retVals
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|retVals
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
name|retVals
return|;
block|}
comment|/**    * DependencyCollectionTask that counts how often getDependentTasks on it    * (and thus, on its descendants) is called counted via Task.getDependentTasks.    * It is used to wrap another task to intercept calls on it.    */
specifier|public
class|class
name|CountingWrappingTask
extends|extends
name|DependencyCollectionTask
block|{
name|int
name|count
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|wrappedDep
init|=
literal|null
decl_stmt|;
specifier|public
name|CountingWrappingTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|dep
parameter_list|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|wrappedDep
operator|=
name|dep
expr_stmt|;
name|super
operator|.
name|addDependentTask
argument_list|(
name|wrappedDep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|addDependentTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|dependent
parameter_list|)
block|{
return|return
name|wrappedDep
operator|.
name|addDependentTask
argument_list|(
name|dependent
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getDependentTasks
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"YAH:getDepTasks got called!"
argument_list|)
expr_stmt|;
operator|(
operator|new
name|Exception
argument_list|()
operator|)
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"YAH!getDepTasks"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getDependentTasks
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDepCallCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"COUNTER_TASK"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|wrappedDep
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|/**    * This test tests that Utilities.get*Tasks do not repeat themselves in the process    * of extracting tasks from a given set of root tasks when given DAGs that can have    * multiple paths, such as the case with Diamond-shaped DAGs common to replication.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetTasksHaveNoRepeats
parameter_list|()
block|{
name|CountingWrappingTask
name|mrTask
init|=
operator|new
name|CountingWrappingTask
argument_list|(
operator|new
name|ExecDriver
argument_list|()
argument_list|)
decl_stmt|;
name|CountingWrappingTask
name|tezTask
init|=
operator|new
name|CountingWrappingTask
argument_list|(
operator|new
name|TezTask
argument_list|()
argument_list|)
decl_stmt|;
name|CountingWrappingTask
name|sparkTask
init|=
operator|new
name|CountingWrappingTask
argument_list|(
operator|new
name|SparkTask
argument_list|()
argument_list|)
decl_stmt|;
comment|// First check - we should not have repeats in results
name|assertEquals
argument_list|(
literal|"No repeated MRTasks from Utilities.getMRTasks"
argument_list|,
literal|1
argument_list|,
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|getTestDiamondTaskGraph
argument_list|(
name|mrTask
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No repeated TezTasks from Utilities.getTezTasks"
argument_list|,
literal|1
argument_list|,
name|Utilities
operator|.
name|getTezTasks
argument_list|(
name|getTestDiamondTaskGraph
argument_list|(
name|tezTask
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No repeated TezTasks from Utilities.getSparkTasks"
argument_list|,
literal|1
argument_list|,
name|Utilities
operator|.
name|getSparkTasks
argument_list|(
name|getTestDiamondTaskGraph
argument_list|(
name|sparkTask
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Second check - the tasks we looked for must not have been accessed more than
comment|// once as a result of the traversal (note that we actually wind up accessing
comment|// 2 times , because each visit counts twice, once to check for existence, and
comment|// once to visit.
name|assertEquals
argument_list|(
literal|"MRTasks should have been visited only once"
argument_list|,
literal|2
argument_list|,
name|mrTask
operator|.
name|getDepCallCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TezTasks should have been visited only once"
argument_list|,
literal|2
argument_list|,
name|tezTask
operator|.
name|getDepCallCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SparkTasks should have been visited only once"
argument_list|,
literal|2
argument_list|,
name|sparkTask
operator|.
name|getDepCallCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Task
argument_list|<
name|MapredWork
argument_list|>
name|getMapredWork
parameter_list|()
block|{
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|MapredWork
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testGetTasksRecursion
parameter_list|()
block|{
name|Task
argument_list|<
name|MapredWork
argument_list|>
name|rootTask
init|=
name|getMapredWork
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|MapredWork
argument_list|>
name|child1
init|=
name|getMapredWork
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|MapredWork
argument_list|>
name|child2
init|=
name|getMapredWork
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|MapredWork
argument_list|>
name|child11
init|=
name|getMapredWork
argument_list|()
decl_stmt|;
name|rootTask
operator|.
name|addDependentTask
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|rootTask
operator|.
name|addDependentTask
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|child1
operator|.
name|addDependentTask
argument_list|(
name|child11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|rootTask
argument_list|,
name|child1
argument_list|,
name|child2
argument_list|,
name|child11
argument_list|)
argument_list|,
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|getTestDiamondTaskGraph
argument_list|(
name|rootTask
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

