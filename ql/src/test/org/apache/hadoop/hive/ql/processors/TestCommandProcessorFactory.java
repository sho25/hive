begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestCommandProcessorFactory
block|{
specifier|private
specifier|final
name|String
index|[]
name|testOnlyCommands
init|=
operator|new
name|String
index|[]
block|{
literal|"crypto"
block|,
literal|"erasure"
block|}
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Null should have returned null"
argument_list|,
name|CommandProcessorFactory
operator|.
name|getForHiveCommand
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Blank should have returned null"
argument_list|,
name|CommandProcessorFactory
operator|.
name|getForHiveCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|" "
block|}
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Set role should have returned null"
argument_list|,
name|CommandProcessorFactory
operator|.
name|getForHiveCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"set role"
block|}
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Set role should have returned null"
argument_list|,
name|CommandProcessorFactory
operator|.
name|getForHiveCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"set"
block|,
literal|"role"
block|}
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"SQL should have returned null"
argument_list|,
name|CommandProcessorFactory
operator|.
name|getForHiveCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"SELECT * FROM TABLE"
block|}
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Test only command should have returned null"
argument_list|,
name|CommandProcessorFactory
operator|.
name|getForHiveCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"CRYPTO --listZones"
block|}
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvailableCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|enableTestOnlyCmd
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveCommand
name|command
range|:
name|HiveCommand
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|cmd
index|[]
init|=
name|command
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Cmd "
operator|+
name|cmd
index|[
literal|0
index|]
operator|+
literal|" not return null"
argument_list|,
name|CommandProcessorFactory
operator|.
name|getForHiveCommandInternal
argument_list|(
name|cmd
argument_list|,
name|conf
argument_list|,
name|command
operator|.
name|isOnlyForTesting
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Cmd "
operator|+
name|cmd
operator|+
literal|" not return null"
argument_list|,
name|CommandProcessorFactory
operator|.
name|getForHiveCommandInternal
argument_list|(
name|cmd
argument_list|,
name|conf
argument_list|,
name|command
operator|.
name|isOnlyForTesting
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SECURITY_COMMAND_WHITELIST
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveCommand
name|command
range|:
name|HiveCommand
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|cmd
index|[]
init|=
name|command
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
try|try
block|{
name|CommandProcessorFactory
operator|.
name|getForHiveCommandInternal
argument_list|(
name|cmd
argument_list|,
name|conf
argument_list|,
name|command
operator|.
name|isOnlyForTesting
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected SQLException for "
operator|+
name|cmd
index|[
literal|0
index|]
operator|+
literal|" as available commands is empty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Insufficient privileges to execute "
operator|+
name|cmd
index|[
literal|0
index|]
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"42000"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|enableTestOnlyCmd
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|StringBuilder
name|securityCMDs
init|=
operator|new
name|StringBuilder
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SECURITY_COMMAND_WHITELIST
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|testOnlyCommands
control|)
block|{
name|securityCMDs
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|securityCMDs
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SECURITY_COMMAND_WHITELIST
operator|.
name|toString
argument_list|()
argument_list|,
name|securityCMDs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

