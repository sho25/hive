begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ObjectArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|RecordConsumer
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|schema
operator|.
name|MessageType
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|schema
operator|.
name|Types
import|;
end_import

begin_import
import|import static
name|parquet
operator|.
name|schema
operator|.
name|OriginalType
operator|.
name|LIST
import|;
end_import

begin_import
import|import static
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
operator|.
name|PrimitiveTypeName
operator|.
name|DOUBLE
import|;
end_import

begin_import
import|import static
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
operator|.
name|PrimitiveTypeName
operator|.
name|FLOAT
import|;
end_import

begin_import
import|import static
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
operator|.
name|PrimitiveTypeName
operator|.
name|INT32
import|;
end_import

begin_import
import|import static
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
operator|.
name|PrimitiveTypeName
operator|.
name|INT64
import|;
end_import

begin_class
specifier|public
class|class
name|TestArrayCompatibility
extends|extends
name|AbstractTestParquetDirect
block|{
annotation|@
name|Test
specifier|public
name|void
name|testUnannotatedListOfPrimitives
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageType
name|fileSchema
init|=
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|repeated
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"list_of_ints"
argument_list|)
operator|.
name|named
argument_list|(
literal|"UnannotatedListOfPrimitives"
argument_list|)
decl_stmt|;
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"UnannotatedListOfPrimitives"
argument_list|,
name|fileSchema
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list_of_ints"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|36
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"list_of_ints"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|list
argument_list|(
operator|new
name|Integer
argument_list|(
literal|34
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|35
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|36
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnannotatedListOfGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"UnannotatedListOfGroups"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|required
argument_list|(
name|FLOAT
argument_list|)
operator|.
name|named
argument_list|(
literal|"x"
argument_list|)
operator|.
name|required
argument_list|(
name|FLOAT
argument_list|)
operator|.
name|named
argument_list|(
literal|"y"
argument_list|)
operator|.
name|named
argument_list|(
literal|"list_of_points"
argument_list|)
operator|.
name|named
argument_list|(
literal|"UnannotatedListOfGroups"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list_of_points"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addFloat
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addFloat
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addFloat
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addFloat
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"list_of_points"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Float
argument_list|(
literal|1.0f
argument_list|)
argument_list|,
operator|new
name|Float
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Float
argument_list|(
literal|2.0f
argument_list|)
argument_list|,
operator|new
name|Float
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThriftPrimitiveInList
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"ThriftPrimitiveInList"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|requiredGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeated
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"list_of_ints_tuple"
argument_list|)
operator|.
name|named
argument_list|(
literal|"list_of_ints"
argument_list|)
operator|.
name|named
argument_list|(
literal|"ThriftPrimitiveInList"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list_of_ints"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list_of_ints_tuple"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|36
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"list_of_ints_tuple"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"list_of_ints"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
operator|new
name|Integer
argument_list|(
literal|34
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|35
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|36
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThriftSingleFieldGroupInList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this tests the case where older data has an ambiguous structure, but the
comment|// correct interpretation can be determined from the repeated name
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"ThriftSingleFieldGroupInList"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|required
argument_list|(
name|INT64
argument_list|)
operator|.
name|named
argument_list|(
literal|"count"
argument_list|)
operator|.
name|named
argument_list|(
literal|"single_element_groups_tuple"
argument_list|)
operator|.
name|named
argument_list|(
literal|"single_element_groups"
argument_list|)
operator|.
name|named
argument_list|(
literal|"ThriftSingleFieldGroupInList"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"single_element_groups"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"single_element_groups_tuple"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// start writing array contents
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addLong
argument_list|(
literal|1234L
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addLong
argument_list|(
literal|2345L
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"single_element_groups_tuple"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// finished writing array contents
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"single_element_groups"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Long
argument_list|(
literal|1234L
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Long
argument_list|(
literal|2345L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvroPrimitiveInList
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"AvroPrimitiveInList"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|requiredGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeated
argument_list|(
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"array"
argument_list|)
operator|.
name|named
argument_list|(
literal|"list_of_ints"
argument_list|)
operator|.
name|named
argument_list|(
literal|"AvroPrimitiveInList"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list_of_ints"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"array"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addInteger
argument_list|(
literal|36
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"array"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"list_of_ints"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
operator|new
name|Integer
argument_list|(
literal|34
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|35
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|36
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvroSingleFieldGroupInList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this tests the case where older data has an ambiguous structure, but the
comment|// correct interpretation can be determined from the repeated name, "array"
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"AvroSingleFieldGroupInList"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|required
argument_list|(
name|INT64
argument_list|)
operator|.
name|named
argument_list|(
literal|"count"
argument_list|)
operator|.
name|named
argument_list|(
literal|"array"
argument_list|)
operator|.
name|named
argument_list|(
literal|"single_element_groups"
argument_list|)
operator|.
name|named
argument_list|(
literal|"AvroSingleFieldGroupInList"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"single_element_groups"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"array"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// start writing array contents
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addLong
argument_list|(
literal|1234L
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addLong
argument_list|(
literal|2345L
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"array"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// finished writing array contents
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"single_element_groups"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Long
argument_list|(
literal|1234L
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Long
argument_list|(
literal|2345L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAmbiguousSingleFieldGroupInList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this tests the case where older data has an ambiguous list and is not
comment|// named indicating that the source considered the group significant
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"SingleFieldGroupInList"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|required
argument_list|(
name|INT64
argument_list|)
operator|.
name|named
argument_list|(
literal|"count"
argument_list|)
operator|.
name|named
argument_list|(
literal|"single_element_group"
argument_list|)
operator|.
name|named
argument_list|(
literal|"single_element_groups"
argument_list|)
operator|.
name|named
argument_list|(
literal|"SingleFieldGroupInList"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"single_element_groups"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"single_element_group"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// start writing array contents
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addLong
argument_list|(
literal|1234L
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addLong
argument_list|(
literal|2345L
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"count"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"single_element_group"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// finished writing array contents
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"single_element_groups"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
operator|new
name|Long
argument_list|(
literal|1234L
argument_list|)
argument_list|,
operator|new
name|Long
argument_list|(
literal|2345L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiFieldGroupInList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// tests the missing element layer, detected by a multi-field group
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"MultiFieldGroupInList"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|required
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"latitude"
argument_list|)
operator|.
name|required
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"longitude"
argument_list|)
operator|.
name|named
argument_list|(
literal|"element"
argument_list|)
comment|// should not affect schema conversion
operator|.
name|named
argument_list|(
literal|"locations"
argument_list|)
operator|.
name|named
argument_list|(
literal|"MultiFieldGroupInList"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"locations"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|180.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"locations"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|,
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|,
operator|new
name|Double
argument_list|(
literal|180.0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewOptionalGroupInList
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"NewOptionalGroupInList"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|required
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"latitude"
argument_list|)
operator|.
name|required
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"longitude"
argument_list|)
operator|.
name|named
argument_list|(
literal|"element"
argument_list|)
operator|.
name|named
argument_list|(
literal|"list"
argument_list|)
operator|.
name|named
argument_list|(
literal|"locations"
argument_list|)
operator|.
name|named
argument_list|(
literal|"NewOptionalGroupInList"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"locations"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// start writing array contents
comment|// write a non-null element
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// array level
comment|// write a null element (element field is omitted)
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// array level
comment|// write a second non-null element
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|180.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|endField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// finished writing array contents
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"locations"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|,
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|record
argument_list|(
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|,
operator|new
name|Double
argument_list|(
literal|180.0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewRequiredGroupInList
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"NewRequiredGroupInList"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|requiredGroup
argument_list|()
operator|.
name|required
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"latitude"
argument_list|)
operator|.
name|required
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"longitude"
argument_list|)
operator|.
name|named
argument_list|(
literal|"element"
argument_list|)
operator|.
name|named
argument_list|(
literal|"list"
argument_list|)
operator|.
name|named
argument_list|(
literal|"locations"
argument_list|)
operator|.
name|named
argument_list|(
literal|"NewRequiredGroupInList"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"locations"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// start writing array contents
comment|// write a non-null element
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|180.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// array level
comment|// write a second non-null element
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|endField
argument_list|(
literal|"list"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// finished writing array contents
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"locations"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|,
operator|new
name|Double
argument_list|(
literal|180.0
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|,
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveRequiredGroupInList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this matches the list structure that Hive writes
name|Path
name|test
init|=
name|writeDirect
argument_list|(
literal|"HiveRequiredGroupInList"
argument_list|,
name|Types
operator|.
name|buildMessage
argument_list|()
operator|.
name|optionalGroup
argument_list|()
operator|.
name|as
argument_list|(
name|LIST
argument_list|)
operator|.
name|repeatedGroup
argument_list|()
operator|.
name|requiredGroup
argument_list|()
operator|.
name|required
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"latitude"
argument_list|)
operator|.
name|required
argument_list|(
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"longitude"
argument_list|)
operator|.
name|named
argument_list|(
literal|"element"
argument_list|)
operator|.
name|named
argument_list|(
literal|"bag"
argument_list|)
operator|.
name|named
argument_list|(
literal|"locations"
argument_list|)
operator|.
name|named
argument_list|(
literal|"HiveRequiredGroupInList"
argument_list|)
argument_list|,
operator|new
name|DirectWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|RecordConsumer
name|rc
parameter_list|)
block|{
name|rc
operator|.
name|startMessage
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"locations"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"bag"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// start writing array contents
comment|// write a non-null element
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|180.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// array level
comment|// write a second non-null element
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"latitude"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|startField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|addDouble
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"longitude"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// array level
name|rc
operator|.
name|endField
argument_list|(
literal|"bag"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// finished writing array contents
name|rc
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|rc
operator|.
name|endField
argument_list|(
literal|"locations"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rc
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ObjectArrayWritable
name|expected
init|=
name|record
argument_list|(
name|list
argument_list|(
name|record
argument_list|(
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|,
operator|new
name|Double
argument_list|(
literal|180.0
argument_list|)
argument_list|)
argument_list|,
name|record
argument_list|(
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|,
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectArrayWritable
argument_list|>
name|records
init|=
name|read
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have only one record"
argument_list|,
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match expected record"
argument_list|,
name|expected
argument_list|,
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

