begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|FakeCaptureOutputOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|FakeVectorRowBatchFromConcat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|FakeVectorRowBatchFromLongIterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|FakeVectorRowBatchFromRepeats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for the vectorized GROUP BY operator.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorGroupByOperator
block|{
specifier|private
specifier|static
name|ExprNodeDesc
name|buildColumnDesc
parameter_list|(
name|VectorizationContext
name|ctx
parameter_list|,
name|String
name|column
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|column
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|AggregationDesc
name|buildAggregationDesc
parameter_list|(
name|VectorizationContext
name|ctx
parameter_list|,
name|String
name|aggregate
parameter_list|,
name|String
name|column
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|ExprNodeDesc
name|inputColumn
init|=
name|buildColumnDesc
argument_list|(
name|ctx
argument_list|,
name|column
argument_list|,
name|typeInfo
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|inputColumn
argument_list|)
expr_stmt|;
name|AggregationDesc
name|agg
init|=
operator|new
name|AggregationDesc
argument_list|()
decl_stmt|;
name|agg
operator|.
name|setGenericUDAFName
argument_list|(
name|aggregate
argument_list|)
expr_stmt|;
name|agg
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return
name|agg
return|;
block|}
specifier|private
specifier|static
name|AggregationDesc
name|buildAggregationDescCountStar
parameter_list|(
name|VectorizationContext
name|ctx
parameter_list|)
block|{
name|AggregationDesc
name|agg
init|=
operator|new
name|AggregationDesc
argument_list|()
decl_stmt|;
name|agg
operator|.
name|setGenericUDAFName
argument_list|(
literal|"COUNT"
argument_list|)
expr_stmt|;
name|agg
operator|.
name|setParameters
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|agg
return|;
block|}
specifier|private
specifier|static
name|GroupByDesc
name|buildGroupByDescType
parameter_list|(
name|VectorizationContext
name|ctx
parameter_list|,
name|String
name|aggregate
parameter_list|,
name|String
name|column
parameter_list|,
name|TypeInfo
name|dataType
parameter_list|)
block|{
name|AggregationDesc
name|agg
init|=
name|buildAggregationDesc
argument_list|(
name|ctx
argument_list|,
name|aggregate
argument_list|,
name|column
argument_list|,
name|dataType
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggs
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
decl_stmt|;
name|aggs
operator|.
name|add
argument_list|(
name|agg
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
literal|"_col0"
argument_list|)
expr_stmt|;
name|GroupByDesc
name|desc
init|=
operator|new
name|GroupByDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setOutputColumnNames
argument_list|(
name|outputColumnNames
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setAggregators
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
return|return
name|desc
return|;
block|}
specifier|private
specifier|static
name|GroupByDesc
name|buildGroupByDescCountStar
parameter_list|(
name|VectorizationContext
name|ctx
parameter_list|)
block|{
name|AggregationDesc
name|agg
init|=
name|buildAggregationDescCountStar
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggs
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
decl_stmt|;
name|aggs
operator|.
name|add
argument_list|(
name|agg
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
literal|"_col0"
argument_list|)
expr_stmt|;
name|GroupByDesc
name|desc
init|=
operator|new
name|GroupByDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setOutputColumnNames
argument_list|(
name|outputColumnNames
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setAggregators
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
return|return
name|desc
return|;
block|}
specifier|private
specifier|static
name|GroupByDesc
name|buildKeyGroupByDesc
parameter_list|(
name|VectorizationContext
name|ctx
parameter_list|,
name|String
name|aggregate
parameter_list|,
name|String
name|column
parameter_list|,
name|TypeInfo
name|dataTypeInfo
parameter_list|,
name|String
name|key
parameter_list|,
name|TypeInfo
name|keyTypeInfo
parameter_list|)
block|{
name|GroupByDesc
name|desc
init|=
name|buildGroupByDescType
argument_list|(
name|ctx
argument_list|,
name|aggregate
argument_list|,
name|column
argument_list|,
name|dataTypeInfo
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|keyExp
init|=
name|buildColumnDesc
argument_list|(
name|ctx
argument_list|,
name|key
argument_list|,
name|keyTypeInfo
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|keyExp
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
return|return
name|desc
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeSum
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|20.0
argument_list|,
literal|null
argument_list|,
literal|19.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeSumOneKey
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|39.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeCount
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"count"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|2L
argument_list|,
literal|null
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDoubleValueTypeCountOneKey
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"count"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeAvg
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"avg"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|10.0
argument_list|,
literal|null
argument_list|,
literal|19.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeAvgOneKey
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"avg"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|13.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeMin
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"min"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|7.0
argument_list|,
literal|null
argument_list|,
literal|19.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeMinOneKey
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"min"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|7.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeMax
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"max"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|13.0
argument_list|,
literal|null
argument_list|,
literal|19.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeMaxOneKey
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"max"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|19.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeVariance
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"variance"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|9.0
argument_list|,
literal|null
argument_list|,
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleValueTypeVarianceOneKey
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"variance"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"double"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|null
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|24.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTinyintKeyTypeAggregate
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tinyint"
block|,
literal|"bigint"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|20L
argument_list|,
literal|null
argument_list|,
literal|19L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmallintKeyTypeAggregate
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"smallint"
block|,
literal|"bigint"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|20L
argument_list|,
literal|null
argument_list|,
literal|19L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntKeyTypeAggregate
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|,
literal|"bigint"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
literal|20L
argument_list|,
literal|null
argument_list|,
literal|19L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigintKeyTypeAggregate
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bigint"
block|,
literal|"bigint"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|long
operator|)
literal|1L
argument_list|,
literal|20L
argument_list|,
literal|null
argument_list|,
literal|19L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBooleanKeyTypeAggregate
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"boolean"
block|,
literal|"bigint"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|true
block|,
literal|null
block|,
literal|true
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|true
argument_list|,
literal|20L
argument_list|,
literal|null
argument_list|,
literal|19L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampKeyTypeAggregate
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"timestamp"
block|,
literal|"bigint"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|Timestamp
argument_list|(
literal|1
argument_list|)
block|,
literal|null
block|,
operator|new
name|Timestamp
argument_list|(
literal|1
argument_list|)
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|20L
argument_list|,
literal|null
argument_list|,
literal|19L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloatKeyTypeAggregate
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"float"
block|,
literal|"bigint"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|float
operator|)
literal|1.0
argument_list|,
literal|20L
argument_list|,
literal|null
argument_list|,
literal|19L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleKeyTypeAggregate
parameter_list|()
throws|throws
name|HiveException
block|{
name|testKeyTypeAggregate
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"double"
block|,
literal|"bigint"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|1
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
operator|(
name|double
operator|)
literal|1.0
argument_list|,
literal|20L
argument_list|,
literal|null
argument_list|,
literal|19L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountStar
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateCountStar
argument_list|(
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountString
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateString
argument_list|(
literal|"count"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
argument_list|)
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxString
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateString
argument_list|(
literal|"max"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
argument_list|)
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|testAggregateString
argument_list|(
literal|"max"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"C"
block|,
literal|"B"
block|,
literal|"A"
block|}
argument_list|)
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinString
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateString
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|testAggregateString
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"C"
block|,
literal|"B"
block|,
literal|"A"
block|}
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxNullString
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateString
argument_list|(
literal|"max"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|null
block|}
argument_list|)
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|testAggregateString
argument_list|(
literal|"max"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountStringWithNull
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateString
argument_list|(
literal|"count"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"A"
block|,
literal|null
block|,
literal|"C"
block|,
literal|"D"
block|,
literal|null
block|}
argument_list|)
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountStringAllNull
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateString
argument_list|(
literal|"count"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongNullStringKeys
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateStringKeyAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"A"
block|,
literal|null
block|,
literal|"A"
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|"A"
argument_list|,
literal|7L
argument_list|,
literal|null
argument_list|,
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongStringKeys
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateStringKeyAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"A"
block|,
literal|"B"
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|"A"
argument_list|,
literal|7L
argument_list|,
literal|"B"
argument_list|,
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongKeyGroupByCompactBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|01L
block|,
literal|1L
block|,
literal|2L
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|1L
argument_list|,
literal|5L
argument_list|,
literal|2L
argument_list|,
literal|7L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongKeyGroupBySingleBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"min"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|01L
block|,
literal|1L
block|,
literal|2L
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|1L
argument_list|,
literal|5L
argument_list|,
literal|2L
argument_list|,
literal|7L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongKeyGroupByCrossBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|01L
block|,
literal|2L
block|,
literal|1L
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|1L
argument_list|,
literal|7L
argument_list|,
literal|2L
argument_list|,
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongNullKeyGroupByCrossBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|2L
block|,
literal|null
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|null
argument_list|,
literal|7L
argument_list|,
literal|2L
argument_list|,
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongNullKeyGroupBySingleBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"min"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|2L
block|,
literal|null
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|null
argument_list|,
literal|7L
argument_list|,
literal|2L
argument_list|,
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxLongNullKeyGroupBySingleBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"max"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|2L
block|,
literal|null
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|null
argument_list|,
literal|13L
argument_list|,
literal|2L
argument_list|,
literal|19L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountLongNullKeyGroupBySingleBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"count"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|2L
block|,
literal|null
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|null
argument_list|,
literal|2L
argument_list|,
literal|2L
argument_list|,
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLongNullKeyGroupBySingleBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|2L
block|,
literal|null
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|null
argument_list|,
literal|20L
argument_list|,
literal|2L
argument_list|,
literal|24L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvgLongNullKeyGroupBySingleBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"avg"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|2L
block|,
literal|null
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|null
argument_list|,
literal|10.0
argument_list|,
literal|2L
argument_list|,
literal|12.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarLongNullKeyGroupBySingleBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"variance"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|2L
block|,
literal|01L
block|,
literal|02L
block|,
literal|01L
block|,
literal|01L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|18L
block|,
literal|19L
block|,
literal|12L
block|,
literal|15L
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|null
argument_list|,
literal|0.0
argument_list|,
literal|2L
argument_list|,
literal|49.0
argument_list|,
literal|01L
argument_list|,
literal|6.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinNullLongNullKeyGroupBy
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongKeyAggregate
argument_list|(
literal|"min"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|2L
block|,
literal|null
block|,
literal|02L
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|2L
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongGroupBy
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongEmpty
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|7L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"min"
argument_list|,
literal|42L
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongRepeatNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"min"
argument_list|,
literal|null
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongNegative
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
operator|-
literal|19L
block|}
argument_list|)
argument_list|,
operator|-
literal|19L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongMinInt
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
block|,
operator|-
literal|19L
block|}
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinLongMinLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
block|}
argument_list|)
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxLongSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"max"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|19L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxLongEmpty
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"max"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxLongNegative
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"max"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
operator|-
literal|13L
block|,
operator|-
literal|5L
block|,
operator|-
literal|7L
block|,
operator|-
literal|19L
block|}
argument_list|)
argument_list|,
operator|-
literal|5L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxLongMaxInt
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"max"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
block|}
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxLongMaxLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"max"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1L
block|,
name|Long
operator|.
name|MAX_VALUE
block|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
block|}
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxLongRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"max"
argument_list|,
literal|42L
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxLongNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"max"
argument_list|,
literal|null
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testMinLongConcatRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongIterable
argument_list|(
literal|"min"
argument_list|,
operator|new
name|FakeVectorRowBatchFromConcat
argument_list|(
operator|new
name|FakeVectorRowBatchFromRepeats
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|19L
block|}
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|FakeVectorRowBatchFromRepeats
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|7L
block|}
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|FakeVectorRowBatchFromRepeats
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|19L
block|}
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|7L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testMinLongRepeatConcatValues
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongIterable
argument_list|(
literal|"min"
argument_list|,
operator|new
name|FakeVectorRowBatchFromConcat
argument_list|(
operator|new
name|FakeVectorRowBatchFromRepeats
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|19L
block|}
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|FakeVectorRowBatchFromLongIterables
argument_list|(
literal|3
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|7L
block|,
literal|23L
block|,
literal|29L
block|}
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|7L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountLongSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"count"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountLongEmpty
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"count"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountLongNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"count"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|}
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"count"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"count"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"count"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountLongRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"count"
argument_list|,
literal|42L
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|4096L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountLongRepeatNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"count"
argument_list|,
literal|null
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testCountLongRepeatConcatValues
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongIterable
argument_list|(
literal|"count"
argument_list|,
operator|new
name|FakeVectorRowBatchFromConcat
argument_list|(
operator|new
name|FakeVectorRowBatchFromRepeats
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|19L
block|}
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|FakeVectorRowBatchFromLongIterables
argument_list|(
literal|3
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|7L
block|,
literal|23L
block|,
literal|29L
block|}
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|14L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumDoubleSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateDouble
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|5.0
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|,
literal|13.0
operator|+
literal|5.0
operator|+
literal|7.0
operator|+
literal|19.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumDoubleGroupByString
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateDoubleStringKeyAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|4
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"A"
block|,
literal|null
block|,
literal|"A"
block|,
literal|null
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|13.0
block|,
literal|5.0
block|,
literal|7.0
block|,
literal|19.0
block|}
argument_list|)
argument_list|,
name|buildHashMap
argument_list|(
literal|"A"
argument_list|,
literal|20.0
argument_list|,
literal|null
argument_list|,
literal|24.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLongSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|13L
operator|+
literal|5L
operator|+
literal|7L
operator|+
literal|19L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLongEmpty
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLongNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|5L
operator|+
literal|7L
operator|+
literal|19L
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
literal|13L
operator|+
literal|7L
operator|+
literal|19L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLongRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"sum"
argument_list|,
literal|42L
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|4096L
operator|*
literal|42L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLongRepeatNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"sum"
argument_list|,
literal|null
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testSumLongRepeatConcatValues
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongIterable
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|FakeVectorRowBatchFromConcat
argument_list|(
operator|new
name|FakeVectorRowBatchFromRepeats
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|19L
block|}
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|FakeVectorRowBatchFromLongIterables
argument_list|(
literal|3
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|7L
block|,
literal|23L
block|,
literal|29L
block|}
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|19L
operator|*
literal|10L
operator|+
literal|13L
operator|+
literal|7L
operator|+
literal|23L
operator|+
literal|29L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLongZero
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
operator|-
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
block|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
block|}
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLong2MaxInt
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
block|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
block|}
argument_list|)
argument_list|,
literal|4294967294L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLong2MinInt
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
block|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
block|}
argument_list|)
argument_list|,
operator|-
literal|4294967296L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLong2MaxLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
name|Long
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
argument_list|,
operator|-
literal|2L
argument_list|)
expr_stmt|;
comment|// silent overflow
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLong2MinLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
name|Long
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// silent overflow
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumLongMinMaxLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"sum"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
name|Long
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvgLongSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"avg"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
call|(
name|double
call|)
argument_list|(
literal|13L
operator|+
literal|5L
operator|+
literal|7L
operator|+
literal|19L
argument_list|)
operator|/
operator|(
name|double
operator|)
literal|4L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvgLongEmpty
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"avg"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvgLongNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"avg"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"avg"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"avg"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
call|(
name|double
call|)
argument_list|(
literal|5L
operator|+
literal|7L
operator|+
literal|19L
argument_list|)
operator|/
operator|(
name|double
operator|)
literal|3L
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"avg"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
call|(
name|double
call|)
argument_list|(
literal|13L
operator|+
operator|+
literal|7L
operator|+
literal|19L
argument_list|)
operator|/
operator|(
name|double
operator|)
literal|3L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvgLongRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"avg"
argument_list|,
literal|42L
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
operator|(
name|double
operator|)
literal|42
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvgLongRepeatNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"avg"
argument_list|,
literal|null
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testAvgLongRepeatConcatValues
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongIterable
argument_list|(
literal|"avg"
argument_list|,
operator|new
name|FakeVectorRowBatchFromConcat
argument_list|(
operator|new
name|FakeVectorRowBatchFromRepeats
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|19L
block|}
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|FakeVectorRowBatchFromLongIterables
argument_list|(
literal|3
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|7L
block|,
literal|23L
block|,
literal|29L
block|}
argument_list|)
argument_list|)
argument_list|)
argument_list|,
call|(
name|double
call|)
argument_list|(
literal|19L
operator|*
literal|10L
operator|+
literal|13L
operator|+
literal|7L
operator|+
literal|23L
operator|+
literal|29L
argument_list|)
operator|/
operator|(
name|double
operator|)
literal|14
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarianceLongSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"variance"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
operator|(
name|double
operator|)
literal|30L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarianceLongEmpty
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"variance"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarianceLongSingle
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"variance"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|97L
block|}
argument_list|)
argument_list|,
operator|(
name|double
operator|)
literal|0.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarianceLongNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"variance"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"variance"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"variance"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
operator|(
name|double
operator|)
literal|30.0
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"variance"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|null
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
operator|(
name|double
operator|)
literal|30.0
argument_list|)
expr_stmt|;
name|testAggregateLongAggregate
argument_list|(
literal|"variance"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|19L
block|}
argument_list|)
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarPopLongRepeatNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"var_pop"
argument_list|,
literal|null
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarPopLongRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"var_pop"
argument_list|,
literal|42L
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarSampLongSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"var_samp"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
operator|(
name|double
operator|)
literal|40L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarSampLongEmpty
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"var_samp"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarSampLongRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"var_samp"
argument_list|,
literal|42L
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStdLongSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"std"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
operator|(
name|double
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStdLongEmpty
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"std"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{}
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStdDevLongRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"stddev"
argument_list|,
literal|42L
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStdDevLongRepeatNulls
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"stddev"
argument_list|,
literal|null
argument_list|,
literal|4096
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStdDevSampSimple
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongAggregate
argument_list|(
literal|"stddev_samp"
argument_list|,
literal|2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|13L
block|,
literal|5L
block|,
literal|7L
block|,
literal|19L
block|}
argument_list|)
argument_list|,
operator|(
name|double
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStdDevSampLongRepeat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testAggregateLongRepeats
argument_list|(
literal|"stddev_samp"
argument_list|,
literal|42L
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testKeyTypeAggregate
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|FakeVectorRowBatchFromObjectIterables
name|data
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapColumnNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"Key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"Value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|VectorizationContext
name|ctx
init|=
operator|new
name|VectorizationContext
argument_list|(
name|mapColumnNames
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|AggregationDesc
name|agg
init|=
name|buildAggregationDesc
argument_list|(
name|ctx
argument_list|,
name|aggregateName
argument_list|,
literal|"Value"
argument_list|,
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|data
operator|.
name|getTypes
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggs
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
decl_stmt|;
name|aggs
operator|.
name|add
argument_list|(
name|agg
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
literal|"_col0"
argument_list|)
expr_stmt|;
name|GroupByDesc
name|desc
init|=
operator|new
name|GroupByDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setOutputColumnNames
argument_list|(
name|outputColumnNames
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setAggregators
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|keyExp
init|=
name|buildColumnDesc
argument_list|(
name|ctx
argument_list|,
literal|"Key"
argument_list|,
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|data
operator|.
name|getTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keysDesc
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|keysDesc
operator|.
name|add
argument_list|(
name|keyExp
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setKeys
argument_list|(
name|keysDesc
argument_list|)
expr_stmt|;
name|VectorGroupByOperator
name|vgo
init|=
operator|new
name|VectorGroupByOperator
argument_list|(
name|ctx
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|FakeCaptureOutputOperator
name|out
init|=
name|FakeCaptureOutputOperator
operator|.
name|addCaptureOutputChild
argument_list|(
name|vgo
argument_list|)
decl_stmt|;
name|vgo
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|setOutputInspector
argument_list|(
operator|new
name|FakeCaptureOutputOperator
operator|.
name|OutputInspector
argument_list|()
block|{
specifier|private
name|int
name|rowIndex
decl_stmt|;
specifier|private
name|String
name|aggregateName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|inspectRow
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|assertTrue
argument_list|(
name|row
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|fields
init|=
operator|(
name|Object
index|[]
operator|)
name|row
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|key
condition|)
block|{
name|keyValue
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|ByteWritable
condition|)
block|{
name|ByteWritable
name|bwKey
init|=
operator|(
name|ByteWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
name|bwKey
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|ShortWritable
condition|)
block|{
name|ShortWritable
name|swKey
init|=
operator|(
name|ShortWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
name|swKey
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|IntWritable
condition|)
block|{
name|IntWritable
name|iwKey
init|=
operator|(
name|IntWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
name|iwKey
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|LongWritable
condition|)
block|{
name|LongWritable
name|lwKey
init|=
operator|(
name|LongWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
name|lwKey
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|TimestampWritable
condition|)
block|{
name|TimestampWritable
name|twKey
init|=
operator|(
name|TimestampWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
name|twKey
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|DoubleWritable
condition|)
block|{
name|DoubleWritable
name|dwKey
init|=
operator|(
name|DoubleWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
name|dwKey
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|FloatWritable
condition|)
block|{
name|FloatWritable
name|fwKey
init|=
operator|(
name|FloatWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
name|fwKey
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|BooleanWritable
condition|)
block|{
name|BooleanWritable
name|bwKey
init|=
operator|(
name|BooleanWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
name|bwKey
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Not implemented key output type %s: %s"
argument_list|,
name|key
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expected
operator|.
name|containsKey
argument_list|(
name|keyValue
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|expectedValue
init|=
name|expected
operator|.
name|get
argument_list|(
name|keyValue
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|fields
index|[
literal|1
index|]
decl_stmt|;
name|Validator
name|validator
init|=
name|getValidator
argument_list|(
name|aggregateName
argument_list|)
decl_stmt|;
name|validator
operator|.
name|validate
argument_list|(
name|expectedValue
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FakeCaptureOutputOperator
operator|.
name|OutputInspector
name|init
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|,
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
parameter_list|)
block|{
name|this
operator|.
name|aggregateName
operator|=
name|aggregateName
expr_stmt|;
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|aggregateName
argument_list|,
name|expected
argument_list|,
name|keys
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|VectorizedRowBatch
name|unit
range|:
name|data
control|)
block|{
name|vgo
operator|.
name|process
argument_list|(
name|unit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|vgo
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|outBatchList
init|=
name|out
operator|.
name|getCapturedRows
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|outBatchList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|outBatchList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateLongRepeats
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|Long
name|value
parameter_list|,
name|int
name|repeat
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|FakeVectorRowBatchFromRepeats
name|fdr
init|=
operator|new
name|FakeVectorRowBatchFromRepeats
argument_list|(
operator|new
name|Long
index|[]
block|{
name|value
block|}
argument_list|,
name|repeat
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
name|testAggregateLongIterable
argument_list|(
name|aggregateName
argument_list|,
name|fdr
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|buildHashMap
parameter_list|(
name|Object
modifier|...
name|pairs
parameter_list|)
block|{
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|pairs
index|[
name|i
index|]
argument_list|,
name|pairs
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|public
name|void
name|testAggregateStringKeyAggregate
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FakeVectorRowBatchFromObjectIterables
name|fdr
init|=
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
name|batchSize
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"string"
block|,
literal|"long"
block|}
argument_list|,
name|list
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|testAggregateStringKeyIterable
argument_list|(
name|aggregateName
argument_list|,
name|fdr
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateDoubleStringKeyAggregate
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FakeVectorRowBatchFromObjectIterables
name|fdr
init|=
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
name|batchSize
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"string"
block|,
literal|"double"
block|}
argument_list|,
name|list
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|testAggregateStringKeyIterable
argument_list|(
name|aggregateName
argument_list|,
name|fdr
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateLongKeyAggregate
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|list
parameter_list|,
name|Iterable
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|,
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FakeVectorRowBatchFromLongIterables
name|fdr
init|=
operator|new
name|FakeVectorRowBatchFromLongIterables
argument_list|(
name|batchSize
argument_list|,
name|list
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|testAggregateLongKeyIterable
argument_list|(
name|aggregateName
argument_list|,
name|fdr
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateString
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FakeVectorRowBatchFromObjectIterables
name|fdr
init|=
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
name|batchSize
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"string"
block|}
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|testAggregateStringIterable
argument_list|(
name|aggregateName
argument_list|,
name|fdr
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateDouble
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FakeVectorRowBatchFromObjectIterables
name|fdr
init|=
operator|new
name|FakeVectorRowBatchFromObjectIterables
argument_list|(
name|batchSize
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"double"
block|}
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|testAggregateDoubleIterable
argument_list|(
name|aggregateName
argument_list|,
name|fdr
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateLongAggregate
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|Iterable
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FakeVectorRowBatchFromLongIterables
name|fdr
init|=
operator|new
name|FakeVectorRowBatchFromLongIterables
argument_list|(
name|batchSize
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|testAggregateLongIterable
argument_list|(
name|aggregateName
argument_list|,
name|fdr
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateCountStar
parameter_list|(
name|int
name|batchSize
parameter_list|,
name|Iterable
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FakeVectorRowBatchFromLongIterables
name|fdr
init|=
operator|new
name|FakeVectorRowBatchFromLongIterables
argument_list|(
name|batchSize
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|testAggregateCountStarIterable
argument_list|(
name|fdr
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
interface|interface
name|Validator
block|{
name|void
name|validate
parameter_list|(
name|Object
name|expected
parameter_list|,
name|Object
name|result
parameter_list|)
function_decl|;
block|}
empty_stmt|;
specifier|public
specifier|static
class|class
name|ValueValidator
implements|implements
name|Validator
block|{
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|Object
name|expected
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|result
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|arr
init|=
operator|(
name|Object
index|[]
operator|)
name|result
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arr
index|[
literal|0
index|]
operator|instanceof
name|LongWritable
condition|)
block|{
name|LongWritable
name|lw
init|=
operator|(
name|LongWritable
operator|)
name|arr
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Long
operator|)
name|expected
argument_list|,
operator|(
name|Long
operator|)
name|lw
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arr
index|[
literal|0
index|]
operator|instanceof
name|BytesWritable
condition|)
block|{
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|arr
index|[
literal|0
index|]
decl_stmt|;
name|String
name|sbw
init|=
operator|new
name|String
argument_list|(
name|bw
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|String
operator|)
name|expected
argument_list|,
name|sbw
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arr
index|[
literal|0
index|]
operator|instanceof
name|DoubleWritable
condition|)
block|{
name|DoubleWritable
name|dw
init|=
operator|(
name|DoubleWritable
operator|)
name|arr
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Double
operator|)
name|expected
argument_list|,
operator|(
name|Double
operator|)
name|dw
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arr
index|[
literal|0
index|]
operator|instanceof
name|Double
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
name|Double
operator|)
name|expected
argument_list|,
operator|(
name|Double
operator|)
name|arr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arr
index|[
literal|0
index|]
operator|instanceof
name|Long
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
name|Long
operator|)
name|expected
argument_list|,
operator|(
name|Long
operator|)
name|arr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unsupported result type: "
operator|+
name|arr
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|AvgValidator
implements|implements
name|Validator
block|{
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|Object
name|expected
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
name|Object
index|[]
name|arr
init|=
operator|(
name|Object
index|[]
operator|)
name|result
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|arr
index|[
literal|0
index|]
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|vals
init|=
operator|(
name|Object
index|[]
operator|)
name|arr
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|vals
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|vals
index|[
literal|0
index|]
operator|instanceof
name|LongWritable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|vals
index|[
literal|1
index|]
operator|instanceof
name|DoubleWritable
argument_list|)
expr_stmt|;
name|LongWritable
name|lw
init|=
operator|(
name|LongWritable
operator|)
name|vals
index|[
literal|0
index|]
decl_stmt|;
name|DoubleWritable
name|dw
init|=
operator|(
name|DoubleWritable
operator|)
name|vals
index|[
literal|1
index|]
decl_stmt|;
name|assertFalse
argument_list|(
name|lw
operator|.
name|get
argument_list|()
operator|==
literal|0L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Double
operator|)
name|expected
argument_list|,
call|(
name|Double
call|)
argument_list|(
name|dw
operator|.
name|get
argument_list|()
operator|/
name|lw
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|BaseVarianceValidator
implements|implements
name|Validator
block|{
specifier|abstract
name|void
name|validateVariance
parameter_list|(
name|double
name|expected
parameter_list|,
name|long
name|cnt
parameter_list|,
name|double
name|sum
parameter_list|,
name|double
name|variance
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|Object
name|expected
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
name|Object
index|[]
name|arr
init|=
operator|(
name|Object
index|[]
operator|)
name|result
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|arr
index|[
literal|0
index|]
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|vals
init|=
operator|(
name|Object
index|[]
operator|)
name|arr
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|vals
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|vals
index|[
literal|0
index|]
operator|instanceof
name|LongWritable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|vals
index|[
literal|1
index|]
operator|instanceof
name|DoubleWritable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|vals
index|[
literal|2
index|]
operator|instanceof
name|DoubleWritable
argument_list|)
expr_stmt|;
name|LongWritable
name|cnt
init|=
operator|(
name|LongWritable
operator|)
name|vals
index|[
literal|0
index|]
decl_stmt|;
name|DoubleWritable
name|sum
init|=
operator|(
name|DoubleWritable
operator|)
name|vals
index|[
literal|1
index|]
decl_stmt|;
name|DoubleWritable
name|var
init|=
operator|(
name|DoubleWritable
operator|)
name|vals
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|1
operator|<=
name|cnt
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|validateVariance
argument_list|(
operator|(
name|Double
operator|)
name|expected
argument_list|,
name|cnt
operator|.
name|get
argument_list|()
argument_list|,
name|sum
operator|.
name|get
argument_list|()
argument_list|,
name|var
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|VarianceValidator
extends|extends
name|BaseVarianceValidator
block|{
annotation|@
name|Override
name|void
name|validateVariance
parameter_list|(
name|double
name|expected
parameter_list|,
name|long
name|cnt
parameter_list|,
name|double
name|sum
parameter_list|,
name|double
name|variance
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|variance
operator|/
name|cnt
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|VarianceSampValidator
extends|extends
name|BaseVarianceValidator
block|{
annotation|@
name|Override
name|void
name|validateVariance
parameter_list|(
name|double
name|expected
parameter_list|,
name|long
name|cnt
parameter_list|,
name|double
name|sum
parameter_list|,
name|double
name|variance
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|variance
operator|/
operator|(
name|cnt
operator|-
literal|1
operator|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StdValidator
extends|extends
name|BaseVarianceValidator
block|{
annotation|@
name|Override
name|void
name|validateVariance
parameter_list|(
name|double
name|expected
parameter_list|,
name|long
name|cnt
parameter_list|,
name|double
name|sum
parameter_list|,
name|double
name|variance
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
operator|/
name|cnt
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StdSampValidator
extends|extends
name|BaseVarianceValidator
block|{
annotation|@
name|Override
name|void
name|validateVariance
parameter_list|(
name|double
name|expected
parameter_list|,
name|long
name|cnt
parameter_list|,
name|double
name|sum
parameter_list|,
name|double
name|variance
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
operator|/
operator|(
name|cnt
operator|-
literal|1
operator|)
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Object
index|[]
index|[]
name|validators
init|=
block|{
block|{
literal|"count"
block|,
name|ValueValidator
operator|.
name|class
block|}
block|,
block|{
literal|"min"
block|,
name|ValueValidator
operator|.
name|class
block|}
block|,
block|{
literal|"max"
block|,
name|ValueValidator
operator|.
name|class
block|}
block|,
block|{
literal|"sum"
block|,
name|ValueValidator
operator|.
name|class
block|}
block|,
block|{
literal|"avg"
block|,
name|AvgValidator
operator|.
name|class
block|}
block|,
block|{
literal|"variance"
block|,
name|VarianceValidator
operator|.
name|class
block|}
block|,
block|{
literal|"var_pop"
block|,
name|VarianceValidator
operator|.
name|class
block|}
block|,
block|{
literal|"var_samp"
block|,
name|VarianceSampValidator
operator|.
name|class
block|}
block|,
block|{
literal|"std"
block|,
name|StdValidator
operator|.
name|class
block|}
block|,
block|{
literal|"stddev"
block|,
name|StdValidator
operator|.
name|class
block|}
block|,
block|{
literal|"stddev_samp"
block|,
name|StdSampValidator
operator|.
name|class
block|}
block|,   }
decl_stmt|;
specifier|public
specifier|static
name|Validator
name|getValidator
parameter_list|(
name|String
name|aggregate
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
for|for
control|(
name|Object
index|[]
name|v
range|:
name|validators
control|)
block|{
if|if
condition|(
name|aggregate
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|v
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|Validator
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Validator
argument_list|>
operator|)
name|v
index|[
literal|1
index|]
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Validator
argument_list|>
name|ctr
init|=
name|c
operator|.
name|getConstructor
argument_list|()
decl_stmt|;
return|return
name|ctr
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Missing validator for aggregate: "
operator|+
name|aggregate
argument_list|)
throw|;
block|}
specifier|public
name|void
name|testAggregateCountStarIterable
parameter_list|(
name|Iterable
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|data
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapColumnNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|VectorizationContext
name|ctx
init|=
operator|new
name|VectorizationContext
argument_list|(
name|mapColumnNames
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|GroupByDesc
name|desc
init|=
name|buildGroupByDescCountStar
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|VectorGroupByOperator
name|vgo
init|=
operator|new
name|VectorGroupByOperator
argument_list|(
name|ctx
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|FakeCaptureOutputOperator
name|out
init|=
name|FakeCaptureOutputOperator
operator|.
name|addCaptureOutputChild
argument_list|(
name|vgo
argument_list|)
decl_stmt|;
name|vgo
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|VectorizedRowBatch
name|unit
range|:
name|data
control|)
block|{
name|vgo
operator|.
name|process
argument_list|(
name|unit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|vgo
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|outBatchList
init|=
name|out
operator|.
name|getCapturedRows
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|outBatchList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outBatchList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|outBatchList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Validator
name|validator
init|=
name|getValidator
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
name|validator
operator|.
name|validate
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateStringIterable
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|Iterable
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|data
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapColumnNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|VectorizationContext
name|ctx
init|=
operator|new
name|VectorizationContext
argument_list|(
name|mapColumnNames
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|GroupByDesc
name|desc
init|=
name|buildGroupByDescType
argument_list|(
name|ctx
argument_list|,
name|aggregateName
argument_list|,
literal|"A"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|VectorGroupByOperator
name|vgo
init|=
operator|new
name|VectorGroupByOperator
argument_list|(
name|ctx
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|FakeCaptureOutputOperator
name|out
init|=
name|FakeCaptureOutputOperator
operator|.
name|addCaptureOutputChild
argument_list|(
name|vgo
argument_list|)
decl_stmt|;
name|vgo
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|VectorizedRowBatch
name|unit
range|:
name|data
control|)
block|{
name|vgo
operator|.
name|process
argument_list|(
name|unit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|vgo
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|outBatchList
init|=
name|out
operator|.
name|getCapturedRows
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|outBatchList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outBatchList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|outBatchList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Validator
name|validator
init|=
name|getValidator
argument_list|(
name|aggregateName
argument_list|)
decl_stmt|;
name|validator
operator|.
name|validate
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateDoubleIterable
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|Iterable
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|data
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapColumnNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|VectorizationContext
name|ctx
init|=
operator|new
name|VectorizationContext
argument_list|(
name|mapColumnNames
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|GroupByDesc
name|desc
init|=
name|buildGroupByDescType
argument_list|(
name|ctx
argument_list|,
name|aggregateName
argument_list|,
literal|"A"
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
decl_stmt|;
name|VectorGroupByOperator
name|vgo
init|=
operator|new
name|VectorGroupByOperator
argument_list|(
name|ctx
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|FakeCaptureOutputOperator
name|out
init|=
name|FakeCaptureOutputOperator
operator|.
name|addCaptureOutputChild
argument_list|(
name|vgo
argument_list|)
decl_stmt|;
name|vgo
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|VectorizedRowBatch
name|unit
range|:
name|data
control|)
block|{
name|vgo
operator|.
name|process
argument_list|(
name|unit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|vgo
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|outBatchList
init|=
name|out
operator|.
name|getCapturedRows
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|outBatchList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outBatchList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|outBatchList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Validator
name|validator
init|=
name|getValidator
argument_list|(
name|aggregateName
argument_list|)
decl_stmt|;
name|validator
operator|.
name|validate
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateLongIterable
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|Iterable
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|data
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapColumnNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|VectorizationContext
name|ctx
init|=
operator|new
name|VectorizationContext
argument_list|(
name|mapColumnNames
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|GroupByDesc
name|desc
init|=
name|buildGroupByDescType
argument_list|(
name|ctx
argument_list|,
name|aggregateName
argument_list|,
literal|"A"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
decl_stmt|;
name|VectorGroupByOperator
name|vgo
init|=
operator|new
name|VectorGroupByOperator
argument_list|(
name|ctx
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|FakeCaptureOutputOperator
name|out
init|=
name|FakeCaptureOutputOperator
operator|.
name|addCaptureOutputChild
argument_list|(
name|vgo
argument_list|)
decl_stmt|;
name|vgo
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|VectorizedRowBatch
name|unit
range|:
name|data
control|)
block|{
name|vgo
operator|.
name|process
argument_list|(
name|unit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|vgo
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|outBatchList
init|=
name|out
operator|.
name|getCapturedRows
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|outBatchList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outBatchList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|outBatchList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Validator
name|validator
init|=
name|getValidator
argument_list|(
name|aggregateName
argument_list|)
decl_stmt|;
name|validator
operator|.
name|validate
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateLongKeyIterable
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|Iterable
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|data
parameter_list|,
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapColumnNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"Key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"Value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|VectorizationContext
name|ctx
init|=
operator|new
name|VectorizationContext
argument_list|(
name|mapColumnNames
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|GroupByDesc
name|desc
init|=
name|buildKeyGroupByDesc
argument_list|(
name|ctx
argument_list|,
name|aggregateName
argument_list|,
literal|"Value"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
literal|"Key"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
decl_stmt|;
name|VectorGroupByOperator
name|vgo
init|=
operator|new
name|VectorGroupByOperator
argument_list|(
name|ctx
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|FakeCaptureOutputOperator
name|out
init|=
name|FakeCaptureOutputOperator
operator|.
name|addCaptureOutputChild
argument_list|(
name|vgo
argument_list|)
decl_stmt|;
name|vgo
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|setOutputInspector
argument_list|(
operator|new
name|FakeCaptureOutputOperator
operator|.
name|OutputInspector
argument_list|()
block|{
specifier|private
name|int
name|rowIndex
decl_stmt|;
specifier|private
name|String
name|aggregateName
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|inspectRow
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|assertTrue
argument_list|(
name|row
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|fields
init|=
operator|(
name|Object
index|[]
operator|)
name|row
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|keyValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|key
condition|)
block|{
name|assertTrue
argument_list|(
name|key
operator|instanceof
name|LongWritable
argument_list|)
expr_stmt|;
name|LongWritable
name|lwKey
init|=
operator|(
name|LongWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
name|lwKey
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expected
operator|.
name|containsKey
argument_list|(
name|keyValue
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|expectedValue
init|=
name|expected
operator|.
name|get
argument_list|(
name|keyValue
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|fields
index|[
literal|1
index|]
decl_stmt|;
name|Validator
name|validator
init|=
name|getValidator
argument_list|(
name|aggregateName
argument_list|)
decl_stmt|;
name|validator
operator|.
name|validate
argument_list|(
name|expectedValue
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FakeCaptureOutputOperator
operator|.
name|OutputInspector
name|init
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|,
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
parameter_list|)
block|{
name|this
operator|.
name|aggregateName
operator|=
name|aggregateName
expr_stmt|;
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|aggregateName
argument_list|,
name|expected
argument_list|,
name|keys
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|VectorizedRowBatch
name|unit
range|:
name|data
control|)
block|{
name|vgo
operator|.
name|process
argument_list|(
name|unit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|vgo
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|outBatchList
init|=
name|out
operator|.
name|getCapturedRows
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|outBatchList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|outBatchList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregateStringKeyIterable
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|Iterable
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|data
parameter_list|,
name|TypeInfo
name|dataTypeInfo
parameter_list|,
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapColumnNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"Key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mapColumnNames
operator|.
name|put
argument_list|(
literal|"Value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|VectorizationContext
name|ctx
init|=
operator|new
name|VectorizationContext
argument_list|(
name|mapColumnNames
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|GroupByDesc
name|desc
init|=
name|buildKeyGroupByDesc
argument_list|(
name|ctx
argument_list|,
name|aggregateName
argument_list|,
literal|"Value"
argument_list|,
name|dataTypeInfo
argument_list|,
literal|"Key"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|VectorGroupByOperator
name|vgo
init|=
operator|new
name|VectorGroupByOperator
argument_list|(
name|ctx
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|FakeCaptureOutputOperator
name|out
init|=
name|FakeCaptureOutputOperator
operator|.
name|addCaptureOutputChild
argument_list|(
name|vgo
argument_list|)
decl_stmt|;
name|vgo
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|setOutputInspector
argument_list|(
operator|new
name|FakeCaptureOutputOperator
operator|.
name|OutputInspector
argument_list|()
block|{
specifier|private
name|int
name|rowIndex
decl_stmt|;
specifier|private
name|String
name|aggregateName
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|inspectRow
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|assertTrue
argument_list|(
name|row
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|fields
init|=
operator|(
name|Object
index|[]
operator|)
name|row
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|String
name|keyValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|key
condition|)
block|{
name|assertTrue
argument_list|(
name|key
operator|instanceof
name|BytesWritable
argument_list|)
expr_stmt|;
name|BytesWritable
name|bwKey
init|=
operator|(
name|BytesWritable
operator|)
name|key
decl_stmt|;
name|keyValue
operator|=
operator|new
name|String
argument_list|(
name|bwKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expected
operator|.
name|containsKey
argument_list|(
name|keyValue
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|expectedValue
init|=
name|expected
operator|.
name|get
argument_list|(
name|keyValue
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|fields
index|[
literal|1
index|]
decl_stmt|;
name|Validator
name|validator
init|=
name|getValidator
argument_list|(
name|aggregateName
argument_list|)
decl_stmt|;
name|validator
operator|.
name|validate
argument_list|(
name|expectedValue
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FakeCaptureOutputOperator
operator|.
name|OutputInspector
name|init
parameter_list|(
name|String
name|aggregateName
parameter_list|,
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|,
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
parameter_list|)
block|{
name|this
operator|.
name|aggregateName
operator|=
name|aggregateName
expr_stmt|;
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|aggregateName
argument_list|,
name|expected
argument_list|,
name|keys
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|VectorizedRowBatch
name|unit
range|:
name|data
control|)
block|{
name|vgo
operator|.
name|process
argument_list|(
name|unit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|vgo
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|outBatchList
init|=
name|out
operator|.
name|getCapturedRows
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|outBatchList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|outBatchList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

