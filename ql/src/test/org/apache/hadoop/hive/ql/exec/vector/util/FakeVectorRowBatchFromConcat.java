begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_comment
comment|/**  * Concatenates many arbitrary FakeVectorRowBatch sources as one single source.  * Used in unit test only.  *  */
end_comment

begin_class
specifier|public
class|class
name|FakeVectorRowBatchFromConcat
extends|extends
name|FakeVectorRowBatchBase
block|{
specifier|private
name|Iterable
argument_list|<
name|VectorizedRowBatch
argument_list|>
index|[]
name|iterables
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|iterator
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
specifier|static
name|VectorizedRowBatch
name|emptyBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|FakeVectorRowBatchFromConcat
parameter_list|(
name|Iterable
argument_list|<
name|VectorizedRowBatch
argument_list|>
modifier|...
name|iterables
parameter_list|)
block|{
name|this
operator|.
name|iterables
operator|=
name|iterables
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizedRowBatch
name|produceNextBatch
parameter_list|()
block|{
name|VectorizedRowBatch
name|ret
init|=
literal|null
decl_stmt|;
do|do
block|{
if|if
condition|(
literal|null
operator|!=
name|iterator
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ret
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|index
operator|>=
name|iterables
operator|.
name|length
condition|)
block|{
name|ret
operator|=
name|emptyBatch
expr_stmt|;
break|break;
block|}
name|iterator
operator|=
name|iterables
index|[
name|index
index|]
operator|.
name|iterator
argument_list|()
expr_stmt|;
operator|++
name|index
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

