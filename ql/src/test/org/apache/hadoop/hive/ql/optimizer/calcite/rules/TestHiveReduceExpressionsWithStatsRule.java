begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHiveReduceExpressionsWithStatsRule
block|{
annotation|@
name|Mock
specifier|private
name|RelOptSchema
name|schemaMock
decl_stmt|;
annotation|@
name|Mock
name|RelOptHiveTable
name|tableMock
decl_stmt|;
annotation|@
name|Mock
name|Table
name|hiveTableMDMock
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|HepPlanner
name|planner
decl_stmt|;
specifier|private
name|RelBuilder
name|builder
decl_stmt|;
specifier|private
name|ColStatistics
name|statObj
decl_stmt|;
specifier|private
specifier|static
class|class
name|MyRecord
block|{
specifier|public
name|int
name|_int
decl_stmt|;
specifier|public
name|String
name|_str
decl_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|HepProgramBuilder
name|programBuilder
init|=
operator|new
name|HepProgramBuilder
argument_list|()
decl_stmt|;
name|programBuilder
operator|.
name|addRuleInstance
argument_list|(
name|HiveReduceExpressionsWithStatsRule
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|HepPlanner
argument_list|(
name|programBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|JavaTypeFactoryImpl
name|typeFactory
init|=
operator|new
name|JavaTypeFactoryImpl
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|optCluster
init|=
name|RelOptCluster
operator|.
name|create
argument_list|(
name|planner
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|RelDataType
name|rowTypeMock
init|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|MyRecord
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|rowTypeMock
argument_list|)
operator|.
name|when
argument_list|(
name|tableMock
argument_list|)
operator|.
name|getRowType
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|tableMock
argument_list|)
operator|.
name|when
argument_list|(
name|schemaMock
argument_list|)
operator|.
name|getTableForMember
argument_list|(
name|Matchers
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|statObj
operator|=
operator|new
name|ColStatistics
argument_list|(
literal|"_int"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|statObj
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tableMock
argument_list|)
operator|.
name|getColStat
argument_list|(
name|Matchers
operator|.
name|anyListOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|hiveTableMDMock
argument_list|)
operator|.
name|when
argument_list|(
name|tableMock
argument_list|)
operator|.
name|getHiveTableMD
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|tableParams
argument_list|)
operator|.
name|when
argument_list|(
name|hiveTableMDMock
argument_list|)
operator|.
name|getParameters
argument_list|()
expr_stmt|;
name|builder
operator|=
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
operator|.
name|create
argument_list|(
name|optCluster
argument_list|,
name|schemaMock
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setStatsStateForCreateTable
argument_list|(
name|tableParams
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"_int"
argument_list|)
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGreaterThan_Below
parameter_list|()
block|{
comment|// @formatter:off
specifier|final
name|RelNode
name|basePlan
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"t"
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"_int"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// @formatter:on
name|statObj
operator|.
name|setRange
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|basePlan
argument_list|)
expr_stmt|;
name|RelNode
name|optimizedRelNode
init|=
name|planner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"missing literal"
argument_list|,
name|SqlKind
operator|.
name|LITERAL
argument_list|,
name|optimizedRelNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|RexLiteral
name|val
init|=
operator|(
name|RexLiteral
operator|)
name|optimizedRelNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNull_zero
parameter_list|()
block|{
comment|// @formatter:off
specifier|final
name|RelNode
name|basePlan
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"t"
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"_str"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// @formatter:on
name|statObj
operator|.
name|setNumNulls
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|basePlan
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|basePlan
argument_list|)
argument_list|)
expr_stmt|;
name|RelNode
name|optimizedRelNode
init|=
name|planner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|optimizedRelNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"missing literal"
argument_list|,
name|SqlKind
operator|.
name|LITERAL
argument_list|,
name|optimizedRelNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|RexLiteral
name|val
init|=
operator|(
name|RexLiteral
operator|)
name|optimizedRelNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNull_one
parameter_list|()
block|{
comment|// @formatter:off
specifier|final
name|RelNode
name|basePlan
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"t"
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"_str"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// @formatter:on
name|statObj
operator|.
name|setNumNulls
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|basePlan
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|basePlan
argument_list|)
argument_list|)
expr_stmt|;
name|RelNode
name|optimizedRelNode
init|=
name|planner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|optimizedRelNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"should not be a literal"
argument_list|,
name|SqlKind
operator|.
name|LITERAL
argument_list|,
name|optimizedRelNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNull_all
parameter_list|()
block|{
comment|// @formatter:off
specifier|final
name|RelNode
name|basePlan
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"t"
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"_str"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// @formatter:on
name|statObj
operator|.
name|setNumNulls
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|basePlan
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|basePlan
argument_list|)
argument_list|)
expr_stmt|;
name|RelNode
name|optimizedRelNode
init|=
name|planner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|optimizedRelNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"missing literal"
argument_list|,
name|SqlKind
operator|.
name|LITERAL
argument_list|,
name|optimizedRelNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|RexLiteral
name|val
init|=
operator|(
name|RexLiteral
operator|)
name|optimizedRelNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNotNull
parameter_list|()
block|{
comment|// @formatter:off
specifier|final
name|RelNode
name|basePlan
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"t"
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"_str"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// @formatter:on
name|statObj
operator|.
name|setNumNulls
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|basePlan
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|basePlan
argument_list|)
argument_list|)
expr_stmt|;
name|RelNode
name|optimizedRelNode
init|=
name|planner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|optimizedRelNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"missing literal"
argument_list|,
name|SqlKind
operator|.
name|LITERAL
argument_list|,
name|optimizedRelNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|RexLiteral
name|val
init|=
operator|(
name|RexLiteral
operator|)
name|optimizedRelNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

