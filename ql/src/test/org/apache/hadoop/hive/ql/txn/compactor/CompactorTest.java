begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AbortTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CommitTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchTxnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Super class for all of the compactor test modules.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CompactorTest
block|{
specifier|static
specifier|final
specifier|private
name|String
name|CLASS_NAME
init|=
name|CompactorTest
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|protected
name|TxnStore
name|txnHandler
decl_stmt|;
specifier|protected
name|IMetaStoreClient
name|ms
decl_stmt|;
specifier|protected
name|long
name|sleepTime
init|=
literal|1000
decl_stmt|;
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|File
name|tmpdir
decl_stmt|;
specifier|protected
name|CompactorTest
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ms
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|txnHandler
operator|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|tmpdir
operator|=
operator|new
name|File
argument_list|(
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"compactor_test_table_"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|compactorTestCleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tmpdir
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startInitiator
parameter_list|()
throws|throws
name|Exception
block|{
name|startThread
argument_list|(
literal|'i'
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startWorker
parameter_list|()
throws|throws
name|Exception
block|{
name|startThread
argument_list|(
literal|'w'
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startCleaner
parameter_list|()
throws|throws
name|Exception
block|{
name|startThread
argument_list|(
literal|'c'
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startCleaner
parameter_list|(
name|AtomicBoolean
name|looped
parameter_list|)
throws|throws
name|Exception
block|{
name|startThread
argument_list|(
literal|'c'
argument_list|,
literal|false
argument_list|,
name|looped
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Table
name|newTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|partitioned
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|newTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitioned
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|Table
name|newTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|partitioned
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|newTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitioned
argument_list|,
name|parameters
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|Table
name|newTempTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|newTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|Table
name|newTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|partitioned
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|,
name|boolean
name|isTemporary
parameter_list|)
throws|throws
name|TException
block|{
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setOwner
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSd
argument_list|(
name|newStorageDescriptor
argument_list|(
name|getLocation
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
argument_list|,
name|sortCols
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitioned
condition|)
block|{
name|partKeys
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|"no comment"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setPartitionKeys
argument_list|(
name|partKeys
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTemporary
condition|)
name|table
operator|.
name|setTemporary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// drop the table first, in case some previous test created it
name|ms
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|ms
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|protected
name|Partition
name|newPartition
parameter_list|(
name|Table
name|t
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newPartition
argument_list|(
name|t
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|Partition
name|newPartition
parameter_list|(
name|Table
name|t
parameter_list|,
name|String
name|value
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|part
operator|.
name|addToValues
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setSd
argument_list|(
name|newStorageDescriptor
argument_list|(
name|getLocation
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|,
name|sortCols
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ms
operator|.
name|add_partition
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return
name|part
return|;
block|}
specifier|protected
name|long
name|openTxn
parameter_list|()
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|txns
init|=
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|1
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|Worker
operator|.
name|hostname
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
return|return
name|txns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|protected
name|void
name|addDeltaFile
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|long
name|minTxn
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|numRecords
parameter_list|)
throws|throws
name|Exception
block|{
name|addFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
name|minTxn
argument_list|,
name|maxTxn
argument_list|,
name|numRecords
argument_list|,
name|FileType
operator|.
name|DELTA
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addLengthFile
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|long
name|minTxn
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|numRecords
parameter_list|)
throws|throws
name|Exception
block|{
name|addFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
name|minTxn
argument_list|,
name|maxTxn
argument_list|,
name|numRecords
argument_list|,
name|FileType
operator|.
name|LENGTH_FILE
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addBaseFile
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|numRecords
parameter_list|)
throws|throws
name|Exception
block|{
name|addFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|0
argument_list|,
name|maxTxn
argument_list|,
name|numRecords
argument_list|,
name|FileType
operator|.
name|BASE
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addLegacyFile
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|int
name|numRecords
parameter_list|)
throws|throws
name|Exception
block|{
name|addFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|numRecords
argument_list|,
name|FileType
operator|.
name|LEGACY
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addDeltaFile
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|long
name|minTxn
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|numRecords
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|boolean
name|allBucketsPresent
parameter_list|)
throws|throws
name|Exception
block|{
name|addFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
name|minTxn
argument_list|,
name|maxTxn
argument_list|,
name|numRecords
argument_list|,
name|FileType
operator|.
name|DELTA
argument_list|,
name|numBuckets
argument_list|,
name|allBucketsPresent
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addBaseFile
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|numRecords
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|boolean
name|allBucketsPresent
parameter_list|)
throws|throws
name|Exception
block|{
name|addFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|0
argument_list|,
name|maxTxn
argument_list|,
name|numRecords
argument_list|,
name|FileType
operator|.
name|BASE
argument_list|,
name|numBuckets
argument_list|,
name|allBucketsPresent
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|getDirectories
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|partValue
init|=
operator|(
name|p
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|getLocation
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partValue
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|stats
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|paths
operator|.
name|add
argument_list|(
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|paths
return|;
block|}
specifier|protected
name|void
name|burnThroughTransactions
parameter_list|(
name|int
name|num
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchTxnException
throws|,
name|TxnAbortedException
block|{
name|burnThroughTransactions
argument_list|(
name|num
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|burnThroughTransactions
parameter_list|(
name|int
name|num
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|open
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|aborted
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchTxnException
throws|,
name|TxnAbortedException
block|{
name|OpenTxnsResponse
name|rsp
init|=
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
name|num
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|tid
range|:
name|rsp
operator|.
name|getTxn_ids
argument_list|()
control|)
block|{
if|if
condition|(
name|aborted
operator|!=
literal|null
operator|&&
name|aborted
operator|.
name|contains
argument_list|(
name|tid
argument_list|)
condition|)
block|{
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
name|tid
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|open
operator|==
literal|null
operator|||
operator|(
name|open
operator|!=
literal|null
operator|&&
operator|!
name|open
operator|.
name|contains
argument_list|(
name|tid
argument_list|)
operator|)
condition|)
block|{
name|txnHandler
operator|.
name|commitTxn
argument_list|(
operator|new
name|CommitTxnRequest
argument_list|(
name|tid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|stopThread
parameter_list|()
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|StorageDescriptor
name|newStorageDescriptor
parameter_list|(
name|String
name|location
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|)
block|{
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"a"
argument_list|,
literal|"varchar(25)"
argument_list|,
literal|"still no comment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"b"
argument_list|,
literal|"int"
argument_list|,
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
name|MockInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|MockOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|()
decl_stmt|;
name|serde
operator|.
name|setSerializationLib
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
name|serde
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|bucketCols
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortCols
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|setSortCols
argument_list|(
name|sortCols
argument_list|)
expr_stmt|;
block|}
return|return
name|sd
return|;
block|}
comment|// I can't do this with @Before because I want to be able to control when the thread starts
specifier|private
name|void
name|startThread
parameter_list|(
name|char
name|type
parameter_list|,
name|boolean
name|stopAfterOne
parameter_list|)
throws|throws
name|Exception
block|{
name|startThread
argument_list|(
name|type
argument_list|,
name|stopAfterOne
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startThread
parameter_list|(
name|char
name|type
parameter_list|,
name|boolean
name|stopAfterOne
parameter_list|,
name|AtomicBoolean
name|looped
parameter_list|)
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CompactorThread
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|'i'
case|:
name|t
operator|=
operator|new
name|Initiator
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'w'
case|:
name|t
operator|=
operator|new
name|Worker
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
name|t
operator|=
operator|new
name|Cleaner
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Huh? Unknown thread type."
argument_list|)
throw|;
block|}
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
name|stopAfterOne
argument_list|)
expr_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopAfterOne
condition|)
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
else|else
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getLocation
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|partValue
parameter_list|)
block|{
name|String
name|location
init|=
name|tmpdir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|tableName
decl_stmt|;
if|if
condition|(
name|partValue
operator|!=
literal|null
condition|)
block|{
name|location
operator|+=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
literal|"ds="
operator|+
name|partValue
expr_stmt|;
block|}
return|return
name|location
return|;
block|}
specifier|private
enum|enum
name|FileType
block|{
name|BASE
block|,
name|DELTA
block|,
name|LEGACY
block|,
name|LENGTH_FILE
block|}
empty_stmt|;
specifier|private
name|void
name|addFile
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|long
name|minTxn
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|numRecords
parameter_list|,
name|FileType
name|type
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|boolean
name|allBucketsPresent
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|partValue
init|=
operator|(
name|p
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|location
init|=
operator|new
name|Path
argument_list|(
name|getLocation
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partValue
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BASE
case|:
name|filename
operator|=
literal|"base_"
operator|+
name|maxTxn
expr_stmt|;
break|break;
case|case
name|LENGTH_FILE
case|:
comment|// Fall through to delta
case|case
name|DELTA
case|:
name|filename
operator|=
name|makeDeltaDirName
argument_list|(
name|minTxn
argument_list|,
name|maxTxn
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEGACY
case|:
break|break;
comment|// handled below
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bucket
init|=
literal|0
init|;
name|bucket
operator|<
name|numBuckets
condition|;
name|bucket
operator|++
control|)
block|{
if|if
condition|(
name|bucket
operator|==
literal|0
operator|&&
operator|!
name|allBucketsPresent
condition|)
continue|continue;
comment|// skip one
name|Path
name|partFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|FileType
operator|.
name|LEGACY
condition|)
block|{
name|partFile
operator|=
operator|new
name|Path
argument_list|(
name|location
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|AcidUtils
operator|.
name|LEGACY_FILE_BUCKET_DIGITS
argument_list|,
name|bucket
argument_list|)
operator|+
literal|"_0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|partFile
operator|=
name|AcidUtils
operator|.
name|createBucketFile
argument_list|(
name|dir
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|FileType
operator|.
name|LENGTH_FILE
condition|)
block|{
name|partFile
operator|=
operator|new
name|Path
argument_list|(
name|partFile
operator|.
name|toString
argument_list|()
operator|+
name|AcidUtils
operator|.
name|DELTA_SIDE_FILE_SUFFIX
argument_list|)
expr_stmt|;
block|}
block|}
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|partFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|FileType
operator|.
name|LENGTH_FILE
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|numRecords
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRecords
condition|;
name|i
operator|++
control|)
block|{
name|RecordIdentifier
name|ri
init|=
operator|new
name|RecordIdentifier
argument_list|(
name|maxTxn
operator|-
literal|1
argument_list|,
name|bucket
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|ri
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"mary had a little lamb its fleece was white as snow\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MockInputFormat
implements|implements
name|AcidInputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Text
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|AcidInputFormat
operator|.
name|RowReader
argument_list|<
name|Text
argument_list|>
name|getReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RawReader
argument_list|<
name|Text
argument_list|>
name|getRawReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|collapseEvents
parameter_list|,
name|int
name|bucket
parameter_list|,
name|ValidTxnList
name|validTxnList
parameter_list|,
name|Path
name|baseDirectory
parameter_list|,
name|Path
modifier|...
name|deltaDirectory
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|filesToRead
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseDirectory
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|baseDirectory
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AcidUtils
operator|.
name|BASE_PREFIX
argument_list|)
condition|)
block|{
name|Path
name|p
init|=
name|AcidUtils
operator|.
name|createBucketFile
argument_list|(
name|baseDirectory
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
name|filesToRead
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filesToRead
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|baseDirectory
argument_list|,
literal|"000000_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deltaDirectory
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
name|AcidUtils
operator|.
name|createBucketFile
argument_list|(
name|deltaDirectory
index|[
name|i
index|]
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
name|filesToRead
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MockRawReader
argument_list|(
name|conf
argument_list|,
name|filesToRead
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|entries
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|InputSplit
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|WritableComparable
argument_list|,
name|Text
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|inputSplit
parameter_list|,
name|JobConf
name|entries
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|validateInput
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|static
class|class
name|MockRawReader
implements|implements
name|AcidInputFormat
operator|.
name|RawReader
argument_list|<
name|Text
argument_list|>
block|{
specifier|private
specifier|final
name|Stack
argument_list|<
name|Path
argument_list|>
name|filesToRead
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FSDataInputStream
name|is
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|boolean
name|lastWasDelete
init|=
literal|true
decl_stmt|;
name|MockRawReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|filesToRead
operator|=
operator|new
name|Stack
argument_list|<
name|Path
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
name|filesToRead
operator|.
name|push
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * This is bogus especially with split update acid tables.  This causes compaction to create      * delete_delta_x_y where none existed before.  Makes the data layout such as would never be      * created by 'real' code path.      */
annotation|@
name|Override
specifier|public
name|boolean
name|isDelete
parameter_list|(
name|Text
name|value
parameter_list|)
block|{
comment|// Alternate between returning deleted and not.  This is easier than actually
comment|// tracking operations. We test that this is getting properly called by checking that only
comment|// half the records show up in base files after major compactions.
name|lastWasDelete
operator|=
operator|!
name|lastWasDelete
expr_stmt|;
return|return
name|lastWasDelete
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|RecordIdentifier
name|identifier
parameter_list|,
name|Text
name|text
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
comment|// Open the next file
if|if
condition|(
name|filesToRead
operator|.
name|empty
argument_list|()
condition|)
return|return
literal|false
return|;
name|Path
name|p
init|=
name|filesToRead
operator|.
name|pop
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reading records from "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|line
init|=
literal|null
decl_stmt|;
try|try
block|{
name|identifier
operator|.
name|readFields
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|line
operator|=
name|is
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{       }
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
comment|// Set our current entry to null (since it's done) and try again.
name|is
operator|=
literal|null
expr_stmt|;
return|return
name|next
argument_list|(
name|identifier
argument_list|,
name|text
argument_list|)
return|;
block|}
name|text
operator|.
name|set
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordIdentifier
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|RecordIdentifier
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Text
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
block|}
comment|// This class isn't used and I suspect does totally the wrong thing.  It's only here so that I
comment|// can provide some output format to the tables and partitions I create.  I actually write to
comment|// those tables directory.
specifier|static
class|class
name|MockOutputFormat
implements|implements
name|AcidOutputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Text
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|RecordUpdater
name|getRecordUpdater
parameter_list|(
name|Path
name|path
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
name|getRawRecordWriter
parameter_list|(
name|Path
name|path
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MockRecordWriter
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
name|getHiveRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|Path
name|finalOutPath
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordWriter
argument_list|<
name|WritableComparable
argument_list|,
name|Text
argument_list|>
name|getRecordWriter
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|JobConf
name|entries
parameter_list|,
name|String
name|s
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|JobConf
name|entries
parameter_list|)
throws|throws
name|IOException
block|{      }
block|}
comment|// This class isn't used and I suspect does totally the wrong thing.  It's only here so that I
comment|// can provide some output format to the tables and partitions I create.  I actually write to
comment|// those tables directory.
specifier|static
class|class
name|MockRecordWriter
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
block|{
specifier|private
specifier|final
name|FSDataOutputStream
name|os
decl_stmt|;
name|MockRecordWriter
parameter_list|(
name|Path
name|basedir
parameter_list|,
name|AcidOutputFormat
operator|.
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|options
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|AcidUtils
operator|.
name|createFilename
argument_list|(
name|basedir
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|os
operator|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|w
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|t
init|=
operator|(
name|Text
operator|)
name|w
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * in Hive 1.3.0 delta file names changed to delta_xxxx_yyyy_zzzz; prior to that    * the name was delta_xxxx_yyyy.  We want to run compaction tests such that both formats    * are used since new (1.3) code has to be able to read old files.    */
specifier|abstract
name|boolean
name|useHive130DeltaDirName
parameter_list|()
function_decl|;
name|String
name|makeDeltaDirName
parameter_list|(
name|long
name|minTxnId
parameter_list|,
name|long
name|maxTxnId
parameter_list|)
block|{
if|if
condition|(
name|minTxnId
operator|!=
name|maxTxnId
condition|)
block|{
comment|//covers both streaming api and post compaction style.
return|return
name|makeDeltaDirNameCompacted
argument_list|(
name|minTxnId
argument_list|,
name|maxTxnId
argument_list|)
return|;
block|}
return|return
name|useHive130DeltaDirName
argument_list|()
condition|?
name|AcidUtils
operator|.
name|deltaSubdir
argument_list|(
name|minTxnId
argument_list|,
name|maxTxnId
argument_list|,
literal|0
argument_list|)
else|:
name|AcidUtils
operator|.
name|deltaSubdir
argument_list|(
name|minTxnId
argument_list|,
name|maxTxnId
argument_list|)
return|;
block|}
comment|/**    * delta dir name after compaction    */
name|String
name|makeDeltaDirNameCompacted
parameter_list|(
name|long
name|minTxnId
parameter_list|,
name|long
name|maxTxnId
parameter_list|)
block|{
return|return
name|AcidUtils
operator|.
name|deltaSubdir
argument_list|(
name|minTxnId
argument_list|,
name|maxTxnId
argument_list|)
return|;
block|}
name|String
name|makeDeleteDeltaDirNameCompacted
parameter_list|(
name|long
name|minTxnId
parameter_list|,
name|long
name|maxTxnId
parameter_list|)
block|{
return|return
name|AcidUtils
operator|.
name|deleteDeltaSubdir
argument_list|(
name|minTxnId
argument_list|,
name|maxTxnId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

