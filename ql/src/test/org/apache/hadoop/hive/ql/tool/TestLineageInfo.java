begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|tools
operator|.
name|LineageInfo
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestLineageInfo
extends|extends
name|TestCase
block|{
comment|/**    * Checks whether the test outputs match the expected outputs    * @param lep The LineageInfo extracted from the test    * @param i The set of input tables    * @param o The set of output tables    */
specifier|private
name|void
name|checkOutput
parameter_list|(
name|LineageInfo
name|lep
parameter_list|,
name|TreeSet
argument_list|<
name|String
argument_list|>
name|i
parameter_list|,
name|TreeSet
argument_list|<
name|String
argument_list|>
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|i
operator|.
name|equals
argument_list|(
name|lep
operator|.
name|getInputTableList
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Input table not same"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|o
operator|.
name|equals
argument_list|(
name|lep
operator|.
name|getOutputTableList
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Output table not same"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSimpleQuery
parameter_list|()
block|{
name|LineageInfo
name|lep
init|=
operator|new
name|LineageInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|lep
operator|.
name|getLineageInfo
argument_list|(
literal|"INSERT OVERWRITE TABLE dest1 partition (ds = '111')  SELECT s.* FROM srcpart TABLESAMPLE (BUCKET 1 OUT OF 1) s WHERE s.ds='2008-04-08' and s.hr='11'"
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|i
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|o
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|i
operator|.
name|add
argument_list|(
literal|"srcpart"
argument_list|)
expr_stmt|;
name|o
operator|.
name|add
argument_list|(
literal|"dest1"
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|(
name|lep
argument_list|,
name|i
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSimpleQuery2
parameter_list|()
block|{
name|LineageInfo
name|lep
init|=
operator|new
name|LineageInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|lep
operator|.
name|getLineageInfo
argument_list|(
literal|"FROM (FROM src select src.key, src.value WHERE src.key< 10 UNION ALL FROM src SELECT src.* WHERE src.key> 10 ) unioninput INSERT OVERWRITE DIRECTORY '../../../../build/contrib/hive/ql/test/data/warehouse/union.out' SELECT unioninput.*"
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|i
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|o
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|i
operator|.
name|add
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|(
name|lep
argument_list|,
name|i
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSimpleQuery3
parameter_list|()
block|{
name|LineageInfo
name|lep
init|=
operator|new
name|LineageInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|lep
operator|.
name|getLineageInfo
argument_list|(
literal|"FROM (FROM src select src.key, src.value WHERE src.key< 10 UNION ALL FROM src1 SELECT src1.* WHERE src1.key> 10 ) unioninput INSERT OVERWRITE DIRECTORY '../../../../build/contrib/hive/ql/test/data/warehouse/union.out' SELECT unioninput.*"
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|i
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|o
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|i
operator|.
name|add
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|i
operator|.
name|add
argument_list|(
literal|"src1"
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|(
name|lep
argument_list|,
name|i
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSimpleQuery4
parameter_list|()
block|{
name|LineageInfo
name|lep
init|=
operator|new
name|LineageInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|lep
operator|.
name|getLineageInfo
argument_list|(
literal|"FROM ( FROM ( FROM src1 src1 SELECT src1.key AS c1, src1.value AS c2 WHERE src1.key> 10 and src1.key< 20) a RIGHT OUTER JOIN ( FROM src2 src2 SELECT src2.key AS c3, src2.value AS c4 WHERE src2.key> 15 and src2.key< 25) b ON (a.c1 = b.c3) SELECT a.c1 AS c1, a.c2 AS c2, b.c3 AS c3, b.c4 AS c4) c SELECT c.c1, c.c2, c.c3, c.c4"
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|i
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|o
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|i
operator|.
name|add
argument_list|(
literal|"src1"
argument_list|)
expr_stmt|;
name|i
operator|.
name|add
argument_list|(
literal|"src2"
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|(
name|lep
argument_list|,
name|i
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

