begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|TestTezWorkConcurrency
block|{
annotation|@
name|Test
specifier|public
name|void
name|ensureDagIdIsUnique
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|threadCount
init|=
literal|5
decl_stmt|;
specifier|final
name|CountDownLatch
name|threadReadyToStartSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startThreadSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numberOfTezWorkToCreatePerThread
init|=
literal|100
decl_stmt|;
name|List
argument_list|<
name|FutureTask
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|tasks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|FutureTask
argument_list|<>
argument_list|(
operator|new
name|Callable
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|threadReadyToStartSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|startThreadSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|generateTezWorkDagIds
argument_list|(
name|numberOfTezWorkToCreatePerThread
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
for|for
control|(
name|FutureTask
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|threadReadyToStartSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|startThreadSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allTezWorkDagIds
init|=
name|getAllTezWorkDagIds
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|threadCount
operator|*
name|numberOfTezWorkToCreatePerThread
argument_list|,
name|allTezWorkDagIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|generateTezWorkDagIds
parameter_list|(
name|int
name|numberOfNames
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tezWorkIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNames
condition|;
name|i
operator|++
control|)
block|{
name|TezWork
name|work
init|=
operator|new
name|TezWork
argument_list|(
literal|"query-id"
argument_list|)
decl_stmt|;
name|tezWorkIds
operator|.
name|add
argument_list|(
name|work
operator|.
name|getDagId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tezWorkIds
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getAllTezWorkDagIds
parameter_list|(
name|List
argument_list|<
name|FutureTask
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|allTezWorkDagIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|FutureTask
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
name|allTezWorkDagIds
operator|.
name|addAll
argument_list|(
name|task
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|allTezWorkDagIds
return|;
block|}
block|}
end_class

end_unit

