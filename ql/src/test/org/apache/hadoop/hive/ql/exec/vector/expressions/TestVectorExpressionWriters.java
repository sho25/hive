begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests for vector expression writers.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorExpressionWriters
block|{
specifier|private
specifier|final
name|int
name|vectorSize
init|=
literal|5
decl_stmt|;
specifier|private
name|VectorExpressionWriter
name|getWriter
parameter_list|(
name|TypeInfo
name|colTypeInfo
parameter_list|)
throws|throws
name|HiveException
block|{
name|ExprNodeDesc
name|columnDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|()
decl_stmt|;
name|columnDesc
operator|.
name|setTypeInfo
argument_list|(
name|colTypeInfo
argument_list|)
expr_stmt|;
name|VectorExpressionWriter
name|vew
init|=
name|VectorExpressionWriterFactory
operator|.
name|genVectorExpressionWritable
argument_list|(
name|columnDesc
argument_list|)
decl_stmt|;
return|return
name|vew
return|;
block|}
specifier|private
name|Writable
name|getWritableValue
parameter_list|(
name|TypeInfo
name|ti
parameter_list|,
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|FloatWritable
argument_list|(
operator|(
name|float
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|DoubleWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Writable
name|getWritableValue
parameter_list|(
name|TypeInfo
name|ti
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|Text
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|varcharTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|HiveVarcharWritable
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|Text
argument_list|(
name|value
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|BytesWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Writable
name|getWritableValue
parameter_list|(
name|TypeInfo
name|ti
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|byteTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|shortTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|LongWritable
argument_list|(
operator|(
name|long
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|BooleanWritable
argument_list|(
name|value
operator|==
literal|0
condition|?
literal|false
else|:
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ti
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
condition|)
block|{
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|value
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|TimestampWritable
name|tw
init|=
operator|new
name|TimestampWritable
argument_list|(
name|ts
argument_list|)
decl_stmt|;
return|return
name|tw
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|testWriterDouble
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
name|DoubleColumnVector
name|dcv
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|vectorSize
argument_list|,
operator|new
name|Random
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|dcv
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|VectorExpressionWriter
name|vew
init|=
name|getWriter
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|Writable
name|w
init|=
operator|(
name|Writable
operator|)
name|vew
operator|.
name|writeValue
argument_list|(
name|dcv
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|Writable
name|expected
init|=
name|getWritableValue
argument_list|(
name|type
argument_list|,
name|dcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dcv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testSetterDouble
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
name|DoubleColumnVector
name|dcv
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|vectorSize
argument_list|,
operator|new
name|Random
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|dcv
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|this
operator|.
name|vectorSize
index|]
decl_stmt|;
name|VectorExpressionWriter
name|vew
init|=
name|getWriter
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|vew
operator|.
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|vew
operator|.
name|setValue
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|dcv
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|Writable
name|expected
init|=
name|getWritableValue
argument_list|(
name|type
argument_list|,
name|dcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dcv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testWriterLong
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongColumnVector
name|lcv
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|vectorSize
argument_list|,
operator|new
name|Random
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|lcv
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|VectorExpressionWriter
name|vew
init|=
name|getWriter
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|Writable
name|w
init|=
operator|(
name|Writable
operator|)
name|vew
operator|.
name|writeValue
argument_list|(
name|lcv
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|Writable
name|expected
init|=
name|getWritableValue
argument_list|(
name|type
argument_list|,
name|lcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|instanceof
name|TimestampWritable
condition|)
block|{
name|TimestampWritable
name|t1
init|=
operator|(
name|TimestampWritable
operator|)
name|expected
decl_stmt|;
name|TimestampWritable
name|t2
init|=
operator|(
name|TimestampWritable
operator|)
name|w
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t1
operator|.
name|getNanos
argument_list|()
operator|==
name|t2
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t1
operator|.
name|getSeconds
argument_list|()
operator|==
name|t2
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lcv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testSetterLong
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongColumnVector
name|lcv
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|vectorSize
argument_list|,
operator|new
name|Random
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|lcv
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|this
operator|.
name|vectorSize
index|]
decl_stmt|;
name|VectorExpressionWriter
name|vew
init|=
name|getWriter
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|vew
operator|.
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|vew
operator|.
name|setValue
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|lcv
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|Writable
name|expected
init|=
name|getWritableValue
argument_list|(
name|type
argument_list|,
name|lcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|instanceof
name|TimestampWritable
condition|)
block|{
name|TimestampWritable
name|t1
init|=
operator|(
name|TimestampWritable
operator|)
name|expected
decl_stmt|;
name|TimestampWritable
name|t2
init|=
operator|(
name|TimestampWritable
operator|)
name|values
index|[
name|i
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t1
operator|.
name|getNanos
argument_list|()
operator|==
name|t2
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t1
operator|.
name|getSeconds
argument_list|()
operator|==
name|t2
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lcv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|StructObjectInspector
name|genStructOI
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fieldNames1
operator|.
name|add
argument_list|(
literal|"theInt"
argument_list|)
expr_stmt|;
name|fieldNames1
operator|.
name|add
argument_list|(
literal|"theBool"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors1
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|fieldObjectInspectors1
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
argument_list|)
expr_stmt|;
name|fieldObjectInspectors1
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames1
argument_list|,
name|fieldObjectInspectors1
argument_list|)
return|;
block|}
specifier|private
name|void
name|testStructLong
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongColumnVector
name|icv
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|vectorSize
argument_list|,
operator|new
name|Random
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|icv
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|LongColumnVector
name|bcv
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|vectorSize
argument_list|,
operator|new
name|Random
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
index|[]
name|values
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
index|[]
operator|)
operator|new
name|ArrayList
index|[
name|this
operator|.
name|vectorSize
index|]
decl_stmt|;
name|StructObjectInspector
name|soi
init|=
name|genStructOI
argument_list|()
decl_stmt|;
name|VectorExpressionWriter
index|[]
name|vew
init|=
name|VectorExpressionWriterFactory
operator|.
name|getExpressionWriters
argument_list|(
name|soi
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vew
index|[
literal|0
index|]
operator|.
name|setValue
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|icv
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|vew
index|[
literal|1
index|]
operator|.
name|setValue
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|bcv
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|Object
name|theInt
init|=
name|values
index|[
name|i
index|]
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|theInt
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|icv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IntWritable
name|w
init|=
operator|(
name|IntWritable
operator|)
name|theInt
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|icv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|w
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|theBool
init|=
name|values
index|[
name|i
index|]
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|theBool
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bcv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BooleanWritable
name|w
init|=
operator|(
name|BooleanWritable
operator|)
name|theBool
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bcv
operator|.
name|vector
index|[
name|i
index|]
operator|==
literal|0
condition|?
literal|false
else|:
literal|true
argument_list|,
name|w
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testWriterText
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
name|Text
name|t1
init|=
operator|new
name|Text
argument_list|(
literal|"alpha"
argument_list|)
decl_stmt|;
name|Text
name|t2
init|=
operator|new
name|Text
argument_list|(
literal|"beta"
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|vectorSize
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|bcv
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|bcv
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|t1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t1
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|bcv
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|bcv
operator|.
name|setVal
argument_list|(
literal|2
argument_list|,
name|t2
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t2
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|bcv
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|bcv
operator|.
name|setVal
argument_list|(
literal|4
argument_list|,
name|t1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t1
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|VectorExpressionWriter
name|vew
init|=
name|getWriter
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|Writable
name|w
init|=
operator|(
name|Writable
operator|)
name|vew
operator|.
name|writeValue
argument_list|(
name|bcv
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|val
init|=
operator|new
name|byte
index|[
name|bcv
operator|.
name|length
index|[
name|i
index|]
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|val
argument_list|,
literal|0
argument_list|,
name|bcv
operator|.
name|length
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Writable
name|expected
init|=
name|getWritableValue
argument_list|(
name|type
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bcv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testSetterText
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
name|Text
name|t1
init|=
operator|new
name|Text
argument_list|(
literal|"alpha"
argument_list|)
decl_stmt|;
name|Text
name|t2
init|=
operator|new
name|Text
argument_list|(
literal|"beta"
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|vectorSize
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|bcv
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|bcv
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|t1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t1
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|bcv
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|bcv
operator|.
name|setVal
argument_list|(
literal|2
argument_list|,
name|t2
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t2
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|bcv
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|bcv
operator|.
name|setVal
argument_list|(
literal|4
argument_list|,
name|t1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t1
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|this
operator|.
name|vectorSize
index|]
decl_stmt|;
name|VectorExpressionWriter
name|vew
init|=
name|getWriter
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|vew
operator|.
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Writable
name|w
init|=
operator|(
name|Writable
operator|)
name|vew
operator|.
name|setValue
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|bcv
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|val
init|=
operator|new
name|byte
index|[
name|bcv
operator|.
name|length
index|[
name|i
index|]
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|val
argument_list|,
literal|0
argument_list|,
name|bcv
operator|.
name|length
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Writable
name|expected
init|=
name|getWritableValue
argument_list|(
name|type
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bcv
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterDouble
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterDouble
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterDouble
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterDouble
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterFloat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterDouble
argument_list|(
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterFloat
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterDouble
argument_list|(
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionStructLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|testStructLong
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterInt
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterInt
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterShort
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|shortTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterShort
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|shortTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterBoolean
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterBoolean
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterTimestamp
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterTimestamp
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterByte
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|byteTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterByte
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterLong
argument_list|(
name|TypeInfoFactory
operator|.
name|byteTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterString
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterText
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterString
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterText
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterVarchar
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterText
argument_list|(
name|TypeInfoFactory
operator|.
name|varcharTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterVarchar
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterText
argument_list|(
name|TypeInfoFactory
operator|.
name|varcharTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionWriterBinary
parameter_list|()
throws|throws
name|HiveException
block|{
name|testWriterText
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionSetterBinary
parameter_list|()
throws|throws
name|HiveException
block|{
name|testSetterText
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeStampUtils
parameter_list|()
block|{
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Convert positive nanoseconds to timestamp object.
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
literal|1234567891
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|234567891
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1234567891
argument_list|,
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test negative nanoseconds
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
operator|-
literal|1234567891
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
literal|1000000000
operator|-
literal|234567891
operator|)
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1234567891
argument_list|,
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test positive value smaller than a second.
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
literal|234567891
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|234567891
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|234567891
argument_list|,
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test negative value smaller than a second.
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
operator|-
literal|234567891
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
literal|1000000000
operator|-
literal|234567891
operator|)
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|234567891
argument_list|,
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test a positive long timestamp
name|long
name|big
init|=
literal|152414813551296L
decl_stmt|;
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|big
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|big
operator|%
literal|1000000000
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|big
argument_list|,
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test a negative long timestamp
name|big
operator|=
operator|-
literal|152414813551296L
expr_stmt|;
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|big
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
literal|1000000000
operator|+
operator|(
name|big
operator|%
literal|1000000000
operator|)
operator|)
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|big
argument_list|,
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
comment|// big/1000000 will yield zero nanoseconds
name|big
operator|=
operator|-
literal|1794750230000828416L
expr_stmt|;
name|ts
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|big
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
literal|1000000000
operator|+
name|big
operator|%
literal|1000000000
operator|)
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|big
argument_list|,
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
comment|// Very small nanosecond part
name|big
operator|=
literal|1700000000000000016L
expr_stmt|;
name|ts
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|big
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|big
operator|%
literal|1000000000
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|big
argument_list|,
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
comment|// Very small nanosecond part
name|big
operator|=
operator|-
literal|1700000000000000016L
expr_stmt|;
name|ts
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|big
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
literal|1000000000
operator|+
name|big
operator|%
literal|1000000000
operator|)
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|big
argument_list|,
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

