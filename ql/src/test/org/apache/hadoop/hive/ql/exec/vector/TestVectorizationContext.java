begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|BRoundWithNumDigitsDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|ColAndCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|ColOrCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|DoubleColumnInList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FilterExprAndExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FilterExprOrExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FuncLogWithBaseDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FuncLogWithBaseLongToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FuncPowerDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprCharScalarStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprDoubleColumnDoubleColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprLongColumnLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringGroupColumnCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringGroupColumnStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringGroupColumnStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringGroupColumnVarCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringScalarStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringScalarStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprVarCharScalarStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IsNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IsNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|LongColumnInList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|LongColEqualLongScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|LongColGreaterLongScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|NotCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|RoundWithNumDigitsDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|SelectColumnIsFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|SelectColumnIsNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|SelectColumnIsNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|SelectColumnIsTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringColumnInList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringLTrim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringLower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringUpper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorUDFUnixTimeStampLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorUDFYearLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FilterStringColumnInList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FilterLongColumnInList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FilterDoubleColumnInList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprLongColumnLongScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprLongScalarLongScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprLongScalarLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprDoubleColumnDoubleScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprDoubleScalarDoubleColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprDoubleScalarDoubleScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprDoubleScalarLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DoubleColUnaryMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterDoubleColLessDoubleScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterDoubleColumnBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterDoubleColumnNotBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterLongColEqualLongScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterLongColGreaterLongScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterLongColLessDoubleScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterLongColumnBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterLongColumnNotBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterLongScalarGreaterLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColGreaterStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColGreaterStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringColumnBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringColumnNotBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterVarCharColumnBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterVarCharColumnNotBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterCharColumnBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterCharColumnNotBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncBRoundDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncLnDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncRoundDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncSinDoubleToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColAddLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColModuloLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColMultiplyLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColSubtractLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColUnaryMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongScalarSubtractLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBRound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFLTrim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFLower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPMod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPMultiply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNegative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFPower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFRound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToUnixTimeStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorizationContext
block|{
annotation|@
name|Test
specifier|public
name|void
name|testVectorExpressionDescriptor
parameter_list|()
block|{
name|VectorUDFUnixTimeStampLong
name|v1
init|=
operator|new
name|VectorUDFUnixTimeStampLong
argument_list|()
decl_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Builder
name|builder1
init|=
operator|new
name|VectorExpressionDescriptor
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|d1
init|=
name|builder1
operator|.
name|setMode
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
operator|.
name|setNumArguments
argument_list|(
literal|1
argument_list|)
operator|.
name|setArgumentTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|INT_DATETIME_INTERVAL_FAMILY
argument_list|)
operator|.
name|setInputExpressionTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|d1
operator|.
name|matches
argument_list|(
name|v1
operator|.
name|getDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Builder
name|builder2
init|=
operator|new
name|VectorExpressionDescriptor
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|d2
init|=
name|builder2
operator|.
name|setMode
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
operator|.
name|setNumArguments
argument_list|(
literal|2
argument_list|)
operator|.
name|setArgumentTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|INT_FAMILY
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|FLOAT_FAMILY
argument_list|)
operator|.
name|setInputExpressionTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|SCALAR
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FilterLongColLessDoubleScalar
name|v2
init|=
operator|new
name|FilterLongColLessDoubleScalar
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|d2
operator|.
name|matches
argument_list|(
name|v2
operator|.
name|getDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Builder
name|builder3
init|=
operator|new
name|VectorExpressionDescriptor
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|d3
init|=
name|builder3
operator|.
name|setMode
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
operator|.
name|setNumArguments
argument_list|(
literal|1
argument_list|)
operator|.
name|setArgumentTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|STRING
argument_list|)
operator|.
name|setInputExpressionTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StringLower
name|v3
init|=
operator|new
name|StringLower
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|d3
operator|.
name|matches
argument_list|(
name|v3
operator|.
name|getDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Builder
name|builder4
init|=
operator|new
name|VectorExpressionDescriptor
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|d4
init|=
name|builder4
operator|.
name|setMode
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
operator|.
name|setNumArguments
argument_list|(
literal|1
argument_list|)
operator|.
name|setArgumentTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|ALL_FAMILY
argument_list|)
operator|.
name|setInputExpressionTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StringUpper
name|v4
init|=
operator|new
name|StringUpper
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|d4
operator|.
name|matches
argument_list|(
name|v4
operator|.
name|getDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Builder
name|builder5
init|=
operator|new
name|VectorExpressionDescriptor
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|d5
init|=
name|builder5
operator|.
name|setMode
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
operator|.
name|setNumArguments
argument_list|(
literal|1
argument_list|)
operator|.
name|setArgumentTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|STRING
argument_list|)
operator|.
name|setInputExpressionTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IsNull
name|v5
init|=
operator|new
name|IsNull
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|d5
operator|.
name|matches
argument_list|(
name|v5
operator|.
name|getDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArithmeticExpressionVectorization
parameter_list|()
throws|throws
name|HiveException
block|{
comment|/**      * Create original expression tree for following      * (plus (minus (plus col1 col2) col3) (multiply col4 (mod col5 col6)) )      */
name|GenericUDFOPPlus
name|udf1
init|=
operator|new
name|GenericUDFOPPlus
argument_list|()
decl_stmt|;
name|GenericUDFOPMinus
name|udf2
init|=
operator|new
name|GenericUDFOPMinus
argument_list|()
decl_stmt|;
name|GenericUDFOPMultiply
name|udf3
init|=
operator|new
name|GenericUDFOPMultiply
argument_list|()
decl_stmt|;
name|GenericUDFOPPlus
name|udf4
init|=
operator|new
name|GenericUDFOPPlus
argument_list|()
decl_stmt|;
name|GenericUDFOPMod
name|udf5
init|=
operator|new
name|GenericUDFOPMod
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|sumExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|sumExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
name|sumExpr
operator|.
name|setGenericUDF
argument_list|(
name|udf1
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|minusExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|minusExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
name|minusExpr
operator|.
name|setGenericUDF
argument_list|(
name|udf2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|multiplyExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|multiplyExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
name|multiplyExpr
operator|.
name|setGenericUDF
argument_list|(
name|udf3
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|sum2Expr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|sum2Expr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
name|sum2Expr
operator|.
name|setGenericUDF
argument_list|(
name|udf4
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|modExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|modExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
name|modExpr
operator|.
name|setGenericUDF
argument_list|(
name|udf5
argument_list|)
expr_stmt|;
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col2Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col3Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col4Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col4"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col5Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col5"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col6Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col6"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children3
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children4
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children5
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|minusExpr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|multiplyExpr
argument_list|)
expr_stmt|;
name|sumExpr
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|sum2Expr
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|col3Expr
argument_list|)
expr_stmt|;
name|minusExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|sum2Expr
operator|.
name|setChildren
argument_list|(
name|children3
argument_list|)
expr_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|col4Expr
argument_list|)
expr_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|modExpr
argument_list|)
expr_stmt|;
name|multiplyExpr
operator|.
name|setChildren
argument_list|(
name|children4
argument_list|)
expr_stmt|;
name|children5
operator|.
name|add
argument_list|(
name|col5Expr
argument_list|)
expr_stmt|;
name|children5
operator|.
name|add
argument_list|(
name|col6Expr
argument_list|)
expr_stmt|;
name|modExpr
operator|.
name|setChildren
argument_list|(
name|children5
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|vc
operator|.
name|addInitialColumn
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|vc
operator|.
name|addInitialColumn
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|vc
operator|.
name|addInitialColumn
argument_list|(
literal|"col3"
argument_list|)
expr_stmt|;
name|vc
operator|.
name|addInitialColumn
argument_list|(
literal|"col4"
argument_list|)
expr_stmt|;
name|vc
operator|.
name|addInitialColumn
argument_list|(
literal|"col5"
argument_list|)
expr_stmt|;
name|vc
operator|.
name|addInitialColumn
argument_list|(
literal|"col6"
argument_list|)
expr_stmt|;
name|vc
operator|.
name|finishedAddingInitialColumns
argument_list|()
expr_stmt|;
comment|//Generate vectorized expression
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|sumExpr
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
decl_stmt|;
comment|//Verify vectorized expression
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|LongColAddLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ve
operator|.
name|getChildExpressions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|VectorExpression
name|childExpr1
init|=
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|VectorExpression
name|childExpr2
init|=
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ve
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|ve
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childExpr1
operator|instanceof
name|LongColSubtractLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childExpr1
operator|.
name|getChildExpressions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childExpr1
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|LongColAddLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|childExpr1
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|childExpr1
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childExpr2
operator|instanceof
name|LongColMultiplyLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childExpr2
operator|.
name|getChildExpressions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childExpr2
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|LongColModuloLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|childExpr2
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|childExpr2
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringFilterExpressions
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Alpha"
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|exprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|exprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringGroupColGreaterStringScalar
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterStringColCompareStringColumnExpressions
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// Strings test
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col2Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|exprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|exprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringGroupColGreaterStringGroupColumn
argument_list|)
expr_stmt|;
comment|// 2 CHAR test
name|CharTypeInfo
name|charTypeInfo
init|=
operator|new
name|CharTypeInfo
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|col1Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|charTypeInfo
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|charTypeInfo
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
expr_stmt|;
name|exprDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
expr_stmt|;
name|exprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|children1
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|exprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|vc
operator|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringGroupColGreaterStringGroupColumn
argument_list|)
expr_stmt|;
comment|// 2 VARCHAR test
name|VarcharTypeInfo
name|varcharTypeInfo
init|=
operator|new
name|VarcharTypeInfo
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|col1Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
expr_stmt|;
name|exprDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
expr_stmt|;
name|exprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|children1
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|exprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|vc
operator|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringGroupColGreaterStringGroupColumn
argument_list|)
expr_stmt|;
comment|// Some mix tests (STRING, CHAR), (VARCHAR, CHAR), (VARCHAR, STRING)...
name|col1Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|charTypeInfo
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
expr_stmt|;
name|exprDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
expr_stmt|;
name|exprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|children1
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|exprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|vc
operator|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringGroupColGreaterStringGroupColumn
argument_list|)
expr_stmt|;
name|col1Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|charTypeInfo
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
expr_stmt|;
name|exprDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
expr_stmt|;
name|exprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|children1
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|exprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|vc
operator|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringGroupColGreaterStringGroupColumn
argument_list|)
expr_stmt|;
name|col1Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
expr_stmt|;
name|exprDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
expr_stmt|;
name|exprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|children1
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|exprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|vc
operator|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringGroupColGreaterStringGroupColumn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloatInExpressions
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Float
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPPlus
name|udf
init|=
operator|new
name|GenericUDFOPPlus
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|udf
argument_list|,
name|children1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|.
name|getOutputType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorizeFilterAndOrExpression
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|greaterExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|greaterExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|ExprNodeColumnDesc
name|col2Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Float
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|const2Desc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Float
argument_list|(
literal|1.0
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPLessThan
name|udf2
init|=
operator|new
name|GenericUDFOPLessThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|lessExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|lessExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|lessExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|const2Desc
argument_list|)
expr_stmt|;
name|lessExprDesc
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|GenericUDFOPAnd
name|andUdf
init|=
operator|new
name|GenericUDFOPAnd
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|andExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|andExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|andExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|andUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children3
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|lessExprDesc
argument_list|)
expr_stmt|;
name|andExprDesc
operator|.
name|setChildren
argument_list|(
name|children3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|andExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterExprAndExpr
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterLongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterDoubleColLessDoubleScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|GenericUDFOPOr
name|orUdf
init|=
operator|new
name|GenericUDFOPOr
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|orExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|orExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|orExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|orUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children4
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|lessExprDesc
argument_list|)
expr_stmt|;
name|orExprDesc
operator|.
name|setChildren
argument_list|(
name|children4
argument_list|)
expr_stmt|;
name|VectorExpression
name|veOr
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|orExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterExprOrExpr
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterLongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterDoubleColLessDoubleScalar
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorizeFilterMultiAndOrExpression
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|greaterExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|greaterExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|ExprNodeColumnDesc
name|col2Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Float
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|const2Desc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Float
argument_list|(
literal|1.0
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPLessThan
name|udf2
init|=
operator|new
name|GenericUDFOPLessThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|lessExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|lessExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|lessExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|const2Desc
argument_list|)
expr_stmt|;
name|lessExprDesc
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|ExprNodeColumnDesc
name|col3Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|const3Desc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf3
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|greaterExprDesc3
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|greaterExprDesc3
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|greaterExprDesc3
operator|.
name|setGenericUDF
argument_list|(
name|udf3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children3
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|col3Expr
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|const3Desc
argument_list|)
expr_stmt|;
name|greaterExprDesc3
operator|.
name|setChildren
argument_list|(
name|children3
argument_list|)
expr_stmt|;
name|GenericUDFOPAnd
name|andUdf
init|=
operator|new
name|GenericUDFOPAnd
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|andExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|andExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|andExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|andUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children4
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|lessExprDesc
argument_list|)
expr_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|greaterExprDesc3
argument_list|)
expr_stmt|;
name|andExprDesc
operator|.
name|setChildren
argument_list|(
name|children4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col3"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|andExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterExprAndExpr
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterLongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterDoubleColLessDoubleScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|2
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterLongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|GenericUDFOPOr
name|orUdf
init|=
operator|new
name|GenericUDFOPOr
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|orExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|orExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|orExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|orUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children5
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children5
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|children5
operator|.
name|add
argument_list|(
name|lessExprDesc
argument_list|)
expr_stmt|;
name|children5
operator|.
name|add
argument_list|(
name|greaterExprDesc3
argument_list|)
expr_stmt|;
name|orExprDesc
operator|.
name|setChildren
argument_list|(
name|children5
argument_list|)
expr_stmt|;
name|VectorExpression
name|veOr
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|orExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterExprOrExpr
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterLongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterDoubleColLessDoubleScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|2
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterLongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorizeAndOrProjectionExpression
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|greaterExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|greaterExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|ExprNodeColumnDesc
name|col2Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GenericUDFOPAnd
name|andUdf
init|=
operator|new
name|GenericUDFOPAnd
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|andExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|andExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|andExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|andUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children3
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|andExprDesc
operator|.
name|setChildren
argument_list|(
name|children3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|veAnd
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|andExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|veAnd
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterExprAndExpr
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veAnd
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterLongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veAnd
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|SelectColumnIsTrue
operator|.
name|class
argument_list|)
expr_stmt|;
name|veAnd
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|andExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veAnd
operator|.
name|getClass
argument_list|()
argument_list|,
name|ColAndCol
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|veAnd
operator|.
name|getChildExpressions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veAnd
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|LongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|ColAndCol
operator|)
name|veAnd
operator|)
operator|.
name|getColNum1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|ColAndCol
operator|)
name|veAnd
operator|)
operator|.
name|getColNum2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|ColAndCol
operator|)
name|veAnd
operator|)
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
comment|//OR
name|GenericUDFOPOr
name|orUdf
init|=
operator|new
name|GenericUDFOPOr
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|orExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|orExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|orExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|orUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children4
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|orExprDesc
operator|.
name|setChildren
argument_list|(
name|children4
argument_list|)
expr_stmt|;
comment|//Allocate new Vectorization context to reset the intermediate columns.
name|vc
operator|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|VectorExpression
name|veOr
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|orExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterExprOrExpr
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|FilterLongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|SelectColumnIsTrue
operator|.
name|class
argument_list|)
expr_stmt|;
name|veOr
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|orExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veOr
operator|.
name|getClass
argument_list|()
argument_list|,
name|ColOrCol
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|veAnd
operator|.
name|getChildExpressions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|veAnd
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|LongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|ColOrCol
operator|)
name|veOr
operator|)
operator|.
name|getColNum1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|ColOrCol
operator|)
name|veOr
operator|)
operator|.
name|getColNum2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|ColOrCol
operator|)
name|veOr
operator|)
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotExpression
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|greaterExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|greaterExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|notExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|notExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|GenericUDFOPNot
name|notUdf
init|=
operator|new
name|GenericUDFOPNot
argument_list|()
decl_stmt|;
name|notExpr
operator|.
name|setGenericUDF
argument_list|(
name|notUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childOfNot
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|childOfNot
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|notExpr
operator|.
name|setChildren
argument_list|(
name|childOfNot
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|notExpr
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getClass
argument_list|()
argument_list|,
name|SelectColumnIsFalse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|LongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|notExpr
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getClass
argument_list|()
argument_list|,
name|NotCol
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|LongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullExpressions
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|greaterExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|greaterExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|isNullExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|isNullExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|GenericUDFOPNull
name|isNullUdf
init|=
operator|new
name|GenericUDFOPNull
argument_list|()
decl_stmt|;
name|isNullExpr
operator|.
name|setGenericUDF
argument_list|(
name|isNullUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childOfIsNull
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|childOfIsNull
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|isNullExpr
operator|.
name|setChildren
argument_list|(
name|childOfIsNull
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|isNullExpr
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getClass
argument_list|()
argument_list|,
name|SelectColumnIsNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|LongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SelectColumnIsNull
operator|)
name|ve
operator|)
operator|.
name|getColNum
argument_list|()
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|isNullExpr
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getClass
argument_list|()
argument_list|,
name|IsNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|IsNull
operator|)
name|ve
operator|)
operator|.
name|getColNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ve
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|LongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotNullExpressions
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|greaterExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|greaterExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|isNotNullExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|isNotNullExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|GenericUDFOPNotNull
name|notNullUdf
init|=
operator|new
name|GenericUDFOPNotNull
argument_list|()
decl_stmt|;
name|isNotNullExpr
operator|.
name|setGenericUDF
argument_list|(
name|notNullUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childOfNot
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|childOfNot
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|isNotNullExpr
operator|.
name|setChildren
argument_list|(
name|childOfNot
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|isNotNullExpr
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getClass
argument_list|()
argument_list|,
name|SelectColumnIsNotNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SelectColumnIsNotNull
operator|)
name|ve
operator|)
operator|.
name|getColNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|LongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|isNotNullExpr
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getClass
argument_list|()
argument_list|,
name|IsNotNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|IsNotNull
operator|)
name|ve
operator|)
operator|.
name|getColNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|LongColGreaterLongScalar
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorizeScalarColumnExpression
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFOPMinus
name|gudf
init|=
operator|new
name|GenericUDFOPMinus
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"a"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|scalarMinusConstant
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|gudf
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|scalarMinusConstant
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ve
operator|.
name|getClass
argument_list|()
argument_list|,
name|LongScalarSubtractLongColumn
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterWithNegativeScalar
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
operator|-
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|exprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|exprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterLongColGreaterLongScalar
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnaryMinusColumnLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GenericUDF
name|gudf
init|=
operator|new
name|GenericUDFOPNegative
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|negExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|gudf
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|negExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|LongColUnaryMinus
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnaryMinusColumnDouble
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Float
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GenericUDF
name|gudf
init|=
operator|new
name|GenericUDFOPNegative
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|negExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|gudf
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|negExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|DoubleColUnaryMinus
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterScalarCompareColumn
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeGenericFuncDesc
name|scalarGreaterColExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|GenericUDFOPGreaterThan
name|gudf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|scalarGreaterColExpr
operator|.
name|setGenericUDF
argument_list|(
name|gudf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"a"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|scalarGreaterColExpr
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|scalarGreaterColExpr
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FilterLongScalarGreaterLongColumn
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterBooleanColumnCompareBooleanScalar
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeGenericFuncDesc
name|colEqualScalar
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|GenericUDFOPEqual
name|gudf
init|=
operator|new
name|GenericUDFOPEqual
argument_list|()
decl_stmt|;
name|colEqualScalar
operator|.
name|setGenericUDF
argument_list|(
name|gudf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|colEqualScalar
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|colEqualScalar
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FilterLongColEqualLongScalar
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBooleanColumnCompareBooleanScalar
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeGenericFuncDesc
name|colEqualScalar
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|GenericUDFOPEqual
name|gudf
init|=
operator|new
name|GenericUDFOPEqual
argument_list|()
decl_stmt|;
name|colEqualScalar
operator|.
name|setGenericUDF
argument_list|(
name|gudf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|colEqualScalar
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|colEqualScalar
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|LongColEqualLongScalar
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnaryStringExpressions
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeGenericFuncDesc
name|stringUnary
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|stringUnary
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"a"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|stringUnary
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|GenericUDF
name|stringLower
init|=
operator|new
name|GenericUDFLower
argument_list|()
decl_stmt|;
name|stringUnary
operator|.
name|setGenericUDF
argument_list|(
name|stringLower
argument_list|)
expr_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|stringUnary
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|StringLower
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|StringLower
operator|)
name|ve
operator|)
operator|.
name|getColNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|StringLower
operator|)
name|ve
operator|)
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|vc
operator|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|anotherUnary
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|anotherUnary
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|stringUnary
argument_list|)
expr_stmt|;
name|anotherUnary
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|GenericUDFBridge
name|udfbridge
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"ltrim"
argument_list|,
literal|false
argument_list|,
name|GenericUDFLTrim
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|anotherUnary
operator|.
name|setGenericUDF
argument_list|(
name|udfbridge
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|anotherUnary
argument_list|)
expr_stmt|;
name|VectorExpression
name|childVe
init|=
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|StringLower
operator|.
name|class
argument_list|,
name|childVe
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|StringLower
operator|)
name|childVe
operator|)
operator|.
name|getColNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|StringLower
operator|)
name|childVe
operator|)
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StringLTrim
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|StringLTrim
operator|)
name|ve
operator|)
operator|.
name|getInputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|StringLTrim
operator|)
name|ve
operator|)
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMathFunctions
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeGenericFuncDesc
name|mathFuncExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|mathFuncExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
expr_stmt|;
name|ExprNodeColumnDesc
name|colDesc1
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"a"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|colDesc2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|"b"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|colDesc1
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|colDesc2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
comment|// Sin(double)
name|GenericUDFBridge
name|gudfBridge
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"sin"
argument_list|,
literal|false
argument_list|,
name|UDFSin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|mathFuncExpr
operator|.
name|setGenericUDF
argument_list|(
name|gudfBridge
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncSinDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Round without digits
name|GenericUDFRound
name|udfRound
init|=
operator|new
name|GenericUDFRound
argument_list|()
decl_stmt|;
name|mathFuncExpr
operator|.
name|setGenericUDF
argument_list|(
name|udfRound
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncRoundDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// BRound without digits
name|GenericUDFBRound
name|udfBRound
init|=
operator|new
name|GenericUDFBRound
argument_list|()
decl_stmt|;
name|mathFuncExpr
operator|.
name|setGenericUDF
argument_list|(
name|udfBRound
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncBRoundDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Round with digits
name|mathFuncExpr
operator|.
name|setGenericUDF
argument_list|(
name|udfRound
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RoundWithNumDigitsDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|RoundWithNumDigitsDoubleToDouble
operator|)
name|ve
operator|)
operator|.
name|getDecimalPlaces
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// BRound with digits
name|mathFuncExpr
operator|.
name|setGenericUDF
argument_list|(
name|udfBRound
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BRoundWithNumDigitsDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|BRoundWithNumDigitsDoubleToDouble
operator|)
name|ve
operator|)
operator|.
name|getDecimalPlaces
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Logger with int base
name|gudfBridge
operator|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"log"
argument_list|,
literal|false
argument_list|,
name|UDFLog
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setGenericUDF
argument_list|(
name|gudfBridge
argument_list|)
expr_stmt|;
name|children2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|4.0
argument_list|)
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|colDesc2
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncLogWithBaseDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|4
operator|==
operator|(
operator|(
name|FuncLogWithBaseDoubleToDouble
operator|)
name|ve
operator|)
operator|.
name|getBase
argument_list|()
argument_list|)
expr_stmt|;
comment|// Logger with default base
name|children2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|colDesc2
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncLnDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|//Log with double base
name|children2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|4.5
argument_list|)
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|colDesc2
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncLogWithBaseDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|4.5
operator|==
operator|(
operator|(
name|FuncLogWithBaseDoubleToDouble
operator|)
name|ve
operator|)
operator|.
name|getBase
argument_list|()
argument_list|)
expr_stmt|;
comment|//Log with int input and double base
name|children2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|4.5
argument_list|)
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|colDesc1
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncLogWithBaseLongToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|4.5
operator|==
operator|(
operator|(
name|FuncLogWithBaseLongToDouble
operator|)
name|ve
operator|)
operator|.
name|getBase
argument_list|()
argument_list|)
expr_stmt|;
comment|//Power with double power
name|children2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|colDesc2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|4.5
argument_list|)
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setGenericUDF
argument_list|(
operator|new
name|GenericUDFPower
argument_list|()
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncPowerDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|4.5
operator|==
operator|(
operator|(
name|FuncPowerDoubleToDouble
operator|)
name|ve
operator|)
operator|.
name|getPower
argument_list|()
argument_list|)
expr_stmt|;
comment|//Round with default decimal places
name|mathFuncExpr
operator|.
name|setGenericUDF
argument_list|(
name|udfRound
argument_list|)
expr_stmt|;
name|children2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|colDesc2
argument_list|)
expr_stmt|;
name|mathFuncExpr
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|mathFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncRoundDoubleToDouble
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeStampUdfs
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeGenericFuncDesc
name|tsFuncExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|tsFuncExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
name|ExprNodeColumnDesc
name|colDesc1
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|,
literal|"a"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colDesc1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
comment|//UDFYear
name|GenericUDFBridge
name|gudfBridge
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"year"
argument_list|,
literal|false
argument_list|,
name|UDFYear
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|tsFuncExpr
operator|.
name|setGenericUDF
argument_list|(
name|gudfBridge
argument_list|)
expr_stmt|;
name|tsFuncExpr
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|tsFuncExpr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VectorUDFYearLong
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|//GenericUDFToUnixTimeStamp
name|GenericUDFToUnixTimeStamp
name|gudf
init|=
operator|new
name|GenericUDFToUnixTimeStamp
argument_list|()
decl_stmt|;
name|tsFuncExpr
operator|.
name|setGenericUDF
argument_list|(
name|gudf
argument_list|)
expr_stmt|;
name|tsFuncExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|tsFuncExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VectorUDFUnixTimeStampLong
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBetweenFilters
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// string tests
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Alpha"
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Bravo"
argument_list|)
decl_stmt|;
comment|// string BETWEEN
name|GenericUDFBetween
name|udf
init|=
operator|new
name|GenericUDFBetween
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no NOT keyword
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|udf
argument_list|,
name|children1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringColumnBetween
argument_list|)
expr_stmt|;
comment|// string NOT BETWEEN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// has NOT keyword
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringColumnNotBetween
argument_list|)
expr_stmt|;
comment|// CHAR tests
name|CharTypeInfo
name|charTypeInfo
init|=
operator|new
name|CharTypeInfo
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|col1Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|charTypeInfo
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|constDesc
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|charTypeInfo
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"Alpha"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|constDesc2
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|charTypeInfo
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"Bravo"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// CHAR BETWEEN
name|udf
operator|=
operator|new
name|GenericUDFBetween
argument_list|()
expr_stmt|;
name|children1
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no NOT keyword
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc2
argument_list|)
expr_stmt|;
name|exprDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|udf
argument_list|,
name|children1
argument_list|)
expr_stmt|;
name|vc
operator|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterCharColumnBetween
argument_list|)
expr_stmt|;
comment|// CHAR NOT BETWEEN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// has NOT keyword
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterCharColumnNotBetween
argument_list|)
expr_stmt|;
comment|// VARCHAR tests
name|VarcharTypeInfo
name|varcharTypeInfo
init|=
operator|new
name|VarcharTypeInfo
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|col1Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|constDesc
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"Alpha"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|constDesc2
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"Bravo"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// VARCHAR BETWEEN
name|udf
operator|=
operator|new
name|GenericUDFBetween
argument_list|()
expr_stmt|;
name|children1
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no NOT keyword
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc2
argument_list|)
expr_stmt|;
name|exprDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|udf
argument_list|,
name|children1
argument_list|)
expr_stmt|;
name|vc
operator|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterVarCharColumnBetween
argument_list|)
expr_stmt|;
comment|// VARCHAR NOT BETWEEN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// has NOT keyword
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterVarCharColumnNotBetween
argument_list|)
expr_stmt|;
comment|// long BETWEEN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|3
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterLongColumnBetween
argument_list|)
expr_stmt|;
comment|// long NOT BETWEEN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterLongColumnNotBetween
argument_list|)
expr_stmt|;
comment|// double BETWEEN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|10.0d
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|3
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|20.0d
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterDoubleColumnBetween
argument_list|)
expr_stmt|;
comment|// double NOT BETWEEN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterDoubleColumnNotBetween
argument_list|)
expr_stmt|;
comment|// timestamp BETWEEN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"2013-11-05 00:00:00.000"
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|3
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"2013-11-06 00:00:00.000"
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FilterStringColumnBetween
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// timestamp NOT BETWEEN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FilterStringColumnNotBetween
operator|.
name|class
argument_list|,
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test translation of both IN filters and boolean-valued IN expressions (non-filters).
annotation|@
name|Test
specifier|public
name|void
name|testInFiltersAndExprs
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Alpha"
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Bravo"
argument_list|)
decl_stmt|;
comment|// string IN
name|GenericUDFIn
name|udf
init|=
operator|new
name|GenericUDFIn
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|udf
argument_list|,
name|children1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringColumnInList
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|StringColumnInList
argument_list|)
expr_stmt|;
comment|// long IN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterLongColumnInList
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|LongColumnInList
argument_list|)
expr_stmt|;
comment|// double IN
name|children1
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|10d
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|20d
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterDoubleColumnInList
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|DoubleColumnInList
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that correct VectorExpression classes are chosen for the    * IF (expr1, expr2, expr3) conditional expression for integer, float,    * boolean, timestamp and string input types. expr1 is always an input column expression    * of type long. expr2 and expr3 can be column expressions or constants of other types    * but must have the same type.    */
annotation|@
name|Test
specifier|public
name|void
name|testIfConditionalExprs
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col2Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col3Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc3
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// long column/column IF
name|GenericUDFIf
name|udf
init|=
operator|new
name|GenericUDFIf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col3Expr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|udf
argument_list|,
name|children1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col0"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"col3"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprLongColumnLongColumn
argument_list|)
expr_stmt|;
comment|// long column/scalar IF
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprLongColumnLongScalar
argument_list|)
expr_stmt|;
comment|// long scalar/scalar IF
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprLongScalarLongScalar
argument_list|)
expr_stmt|;
comment|// long scalar/column IF
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprLongScalarLongColumn
argument_list|)
expr_stmt|;
comment|// test for double type
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col3Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// double column/column IF
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|col2Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprDoubleColumnDoubleColumn
argument_list|)
expr_stmt|;
comment|// double column/scalar IF
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1D
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprDoubleColumnDoubleScalar
argument_list|)
expr_stmt|;
comment|// double scalar/scalar IF
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1D
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprDoubleScalarDoubleScalar
argument_list|)
expr_stmt|;
comment|// double scalar/column IF
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprDoubleScalarDoubleColumn
argument_list|)
expr_stmt|;
comment|// double scalar/long column IF
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprDoubleScalarLongColumn
argument_list|)
expr_stmt|;
comment|// Additional combinations of (long,double)X(column,scalar) for each of the second
comment|// and third arguments are omitted. We have coverage of all the source templates
comment|// already.
comment|// test for timestamp type
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col3Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// timestamp column/column IF
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|col2Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprLongColumnLongColumn
argument_list|)
expr_stmt|;
comment|// timestamp column/scalar IF where scalar is really a CAST of a constant to timestamp.
name|ExprNodeGenericFuncDesc
name|f
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|f
operator|.
name|setGenericUDF
argument_list|(
operator|new
name|GenericUDFTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|f
operator|.
name|setChildren
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"2013-11-05 00:00:00.000"
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
comment|// We check for two different classes below because initially the result
comment|// is IfExprLongColumnLongColumn but in the future if the system is enhanced
comment|// with constant folding then the result will be IfExprLongColumnLongScalar.
name|assertTrue
argument_list|(
name|IfExprLongColumnLongColumn
operator|.
name|class
operator|==
name|ve
operator|.
name|getClass
argument_list|()
operator|||
name|IfExprLongColumnLongScalar
operator|.
name|class
operator|==
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// timestamp scalar/scalar
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IfExprLongColumnLongColumn
operator|.
name|class
operator|==
name|ve
operator|.
name|getClass
argument_list|()
operator|||
name|IfExprLongScalarLongScalar
operator|.
name|class
operator|==
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// timestamp scalar/column
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IfExprLongColumnLongColumn
operator|.
name|class
operator|==
name|ve
operator|.
name|getClass
argument_list|()
operator|||
name|IfExprLongScalarLongColumn
operator|.
name|class
operator|==
name|ve
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// test for boolean type
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col3Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// column/column
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|col2Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprLongColumnLongColumn
argument_list|)
expr_stmt|;
comment|// column/scalar IF
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprLongColumnLongScalar
argument_list|)
expr_stmt|;
comment|// scalar/scalar IF
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprLongScalarLongScalar
argument_list|)
expr_stmt|;
comment|// scalar/column IF
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprLongScalarLongColumn
argument_list|)
expr_stmt|;
comment|// test for string type
name|constDesc2
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Alpha"
argument_list|)
expr_stmt|;
name|constDesc3
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Bravo"
argument_list|)
expr_stmt|;
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col3Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// column/column
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|col2Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprStringGroupColumnStringGroupColumn
argument_list|)
expr_stmt|;
comment|// column/scalar
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|constDesc3
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprStringGroupColumnStringScalar
argument_list|)
expr_stmt|;
comment|// scalar/scalar
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|constDesc2
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprStringScalarStringScalar
argument_list|)
expr_stmt|;
comment|// scalar/column
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprStringScalarStringGroupColumn
argument_list|)
expr_stmt|;
comment|// test for CHAR type
name|CharTypeInfo
name|charTypeInfo
init|=
operator|new
name|CharTypeInfo
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|constDesc2
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|charTypeInfo
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"Alpha"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|constDesc3
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|charTypeInfo
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"Bravo"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|charTypeInfo
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col3Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|charTypeInfo
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// column/column
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|col2Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprStringGroupColumnStringGroupColumn
argument_list|)
expr_stmt|;
comment|// column/scalar
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|constDesc3
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprStringGroupColumnCharScalar
argument_list|)
expr_stmt|;
comment|// scalar/scalar
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|constDesc2
argument_list|)
expr_stmt|;
comment|//    ve = vc.getVectorExpression(exprDesc);
comment|//    assertTrue(ve instanceof IfExprCharScalarCharScalar);
comment|// scalar/column
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprCharScalarStringGroupColumn
argument_list|)
expr_stmt|;
comment|// test for VARCHAR type
name|VarcharTypeInfo
name|varcharTypeInfo
init|=
operator|new
name|VarcharTypeInfo
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|constDesc2
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"Alpha"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|constDesc3
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"Bravo"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|col2Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col3Expr
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|varcharTypeInfo
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// column/column
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|col2Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprStringGroupColumnStringGroupColumn
argument_list|)
expr_stmt|;
comment|// column/scalar
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|constDesc3
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprStringGroupColumnVarCharScalar
argument_list|)
expr_stmt|;
comment|// scalar/scalar
name|children1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|constDesc2
argument_list|)
expr_stmt|;
comment|//    ve = vc.getVectorExpression(exprDesc);
comment|//    assertTrue(ve instanceof IfExprVarCharScalarVarCharScalar);
comment|// scalar/column
name|children1
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|col3Expr
argument_list|)
expr_stmt|;
name|ve
operator|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|IfExprVarCharScalarStringGroupColumn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSIMDEqual
parameter_list|()
block|{
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|==
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
operator|(
name|a
operator|-
name|b
operator|)
operator|^
operator|(
name|b
operator|-
name|a
operator|)
operator|)
operator|>>>
literal|63
operator|)
operator|^
literal|1
argument_list|)
expr_stmt|;
name|a
operator|=
literal|1
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|==
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
operator|(
name|a
operator|-
name|b
operator|)
operator|^
operator|(
name|b
operator|-
name|a
operator|)
operator|)
operator|>>>
literal|63
operator|)
operator|^
literal|1
argument_list|)
expr_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|==
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
operator|(
name|a
operator|-
name|b
operator|)
operator|^
operator|(
name|b
operator|-
name|a
operator|)
operator|)
operator|>>>
literal|63
operator|)
operator|^
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSIMDGreaterThan
parameter_list|()
block|{
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|>
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
name|b
operator|-
name|a
operator|)
operator|>>>
literal|63
argument_list|)
expr_stmt|;
name|a
operator|=
literal|1
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|>
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
name|b
operator|-
name|a
operator|)
operator|>>>
literal|63
argument_list|)
expr_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|>
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
name|b
operator|-
name|a
operator|)
operator|>>>
literal|63
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSIMDGreaterEqual
parameter_list|()
block|{
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|>=
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
name|a
operator|-
name|b
operator|)
operator|>>>
literal|63
operator|)
operator|^
literal|1
argument_list|)
expr_stmt|;
name|a
operator|=
literal|1
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|>=
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
name|a
operator|-
name|b
operator|)
operator|>>>
literal|63
operator|)
operator|^
literal|1
argument_list|)
expr_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|>=
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
name|a
operator|-
name|b
operator|)
operator|>>>
literal|63
operator|)
operator|^
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSIMDLessEqual
parameter_list|()
block|{
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|<=
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
name|b
operator|-
name|a
operator|)
operator|>>>
literal|63
operator|)
operator|^
literal|1
argument_list|)
expr_stmt|;
name|a
operator|=
literal|1
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|<=
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
name|b
operator|-
name|a
operator|)
operator|>>>
literal|63
operator|)
operator|^
literal|1
argument_list|)
expr_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|<=
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
name|b
operator|-
name|a
operator|)
operator|>>>
literal|63
operator|)
operator|^
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSIMDLessThan
parameter_list|()
block|{
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|<
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
name|a
operator|-
name|b
operator|)
operator|>>>
literal|63
argument_list|)
expr_stmt|;
name|a
operator|=
literal|1
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|<
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
name|a
operator|-
name|b
operator|)
operator|>>>
literal|63
argument_list|)
expr_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|<
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
name|a
operator|-
name|b
operator|)
operator|>>>
literal|63
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSIMDNotEqual
parameter_list|()
block|{
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|!=
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
name|a
operator|-
name|b
operator|)
operator|^
operator|(
name|b
operator|-
name|a
operator|)
operator|)
operator|>>>
literal|63
argument_list|)
expr_stmt|;
name|a
operator|=
literal|1
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|!=
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
name|a
operator|-
name|b
operator|)
operator|^
operator|(
name|b
operator|-
name|a
operator|)
operator|)
operator|>>>
literal|63
argument_list|)
expr_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
name|b
operator|=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|!=
name|b
condition|?
literal|1
else|:
literal|0
argument_list|,
operator|(
operator|(
name|a
operator|-
name|b
operator|)
operator|^
operator|(
name|b
operator|-
name|a
operator|)
operator|)
operator|>>>
literal|63
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

