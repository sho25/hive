begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringColGreaterStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColAddLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColModuloLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColMultiplyLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColSubtractLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPMod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPMultiply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorizationContext
block|{
annotation|@
name|Test
specifier|public
name|void
name|testArithmeticExpressionVectorization
parameter_list|()
throws|throws
name|HiveException
block|{
comment|/**      * Create original expression tree for following      * (plus (minus (plus col1 col2) col3) (multiply col4 (mod col5 col6)) )      */
name|GenericUDFBridge
name|udf1
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"+"
argument_list|,
literal|true
argument_list|,
name|UDFOPPlus
operator|.
name|class
argument_list|)
decl_stmt|;
name|GenericUDFBridge
name|udf2
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"-"
argument_list|,
literal|true
argument_list|,
name|UDFOPMinus
operator|.
name|class
argument_list|)
decl_stmt|;
name|GenericUDFBridge
name|udf3
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"*"
argument_list|,
literal|true
argument_list|,
name|UDFOPMultiply
operator|.
name|class
argument_list|)
decl_stmt|;
name|GenericUDFBridge
name|udf4
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"+"
argument_list|,
literal|true
argument_list|,
name|UDFOPPlus
operator|.
name|class
argument_list|)
decl_stmt|;
name|GenericUDFBridge
name|udf5
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"%"
argument_list|,
literal|true
argument_list|,
name|UDFOPMod
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|sumExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|sumExpr
operator|.
name|setGenericUDF
argument_list|(
name|udf1
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|minusExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|minusExpr
operator|.
name|setGenericUDF
argument_list|(
name|udf2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|multiplyExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|multiplyExpr
operator|.
name|setGenericUDF
argument_list|(
name|udf3
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|sum2Expr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|sum2Expr
operator|.
name|setGenericUDF
argument_list|(
name|udf4
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|modExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|modExpr
operator|.
name|setGenericUDF
argument_list|(
name|udf5
argument_list|)
expr_stmt|;
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col2Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col3Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col4Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col4"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col5Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col5"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|col6Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"col6"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children3
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children4
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children5
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|minusExpr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|multiplyExpr
argument_list|)
expr_stmt|;
name|sumExpr
operator|.
name|setChildExprs
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|sum2Expr
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|col3Expr
argument_list|)
expr_stmt|;
name|minusExpr
operator|.
name|setChildExprs
argument_list|(
name|children2
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|col2Expr
argument_list|)
expr_stmt|;
name|sum2Expr
operator|.
name|setChildExprs
argument_list|(
name|children3
argument_list|)
expr_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|col4Expr
argument_list|)
expr_stmt|;
name|children4
operator|.
name|add
argument_list|(
name|modExpr
argument_list|)
expr_stmt|;
name|multiplyExpr
operator|.
name|setChildExprs
argument_list|(
name|children4
argument_list|)
expr_stmt|;
name|children5
operator|.
name|add
argument_list|(
name|col5Expr
argument_list|)
expr_stmt|;
name|children5
operator|.
name|add
argument_list|(
name|col6Expr
argument_list|)
expr_stmt|;
name|modExpr
operator|.
name|setChildExprs
argument_list|(
name|children5
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|columnMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col3"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col4"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col5"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col6"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|//Generate vectorized expression
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
name|columnMap
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|sumExpr
argument_list|)
decl_stmt|;
comment|//Verify vectorized expression
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|LongColAddLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ve
operator|.
name|getChildExpressions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|VectorExpression
name|childExpr1
init|=
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|VectorExpression
name|childExpr2
init|=
name|ve
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|ve
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childExpr1
operator|instanceof
name|LongColSubtractLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childExpr1
operator|.
name|getChildExpressions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childExpr1
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|LongColAddLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|childExpr1
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|childExpr1
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childExpr2
operator|instanceof
name|LongColMultiplyLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childExpr2
operator|.
name|getChildExpressions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childExpr2
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|LongColModuloLongColumn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|childExpr2
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|childExpr2
operator|.
name|getChildExpressions
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOutputColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringFilterExpressions
parameter_list|()
throws|throws
name|HiveException
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Alpha"
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|exprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|exprDesc
operator|.
name|setChildExprs
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|columnMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
name|columnMap
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vc
operator|.
name|setOperatorType
argument_list|(
name|OperatorType
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ve
operator|instanceof
name|FilterStringColGreaterStringScalar
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

