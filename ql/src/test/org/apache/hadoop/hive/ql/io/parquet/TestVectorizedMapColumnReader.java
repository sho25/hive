begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|vector
operator|.
name|VectorizedParquetRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|example
operator|.
name|data
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|example
operator|.
name|data
operator|.
name|simple
operator|.
name|SimpleGroupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorizedMapColumnReader
extends|extends
name|VectorizedColumnReaderTestBase
block|{
specifier|protected
specifier|static
name|void
name|writeMapData
parameter_list|(
name|ParquetWriter
argument_list|<
name|Group
argument_list|>
name|writer
parameter_list|,
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleGroupFactory
name|f
init|=
operator|new
name|SimpleGroupFactory
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|int
name|mapMaxSize
init|=
literal|4
decl_stmt|;
name|int
name|mapElementIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elementNum
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|isNull
init|=
name|isNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Group
name|group
init|=
name|f
operator|.
name|newGroup
argument_list|()
decl_stmt|;
name|int
name|mapSize
init|=
name|i
operator|%
name|mapMaxSize
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|isNull
condition|)
block|{
comment|// the map_field is to test multiple level map definition
name|Group
name|multipleLevelGroup
init|=
name|group
operator|.
name|addGroup
argument_list|(
literal|"map_field"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|mapSize
condition|;
name|j
operator|++
control|)
block|{
name|int
name|intValForMap
init|=
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|mapElementIndex
argument_list|)
decl_stmt|;
name|long
name|longValForMap
init|=
name|getLongValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|mapElementIndex
argument_list|)
decl_stmt|;
name|double
name|doubleValForMap
init|=
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|mapElementIndex
argument_list|)
decl_stmt|;
name|float
name|floatValForMap
init|=
name|getFloatValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|mapElementIndex
argument_list|)
decl_stmt|;
name|Binary
name|binaryValForMap
init|=
name|getBinaryValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|mapElementIndex
argument_list|)
decl_stmt|;
name|HiveDecimal
name|hd
init|=
name|getDecimal
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|mapElementIndex
argument_list|)
operator|.
name|setScale
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|hdw
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|hd
argument_list|)
decl_stmt|;
name|Binary
name|decimalValForMap
init|=
name|Binary
operator|.
name|fromConstantByteArray
argument_list|(
name|hdw
operator|.
name|getInternalStorage
argument_list|()
argument_list|)
decl_stmt|;
name|group
operator|.
name|addGroup
argument_list|(
literal|"map_int32"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|intValForMap
argument_list|)
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
name|intValForMap
argument_list|)
expr_stmt|;
name|group
operator|.
name|addGroup
argument_list|(
literal|"map_int64"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|longValForMap
argument_list|)
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
name|longValForMap
argument_list|)
expr_stmt|;
name|group
operator|.
name|addGroup
argument_list|(
literal|"map_double"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|doubleValForMap
argument_list|)
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
name|doubleValForMap
argument_list|)
expr_stmt|;
name|group
operator|.
name|addGroup
argument_list|(
literal|"map_float"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|floatValForMap
argument_list|)
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
name|floatValForMap
argument_list|)
expr_stmt|;
name|group
operator|.
name|addGroup
argument_list|(
literal|"map_binary"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|binaryValForMap
argument_list|)
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
name|binaryValForMap
argument_list|)
expr_stmt|;
name|group
operator|.
name|addGroup
argument_list|(
literal|"map_decimal"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|decimalValForMap
argument_list|)
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
name|decimalValForMap
argument_list|)
expr_stmt|;
name|multipleLevelGroup
operator|.
name|addGroup
argument_list|(
literal|"map"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|binaryValForMap
argument_list|)
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
name|binaryValForMap
argument_list|)
expr_stmt|;
name|mapElementIndex
operator|++
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|write
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|writeRepeateMapData
parameter_list|(
name|ParquetWriter
argument_list|<
name|Group
argument_list|>
name|writer
parameter_list|,
name|int
name|elementNum
parameter_list|,
name|boolean
name|isNull
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleGroupFactory
name|f
init|=
operator|new
name|SimpleGroupFactory
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|int
name|mapMaxSize
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elementNum
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|group
init|=
name|f
operator|.
name|newGroup
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNull
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|mapMaxSize
condition|;
name|j
operator|++
control|)
block|{
name|group
operator|.
name|addGroup
argument_list|(
literal|"map_int32_for_repeat_test"
argument_list|)
operator|.
name|append
argument_list|(
literal|"key"
argument_list|,
name|j
argument_list|)
operator|.
name|append
argument_list|(
literal|"value"
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|write
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapReadLessOneBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|isDictionaryEncoding
init|=
literal|false
decl_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|testMapReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|isDictionaryEncoding
operator|=
literal|true
expr_stmt|;
name|writeMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|testMapReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapReadEqualOneBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|isDictionaryEncoding
init|=
literal|false
decl_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|testMapReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|isDictionaryEncoding
operator|=
literal|true
expr_stmt|;
name|writeMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|testMapReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapReadMoreOneBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|isDictionaryEncoding
init|=
literal|false
decl_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1025
argument_list|)
expr_stmt|;
name|testMapReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1025
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|isDictionaryEncoding
operator|=
literal|true
expr_stmt|;
name|writeMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|,
literal|1025
argument_list|)
expr_stmt|;
name|testMapReadAllType
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|1025
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepeateMapRead
parameter_list|()
throws|throws
name|Exception
block|{
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1023
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testRepeateMapRead
argument_list|(
literal|1023
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1023
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testRepeateMapRead
argument_list|(
literal|1023
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testRepeateMapRead
argument_list|(
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testRepeateMapRead
argument_list|(
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1025
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testRepeateMapRead
argument_list|(
literal|1025
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
name|writeRepeateMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|1025
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testRepeateMapRead
argument_list|(
literal|1025
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleDefinitionMapRead
parameter_list|()
throws|throws
name|Exception
block|{
name|removeFile
argument_list|()
expr_stmt|;
name|writeMapData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|testMapRead
argument_list|(
literal|false
argument_list|,
literal|"multipleLevel"
argument_list|,
literal|1023
argument_list|)
expr_stmt|;
name|removeFile
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testMapReadAllType
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|elementNum
parameter_list|)
throws|throws
name|Exception
block|{
name|testMapRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"int"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testMapRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"long"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testMapRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"double"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testMapRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"float"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testMapRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"binary"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
name|testMapRead
argument_list|(
name|isDictionaryEncoding
argument_list|,
literal|"decimal"
argument_list|,
name|elementNum
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMapRead
parameter_list|(
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|elementNum
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|setTypeConfiguration
argument_list|(
name|type
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
name|getSchema
argument_list|(
name|type
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|MapColumnVector
name|mapVector
init|=
operator|(
name|MapColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
comment|//since Repeating only happens when offset length is 1.
name|assertEquals
argument_list|(
operator|(
name|mapVector
operator|.
name|offsets
operator|.
name|length
operator|==
literal|1
operator|)
argument_list|,
name|mapVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapVector
operator|.
name|offsets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|row
operator|==
name|elementNum
condition|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|mapVector
operator|.
name|offsets
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
name|long
name|start
init|=
name|mapVector
operator|.
name|offsets
index|[
name|i
index|]
decl_stmt|;
name|long
name|length
init|=
name|mapVector
operator|.
name|lengths
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|isNull
init|=
name|isNull
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNull
condition|)
block|{
name|assertEquals
argument_list|(
name|mapVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|long
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertValue
argument_list|(
name|type
argument_list|,
name|mapVector
operator|.
name|keys
argument_list|,
name|isDictionaryEncoding
argument_list|,
name|index
argument_list|,
call|(
name|int
call|)
argument_list|(
name|start
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|assertValue
argument_list|(
name|type
argument_list|,
name|mapVector
operator|.
name|values
argument_list|,
name|isDictionaryEncoding
argument_list|,
name|index
argument_list|,
call|(
name|int
call|)
argument_list|(
name|start
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
name|row
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|elementNum
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testRepeateMapRead
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|boolean
name|isNull
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"map_int32_for_repeat_test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"map<int,int>"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|String
name|schema
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  repeated group map_int32_for_repeat_test (MAP_KEY_VALUE) {\n"
operator|+
literal|"    required int32 key;\n"
operator|+
literal|"    optional int32 value;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createTestParquetReader
argument_list|(
name|schema
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|MapColumnVector
name|mapVector
init|=
operator|(
name|MapColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|mapVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isNull
argument_list|,
name|mapVector
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapVector
operator|.
name|offsets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|row
operator|==
name|elementNum
condition|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|mapVector
operator|.
name|offsets
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
name|row
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|elementNum
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setTypeConfiguration
parameter_list|(
name|String
name|type
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"map_int32"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"map<int,int>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"map_int64"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"map<bigint,bigint>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"map_double"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"map<double,double>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"map_float"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"map<float,float>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"binary"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"map_binary"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"map<string,string>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"decimal"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"map_decimal"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"map<decimal(5,2),decimal(5,2)>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"multipleLevel"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"map_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"map<string,string>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getSchema
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|String
name|schemaFormat
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  repeated group map_%s (MAP_KEY_VALUE) {\n"
operator|+
literal|"    required %s key %s;\n"
operator|+
literal|"    optional %s value %s;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"int"
case|:
return|return
name|String
operator|.
name|format
argument_list|(
name|schemaFormat
argument_list|,
literal|"int32"
argument_list|,
literal|"int32"
argument_list|,
literal|""
argument_list|,
literal|"int32"
argument_list|,
literal|""
argument_list|)
return|;
case|case
literal|"long"
case|:
return|return
name|String
operator|.
name|format
argument_list|(
name|schemaFormat
argument_list|,
literal|"int64"
argument_list|,
literal|"int64"
argument_list|,
literal|""
argument_list|,
literal|"int64"
argument_list|,
literal|""
argument_list|)
return|;
case|case
literal|"double"
case|:
return|return
name|String
operator|.
name|format
argument_list|(
name|schemaFormat
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|,
literal|""
argument_list|,
literal|"double"
argument_list|,
literal|""
argument_list|)
return|;
case|case
literal|"float"
case|:
return|return
name|String
operator|.
name|format
argument_list|(
name|schemaFormat
argument_list|,
literal|"float"
argument_list|,
literal|"float"
argument_list|,
literal|""
argument_list|,
literal|"float"
argument_list|,
literal|""
argument_list|)
return|;
case|case
literal|"binary"
case|:
return|return
name|String
operator|.
name|format
argument_list|(
name|schemaFormat
argument_list|,
literal|"binary"
argument_list|,
literal|"binary"
argument_list|,
literal|""
argument_list|,
literal|"binary"
argument_list|,
literal|""
argument_list|)
return|;
case|case
literal|"decimal"
case|:
return|return
name|String
operator|.
name|format
argument_list|(
name|schemaFormat
argument_list|,
literal|"decimal"
argument_list|,
literal|"binary"
argument_list|,
literal|"(DECIMAL(5,2))"
argument_list|,
literal|"binary"
argument_list|,
literal|"(DECIMAL(5,2))"
argument_list|)
return|;
case|case
literal|"multipleLevel"
case|:
return|return
literal|"message hive_schema {\n"
operator|+
literal|"optional group map_field (MAP) {\n"
operator|+
literal|"  repeated group map (MAP_KEY_VALUE) {\n"
operator|+
literal|"    required binary key;\n"
operator|+
literal|"    optional binary value;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
operator|+
literal|"}\n"
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported type for TestVectorizedMapColumnReader!"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|assertValue
parameter_list|(
name|String
name|type
parameter_list|,
name|ColumnVector
name|childVector
parameter_list|,
name|boolean
name|isDictionaryEncoding
parameter_list|,
name|int
name|valueIndex
parameter_list|,
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getIntValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|LongColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getLongValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|LongColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getDoubleValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getFloatValue
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"binary"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"multipleLevel"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|actual
init|=
operator|new
name|String
argument_list|(
name|ArrayUtils
operator|.
name|subarray
argument_list|(
operator|(
operator|(
name|BytesColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
argument_list|,
operator|(
operator|(
name|BytesColumnVector
operator|)
name|childVector
operator|)
operator|.
name|start
index|[
name|position
index|]
argument_list|,
operator|(
operator|(
name|BytesColumnVector
operator|)
name|childVector
operator|)
operator|.
name|start
index|[
name|position
index|]
operator|+
operator|(
operator|(
name|BytesColumnVector
operator|)
name|childVector
operator|)
operator|.
name|length
index|[
name|position
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getStr
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"decimal"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|getDecimal
argument_list|(
name|isDictionaryEncoding
argument_list|,
name|valueIndex
argument_list|)
argument_list|,
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|childVector
operator|)
operator|.
name|vector
index|[
name|position
index|]
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported type for TestVectorizedMapColumnReader!"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

