begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TestVectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColDivideDecimalScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalScalarDivideDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalScalarModuloDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColAddDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColDivideDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColModuloDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColModuloDecimalScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColMultiplyDecimalScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColSubtractDecimalScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColMultiplyDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColSubtractDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColAddLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColAddLongScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColSubtractDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColAddDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColMultiplyDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColAddDecimalScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColSubtractDecimalScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalColMultiplyDecimalScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalScalarAddDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalScalarSubtractDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DecimalScalarMultiplyDecimalColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests for vectorized arithmetic expressions.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorArithmeticExpressions
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongScalarNoNulls
parameter_list|()
block|{
name|VectorizedRowBatch
name|vrg
init|=
name|getVectorizedRowBatchSingleLongVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|LongColAddLongScalar
name|expr
init|=
operator|new
name|LongColAddLongScalar
argument_list|(
literal|0
argument_list|,
literal|23
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
comment|//verify
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
operator|*
literal|37
operator|+
literal|23
argument_list|,
operator|(
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getVectorizedRowBatchSingleLongVector
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|vrg
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|lcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|i
operator|*
literal|37
expr_stmt|;
block|}
name|vrg
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lcv
expr_stmt|;
name|vrg
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|vrg
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|vrg
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
name|getVectorizedRowBatch2LongInDoubleOut
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
decl_stmt|,
name|lcv2
decl_stmt|;
name|lcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|lcv
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|i
operator|*
literal|37
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lcv
expr_stmt|;
name|lcv2
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|lcv2
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|lcv2
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|i
operator|*
literal|37
expr_stmt|;
block|}
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
expr_stmt|;
return|return
name|batch
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongScalarWithNulls
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatchSingleLongVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|LongColumnVector
name|lcvOut
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|TestVectorizedRowBatch
operator|.
name|addRandomNulls
argument_list|(
name|lcv
argument_list|)
expr_stmt|;
name|LongColAddLongScalar
name|expr
init|=
operator|new
name|LongColAddLongScalar
argument_list|(
literal|0
argument_list|,
literal|23
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// verify
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|lcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
operator|*
literal|37
operator|+
literal|23
argument_list|,
name|lcvOut
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lcvOut
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lcvOut
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lcvOut
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyLongNullDataVectorEntries
argument_list|(
name|lcvOut
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|batch
operator|.
name|selectedInUse
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongScalarWithRepeating
parameter_list|()
block|{
name|LongColumnVector
name|in
decl_stmt|,
name|out
decl_stmt|;
name|VectorizedRowBatch
name|batch
decl_stmt|;
name|LongColAddLongScalar
name|expr
decl_stmt|;
comment|// Case 1: is repeating, no nulls
name|batch
operator|=
name|getVectorizedRowBatchSingleLongVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|in
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|out
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|out
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|expr
operator|=
operator|new
name|LongColAddLongScalar
argument_list|(
literal|0
argument_list|,
literal|23
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// verify
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|out
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
literal|0
operator|*
literal|37
operator|+
literal|23
argument_list|)
expr_stmt|;
comment|// Case 2: is repeating, has nulls
name|batch
operator|=
name|getVectorizedRowBatchSingleLongVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|in
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|out
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|out
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|out
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|out
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|=
operator|new
name|LongColAddLongScalar
argument_list|(
literal|0
argument_list|,
literal|23
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// verify
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|out
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|out
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyLongNullDataVectorEntries
argument_list|(
name|out
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|batch
operator|.
name|selectedInUse
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
comment|/* Make sure all the NULL entries in this long column output vector have their data vector    * element set to the correct value, as per the specification, to prevent later arithmetic    * errors (e.g. zero-divide).    */
specifier|public
specifier|static
name|void
name|verifyLongNullDataVectorEntries
parameter_list|(
name|LongColumnVector
name|v
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|boolean
name|selectedInUse
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|0
operator|||
name|v
operator|.
name|noNulls
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|v
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|assertEquals
argument_list|(
name|LongColumnVector
operator|.
name|NULL_VALUE
argument_list|,
name|v
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
name|LongColumnVector
operator|.
name|NULL_VALUE
argument_list|,
name|v
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|v
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
name|LongColumnVector
operator|.
name|NULL_VALUE
argument_list|,
name|v
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongColumn
parameter_list|()
block|{
name|int
name|seed
init|=
literal|17
decl_stmt|;
name|VectorizedRowBatch
name|vrg
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|getVectorizedRowBatch
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
literal|6
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv0
init|=
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|LongColumnVector
name|lcv1
init|=
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|LongColumnVector
name|lcv2
init|=
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|LongColumnVector
name|lcv3
init|=
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|LongColumnVector
name|lcv4
init|=
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|4
index|]
decl_stmt|;
name|LongColumnVector
name|lcv5
init|=
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|5
index|]
decl_stmt|;
name|LongColAddLongColumn
name|expr
init|=
operator|new
name|LongColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|seed
operator|*
literal|3
argument_list|,
name|lcv2
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|lcv2
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// Now set one column nullable
name|lcv1
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|lcv1
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|lcv2
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// set output isRepeating to true to make sure it gets over-written
name|lcv2
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
comment|// similarly with noNulls
name|expr
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lcv2
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lcv2
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lcv2
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|verifyLongNullDataVectorEntries
argument_list|(
name|lcv2
argument_list|,
name|vrg
operator|.
name|selected
argument_list|,
name|vrg
operator|.
name|selectedInUse
argument_list|,
name|vrg
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Now set other column nullable too
name|lcv0
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|lcv0
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|lcv0
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lcv2
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lcv2
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lcv2
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|verifyLongNullDataVectorEntries
argument_list|(
name|lcv2
argument_list|,
name|vrg
operator|.
name|selected
argument_list|,
name|vrg
operator|.
name|selectedInUse
argument_list|,
name|vrg
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Now test with repeating flag
name|lcv3
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|LongColAddLongColumn
name|expr2
init|=
operator|new
name|LongColAddLongColumn
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|expr2
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|seed
operator|*
operator|(
literal|4
operator|+
literal|5
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
argument_list|,
name|lcv5
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Repeating with other as nullable
name|lcv4
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|lcv4
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr2
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lcv5
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lcv5
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|verifyLongNullDataVectorEntries
argument_list|(
name|lcv5
argument_list|,
name|vrg
operator|.
name|selected
argument_list|,
name|vrg
operator|.
name|selectedInUse
argument_list|,
name|vrg
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Repeating null value
name|lcv3
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|lcv3
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|lcv3
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr2
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lcv5
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lcv5
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lcv5
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyLongNullDataVectorEntries
argument_list|(
name|lcv5
argument_list|,
name|vrg
operator|.
name|selected
argument_list|,
name|vrg
operator|.
name|selectedInUse
argument_list|,
name|vrg
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Neither input has nulls. Verify that this propagates to output.
name|vrg
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
name|lcv0
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|lcv1
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|lcv0
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|lcv1
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|lcv2
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
comment|// set output noNulls to true to make sure it gets over-written
name|lcv2
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// similarly with isRepeating
name|expr
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lcv2
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lcv2
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideLongColumn
parameter_list|()
block|{
comment|/* Testing for equality of doubles after a math operation is      * not always reliable so use this as a tolerance.      */
specifier|final
name|double
name|eps
init|=
literal|1e-7d
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|getVectorizedRowBatch2LongInDoubleOut
argument_list|()
decl_stmt|;
name|LongColDivideLongColumn
name|expr
init|=
operator|new
name|LongColDivideLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|DoubleColumnVector
name|out
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
comment|// Set so we can verify they are reset by operation
name|out
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|out
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// 0/0 for entry 0 should work but generate NaN
name|assertFalse
argument_list|(
name|out
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|out
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify NULL output in entry 1 is correct
name|assertTrue
argument_list|(
name|out
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|out
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// check entries beyond first 2
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|!=
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|out
operator|.
name|vector
index|[
name|i
index|]
operator|>
literal|1.0d
operator|-
name|eps
operator|&&
name|out
operator|.
name|vector
index|[
name|i
index|]
operator|<
literal|1.0d
operator|+
name|eps
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|out
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColAddDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColAddDecimalColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-2.30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test nulls propagation
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|c0
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|c0
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|c0
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Verify null output data entry is not 0, but rather the value specified by design,
comment|// which is the minimum non-0 value, 0.01 in this case.
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that overflow produces NULL
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|c0
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|c0
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9999999999999999.99"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set to max possible value
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// will cause overflow for result at position 0, must yield NULL
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// verify proper null output data value
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test left input repeating
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|c0
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|c0
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test both inputs repeating
name|DecimalColumnVector
name|c1
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|c1
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test right input repeating
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|c1
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|c1
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|c1
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.00"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Spot check decimal column-column subtract
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColSubtractDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColSubtractDecimalColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-4.30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1.00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that underflow produces NULL
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|c0
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|c0
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-9999999999999999.99"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set to min possible value
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// will cause underflow for result at position 0, must yield NULL
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Spot check decimal column-column multiply
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColMultiplyDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColMultiplyDecimalColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-3.30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that underflow produces NULL
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|c0
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|c0
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9999999999999999.99"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set to max possible value
name|DecimalColumnVector
name|c1
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|c1
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.00"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// will cause overflow for result at position 0, must yield NULL
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* Test decimal column to decimal scalar addition. This is used to cover all the    * cases used in the source code template ColumnArithmeticScalarDecimal.txt.    */
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColAddDecimalScalar
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColAddDecimalScalar
argument_list|(
literal|0
argument_list|,
name|d
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-2.30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test null propagation
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test repeating case, no nulls
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test repeating case for null value
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test that overflow produces null
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9999999999999999.99"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set to max possible value
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* Test decimal column to decimal scalar division. This is used to cover all the    * cases used in the source code template ColumnDivideScalarDecimal.txt.    * The template is used for division and modulo.    */
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColDivideDecimalScalar
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.00"
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColDivideDecimalScalar
argument_list|(
literal|0
argument_list|,
name|d
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.6"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1.65"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test null propagation
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test repeating case, no nulls
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.6"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test repeating case for null value
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test that zero-divide produces null for all output values
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|expr
operator|=
operator|new
name|DecimalColDivideDecimalScalar
argument_list|(
literal|0
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
comment|/* Test decimal scalar divided column. This tests the primary logic    * for template ScalarDivideColumnDecimal.txt.    */
annotation|@
name|Test
specifier|public
name|void
name|testDecimalScalarDivideDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.96"
argument_list|)
decl_stmt|;
comment|// 1.20 * 3.30
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalScalarDivideDecimalColumn
argument_list|(
name|d
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1.2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// entry 2 is null due to zero-divide
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// test null propagation
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test repeating case, no nulls
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test repeating case for null value
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Spot check Decimal Col-Scalar Modulo
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColModuloDecimalScalar
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.00"
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColModuloDecimalScalar
argument_list|(
literal|0
argument_list|,
name|d
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1.30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// try again with some different data values and divisor
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|in
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"15.40"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-17.20"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"70.00"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"4.75"
argument_list|)
expr_stmt|;
name|expr
operator|=
operator|new
name|DecimalColModuloDecimalScalar
argument_list|(
literal|0
argument_list|,
name|d
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.15"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-2.95"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.50"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// try a zero-divide to show a repeating NULL is produced
name|d
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00"
argument_list|)
expr_stmt|;
name|expr
operator|=
operator|new
name|DecimalColModuloDecimalScalar
argument_list|(
literal|0
argument_list|,
name|d
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
comment|// Spot check decimal scalar-column modulo
annotation|@
name|Test
specifier|public
name|void
name|testDecimalScalarModuloDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.00"
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalScalarModuloDecimalColumn
argument_list|(
name|d
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.80"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// entry 2 will be null due to zero-divide
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// try again with some different data values
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|expr
operator|=
operator|new
name|DecimalScalarModuloDecimalColumn
argument_list|(
name|d
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.50"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.80"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.70"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.40"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.60"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColDivideDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|DecimalColumnVector
name|in1
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|in1
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.50"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColDivideDecimalColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
comment|// all divides are by 0.50 so the result column is 2 times col 0.
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-6.6"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test null on left
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test null on right
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test null on both sides
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// test repeating on left
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test repeating on right
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test both repeating
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test zero-divide to show it results in NULL
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Spot check decimal column modulo decimal column
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColModuloDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|DecimalColumnVector
name|in1
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|in1
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.50"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColModuloDecimalColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-0.30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Spot check correctness of decimal column subtract decimal scalar. The case for    * addition checks all the cases for the template, so don't do that redundantly here.    */
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColSubtractDecimalScalar
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColSubtractDecimalScalar
argument_list|(
literal|0
argument_list|,
name|d
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-4.30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that underflow produces null
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|in
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-9999999999999999.99"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set to min possible value
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* Spot check correctness of decimal column multiply decimal scalar. The case for    * addition checks all the cases for the template, so don't do that redundantly here.    */
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColMultiplyDecimalScalar
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalColMultiplyDecimalScalar
argument_list|(
literal|0
argument_list|,
name|d
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.40"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-6.60"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that overflow produces null
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|in
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9999999999999999.99"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set to max possible value
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* Test decimal scalar to decimal column addition. This is used to cover all the    * cases used in the source code template ScalarArithmeticColumnDecimal.txt.    */
annotation|@
name|Test
specifier|public
name|void
name|testDecimalScalarAddDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalScalarAddDecimalColumn
argument_list|(
name|d
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-2.30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test null propagation
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test repeating case, no nulls
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test repeating case for null value
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test that overflow produces null
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9999999999999999.99"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set to max possible value
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* Spot check correctness of decimal scalar subtract decimal column. The case for    * addition checks all the cases for the template, so don't do that redundantly here.    */
annotation|@
name|Test
specifier|public
name|void
name|testDecimalScalarSubtractDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalScalarSubtractDecimalColumn
argument_list|(
name|d
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-0.20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"4.30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that overflow produces null
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|in
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-9999999999999999.99"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set to min possible value
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* Spot check correctness of decimal scalar multiply decimal column. The case for    * addition checks all the cases for the template, so don't do that redundantly here.    */
annotation|@
name|Test
specifier|public
name|void
name|testDecimalScalarMultiplyDecimalColumn
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
decl_stmt|;
name|HiveDecimal
name|d
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|DecimalScalarMultiplyDecimalColumn
argument_list|(
name|d
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// test without nulls
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.40"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-6.60"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that overflow produces null
name|b
operator|=
name|getVectorizedRowBatch3DecimalCols
argument_list|()
expr_stmt|;
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|in
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9999999999999999.99"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set to max possible value
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Make a decimal batch with three columns, including two for inputs and one for the result.
specifier|private
name|VectorizedRowBatch
name|getVectorizedRowBatch3DecimalCols
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|v0
decl_stmt|,
name|v1
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v0
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v1
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|v0
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.20"
argument_list|)
argument_list|)
expr_stmt|;
name|v0
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-3.30"
argument_list|)
argument_list|)
expr_stmt|;
name|v0
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.00"
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.00"
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.00"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|3
expr_stmt|;
return|return
name|b
return|;
block|}
block|}
end_class

end_unit

