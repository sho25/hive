begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|CheckFastRowHashMap
operator|.
name|VerifyFastRowHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableSerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|SerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinarySerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/*  * An multi-key value hash map optimized for vector map join.  *  * The key is uninterpreted bytes.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorMapJoinFastRowHashMap
extends|extends
name|CommonFastHashTable
block|{
specifier|public
specifier|static
specifier|final
name|Properties
name|ANY_TABLE_PROPERTIES
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|TableDesc
name|tableDesc
init|=
operator|new
name|TableDesc
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tableDesc
operator|.
name|setProperties
argument_list|(
name|ANY_TABLE_PROPERTIES
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAndVerifyRows
parameter_list|(
name|VectorRandomRowSource
name|valueSource
parameter_list|,
name|Object
index|[]
index|[]
name|rows
parameter_list|,
name|VectorMapJoinFastHashTable
name|map
parameter_list|,
name|HashTableKeyType
name|hashTableKeyType
parameter_list|,
name|VerifyFastRowHashMap
name|verifyTable
parameter_list|,
name|String
index|[]
name|keyTypeNames
parameter_list|,
name|boolean
name|doClipping
parameter_list|,
name|boolean
name|useExactBytes
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
specifier|final
name|int
name|keyCount
init|=
name|keyTypeNames
operator|.
name|length
decl_stmt|;
name|PrimitiveTypeInfo
index|[]
name|keyPrimitiveTypeInfos
init|=
operator|new
name|PrimitiveTypeInfo
index|[
name|keyCount
index|]
decl_stmt|;
name|PrimitiveCategory
index|[]
name|keyPrimitiveCategories
init|=
operator|new
name|PrimitiveCategory
index|[
name|keyCount
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|keyPrimitiveObjectInspectorList
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|keyCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyCount
condition|;
name|i
operator|++
control|)
block|{
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|keyTypeNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|keyPrimitiveTypeInfos
index|[
name|i
index|]
operator|=
name|primitiveTypeInfo
expr_stmt|;
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|keyPrimitiveCategories
index|[
name|i
index|]
operator|=
name|primitiveCategory
expr_stmt|;
name|keyPrimitiveObjectInspectorList
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|primitiveTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
index|[]
name|keyColumnSortOrderIsDesc
init|=
operator|new
name|boolean
index|[
name|keyCount
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|keyColumnSortOrderIsDesc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|keyColumnNullMarker
init|=
operator|new
name|byte
index|[
name|keyCount
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|keyColumnNullMarker
argument_list|,
name|BinarySortableSerDe
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|byte
index|[]
name|keyColumnNotNullMarker
init|=
operator|new
name|byte
index|[
name|keyCount
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|keyColumnNotNullMarker
argument_list|,
name|BinarySortableSerDe
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|BinarySortableSerializeWrite
name|keySerializeWrite
init|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
name|keyColumnSortOrderIsDesc
argument_list|,
name|keyColumnNullMarker
argument_list|,
name|keyColumnNotNullMarker
argument_list|)
decl_stmt|;
name|TypeInfo
index|[]
name|valueTypeInfos
init|=
name|valueSource
operator|.
name|typeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|columnCount
init|=
name|valueTypeInfos
operator|.
name|length
decl_stmt|;
name|SerializeWrite
name|valueSerializeWrite
init|=
operator|new
name|LazyBinarySerializeWrite
argument_list|(
name|columnCount
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|rows
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|valueRow
init|=
name|rows
index|[
name|i
index|]
decl_stmt|;
name|Output
name|valueOutput
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
operator|(
operator|(
name|LazyBinarySerializeWrite
operator|)
name|valueSerializeWrite
operator|)
operator|.
name|set
argument_list|(
name|valueOutput
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|columnCount
condition|;
name|index
operator|++
control|)
block|{
name|VerifyFastRow
operator|.
name|serializeWrite
argument_list|(
name|valueSerializeWrite
argument_list|,
name|valueTypeInfos
index|[
name|index
index|]
argument_list|,
name|valueRow
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|value
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|valueOutput
operator|.
name|getData
argument_list|()
argument_list|,
name|valueOutput
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add a new key or add a value to an existing key?
name|byte
index|[]
name|key
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
operator|||
name|verifyTable
operator|.
name|getCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Object
index|[]
name|keyRow
init|=
name|VectorRandomRowSource
operator|.
name|randomWritablePrimitiveRow
argument_list|(
name|keyCount
argument_list|,
name|random
argument_list|,
name|keyPrimitiveTypeInfos
argument_list|)
decl_stmt|;
name|Output
name|keyOutput
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
name|keySerializeWrite
operator|.
name|set
argument_list|(
name|keyOutput
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|keyCount
condition|;
name|index
operator|++
control|)
block|{
name|VerifyFastRow
operator|.
name|serializeWrite
argument_list|(
name|keySerializeWrite
argument_list|,
name|keyPrimitiveTypeInfos
index|[
name|index
index|]
argument_list|,
name|keyRow
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|keyOutput
operator|.
name|getData
argument_list|()
argument_list|,
name|keyOutput
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTable
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|keyRow
argument_list|,
name|value
argument_list|,
name|valueRow
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
name|verifyTable
operator|.
name|addRandomExisting
argument_list|(
name|value
argument_list|,
name|valueRow
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
comment|// Serialize keyRow into key bytes.
name|BytesWritable
name|keyWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|BytesWritable
name|valueWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|keyWritable
argument_list|,
name|valueWritable
argument_list|)
expr_stmt|;
comment|// verifyTable.verify(map);
block|}
name|verifyTable
operator|.
name|verify
argument_list|(
name|map
argument_list|,
name|hashTableKeyType
argument_list|,
name|valueTypeInfos
argument_list|,
name|doClipping
argument_list|,
name|useExactBytes
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigIntRows
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|927337
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastLongHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastLongHashMap
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|HashTableKeyType
operator|.
name|LONG
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|LONG
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bigint"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntRows
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|927337
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastLongHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastLongHashMap
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|HashTableKeyType
operator|.
name|INT
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|INT
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringRows
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|927337
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastStringHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastStringHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|STRING
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"string"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRows1
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|833
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|,
literal|"int"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRows2
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|833099
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"string"
block|,
literal|"string"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRows3
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|833099
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bigint"
block|,
literal|"timestamp"
block|,
literal|"double"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigIntRowsClipped
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|326232
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastLongHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastLongHashMap
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|HashTableKeyType
operator|.
name|LONG
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|LONG
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bigint"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntRowsClipped
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|326232
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastLongHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastLongHashMap
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|HashTableKeyType
operator|.
name|INT
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|INT
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringRowsClipped
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|326232
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastStringHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastStringHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|STRING
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"string"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRowsClipped1
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|2331
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"varchar(20)"
block|,
literal|"date"
block|,
literal|"interval_day_time"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRowsClipped2
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|7403
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"varchar(20)"
block|,
literal|"varchar(40)"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRowsClipped3
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|99
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"float"
block|,
literal|"tinyint"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigIntRowsExact
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|27722
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastLongHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastLongHashMap
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|HashTableKeyType
operator|.
name|LONG
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|LONG
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bigint"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntRowsExact
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|8238383
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastLongHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastLongHashMap
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|HashTableKeyType
operator|.
name|INT
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|INT
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringRowsExact
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|8235
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastStringHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastStringHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|STRING
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"string"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRowsExact1
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|8235
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"string"
block|,
literal|"string"
block|,
literal|"string"
block|,
literal|"string"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRowsExact2
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|8235
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"smallint"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRowsExact3
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|8235
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|,
literal|"binary"
block|}
argument_list|,
comment|/* doClipping */
literal|false
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigIntRowsClippedExact
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|2122
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastLongHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastLongHashMap
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|HashTableKeyType
operator|.
name|LONG
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|LONG
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bigint"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntRowsClippedExact
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|7520
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastLongHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastLongHashMap
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|HashTableKeyType
operator|.
name|INT
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|INT
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringRowsClippedExact
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|7539
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastStringHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastStringHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|STRING
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"string"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRowsClippedExact1
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|13
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"interval_year_month"
block|,
literal|"decimal(12,8)"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRowsClippedExact2
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|12
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bigint"
block|,
literal|"string"
block|,
literal|"int"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKeyRowsClippedExact3
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VerifyFastRowHashMap
name|verifyTable
init|=
operator|new
name|VerifyFastRowHashMap
argument_list|()
decl_stmt|;
name|VectorRandomRowSource
name|valueSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|valueSource
operator|.
name|init
argument_list|(
name|random
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
comment|/* allowNulls */
literal|false
argument_list|,
comment|/* isUnicodeOk */
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|1000
decl_stmt|;
name|Object
index|[]
index|[]
name|rows
init|=
name|valueSource
operator|.
name|randomRows
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|addAndVerifyRows
argument_list|(
name|valueSource
argument_list|,
name|rows
argument_list|,
name|map
argument_list|,
name|HashTableKeyType
operator|.
name|MULTI_KEY
argument_list|,
name|verifyTable
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bigint"
block|,
literal|"string"
block|,
literal|"varchar(5000)"
block|}
argument_list|,
comment|/* doClipping */
literal|true
argument_list|,
comment|/* useExactBytes */
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

