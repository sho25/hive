begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|BucketCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|VectorizedOrcAcidRowBatchReader
operator|.
name|ColumnizedDeleteEventRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|VectorizedOrcAcidRowBatchReader
operator|.
name|SortMergedDeleteEventRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class tests the VectorizedOrcAcidRowBatchReader by creating an actual split and a set  * of delete delta files. The split is on an insert delta and there are multiple delete deltas  * with interleaving list of record ids that get deleted. Correctness is tested by validating  * that the correct set of record ids are returned in sorted order for valid transactions only.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorizedOrcAcidRowBatchReader
block|{
specifier|private
specifier|static
specifier|final
name|long
name|NUM_ROWID_PER_OWID
init|=
literal|15000L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NUM_OWID
init|=
literal|10L
decl_stmt|;
specifier|private
name|JobConf
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|root
decl_stmt|;
specifier|private
name|ObjectInspector
name|inspector
decl_stmt|;
specifier|private
name|ObjectInspector
name|originalInspector
decl_stmt|;
specifier|private
name|ObjectInspector
name|bigRowInspector
decl_stmt|;
specifier|private
name|ObjectInspector
name|bigOriginalRowInspector
decl_stmt|;
specifier|public
specifier|static
class|class
name|DummyRow
block|{
name|LongWritable
name|field
decl_stmt|;
name|RecordIdentifier
name|ROW__ID
decl_stmt|;
name|DummyRow
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|field
operator|=
operator|new
name|LongWritable
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|ROW__ID
operator|=
literal|null
expr_stmt|;
block|}
name|DummyRow
parameter_list|(
name|long
name|val
parameter_list|,
name|long
name|rowId
parameter_list|,
name|long
name|origTxn
parameter_list|,
name|int
name|bucket
parameter_list|)
block|{
name|field
operator|=
operator|new
name|LongWritable
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|BucketCodec
operator|.
name|V1
operator|.
name|encode
argument_list|(
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
literal|null
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|ROW__ID
operator|=
operator|new
name|RecordIdentifier
argument_list|(
name|origTxn
argument_list|,
name|bucket
argument_list|,
name|rowId
argument_list|)
expr_stmt|;
block|}
specifier|static
name|String
name|getColumnNamesProperty
parameter_list|()
block|{
return|return
literal|"field"
return|;
block|}
specifier|static
name|String
name|getColumnTypesProperty
parameter_list|()
block|{
return|return
literal|"bigint"
return|;
block|}
block|}
comment|/**    * Dummy row for original files.    */
specifier|public
specifier|static
class|class
name|DummyOriginalRow
block|{
name|LongWritable
name|field
decl_stmt|;
name|DummyOriginalRow
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|field
operator|=
operator|new
name|LongWritable
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|static
name|String
name|getColumnNamesProperty
parameter_list|()
block|{
return|return
literal|"field"
return|;
block|}
specifier|static
name|String
name|getColumnTypesProperty
parameter_list|()
block|{
return|return
literal|"bigint"
return|;
block|}
block|}
comment|/**    * A larger Dummy row that can be used to write multiple stripes.    */
specifier|public
specifier|static
class|class
name|BigRow
block|{
name|BytesWritable
name|field
decl_stmt|;
name|RecordIdentifier
name|rowId
decl_stmt|;
name|BigRow
parameter_list|(
name|byte
index|[]
name|val
parameter_list|)
block|{
name|field
operator|=
operator|new
name|BytesWritable
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|BigRow
parameter_list|(
name|byte
index|[]
name|val
parameter_list|,
name|long
name|rowId
parameter_list|,
name|long
name|origTxn
parameter_list|,
name|int
name|bucket
parameter_list|)
block|{
name|field
operator|=
operator|new
name|BytesWritable
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|BucketCodec
operator|.
name|V1
operator|.
name|encode
argument_list|(
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
literal|null
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowId
operator|=
operator|new
name|RecordIdentifier
argument_list|(
name|origTxn
argument_list|,
name|bucket
argument_list|,
name|rowId
argument_list|)
expr_stmt|;
block|}
specifier|static
name|String
name|getColumnNamesProperty
parameter_list|()
block|{
return|return
literal|"field"
return|;
block|}
specifier|static
name|String
name|getColumnTypesProperty
parameter_list|()
block|{
return|return
literal|"binary"
return|;
block|}
block|}
comment|/**    * A larger Dummy row for original files that can be used to write multiple stripes.    */
specifier|public
specifier|static
class|class
name|BigOriginalRow
block|{
name|BytesWritable
name|field
decl_stmt|;
name|BigOriginalRow
parameter_list|(
name|byte
index|[]
name|val
parameter_list|)
block|{
name|field
operator|=
operator|new
name|BytesWritable
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|static
name|String
name|getColumnNamesProperty
parameter_list|()
block|{
return|return
literal|"field"
return|;
block|}
specifier|static
name|String
name|getColumnTypesProperty
parameter_list|()
block|{
return|return
literal|"binary"
return|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TRANSACTIONAL_TABLE_SCAN
operator|.
name|varname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_TRANSACTIONAL_PROPERTIES
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_OPERATIONAL_PROPERTIES
operator|.
name|varname
argument_list|,
name|AcidUtils
operator|.
name|AcidOperationalProperties
operator|.
name|getDefault
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|DummyRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|DummyRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
operator|.
name|varname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
operator|.
name|varname
argument_list|,
literal|"BI"
argument_list|)
expr_stmt|;
name|OrcConf
operator|.
name|ROWS_BETWEEN_CHECKS
operator|.
name|setLong
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestVectorizedOrcAcidRowBatch.testDump"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|root
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|root
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|DummyRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
name|originalInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|DummyOriginalRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
name|bigRowInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|BigRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
name|bigOriginalRowInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|BigOriginalRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventFilteringOff
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDeleteEventFiltering
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventFilteringOn
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDeleteEventFiltering
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests that we can figure out min/max ROW__ID for each split and then use    * that to only load delete events between min/max.    * This test doesn't actually check what is read - that is done more E2E    * unit tests.    * @throws Exception    */
specifier|private
name|void
name|testDeleteEventFiltering
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|filterOn
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|)
decl_stmt|;
name|int
name|bucket
init|=
literal|0
decl_stmt|;
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
literal|1
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|reporter
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
operator|.
name|recordIdColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|int
name|bucketProperty
init|=
name|BucketCodec
operator|.
name|V1
operator|.
name|encode
argument_list|(
name|options
argument_list|)
decl_stmt|;
comment|//create 3 insert deltas so that we have 3 splits
name|RecordUpdater
name|updater
init|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|options
operator|.
name|minimumWriteId
argument_list|(
literal|2
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|updater
operator|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|,
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|options
operator|.
name|minimumWriteId
argument_list|(
literal|3
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|updater
operator|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|7
argument_list|,
literal|0
argument_list|,
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|9
argument_list|,
literal|2
argument_list|,
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//delete 1 row from each of the insert deltas
name|options
operator|.
name|minimumWriteId
argument_list|(
literal|4
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|updater
operator|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|updater
operator|.
name|delete
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|delete
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|delete
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//HWM is not important - just make sure deltas created above are read as
comment|// if committed
name|conf
operator|.
name|set
argument_list|(
name|ValidWriteIdList
operator|.
name|VALID_WRITEIDS_KEY
argument_list|,
literal|"tbl:5:"
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|"::"
argument_list|)
expr_stmt|;
comment|//now we have 3 delete events total, but for each split we should only
comment|// load 1 into DeleteRegistry (if filtering is on)
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|getSplitStrategies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|splits
init|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"delta_0000001_0000001_0000/bucket_00000"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"delta_0000002_0000002_0000/bucket_00000"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"delta_0000003_0000003_0000/bucket_00000"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|VectorizedOrcAcidRowBatchReader
name|vectorizedReader
init|=
operator|new
name|VectorizedOrcAcidRowBatchReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
operator|new
name|VectorizedRowBatchCtx
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnizedDeleteEventRegistry
name|deleteEventRegistry
init|=
operator|(
name|ColumnizedDeleteEventRegistry
operator|)
name|vectorizedReader
operator|.
name|getDeleteEventRegistry
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of delete events for stripe 1"
argument_list|,
name|filterOn
condition|?
literal|1
else|:
literal|3
argument_list|,
name|deleteEventRegistry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OrcRawRecordMerger
operator|.
name|KeyInterval
name|keyInterval
init|=
name|vectorizedReader
operator|.
name|getKeyInterval
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterOn
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
operator|new
name|RecordIdentifier
argument_list|(
literal|1
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|1
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
name|vectorizedReader
operator|=
operator|new
name|VectorizedOrcAcidRowBatchReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
operator|new
name|VectorizedRowBatchCtx
argument_list|()
argument_list|)
expr_stmt|;
name|deleteEventRegistry
operator|=
operator|(
name|ColumnizedDeleteEventRegistry
operator|)
name|vectorizedReader
operator|.
name|getDeleteEventRegistry
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of delete events for stripe 2"
argument_list|,
name|filterOn
condition|?
literal|1
else|:
literal|3
argument_list|,
name|deleteEventRegistry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keyInterval
operator|=
name|vectorizedReader
operator|.
name|getKeyInterval
argument_list|()
expr_stmt|;
if|if
condition|(
name|filterOn
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
operator|new
name|RecordIdentifier
argument_list|(
literal|2
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|2
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
name|vectorizedReader
operator|=
operator|new
name|VectorizedOrcAcidRowBatchReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
operator|new
name|VectorizedRowBatchCtx
argument_list|()
argument_list|)
expr_stmt|;
name|deleteEventRegistry
operator|=
operator|(
name|ColumnizedDeleteEventRegistry
operator|)
name|vectorizedReader
operator|.
name|getDeleteEventRegistry
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of delete events for stripe 3"
argument_list|,
name|filterOn
condition|?
literal|1
else|:
literal|3
argument_list|,
name|deleteEventRegistry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keyInterval
operator|=
name|vectorizedReader
operator|.
name|getKeyInterval
argument_list|()
expr_stmt|;
if|if
condition|(
name|filterOn
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
operator|new
name|RecordIdentifier
argument_list|(
literal|3
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|3
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventFilteringOff2
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDeleteEventFiltering2
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventFilteringOn2
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDeleteEventFiltering2
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testDeleteEventFiltering2
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|filterOn
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|)
decl_stmt|;
name|int
name|bucket
init|=
literal|1
decl_stmt|;
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|true
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
literal|10000002
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
literal|10000002
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|reporter
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
operator|.
name|recordIdColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|int
name|bucketProperty
init|=
name|BucketCodec
operator|.
name|V1
operator|.
name|encode
argument_list|(
name|options
argument_list|)
decl_stmt|;
comment|//create data that looks like a compacted base that includes some data
comment|//from 'original' files and some from native Acid write
name|RecordUpdater
name|updater
init|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|updater
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
literal|10000001
argument_list|,
operator|new
name|DummyRow
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|10000001
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//delete 3rd row
name|options
operator|.
name|writingBase
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
literal|10000004
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
literal|10000004
argument_list|)
expr_stmt|;
name|updater
operator|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|updater
operator|.
name|delete
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
comment|//hypothetically this matches something in (nonexistent here)
comment|// delta_10000003_10000003
name|updater
operator|.
name|delete
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|10000003
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//HWM is not important - just make sure deltas created above are read as
comment|// if committed
name|conf
operator|.
name|set
argument_list|(
name|ValidWriteIdList
operator|.
name|VALID_WRITEIDS_KEY
argument_list|,
literal|"tbl:10000005:"
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|"::"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|getSplitStrategies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|splits
init|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"base_10000002/bucket_00001"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|VectorizedOrcAcidRowBatchReader
name|vectorizedReader
init|=
operator|new
name|VectorizedOrcAcidRowBatchReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
operator|new
name|VectorizedRowBatchCtx
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnizedDeleteEventRegistry
name|deleteEventRegistry
init|=
operator|(
name|ColumnizedDeleteEventRegistry
operator|)
name|vectorizedReader
operator|.
name|getDeleteEventRegistry
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of delete events for stripe 1"
argument_list|,
name|filterOn
condition|?
literal|1
else|:
literal|2
argument_list|,
name|deleteEventRegistry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OrcRawRecordMerger
operator|.
name|KeyInterval
name|keyInterval
init|=
name|vectorizedReader
operator|.
name|getKeyInterval
argument_list|()
decl_stmt|;
name|SearchArgument
name|sarg
init|=
name|vectorizedReader
operator|.
name|getDeleteEventSarg
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterOn
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000001
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
comment|//key point is that in leaf-5 is (rowId<= 2) even though maxKey has
comment|//rowId 0.  more in VectorizedOrcAcidRowBatchReader.findMinMaxKeys
name|assertEquals
argument_list|(
literal|"leaf-0 = (LESS_THAN originalTransaction 0),"
operator|+
literal|" leaf-1 = (LESS_THAN bucket 536936448),"
operator|+
literal|" leaf-2 = (LESS_THAN rowId 0),"
operator|+
literal|" leaf-3 = (LESS_THAN_EQUALS originalTransaction 10000001),"
operator|+
literal|" leaf-4 = (LESS_THAN_EQUALS bucket 536936448),"
operator|+
literal|" leaf-5 = (LESS_THAN_EQUALS rowId 2),"
operator|+
literal|" expr = (and (not leaf-0) (not leaf-1) "
operator|+
literal|"(not leaf-2) leaf-3 leaf-4 leaf-5)"
argument_list|,
name|sarg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sarg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventFilteringOff3
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDeleteEventFiltering3
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventFilteringOn3
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDeleteEventFiltering3
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithoutStatsDeleteEventFilteringOn3
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|OrcConf
operator|.
name|ROW_INDEX_STRIDE
operator|.
name|setLong
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testDeleteEventFiltering3
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testDeleteEventFiltering3
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|filterOn
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|)
decl_stmt|;
name|boolean
name|columnStatsPresent
init|=
name|OrcConf
operator|.
name|ROW_INDEX_STRIDE
operator|.
name|getLong
argument_list|(
name|conf
argument_list|)
operator|!=
literal|0
decl_stmt|;
comment|// To create small stripes
name|OrcConf
operator|.
name|STRIPE_SIZE
operator|.
name|setLong
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Need to use a bigger row than DummyRow for the writer to flush the stripes
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|BigRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|BigRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Use OrcRecordUpdater.OrcOptions to set the batch size.
name|OrcRecordUpdater
operator|.
name|OrcOptions
name|orcOptions
init|=
operator|new
name|OrcRecordUpdater
operator|.
name|OrcOptions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|orcOptions
operator|.
name|orcOptions
argument_list|(
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|batchSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|bucket
init|=
literal|1
decl_stmt|;
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
name|orcOptions
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|true
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
literal|10000002
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
literal|10000002
argument_list|)
operator|.
name|inspector
argument_list|(
name|bigRowInspector
argument_list|)
operator|.
name|reporter
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
operator|.
name|recordIdColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|int
name|bucketProperty
init|=
name|BucketCodec
operator|.
name|V1
operator|.
name|encode
argument_list|(
name|options
argument_list|)
decl_stmt|;
comment|// Create 3 stripes with 1 row each
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
name|RecordUpdater
name|updater
init|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|updater
operator|.
name|insert
argument_list|(
literal|10000002
argument_list|,
operator|new
name|BigRow
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
literal|10000002
argument_list|,
operator|new
name|BigRow
argument_list|(
name|data
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|insert
argument_list|(
literal|10000002
argument_list|,
operator|new
name|BigRow
argument_list|(
name|data
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|acidFile
init|=
literal|"base_10000002/bucket_00001"
decl_stmt|;
name|Path
name|acidFilePath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|acidFile
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|acidFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
init|=
name|reader
operator|.
name|getStripes
argument_list|()
decl_stmt|;
comment|// Make sure 3 stripes are created
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stripes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|fileLength
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|acidFilePath
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// 1. Splits within a stripe
comment|// A split that's completely within the 2nd stripe
name|StripeInformation
name|stripe
init|=
name|stripes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|OrcSplit
name|split
init|=
operator|new
name|OrcSplit
argument_list|(
name|acidFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
literal|50
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|-
literal|100
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// A split that's completely within the last stripe
name|stripe
operator|=
name|stripes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|acidFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
literal|50
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|-
literal|100
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// 2. Splits starting at a stripe boundary
comment|// A split that starts where the 1st stripe starts and ends before the 1st stripe ends
name|stripe
operator|=
name|stripes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|acidFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|-
literal|50
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The key interval for the 1st stripe
if|if
condition|(
name|columnStatsPresent
condition|)
block|{
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
literal|null
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
block|}
comment|// A split that starts where the 2nd stripe starts and ends after the 2nd stripe ends
name|stripe
operator|=
name|stripes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|acidFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|+
literal|50
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The key interval for the last 2 stripes
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// 3. Splits ending at a stripe boundary
comment|// A split that starts before the last stripe starts and ends at the last stripe boundary
name|stripe
operator|=
name|stripes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|acidFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
operator|-
literal|50
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|+
literal|50
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The key interval for the last stripe
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// A split that starts after the 1st stripe starts and ends where the last stripe ends
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|acidFilePath
argument_list|,
literal|null
argument_list|,
name|stripes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOffset
argument_list|()
operator|+
literal|50
argument_list|,
name|reader
operator|.
name|getContentLength
argument_list|()
operator|-
literal|50
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The key interval for the last 2 stripes
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// A split that starts where the 1st stripe starts and ends where the last stripe ends
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|acidFilePath
argument_list|,
literal|null
argument_list|,
name|stripes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOffset
argument_list|()
argument_list|,
name|reader
operator|.
name|getContentLength
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The key interval for all 3 stripes
if|if
condition|(
name|columnStatsPresent
condition|)
block|{
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
literal|null
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|10000002
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|validateKeyInterval
parameter_list|(
name|OrcSplit
name|split
parameter_list|,
name|RecordIdentifier
name|lowKey
parameter_list|,
name|RecordIdentifier
name|highKey
parameter_list|,
name|boolean
name|filterOn
parameter_list|)
throws|throws
name|Exception
block|{
name|VectorizedOrcAcidRowBatchReader
name|vectorizedReader
init|=
operator|new
name|VectorizedOrcAcidRowBatchReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
operator|new
name|VectorizedRowBatchCtx
argument_list|()
argument_list|)
decl_stmt|;
name|OrcRawRecordMerger
operator|.
name|KeyInterval
name|keyInterval
init|=
name|vectorizedReader
operator|.
name|getKeyInterval
argument_list|()
decl_stmt|;
name|SearchArgument
name|sarg
init|=
name|vectorizedReader
operator|.
name|getDeleteEventSarg
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterOn
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
name|lowKey
argument_list|,
name|highKey
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sarg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventOriginalFilteringOn
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDeleteEventOriginalFiltering
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventOriginalFilteringOff
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDeleteEventOriginalFiltering
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteEventOriginalFiltering
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|filterOn
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create 3 original files with 3 rows each
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
name|DummyOriginalRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
name|DummyOriginalRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|OrcFile
operator|.
name|WriterOptions
name|writerOptions
init|=
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|properties
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writerOptions
operator|.
name|inspector
argument_list|(
name|originalInspector
argument_list|)
expr_stmt|;
name|Path
name|testFilePath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"000000_0"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|writerOptions
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|DummyOriginalRow
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|DummyOriginalRow
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|DummyOriginalRow
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"000000_0_copy_1"
argument_list|)
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|writerOptions
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|DummyOriginalRow
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|DummyOriginalRow
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|DummyOriginalRow
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"000000_0_copy_2"
argument_list|)
expr_stmt|;
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|writerOptions
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|DummyOriginalRow
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|DummyOriginalRow
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|DummyOriginalRow
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|bucket
init|=
literal|0
decl_stmt|;
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
literal|1
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|reporter
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
operator|.
name|recordIdColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|int
name|bucketProperty
init|=
name|BucketCodec
operator|.
name|V1
operator|.
name|encode
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|RecordUpdater
name|updater
init|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
decl_stmt|;
comment|//delete 1 row from each of the original files
comment|// Delete the last record in this split to test boundary conditions. It should not be present in the delete event
comment|// registry for the next split
name|updater
operator|.
name|delete
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the first record in this split to test boundary conditions. It should not be present in the delete event
comment|// registry for the previous split
name|updater
operator|.
name|delete
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|delete
argument_list|(
name|options
operator|.
name|getMinimumWriteId
argument_list|()
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//HWM is not important - just make sure deltas created above are read as if committed
name|conf
operator|.
name|set
argument_list|(
name|ValidWriteIdList
operator|.
name|VALID_WRITEIDS_KEY
argument_list|,
literal|"tbl:2:"
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|"::"
argument_list|)
expr_stmt|;
comment|// Set vector mode to true int the map work so that we recognize this as a vector mode execution during the split
comment|// generation. Without this we will not compute the offset for the synthetic row ids.
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|mapWork
operator|.
name|setVectorMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|VectorizedRowBatchCtx
name|vrbContext
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
name|mapWork
operator|.
name|setVectorizedRowBatchCtx
argument_list|(
name|vrbContext
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PLAN
argument_list|,
literal|"//tmp"
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|setMapWork
argument_list|(
name|conf
argument_list|,
name|mapWork
argument_list|)
expr_stmt|;
comment|// now we have 3 delete events total, but for each split we should only
comment|// load 1 into DeleteRegistry (if filtering is on)
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|getSplitStrategies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|splits
init|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"000000_0"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"000000_0_copy_1"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"000000_0_copy_2"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
name|VectorizedOrcAcidRowBatchReader
name|vectorizedReader
init|=
operator|new
name|VectorizedOrcAcidRowBatchReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
name|vrbContext
argument_list|)
decl_stmt|;
name|ColumnizedDeleteEventRegistry
name|deleteEventRegistry
init|=
operator|(
name|ColumnizedDeleteEventRegistry
operator|)
name|vectorizedReader
operator|.
name|getDeleteEventRegistry
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of delete events for stripe 1"
argument_list|,
name|filterOn
condition|?
literal|1
else|:
literal|3
argument_list|,
name|deleteEventRegistry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OrcRawRecordMerger
operator|.
name|KeyInterval
name|keyInterval
init|=
name|vectorizedReader
operator|.
name|getKeyInterval
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterOn
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
name|vectorizedReader
operator|=
operator|new
name|VectorizedOrcAcidRowBatchReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
name|vrbContext
argument_list|)
expr_stmt|;
name|deleteEventRegistry
operator|=
operator|(
name|ColumnizedDeleteEventRegistry
operator|)
name|vectorizedReader
operator|.
name|getDeleteEventRegistry
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of delete events for stripe 2"
argument_list|,
name|filterOn
condition|?
literal|1
else|:
literal|3
argument_list|,
name|deleteEventRegistry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keyInterval
operator|=
name|vectorizedReader
operator|.
name|getKeyInterval
argument_list|()
expr_stmt|;
if|if
condition|(
name|filterOn
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
name|vectorizedReader
operator|=
operator|new
name|VectorizedOrcAcidRowBatchReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
name|vrbContext
argument_list|)
expr_stmt|;
name|deleteEventRegistry
operator|=
operator|(
name|ColumnizedDeleteEventRegistry
operator|)
name|vectorizedReader
operator|.
name|getDeleteEventRegistry
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of delete events for stripe 3"
argument_list|,
name|filterOn
condition|?
literal|1
else|:
literal|3
argument_list|,
name|deleteEventRegistry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keyInterval
operator|=
name|vectorizedReader
operator|.
name|getKeyInterval
argument_list|()
expr_stmt|;
if|if
condition|(
name|filterOn
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|6
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|new
name|OrcRawRecordMerger
operator|.
name|KeyInterval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|keyInterval
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventOriginalFilteringOff2
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDeleteEventOriginalFiltering2
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventOriginalFilteringOn2
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDeleteEventOriginalFiltering2
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testDeleteEventOriginalFiltering2
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|filterOn
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Need to use a bigger row than DummyRow for the writer to flush the stripes
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|BigRow
operator|.
name|getColumnNamesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|BigRow
operator|.
name|getColumnTypesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|OrcFile
operator|.
name|WriterOptions
name|writerOptions
init|=
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|properties
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writerOptions
operator|.
name|inspector
argument_list|(
name|bigOriginalRowInspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|1
argument_list|)
operator|.
name|batchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|originalFile
init|=
literal|"000000_0"
decl_stmt|;
name|Path
name|originalFilePath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|originalFile
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|originalFilePath
argument_list|,
name|writerOptions
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|BigOriginalRow
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|BigOriginalRow
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|BigOriginalRow
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|originalFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
init|=
name|reader
operator|.
name|getStripes
argument_list|()
decl_stmt|;
comment|// Make sure 3 stripes are created
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stripes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|originalFilePath
argument_list|)
decl_stmt|;
name|long
name|fileLength
init|=
name|fileStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// Set vector mode to true in the map work so that we can generate the syntheticProps
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|mapWork
operator|.
name|setVectorMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|VectorizedRowBatchCtx
name|vrbContext
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
name|mapWork
operator|.
name|setVectorizedRowBatchCtx
argument_list|(
name|vrbContext
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PLAN
argument_list|,
literal|"//tmp"
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|setMapWork
argument_list|(
name|conf
argument_list|,
name|mapWork
argument_list|)
expr_stmt|;
name|OrcSplit
operator|.
name|OffsetAndBucketProperty
name|syntheticProps
init|=
name|VectorizedOrcAcidRowBatchReader
operator|.
name|computeOffsetAndBucket
argument_list|(
name|fileStatus
argument_list|,
name|root
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|bucket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|bucketProperty
init|=
name|BucketCodec
operator|.
name|V1
operator|.
name|encode
argument_list|(
name|options
argument_list|)
decl_stmt|;
comment|// 1. Splits within a stripe
comment|// A split that's completely within the 2nd stripe
name|StripeInformation
name|stripe
init|=
name|stripes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|OrcSplit
name|split
init|=
operator|new
name|OrcSplit
argument_list|(
name|originalFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
literal|50
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|-
literal|100
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
name|syntheticProps
argument_list|)
decl_stmt|;
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|1
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// A split that's completely within the last stripe
name|stripe
operator|=
name|stripes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|originalFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
literal|50
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|-
literal|100
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
name|syntheticProps
argument_list|)
expr_stmt|;
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// 2. Splits starting at a stripe boundary
comment|// A split that starts where the 1st stripe starts and ends before the 1st stripe ends
name|stripe
operator|=
name|stripes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|originalFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|-
literal|50
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
name|syntheticProps
argument_list|)
expr_stmt|;
comment|// The key interval for the 1st stripe
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// A split that starts where the 2nd stripe starts and ends after the 2nd stripe ends
name|stripe
operator|=
name|stripes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|originalFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|+
literal|50
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
name|syntheticProps
argument_list|)
expr_stmt|;
comment|// The key interval for the last 2 stripes
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// 3. Splits ending at a stripe boundary
comment|// A split that starts before the last stripe starts and ends at the last stripe boundary
name|stripe
operator|=
name|stripes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|originalFilePath
argument_list|,
literal|null
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
operator|-
literal|50
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
operator|+
literal|50
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
name|syntheticProps
argument_list|)
expr_stmt|;
comment|// The key interval for the last stripe
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// A split that starts after the 1st stripe starts and ends where the last stripe ends
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|originalFilePath
argument_list|,
literal|null
argument_list|,
name|stripes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOffset
argument_list|()
operator|+
literal|50
argument_list|,
name|reader
operator|.
name|getContentLength
argument_list|()
operator|-
literal|50
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
name|syntheticProps
argument_list|)
expr_stmt|;
comment|// The key interval for the last 2 stripes
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
comment|// A split that starts where the 1st stripe starts and ends where the last stripe ends
name|split
operator|=
operator|new
name|OrcSplit
argument_list|(
name|originalFilePath
argument_list|,
literal|null
argument_list|,
name|stripes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOffset
argument_list|()
argument_list|,
name|reader
operator|.
name|getContentLength
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|fileLength
argument_list|,
name|fileLength
argument_list|,
name|root
argument_list|,
name|syntheticProps
argument_list|)
expr_stmt|;
comment|// The key interval for all 3 stripes
name|validateKeyInterval
argument_list|(
name|split
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|RecordIdentifier
argument_list|(
literal|0
argument_list|,
name|bucketProperty
argument_list|,
literal|2
argument_list|)
argument_list|,
name|filterOn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorizedOrcAcidRowBatchReader
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"bucket_count"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|int
name|bucket
init|=
literal|0
decl_stmt|;
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|NUM_OWID
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|reporter
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
operator|.
name|recordIdColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|RecordUpdater
name|updater
init|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
decl_stmt|;
comment|// Create a single insert delta with 150,000 rows, with 15000 rowIds per original transaction id.
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_OWID
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|long
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_ROWID_PER_OWID
condition|;
operator|++
name|j
control|)
block|{
name|long
name|payload
init|=
operator|(
name|i
operator|-
literal|1
operator|)
operator|*
name|NUM_ROWID_PER_OWID
operator|+
name|j
decl_stmt|;
name|updater
operator|.
name|insert
argument_list|(
name|i
argument_list|,
operator|new
name|DummyRow
argument_list|(
name|payload
argument_list|,
name|j
argument_list|,
name|i
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Now create three types of delete deltas- first has rowIds divisible by 2 but not by 3,
comment|// second has rowIds divisible by 3 but not by 2, and the third has rowIds divisible by
comment|// both 2 and 3. This should produce delete deltas that will thoroughly test the sort-merge
comment|// logic when the delete events in the delete delta files interleave in the sort order.
comment|// Create a delete delta that has rowIds divisible by 2 but not by 3. This will produce
comment|// a delete delta file with 50,000 delete events.
name|long
name|currTxnId
init|=
name|NUM_OWID
operator|+
literal|1
decl_stmt|;
name|options
operator|.
name|minimumWriteId
argument_list|(
name|currTxnId
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|currTxnId
argument_list|)
expr_stmt|;
name|updater
operator|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_OWID
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|long
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_ROWID_PER_OWID
condition|;
name|j
operator|+=
literal|1
control|)
block|{
if|if
condition|(
name|j
operator|%
literal|2
operator|==
literal|0
operator|&&
name|j
operator|%
literal|3
operator|!=
literal|0
condition|)
block|{
name|updater
operator|.
name|delete
argument_list|(
name|currTxnId
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
name|j
argument_list|,
name|i
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Now, create a delete delta that has rowIds divisible by 3 but not by 2. This will produce
comment|// a delete delta file with 25,000 delete events.
name|currTxnId
operator|=
name|NUM_OWID
operator|+
literal|2
expr_stmt|;
name|options
operator|.
name|minimumWriteId
argument_list|(
name|currTxnId
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|currTxnId
argument_list|)
expr_stmt|;
name|updater
operator|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_OWID
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|long
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_ROWID_PER_OWID
condition|;
name|j
operator|+=
literal|1
control|)
block|{
if|if
condition|(
name|j
operator|%
literal|2
operator|!=
literal|0
operator|&&
name|j
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|updater
operator|.
name|delete
argument_list|(
name|currTxnId
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
name|j
argument_list|,
name|i
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Now, create a delete delta that has rowIds divisible by both 3 and 2. This will produce
comment|// a delete delta file with 25,000 delete events.
name|currTxnId
operator|=
name|NUM_OWID
operator|+
literal|3
expr_stmt|;
name|options
operator|.
name|minimumWriteId
argument_list|(
name|currTxnId
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|currTxnId
argument_list|)
expr_stmt|;
name|updater
operator|=
operator|new
name|OrcRecordUpdater
argument_list|(
name|root
argument_list|,
name|options
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_OWID
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|long
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_ROWID_PER_OWID
condition|;
name|j
operator|+=
literal|1
control|)
block|{
if|if
condition|(
name|j
operator|%
literal|2
operator|==
literal|0
operator|&&
name|j
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|updater
operator|.
name|delete
argument_list|(
name|currTxnId
argument_list|,
operator|new
name|DummyRow
argument_list|(
operator|-
literal|1
argument_list|,
name|j
argument_list|,
name|i
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testVectorizedOrcAcidRowBatchReader
argument_list|(
name|ColumnizedDeleteEventRegistry
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// To test the SortMergedDeleteEventRegistry, we need to explicitly set the
comment|// HIVE_TRANSACTIONAL_NUM_EVENTS_IN_MEMORY constant to a smaller value.
name|int
name|oldValue
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TRANSACTIONAL_NUM_EVENTS_IN_MEMORY
operator|.
name|varname
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TRANSACTIONAL_NUM_EVENTS_IN_MEMORY
operator|.
name|varname
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|testVectorizedOrcAcidRowBatchReader
argument_list|(
name|SortMergedDeleteEventRegistry
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restore the old value.
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TRANSACTIONAL_NUM_EVENTS_IN_MEMORY
operator|.
name|varname
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testVectorizedOrcAcidRowBatchReader
parameter_list|(
name|String
name|deleteEventRegistry
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|splitStrategies
init|=
name|getSplitStrategies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitStrategies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcSplit
argument_list|>
name|splits
init|=
operator|(
operator|(
name|OrcInputFormat
operator|.
name|ACIDSplitStrategy
operator|)
name|splitStrategies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSplits
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"delta_0000001_0000010_0000/bucket_00000"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isOriginal
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mark one of the transactions as an exception to test that invalid transactions
comment|// are being handled properly.
name|conf
operator|.
name|set
argument_list|(
name|ValidWriteIdList
operator|.
name|VALID_WRITEIDS_KEY
argument_list|,
literal|"tbl:14:1:1:5"
argument_list|)
expr_stmt|;
comment|// Exclude transaction 5
name|VectorizedOrcAcidRowBatchReader
name|vectorizedReader
init|=
operator|new
name|VectorizedOrcAcidRowBatchReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
operator|new
name|VectorizedRowBatchCtx
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteEventRegistry
operator|.
name|equals
argument_list|(
name|ColumnizedDeleteEventRegistry
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|vectorizedReader
operator|.
name|getDeleteEventRegistry
argument_list|()
operator|instanceof
name|ColumnizedDeleteEventRegistry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteEventRegistry
operator|.
name|equals
argument_list|(
name|SortMergedDeleteEventRegistry
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|vectorizedReader
operator|.
name|getDeleteEventRegistry
argument_list|()
operator|instanceof
name|SortMergedDeleteEventRegistry
argument_list|)
expr_stmt|;
block|}
name|TypeDescription
name|schema
init|=
name|OrcInputFormat
operator|.
name|getDesiredRowTypeDescr
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|vectorizedRowBatch
init|=
name|schema
operator|.
name|createRowBatchV2
argument_list|()
decl_stmt|;
name|vectorizedRowBatch
operator|.
name|setPartitionInfo
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// set data column count as 1.
name|long
name|previousPayload
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
while|while
condition|(
name|vectorizedReader
operator|.
name|next
argument_list|(
literal|null
argument_list|,
name|vectorizedRowBatch
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
name|LongColumnVector
name|col
init|=
operator|(
name|LongColumnVector
operator|)
name|vectorizedRowBatch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorizedRowBatch
operator|.
name|size
condition|;
operator|++
name|i
control|)
block|{
name|int
name|idx
init|=
name|vectorizedRowBatch
operator|.
name|selected
index|[
name|i
index|]
decl_stmt|;
name|long
name|payload
init|=
name|col
operator|.
name|vector
index|[
name|idx
index|]
decl_stmt|;
name|long
name|owid
init|=
operator|(
name|payload
operator|/
name|NUM_ROWID_PER_OWID
operator|)
operator|+
literal|1
decl_stmt|;
name|long
name|rowId
init|=
name|payload
operator|%
name|NUM_ROWID_PER_OWID
decl_stmt|;
name|assertFalse
argument_list|(
name|rowId
operator|%
literal|2
operator|==
literal|0
operator|||
name|rowId
operator|%
literal|3
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|owid
operator|!=
literal|5
argument_list|)
expr_stmt|;
comment|// Check that writeid#5 has been excluded.
name|assertTrue
argument_list|(
name|payload
operator|>
name|previousPayload
argument_list|)
expr_stmt|;
comment|// Check that the data is in sorted order.
name|previousPayload
operator|=
name|payload
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|OrcInputFormat
operator|.
name|SplitStrategy
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSplitStrategies
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_OPERATIONAL_PROPERTIES
operator|.
name|varname
argument_list|,
name|AcidUtils
operator|.
name|AcidOperationalProperties
operator|.
name|getDefault
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|Context
name|context
init|=
operator|new
name|OrcInputFormat
operator|.
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|FileGenerator
name|gen
init|=
operator|new
name|OrcInputFormat
operator|.
name|FileGenerator
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|root
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OrcInputFormat
operator|.
name|AcidDirInfo
name|adi
init|=
name|gen
operator|.
name|call
argument_list|()
decl_stmt|;
return|return
name|OrcInputFormat
operator|.
name|determineSplitStrategies
argument_list|(
literal|null
argument_list|,
name|context
argument_list|,
name|adi
operator|.
name|fs
argument_list|,
name|adi
operator|.
name|splitPath
argument_list|,
name|adi
operator|.
name|baseFiles
argument_list|,
name|adi
operator|.
name|deleteEvents
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

