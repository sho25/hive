begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_class
specifier|public
class|class
name|PostTestOperatorHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|private
name|void
name|logEnterExitCounters
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|task
operator|.
name|getTaskHandle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Counters
name|counters
init|=
name|task
operator|.
name|getTaskHandle
argument_list|()
operator|.
name|getCounters
argument_list|()
decl_stmt|;
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|logCounterValue
argument_list|(
name|counters
argument_list|,
literal|"TEST_OPERATOR_HOOK_"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
literal|"counters are null"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
literal|"task handle is null"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|logCounterValue
parameter_list|(
name|Counters
name|ctr
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|counterGroups
init|=
name|ctr
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|counterGroups
control|)
block|{
name|Counters
operator|.
name|Group
name|group
init|=
name|ctr
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Counters
operator|.
name|Counter
argument_list|>
name|it
init|=
name|group
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Counters
operator|.
name|Counter
name|counter
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|counter
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
name|counter
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
block|{
name|HiveConf
name|conf
init|=
name|hookContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TaskRunner
argument_list|>
name|completedTasks
init|=
name|hookContext
operator|.
name|getCompleteTaskList
argument_list|()
decl_stmt|;
if|if
condition|(
name|completedTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TaskRunner
name|taskRunner
range|:
name|completedTasks
control|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
init|=
name|taskRunner
operator|.
name|getTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|isMapRedTask
argument_list|()
operator|&&
operator|!
name|task
operator|.
name|isMapRedLocalTask
argument_list|()
condition|)
block|{
try|try
block|{
name|logEnterExitCounters
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
literal|"Error in get counters: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

