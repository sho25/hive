begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PTFExpressionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|BasePartitionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestGenericUDAFEvaluator
block|{
annotation|@
name|Mock
argument_list|(
name|answer
operator|=
name|Answers
operator|.
name|CALLS_REAL_METHODS
argument_list|)
specifier|private
name|GenericUDAFEvaluator
name|udafEvaluator
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|WindowFrameDef
name|winFrame
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|PTFPartition
name|partition1
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ObjectInspector
name|outputOI
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionWindowingEvaluatorWithoutInitCall
parameter_list|()
block|{
name|BasePartitionEvaluator
name|partition1Evaluator1
init|=
name|udafEvaluator
operator|.
name|getPartitionWindowingEvaluator
argument_list|(
name|winFrame
argument_list|,
name|partition1
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|)
decl_stmt|;
name|BasePartitionEvaluator
name|partition1Evaluator2
init|=
name|udafEvaluator
operator|.
name|getPartitionWindowingEvaluator
argument_list|(
name|winFrame
argument_list|,
name|partition1
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partition1Evaluator1
argument_list|,
name|partition1Evaluator2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionWindowingEvaluatorWithInitCall
parameter_list|()
throws|throws
name|HiveException
block|{
name|BasePartitionEvaluator
name|partition1Evaluator1
init|=
name|udafEvaluator
operator|.
name|getPartitionWindowingEvaluator
argument_list|(
name|winFrame
argument_list|,
name|partition1
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|)
decl_stmt|;
name|udafEvaluator
operator|.
name|init
argument_list|(
name|GenericUDAFEvaluator
operator|.
name|Mode
operator|.
name|COMPLETE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|BasePartitionEvaluator
name|newPartitionEvaluator
init|=
name|udafEvaluator
operator|.
name|getPartitionWindowingEvaluator
argument_list|(
name|winFrame
argument_list|,
name|partition1
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|partition1Evaluator1
argument_list|,
name|newPartitionEvaluator
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

