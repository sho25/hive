begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HiveProtoLoggingHook
operator|.
name|EventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HiveProtoLoggingHook
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HiveProtoLoggingHook
operator|.
name|ExecutionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HiveProtoLoggingHook
operator|.
name|OtherInfoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
operator|.
name|HookType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|proto
operator|.
name|HiveHookEvents
operator|.
name|HiveHookEventProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|proto
operator|.
name|HiveHookEvents
operator|.
name|MapFieldEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|logging
operator|.
name|proto
operator|.
name|DatePartitionedLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|logging
operator|.
name|proto
operator|.
name|ProtoMessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveProtoLoggingHook
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|HookContext
name|context
decl_stmt|;
specifier|private
name|String
name|tmpFolder
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_QUEUE_NAME
operator|.
name|varname
argument_list|,
literal|"llap_queue"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_PROTO_EVENTS_QUEUE_CAPACITY
operator|.
name|varname
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|QUEUE_NAME
argument_list|,
literal|"mr_queue"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|,
literal|"tez_queue"
argument_list|)
expr_stmt|;
name|tmpFolder
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_PROTO_EVENTS_BASE_PATH
argument_list|,
name|tmpFolder
argument_list|)
expr_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
name|QueryPlan
name|queryPlan
init|=
operator|new
name|QueryPlan
argument_list|(
name|HiveOperation
operator|.
name|QUERY
argument_list|)
block|{}
decl_stmt|;
name|queryPlan
operator|.
name|setQueryId
argument_list|(
literal|"test_queryId"
argument_list|)
expr_stmt|;
name|queryPlan
operator|.
name|setQueryStartTime
argument_list|(
literal|1234L
argument_list|)
expr_stmt|;
name|queryPlan
operator|.
name|setRootTasks
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|queryPlan
operator|.
name|setInputs
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|queryPlan
operator|.
name|setOutputs
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|PerfLogger
name|perf
init|=
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|context
operator|=
operator|new
name|HookContext
argument_list|(
name|queryPlan
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
literal|"test_user"
argument_list|,
literal|"192.168.10.10"
argument_list|,
literal|"hive_addr"
argument_list|,
literal|"test_op_id"
argument_list|,
literal|"test_session_id"
argument_list|,
literal|"test_thread_id"
argument_list|,
literal|true
argument_list|,
name|perf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreEventLog
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|setHookType
argument_list|(
name|HookType
operator|.
name|PRE_EXEC_HOOK
argument_list|)
expr_stmt|;
name|EventLogger
name|evtLogger
init|=
operator|new
name|EventLogger
argument_list|(
name|conf
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|HiveHookEventProto
name|event
init|=
name|loadEvent
argument_list|(
name|conf
argument_list|,
name|tmpFolder
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|QUERY_SUBMITTED
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1234L
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|event
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_user"
argument_list|,
name|event
operator|.
name|getRequestUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_queryId"
argument_list|,
name|event
operator|.
name|getHiveQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_op_id"
argument_list|,
name|event
operator|.
name|getOperationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionMode
operator|.
name|NONE
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getExecutionMode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|event
operator|.
name|hasQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|TEZ
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|MAPRED
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|CLIENT_IP_ADDRESS
argument_list|,
literal|"192.168.10.10"
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|SESSION_ID
argument_list|,
literal|"test_session_id"
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|THREAD_NAME
argument_list|,
literal|"test_thread_id"
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|HIVE_INSTANCE_TYPE
argument_list|,
literal|"HS2"
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|HIVE_ADDRESS
argument_list|,
literal|"hive_addr"
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|CONF
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|QUERY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|setHookType
argument_list|(
name|HookType
operator|.
name|PRE_EXEC_HOOK
argument_list|)
expr_stmt|;
name|EventLogger
name|evtLogger
init|=
operator|new
name|EventLogger
argument_list|(
name|conf
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
comment|// This makes it MR task
name|context
operator|.
name|getQueryPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExecDriver
argument_list|()
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// This makes it Tez task
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|TezWork
name|tezWork
init|=
operator|new
name|TezWork
argument_list|(
literal|"test_queryid"
argument_list|)
decl_stmt|;
name|tezWork
operator|.
name|add
argument_list|(
name|mapWork
argument_list|)
expr_stmt|;
name|TezTask
name|task
init|=
operator|new
name|TezTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setId
argument_list|(
literal|"id1"
argument_list|)
expr_stmt|;
name|task
operator|.
name|setWork
argument_list|(
name|tezWork
argument_list|)
expr_stmt|;
name|context
operator|.
name|getQueryPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|context
operator|.
name|getQueryPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TezTask
argument_list|()
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// This makes it llap task
name|mapWork
operator|.
name|setLlapMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ProtoMessageReader
argument_list|<
name|HiveHookEventProto
argument_list|>
name|reader
init|=
name|getTestReader
argument_list|(
name|conf
argument_list|,
name|tmpFolder
argument_list|)
decl_stmt|;
name|HiveHookEventProto
name|event
init|=
name|reader
operator|.
name|readEvent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionMode
operator|.
name|MR
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getExecutionMode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|event
operator|.
name|getQueue
argument_list|()
argument_list|,
literal|"mr_queue"
argument_list|)
expr_stmt|;
name|event
operator|=
name|reader
operator|.
name|readEvent
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionMode
operator|.
name|TEZ
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getExecutionMode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|event
operator|.
name|getQueue
argument_list|()
argument_list|,
literal|"tez_queue"
argument_list|)
expr_stmt|;
name|event
operator|=
name|reader
operator|.
name|readEvent
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionMode
operator|.
name|LLAP
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getExecutionMode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|event
operator|.
name|getQueue
argument_list|()
argument_list|,
literal|"llap_queue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
argument_list|(
literal|"might fail intermittently"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testDropsEventWhenQueueIsFull
parameter_list|()
throws|throws
name|Exception
block|{
name|EventLogger
name|evtLogger
init|=
operator|new
name|EventLogger
argument_list|(
name|conf
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|setHookType
argument_list|(
name|HookType
operator|.
name|PRE_EXEC_HOOK
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ProtoMessageReader
argument_list|<
name|HiveHookEventProto
argument_list|>
name|reader
init|=
name|getTestReader
argument_list|(
name|conf
argument_list|,
name|tmpFolder
argument_list|)
decl_stmt|;
name|reader
operator|.
name|readEvent
argument_list|()
expr_stmt|;
name|reader
operator|.
name|readEvent
argument_list|()
expr_stmt|;
name|reader
operator|.
name|readEvent
argument_list|()
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|readEvent
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected 3 events due to queue capacity limit, got 4."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreAndPostEventBoth
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|setHookType
argument_list|(
name|HookType
operator|.
name|PRE_EXEC_HOOK
argument_list|)
expr_stmt|;
name|EventLogger
name|evtLogger
init|=
operator|new
name|EventLogger
argument_list|(
name|conf
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|setHookType
argument_list|(
name|HookType
operator|.
name|POST_EXEC_HOOK
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ProtoMessageReader
argument_list|<
name|HiveHookEventProto
argument_list|>
name|reader
init|=
name|getTestReader
argument_list|(
name|conf
argument_list|,
name|tmpFolder
argument_list|)
decl_stmt|;
name|HiveHookEventProto
name|event
init|=
name|reader
operator|.
name|readEvent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Pre hook event not found"
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|QUERY_SUBMITTED
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|=
name|reader
operator|.
name|readEvent
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Post hook event not found"
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|QUERY_COMPLETED
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostEventLog
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|setHookType
argument_list|(
name|HookType
operator|.
name|POST_EXEC_HOOK
argument_list|)
expr_stmt|;
name|context
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogBegin
argument_list|(
literal|"test"
argument_list|,
literal|"LogTest"
argument_list|)
expr_stmt|;
name|context
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogEnd
argument_list|(
literal|"test"
argument_list|,
literal|"LogTest"
argument_list|)
expr_stmt|;
name|EventLogger
name|evtLogger
init|=
operator|new
name|EventLogger
argument_list|(
name|conf
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|HiveHookEventProto
name|event
init|=
name|loadEvent
argument_list|(
name|conf
argument_list|,
name|tmpFolder
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|QUERY_COMPLETED
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|event
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_user"
argument_list|,
name|event
operator|.
name|getRequestUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_queryId"
argument_list|,
name|event
operator|.
name|getHiveQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_op_id"
argument_list|,
name|event
operator|.
name|getOperationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|STATUS
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|val
init|=
name|findOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|PERF
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readValue
argument_list|(
name|val
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
comment|// This should be really close to zero.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected LogTest in PERF"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"LogTest"
argument_list|)
operator|<
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailureEventLog
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|setHookType
argument_list|(
name|HookType
operator|.
name|ON_FAILURE_HOOK
argument_list|)
expr_stmt|;
name|EventLogger
name|evtLogger
init|=
operator|new
name|EventLogger
argument_list|(
name|conf
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|evtLogger
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|HiveHookEventProto
name|event
init|=
name|loadEvent
argument_list|(
name|conf
argument_list|,
name|tmpFolder
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|QUERY_COMPLETED
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|event
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_user"
argument_list|,
name|event
operator|.
name|getRequestUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_queryId"
argument_list|,
name|event
operator|.
name|getHiveQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_op_id"
argument_list|,
name|event
operator|.
name|getOperationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|STATUS
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertOtherInfo
argument_list|(
name|event
argument_list|,
name|OtherInfoType
operator|.
name|PERF
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRolloverFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|waitTime
init|=
literal|100
decl_stmt|;
name|context
operator|.
name|setHookType
argument_list|(
name|HookType
operator|.
name|PRE_EXEC_HOOK
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|ConfVars
operator|.
name|HIVE_PROTO_EVENTS_ROLLOVER_CHECK_INTERVAL
operator|.
name|varname
argument_list|,
name|waitTime
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|tmpFolder
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|AtomicLong
name|time
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|EventLogger
name|evtLogger
init|=
operator|new
name|EventLogger
argument_list|(
name|conf
argument_list|,
parameter_list|()
lambda|->
name|time
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|evtLogger
operator|.
name|handle
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|int
name|statusLen
init|=
literal|0
decl_stmt|;
comment|// Loop to ensure that we give some grace for scheduling issues.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
operator|+
literal|100
argument_list|)
expr_stmt|;
name|statusLen
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|statusLen
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statusLen
argument_list|)
expr_stmt|;
comment|// Move to next day and ensure a new file gets created.
name|time
operator|.
name|set
argument_list|(
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|+
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
operator|+
literal|100
argument_list|)
expr_stmt|;
name|statusLen
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|statusLen
operator|>
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statusLen
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ProtoMessageReader
argument_list|<
name|HiveHookEventProto
argument_list|>
name|getTestReader
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|tmpFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|tmpFolder
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|DatePartitionedLogger
argument_list|<
name|HiveHookEventProto
argument_list|>
name|logger
init|=
operator|new
name|DatePartitionedLogger
argument_list|<>
argument_list|(
name|HiveHookEventProto
operator|.
name|PARSER
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|logger
operator|.
name|getReader
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|HiveHookEventProto
name|loadEvent
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|tmpFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|ProtoMessageReader
argument_list|<
name|HiveHookEventProto
argument_list|>
name|reader
init|=
name|getTestReader
argument_list|(
name|conf
argument_list|,
name|tmpFolder
argument_list|)
decl_stmt|;
name|HiveHookEventProto
name|event
init|=
name|reader
operator|.
name|readEvent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
name|event
return|;
block|}
specifier|private
name|String
name|findOtherInfo
parameter_list|(
name|HiveHookEventProto
name|event
parameter_list|,
name|OtherInfoType
name|key
parameter_list|)
block|{
for|for
control|(
name|MapFieldEntry
name|otherInfo
range|:
name|event
operator|.
name|getOtherInfoList
argument_list|()
control|)
block|{
if|if
condition|(
name|otherInfo
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|otherInfo
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Cannot find key "
operator|+
name|key
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|assertOtherInfo
parameter_list|(
name|HiveHookEventProto
name|event
parameter_list|,
name|OtherInfoType
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|String
name|val
init|=
name|findOtherInfo
argument_list|(
name|event
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

